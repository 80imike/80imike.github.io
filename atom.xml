<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>运维之美</title>
  
  <subtitle>种一棵树最好的时间是十年前，其次是现在。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.hi-linux.com/"/>
  <updated>2020-05-23T04:11:01.303Z</updated>
  <id>https://www.hi-linux.com/</id>
  
  <author>
    <name>Mike</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>推荐一个 Linux 计划任务 Crontab 在线生成器</title>
    <link href="https://www.hi-linux.com/posts/23704.html"/>
    <id>https://www.hi-linux.com/posts/23704.html</id>
    <published>2020-05-23T01:30:00.000Z</published>
    <updated>2020-05-23T04:11:01.303Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><code>Linux / Unix</code> 系统里有一个很方便的程序「例行性计划任务」（Crontab），接触过的朋友一定不陌生。Crontab 主要是让系统去执行一些固定时间要自动进行的例行性工作，最常用的例如备份资料、移除暂存文件、更新或重新启动等等。如果将某个周期执行一次的指令写进 <code>Crontab</code>，它就会随着系统时间的推移在你指定的时间自动执行，减少每次都必须重复执行相同工作的麻烦。</p><p><code>Crontab</code> 有几种设定方法，最直观的是在图形化控制台（例如 <code>cPanel</code>）上操作，一般使用者可能会在命令行编辑 <code>/etc/crontab</code> 文件。但令我困扰的是 <code>Crontab</code> 时间格式写法有些复杂，如果没有参考说明文档就很难写出正确格式。或者你想要让计划任务时间更细粒度、更有弹性，你就必须知道怎么样以标准格式来描述要执行某个例行性工作的时间。</p><p>最近无意间发现一个很好用的免费工具「<code>Crontab.guru</code>」，它是一个更快速、更简单的在线计划任务编辑器。无须额外下载安装任何程序，只要依照 <code>Crontab.guru</code> 指定每列的时间，就可以快速完成计划任务时间的设定。它除了会以英文来描述这个时间，让使用者更容易理解外，你只要将结果复制粘贴到 <code>Crontab</code> 就能设定好指定的计划任务。</p><p>下面我们将以图文方式来叙述「<code>Crontab.guru</code>」工具的使用方法。</p><blockquote><ol><li><p>网站名称：Crontab.guru</p></li><li><p>网站链接：<a href="https://crontab.guru/" target="_blank" rel="noopener">https://crontab.guru/</a></p></li></ol></blockquote><a id="more"></a><h2 id="使用方法">使用方法</h2><ol><li>STEP 1</li></ol><p>开启 <code>Crontab.guru</code> 网站后，主要功能就在网站上方，也就是你看到的那一条可编辑列。</p><p><img src="https://i2.wp.com/free.com.tw/blog/wp-content/uploads/2017/01/Crontab.guru2017-01-12_1242.png" alt=""></p><p>预设情况每次开启 <code>Crontab.guru</code> 网站时都会自动跳出一组计划任务时间写法。你可以注意看一下每一个数字底下都会有对应的单位，由左至右分别是分钟、小时、日、月和周。下方还会告诉你这些列的表示法，例如可以用 <code>*</code> 代表任何数值、以 <code>,</code> 分隔多个数值等等。</p><p><img src="https://i0.wp.com/free.com.tw/blog/wp-content/uploads/2017/01/Crontab.guru2017-01-12_1243.png" alt=""></p><ol start="2"><li>STEP 2</li></ol><p>前面我们有说过 <code>Crontab.guru</code> 本身就是一个简单方便的 <code>Crontab</code> 编辑器，因此使用者可以直接选取数字将它改成你要的计划时间。在编辑时 <code>Crontab.guru</code> 还会同步在上方「描述」标示出这个数值代表的意思，例如：下图我在编辑的「21」是代表 <code>hour</code>，也就是指晚上九点 。</p><p><img src="https://i0.wp.com/free.com.tw/blog/wp-content/uploads/2017/01/Crontab.guru2017-01-12_1247.png" alt=""></p><p>每列都有不同的表达方式，例如加上 <code>,</code> 逗号来分隔多个数值、加上 <code>*</code> 代表任何数值，也能使用 <code>–</code> 来描述某个区间，修改时底下会告诉你可以使用的数值有那一些。</p><p><img src="https://i0.wp.com/free.com.tw/blog/wp-content/uploads/2017/01/Crontab.guru2017-01-12_1247-1.png" alt=""></p><ol start="3"><li>STEP 3</li></ol><p>如果要描述「0 0,12 1 */2 *」这样复杂的计划任务，或许你很难马上理解过来。<code>Crontab.guru</code> 的好处是它会转为英文描述显示于网站上方，我们就能很清楚知道这是指「每两个月的第一天当日的 0 点、12 点」。</p><p><img src="https://i0.wp.com/free.com.tw/blog/wp-content/uploads/2017/01/Crontab.guru2017-01-12_1248.png" alt=""></p><p>如果你想知道一些固定的时间写法范本，<code>Crontab.guru</code> 也有一个「Examples」页面。里面收录许多范例，例如：每小时、每半天、每周、每季或每半年等等。</p><h2 id="总结">总结</h2><p>至此，利用 <code>Crontab.guru</code> 快速设定计划任务的方法就介绍完了。最后在这里再推荐另一个类似的在线计划任务生成工具 <code>Linux Crontab Generator</code>，它的使用方法和 <code>Crontab.guru</code> 类似，但功能更加强大！</p><blockquote><p>项目地址：<a href="https://helloacm.com/crontab-generator/" target="_blank" rel="noopener">https://helloacm.com/crontab-generator/</a></p></blockquote><p><img src="https://i.loli.net/2019/11/12/Q8Gr37qzdpuh4mD.png" alt=""></p><blockquote><p>来源：免费资源网络社群</p><p>原文：<a href="https://url.cn/5SzHje6" target="_blank" rel="noopener">https://url.cn/5SzHje6</a></p><p>题图：来自谷歌图片搜索</p><p>版权：本文版权归原作者所有</p><p>投稿：欢迎投稿，邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a></p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Linux / Unix&lt;/code&gt; 系统里有一个很方便的程序「例行性计划任务」（Crontab），接触过的朋友一定不陌生。Crontab 主要是让系统去执行一些固定时间要自动进行的例行性工作，最常用的例如备份资料、移除暂存文件、更新或重新启动等等。如果将某个周期执行一次的指令写进 &lt;code&gt;Crontab&lt;/code&gt;，它就会随着系统时间的推移在你指定的时间自动执行，减少每次都必须重复执行相同工作的麻烦。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Crontab&lt;/code&gt; 有几种设定方法，最直观的是在图形化控制台（例如 &lt;code&gt;cPanel&lt;/code&gt;）上操作，一般使用者可能会在命令行编辑 &lt;code&gt;/etc/crontab&lt;/code&gt; 文件。但令我困扰的是 &lt;code&gt;Crontab&lt;/code&gt; 时间格式写法有些复杂，如果没有参考说明文档就很难写出正确格式。或者你想要让计划任务时间更细粒度、更有弹性，你就必须知道怎么样以标准格式来描述要执行某个例行性工作的时间。&lt;/p&gt;
&lt;p&gt;最近无意间发现一个很好用的免费工具「&lt;code&gt;Crontab.guru&lt;/code&gt;」，它是一个更快速、更简单的在线计划任务编辑器。无须额外下载安装任何程序，只要依照 &lt;code&gt;Crontab.guru&lt;/code&gt; 指定每列的时间，就可以快速完成计划任务时间的设定。它除了会以英文来描述这个时间，让使用者更容易理解外，你只要将结果复制粘贴到 &lt;code&gt;Crontab&lt;/code&gt; 就能设定好指定的计划任务。&lt;/p&gt;
&lt;p&gt;下面我们将以图文方式来叙述「&lt;code&gt;Crontab.guru&lt;/code&gt;」工具的使用方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;网站名称：Crontab.guru&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网站链接：&lt;a href=&quot;https://crontab.guru/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://crontab.guru/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Crontab" scheme="https://www.hi-linux.com/tags/Crontab/"/>
    
  </entry>
  
  <entry>
    <title>推荐一个强大到可让任何程序秒变系统服务的神器 EasyService</title>
    <link href="https://www.hi-linux.com/posts/9752.html"/>
    <id>https://www.hi-linux.com/posts/9752.html</id>
    <published>2020-05-23T01:20:00.000Z</published>
    <updated>2020-05-23T04:05:17.728Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2 id="什么是-easyservice">什么是 EasyService</h2><p>如果你的 <code>Windows</code> 程序需要在后台长期运行，而且你希望它在开机后用户登录之前就自动运行、且在用户注销之后也不停止，那么你需要将程序注册为一个系统服务。</p><p>然而，在 <code>Windows</code> 下编写一个可注册为系统服务的程序并不是一件简单的事情。首先，程序必须是二进制的可执行程序，这就排除了脚本语言和虚拟机语言；其次，程序必须按系统服务的格式编写，过程相当繁琐。</p><p><code>EasyService</code> 是一个可以将常规程序注册为系统服务的工具，体积只有 16KB 。你可以按常规的方法编写程序，然后用 <code>EasyService</code> 注册为一个系统服务，这样你的程序就可以在开机后用户登录之前自动运行、且在用户注销之后也不会停止。</p><p>如果你需要在 <code>Windows</code> 系统下部署网站、<code>API</code> 或其他需要长期在后台运行的服务， <code>EasyService</code> 将是一个很有用的工具。</p><blockquote><p>项目地址：<a href="https://github.com/pandolia/easy-service/" target="_blank" rel="noopener">https://github.com/pandolia/easy-service/</a></p></blockquote><a id="more"></a><h3 id="easyservice-实现原理">EasyService 实现原理</h3><p><code>EasyService</code> 实质是将自己（<code>svc.exe</code>）注册为一个系统服务，此服务启动时，会读取 <code>svc.conf</code> 中的配置。然后创建一个子进程运行 <code>Worker</code> 中指定的程序及命令行参数并监视该子进程。如果发现子进程停止运行，会重新启动一个子进程。而当此服务停止时，会向子进程的标准输入中写入数据 “<code>exit</code>” ，并等待子进程退出，如果等待时间超过 10 秒，则直接终止子进程。</p><h2 id="使用-easyservice">使用 EasyService</h2><ol><li><code>EasyService</code> 对程序仅有一个强制要求和一个建议。</li></ol><ul><li><p>强制要求： 程序应持续运行</p></li><li><p>建议： 当程序的标准输入接收到 “<code>exit</code>” 后在 10 秒之内退出</p></li></ul><p>这类型典型的程序有很多，比如：命令行内网穿透 <code>frp</code> 工具、各种 <code>Nodejs</code>、<code>Python</code> 小工具等等。</p><ol start="2"><li>安装 EasyService</li></ol><p>安装 <code>EasyService</code> 的前提是系统已安装 <code>.NetFramework 4.0</code> （大部分 <code>Windows</code> 系统都已自带）。然后你就可以通过下面的地址下载对应的安装程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;pandolia&#x2F;easy-service&#x2F;archive&#x2F;master.zip</span><br></pre></td></tr></table></figure><ol start="3"><li>编辑配置文件</li></ol><p>解压上面的安装压缩包，然后打开 <code>svc.conf</code> 文件，并根据需求修改配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 需要注册成 Windows 系统服务的名称，不能与系统中已有服务重名</span><br><span class="line">ServiceName: An Easy Service</span><br><span class="line"></span><br><span class="line"># 需要运行的可执行程序及命令行参数</span><br><span class="line">Worker: node index.js</span><br><span class="line"></span><br><span class="line"># 程序运行的工作目录，请确保该目录已存在</span><br><span class="line">WorkingDir: worker</span><br><span class="line"></span><br><span class="line"># 输出目录，程序运行过程的输出将会写到这个目录下面，请确保该目录已存在</span><br><span class="line">OutFileDir: outfiles</span><br><span class="line"></span><br><span class="line"># 程序输出的编码形式，如果不确定，请设为空或 none</span><br><span class="line">WorkerEncoding: utf8</span><br></pre></td></tr></table></figure><ol start="4"><li>注册成为一个服务</li></ol><p>用管理员账号登录系统后，在 <code>svc.exe</code> 所在的目录下打开命令行窗口。</p><ul><li><p>首先，运行 <code>svc check</code> 命令检查配置是否合法。</p></li><li><p>其次，运行 <code>svc test-worker</code> 命令测试 <code>Worker</code> 程序是否能正常运行。</p></li></ul><p>测试无误后，接着执行以下命令。</p><ul><li>运行 <code>svc install</code> 命令注册并启动系统服务，此时你的程序就已经开始运行了。即便用户注销也不会停止运行，且系统开机后、用户登录之前就会自动运行。你在服务管理控制台中也可以查看已注册的服务。</li></ul><blockquote><p>注意：<code>Windows 10</code> 系统下，需要先在开始菜单中搜索 <code>cmd</code> 命令。然后右键以管理员身份运行后，再切换到 <code>svc.conf</code> 所在的目录并执行以上命令。</p></blockquote><p>如果要在命令行下管理新注册的服务，你可以使用以下这些命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ svc stop # 停止一个服务</span><br><span class="line">$ svc start # 启动一个服务</span><br><span class="line">$ svc restart # 重启一个服务</span><br><span class="line">$ svc remove # 删除一个服务</span><br></pre></td></tr></table></figure><ol start="5"><li>注册多个服务</li></ol><p>如果需要注册多个服务，你可以先新建多个目录，并将 <code>svc.exe</code> 和 <code>svc.conf</code> 拷贝到这些目录。然后修改各目录 <code>svc.conf</code> 文件中的服务名和程序名等内容。最后，再在这些目录下以管理员权限打开命令行窗口执行 <code>svc check|test-worker|install</code> 等命令就可以了。需要注意的是：</p><ul><li><p>不同目录下的服务名不能相同，也不能和系统已有的服务同名。</p></li><li><p>配置文件中的 <code>Worker/WorkingDir/OutFileDir</code> 都是相对于该配置文件的路径。</p></li><li><p>注册服务之前，<code>WorkingDir/OutFileDir</code> 所指定的目录必须先创建好。</p></li></ul><p>至此，如何利用 <code>EasyService</code> 快速注册一个服务的方法就介绍完了，你学会了吗？</p><h2 id="参考文档">参考文档</h2><ol><li><p><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></p></li><li><p><a href="https://github.com/pandolia/easy-service" target="_blank" rel="noopener">https://github.com/pandolia/easy-service</a></p></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-EasyService&quot;&gt;什么是 EasyService&lt;/h2&gt;
&lt;p&gt;如果你的 &lt;code&gt;Windows&lt;/code&gt; 程序需要在后台长期运行，而且你希望它在开机后用户登录之前就自动运行、且在用户注销之后也不停止，那么你需要将程序注册为一个系统服务。&lt;/p&gt;
&lt;p&gt;然而，在 &lt;code&gt;Windows&lt;/code&gt; 下编写一个可注册为系统服务的程序并不是一件简单的事情。首先，程序必须是二进制的可执行程序，这就排除了脚本语言和虚拟机语言；其次，程序必须按系统服务的格式编写，过程相当繁琐。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;EasyService&lt;/code&gt; 是一个可以将常规程序注册为系统服务的工具，体积只有 16KB 。你可以按常规的方法编写程序，然后用 &lt;code&gt;EasyService&lt;/code&gt; 注册为一个系统服务，这样你的程序就可以在开机后用户登录之前自动运行、且在用户注销之后也不会停止。&lt;/p&gt;
&lt;p&gt;如果你需要在 &lt;code&gt;Windows&lt;/code&gt; 系统下部署网站、&lt;code&gt;API&lt;/code&gt; 或其他需要长期在后台运行的服务， &lt;code&gt;EasyService&lt;/code&gt; 将是一个很有用的工具。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/pandolia/easy-service/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/pandolia/easy-service/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Windows" scheme="https://www.hi-linux.com/categories/Windows/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="EasyService" scheme="https://www.hi-linux.com/tags/EasyService/"/>
    
      <category term="Windows" scheme="https://www.hi-linux.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>分享一些让你提升命令行效率的 Bash 快捷键( 强烈建议收藏！)</title>
    <link href="https://www.hi-linux.com/posts/33391.html"/>
    <id>https://www.hi-linux.com/posts/33391.html</id>
    <published>2020-05-23T01:10:00.000Z</published>
    <updated>2020-05-23T03:59:53.200Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>做为一个 <code>Linux</code> 用户，一定经常和命令行打交道。而绝大多数 <code>Linux</code> 发行版默认的 <code>Shell</code> 都是 <code>Bash</code>，本文将给大家介绍一些 <code>Bash</code> 中非常实用的快捷键操作方法。你只要掌握了这些快捷键后，将极大的提高你的命令行操作效率，让你在使用 <code>SHELL</code> 的时候效率可以快得飞起来。</p><h2 id="编辑命令">编辑命令</h2><ul><li><p><code>Ctrl + a</code>：移到命令行首</p></li><li><p><code>Ctrl + e</code> ：移到命令行尾</p></li><li><p><code>Ctrl + f</code> ：按字符前移（右向）</p></li><li><p><code>Ctrl + b</code> ：按字符后移（左向）</p></li><li><p><code>Alt + f</code> ：按单词前移（右向）</p></li><li><p><code>Alt + b</code> ：按单词后移（左向）</p></li><li><p><code>Ctrl + xx</code>：在命令行首和光标之间移动</p></li><li><p><code>Ctrl + u</code> ：从光标处删除至命令行首</p></li><li><p><code>Ctrl + k</code> ：从光标处删除至命令行尾</p></li><li><p><code>Ctrl + w</code> ：从光标处删除至字首</p></li><li><p><code>Alt + d</code> ：从光标处删除至字尾</p></li><li><p><code>Ctrl + d</code> ：删除光标处的字符</p></li><li><p><code>Ctrl + h</code> ：删除光标前的字符</p></li><li><p><code>Ctrl + y</code> ：粘贴至光标后</p></li><li><p><code>Alt + c</code> ：从光标处更改为首字母大写的单词</p></li><li><p><code>Alt + u</code> ：从光标处更改为全部大写的单词</p></li><li><p><code>Alt + l</code> ：从光标处更改为全部小写的单词</p></li><li><p><code>Ctrl + t</code> ：交换光标处和之前的字符</p></li><li><p><code>Alt + t</code> ：交换光标处和之前的单词</p></li><li><p><code>Alt + Backspace</code>：与 <code>Ctrl + w</code> 相同，分隔符有些差别。</p></li></ul><a id="more"></a><h2 id="重新执行命令">重新执行命令</h2><ul><li><p><code>Ctrl + r</code>：逆向搜索命令历史</p></li><li><p><code>Ctrl + g</code>：从历史搜索模式退出</p></li><li><p><code>Ctrl + p</code>：历史中的上一条命令</p></li><li><p><code>Ctrl + n</code>：历史中的下一条命令</p></li><li><p><code>Alt + .</code>：使用上一条命令的最后一个参数</p></li></ul><h2 id="控制命令">控制命令</h2><ul><li><p><code>Ctrl + l</code>：清屏</p></li><li><p><code>Ctrl + o</code>：执行当前命令，并选择上一条命令</p></li><li><p><code>Ctrl + s</code>：阻止屏幕输出</p></li><li><p><code>Ctrl + q</code>：允许屏幕输出</p></li><li><p><code>Ctrl + c</code>：终止命令</p></li><li><p><code>Ctrl + z</code>：挂起命令</p></li></ul><h2 id="bang-命令">Bang (!) 命令</h2><ul><li><p><code>!!</code>：执行上一条命令</p></li><li><p><code>!blah</code>：执行最近的以 <code>blah</code> 开头的命令，如 <code>!ls</code></p></li><li><p><code>!blah:p</code>：仅打印输出，而不执行</p></li><li><p><code>!$</code>：上一条命令的最后一个参数，与 <code>Alt + .</code> 相同</p></li><li><p><code>!$:p</code>：打印输出 <code>!$</code> 的内容</p></li><li><p><code>!*</code>：上一条命令的所有参数</p></li><li><p><code>!*:p</code>：打印输出 <code>!*</code> 的内容</p></li><li><p><code>^blah</code>：删除上一条命令中的 <code>blah</code></p></li><li><p><code>^blah^foo</code>：将上一条命令中的 <code>blah</code> 替换为 <code>foo</code></p></li><li><p><code>^blah^foo^</code>：将上一条命令中所有的 <code>blah</code> 都替换为 <code>foo</code></p></li></ul><p><strong>友情提示：</strong></p><ol><li><p>以上介绍的大多数 <code>Bash</code> 快捷键仅当在 <code>Emacs</code> 编辑模式时有效。若你将 <code>Bash</code> 配置为 <code>VI</code> 编辑模式，那将遵循 <code>VI</code>  的按键绑定。<code>Bash</code> 默认为 <code>Emacs</code> 编辑模式，如果你的 <code>Bash</code> 不在 <code>Emacs</code> 编辑模式，可通过 <code>set -o emacs</code> 进行设置。</p></li><li><p><code>^S</code>、<code>^Q</code>、<code>^C</code>、<code>^Z</code> 是由终端设备处理的，可用 <code>stty</code> 命令设置。</p></li></ol><blockquote><p>来源：LinuxTOY</p><p>原文：<a href="https://url.cn/5Sj2PRE" target="_blank" rel="noopener">https://url.cn/5Sj2PRE</a></p><p>题图：来自谷歌图片搜索</p><p>版权：本文版权归原作者所有</p><p>投稿：欢迎投稿，邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a></p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做为一个 &lt;code&gt;Linux&lt;/code&gt; 用户，一定经常和命令行打交道。而绝大多数 &lt;code&gt;Linux&lt;/code&gt; 发行版默认的 &lt;code&gt;Shell&lt;/code&gt; 都是 &lt;code&gt;Bash&lt;/code&gt;，本文将给大家介绍一些 &lt;code&gt;Bash&lt;/code&gt; 中非常实用的快捷键操作方法。你只要掌握了这些快捷键后，将极大的提高你的命令行操作效率，让你在使用 &lt;code&gt;SHELL&lt;/code&gt; 的时候效率可以快得飞起来。&lt;/p&gt;
&lt;h2 id=&quot;编辑命令&quot;&gt;编辑命令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Ctrl + a&lt;/code&gt;：移到命令行首&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Ctrl + e&lt;/code&gt; ：移到命令行尾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Ctrl + f&lt;/code&gt; ：按字符前移（右向）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Ctrl + b&lt;/code&gt; ：按字符后移（左向）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Alt + f&lt;/code&gt; ：按单词前移（右向）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Alt + b&lt;/code&gt; ：按单词后移（左向）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Ctrl + xx&lt;/code&gt;：在命令行首和光标之间移动&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Ctrl + u&lt;/code&gt; ：从光标处删除至命令行首&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Ctrl + k&lt;/code&gt; ：从光标处删除至命令行尾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Ctrl + w&lt;/code&gt; ：从光标处删除至字首&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Alt + d&lt;/code&gt; ：从光标处删除至字尾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Ctrl + d&lt;/code&gt; ：删除光标处的字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Ctrl + h&lt;/code&gt; ：删除光标前的字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Ctrl + y&lt;/code&gt; ：粘贴至光标后&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Alt + c&lt;/code&gt; ：从光标处更改为首字母大写的单词&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Alt + u&lt;/code&gt; ：从光标处更改为全部大写的单词&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Alt + l&lt;/code&gt; ：从光标处更改为全部小写的单词&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Ctrl + t&lt;/code&gt; ：交换光标处和之前的字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Alt + t&lt;/code&gt; ：交换光标处和之前的单词&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Alt + Backspace&lt;/code&gt;：与 &lt;code&gt;Ctrl + w&lt;/code&gt; 相同，分隔符有些差别。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="工具" scheme="https://www.hi-linux.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>推荐一个强大的环境变量管理工具 direnv</title>
    <link href="https://www.hi-linux.com/posts/8174.html"/>
    <id>https://www.hi-linux.com/posts/8174.html</id>
    <published>2020-05-23T01:00:00.000Z</published>
    <updated>2020-05-23T03:54:11.650Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><code>direnv</code> 是一个强大的环境变量管理工具，可以帮助我们简化环境变量管理。它可以根据当前目录自动加载或卸载环境变量，允许不同项目使用特定的环境变量。</p><p>项目地址：<a href="https://github.com/direnv/direnv/releases" target="_blank" rel="noopener">https://github.com/direnv/direnv/releases</a></p><h2 id="direnv-安装">direnv 安装</h2><p><code>direnv</code> 是基于 Go 语言开发，原生支持多平台，安装起来也是很简单的。</p><ol><li>通过二进制版本安装</li></ol><p>这里以 <code>Linux</code> 平台为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget -c https:&#x2F;&#x2F;github.com&#x2F;direnv&#x2F;direnv&#x2F;releases&#x2F;download&#x2F;v2.20.0&#x2F;direnv.linux-amd64</span><br><span class="line">$ mv direnv.linux-amd64 direnv</span><br><span class="line">$ sudo mv direnv &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure><p>如果你使用的是其它平台，可在官方项目地址的 Releases 页面自行下载对应操作系统的文件。</p><a id="more"></a><ol start="2"><li>配置以及集成 Shell</li></ol><p>针对不同的 Shell 使用不同的 Hook 方式进行关联，这里我们说说最常用的两种 Bash 和 ZSH。</p><ul><li>Bash</li></ul><p>如果你使用的是 Bash，直接运行下面的命令即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval &quot;$(direnv hook bash)&quot;</span><br></pre></td></tr></table></figure><p>如果你想长期使用 <code>direnv</code>，可以将以上命令加入到 <code>~/.bashrc</code> 文件中。</p><ul><li>ZSH</li></ul><p>如果你使用的是 ZSH，直接运行下面的命令即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval &quot;$(direnv hook zsh)&quot;</span><br></pre></td></tr></table></figure><p>同样，如果你需要长期使用 <code>direnv</code>，可以将以上命令加入到 <code>~/.zshrc</code> 文件中。</p><p>到这里，安装就算完成了，下面我们看看怎么使用吧。</p><h2 id="direnv-使用">direnv 使用</h2><p>这里我们创建两个目录，分别叫 myenv1 和 myenv2，然后我们测试分别进入不同目录时自动切换环境变量。</p><ol><li>在 myenv1 目录下创建一个 <code>.envrc</code> 文件，并设置了一个环境变量并打印欢迎消息，内容如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vim .envrc</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">export myenv&#x3D;myenv1</span><br><span class="line">echo -e &quot;\e[1;34m##################################################\e[0m&quot;</span><br><span class="line">echo -e &quot;\e[1;34m#               Welcome to $myenv                #\e[0m&quot;</span><br><span class="line">echo -e &quot;\e[1;34m##################################################\e[0m&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li>同样也在 myenv2 目录下创建一个 <code>.envrc</code> 文件，并设置了一个环境变量并打印欢迎消息，内容如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vim .envrc</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">export myenv&#x3D;myenv2</span><br><span class="line">echo -e &quot;\e[1;34m##################################################\e[0m&quot;</span><br><span class="line">echo -e &quot;\e[1;34m#               Welcome to $myenv                #\e[0m&quot;</span><br><span class="line">echo -e &quot;\e[1;34m##################################################\e[0m&quot;</span><br></pre></td></tr></table></figure><p>这里需要注意一下，在编辑文件保存退出时会提示下面的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">direnv: error .envrc is blocked. Run &#96;direnv allow&#96; to approve its content.</span><br></pre></td></tr></table></figure><p>此时，我们需要使用下面命令使修改生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ direnv allow</span><br></pre></td></tr></table></figure><ol start="3"><li>下面看看分别进入 myenv1 和 myenv2 目录时环境变量的变化。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 进行 myenv1 目录</span><br><span class="line">$ cd myenv1</span><br><span class="line">direnv: loading .envrc</span><br><span class="line">##################################################</span><br><span class="line">#               Welcome to myenv1                #</span><br><span class="line">##################################################</span><br><span class="line">direnv: export +myenv</span><br><span class="line"></span><br><span class="line">$ env | grep myenv</span><br><span class="line">DIRENV_DIR&#x3D;-&#x2F;home&#x2F;mike&#x2F;test&#x2F;myenv1</span><br><span class="line">PWD&#x3D;&#x2F;home&#x2F;mike&#x2F;test&#x2F;myenv1</span><br><span class="line">myenv&#x3D;myenv1</span><br><span class="line"></span><br><span class="line"># 进行 myenv2 目录</span><br><span class="line">$ cd myenv2</span><br><span class="line">direnv: loading .envrc</span><br><span class="line">##################################################</span><br><span class="line">#               Welcome to myenv2                #</span><br><span class="line">##################################################</span><br><span class="line">direnv: export +myenv</span><br><span class="line"></span><br><span class="line">$ env | grep myenv</span><br><span class="line">DIRENV_DIR&#x3D;-&#x2F;home&#x2F;mike&#x2F;test&#x2F;myenv2</span><br><span class="line">PWD&#x3D;&#x2F;home&#x2F;mike&#x2F;test&#x2F;myenv2</span><br><span class="line">myenv&#x3D;myenv2</span><br></pre></td></tr></table></figure><p>至此，<code>direnv</code> 的基本功能就演示完了。但 <code>direnv</code> 的功能远不止这些，更多的高级功能如果你有兴趣可以自行发掘。</p><h2 id="参考文档">参考文档</h2><ol><li><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></li><li><a href="https://www.cnblogs.com/rongfengliang/p/10730008.html" target="_blank" rel="noopener">https://www.cnblogs.com/rongfengliang/p/10730008.html</a></li><li><a href="https://www.jianshu.com/p/efbc215f65ef" target="_blank" rel="noopener">https://www.jianshu.com/p/efbc215f65ef</a></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;direnv&lt;/code&gt; 是一个强大的环境变量管理工具，可以帮助我们简化环境变量管理。它可以根据当前目录自动加载或卸载环境变量，允许不同项目使用特定的环境变量。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/direnv/direnv/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/direnv/direnv/releases&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;direnv-安装&quot;&gt;direnv 安装&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;direnv&lt;/code&gt; 是基于 Go 语言开发，原生支持多平台，安装起来也是很简单的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过二进制版本安装&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里以 &lt;code&gt;Linux&lt;/code&gt; 平台为例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ wget -c https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;direnv&amp;#x2F;direnv&amp;#x2F;releases&amp;#x2F;download&amp;#x2F;v2.20.0&amp;#x2F;direnv.linux-amd64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mv direnv.linux-amd64 direnv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo mv direnv &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;bin&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你使用的是其它平台，可在官方项目地址的 Releases 页面自行下载对应操作系统的文件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="工具" scheme="https://www.hi-linux.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>全功能开源的企业级安全主动攻击型蜜罐钓鱼系统 HFish，你很有必要部署一套！</title>
    <link href="https://www.hi-linux.com/posts/9153.html"/>
    <id>https://www.hi-linux.com/posts/9153.html</id>
    <published>2020-05-22T01:30:00.000Z</published>
    <updated>2020-05-22T07:08:17.409Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>前段时间我们在「<a href="https://mp.weixin.qq.com/s?__biz=MzI3MTI2NzkxMA==&amp;mid=2247489680&amp;idx=1&amp;sn=3ac65051d44f2772a3ffc0a45ed68d46&amp;chksm=eac539b9ddb2b0afafdaa26e02e7553da883086c9682861b2fe9ecb551adfbf7cb2a9e29b96b&amp;token=1365898234&amp;lang=zh_CN#rd" target="_blank" rel="noopener">巧用 Cowrie 部署 SSH 蜜罐，让黑客攻击无处遁形！</a>」 一文中给大家介绍了一款好用开源的 <code>SSH</code> 蜜罐系统，但遗憾的是这个蜜罐系统只支持 <code>SSH</code> 这一种协议。</p><p>今天，我们就给大家介绍一套功能更加强大、支持跨平台和多种协议的全功能蜜罐钓鱼开源系统 <code>HFish</code>。</p><h2 id="什么是-hfish">什么是 HFish ？</h2><p><code>HFish</code> 是一款基于 <code>Golang + SqlLite</code> 开发的跨平台多功能主动攻击型蜜罐钓鱼平台框架系统。</p><blockquote><p>项目地址：<a href="https://github.com/hacklcx/HFish" target="_blank" rel="noopener">https://github.com/hacklcx/HFish</a></p></blockquote><p><strong>HFish 支持的特性</strong></p><p><img src="https://i.loli.net/2019/12/20/fUC8QWAjn9sc1bB.png" alt=""></p><ul><li><p>多功能：不仅仅支持 <code>HTTP(S)</code> 钓鱼，还支持 <code>SSH</code>、<code>SFTP</code>、<code>Redis</code>、<code>MySQL</code>、<code>MemCache</code>、<code>VNC</code>、<code>ES</code> 等多种蜜罐。</p></li><li><p>扩展性：<code>HFish</code> 提供 <code>API</code> 接口，使用者可以随意扩展钓鱼模块。</p></li><li><p>便捷性：<code>HFish</code> 使用 <code>Golang</code> 开发，使用者可以在多平台上(<code>Windows</code>、<code>MacOS</code>、<code>Linux</code> 等) 上快速进行部署。</p></li></ul><a id="more"></a><p><strong>什么是蜜罐？</strong></p><p>蜜罐技术本质上是一种对攻击方进行 欺骗的技术，通过布置一些作为诱饵的主机、网络服务或者信息，诱使攻击方对它们实施攻击，从而可以对攻击行为进行捕获和分析，了解攻击方所使用的工具与方法，推测攻击意图和动机，能够让防御方清晰地了解他们所面对的安全威胁，并通过技术和管理手段来增强实际系统的安全防护能力。</p><p>蜜罐好比是情报收集系统。蜜罐好像是故意让人攻击的目标，引诱黑客前来攻击。所以攻击者入侵后，你就可以知道他是如何得逞的，随时了解针对服务器发动的最新的攻击和漏洞。还可以通过窃听黑客之间的联系，收集黑客所用的种种工具，并且掌握他们的社交网络。</p><h2 id="部署-hfish">部署 HFish</h2><p><code>HFish</code> 支持单机、集群、<code>Docker</code> 多种形式的部署，部署方法也是非常简单的。</p><h3 id="二进制部署模式">二进制部署模式</h3><ol><li>下载当前系统二进制安装包</li></ol><p>首先通过浏览器打开 <code>https://github.com/hacklcx/HFish/releases</code>，然后下载对应系统的二进制安装包。</p><p><img src="https://i.loli.net/2019/12/20/rqGYfR7nvCKX6pN.png" alt=""></p><ul><li><p><code>darwin</code> 为 <code>MacOS</code> 版本</p></li><li><p><code>arm64</code> 为 <code>ARM</code> 架构的 64 位，可用于树莓派</p></li><li><p><code>386</code> 为 <code>32</code> 位系统， <code>amd64</code> 为 <code>64</code> 位系统</p></li></ul><ol start="2"><li>快速启动 HFish</li></ol><p>二进制安装包下载完成，解压后执行即可。</p><p>2.1 Linux + Mac 平台</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 名字是下载的压缩包，根据实际情况修改</span></span><br><span class="line">$ tar -zxvf HFish-0.5-linux-amd64.tar.gz</span><br><span class="line"><span class="comment"># 名字是解压后压缩包，根据实际情况修改         </span></span><br><span class="line">$ <span class="built_in">cd</span> HFish-0.5-linux-amd64                       </span><br><span class="line">$ chmod 777 -R db                                                        <span class="comment"># sqlite 临时文件需要最高权限</span></span><br><span class="line">$ ./HFish run</span><br></pre></td></tr></table></figure><blockquote><p>注意： db 目录必须要设置 777 最高权限，否则会报 unable to open database file。</p></blockquote><p>2.2 Windown 平台</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 鼠标右键解压压缩包,打开命令终端 (cmd.exe) 进入程序跟目录</span></span><br><span class="line"><span class="comment"># 名字是解压后压缩包，根据实际情况修改</span></span><br><span class="line">$ <span class="built_in">cd</span> c:/HFish-0.5-win-amd64</span><br><span class="line"><span class="comment"># Windows 一样要给 db 目录所有权限，具体方法谷歌搜索。</span></span><br><span class="line">$ ./HFish.exe run</span><br></pre></td></tr></table></figure><ol start="3"><li>访问 HFish</li></ol><p>启动成功后，直接通过浏览器访问 <code>IP：9001</code> 端口即可进行访问。</p><p>默认登陆账号/密码为：admin/admin</p><p><img src="https://hfish.io/docs/images/2.png" alt=""></p><h3 id="docker-部署模式">Docker 部署模式</h3><p>如果你对 <code>Docker</code> 比较了解还可以直接通过 <code>Docker</code> 来一键完成单节点部署或集群部署。</p><ol><li>单节点部署</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name hfish -p 21:21 -p 22:22 -p 23:23 -p 3306:3306 -p 6379:6379 -p 8080:8080 -p 8989:8989 -p 9000:9000 -p 9001:9001 -p 11211:11211 imdevops/hfish:latest</span><br></pre></td></tr></table></figure><ol start="2"><li>集群部署</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主节点部署</span></span><br><span class="line">$ docker run -d --name hfish-master -p 21:21 -p 22:22 -p 23:23 -p 3306:3306 -p 6379:6379 -p 7879:7879 -p 8080:8080 -p 8989:8989 -p 9000:9000 -p 9001:9001 -p 11211:11211 imdevops/hfish:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端子节点部署</span></span><br><span class="line">$ docker run -d --name hfish-client -p 21:21 -p 22:22 -p 23:23 -p 3306:3306 -p 6379:6379 -p 8080:8080 -p 8989:8989 -p 9000:9000 -p 11211:11211 -e CLUSTER_IP=master_ip:7879 -e NODE_NAME=clinet imdevops/hfish:latest</span><br></pre></td></tr></table></figure><p>具体方法可以参考官方文档：<a href="https://hfish.io/docs/#/deploy/docker" target="_blank" rel="noopener">https://hfish.io/docs/#/deploy/docker</a></p><h2 id="配置-hfish">配置 HFish</h2><p><code>HFish</code> 的配置分为服务器端和客户端，大致配置内容基本相同。官方也说得很清楚了，只要按需启用相应服务即可，这里就不再赘述了。</p><h3 id="服务端配置">服务端配置</h3><p>本配置为 <code>Demo</code> 服务端，需要启动 <code>rpc</code> , 修改状态 <code>status</code> 为 <code>1</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">[rpc]</span><br><span class="line">status &#x3D; 1                                   # 模式 0关闭 1服务端 2客户端</span><br><span class="line">addr &#x3D; 127.0.0.1:7879                        # RPC 服务端地址 or 客户端地址</span><br><span class="line">name &#x3D; Server                                # 状态1 服务端名称 状态2 客户端名称</span><br><span class="line"></span><br><span class="line">[admin]                                      # RPC 状态为 2 集群客户端的时候 admin 可以删掉</span><br><span class="line">addr &#x3D; 127.0.0.1:9001                        # 管理后台启动地址</span><br><span class="line">account &#x3D; admin                              # 登录账号</span><br><span class="line">password &#x3D; admin                             # 登录密码</span><br><span class="line"></span><br><span class="line">[api]</span><br><span class="line">status &#x3D; 1                                   # 是否启动 API 1 启动 0 关闭</span><br><span class="line">web_url &#x3D; &#x2F;api&#x2F;v1&#x2F;post&#x2F;report                # 管理后台启动地址</span><br><span class="line">deep_url &#x3D; &#x2F;api&#x2F;v1&#x2F;post&#x2F;deep_report          # 管理后台启动地址</span><br><span class="line">plug_url &#x3D; &#x2F;api&#x2F;v1&#x2F;post&#x2F;plug_report          # 插件蜜罐上报 API</span><br><span class="line">sec_key &#x3D; 9cbf8a4dcb8e30682b927f352d6559a0   # API 认证秘钥</span><br><span class="line"></span><br><span class="line">[plug]</span><br><span class="line">status &#x3D; 0                                   # 是否启动 蜜罐插件 0 关闭 1 启动, 需要先启动 API</span><br><span class="line">addr &#x3D; 0.0.0.0:8989                          # 蜜罐插件 启动地址</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">status &#x3D; 0                                   # 是否启动 WEB 1 启动 0 关闭, 启动 API 后 WEB 方可上报结果</span><br><span class="line">addr &#x3D; 0.0.0.0:9000                          # WEB 启动地址，0.0.0.0 对外开放，127.0.0.1 对内开放 可走 Nginx 反向代理</span><br><span class="line">template &#x3D; wordPress&#x2F;html                    # WEB 模板路径</span><br><span class="line">index &#x3D; index.html                           # WEB 首页文件</span><br><span class="line">static &#x3D; wordPress&#x2F;static                    # WEB 静态文件路径  注意：必须存在两个目录，html 文件 和静态文件 不能平级</span><br><span class="line">url &#x3D; &#x2F;                                      # WEB 访问目录，默认 &#x2F; 可更改成 index.html index.asp index.php</span><br><span class="line"></span><br><span class="line">[deep]</span><br><span class="line">status &#x3D; 0                                   # 是否启动 暗网 1 启动 0 关闭, 启动 API 后 方可上报结果</span><br><span class="line">addr &#x3D; 0.0.0.0:8080                          # 暗网 WEB 启动地址</span><br><span class="line">template &#x3D; deep&#x2F;html                         # 暗网 WEB 模板路径</span><br><span class="line">index &#x3D; index.html                           # 暗网 WEB 首页文件</span><br><span class="line">static &#x3D; deep&#x2F;static                         # 暗网 WEB 静态文件路径  注意：必须存在两个目录，html 文件 和静态文件 不能平级</span><br><span class="line">url &#x3D; &#x2F;                                      # 暗网 WEB 访问目录，默认 &#x2F; 可更改成 index.html index.asp index.php</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">status &#x3D; 0                                   # 是否启动 SSH 1 启动 0 关闭</span><br><span class="line">addr &#x3D; 0.0.0.0:22                            # SSH 服务端地址 注意端口冲突，请先关闭服务器 openssh 服务 或 修改端口</span><br><span class="line"></span><br><span class="line">[redis]</span><br><span class="line">status &#x3D; 0                                   # 是否启动 Redis 1 启动 0 关闭</span><br><span class="line">addr &#x3D; 0.0.0.0:6379                          # Redis 服务端地址 注意端口冲突</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">status &#x3D; 0                                   # 是否启动 Mysql 1 启动 0 关闭</span><br><span class="line">addr &#x3D; 0.0.0.0:3306                          # Mysql 服务端地址 注意端口冲突</span><br><span class="line">files &#x3D; &#x2F;etc&#x2F;passwd,&#x2F;etc&#x2F;group               # Mysql 服务端读取客户端任意文件; 多写逗号分隔，会随机取</span><br><span class="line"></span><br><span class="line">[telnet]</span><br><span class="line">status &#x3D; 0                                   # 是否启动 Telnet 1 启动 0 关闭</span><br><span class="line">addr &#x3D; 0.0.0.0:23                            # Telnet 服务端地址 注意端口冲突</span><br><span class="line"></span><br><span class="line">[ftp]</span><br><span class="line">status &#x3D; 0                                   # 是否启动 Ftp 1 启动 0 关闭</span><br><span class="line">addr &#x3D; 0.0.0.0:21                            # Ftp 服务端地址 注意端口冲突</span><br><span class="line"></span><br><span class="line">[mem_cache]</span><br><span class="line">status &#x3D; 0                                   # 是否启动 MemCache 0 关闭 1 启动</span><br><span class="line">addr &#x3D; 0.0.0.0:11211                         # Memcache 服务端地址 注意端口冲突</span><br><span class="line">rate_limit &#x3D; 4                               # 每秒响应次数</span><br></pre></td></tr></table></figure><h3 id="客户端配置">客户端配置</h3><p>本配置为 <code>Demo</code> 客户端，可删除 <code>admin</code> 配置项。客户端需要启动 <code>rpc</code> , 修改状态 <code>status</code> 为 <code>2</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">[rpc]</span><br><span class="line">status &#x3D; 2                                   # 模式 0关闭 1服务端 2客户端</span><br><span class="line">addr &#x3D; 127.0.0.1:7879                        # RPC 服务端地址 or 客户端地址</span><br><span class="line">name &#x3D; Beijing_Clinet                        # 状态1 服务端名称 状态2 客户端名称</span><br><span class="line"></span><br><span class="line">[api]</span><br><span class="line">status &#x3D; 1                                   # 是否启动 API 1 启动 0 关闭</span><br><span class="line">web_url &#x3D; &#x2F;api&#x2F;v1&#x2F;post&#x2F;report                # 管理后台启动地址</span><br><span class="line">deep_url &#x3D; &#x2F;api&#x2F;v1&#x2F;post&#x2F;deep_report          # 管理后台启动地址</span><br><span class="line">plug_url &#x3D; &#x2F;api&#x2F;v1&#x2F;post&#x2F;plug_report          # 插件蜜罐上报 API</span><br><span class="line">sec_key &#x3D; 9cbf8a4dcb8e30682b927f352d6559a0   # API 认证秘钥</span><br><span class="line"></span><br><span class="line">[plug]</span><br><span class="line">status &#x3D; 0                                   # 是否启动 蜜罐插件 0 关闭 1 启动, 需要先启动 API</span><br><span class="line">addr &#x3D; 0.0.0.0:8989                          # 蜜罐插件 启动地址</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">status &#x3D; 0                                   # 是否启动 WEB 1 启动 0 关闭, 启动 API 后 WEB 方可上报结果</span><br><span class="line">addr &#x3D; 0.0.0.0:9000                          # WEB 启动地址，0.0.0.0 对外开放，127.0.0.1 对内开放 可走 Nginx 反向代理</span><br><span class="line">template &#x3D; wordPress&#x2F;html                    # WEB 模板路径</span><br><span class="line">index &#x3D; index.html                           # WEB 首页文件</span><br><span class="line">static &#x3D; wordPress&#x2F;static                    # WEB 静态文件路径  注意：必须存在两个目录，html 文件 和静态文件 不能平级</span><br><span class="line">url &#x3D; &#x2F;                                      # WEB 访问目录，默认 &#x2F; 可更改成 index.html index.asp index.php</span><br><span class="line"></span><br><span class="line">[deep]</span><br><span class="line">status &#x3D; 0                                   # 是否启动 暗网 1 启动 0 关闭, 启动 API 后 方可上报结果</span><br><span class="line">addr &#x3D; 0.0.0.0:8080                          # 暗网 WEB 启动地址</span><br><span class="line">template &#x3D; deep&#x2F;html                         # 暗网 WEB 模板路径</span><br><span class="line">index &#x3D; index.html                           # 暗网 WEB 首页文件</span><br><span class="line">static &#x3D; deep&#x2F;static                         # 暗网 WEB 静态文件路径  注意：必须存在两个目录，html 文件 和静态文件 不能平级</span><br><span class="line">url &#x3D; &#x2F;                                      # 暗网 WEB 访问目录，默认 &#x2F; 可更改成 index.html index.asp index.php</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">status &#x3D; 0                                   # 是否启动 SSH 1 启动 0 关闭</span><br><span class="line">addr &#x3D; 0.0.0.0:22                            # SSH 服务端地址 注意端口冲突，请先关闭服务器 openssh 服务 或 修改端口</span><br><span class="line"></span><br><span class="line">[redis]</span><br><span class="line">status &#x3D; 0                                   # 是否启动 Redis 1 启动 0 关闭</span><br><span class="line">addr &#x3D; 0.0.0.0:6379                          # Redis 服务端地址 注意端口冲突</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">status &#x3D; 0                                   # 是否启动 Mysql 1 启动 0 关闭</span><br><span class="line">addr &#x3D; 0.0.0.0:3306                          # Mysql 服务端地址 注意端口冲突</span><br><span class="line">files &#x3D; &#x2F;etc&#x2F;passwd,&#x2F;etc&#x2F;group               # Mysql 服务端读取客户端任意文件; 多写逗号分隔，会随机取</span><br><span class="line"></span><br><span class="line">[telnet]</span><br><span class="line">status &#x3D; 0                                   # 是否启动 Telnet 1 启动 0 关闭</span><br><span class="line">addr &#x3D; 0.0.0.0:23                            # Telnet 服务端地址 注意端口冲突</span><br><span class="line"></span><br><span class="line">[ftp]</span><br><span class="line">status &#x3D; 0                                   # 是否启动 Ftp 1 启动 0 关闭</span><br><span class="line">addr &#x3D; 0.0.0.0:21                            # Ftp 服务端地址 注意端口冲突</span><br><span class="line"></span><br><span class="line">[mem_cache]</span><br><span class="line">status &#x3D; 0                                   # 是否启动 MemCache 0 关闭 1 启动</span><br><span class="line">addr &#x3D; 0.0.0.0:11211                         # Memcache 服务端地址 注意端口冲突</span><br><span class="line">rate_limit &#x3D; 4                               # 每秒响应次数</span><br></pre></td></tr></table></figure><p>除了这些，<code>Hfish</code> 还支持通过 <code>API 请求</code>、<code>白名单</code>、<code>WebHook</code>、<code>插件扩展</code>等很多强大的功能。如果你很感兴趣，可自行前往官网进一步探索哟！</p><h2 id="更多功能演示截图">更多功能演示截图</h2><ol><li>HFish 管理界面</li></ol><p><img src="https://bithack.io/images/cache/201908051053X8EpubVFzS.png" alt=""></p><ol start="2"><li>HFish 数据统计界面</li></ol><p><img src="https://bithack.io/images/cache/201908051051VPAyJszh4H.png" alt=""></p><ol start="3"><li>HFish SSH 蜜罐后台界面</li></ol><p><img src="https://hfish.io/docs/images/5.png" alt=""></p><ol start="4"><li>HFish Telnet 蜜罐后台界面</li></ol><p><img src="https://hfish.io/docs/images/8.png" alt=""></p><ol start="5"><li>HFish Redis 蜜罐后台界面</li></ol><p><img src="https://hfish.io/docs/images/6.png" alt=""></p><ol start="6"><li>HFish Memcache 蜜罐后台界面</li></ol><p><img src="https://hfish.io/docs/images/11.png" alt=""></p><ol start="7"><li>HFish MySQL 蜜罐后台界面</li></ol><p><img src="https://hfish.io/docs/images/7.png" alt=""></p><ol start="8"><li>HFish FTP 蜜罐后台界面</li></ol><p><img src="https://hfish.io/docs/images/9.png" alt=""></p><ol start="9"><li>HFish Web 蜜罐后台界面</li></ol><p><img src="https://hfish.io/docs/images/10.png" alt=""></p><h2 id="参考文档">参考文档</h2><ol><li><p><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></p></li><li><p><a href="https://hfish.io/docs/" target="_blank" rel="noopener">https://hfish.io/docs/</a></p></li><li><p><a href="https://bithack.io/forum/484" target="_blank" rel="noopener">https://bithack.io/forum/484</a></p></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间我们在「&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MTI2NzkxMA==&amp;amp;mid=2247489680&amp;amp;idx=1&amp;amp;sn=3ac65051d44f2772a3ffc0a45ed68d46&amp;amp;chksm=eac539b9ddb2b0afafdaa26e02e7553da883086c9682861b2fe9ecb551adfbf7cb2a9e29b96b&amp;amp;token=1365898234&amp;amp;lang=zh_CN#rd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;巧用 Cowrie 部署 SSH 蜜罐，让黑客攻击无处遁形！&lt;/a&gt;」 一文中给大家介绍了一款好用开源的 &lt;code&gt;SSH&lt;/code&gt; 蜜罐系统，但遗憾的是这个蜜罐系统只支持 &lt;code&gt;SSH&lt;/code&gt; 这一种协议。&lt;/p&gt;
&lt;p&gt;今天，我们就给大家介绍一套功能更加强大、支持跨平台和多种协议的全功能蜜罐钓鱼开源系统 &lt;code&gt;HFish&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;什么是-HFish-？&quot;&gt;什么是 HFish ？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;HFish&lt;/code&gt; 是一款基于 &lt;code&gt;Golang + SqlLite&lt;/code&gt; 开发的跨平台多功能主动攻击型蜜罐钓鱼平台框架系统。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/hacklcx/HFish&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/hacklcx/HFish&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;HFish 支持的特性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/12/20/fUC8QWAjn9sc1bB.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;多功能：不仅仅支持 &lt;code&gt;HTTP(S)&lt;/code&gt; 钓鱼，还支持 &lt;code&gt;SSH&lt;/code&gt;、&lt;code&gt;SFTP&lt;/code&gt;、&lt;code&gt;Redis&lt;/code&gt;、&lt;code&gt;MySQL&lt;/code&gt;、&lt;code&gt;MemCache&lt;/code&gt;、&lt;code&gt;VNC&lt;/code&gt;、&lt;code&gt;ES&lt;/code&gt; 等多种蜜罐。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扩展性：&lt;code&gt;HFish&lt;/code&gt; 提供 &lt;code&gt;API&lt;/code&gt; 接口，使用者可以随意扩展钓鱼模块。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;便捷性：&lt;code&gt;HFish&lt;/code&gt; 使用 &lt;code&gt;Golang&lt;/code&gt; 开发，使用者可以在多平台上(&lt;code&gt;Windows&lt;/code&gt;、&lt;code&gt;MacOS&lt;/code&gt;、&lt;code&gt;Linux&lt;/code&gt; 等) 上快速进行部署。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="HFish" scheme="https://www.hi-linux.com/tags/HFish/"/>
    
  </entry>
  
  <entry>
    <title>推荐一款让你的代码变得更漂亮的神器 Codeimg</title>
    <link href="https://www.hi-linux.com/posts/63761.html"/>
    <id>https://www.hi-linux.com/posts/63761.html</id>
    <published>2020-05-22T01:20:00.000Z</published>
    <updated>2020-05-22T05:47:50.057Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>如果你想把一小段代码分享到各大社交网站，透过 GitHub Gist 产生链接是个不错的方式。若是要转为精美的图片， Carbon、CodeZen 这类可以将代码转成图片、加上窗口阴影和上色效果的线上工具，或许来说会更好用。</p><p>大家都知道社交网站在不同区块或类别都有不一样的图片尺寸限制，接下来要介绍的这项服务就是整合了各大社交网站模版和代码的转图片工具，让你可以做出更适合分享的代码图片。</p><h2 id="什么是-codeimgio">什么是 <a href="http://Codeimg.io" target="_blank" rel="noopener">Codeimg.io</a></h2><p>「<a href="http://Codeimg.io" target="_blank" rel="noopener">Codeimg.io</a>」是一款帮你把源代码转换成漂亮图片格式的在线工具，以便于在社交网络分享。它可以对一段代码加入高亮颜色标注效果，按照使用者选择的社交网站位置制作为特定大小的图片。</p><p>举例来说：Facebook 分享图片大小为 1200×630、封面图片 820×312、Twitter 推文适用的 506×253，亦可选择边框样式、配色、主题等等，制作出来的图片相当专业。</p><p>虽然制作成图片的代码或许适合阅读，对于要复制特定内容来说就会有些麻烦。但如果只是想让社交网站上的人方便浏览，相较于直接把代码贴上来说转为图片、加入高亮效果会更有用。</p><p>Codeimg 不仅适用于社交网站，也能直接指定图片长宽，选择建立成 .jpeg、.png 或 .svg 图片格式。</p><blockquote><p>网站名称：<a href="http://Codeimg.io" target="_blank" rel="noopener">Codeimg.io</a><br>网站链接：<a href="https://codeimg.io/" target="_blank" rel="noopener">https://codeimg.io/</a></p></blockquote><p>「<a href="http://Codeimg.io" target="_blank" rel="noopener">Codeimg.io</a>」支持功能列表：</p><ul><li>宽度、高度</li><li>边框宽度</li><li>背景色</li><li>样式（Win/macOS）</li><li>显示按钮</li><li>显示标题</li><li>圆角边框</li><li>阴影大小、颜色</li><li>主题</li><li>程序语言</li><li>字体大小</li><li>显示行数</li></ul><a id="more"></a><h2 id="codeimgio使用教学">「<a href="http://Codeimg.io" target="_blank" rel="noopener">Codeimg.io</a>」使用教学</h2><h3 id="step-1">STEP 1</h3><p>开启 <a href="http://Codeimg.io" target="_blank" rel="noopener">Codeimg.io</a> 后选择要套用的社交网站模版尺寸，选项上会提示你这个尺寸适用于那个区块，以及对应的图片大小。</p><p><a href="http://Codeimg.io" target="_blank" rel="noopener">Codeimg.io</a> 提供包括 Facebook、Twitter、Instagram 三种最常用的社交平台。Facebook 包括 Profile、Cover、Shared、Event Image 样式，Twitter 包括 Profile、Header、In-Stream Photo，Instagram 包括 Profile、Thumbnails、Stories 等样式。或是透过自定义功能自己输入图片长宽。</p><p>在下方项目名称的命名后面可预先选择要使用的图片格式，<a href="http://Codeimg.io" target="_blank" rel="noopener">Codeimg.io</a> 亦可制作 .svg 矢量图。</p><p><img src="https://i.loli.net/2019/08/19/kXV2EzHRSdrQU1g.jpg" alt=""></p><h3 id="step-2">STEP 2</h3><p>接着把 Codeimg 预设程式码移除，在第一行将你要转为图片的代码贴上。</p><p><img src="https://i.loli.net/2019/08/19/POILXaiCHV3ZUF5.jpg" alt=""></p><p>Codeimg 会自动对代码进行高亮，让其他使用者更容易阅读。预设情况下是 MacOS 窗口效果带上深色的高亮效果。</p><p><img src="https://i.loli.net/2019/08/19/MekD6t5LsziZCoS.jpg" alt=""></p><h3 id="step-3">STEP 3</h3><p>左侧有几个选项，点开后会有更多可以设定的功能，例如窗口外框可调整为 macOS 或 Windows 样式，外框尺寸、对齐位置、圆角和阴影等等，设定后右边预览会即时更新。</p><p><img src="https://i.loli.net/2019/08/19/3pdWAhGgzXCskxF.jpg" alt=""></p><h3 id="step-4">STEP 4</h3><p>如果你对于预设的高亮效果不满意，可以从 Editor 的「Theme」可选择各种不同的代码高亮方式，包括浅色和深色背景，以及不同的高亮标注颜色。若 Codeimg 无法正确判断你的代码类型，可以从「Language」手动选择，并能决定是否要显示代码的行数。</p><p><img src="https://i.loli.net/2019/08/19/Wx9FQdAgn3likhp.jpg" alt=""></p><h3 id="step-5">STEP 5</h3><p>最后，点选右上角的「Download」就能将这张代码图片导出，保存为预先选择的图片格式。</p><p><img src="https://i.loli.net/2019/08/19/JFrdG3QRjzVnoAZ.jpg" alt=""></p><h2 id="参考文档">参考文档</h2><ol><li><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></li><li><a href="https://www.appinn.com/codeimg-online/" target="_blank" rel="noopener">https://www.appinn.com/codeimg-online/</a></li><li><a href="https://free.com.tw/codeimg-io/" target="_blank" rel="noopener">https://free.com.tw/codeimg-io/</a></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你想把一小段代码分享到各大社交网站，透过 GitHub Gist 产生链接是个不错的方式。若是要转为精美的图片， Carbon、CodeZen 这类可以将代码转成图片、加上窗口阴影和上色效果的线上工具，或许来说会更好用。&lt;/p&gt;
&lt;p&gt;大家都知道社交网站在不同区块或类别都有不一样的图片尺寸限制，接下来要介绍的这项服务就是整合了各大社交网站模版和代码的转图片工具，让你可以做出更适合分享的代码图片。&lt;/p&gt;
&lt;h2 id=&quot;什么是-Codeimg-io&quot;&gt;什么是 &lt;a href=&quot;http://Codeimg.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeimg.io&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;「&lt;a href=&quot;http://Codeimg.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeimg.io&lt;/a&gt;」是一款帮你把源代码转换成漂亮图片格式的在线工具，以便于在社交网络分享。它可以对一段代码加入高亮颜色标注效果，按照使用者选择的社交网站位置制作为特定大小的图片。&lt;/p&gt;
&lt;p&gt;举例来说：Facebook 分享图片大小为 1200×630、封面图片 820×312、Twitter 推文适用的 506×253，亦可选择边框样式、配色、主题等等，制作出来的图片相当专业。&lt;/p&gt;
&lt;p&gt;虽然制作成图片的代码或许适合阅读，对于要复制特定内容来说就会有些麻烦。但如果只是想让社交网站上的人方便浏览，相较于直接把代码贴上来说转为图片、加入高亮效果会更有用。&lt;/p&gt;
&lt;p&gt;Codeimg 不仅适用于社交网站，也能直接指定图片长宽，选择建立成 .jpeg、.png 或 .svg 图片格式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;网站名称：&lt;a href=&quot;http://Codeimg.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeimg.io&lt;/a&gt;&lt;br&gt;
网站链接：&lt;a href=&quot;https://codeimg.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codeimg.io/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;「&lt;a href=&quot;http://Codeimg.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeimg.io&lt;/a&gt;」支持功能列表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;宽度、高度&lt;/li&gt;
&lt;li&gt;边框宽度&lt;/li&gt;
&lt;li&gt;背景色&lt;/li&gt;
&lt;li&gt;样式（Win/macOS）&lt;/li&gt;
&lt;li&gt;显示按钮&lt;/li&gt;
&lt;li&gt;显示标题&lt;/li&gt;
&lt;li&gt;圆角边框&lt;/li&gt;
&lt;li&gt;阴影大小、颜色&lt;/li&gt;
&lt;li&gt;主题&lt;/li&gt;
&lt;li&gt;程序语言&lt;/li&gt;
&lt;li&gt;字体大小&lt;/li&gt;
&lt;li&gt;显示行数&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Codeimg" scheme="https://www.hi-linux.com/tags/Codeimg/"/>
    
  </entry>
  
  <entry>
    <title>如何在一秒之内优雅的处理 1000 万个网络数据包攻击</title>
    <link href="https://www.hi-linux.com/posts/6500.html"/>
    <id>https://www.hi-linux.com/posts/6500.html</id>
    <published>2020-05-22T01:10:00.000Z</published>
    <updated>2020-05-22T05:28:53.261Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>偶然看到一篇 Cloudflare 的博客 How to drop 10 million packets per second，如何实现单核情况下一秒钟丢弃 1000 万个数据包，原文循序渐进，从最简单的用户态丢弃到使用非常新的技术 XDP，逐步将单核丢包性能提升到 10 mpps，很有意思，网上也没有看到原文的中文版本，所以这里顺便翻译一下，看看 Cloudflare 是如何处理类似的情况的。</p><p>在公司内部，我们的抗 DDoS 团队有时会被人们称作 “数据包丢弃者”。当其他团队为流经我们网络的流量做了很多令人兴奋的聪明玩意时，我们也很享受探索如何丢弃这些流量的新方法。</p><p>能以最快速度丢掉网络包，对于抵抗 DDoS 攻击来说，是非常重要的。丢掉发送到我们服务器的数据包，和听上去一样简单，可以在很多层面上进行。每个技术都有他的优点和缺陷，在这篇 Blog 里，我们会一起看一下我们到目前为止用到的技术。</p><a id="more"></a><h2 id="试验台">试验台</h2><p>为了说明方法的相对性能，我们将通过一些基准测试，这些测试是设计好的，可以得到一系列的数据。我们使用了一台 Intel 的服务器，这台机器有一块 10Gbps 网卡，机器的其他配置信息其实并不是很重要，因为这些测试的目标是为了显示出操作系统而不是硬件层面的限制。</p><p>我们的测试设置如下：</p><ul><li><p>我们传输大量小的 UDP 数据包，达到 14Mpps（每秒数百万个数据包）。</p></li><li><p>此流量指向目标服务器上的单个 CPU。</p></li><li><p>我们测量内核在该 CPU 上处理的数据包数量。</p></li></ul><p>我们并没有尝试优化用户空间应用程序的速度，也没有尝试提升数据吞吐量 - 相反，我们尝试专门展示内核层的瓶颈。</p><p>生成的流量可以对 conntrack 施加最大压力 - 数据包使用随机源IP和端口字段。 tcpdump 的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -ni vlan100 -c 10 -t udp and dst port 1234</span><br><span class="line">IP 198.18.40.55.32059 &gt; 198.18.0.12.1234: UDP, length 16</span><br><span class="line">IP 198.18.51.16.30852 &gt; 198.18.0.12.1234: UDP, length 16</span><br><span class="line">IP 198.18.35.51.61823 &gt; 198.18.0.12.1234: UDP, length 16</span><br><span class="line">IP 198.18.44.42.30344 &gt; 198.18.0.12.1234: UDP, length 16</span><br><span class="line">IP 198.18.106.227.38592 &gt; 198.18.0.12.1234: UDP, length 16</span><br><span class="line">IP 198.18.48.67.19533 &gt; 198.18.0.12.1234: UDP, length 16</span><br><span class="line">IP 198.18.49.38.40566 &gt; 198.18.0.12.1234: UDP, length 16</span><br><span class="line">IP 198.18.50.73.22989 &gt; 198.18.0.12.1234: UDP, length 16</span><br><span class="line">IP 198.18.43.204.37895 &gt; 198.18.0.12.1234: UDP, length 16</span><br><span class="line">IP 198.18.104.128.1543 &gt; 198.18.0.12.1234: UDP, length 16</span><br></pre></td></tr></table></figure><p>在目标机器，我们将所有的流量都定向到网卡同一个 RX 队列上，也就是说所有的数据都只会被一个 CPU 核处理。我们通过硬件流转向实现这一目标：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ethtool -N ext0 flow-type udp4 dst-ip 198.18.0.12 dst-port 1234 action 2</span><br></pre></td></tr></table></figure><p>基准测试通常也很困难，当我们在准备测试的过程中，我们发现如果系统中有活动的 raw socket 也会影响性能，事后看很明显，但是也很容易忽略类似的问题。所以在测试之前需要确认没有任何 tcpdump 进程在运行，可以通过下面的方式查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ss -A raw,packet_raw -l -p|cat</span><br><span class="line">Netid  State      Recv-Q Send-Q Local Address:Port</span><br><span class="line">p_raw  UNCONN     525157 0      *:vlan100          users:((&quot;tcpdump&quot;,pid&#x3D;23683,fd&#x3D;3))</span><br></pre></td></tr></table></figure><p>最后，我们要关闭 Intel Turbo Boost 特性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 | sudo tee &#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;intel_pstate&#x2F;no_turbo</span><br></pre></td></tr></table></figure><p>虽然 Turbo Boost 很好，而且可以提升至少 20% 的吞吐量，但是也会极大的影响测试结果的标准差，在开启状态下偏大达到了 ±1.5%，而关闭之后偏差下降到了 0.25%。</p><p><img src="https://www.hi-linux.com/img/linux/network-1000-1.jpg" alt=""></p><h2 id="第一阶段-在应用程序中丢弃包">第一阶段 在应用程序中丢弃包</h2><p>让我们从将数据包传递到应用程序并在用户空间代码中忽略它们的想法开始。 对于测试设置，首先需要确保 iptables 不会影响性能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -I PREROUTING -t mangle -d 198.18.0.12 -p udp --dport 1234 -j ACCEPT</span><br><span class="line">iptables -I PREROUTING -t raw -d 198.18.0.12 -p udp --dport 1234 -j ACCEPT</span><br><span class="line">iptables -I INPUT -t filter -d 198.18.0.12 -p udp --dport 1234 -j ACCEPT</span><br></pre></td></tr></table></figure><p>应用程序的代码就是一个简单的循环，获取数据，然后直接丢弃：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s &#x3D; socket.socket(AF_INET, SOCK_DGRAM)</span><br><span class="line">s.bind((&quot;0.0.0.0&quot;, 1234))</span><br><span class="line">while True:</span><br><span class="line">    s.recvmmsg([...])</span><br></pre></td></tr></table></figure><p>这里有准备好的 C 代码，运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;dropping-packets&#x2F;recvmmsg-loop</span><br><span class="line">packets&#x3D;171261 bytes&#x3D;1940176</span><br></pre></td></tr></table></figure><p>对于这个实现，我们利用 ethtool 和 mmwatch 工具可以实现从硬件队列中以 175kpps 的速度读取数据包。</p><p>硬件上看接收的速度是 14Mpps，但是针对单核处理的 RX 队列，这些数据包已经无法处理了。可以通过 mpstat 工具确认：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ watch &#39;mpstat -u -I SUM -P ALL 1 1|egrep -v Aver&#39;</span><br><span class="line">01:32:05 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line">01:32:06 PM    0    0.00    0.00    0.00    2.94    0.00    3.92    0.00    0.00    0.00   93.14</span><br><span class="line">01:32:06 PM    1    2.17    0.00   27.17    0.00    0.00    0.00    0.00    0.00    0.00   70.65</span><br><span class="line">01:32:06 PM    2    0.00    0.00    0.00    0.00    0.00  100.00    0.00    0.00    0.00    0.00</span><br><span class="line">01:32:06 PM    3    0.95    0.00    1.90    0.95    0.00    3.81    0.00    0.00    0.00   92.38</span><br></pre></td></tr></table></figure><p>可以看到用户代码不是瓶颈，在 CPU #1 上有 27% sys + 2% userspace 的占用，但是 CPU #2 被网络软中断( SOFTIRQ )占用了 100%。</p><p>需要说明的是，使用 recvmmsg(2) 很重要，在 Spectre 漏洞被发现的现在，系统调用的成本变得更加高了，我们使用了 4.14 版本的内核，并开启了 KPTI 和 Retpoline：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ tail -n +1 &#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;vulnerabilities&#x2F;*</span><br><span class="line">&#x3D;&#x3D;&gt; &#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;vulnerabilities&#x2F;meltdown &lt;&#x3D;&#x3D;</span><br><span class="line">Mitigation: PTI</span><br><span class="line">&#x3D;&#x3D;&gt; &#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;vulnerabilities&#x2F;spectre_v1 &lt;&#x3D;&#x3D;</span><br><span class="line">Mitigation: __user pointer sanitization</span><br><span class="line">&#x3D;&#x3D;&gt; &#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;vulnerabilities&#x2F;spectre_v2 &lt;&#x3D;&#x3D;</span><br><span class="line">Mitigation: Full generic retpoline, IBPB, IBRS_FW</span><br></pre></td></tr></table></figure><h2 id="第二阶段-干掉-conntrack">第二阶段 干掉 conntrack</h2><p>我们特别的设计了这个测试，用随机的原 IP 和端口，用来给 conntrack 层施加压力。这个可以通过查看 conntrack 数量的方式确认，在测试中，conntrack 数量达到最大：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ conntrack -C</span><br><span class="line">2095202</span><br><span class="line">$ sysctl net.netfilter.nf_conntrack_max</span><br><span class="line">net.netfilter.nf_conntrack_max &#x3D; 2097152</span><br></pre></td></tr></table></figure><p>也能从 dmesg 中看到 conntrack 日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[4029612.456673] nf_conntrack: nf_conntrack: table full, dropping packet</span><br><span class="line">[4029612.465787] nf_conntrack: nf_conntrack: table full, dropping packet</span><br><span class="line">[4029617.175957] net_ratelimit: 5731 callbacks suppressed</span><br></pre></td></tr></table></figure><p>为了加速我们的测试，把它关掉：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t raw -I PREROUTING -d 198.18.0.12 -p udp -m udp --dport 1234 -j NOTRACK</span><br></pre></td></tr></table></figure><p>然后重新测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;dropping-packets&#x2F;recvmmsg-loop</span><br><span class="line">packets&#x3D;331008 bytes&#x3D;5296128</span><br></pre></td></tr></table></figure><p>程序性能里面提升到了 333kpps，赞！</p><blockquote><p>PS：通过 <code>SO_BUSY_POLL</code> 选项，我们可以将性能提升到 470k pps，但是这个是另一个话题了。</p></blockquote><h2 id="第三阶段-利用-bpf-进行丢包操作">第三阶段 利用 BPF 进行丢包操作</h2><p>更进一步，为什么我们要在用户态进行丢包呢？虽然这个技术不常见，但是我们可以使用 setsockopt(SO_ATTACH_FILTER) 添加一个 cBPF 过滤器到一个 socket 上，让程序在内核态进行丢包操作。</p><p>这里是代码，运行一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;bpf-drop</span><br><span class="line">packets&#x3D;0 bytes&#x3D;0</span><br></pre></td></tr></table></figure><p>使用 BPF 进行丢弃操作（ cBPF 和 eBPF 有相似的性能），我们大致达到了 512kpps 的性能。所有的包都在 BPF 过滤器中丢弃了，由于依然需要使用到软中断，所以只是省掉了唤醒用户态程序的 CPU 消耗。</p><h2 id="第四阶段-使用-iptables-在路由阶段结束后丢弃">第四阶段 使用 iptables 在路由阶段结束后丢弃</h2><p>在下个阶段，我们可以简单的设置 iptables INPUT 规则来丢弃包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -d 198.18.0.12 -p udp --dport 1234 -j DROP</span><br></pre></td></tr></table></figure><p>需要注意的是我们之前已经通过 <code>-j NOTRACK</code> 关闭了 conntrack，这两条规则实现了 608kbps 的性能。</p><p>看下 iptables 的统计信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mmwatch &#39;iptables -L -v -n -x | head&#39;</span><br><span class="line">Chain INPUT (policy DROP 0 packets, 0 bytes)</span><br><span class="line">    pkts      bytes target     prot opt in     out     source               destination</span><br><span class="line">605.9k&#x2F;s    26.7m&#x2F;s DROP       udp  --  *      *       0.0.0.0&#x2F;0            198.18.0.12          udp dpt:1234</span><br></pre></td></tr></table></figure><p>600kpps 不差了，但是我们能做到更好！</p><h2 id="第五阶段-使用-iptables-在路由之前丢弃">第五阶段 使用 iptables 在路由之前丢弃</h2><p>有一个更快的方法，就是在包路由之前丢弃，可以通过下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I PREROUTING -t raw -d 198.18.0.12 -p udp --dport 1234 -j DROP</span><br></pre></td></tr></table></figure><p>这个方法的性能高达 1.688 pps。</p><p>这是非常明显的性能提升，我并不是特别明白多了一次路由差距这么大，要么是我们的路由层非常的复杂，或者在服务器的配置上有 bug。</p><p>在任何情况下，通过 iptables 的 raw 表进行操作绝对是最快的方法。</p><h2 id="第六阶段使用-nftables-在-conntrack-之前丢弃">第六阶段，使用 nftables 在 CONNTRACK 之前丢弃</h2><p>iptables 在现在已经有点过时了，更新的玩意是 nftables，关于为什么 nftables 技术更优越，请参阅此视频。 由于许多原因，Nftables 承诺比老旧的 iptables 更快，其中有一个说法是 retpolines（没有间接跳跃的猜测）严重影响了 iptables 性能。</p><p>由于这篇文章不是关于比较nftables和iptables的速度，让我们尝试一下我能想到的最快的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nft add table netdev filter</span><br><span class="line">nft -- add chain netdev filter input &#123; type filter hook ingress device vlan100 priority -500 \; policy accept \; &#125;</span><br><span class="line">nft add rule netdev filter input ip daddr 198.18.0.0&#x2F;24 udp dport 1234 counter drop</span><br><span class="line">nft add rule netdev filter input ip6 daddr fd00::&#x2F;64 udp dport 1234 counter drop</span><br></pre></td></tr></table></figure><p>相关的统计信息可以通过这个命令查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ mmwatch &#39;nft --handle list chain netdev filter input&#39;</span><br><span class="line">table netdev filter &#123;</span><br><span class="line">    chain input &#123;</span><br><span class="line">        type filter hook ingress device vlan100 priority -500; policy accept;</span><br><span class="line">        ip daddr 198.18.0.0&#x2F;24 udp dport 1234 counter packets    1.6m&#x2F;s bytes    69.6m&#x2F;s drop # handle 2</span><br><span class="line">        ip6 daddr fd00::&#x2F;64 udp dport 1234 counter packets 0 bytes 0 drop # handle 3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nftables “ingress” Hook 性能卡在了 1.53 mpps。 这比 PREROUTING 层中的 iptables 稍慢。 这令人费解 - 理论上 ingress 在 PREROUTING 之前发生，所以应该更快。</p><p>在我们的测试中 nftables 比 iptables 略慢，但不是很多。 Nftables 仍然更好。</p><h2 id="第七阶段-利用-tc-的-ingress-策略丢包">第七阶段 利用 tc 的 ingress 策略丢包</h2><p>有个比较令人震惊的事实是 tc (traffic control) 的 ingress hook 发生在 PREROUTING 之前。tc 可以并且确实能做到根据一定的标准来选择并丢弃数据包，但是做法确实比较 hacky，所以建议利用这个脚本进行设置，我们需要的是一个稍微复杂点的匹配，参考下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tc qdisc add dev vlan100 ingress</span><br><span class="line">tc filter add dev vlan100 parent ffff: prio 4 protocol ip u32 match ip protocol 17 0xff match ip dport 1234 0xffff match ip dst 198.18.0.0&#x2F;24 flowid 1:1 action drop</span><br><span class="line">tc filter add dev vlan100 parent ffff: protocol ipv6 u32 match ip6 dport 1234 0xffff match ip6 dst fd00::&#x2F;64 flowid 1:1 action drop</span><br></pre></td></tr></table></figure><p>可以验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ mmwatch &#39;tc -s filter  show dev vlan100  ingress&#39;</span><br><span class="line">filter parent ffff: protocol ip pref 4 u32 </span><br><span class="line">filter parent ffff: protocol ip pref 4 u32 fh 800: ht divisor 1 </span><br><span class="line">filter parent ffff: protocol ip pref 4 u32 fh 800::800 order 2048 key ht 800 bkt 0 flowid 1:1  (rule hit   1.8m&#x2F;s success   1.8m&#x2F;s)</span><br><span class="line">  match 00110000&#x2F;00ff0000 at 8 (success   1.8m&#x2F;s ) </span><br><span class="line">  match 000004d2&#x2F;0000ffff at 20 (success   1.8m&#x2F;s ) </span><br><span class="line">  match c612000c&#x2F;ffffffff at 16 (success   1.8m&#x2F;s ) </span><br><span class="line">        action order 1: gact action drop</span><br><span class="line">         random type none pass val 0</span><br><span class="line">         index 1 ref 1 bind 1 installed 1.0&#x2F;s sec</span><br><span class="line">        Action statistics:</span><br><span class="line">        Sent    79.7m&#x2F;s bytes   1.8m&#x2F;s pkt (dropped   1.8m&#x2F;s, overlimits 0 requeues 0) </span><br><span class="line">        backlog 0b 0p requeues 0</span><br></pre></td></tr></table></figure><p>通过 tc 的 ingress hook 的 u32 匹配，可以让我们实现单核 1.8mpps 的丢包能力，这个很棒！</p><p>但是，我们可以更快一点…</p><h2 id="第八阶段-xdp_drop">第八阶段 XDP_DROP</h2><p>最后，终极武器是 XDP - eXpress Data Path。通过 XDP，我们可以在网络驱动层运行 eBPF 代码。最重要的是，这个阶段发生在分配 skbuff 内存之前，可以获得超高的速度。</p><p>通常 XDP 项目包含两部分：</p><ul><li><p>被加载到内核的 eBPB 代码</p></li><li><p>用户态的加载器，可以将代码加载到正确的网卡，并且控制他们</p></li></ul><p>编写加载器很难，但是我们可以利用 iproute2 的这个新特性，用一个很简单的命令加载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip link set dev ext0 xdp obj xdp-drop-ebpf.o</span><br></pre></td></tr></table></figure><p>搞定！</p><p>这个 eBPF 的代码在这里。这个程序解析IP数据包，然后寻找对应的特征：IP 传输、UDP 协议、对应的子网和端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (h_proto &#x3D;&#x3D; htons(ETH_P_IP)) &#123;</span><br><span class="line">    if (iph-&gt;protocol &#x3D;&#x3D; IPPROTO_UDP</span><br><span class="line">        &amp;&amp; (htonl(iph-&gt;daddr) &amp; 0xFFFFFF00) &#x3D;&#x3D; 0xC6120000 &#x2F;&#x2F; 198.18.0.0&#x2F;24</span><br><span class="line">        &amp;&amp; udph-&gt;dest &#x3D;&#x3D; htons(1234)) &#123;</span><br><span class="line">        return XDP_DROP;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XDP 程序需要用现代的 clang 编译器编译成 BPF 字节码，完成之后可以加载并验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ip link show dev ext0</span><br><span class="line">4: ext0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 xdp qdisc fq state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link&#x2F;ether 24:8a:07:8a:59:8e brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    prog&#x2F;xdp id 5 tag aedc195cc0471f51 jited</span><br></pre></td></tr></table></figure><p>然后通过 <code>ethtool -S</code> 查看网卡的统计信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mmwatch &#39;ethtool -S ext0|egrep &quot;rx&quot;|egrep -v &quot;: 0&quot;|egrep -v &quot;cache|csum&quot;&#39;</span><br><span class="line">     rx_out_of_buffer:     4.4m&#x2F;s</span><br><span class="line">     rx_xdp_drop:         10.1m&#x2F;s</span><br><span class="line">     rx2_xdp_drop:        10.1m&#x2F;s</span><br></pre></td></tr></table></figure><p>利用 XDP ，我们实现了在单核上，每秒钟丢弃 1000 万个包！</p><p><img src="https://www.hi-linux.com/img/linux/network-1000-2.jpg" alt=""></p><h2 id="总结">总结</h2><p>我们在 IPv4 和 IPv6 上重复了实验，并画了这张图：</p><p><img src="https://www.hi-linux.com/img/linux/network-1000-3.jpg" alt=""></p><p>总的来说在我们现在的设置下，IPv6 比 IPv4 要稍微慢一些，需要注意的是 IPv6 的包也稍微大了一些，所以这性能上的区别还是可以理解的。</p><p>Linux 提供了很多过滤数据包的 Hook，每个都有不同的性能和易用性。</p><p>对于应对 DDoS 的场景，在用户态的应用程序里处理这些数据包是合理的，通过调整应用程序，也可以获得不错的性能。</p><p>而对于有随机源 IP 和端口的攻击，关闭 conntrack 的特性来获得性能提升也是值得的，但是 conntrack 在某些攻击情况下，还是很有用的。</p><p>针对其他情况下，利用 Linux 的防火墙来作为抗 DDoS 的一部分还是很有意义的，在这种情况下要尽量利用 <code>-t raw PREROUTING</code> 这一层，因为这一层比 <code>filter</code> 表要快很多。</p><p>对于要求更高的工作负载，我们还有 XDP，而且他很强大，下面是和上面相同的图表，但是加上了 XDP：</p><p><img src="https://www.hi-linux.com/img/linux/network-1000-4.jpg" alt=""></p><p>如果需要重现这些数据，可以看看项目代码的 README。</p><h2 id="参考文档">参考文档</h2><ol><li><p><a href="https://blog.cloudflare.com/how-to-drop-10-million-packets/" target="_blank" rel="noopener">https://blog.cloudflare.com/how-to-drop-10-million-packets/</a></p></li><li><p><a href="https://github.com/cloudflare/cloudflare-blog/blob/master/2018-07-dropping-packets/recvmmsg-loop.c" target="_blank" rel="noopener">https://github.com/cloudflare/cloudflare-blog/blob/master/2018-07-dropping-packets/recvmmsg-loop.c</a></p></li><li><p><a href="https://blog.cloudflare.com/three-little-tools-mmsum-mmwatch-mmhistogram/" target="_blank" rel="noopener">https://blog.cloudflare.com/three-little-tools-mmsum-mmwatch-mmhistogram/</a></p></li><li><p><a href="https://github.com/cloudflare/cloudflare-blog/blob/master/2018-07-dropping-packets/bpf-drop.c" target="_blank" rel="noopener">https://github.com/cloudflare/cloudflare-blog/blob/master/2018-07-dropping-packets/bpf-drop.c</a></p></li><li><p><a href="https://www.youtube.com/watch?v=9Zr8XqdET1c" target="_blank" rel="noopener">https://www.youtube.com/watch?v=9Zr8XqdET1c</a></p></li><li><p><a href="https://github.com/netoptimizer/network-testing/blob/master/tc/tc_ingress_drop.sh" target="_blank" rel="noopener">https://github.com/netoptimizer/network-testing/blob/master/tc/tc_ingress_drop.sh</a></p></li><li><p><a href="https://prototype-kernel.readthedocs.io/en/latest/networking/XDP/" target="_blank" rel="noopener">https://prototype-kernel.readthedocs.io/en/latest/networking/XDP/</a></p></li><li><p><a href="https://cilium.readthedocs.io/en/latest/bpf/#iproute2" target="_blank" rel="noopener">https://cilium.readthedocs.io/en/latest/bpf/#iproute2</a></p></li><li><p><a href="https://github.com/cloudflare/cloudflare-blog/blob/master/2018-07-dropping-packets/xdp-drop-ebpf.c" target="_blank" rel="noopener">https://github.com/cloudflare/cloudflare-blog/blob/master/2018-07-dropping-packets/xdp-drop-ebpf.c</a></p></li><li><p><a href="https://github.com/cloudflare/cloudflare-blog/blob/master/2018-07-dropping-packets/README.md" target="_blank" rel="noopener">https://github.com/cloudflare/cloudflare-blog/blob/master/2018-07-dropping-packets/README.md</a></p></li></ol><blockquote><p>本文转载自：「C0reFast 记事本」，原文：<a href="https://url.cn/58wrb9u%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://url.cn/58wrb9u，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <code>editor@hi-linux.com</code> 。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偶然看到一篇 Cloudflare 的博客 How to drop 10 million packets per second，如何实现单核情况下一秒钟丢弃 1000 万个数据包，原文循序渐进，从最简单的用户态丢弃到使用非常新的技术 XDP，逐步将单核丢包性能提升到 10 mpps，很有意思，网上也没有看到原文的中文版本，所以这里顺便翻译一下，看看 Cloudflare 是如何处理类似的情况的。&lt;/p&gt;
&lt;p&gt;在公司内部，我们的抗 DDoS 团队有时会被人们称作 “数据包丢弃者”。当其他团队为流经我们网络的流量做了很多令人兴奋的聪明玩意时，我们也很享受探索如何丢弃这些流量的新方法。&lt;/p&gt;
&lt;p&gt;能以最快速度丢掉网络包，对于抵抗 DDoS 攻击来说，是非常重要的。丢掉发送到我们服务器的数据包，和听上去一样简单，可以在很多层面上进行。每个技术都有他的优点和缺陷，在这篇 Blog 里，我们会一起看一下我们到目前为止用到的技术。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="网络" scheme="https://www.hi-linux.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅的在 Docker 容器中指定用户及组权限的三种方式</title>
    <link href="https://www.hi-linux.com/posts/44367.html"/>
    <id>https://www.hi-linux.com/posts/44367.html</id>
    <published>2020-05-22T01:00:00.000Z</published>
    <updated>2020-05-22T04:50:00.598Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>如果平常有在玩 Docker 的用户肯定知道透过 <code>docker command</code> 启动的容器预设是使用 <code>root</code> 用户来当作预设使用者及群组的。这样就会遇到一个问题，当主机环境你拥有 root 权限时就没有此问题。如果你没有 root 权限，又有需求在 Docker 容器內挂上 Volume，会发现产生出来的文件皆会是 root 权限，这时候在主机完全是无法写入的。本篇文章将教大家三种方式来设定容器使用者权限，以解决上述遇到的问题。</p><h2 id="使用-docker-指令时指定使用者">使用 docker 指令时指定使用者</h2><p>以进入一个 Ubuntu 容器为例，通过以下指令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -ti ubuntu &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p>这时候我们可以通过 <code>-u</code> 方式将使用者 <code>uid</code> 及群组 <code>gid</code> 传入容器内。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir tmp</span><br><span class="line">$ docker run -ti -v $PWD&#x2F;tmp:&#x2F;test \</span><br><span class="line">  -u uid:gid ubuntu &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p>如何找到目前使用者 uid 及 gid 呢，可以通过下面的方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ id -u</span><br><span class="line">$ id -g</span><br></pre></td></tr></table></figure><p>为了更加方便，上述指令可以改成:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -ti -v $PWD&#x2F;tmp:&#x2F;test \</span><br><span class="line">  -u $(id -u):$(id -g) ubuntu &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="使用-dockerfile-指定使用者">使用 Dockerfile 指定使用者</h2><p>除了在 Docker 命令行指定外，你也可以在 <code>dockerfile</code> 内直接指定使用者。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Dockerfile</span><br><span class="line">USER 1000:1000</span><br></pre></td></tr></table></figure><p>我个人不是很推荐这方式，除非是在 <code>container</code> 内独立建立使用者，并且指定权限。</p><h3 id="通过-docker-compose-指定权限">通过 docker-compose 指定权限</h3><p>通过 <code>docker-compose</code> 可以一次启动多个服务。用 <code>user</code> 可以指定使用者权限来写入特定的 volume。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">services:</span><br><span class="line">  agent:</span><br><span class="line">    image: xxxxxxxx</span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      - proxy</span><br><span class="line">    logging:</span><br><span class="line">      options:</span><br><span class="line">        max-size: &quot;100k&quot;</span><br><span class="line">        max-file: &quot;3&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - $&#123;STORAGE_PATH&#125;:&#x2F;data</span><br><span class="line">    user: $&#123;CURRENT_UID&#125;</span><br></pre></td></tr></table></figure><p>接着可以通过 .env 来指定变量的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">STORAGE_PATH&#x3D;&#x2F;home&#x2F;deploy&#x2F;xxxx</span><br><span class="line">CURRENT_UID&#x3D;1001:1001</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>以上场景通常会发生在有挂载主机 Volume 进入容器内，但是你又没有 root 用户权限时。如果此时不指定使用者权限，这样生成出来的文件都会是 root 权限，一般用户无法写入，只能读取。</p><p>如果你觉得以上方法都过于麻烦，最后在提供一个终极解决方案，那就是使用 <code>Podman</code>。具体使用方法可以参考 「<a href="https://mp.weixin.qq.com/s?__biz=MzI3MTI2NzkxMA==&amp;mid=2247488720&amp;idx=1&amp;sn=56a3f0c46d3272f103216cf8330cf6af&amp;chksm=eac535f9ddb2bcefc5347ac1db0d290d384847ef3ef602522721a3308c8c7240b1ddb58533cf&amp;token=2039868521&amp;lang=zh_CN#rd" target="_blank" rel="noopener">再见 Docker，是时候拥抱下一代容器工具了</a>」 一文。</p><blockquote><p>来源：小恶魔</p><p>原文：<a href="https://url.cn/5KhaLSm" target="_blank" rel="noopener">https://url.cn/5KhaLSm</a></p><p>题图：来自谷歌图片搜索</p><p>版权：本文版权归原作者所有</p><p>投稿：欢迎投稿，邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a></p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果平常有在玩 Docker 的用户肯定知道透过 &lt;code&gt;docker command&lt;/code&gt; 启动的容器预设是使用 &lt;code&gt;root&lt;/code&gt; 用户来当作预设使用者及群组的。这样就会遇到一个问题，当主机环境你拥有 root 权限时就没有此问题。如果你没有 root 权限，又有需求在 Docker 容器內挂上 Volume，会发现产生出来的文件皆会是 root 权限，这时候在主机完全是无法写入的。本篇文章将教大家三种方式来设定容器使用者权限，以解决上述遇到的问题。&lt;/p&gt;
&lt;h2 id=&quot;使用-docker-指令时指定使用者&quot;&gt;使用 docker 指令时指定使用者&lt;/h2&gt;
&lt;p&gt;以进入一个 Ubuntu 容器为例，通过以下指令:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -ti ubuntu &amp;#x2F;bin&amp;#x2F;bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这时候我们可以通过 &lt;code&gt;-u&lt;/code&gt; 方式将使用者 &lt;code&gt;uid&lt;/code&gt; 及群组 &lt;code&gt;gid&lt;/code&gt; 传入容器内。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -ti -v $PWD&amp;#x2F;tmp:&amp;#x2F;test \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -u uid:gid ubuntu &amp;#x2F;bin&amp;#x2F;bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如何找到目前使用者 uid 及 gid 呢，可以通过下面的方式。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ id -u&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ id -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了更加方便，上述指令可以改成:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -ti -v $PWD&amp;#x2F;tmp:&amp;#x2F;test \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -u $(id -u):$(id -g) ubuntu &amp;#x2F;bin&amp;#x2F;bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.hi-linux.com/categories/docker/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你 3 个 Linux 中快速检测端口的小技巧</title>
    <link href="https://www.hi-linux.com/posts/27009.html"/>
    <id>https://www.hi-linux.com/posts/27009.html</id>
    <published>2020-05-21T01:00:00.000Z</published>
    <updated>2020-05-21T06:46:20.557Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>无论是要解决网络连接问题还是配置防火墙，第一件事是要检查系统实际打开了哪些端口。</p><p>本文介绍了几种快速查找 <code>Linux</code> 系统上哪些端口向外部开放的方法。</p><a id="more"></a><h2 id="什么是开放端口">什么是开放端口</h2><p>监听端口是应用程序监听的网络端口。你要得到的监听端口名单通常可以通过如 <code>ss</code>、<code>netstat</code> 或 <code>lsof</code> 命令查询系统上网络堆栈。每个监听端口都可以使用防火墙打开或关闭（过滤）。</p><p>一般而言，开放端口是一个网络端口，它接受来自远程位置的传入数据包。</p><p>例如：如果你正在运行的监听端口 80、443 的 <code>Web</code> 服务器，并把这些端口在防火墙上对任何人开放。使用浏览器将能够访问托管在 Web 服务器上的网站。在这种情况下，80 和 443 都是开放端口。</p><p>开放端口可能会带来安全风险，因为攻击者可以使用每个开放端口来利用漏洞或执行任何其他类型的攻击。您应该只公开应用程序功能所需的端口，然后关闭所有其他端口。</p><h2 id="使用-nmap-命令检查开放端口">使用 Nmap 命令检查开放端口</h2><p>Nmap 是功能强大的网络扫描工具，可以扫描单个主机和大型网络。它主要用于安全审核和渗透测试。</p><p>Nmap 是端口扫描的首选工具。除端口扫描外，Nmap 还可以检测 Mac 地址、操作系统类型、内核版本等。</p><p>从控制台发出以下命令确定哪些端口正在监听来自网络的 TCP 连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nmap -sT -p- 10.10.8.8</span><br></pre></td></tr></table></figure><p><code>-sT</code> 选项告诉 Nmap 扫描 TCP 端口， <code>-p-</code> 扫描所有端口（65535 个）。如果不使用 <code>-p-</code>，<code>Nmap</code> 将仅扫描 1000 个端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.60 ( https:&#x2F;&#x2F;nmap.org ) at 2019-07-09 23:10 CEST</span><br><span class="line">Nmap scan report for 10.10.8.8</span><br><span class="line">Host is up (0.0012s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">22&#x2F;tcp open  ssh</span><br><span class="line">80&#x2F;tcp open  http</span><br><span class="line">MAC Address: 08:00:27:05:49:23 (Oracle VirtualBox virtual NIC)</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 0.41 seconds</span><br></pre></td></tr></table></figure><p>以上显示，只有端口 22、80 以及 8069 在目标系统上打开。</p><p>要扫描 UDP 端口，请使用 <code>-sU</code> 代替 <code>-sT</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nmap -sU -p- 10.10.8.8</span><br></pre></td></tr></table></figure><p>有关更多信息，请访问 Nmap 手册页，并了解此工具的所有其他强大功能。</p><h2 id="使用-netcat-命令检查开放端口">使用 Netcat 命令检查开放端口</h2><p>Netcat（或nc）是一种命令行工具，可以使用 <code>TCP</code> 或 <code>UDP</code> 协议跨网络连接读取和写入数据。</p><p>使用 netcat 可以扫描单个端口或端口范围。</p><p>例如，要扫描 IP 地址为 10.10.8.8 的远程计算机上端口范围为 20-80 之间打开的 TCP 端口，你可以使用以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nc -z -v 10.10.8.8 20-80</span><br></pre></td></tr></table></figure><p><code>-z</code> 选项指示 <code>nc</code> 仅扫描打开的端口，而不发送任何数据，并且 <code>-v</code> 用于获取更多详细信息。</p><p>输出将如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nc: connect to 10.10.8.8 port 20 (tcp) failed: Connection refused</span><br><span class="line">nc: connect to 10.10.8.8 port 21 (tcp) failed: Connection refused</span><br><span class="line">Connection to 10.10.8.8 22 port [tcp&#x2F;ssh] succeeded!</span><br><span class="line">...</span><br><span class="line">Connection to 10.10.8.8 80 port [tcp&#x2F;http] succeeded!</span><br></pre></td></tr></table></figure><p>如果只希望将以上开放端口的行打印在屏幕上，则可以使用 <code>grep</code> 命令过滤结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ nc -z -v 10.10.8.8 20-80 2&gt;&amp;1 | grep succeeded</span><br><span class="line"></span><br><span class="line">Connection to 10.10.8.8 22 port [tcp&#x2F;ssh] succeeded!</span><br><span class="line">Connection to 10.10.8.8 80 port [tcp&#x2F;http] succeeded!</span><br></pre></td></tr></table></figure><p>要扫描 <code>UDP</code> 端口，请将 <code>-u</code> 选项传递给 nc 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nc -z -v -u 10.10.8.8 20-80 2&gt;&amp;1 | grep succeeded</span><br></pre></td></tr></table></figure><h2 id="使用-bash-伪设备检查打开的端口">使用 Bash 伪设备检查打开的端口</h2><p>检查某个端口是打开还是关闭的另一种方法是使用 <code>Bash Shell</code> 检查 <code>/dev/tcp/..</code> 或 <code>/dev/udp/..</code> 下的伪设备。</p><p>在 <code>/dev/$PROTOCOL/$HOST/$IP</code> 伪设备上执行命令时，<code>Bash</code> 将在指定端口上打开到指定主机的 <code>TCP</code> 或 <code>UDP</code> 连接。</p><p>以下 <code>if..else</code> 语句将检查端口 443 在 <code>kernel.org</code> 是否打开：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if timeout 5 bash -c &#39;&lt;&#x2F;dev&#x2F;tcp&#x2F;kernel.org&#x2F;443 &amp;&gt;&#x2F;dev&#x2F;null&#39;</span><br><span class="line">then</span><br><span class="line">  echo &quot;Port is open&quot;</span><br><span class="line">else</span><br><span class="line">  echo &quot;Port is closed&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>输出将如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Port is open</span><br></pre></td></tr></table></figure><h3 id="上面的代码如何工作">上面的代码如何工作？</h3><p>使用伪设备连接到端口时的默认超时时间非常长，因此我们使用 <code>timeout</code> 命令在 <code>5</code> 秒后终止测试命令。如果建立了 <code>kernel.org</code> 端口连接，则 <code>443</code> 测试命令将返回 true。你也可以使用 <code>for</code> 循环来检查指定的端口范围：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for PORT in &#123;20..80&#125;; do</span><br><span class="line">  timeout 1 bash -c &quot;&lt;&#x2F;dev&#x2F;tcp&#x2F;10.10.8.8&#x2F;$PORT &amp;&gt;&#x2F;dev&#x2F;null&quot; &amp;&amp;  echo &quot;port $PORT is open&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>输出将如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">port 22 is open</span><br><span class="line">port 80 is open</span><br></pre></td></tr></table></figure><h2 id="结论">结论</h2><p>我们为你展示了几种如何使用扫描开放端口的工具，当然你也可以使用其它工具来达到同样的目的，例如：<code>Python Socket</code> 模块、<code>Curl</code>、<code>Telnet</code> 或 <code>Wget</code>。</p><blockquote><p>来源：myfreax</p><p>原文：<a href="https://url.cn/52WWOOH" target="_blank" rel="noopener">https://url.cn/52WWOOH</a></p><p>题图：来自谷歌图片搜索</p><p>版权：本文版权归原作者所有</p><p>投稿：欢迎投稿，邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a></p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无论是要解决网络连接问题还是配置防火墙，第一件事是要检查系统实际打开了哪些端口。&lt;/p&gt;
&lt;p&gt;本文介绍了几种快速查找 &lt;code&gt;Linux&lt;/code&gt; 系统上哪些端口向外部开放的方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="工具" scheme="https://www.hi-linux.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>实战 Btrfs 文件系统之 Subvolume 与 Snapshot</title>
    <link href="https://www.hi-linux.com/posts/25994.html"/>
    <id>https://www.hi-linux.com/posts/25994.html</id>
    <published>2020-05-20T01:00:00.000Z</published>
    <updated>2020-05-20T05:02:06.187Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>对于大部分文件系统来说，在磁盘上创建好文件系统，然后再挂载到系统中去就完事了。但对于 Btrfs 来说，除了在格式化和挂载的时候指定不同的参数外，还支持很多其他的功能。比如：管理多块硬盘、支持 LVM 和 RAID 等，具体的可以参考它的「官方文档」或者「Linux 下常见文件系统对比」。</p><blockquote><p>Btrfs 是 Oracle 07 年基于 GPL 协议开源的 Linux 文件系统，其目的是替换传统的 Ext3、Ext4 系列文件系统。Ext 系列文件系统存在着诸多问题，比如反删除能力有限等；而 Btrfs 在解决问题同时提供了更加强大的高级特性。</p></blockquote><p><strong>Btrfs 特性</strong></p><p>Btrfs 在文件系统级别支持写时复制 (COW) 机制，并且支持快照 (增量快照)、支持对单个文件快照；同时支持单个超大文件、文件检查、内建 RAID；支持 B 树子卷 (组合多个物理卷，多卷支持) 等。具体如下：</p><p>Btrfs 核心特性：</p><ul><li><p>多物理卷支持：Btrfs 可有多个物理卷组成 (类似 LVM)；支持 RAID 以及联机 添加、删除、修改</p></li><li><p>写时复制更新机制 (COW)：复制、更新、替换指针，而非传统意义上的覆盖</p></li><li><p>支持数据及元数据校验码：Checksum 机制</p></li><li><p>支持创建子卷：Subvolume 机制，同时可多层创建</p></li><li><p>支持快照：基于 COW 实现快照，并且相对于 LVM 可以实现快照的快照 (增量快照)</p></li><li><p>支持透明压缩：后台自动压缩文件(消耗一定 CPU)，对前端程序透明</p></li></ul><a id="more"></a><p>Btrfs 是 Linux 下大家公认的将会替代 ext4 的下一代文件系统，功能非常强大。本篇不会介绍 Btrfs 的原理，也不会介绍 Btrfs 的所有功能，只是挑了其中的 Subvolume 和 Snapshot 这两个特性来进行介绍。</p><p>本篇所有例子都在 Ubuntu-Server-X86_64 16.04 下执行通过。</p><h2 id="准备环境">准备环境</h2><p>先创建一个虚拟的硬盘，然后将它格式化成 Btrfs，最后将它挂载到目录 /mnt/btrfs 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 为了简单起见，这里只使用一块硬盘来做测试（Btrf s可以管理多块硬盘或分区）。</span><br><span class="line"># 新建一个文件，用来虚拟一块硬盘。</span><br><span class="line">dev@ubuntu:~$ fallocate -l 512M &#x2F;tmp&#x2F;btrfs.img</span><br><span class="line"></span><br><span class="line"># 在上面创建 Btrfs 文件系统</span><br><span class="line">dev@ubuntu:~$ mkfs.btrfs &#x2F;tmp&#x2F;btrfs.img</span><br><span class="line">btrfs-progs v4.4</span><br><span class="line">See http:&#x2F;&#x2F;btrfs.wiki.kernel.org for more information.</span><br><span class="line"></span><br><span class="line">Label:              (null)</span><br><span class="line">UUID:               fd5efcd3-adc2-406b-a684-e6c87dde99a1</span><br><span class="line">Node size:          16384</span><br><span class="line">Sector size:        4096</span><br><span class="line">Filesystem size:    512.00MiB</span><br><span class="line">Block group profiles:</span><br><span class="line">  Data:             single            8.00MiB</span><br><span class="line">  Metadata:         DUP              40.00MiB</span><br><span class="line">  System:           DUP              12.00MiB</span><br><span class="line">SSD detected:       no</span><br><span class="line">Incompat features:  extref, skinny-metadata</span><br><span class="line">Number of devices:  1</span><br><span class="line">Devices:</span><br><span class="line">   ID        SIZE  PATH</span><br><span class="line">    1   512.00MiB  &#x2F;tmp&#x2F;btrfs.img</span><br><span class="line"></span><br><span class="line"># 创建文件夹并挂载</span><br><span class="line">dev@ubuntu:~$ sudo mkdir &#x2F;mnt&#x2F;btrfs</span><br><span class="line">dev@ubuntu:~$ sudo mount &#x2F;tmp&#x2F;btrfs.img &#x2F;mnt&#x2F;btrfs</span><br><span class="line"></span><br><span class="line"># 修改权限，这样后面的部分操作就不再需要 sudo</span><br><span class="line">dev@ubuntu:~$ sudo chmod 777 &#x2F;mnt&#x2F;btrfs</span><br></pre></td></tr></table></figure><h2 id="subvolume">Subvolume</h2><p>可以把 Subvolume 理解为一个虚拟的设备，由 Btrfs 管理，创建好了之后就自动挂载到了 Btrfs 文件系统的一个目录上，所以我们在文件系统里面看到的 Subvolume 就是一个目录，但它是一个特殊的目录，具有挂载点的一些属性。</p><p>新创建的 Btrfs 文件系统会创建一个路径为 “/” 的默认 Subvolume，即 Root Subvolume。其 ID 为 5（别名为 0），这是一个 ID 和目录都预设好的 Subvolume。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 这里从 mount 的参数 “subvolid&#x3D;5,subvol&#x3D;&#x2F;” 就可以看出来默认的 Root Subvolume 的 id 为 5，路径为 “&#x2F;” 。</span><br><span class="line">dev@debian:&#x2F;mnt&#x2F;btrfs$ mount|grep btrfs</span><br><span class="line">&#x2F;dev&#x2F;loop1 on &#x2F;mnt&#x2F;btrfs type btrfs (rw,relatime,space_cache,subvolid&#x3D;5,subvol&#x3D;&#x2F;)</span><br></pre></td></tr></table></figure><h3 id="创建-subvolume">创建 Subvolume</h3><p>这里我们将会利用 Btrfs 提供的工具创建两个新 Subvolume 和两个文件夹，来看看他们之间的差别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">dev@ubuntu:~$ cd &#x2F;mnt&#x2F;btrfs</span><br><span class="line"># btrfs 命令是 Btrfs 提供的应用层工具，可以用来管理 Btrfs。</span><br><span class="line"># 这里依次创建两个 Subvolume，创建完成之后会自动在当前目录下生成两个目录。</span><br><span class="line">dev@ubuntu:&#x2F;mnt&#x2F;btrfs$ btrfs subvolume create sub1</span><br><span class="line">Create subvolume &#39;.&#x2F;sub1&#39;</span><br><span class="line">dev@ubuntu:&#x2F;mnt&#x2F;btrfs$ btrfs subvolume create sub2</span><br><span class="line">Create subvolume &#39;.&#x2F;sub2&#39;</span><br><span class="line"></span><br><span class="line"># 创建两个文件夹</span><br><span class="line">dev@ubuntu:&#x2F;mnt&#x2F;btrfs$ mkdir dir1 dir2</span><br><span class="line"></span><br><span class="line"># 在sub1、sub2 和 dir1 中分别创建一个文件</span><br><span class="line">dev@ubuntu:&#x2F;mnt&#x2F;btrfs$ touch dir1&#x2F;dir1-01.txt</span><br><span class="line">dev@ubuntu:&#x2F;mnt&#x2F;btrfs$ touch sub1&#x2F;sub1-01.txt</span><br><span class="line">dev@ubuntu:&#x2F;mnt&#x2F;btrfs$ touch sub2&#x2F;sub2-01.txt</span><br><span class="line"></span><br><span class="line"># 最后看看目录结构，是不是看起来 sub1 和 dir1 没什么区别？</span><br><span class="line">dev@ubuntu:&#x2F;mnt&#x2F;btrfs$ tree</span><br><span class="line">.</span><br><span class="line">├── dir1</span><br><span class="line">│   └── dir1-01.txt</span><br><span class="line">├── dir2</span><br><span class="line">├── sub1</span><br><span class="line">│   └── sub1-01.txt</span><br><span class="line">└── sub2</span><br><span class="line">    └── sub2-01.txt</span><br></pre></td></tr></table></figure><p>不过由于每个 Subvolume 都是一个单独的虚拟设备，所以无法跨 Subvolume 建立硬链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 虽然 sub1 和 sub2 属于相同的 Btrfs 文件系统，并且在一块物理硬盘上。但由于他们属于不同的 Subvolume，所以在它们之间建立硬链接失败。</span><br><span class="line">dev@ubuntu:&#x2F;mnt&#x2F;btrfs$ ln .&#x2F;sub1&#x2F;sub1-01.txt .&#x2F;sub2&#x2F;</span><br><span class="line">ln: failed to create hard link &#39;.&#x2F;sub2&#x2F;sub1-01.txt&#39; &#x3D;&gt; &#39;.&#x2F;sub1&#x2F;sub1-01.txt&#39;: Invalid cross-device link</span><br></pre></td></tr></table></figure><h3 id="删除-subvolume">删除 Subvolume</h3><p>Subvolume 不能用 rm 命令来删除的，只能通过 btrfs 命令来删除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 普通的目录通过 rm 命令就可以被删除</span><br><span class="line">dev@ubuntu:&#x2F;mnt&#x2F;btrfs$ rm -r dir2</span><br><span class="line"></span><br><span class="line"># 通过 rm 命令删除 Subvolume 就会失败</span><br><span class="line">dev@ubuntu:&#x2F;mnt&#x2F;btrfs$ sudo rm -r sub2</span><br><span class="line">rm: cannot remove &#39;sub2&#39;: Operation not permitted</span><br><span class="line"></span><br><span class="line"># 需要通过 btrfs 命令才能删除，删除 sub2 成功（就算 Subvolume 里面有文件也能被删除）</span><br><span class="line">dev@ubuntu:&#x2F;mnt&#x2F;btrfs$ sudo btrfs subvolume del sub2</span><br><span class="line">Delete subvolume (no-commit): &#39;&#x2F;mnt&#x2F;btrfs&#x2F;sub2&#39;</span><br><span class="line">dev@ubuntu:&#x2F;mnt&#x2F;btrfs$ tree</span><br><span class="line">.</span><br><span class="line">├── dir1</span><br><span class="line">│   └── dir1-01.txt</span><br><span class="line">└── sub1</span><br><span class="line">    └── sub1-01.txt</span><br></pre></td></tr></table></figure><p>上面删除的时候可以看到这样的提示： Delete subvolume (no-commit)，表示 Subvolume 被删除了，但没有提交。意思是在内存里面生效了，但磁盘上的内容还没删，意味着如果这个时候系统 Crash 掉，这个 Subvolume 有可能还会回来。Btrfs 这样做的好处是删除速度很快，不会影响使用，缺点是有可能在后台 Commit 的过程中系统挂掉，导致 Commit 失败。</p><p>为了确保 Subvolume 里的数据被真正的从磁盘上移除掉，可以在删除 Subvolume 的时候指定 -c 参数，这样 btrfs命令会等提交完成之后再返回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dev@ubuntu:&#x2F;mnt&#x2F;btrfs$ sudo btrfs subvolume del -c sub2</span><br><span class="line">Delete subvolume (commit): &#39;&#x2F;mnt&#x2F;btrfs&#x2F;sub2&#39;</span><br></pre></td></tr></table></figure><h3 id="挂载-subvolume">挂载 Subvolume</h3><p>Subvolume 可以直接通过 mount 命令进行挂载，和挂载其它设备没什么区别，具体的挂载参数请查看参考官方文档。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个用于挂载点的目录</span><br><span class="line">dev@ubuntu:&#x2F;mnt&#x2F;btrfs$ sudo mkdir &#x2F;mnt&#x2F;sub1</span><br><span class="line"></span><br><span class="line"># 先查看待挂载的 Subvolume 的 id</span><br><span class="line">dev@debian:&#x2F;mnt&#x2F;btrfs$ sudo btrfs subvolume list &#x2F;mnt&#x2F;btrfs&#x2F;</span><br><span class="line">ID 256 gen 9 top level 5 path sub1</span><br><span class="line"></span><br><span class="line"># 通过 -o 参数来指定要挂载的 Subvolume 的 ID</span><br><span class="line"># 通过路径来挂载也是一样的效果：sudo mount -o subvol&#x3D;&#x2F;sub1 &#x2F;tmp&#x2F;btrfs.img &#x2F;mnt&#x2F;sub1&#x2F;</span><br><span class="line">dev@debian:&#x2F;mnt&#x2F;btrfs$ sudo mount -o subvolid&#x3D;256 &#x2F;tmp&#x2F;btrfs.img &#x2F;mnt&#x2F;sub1&#x2F;</span><br><span class="line">dev@debian:&#x2F;mnt&#x2F;btrfs$ tree &#x2F;mnt&#x2F;sub1&#x2F;</span><br><span class="line">&#x2F;mnt&#x2F;sub1&#x2F;</span><br><span class="line">└── sub1-01.txt</span><br></pre></td></tr></table></figure><h3 id="设置-subvolume-只读">设置 Subvolume 只读</h3><p>Subvolume 可以被设置成只读状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 通过 btrfs property 可以查看和修改 Subvolume 的只读状态</span><br><span class="line"># 默认情况下，Subvolume 的只读属性为 false，即允许写</span><br><span class="line">dev@ubuntu:&#x2F;mnt&#x2F;btrfs$ btrfs property get -ts .&#x2F;sub1&#x2F;</span><br><span class="line">ro&#x3D;false</span><br><span class="line"></span><br><span class="line"># 将 sub1 的只读属性设置成 true</span><br><span class="line">dev@ubuntu:&#x2F;mnt&#x2F;btrfs$ btrfs property set -ts .&#x2F;sub1&#x2F; ro true</span><br><span class="line">dev@ubuntu:&#x2F;mnt&#x2F;btrfs$ btrfs property get -ts .&#x2F;sub1</span><br><span class="line">ro&#x3D;true</span><br><span class="line"></span><br><span class="line"># 写文件失败，提示文件系统只读</span><br><span class="line">dev@ubuntu:&#x2F;mnt&#x2F;btrfs$ touch .&#x2F;sub1&#x2F;sub1-02.txt</span><br><span class="line">touch: cannot touch &#39;.&#x2F;sub1&#x2F;sub1-02.txt&#39;: Read-only file system</span><br><span class="line"></span><br><span class="line"># 将sub1的状态改回去，以免影响后续测试</span><br><span class="line">dev@ubuntu:&#x2F;mnt&#x2F;btrfs$ btrfs property set -ts .&#x2F;sub1&#x2F; ro false</span><br></pre></td></tr></table></figure><h2 id="snapshot">Snapshot</h2><p>可以在 Subvolume 的基础上制作快照，几点需要注意：</p><ul><li><p>默认情况下 Subvolume 的快照是可写的</p></li><li><p>快照是特殊的 Subvolume，具有 Subvolume 的属性。所以快照也可以通过 mount 挂载，也可以通过 btrfs property 命令设置只读属性</p></li><li><p>由于快照的本质就是一个 Subvolume ，所以可以在快照上面再做快照</p></li></ul><p>在 Subvolume 上做了快照后，Subvolume 和快照就会共享所有的文件。只有当文件更新的时候，才会触发 COW（copy on write），所以创建快照很快，基本不花时间。并且 Btrfs 的 COW 机制很高效，就算多个快照共享一个文件，更新这个文件也和更新一个普通文件差不多的速度。</p><p>如果用过 Git 的话，就能很容易理解 Btrfs 里的快照，可以把 Subvolume 理解为 Git 里面的 master 分支，而快照就是从 master checkout 出来的新分支，于是快照跟 Git 里的分支有类似的特点：</p><ul><li><p>创建快照几乎没有开销</p></li><li><p>可以在快照的基础上再创建快照</p></li><li><p>当前快照里面的修改不会影响其它快照</p></li><li><p>快照可以被删除</p></li></ul><p>当然 Subvolume 也可以像 Git 里的 master 一样被删除。</p><h3 id="创建快照">创建快照</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># 在 Root Subvolume 的基础上创建一个快照</span><br><span class="line"># 默认情况下快照是可写的，如果要创建只读快照，需要加上 -r 参数</span><br><span class="line">dev@debian:&#x2F;mnt&#x2F;btrfs$ sudo btrfs subvolume snapshot .&#x2F; .&#x2F;snap-root</span><br><span class="line">Create a snapshot of &#39;.&#x2F;&#39; in &#39;.&#x2F;snap-root&#39;</span><br><span class="line"></span><br><span class="line"># 创建完成后，可以看到我们已经有了两个 Subvolume</span><br><span class="line">dev@debian:&#x2F;mnt&#x2F;btrfs$ sudo btrfs subvolume list .&#x2F;</span><br><span class="line">ID 256 gen 11 top level 5 path sub1</span><br><span class="line">ID 257 gen 13 top level 5 path snap-root</span><br><span class="line"></span><br><span class="line"># 我们可以通过指定 -s 参数来只列出快照</span><br><span class="line">dev@debian:&#x2F;mnt&#x2F;btrfs$ sudo btrfs subvolume list -s .&#x2F;</span><br><span class="line">ID 257 gen 10 cgen 10 top level 5 otime 2017-03-05 21:46:03 path snap-root</span><br><span class="line"></span><br><span class="line"># 再来看看快照 snap-root 中的文件，可以看到有 dir1 及下面的文件，但看不到 sub1 下的文件，那是因为 sub1 是一个subvolume。在做一个 Subvolume 的快照的时候，不会将它里面的 Subvolume 也做快照</span><br><span class="line">dev@debian:&#x2F;mnt&#x2F;btrfs$ tree .&#x2F;snap-root</span><br><span class="line">.&#x2F;snap-root</span><br><span class="line">├── dir1</span><br><span class="line">│   └── dir1-01.txt</span><br><span class="line">└── sub1</span><br><span class="line"></span><br><span class="line"># 创建 sub1 的一个快照，可以看到 sub1 里面的文件出现在了快照里面</span><br><span class="line">dev@debian:&#x2F;mnt&#x2F;btrfs$ sudo btrfs subvolume snapshot .&#x2F;sub1&#x2F; .&#x2F;snap-sub1</span><br><span class="line">Create a snapshot of &#39;.&#x2F;sub1&#x2F;&#39; in &#39;.&#x2F;snap-sub1&#39;</span><br><span class="line"></span><br><span class="line"># 然后在 sub1 和它的快照 snap-sub1 下面各自创建一个文件，会发现它们之间不受影响</span><br><span class="line">dev@debian:&#x2F;mnt&#x2F;btrfs$ touch snap-sub1&#x2F;snap-sub1-01.txt</span><br><span class="line">dev@debian:&#x2F;mnt&#x2F;btrfs$ touch sub1&#x2F;sub1-02.txt</span><br><span class="line">dev@debian:&#x2F;mnt&#x2F;btrfs$ tree</span><br><span class="line">.</span><br><span class="line">├── dir1</span><br><span class="line">│   └── dir1-01.txt</span><br><span class="line">├── snap-root</span><br><span class="line">│   ├── dir1</span><br><span class="line">│   │   └── dir1-01.txt</span><br><span class="line">│   └── sub1</span><br><span class="line">├── snap-sub1</span><br><span class="line">│   ├── snap-sub1-01.txt</span><br><span class="line">│   └── sub1-01.txt</span><br><span class="line">└── sub1</span><br><span class="line">    ├── sub1-01.txt</span><br><span class="line">    └── sub1-02.txt</span><br></pre></td></tr></table></figure><h3 id="删除快照">删除快照</h3><p>删除快照和删除 Subvolume 是一样的，没有区别。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dev@debian:&#x2F;mnt&#x2F;btrfs$ sudo btrfs subvolume del snap-root</span><br><span class="line">Delete subvolume (no-commit): &#39;&#x2F;mnt&#x2F;btrfs&#x2F;snap-root&#39;</span><br><span class="line">dev@debian:&#x2F;mnt&#x2F;btrfs$ sudo btrfs subvolume del snap-sub1</span><br><span class="line">Delete subvolume (no-commit): &#39;&#x2F;mnt&#x2F;btrfs&#x2F;snap-sub1&#39;</span><br><span class="line">dev@debian:&#x2F;mnt&#x2F;btrfs$ tree</span><br><span class="line">.</span><br><span class="line">├── dir1</span><br><span class="line">│   └── dir1-01.txt</span><br><span class="line">└── sub1</span><br><span class="line">    ├── sub1-01.txt</span><br><span class="line">    └── sub1-02.txt</span><br></pre></td></tr></table></figure><h2 id="default-subvolume">Default Subvolume</h2><p>可以设置 Btrfs 分区的默认 Subvolume，即在挂载磁盘的时候，可以只让分区中的指定 Subvolume 对用户可见。看下面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 查看 sub1 的ID</span><br><span class="line">dev@debian:&#x2F;mnt&#x2F;btrfs$ sudo btrfs subvolume list .&#x2F;</span><br><span class="line">ID 256 gen 14 top level 5 path sub1</span><br><span class="line"></span><br><span class="line"># 将 sub1 设置为当前 Btrfs 文件系统的默认 Subvolume</span><br><span class="line">dev@debian:&#x2F;mnt&#x2F;btrfs$ sudo btrfs subvolume set-default 256 &#x2F;mnt&#x2F;btrfs&#x2F;</span><br><span class="line"></span><br><span class="line"># 重新将虚拟硬盘挂载到一个新目录</span><br><span class="line">dev@debian:&#x2F;mnt&#x2F;btrfs$ sudo mkdir &#x2F;mnt&#x2F;btrfs1</span><br><span class="line">dev@debian:&#x2F;mnt&#x2F;btrfs$ sudo mount &#x2F;tmp&#x2F;btrfs.img &#x2F;mnt&#x2F;btrfs1&#x2F;</span><br><span class="line"></span><br><span class="line"># 这里将只能看到 sub1 下的文件</span><br><span class="line">dev@debian:&#x2F;mnt&#x2F;btrfs$ tree &#x2F;mnt&#x2F;btrfs1</span><br><span class="line">&#x2F;mnt&#x2F;btrfs1</span><br><span class="line">├── sub1-01.txt</span><br><span class="line">└── sub1-02.txt</span><br><span class="line"></span><br><span class="line"># 由于 Btrfs 原来的默认 Subvolume 是 Root Subvolume，其 ID 是5（也可以通过 0 来标识），所以我们可以通过同样的命令将默认 Subvolume 再改回去</span><br><span class="line">dev@debian:&#x2F;mnt&#x2F;btrfs$ sudo btrfs subvolume set-default 0 &#x2F;mnt&#x2F;btrfs&#x2F;</span><br></pre></td></tr></table></figure><h3 id="default-subvolume-有什么用呢">Default Subvolume 有什么用呢？</h3><p>利用 Snapshot 和 Default Subvolume，可以很方便的实现不同系统版本的切换。比如将系统安装在一个 Subvolume 下面，当要做什么危险操作的时候，先在 Subvolume 的基础上做一个快照 A。如果操作成功，那么什么都不用做（或者把 A 删掉），继续用原来的 Subvolume，A 不被删掉也没关系，多一个快照在那里也不占空间。如果操作失败，那么可以将 A 设置成 Default Subvolume，并将原来的 Subvolume 删除，这样就相当于系统回滚。</p><p>有了这样的功能后，Linux 的每次操作都能回滚，养成在修改操作前做 Snapshot 的习惯，就再也不用担心 rm 误删文件了。</p><p>现在有些发行版已经有了类似的功能，如 Ubuntu，将安装工具 Apt 和 Btrfs 结合，自动的在安装软件之前打一个 Snapshot。然后安装软件，如果成功，删除新的 Snapshot，如果失败，修改 Default Subvolume 为新的 Snapshot，删除掉原来的 Snapshot，这样对系统没有任何影响，并且所有操作对用户是透明的。</p><p>随着 Btrfs 的成熟和普及，相信会改变一些我们使用 Linux 的习惯。</p><h2 id="延伸阅读">延伸阅读</h2><h3 id="btrfs-相关命令">btrfs 相关命令</h3><p>管理 btrfs 使用 btrfs 命令，该命令包含诸多子命令已完成不同的功能管理，常用命令如下：</p><ul><li><p>btrfs 文件系统属性查看： <code>btrfs filesystem show</code></p></li><li><p>调整文件系统大小： <code>btrfs filesystem resize +10g MOUNT_POINT</code></p></li><li><p>添加硬件设备： <code>btrfs filesystem add DEVICE MOUNT_POINT</code></p></li><li><p>均衡文件负载： <code>btrfs blance status|start|pause|resume|cancel MOUNT_POINT</code></p></li><li><p>移除物理卷(联机、自动移动)： <code>btrfs device delete DEVICE MOUNT_POINT</code></p></li><li><p>动态调整数据存放机制： <code>btrfs balance start -dconvert=RAID MOUNT_POINT</code></p></li><li><p>动态调整元数据存放机制： <code>btrfs balance start -mconvert=RAID MOUNT_POINT</code></p></li><li><p>动态调整文件系统数据数据存放机制： <code>btrfs balance start -sconvert=RAID MOUNT_POINT</code></p></li><li><p>创建子卷： <code>btrfs subvolume create MOUNT_POINT/DIR</code></p></li><li><p>列出所有子卷： <code>btrfs subvolume list MOUNT_POINT</code></p></li><li><p>显示子卷详细信息： <code>btrfs subvolume show MOUNT_POINT</code></p></li><li><p>删除子卷： <code>btrfs subvolume delete MOUNT_POIN/DIR</code></p></li><li><p>创建子卷快照(子卷快照必须存放与当前子卷的同一父卷中)： <code>btrfs subvolume snapshot SUBVOL PARVOL</code></p></li><li><p>删除快照同删除子卷一样： <code>btrfs subvolume delete MOUNT_POIN/DIR</code></p></li></ul><h2 id="相关阅读链接">相关阅读链接</h2><ol><li><p>Btrfs 官方文档：<a href="https://btrfs.wiki.kernel.org/index.php/Main_Page" target="_blank" rel="noopener">https://btrfs.wiki.kernel.org/index.php/Main_Page</a></p></li><li><p>Linux 下常见文件系统对比 ：<a href="https://segmentfault.com/a/1190000008481493" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008481493</a></p></li><li><p>Btrfs 官方挂载硬盘文档：<a href="https://btrfs.wiki.kernel.org/index.php/Manpage/btrfs(5)#MOUNT_OPTIONS" target="_blank" rel="noopener">https://btrfs.wiki.kernel.org/index.php/Manpage/btrfs(5)#MOUNT_OPTIONS</a></p></li></ol><h2 id="参考文档">参考文档</h2><ol><li><p><a href="https://segmentfault.com/a/1190000008605135" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008605135</a></p></li><li><p><a href="https://mritd.me/2017/03/20/btrfs-note/" target="_blank" rel="noopener">https://mritd.me/2017/03/20/btrfs-note/</a></p></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于大部分文件系统来说，在磁盘上创建好文件系统，然后再挂载到系统中去就完事了。但对于 Btrfs 来说，除了在格式化和挂载的时候指定不同的参数外，还支持很多其他的功能。比如：管理多块硬盘、支持 LVM 和 RAID 等，具体的可以参考它的「官方文档」或者「Linux 下常见文件系统对比」。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Btrfs 是 Oracle 07 年基于 GPL 协议开源的 Linux 文件系统，其目的是替换传统的 Ext3、Ext4 系列文件系统。Ext 系列文件系统存在着诸多问题，比如反删除能力有限等；而 Btrfs 在解决问题同时提供了更加强大的高级特性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Btrfs 特性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Btrfs 在文件系统级别支持写时复制 (COW) 机制，并且支持快照 (增量快照)、支持对单个文件快照；同时支持单个超大文件、文件检查、内建 RAID；支持 B 树子卷 (组合多个物理卷，多卷支持) 等。具体如下：&lt;/p&gt;
&lt;p&gt;Btrfs 核心特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;多物理卷支持：Btrfs 可有多个物理卷组成 (类似 LVM)；支持 RAID 以及联机 添加、删除、修改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写时复制更新机制 (COW)：复制、更新、替换指针，而非传统意义上的覆盖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持数据及元数据校验码：Checksum 机制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持创建子卷：Subvolume 机制，同时可多层创建&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持快照：基于 COW 实现快照，并且相对于 LVM 可以实现快照的快照 (增量快照)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持透明压缩：后台自动压缩文件(消耗一定 CPU)，对前端程序透明&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Btrfs" scheme="https://www.hi-linux.com/tags/Btrfs/"/>
    
  </entry>
  
  <entry>
    <title>微软出品 Kubernetes 最新学习指南 v3.0，需要的赶紧下载吧！</title>
    <link href="https://www.hi-linux.com/posts/61882.html"/>
    <id>https://www.hi-linux.com/posts/61882.html</id>
    <published>2020-05-19T01:00:00.000Z</published>
    <updated>2020-05-19T08:49:55.567Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><code>Kubernetes</code> 正在席卷应用开发世界，这是一个不争的事实。预计到 <code>2022</code> 年，全球有超过 <code>75％</code> 的组织将在生产环境中运行容器化应用程序。</p><p><code>Kubernetes</code> 正在塑造应用程序开发和管理的未来，微软希望今天帮助您开始使用它。为了你能更快的掌握 <code>Kubernetes</code>，微软出品了一个 <code>Kubernetes</code> 的学习路径指南。</p><p><img src="https://www.hi-linux.com/img/linux/ms-kubernetes-01.png" alt=""></p><p>该指南适用于有兴趣进一步了解 <code>Kubernetes</code> 的任何人。通过本指南你可以在短短 <code>50</code> 天内，了解 <code>Kubernetes</code> 的基础知识，并获得有关其各种组件，功能和解决方案。</p><p><img src="https://www.hi-linux.com/img/linux/ms-kubernetes-02.png" alt=""></p><a id="more"></a><p>「50 days from zero to hero with Kubernetes」大纲如下：</p><ul><li>为什么你需要关心容器</li><li>理解 Kubernetes 中的 Serverless</li><li>Kubernetes 的使用场景</li><li>Kubernetes 是如何工作的</li><li>Kubernetes 是如何调度任务的</li><li>Kubernetes 内的 Volume</li><li>Kubernetes 是如何部署服务的</li><li>Kubernetes CI/CD</li><li>Kubernetes 上有状态服务管理</li><li>Kubernetes Secret</li><li>准备把服务放在生产环境</li><li>监控与告警</li><li>Kubernetes 内的配置管理</li><li>Kubernetes 内的微服务是如何工作的</li><li>Kubernetes 中 Pod 与 Pod 的生命周期</li><li>理解基于角色的访问控制</li><li>通过 Operator 管理应用程序</li><li>…</li></ul><p>看上去，是不是很不错呢？<strong>只需在公众号对话框内回复 「<code>ms-kubernetes</code>」，即可获取「微软最新版 Kubernetes 学习指南 v3.0」PDF 版。</strong> PDF 能做得如此精美，交互也能做得如此好还是头一次见呢！</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Kubernetes&lt;/code&gt; 正在席卷应用开发世界，这是一个不争的事实。预计到 &lt;code&gt;2022&lt;/code&gt; 年，全球有超过 &lt;code&gt;75％&lt;/code&gt; 的组织将在生产环境中运行容器化应用程序。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Kubernetes&lt;/code&gt; 正在塑造应用程序开发和管理的未来，微软希望今天帮助您开始使用它。为了你能更快的掌握 &lt;code&gt;Kubernetes&lt;/code&gt;，微软出品了一个 &lt;code&gt;Kubernetes&lt;/code&gt; 的学习路径指南。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/ms-kubernetes-01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;该指南适用于有兴趣进一步了解 &lt;code&gt;Kubernetes&lt;/code&gt; 的任何人。通过本指南你可以在短短 &lt;code&gt;50&lt;/code&gt; 天内，了解 &lt;code&gt;Kubernetes&lt;/code&gt; 的基础知识，并获得有关其各种组件，功能和解决方案。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/ms-kubernetes-02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/categories/kubernetes/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>推荐一款支持 微信/QQ/TIM 消息防撤回神器 RevokeMsgPatcher</title>
    <link href="https://www.hi-linux.com/posts/30034.html"/>
    <id>https://www.hi-linux.com/posts/30034.html</id>
    <published>2020-05-19T01:00:00.000Z</published>
    <updated>2020-05-20T05:10:57.908Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>现在的社交软件都有一种 「后悔药」，学名叫 「消息撤回功能」。我们用的最多的应该是微信。在微信当中，不管你是消息发错了还是后悔了，只要长按消息内容点击 「撤回」，对方没看到的话，就永远看不到了！</p><p>当你看到别人撤回了一堆消息后，是不是很好奇 <code>Ta</code> 说了啥？但是当你再问 <code>Ta</code> 到底撤回了什么时候，基本上 <code>Ta</code> 是不会告诉你的，要不然也不会撤回了，对不对呀？既然消息已经发送过来一次了，难道我们不能做点什么让它撤回不了嘛？</p><p>今天我们就给大家推荐一个神器来解决这个千年难题。不论对方怎么骚操作，都可以让 <code>Ta</code> 发送过的消息留在聊天记录里，永远无法撤回！</p><p><img src="http://www.immidu.com/usr/uploads/2019/08/2390070843.jpg" alt=""></p><p>说了这么多，到底这神器是什么呢？是时候揭开它的神秘面纱了，它就是 <code>RevokeMsgPatcher</code>。<code>RevokeMsgPatcher</code> 是一款 <code>Windows</code> 下 PC 版的微信防撤回补丁。它除了支持微信，而且还支持 <code>QQ</code> 和 <code>TIM</code> 哟！</p><blockquote><p>项目地址：<a href="https://github.com/huiyadanli/RevokeMsgPatcher" target="_blank" rel="noopener">https://github.com/huiyadanli/RevokeMsgPatcher</a></p></blockquote><a id="more"></a><h2 id="安装-revokemsgpatcher">安装 RevokeMsgPatcher</h2><p><code>RevokeMsgPatcher</code> 的安装非常简单，只需在官方仓库 <code>Releases</code> 页面直接下载各平台对应的版本，解压后即可使用。</p><blockquote><p>注意：你的系统必须是 <code>Windows 7</code> 或更高版本，另外系统必须安装 <code>.NET Framework 4.5</code> 或更高版本。</p></blockquote><p><strong>RevokeMsgPatcher 目前支持的版本</strong></p><ul><li>支持的最新版本</li></ul><p><img src="https://i.loli.net/2019/11/13/LXw3lvqpftRokx2.png" alt=""></p><ul><li>支持的历史版本</li></ul><p><img src="https://i.loli.net/2019/11/13/FDO1cCJKIwB6beR.png" alt=""></p><p><strong>RevokeMsgPatcher 安装方法</strong></p><p><img src="https://raw.githubusercontent.com/huiyadanli/RevokeMsgPatcher/master/Images/screenshot.png" alt=""></p><ol><li><p><code>RevokeMsgPatcher</code> 使用和大多补丁程序类似，你肯定需要先关闭 <code>微信/QQ/TIM</code>。</p></li><li><p>以管理员权限运行程序，并点击工具界面上的「<code>...</code>」按钮后选择 <code>微信/QQ/TIM</code> 的安装路径。</p></li><li><p>点击工具界面上的「<code>点我防撤回</code>」按钮后，即可安装成功。</p></li></ol><blockquote><p>注意：</p><ol><li><p>缺省情况下会自动从注册表中获取安装路径，如果你使用的是绿色版可能需要手动选择一下安装路径。</p></li><li><p>工具界面此时可能会出现短暂的无响应，请耐心等待。另：因为补丁修改了微信的 <code>WeChatWin.dll</code> 文件、<code>QQ/TIM</code> 的 <code>IM.dll</code> 文件，如果杀毒软件弹出警告，你需要放行一下哟！</p></li></ol></blockquote><h2 id="使用-revokemsgpatcher">使用 RevokeMsgPatcher</h2><p>无论是 <code>微信/QQ/TIM</code> 上，对方进行撤回消息操作后，你在聊天界面仍旧能看到对方撤回的消息。下面是一个演示效果图：</p><p><img src="https://www.hi-linux.com/img/linux/unnamed-file-18.gif" alt=""></p><p>是不是，很惊喜，很意外呢。哈哈!</p><blockquote><p><code>RevokeMsgPatcher</code> 实现原理非常简单，其本质就是一个十六进制编辑器，可以对指定文件指定位置的字节进行编辑，把原先需要人工操作的地方自动化。</p></blockquote><p>赶紧用起来吧，从今以后你再也不会不知道你女朋友的小秘密了，哈哈！</p><h2 id="参考文档">参考文档</h2><ol><li><p><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></p></li><li><p><a href="https://xiaoma.me/778.html" target="_blank" rel="noopener">https://xiaoma.me/778.html</a></p></li><li><p><a href="http://www.immidu.com/index.php/archives/22/" target="_blank" rel="noopener">http://www.immidu.com/index.php/archives/22/</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/pFl8fflWQYThwWAejR9G-g" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/pFl8fflWQYThwWAejR9G-g</a></p></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在的社交软件都有一种 「后悔药」，学名叫 「消息撤回功能」。我们用的最多的应该是微信。在微信当中，不管你是消息发错了还是后悔了，只要长按消息内容点击 「撤回」，对方没看到的话，就永远看不到了！&lt;/p&gt;
&lt;p&gt;当你看到别人撤回了一堆消息后，是不是很好奇 &lt;code&gt;Ta&lt;/code&gt; 说了啥？但是当你再问 &lt;code&gt;Ta&lt;/code&gt; 到底撤回了什么时候，基本上 &lt;code&gt;Ta&lt;/code&gt; 是不会告诉你的，要不然也不会撤回了，对不对呀？既然消息已经发送过来一次了，难道我们不能做点什么让它撤回不了嘛？&lt;/p&gt;
&lt;p&gt;今天我们就给大家推荐一个神器来解决这个千年难题。不论对方怎么骚操作，都可以让 &lt;code&gt;Ta&lt;/code&gt; 发送过的消息留在聊天记录里，永远无法撤回！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.immidu.com/usr/uploads/2019/08/2390070843.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;说了这么多，到底这神器是什么呢？是时候揭开它的神秘面纱了，它就是 &lt;code&gt;RevokeMsgPatcher&lt;/code&gt;。&lt;code&gt;RevokeMsgPatcher&lt;/code&gt; 是一款 &lt;code&gt;Windows&lt;/code&gt; 下 PC 版的微信防撤回补丁。它除了支持微信，而且还支持 &lt;code&gt;QQ&lt;/code&gt; 和 &lt;code&gt;TIM&lt;/code&gt; 哟！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/huiyadanli/RevokeMsgPatcher&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/huiyadanli/RevokeMsgPatcher&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="工具" scheme="https://www.hi-linux.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="工具" scheme="https://www.hi-linux.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="微信" scheme="https://www.hi-linux.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>U 盘多系统安装盘制作神器 YUMI 使用教程</title>
    <link href="https://www.hi-linux.com/posts/23035.html"/>
    <id>https://www.hi-linux.com/posts/23035.html</id>
    <published>2020-05-17T01:00:00.000Z</published>
    <updated>2020-05-17T07:48:06.539Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>通常我们一个 U 盘只能制作成一个系统安装盘，比如制作好一个 <code>Windows 10</code> 安装盘，日后想要用到 <code>Linux</code>、<code>WinPE</code> 等安装盘时，只能重新制作一遍，非常浪费时间。而且现在 U 盘容量都很大，如果只放一个系统，同样就会白白浪费 U 盘剩余的空间。</p><p>今天，我们就给大家推荐一个可以让你的 U 盘制作成多系统安装盘的神器 <code>YUMI</code>。</p><p><code>YUMI</code> (<code>Your Universal Multiboot Integrator</code>) 是一款免费便携的 <code>USB</code> 多合一启动盘制作工具！它可以让你轻松将多款不同操作系统 <code>ISO</code> 镜像装到一个 U 盘里，制作出支持 <code>Multiboot</code> (多系统引导启动) 的多合一系统引导安装盘。</p><p><code>YUMI</code> 几乎支持全系列的 <code>Windows</code> 和 <code>Linux</code> 操作系统。比如 <code>Windows 10</code>、<code>Windows 7</code>、<code>WinPE</code>、<code>Windows To Go</code> 以及 <code>Linux</code> 的各种发行版。</p><blockquote><p>官网：<a href="https://www.pendrivelinux.com/yumi-multiboot-usb-creator/" target="_blank" rel="noopener">https://www.pendrivelinux.com/yumi-multiboot-usb-creator/</a></p></blockquote><a id="more"></a><h2 id="安装-yumi">安装 YUMI</h2><p><code>YUMI</code> 目前只支持 <code>Windows</code> 和 <code>Linux</code> 平台，共分为 <code>Legacy</code> 和 <code>UEFI</code> 两个版本，请根据自己 <code>BIOS</code> 实际引导情况选择下载。</p><ol><li>Windows 平台</li></ol><p><code>Windows</code> 安装非常简单，基本开箱即用，这里就不多赘述了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Legacy 版本下载地址</span><br><span class="line">https:&#x2F;&#x2F;www.pendrivelinux.com&#x2F;downloads&#x2F;YUMI&#x2F;YUMI-2.0.6.9.exe</span><br><span class="line"></span><br><span class="line"># UEFI 版本下载地址</span><br><span class="line">https:&#x2F;&#x2F;www.pendrivelinux.com&#x2F;downloads&#x2F;YUMI&#x2F;YUMI-UEFI-0.0.1.9.exe</span><br></pre></td></tr></table></figure><ol start="2"><li>Linux 平台</li></ol><p><code>Linux</code> 下安装相对就比较麻烦了，具体可以参考下官方文档。如果没什么必要，还是建议直接在 <code>Windows</code> 平台上使用。怎么简单怎么来嘛，反正平时用得也不多，哈哈！。</p><blockquote><p><a href="https://www.pendrivelinux.com/yumi-multiboot-usb-creator#HowTo" target="_blank" rel="noopener">https://www.pendrivelinux.com/yumi-multiboot-usb-creator#HowTo</a></p></blockquote><h2 id="使用-yumi-制作多系统启动盘">使用 YUMI 制作多系统启动盘</h2><p>使用 <code>YUMI</code> 制作多合一系统安装盘非常简单。插上 U  盘，运行 <code>YUMI</code> 软件后。制作系统安装盘一共只要以下 4 步：</p><ul><li><p>第一步：选择需要制作 U 盘的盘符。</p></li><li><p>第二步：选择你将要制作安装盘系统的名称。</p></li><li><p>第三步：选择你事先下载好的该系统对应的 <code>ISO</code> 镜像的安装文件。</p></li><li><p>第四步：最后，按下 「<code>Create</code>」后即开始制作。</p></li></ul><p><img src="https://i.loli.net/2019/10/25/cxpo3CA8ETsDRKw.png" alt=""></p><blockquote><p>注意: <code>YUMI</code> 每次只能制作一个系统的安装盘，如果你要制作多个系统，只需重复执行多次上述的步骤来增加其它操作系统即可。</p></blockquote><h2 id="使用-yumi-引导多系统">使用 YUMI 引导多系统</h2><p>系统安装盘制作完成后，在电脑 <code>BIOS</code> 设置 U 盘为开机启动后，就能直接进入 <code>YUMI</code> 的 <code>Miltiboot</code> 引导界面。</p><p><img src="https://www.pendrivelinux.com/wp-content/uploads/YUMI-Boot-Menu.png" alt=""></p><p>然后，你只需要选择自己需要的系统就可以开始安装。</p><h2 id="删除已制作好的操作系统">删除已制作好的操作系统</h2><p>按上述的步骤制作好多重启动盘之后，如果你需要删除其中的一个或者多个系统，那么你只需重新运行 <code>YUMI</code>，然后勾选右上方的「<code>You're in Uninstaller Model</code>」即可在下方列表中看到当前 U 盘里的系统。</p><p><img src="https://i.loli.net/2019/10/25/yPiRChIwKEoaQcs.png" alt=""></p><p>接下来，你只需在列表中选择不想要的操作系统后，点击「Remove」就可以删除它了。如需删除多个系统，重复多遍以上操作即可。</p><h2 id="总结">总结</h2><p>对于经常需要装机、制作系统安装盘的同学来说，<code>YUMI</code> 无疑是一个相当强大好用的工具。如果你想要制作一个集 <code>Windows 10</code>、<code>WinPE</code> 和 <code>Linux</code> 系统于一身、方便用于维护和装机的多合一系统安装盘，那么操作如此简单的 <code>YUMI</code> 值得你拥有！</p><h2 id="参考文档">参考文档</h2><ol><li><p><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></p></li><li><p><a href="https://www.iplaysoft.com/yumi.html" target="_blank" rel="noopener">https://www.iplaysoft.com/yumi.html</a></p></li><li><p><a href="https://blog.shiyunhong.com/3012.html" target="_blank" rel="noopener">https://blog.shiyunhong.com/3012.html</a></p></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常我们一个 U 盘只能制作成一个系统安装盘，比如制作好一个 &lt;code&gt;Windows 10&lt;/code&gt; 安装盘，日后想要用到 &lt;code&gt;Linux&lt;/code&gt;、&lt;code&gt;WinPE&lt;/code&gt; 等安装盘时，只能重新制作一遍，非常浪费时间。而且现在 U 盘容量都很大，如果只放一个系统，同样就会白白浪费 U 盘剩余的空间。&lt;/p&gt;
&lt;p&gt;今天，我们就给大家推荐一个可以让你的 U 盘制作成多系统安装盘的神器 &lt;code&gt;YUMI&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;YUMI&lt;/code&gt; (&lt;code&gt;Your Universal Multiboot Integrator&lt;/code&gt;) 是一款免费便携的 &lt;code&gt;USB&lt;/code&gt; 多合一启动盘制作工具！它可以让你轻松将多款不同操作系统 &lt;code&gt;ISO&lt;/code&gt; 镜像装到一个 U 盘里，制作出支持 &lt;code&gt;Multiboot&lt;/code&gt; (多系统引导启动) 的多合一系统引导安装盘。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;YUMI&lt;/code&gt; 几乎支持全系列的 &lt;code&gt;Windows&lt;/code&gt; 和 &lt;code&gt;Linux&lt;/code&gt; 操作系统。比如 &lt;code&gt;Windows 10&lt;/code&gt;、&lt;code&gt;Windows 7&lt;/code&gt;、&lt;code&gt;WinPE&lt;/code&gt;、&lt;code&gt;Windows To Go&lt;/code&gt; 以及 &lt;code&gt;Linux&lt;/code&gt; 的各种发行版。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://www.pendrivelinux.com/yumi-multiboot-usb-creator/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.pendrivelinux.com/yumi-multiboot-usb-creator/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="YUMI" scheme="https://www.hi-linux.com/tags/YUMI/"/>
    
  </entry>
  
  <entry>
    <title>史上最全的高性能代理服务器 Envoy 中文实战教程</title>
    <link href="https://www.hi-linux.com/posts/57326.html"/>
    <id>https://www.hi-linux.com/posts/57326.html</id>
    <published>2020-05-17T01:00:00.000Z</published>
    <updated>2020-05-17T07:48:06.543Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2 id="什么是-envoy">什么是 Envoy</h2><p><code>Envoy</code> 是一款 <code>CNCF</code> 旗下的开源项目，由 <code>Lyft</code> 开源。<code>Envoy</code> 采用 C++ 实现，是面向 <code>Service Mesh</code> 的高性能网络代理服务。它与应用程序并行运行，通过以平台无关的方式提供通用功能来抽象网络。当基础架构中的所有服务流量都通过 Envoy 网格时，通过一致的可观测性，很容易地查看问题区域，调整整体性能。</p><p><code>Envoy</code> 也是 <code>Istio Service Mesh</code> 中默认的 <code>Data Plane</code>，本文我们将讲解 <code>Envoy</code> 的一些基本概念，并采用一些实例来介绍如何在本地环境中快速使用 <code>Envoy</code> 作为 <code>Service Mesh</code> 的数据平面，以帮助读者理解 <code>Istio</code> 的 <code>Data Panel</code> 层实现。</p><blockquote><p>官网：<a href="https://www.envoyproxy.io" target="_blank" rel="noopener">https://www.envoyproxy.io</a></p></blockquote><h3 id="envoy-特性">Envoy 特性</h3><ol><li>整体架构</li></ol><p><img src="https://ws1.sinaimg.cn/large/4483e99egy1ftn7wet57fj233f1utag1.jpg" alt=""></p><ol start="2"><li>进程无关架构</li></ol><p><code>Envoy</code> 是一个自组织的模块，与应用 <code>Server</code> 并无直接依赖。所有的 <code>Envoy</code> 构建了一个透明的服务网格 <code>Service Mesh</code>，处于其中的应用只需要简单的与本地的 <code>Envoy</code> 进行收发信息，并不需要关注整个网络拓扑。这种架构对于应用通信有两大好处：</p><ul><li><p><code>Envoy</code> 可以让任何的编程语言编写的服务通信，协同工作，<code>Envoy</code> 帮你屏蔽了服务之间的沟壑。</p></li><li><p>任何曾经在大型微服务开发中工作过的人都知道发布一个库更新是多么的痛苦。<code>Envoy</code> 可以以一种透明的方式快速的发布更新整个基础架构中的版本。</p></li></ul><a id="more"></a><ol start="3"><li>高级负载均衡</li></ol><p>分布式系统中不同模块间的负载均衡是一个复杂的问题。因为 <code>Envoy</code> 是一个自组织的代理，所以它能在一个地方实现高级负载均衡技术并使他们可被访问。当前 <code>Envoy</code> 支持自动重试、断路器、全局限速、阻隔请求、异常检测，将来还会支持按计划进行请求速率控制。</p><ol start="4"><li>动态配置</li></ol><p><code>Envoy</code> 提供了可选的一系列的分层的动态配置 <code>API</code>，使用这些 <code>API</code> 可以构建出复杂的集中式部署管理。</p><ol start="5"><li>正向代理支持</li></ol><p>虽然 <code>Envoy</code> 设计初衷是服务和服务之间通信系统，得益于其监视、管理、服务发现和负载均衡算法的实现，<code>Enovy</code> 包含了足够多的特性为绝大多数 <code>Web</code> 服务做正向代理。</p><p>除了这些之外还有对 <code>HTTP/2</code> 的支持，<code>L3</code>、<code>L4</code>、<code>L7</code> 代理，可以实现 <code>TCP Proxy</code>、<code>HTTP Proxy</code> 等功能。</p><ol start="6"><li>线程模型</li></ol><p><code>Envoy</code> 使用单进程多线程架构，其中一个扮演主线程的控制各种协调任务，而一些工作线程负责监听、过滤和转发。一旦某个链接被监听器 <code>Listener</code> 接受，那么这个链接将会剩余的生命周期绑定在这个 <code>Woker</code> 线程。这种架构会使得大部分工作工作在单线程的情况下，只有少量的工作会涉及到线程间通信，<code>Envoy</code> 代码是 100% 非阻塞的。</p><ol start="7"><li>Listener 监听器</li></ol><ul><li><p>一个 <code>Envoy</code> 进程可以设置多个不同的 <code>Listener</code>，建议一台机器只使用一个 <code>Envoy</code> 实例。</p></li><li><p>每一个 <code>Listener</code> 的网络层 <code>L3/L4</code> 过滤器是独立配置的。并且一个 <code>Listener</code> 是可以通过配置来完成多种任务的，比如：访问限制、TLS 客户端校验、HTTP 链接管理等。</p></li><li><p><code>Listener</code> 也有自己的非网络层过滤器，它可以修改链接的 <code>Metadata</code> 信息，通常用来影响接下来链接是如何被网络层过滤器处理的。</p></li><li><p>无论网络层过滤器还是 <code>Listener</code> 过滤器都可以提前终止后续的过滤器链的执行。</p></li></ul><ol start="8"><li>HTTP 连接管理器</li></ol><ul><li><p><code>Envoy</code> 是完整支持 <code>HTTP/1.1</code>、<code>Websockets</code> 和 <code>HTTP/2</code>，不支持 <code>SPDY</code>。</p></li><li><p>这层过滤器主要是将原始的传递数据转变成 <code>HTTP</code> 层级的信息和事件，如收到 <code>Headers</code>、收到 <code>Body</code> 数据，同样它也可以做接入日志、<code>Request ID</code> 生成和追踪、<code>Req/Res</code> 头部修改工作、路由表管理、统计分析。</p></li><li><p>每一个 <code>HTTP</code> 链接管理器有一个相匹配的路由表，路由表可以静态指定，也可以动态地通过 <code>RDS API</code> 来设置 <code>route-dynamic</code>。</p></li><li><p>其内部还有 <code>HTTP</code> 过滤器，可以支持在 <code>HTTP</code> 层级。在无需关注使用什么协议 (<code>HTTP/1.1</code> 或 <code>HTTP/2</code>) 实现的情况下进行操作 <code>HTTP</code> 内容，支持 <code>Encode</code>、<code>Decode</code>、<code>Encode/Decode</code> 三种不同类型过滤器。</p></li></ul><ol start="9"><li>HTTP 路由器</li></ol><ul><li><p>经常用在做边缘/反向代理和构建内部 <code>Envoy Mesh</code> 发挥巨大作用。</p></li><li><p><code>HTTP</code> 路由器可以支持请求重试配置：最大重试次数和设置重试条件，比如某些 <code>5XX</code> 错误和具有幂等性操作的 <code>4XX</code> 错误。</p></li><li><p><code>Envoy</code> 自己使用 <code>HTTP/2</code> 链接管理器实现了 <code>gRPC</code> 协议，将原来官方的 <code>Google gRPC</code> 内置的很多功能，比如重试、超时、<code>Endpoint</code> 发现、负载均衡、负载报告、健康检查等功能都实现了。将来除非特殊特性必须，都可以使用 <code>Envoy gRPC</code> 来实现。</p></li></ul><ol start="10"><li>Cluster 管理器</li></ol><p><code>Cluster</code> 管理器暴露 <code>API</code> 给过滤器，并允许过滤器可以得到链接到上游集群的 <code>L3/L4</code> 链接或者维持一个抽象的 <code>HTTP</code> 连接池用来链接上游集群（上游主机支持 <code>HTTP 1.1</code> 还是 <code>HTTP 2</code> 都是被隐藏的）。过滤器决定是使用 <code>L3/L4</code> 链接还是 <code>HTTP Stream</code> 来链接上游集群。而对于集群管理器来说，它负责所有集群内主机的可用性、负载均衡、健康度、线程安全的上游链接数据，上游链接类型 <code>TCP/UP</code>、<code>UDS</code>，上游可接受的协议 <code>HTTP 1.1/2</code>。</p><p><code>Cluster</code> 管理器既可以静态配置，也可以使用 <code>CDS-Cluster-Discovery-Service API</code> 来动态配置。 集群在正式使用之前有一个 “加热” <code>Warming</code> 的过程：先做服务发现必要的初始化，比如 <code>DNS</code> 记录更新、<code>EDS</code> 更新，然后进行健康检查，当进行完上述的过程，会进入<code>Becoming available</code> 状态，这个阶段 <code>Envoy</code> 不会把流量指向它们; 在更新集群时，也不会把正在处理流量的集群处理掉，而是用新的去替换老的那些还未进行任何流量的集群。</p><ol start="11"><li>与 Nginx 的区别</li></ol><ul><li><p><code>Envoy</code> 对 <code>HTTP/2</code> 的支持比 <code>Nginx</code> 更好，支持包括 <code>upstream</code> 和 <code>downstream</code> 在内的双向通信，而 <code>Nginx</code> 只支持 <code>downstream</code> 的连接。</p></li><li><p>高级负载均衡功能是免费的，<code>Nginx</code> 的高级负载均衡功能则需要付费的 <code>Nginx Plus</code> 支持。</p></li><li><p><code>Envoy</code> 支持热更新，<code>Nginx</code> 配置更新之后需要 <code>Reload</code>。</p></li><li><p><code>Envoy</code> 更贴近 <code>Service Mesh</code> 的使用习惯，<code>Nginx</code> 更贴近传统服务的使用习惯。</p></li></ul><h3 id="envoy-术语">Envoy 术语</h3><p>要深入理解 <code>Envoy</code>，首先需要先了解一下 <code>Envoy</code> 中的一些术语。</p><p><img src="https://ws1.sinaimg.cn/large/4483e99egy1fto85kdq0wj20lo0b2wej.jpg" alt=""></p><ul><li><p><code>Host</code>：能够进行网络通信的实体（如服务器上的应用程序）。</p></li><li><p><code>Downstream</code>：下游主机连接到 <code>Envoy</code>，发送请求并接收响应。</p></li><li><p><code>Upstream</code>：上游主机接收来自 <code>Envoy</code> 连接和请求并返回响应。</p></li><li><p><code>Listener</code>：可以被下游客户端连接的命名网络（如端口、<code>Unix</code> 套接字）。一般是每台主机运行一个 <code>Envoy</code>，使用单进程运行，但是每个进程中可以启动任意数量的 <code>Listener</code>（监听器），每个监听器都独立配置一定数量的（ <code>L3/L4</code> ）网络过滤器。</p></li><li><p><code>Cluster</code>：<code>Envoy</code> 连接到的一组逻辑上相似的上游主机。</p></li><li><p><code>Mesh</code>：以提供一致的网络拓扑的一组主机。</p></li><li><p><code>Runtime Configuration</code>：与 <code>Envoy</code> 一起部署的外置实时配置系统。</p></li><li><p><code>Listener Filter</code>：<code>Listener</code> 使用 <code>Listener Filter</code>（监听器过滤器）来操作链接的元数据，它的作用是在不更改 <code>Envoy</code> 的核心功能的情况下添加更多的集成功能。</p></li><li><p><code>Http Route Table</code>：<code>HTTP</code> 的路由规则，例如请求的域名，<code>Path</code> 符合什么规则，转发给哪个 <code>Cluster</code>。</p></li></ul><h2 id="部署-envoy">部署 Envoy</h2><p>官方提供了 <code>Envoy</code> 的 <code>Docker</code> 镜像，直接下载对应镜像即可使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull envoyproxy&#x2F;envoy:latest</span><br></pre></td></tr></table></figure><p>镜像中已经将 Envoy 安装到 <code>/usr/local/bin</code> 目录下，可以先看看 <code>Envoy</code> 进程的帮助信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># &#x2F;usr&#x2F;local&#x2F;bin&#x2F;envoy --help</span><br><span class="line">USAGE: </span><br><span class="line">   &#x2F;usr&#x2F;local&#x2F;bin&#x2F;envoy  [--disable-hot-restart] [--max-obj-name-len</span><br><span class="line">                         &lt;uint64_t&gt;] [--max-stats &lt;uint64_t&gt;] [--mode</span><br><span class="line">                         &lt;string&gt;] [--parent-shutdown-time-s &lt;uint32_t&gt;]</span><br><span class="line">                         [--drain-time-s &lt;uint32_t&gt;]</span><br><span class="line">                         [--file-flush-interval-msec &lt;uint32_t&gt;]</span><br><span class="line">                         [--service-zone &lt;string&gt;] [--service-node</span><br><span class="line">                         &lt;string&gt;] [--service-cluster &lt;string&gt;]</span><br><span class="line">                         [--hot-restart-version] [--restart-epoch</span><br><span class="line">                         &lt;uint32_t&gt;] [--log-path &lt;string&gt;] [--log-format</span><br><span class="line">                         &lt;string&gt;] [-l &lt;string&gt;]</span><br><span class="line">                         [--local-address-ip-version &lt;string&gt;]</span><br><span class="line">                         [--admin-address-path &lt;string&gt;] [--v2-config-only]</span><br><span class="line">                         [--config-yaml &lt;string&gt;] [-c &lt;string&gt;]</span><br><span class="line">                         [--concurrency &lt;uint32_t&gt;] [--base-id &lt;uint32_t&gt;]</span><br><span class="line">                         [--] [--version] [-h]</span><br></pre></td></tr></table></figure><p><code>Envoy</code> 进程启动的时候需要指定一些参数，其中最重要的是 <code>--config-yaml</code> 参数，用于指定 <code>Envoy</code> 进程启动的时候需要读取的配置文件地址。<code>Docker</code> 中配置文件默认是放在 <code>/etc/envoy</code> 目录下，配置文件的文件名是 <code>envoy.yaml</code>。所以我们在启动容器的时候需要将自定义的 <code>envoy.yaml</code> 配置文件挂载到指定目录下替换掉默认的配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &#x2F;usr&#x2F;local&#x2F;bin&#x2F;envoy -c &lt;path to config&gt;.&#123;json,yaml,pb,pb_text&#125; --v2-config-only</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>Envoy</code> 默认的日志级别是 <code>info</code>，对于开发阶段需要进行调试的话，调整日志级别到 <code>Debug</code> 是非常有用的。你可以在启动参数中添加 <code>-l debug</code> 来将日志级别进行切换。</p></blockquote><h2 id="编写-envoy-配置文件">编写 Envoy 配置文件</h2><p>在介绍 <code>Envoy</code> 的配置文件之前，先介绍一下 <code>Envoy</code> 的 <code>API</code>。<code>Envoy</code> 提供了两个版本的 <code>API</code>，<code>V1</code> 和 <code>V2</code> 版本 <code>API</code>。现阶段 <code>V1</code> 版本已经不建议使用了，通常都是使用 <code>V2</code> 的 <code>API</code>。</p><p><code>V2</code> 的 <code>API</code> 提供了两种方式的访问，一种是 <code>HTTP Rest</code> 的方式访问，还有一种 <code>GRPC</code> 的访问方式。关于 <code>GRPC</code> 的介绍可以参考官方文档，在后面的文章中只实现了 <code>GRPC</code> 的 <code>API</code>。</p><p><code>Envoy</code> 的启动配置文件分为两种方式：静态配置和动态配置。</p><p>静态配置是将所有信息都放在配置文件中，启动的时候直接加载。</p><p>动态配置需要提供一个 <code>Envoy</code> 的服务端，用于动态生成 <code>Envoy</code> 需要的服务发现接口，这里叫 <code>XDS</code> ，通过发现服务来动态的调整配置信息，<code>Istio</code> 就是实现了 <code>V2</code> 的 <code>API</code>。</p><h3 id="静态配置">静态配置</h3><p>以一个最简化的静态配置来做示例，体验一下 <code>Envoy</code>。</p><p>下面是 <code>envoy.yaml</code>配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">admin:</span><br><span class="line">  access_log_path: &#x2F;tmp&#x2F;admin_access.log</span><br><span class="line">  address:</span><br><span class="line">    socket_address: &#123; address: 127.0.0.1, port_value: 9901 &#125;</span><br><span class="line"></span><br><span class="line">static_resources:</span><br><span class="line">  listeners:</span><br><span class="line">  - name: listener_0</span><br><span class="line">    address:</span><br><span class="line">      socket_address: &#123; address: 0.0.0.0, port_value: 10000 &#125;</span><br><span class="line">    filter_chains:</span><br><span class="line">    - filters:</span><br><span class="line">      - name: envoy.http_connection_manager</span><br><span class="line">        config:</span><br><span class="line">          stat_prefix: ingress_http</span><br><span class="line">          codec_type: AUTO</span><br><span class="line">          route_config:</span><br><span class="line">            name: local_route</span><br><span class="line">            virtual_hosts:</span><br><span class="line">            - name: local_service</span><br><span class="line">              domains: [&quot;*&quot;]</span><br><span class="line">              routes:</span><br><span class="line">              - match: &#123; prefix: &quot;&#x2F;&quot; &#125;</span><br><span class="line">                route: &#123; cluster: some_service &#125;</span><br><span class="line">          http_filters:</span><br><span class="line">          - name: envoy.router</span><br><span class="line">  clusters:</span><br><span class="line">  - name: some_service</span><br><span class="line">    connect_timeout: 0.25s</span><br><span class="line">    type: STATIC</span><br><span class="line">    lb_policy: ROUND_ROBIN</span><br><span class="line">    hosts: [&#123; socket_address: &#123; address: 127.0.0.1, port_value: 80 &#125;&#125;]</span><br></pre></td></tr></table></figure><p>在此基础上启动两个容器，<code>envoyproxy</code> 容器和 <code>nginx</code> 容器，<code>nginx</code> 容器共享 <code>envoyproxy</code> 容器的网络，以此来模拟 <code>Sidecar</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 10000:10000 -v &#96;pwd&#96;&#x2F;envoy.yaml:&#x2F;etc&#x2F;envoy&#x2F;envoy.yaml --name envoyproxy envoyproxy&#x2F;envoy:latest</span><br><span class="line">$ docker run -d --network&#x3D;container:envoyproxy --name nginx nginx</span><br></pre></td></tr></table></figure><p>根据配置文件的规则，<code>Envoy</code> 监听在 <code>10000</code> 端口，同时该端口也在宿主机的 <code>10000</code> 端口上暴露出来。当有请求到达监听上后，<code>Envoy</code> 会对所有请求路由到 <code>some_service</code> 这个 <code>Cluster</code> 上，而该 <code>Cluster</code> 的 <code>Upstream</code> 指向本地的 <code>80</code> 端口，也就是 <code>Nginx</code> 服务上。</p><p><img src="https://upload-images.jianshu.io/upload_images/12196676-5550ffdbe14a2d0c.png" alt=""></p><h3 id="动态配置">动态配置</h3><p>动态配置可以实现全动态，即实现 <code>LDS</code> (<code>Listener Discovery Service</code>)、<code>CDS</code> (<code>Cluster Discovery Service</code>)、<code>RDS</code> (<code>Route Discovery Service</code>)、<code>EDS</code> (<code>Endpoint Discovery Service</code>)，以及 <code>ADS</code> (<code>Aggregated Discovery Service</code>)。</p><p><code>ADS</code> 不是一个实际意义上的 <code>XDS</code>，它提供了一个汇聚的功能，以实现需要多个同步 <code>XDS</code> 访问的时候可以在一个 <code>Stream</code> 中完成的作用。</p><p>下面的图通过在静态配置的基础上，比较直观的表示出各个发现服务所提供的信息。</p><p><img src="https://upload-images.jianshu.io/upload_images/12196676-1927da1e7ee7bb65.png" alt=""></p><p>由此，典型的动态配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">admin:</span><br><span class="line">  access_log_path: &#x2F;tmp&#x2F;admin_access.log</span><br><span class="line">  address:</span><br><span class="line">    socket_address: &#123; address: 127.0.0.1, port_value: 9901 &#125;</span><br><span class="line"></span><br><span class="line">dynamic_resources:</span><br><span class="line">  cds_config:</span><br><span class="line">    ads: &#123;&#125;</span><br><span class="line">  lds_config:</span><br><span class="line">    ads: &#123;&#125;</span><br><span class="line">  ads_config:</span><br><span class="line">    api_type: GRPC</span><br><span class="line">    cluster_names: [xds_cluster]</span><br><span class="line"></span><br><span class="line">static_resources:</span><br><span class="line">  clusters:</span><br><span class="line">  - name: xds_cluster</span><br><span class="line">    connect_timeout: 0.25s</span><br><span class="line">    type: STRICT_DNS</span><br><span class="line">    lb_policy: ROUND_ROBIN</span><br><span class="line">    http2_protocol_options: &#123;&#125;</span><br><span class="line">    hosts: [&#123; socket_address: &#123; address: envoy-server, port_value: 50051 &#125;&#125;]</span><br></pre></td></tr></table></figure><blockquote><p>注意：动态配置和静态配置最大的区别在于，启动的时候一定要指定 <code>cluster</code> 和 <code>id</code>，这两个参数表示该 Envoy 进程属于哪个 <code>Cluster</code>，<code>id</code> 要求在相同的 <code>Cluster</code> 下唯一，以表示不同的指向发现服务的连接信息。这两个参数可以在 <code>Envoy</code> 的启动命令中添加<code>--service-cluster</code> 和 <code>--service-node</code> 来指定，也可以在 <code>envoy.yaml</code> 配置文件中指定 <code>node.cluster</code> 和 <code>node.id</code>。</p></blockquote><h2 id="envoy-使用实例">Envoy 使用实例</h2><h3 id="入门实例">入门实例</h3><p>了解一个开源软件，从官方实例入手再好不过了，因此下面的例子将会围绕官方仓库中的实例展开。所以在开始之前，你需要安装并配置以下工具：</p><ul><li><code>Docker</code></li><li><code>Docker Compose</code></li><li><code>Git</code></li><li><code>Curl</code></li></ul><p>我们将会使用 <code>Docker</code> 和 <code>Docker Compose</code> 来构建和运行几个 <code>Envoy</code> 示例服务，并用 <code>Curl</code> 来检测 <code>Envoy</code> 示例服务是否在运行。</p><h4 id="运行-envoy">运行 Envoy</h4><p>首先克隆 <code>Envoy</code> 官方仓库到本地,并定位到 <code>envoy/examples/front-proxy</code> 文件夹。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;envoyproxy&#x2F;envoy</span><br><span class="line">$ cd envoy&#x2F;examples&#x2F;front-proxy</span><br></pre></td></tr></table></figure><p><code>front-proxy</code> 文件夹中的服务是一个用 <code>Flask</code> 实现的后端服务，入口文件在 <code>service.py</code> 文件里面。<code>Envoy</code> 作为一个 <code>Sidecar</code> 部件，将与 <code>service.py</code> 在同一个容器中运行，并由 <code>docker-compose,.yaml</code> 文件配置。</p><p>前端代理比后端服务更简单，它使用配置文件 <code>front-envoy.yaml</code> 来运行 <code>Envoy</code>。<code>Dockerfile-frontenvoy</code> 文件则是 <code>front-envoy</code> 的 <code>Dockerfile</code>。</p><p>如果你之前没有接触过 <code>Docker</code> 的话，你可以使用以下命令在本地构建并运行 <code>front-proxy</code> 的 <code>Docker</code> 镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd &#x2F;path&#x2F;to&#x2F;envoy&#x2F;examples&#x2F;front-proxy</span><br><span class="line">$ docker-compose up --build -d</span><br></pre></td></tr></table></figure><p>其中的 <code>--build</code> 表示构建镜像， <code>-d</code> 表示在后台运行所有 <code>docker-compose</code> 配置文件中定义的镜像，具体可参考 <code>Docker</code> 相关文档。</p><p>命令运行成功后，将会启动一个前端代理和两个服务实例：<code>service1</code> 和 <code>service2</code>。你可以通过以下命令来验证容器是否正常运行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose ps</span><br></pre></td></tr></table></figure><p>正常的话会返回以下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ front-proxy git:(master) docker-compose ps</span><br><span class="line">          Name                         Command               State                            Ports</span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">front-proxy_front-envoy_1   &#x2F;usr&#x2F;bin&#x2F;dumb-init -- &#x2F;bin ...   Up      10000&#x2F;tcp, 0.0.0.0:8000-&gt;80&#x2F;tcp, 0.0.0.0:8001-&gt;8001&#x2F;tcp</span><br><span class="line">front-proxy_service1_1      &#x2F;bin&#x2F;sh -c &#x2F;usr&#x2F;local&#x2F;bin&#x2F; ...   Up      10000&#x2F;tcp, 80&#x2F;tcp</span><br><span class="line">front-proxy_service2_1      &#x2F;bin&#x2F;sh -c &#x2F;usr&#x2F;local&#x2F;bin&#x2F; ...   Up      10000&#x2F;tcp, 80&#x2F;tcp</span><br></pre></td></tr></table></figure><h4 id="测试服务是否连通">测试服务是否连通</h4><p>你可以使用 <code>curl</code> 或者浏览器来测试服务是否在正常运行</p><p>浏览器中输入 <code>http://localhost:8000/service/1</code> 或者使用以下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl http:&#x2F;&#x2F;localhost:8000&#x2F;service&#x2F;1</span><br></pre></td></tr></table></figure><p>如果返回结果是像下面这样，则表示 <code>service1</code> 的 <code>Envoy</code> 服务正常运行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello from behind Envoy (service 1)! hostname: a841ffceafd0 resolvedhostname: 172.18.0.4</span><br></pre></td></tr></table></figure><p>你也可以用同样的方法测试 <code>service 2</code> 的服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl http:&#x2F;&#x2F;localhost:8000&#x2F;service&#x2F;2</span><br></pre></td></tr></table></figure><p>返回的结果和 <code>service 1</code> 类似。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello from behind Envoy (service 2)! hostname: e83b35c6f4fe resolvedhostname: 172.18.0.3 。</span><br></pre></td></tr></table></figure><h4 id="envoy-配置">Envoy 配置</h4><p>下面我们先简单看一下 <code>Envoy</code> 的静态配置信息，之后再继续看 <code>Demo</code> 中的动态配置信息。</p><p>我们先从 <code>front-envoy.yml</code> 入手。打开文件之后，我们会发现这个 <code>yaml</code> 有两个最高的层级，分别是 <code>static_resources</code> 和 <code>admin</code> 。<code>admin</code> 的内容相对比较简单，总共只有六行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">admin:</span><br><span class="line">   access_log_path: &quot;&#x2F;dev&#x2F;null&quot;</span><br><span class="line">   address:</span><br><span class="line">     socket_address:</span><br><span class="line">       address: 0.0.0.0</span><br><span class="line">       port_value: 8001</span><br></pre></td></tr></table></figure><p>其中 <code>access_log_path</code> 字段值是 <code>/dev/null</code>，其含义是 <code>admin</code> 服务的请求日志将不会被保存。生产环境中可自行将目标目录指定到需要的地方。<code>address</code> 和 <code>port_value</code> 字段分别表示 <code>admin server</code> 运行的 <code>IP</code> 端口。</p><p><code>static_resource</code> 的内容定义了非动态管理的集群（<code>Cluster</code>）和监听器（<code>Listener</code>）相关配置。集群是 <code>Envoy</code> 连接到的一组逻辑上相似的上游主机，一个集群是一组被定义的 <code>ip/port</code> 集合，<code>Envoy</code> 将借此实现负载均衡。监听器是一组被定义的网络地址，它是可以由下游客户端连接的命名网络位置（例如，端口、<code>Unix</code> 域套接字等）。监听器是服务(程序)监听者，就是真正干活的，客户端可借此连接至服务。</p><p><code>front proxy</code> 中只有一个监听器，监听器中除了 <code>socket_address</code> 之外还有一个字段是 <code>filter_chains</code>，<code>Envoy</code> 通过此字段来管理 <code>HTTP</code> 的连接和过滤。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">listeners:</span><br><span class="line">- address:</span><br><span class="line">    socket_address:</span><br><span class="line">      address: 0.0.0.0</span><br><span class="line">      port_value: 80</span><br><span class="line">  filter_chains:</span><br><span class="line">  - filters:</span><br><span class="line">    - name: envoy.http_connection_manager</span><br><span class="line">      config:</span><br><span class="line">        codec_type: auto</span><br><span class="line">        stat_prefix: ingress_http</span><br><span class="line">        route_config:</span><br><span class="line">          name: local_route</span><br></pre></td></tr></table></figure><p>其中有个配置选项是 <code>virtual_hosts</code>，该选项在 <code>HTTP</code> 连接管理过滤器中用作定义虚拟主机，并通过正则过滤允许访问服务的域名。路由也在其中配置，例子中将 <code>/service/1</code> 和 <code>/service/2</code> 的请求分别转发到了其相应的集群中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">virtual_hosts:</span><br><span class="line">- name: backend</span><br><span class="line">  domains:</span><br><span class="line">  - &quot;*&quot;</span><br><span class="line">  routes:</span><br><span class="line">  - match:</span><br><span class="line">      prefix: &quot;&#x2F;service&#x2F;1&quot;</span><br><span class="line">    route:</span><br><span class="line">      cluster: service1</span><br><span class="line">  - match:</span><br><span class="line">      prefix: &quot;&#x2F;service&#x2F;2&quot;</span><br><span class="line">    route:</span><br><span class="line">      cluster: service2</span><br></pre></td></tr></table></figure><p>接下来我们继续看静态集群的配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">clusters:</span><br><span class="line">- name: service1</span><br><span class="line">  connect_timeout: 0.25s</span><br><span class="line">  type: strict_dns</span><br><span class="line">  lb_policy: round_robin</span><br><span class="line">  http2_protocol_options: &#123;&#125;</span><br><span class="line">  hosts:</span><br><span class="line">  - socket_address:</span><br><span class="line">      address: service1</span><br><span class="line">      port_value: 80</span><br><span class="line">- name: service2</span><br><span class="line">  connect_timeout: 0.25s</span><br><span class="line">  type: strict_dns</span><br><span class="line">  lb_policy: round_robin</span><br><span class="line">  http2_protocol_options: &#123;&#125;</span><br><span class="line">  hosts:</span><br><span class="line">  - socket_address:</span><br><span class="line">      address: service2</span><br><span class="line">      port_value: 80</span><br></pre></td></tr></table></figure><p>在静态集群的配置内容中，我们可以配置超时时间、熔断器、服务发现等等内容。集群由一系列端点 (<code>Endpoints</code>) 组成，端点就是一组服务集群中可以响应访问请求的网络地址。在上面的例子中，端点标准定义成 <code>DNS</code> ，除此之外，端点可以直接被定义成 <code>Socket</code> 地址，或者是可动态读取的服务发现机制。</p><p><strong>尝试动手修改配置</strong></p><p>我们可以在本地尝试自己修改配置，重建镜像，测试修改后的配置。监听过滤器是 <code>Envoy</code> 为监听器提供的附加功能。比方说，想要增加访问日志到我们的 <code>HTTP</code> 过滤器中，只要增加 <code>access_log</code> 字段到配置文件中即可:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- filters:</span><br><span class="line">  - name: envoy.http_connection_manager</span><br><span class="line">    config:</span><br><span class="line">      codec_type: auto</span><br><span class="line">      stat_prefix: ingress_http</span><br><span class="line">      access_log:</span><br><span class="line">        - name: envoy.file_access_log</span><br><span class="line">          config:</span><br><span class="line">            path: &quot;&#x2F;var&#x2F;log&#x2F;access.log&quot;</span><br><span class="line">      route_config:</span><br></pre></td></tr></table></figure><p>修改之后，先通过 <code>docker-compose down</code> 命令关闭 <code>docker-compose</code> 容器组，然后使用 <code>docker-compose up --build -d</code> 命令重新构建镜像并运行容器组即可。</p><p>为了验证我们新增的 <code>access_log</code> 字段是否生效，我们可以模拟几次请求。然后通过命令 <code>docker-compose exec front-envoy /bin/bash</code> 手动进入容器内部查看访问日志是否在相应的目录中，你会看到 <code>/var/log/access.log</code> 文件记录着你的请求结果。</p><h4 id="管理页面">管理页面</h4><p>Envoy 的一大特色是内置了管理页面，你可以通过 <code>http://localhost:8001</code> 访问。管理页面中 <code>/cluster</code> 菜单展示了上游 (<code>Upstream</code>) 集群端口的统计内容，<code>stats</code> 菜单则显示了更多端口的统计内容。</p><p><img src="https://i.loli.net/2019/10/23/TowFauBL4Ae6Yz8.png" alt=""></p><p>更多管理页面的内容你可以直接访问帮助页面 <code>http://localhost:8001/help</code> 来查看。</p><h3 id="请求处理流程">请求处理流程</h3><p><code>Envoy</code> 中对访问请求的处理流程大致如下，先将请求数据预处理，转成 <code>Envoy</code> 中的 <code>Filter</code>， 读写请求的 <code>filter</code> 分别是 <code>ReadFilter</code> 和 <code>WriteFiler</code>，对每个网络层也有各自的 <code>filter</code> ，<code>TCP</code> 的是 <code>TcpProxyFilter</code>, <code>HTTP</code> 的是 <code>ConnectionManager</code>，都由读 <code>filter ReadFilter</code> 继承而来。各个 <code>filter</code> 预处理完成之后就会组织成上面示例配置文件中有提到的 <code>FilterChain</code>， 收到 <code>FilterChain</code> 之后会将其路由到指定的集群中，并根据负载均衡获取到相应的地址，然后将请求转发出去。</p><h3 id="进阶实例">进阶实例</h3><p>接下来的实验主要以动态配置的方式来实现一个简单的需求，首先描述一下需求场景：有两个微服务，一个是 <code>envoy-web</code>，一个 <code>envoy-server</code>。</p><ul><li><p><code>envoy-web</code> 相当于下图中的 <code>front-envoy</code> 作为对外访问的入口。</p></li><li><p><code>envoy-server</code> 相当于下图中的 <code>service_1</code> 和 <code>service_2</code>，是内部的一个微服务，部署 <code>2</code> 个实例。</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12196676-2a45b1388924b33a.png" alt=""></p><p><code>envoy-server</code> 有 3 个 <code>API</code>，分别是 <code>/envoy-server/hello</code>、<code>/envoy-server/hi</code>、<code>/envoy-server/self</code>，目的是测试 <code>Envoy</code> 对于流入 <code>envoy-server</code> 的流量控制，对外只允许访问 <code>/envoy-server/hello</code> 和 <code>/envoy-server/hi</code> 两个 <code>API</code>，<code>/envoy-server/self</code> 不对外暴露服务。</p><p><code>envoy-web</code> 也有 3 个 <code>API</code>，分别是 <code>/envoy-web/hello</code>、<code>/envoy-web/hi</code>、<code>/envoy-web/self</code>，目的是测试 <code>Envoy</code> 对于流出 <code>envoy-web</code> 的流量控制，出口流量只允许 <code>/envoy-web/hello</code> 和 <code>/envoy-web/self</code> 两个访问出去。</p><p>最终的实验：外部只能访问 <code>envoy-web</code> 暴露的接口</p><ul><li><p>当访问 <code>/envoy-web/hello</code> 接口时返回 <code>envoy-server</code> 的 <code>/hello</code> 接口的数据，表示 <code>envoy-web</code> 作为客户端访问 <code>envoy-server</code> 返回服务响应的结果。</p></li><li><p>当访问 <code>/envoy-web/hi</code> 接口时，<code>envoy-web</code> 的 <code>envoy</code> 拦截住出口流量，限制 <code>envoy-web</code> 向 <code>envoy-server</code> 发送请求，对于前端用户返回 <code>mock</code> 数据。</p></li><li><p>当访问 <code>/envoy-web/self</code> 接口时，<code>envoy-web</code> 出口流量可以到达 <code>envoy-server</code> 容器，但是 <code>envoy-server</code> 在入口流量处控制住了此次请求，拒绝访问 <code>envoy-server</code>服务，对于前端用户返回 <code>mock</code> 数据。</p></li></ul><h3 id="静态配置">静态配置</h3><p>首先，以静态配置的方式先实现功能。</p><h4 id="编写服务代码">编写服务代码</h4><p>服务代码分为 <code>envoy-web</code> 和 <code>envoy-server</code> 两个服务，采用 <code>SpringBoot</code> 的方式，下面记录一些重要的代码片段。</p><ul><li>envoy-server</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HelloRest &#123;</span><br><span class="line">    private static final Logger LOGGER &#x3D; LoggerFactory.getLogger(HelloRest.class);</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;envoy-server&#x2F;hello&quot;)</span><br><span class="line">    public String hello() &#123;</span><br><span class="line">        LOGGER.info(&quot;get request from remote, send response, say hello&quot;);</span><br><span class="line">        return &quot;hello&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;envoy-server&#x2F;hi&quot;)</span><br><span class="line">    public String hi() &#123;</span><br><span class="line">        LOGGER.info(&quot;get request from remote, send response, say hi&quot;);</span><br><span class="line">        return &quot;hi&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;envoy-server&#x2F;self&quot;)</span><br><span class="line">    public String self() &#123;</span><br><span class="line">        LOGGER.info(&quot;get request from remote, send response, say self&quot;);</span><br><span class="line">        return &quot;self&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>envoy-web</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line">    private static final Logger LOGGER &#x3D; LoggerFactory.getLogger(HelloController.class);</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RestTemplate template;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;envoy-web&#x2F;local&quot;)</span><br><span class="line">    public String sayLocal() &#123;</span><br><span class="line">        LOGGER.info(&quot;get request, send response&quot;);</span><br><span class="line">        return &quot;local&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;envoy-web&#x2F;hello&quot;)</span><br><span class="line">    public String sayHello() &#123;</span><br><span class="line">        String url &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1:10000&#x2F;envoy-server&#x2F;hello&quot;;</span><br><span class="line">        LOGGER.info(&quot;get request, send rest template to &#123;&#125;&quot;, url);</span><br><span class="line">        return getRemote(url, &quot;mock value for hello&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;envoy-web&#x2F;hi&quot;)</span><br><span class="line">    public String sayHi() &#123;</span><br><span class="line">        String url &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1:10000&#x2F;envoy-server&#x2F;hi&quot;;</span><br><span class="line">        LOGGER.info(&quot;get request, send rest template to &#123;&#125;&quot;, url);</span><br><span class="line">        return getRemote(url, &quot;mock value for hi&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;envoy-web&#x2F;self&quot;)</span><br><span class="line">    public String saySelf() &#123;</span><br><span class="line">        String url &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1:10000&#x2F;envoy-server&#x2F;self&quot;;</span><br><span class="line">        LOGGER.info(&quot;get request, send rest template to &#123;&#125;&quot;, url);</span><br><span class="line">        return getRemote(url, &quot;mock value for self&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String getRemote(String url, String mock) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            ResponseEntity&lt;String&gt; response &#x3D; template.getForEntity(url, String.class);</span><br><span class="line">            return response.getBody();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            LOGGER.error(&quot;error happens: &#123;&#125;&quot;, e);</span><br><span class="line">            return mock;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：为简化起见，代码只是介绍对出入流量的控制，直接在 <code>envoy-web</code> 上访问了本地的 <code>Envoy</code> 端口进行转发流量，实际代码中可以用服务名:服务端口号访问，而此时为了使得 <code>Envoy</code> 仍然可以拦截入和出的流量，可以配置 <code>Iptables</code>（<code>Istio</code> 的实现中也是使用了 <code>Iptables</code>）。</p></blockquote><h4 id="编写配置文件">编写配置文件</h4><p>针对不同的服务，也配置了两份 <code>envoy.yaml</code> 配置文件。</p><ul><li>envoy-server</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">admin:</span><br><span class="line">  access_log_path: &#x2F;tmp&#x2F;admin_access.log</span><br><span class="line">  address:</span><br><span class="line">    socket_address: &#123; address: 0.0.0.0, port_value: 9900 &#125;</span><br><span class="line">static_resources:</span><br><span class="line">  listeners:</span><br><span class="line">  - name: listener_ingress</span><br><span class="line">    address:</span><br><span class="line">      socket_address: &#123; address: 0.0.0.0, port_value: 10000 &#125;</span><br><span class="line">    filter_chains:</span><br><span class="line">    - filters:</span><br><span class="line">      - name: envoy.http_connection_manager</span><br><span class="line">        config:</span><br><span class="line">          stat_prefix: ingress_http</span><br><span class="line">          codec_type: AUTO</span><br><span class="line">          route_config:</span><br><span class="line">            name: local_route</span><br><span class="line">            virtual_hosts:</span><br><span class="line">            - name: local_service</span><br><span class="line">              domains: [&quot;*&quot;]</span><br><span class="line">              routes:</span><br><span class="line">              - match: &#123; prefix: &quot;&#x2F;envoy-server&#x2F;hello&quot; &#125;</span><br><span class="line">                route: &#123; cluster: cluster_server &#125;</span><br><span class="line">              - match: &#123; prefix: &quot;&#x2F;envoy-server&#x2F;hi&quot; &#125;</span><br><span class="line">                route: &#123; cluster: cluster_server &#125;</span><br><span class="line">          http_filters:</span><br><span class="line">          - name: envoy.router</span><br><span class="line">  clusters:</span><br><span class="line">  - name: cluster_server</span><br><span class="line">    connect_timeout: 0.5s</span><br><span class="line">    type: STATIC</span><br><span class="line">    lb_policy: ROUND_ROBIN</span><br><span class="line">    hosts: </span><br><span class="line">    - &#123; socket_address: &#123; address: 127.0.0.1, port_value: 8081 &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>envoy-web</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">admin:</span><br><span class="line">  access_log_path: &#x2F;tmp&#x2F;admin_access.log</span><br><span class="line">  address:</span><br><span class="line">    socket_address: &#123; address: 0.0.0.0, port_value: 9900 &#125;</span><br><span class="line">static_resources:</span><br><span class="line">  listeners:</span><br><span class="line">  - name: listener_ingress</span><br><span class="line">    address:</span><br><span class="line">      socket_address: &#123; address: 0.0.0.0, port_value: 10000 &#125;</span><br><span class="line">    filter_chains:</span><br><span class="line">    - filters:</span><br><span class="line">      - name: envoy.http_connection_manager</span><br><span class="line">        config:</span><br><span class="line">          stat_prefix: ingress_http</span><br><span class="line">          codec_type: AUTO</span><br><span class="line">          route_config:</span><br><span class="line">            name: local_route</span><br><span class="line">            virtual_hosts:</span><br><span class="line">            - name: local_service</span><br><span class="line">              domains: [&quot;*&quot;]</span><br><span class="line">              routes:</span><br><span class="line">              - match: &#123; prefix: &quot;&#x2F;envoy-web&#x2F;&quot; &#125;</span><br><span class="line">                route: &#123; cluster: cluster_ingress &#125;</span><br><span class="line">              - match: &#123; prefix: &quot;&#x2F;envoy-server&#x2F;hello&quot; &#125;</span><br><span class="line">                route: &#123; cluster: cluster_egress &#125;</span><br><span class="line">              - match: &#123; prefix: &quot;&#x2F;envoy-server&#x2F;self&quot; &#125;</span><br><span class="line">                route: &#123; cluster: cluster_egress &#125;</span><br><span class="line">          http_filters:</span><br><span class="line">          - name: envoy.router</span><br><span class="line">  clusters:</span><br><span class="line">  - name: cluster_ingress</span><br><span class="line">    connect_timeout: 0.5s</span><br><span class="line">    type: STATIC</span><br><span class="line">    lb_policy: ROUND_ROBIN</span><br><span class="line">    hosts:</span><br><span class="line">    - &#123; socket_address: &#123; address: 127.0.0.1, port_value: 8080 &#125;&#125;</span><br><span class="line">  - name: cluster_egress</span><br><span class="line">    connect_timeout: 0.5s</span><br><span class="line">    type: STATIC</span><br><span class="line">    lb_policy: ROUND_ROBIN</span><br><span class="line">    hosts:</span><br><span class="line">    - &#123; socket_address: &#123; address: 172.17.0.2, port_value: 10000 &#125;&#125;</span><br><span class="line">    - &#123; socket_address: &#123; address: 172.17.0.3, port_value: 10000 &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="启动测试">启动测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># envoy-server1</span><br><span class="line">$ docker run -d -v &#96;pwd&#96;&#x2F;envoy-server.yaml:&#x2F;etc&#x2F;envoy&#x2F;envoy.yaml --name envoyproxy-server1 envoyproxy&#x2F;envoy:latest &#x2F;usr&#x2F;local&#x2F;bin&#x2F;envoy --service-cluster envoy-server --service-node 1 -c &#x2F;etc&#x2F;envoy&#x2F;envoy.yaml --v2-config-only</span><br><span class="line">$ docker run -d --network&#x3D;container:envoyproxy-server1 --name envoy-server1 envoy-server:1.1</span><br><span class="line"></span><br><span class="line"># envoy-server2</span><br><span class="line">$ docker run -d -v &#96;pwd&#96;&#x2F;envoy-server.yaml:&#x2F;etc&#x2F;envoy&#x2F;envoy.yaml --name envoyproxy-server2 envoyproxy&#x2F;envoy:latest &#x2F;usr&#x2F;local&#x2F;bin&#x2F;envoy --service-cluster envoy-server --service-node 2 -c &#x2F;etc&#x2F;envoy&#x2F;envoy.yaml --v2-config-only</span><br><span class="line">$ docker run -d --network&#x3D;container:envoyproxy-server2 --name envoy-server2 envoy-server:1.1</span><br><span class="line"></span><br><span class="line"># envoy-web</span><br><span class="line">$ docker run -d -p 10000:10000 -v &#96;pwd&#96;&#x2F;envoy-web.yaml:&#x2F;etc&#x2F;envoy&#x2F;envoy.yaml --name envoyproxy-web envoyproxy&#x2F;envoy:latest &#x2F;usr&#x2F;local&#x2F;bin&#x2F;envoy --service-cluster envoy-web --service-node 1 -c &#x2F;etc&#x2F;envoy&#x2F;envoy.yaml --v2-config-only</span><br><span class="line">$ docker run -d --network&#x3D;container:envoyproxy-web --name envoy-web envoy-web:1.1</span><br></pre></td></tr></table></figure><p>当容器部署完毕之后，可以直接访问以下 3 个 URL ，其中 hi 和 self 的访问返回的是 mock 数据，虽然同为 mock 数据，但是这两个 <code>URL</code> 其实是不相同的，一个是在 <code>Envoy</code> 出口流量处做的控制，一个是在 <code>Envoy</code> 入口流量处做的控制，其中的细节可以再去品味品味。</p><p><img src="https://upload-images.jianshu.io/upload_images/12196676-83ac7de7c28ad6a1.png" alt=""></p><h3 id="动态配置">动态配置</h3><p>动态配置需要实现发现服务，通过 <code>GRPC</code> 的方式获取相应。</p><p>动态的配置文件在前面的内容中已经有过介绍，最重要的是需要提供一个发现服务，对外提供 <code>XDS</code> 服务，下面以其中的一个 <code>LDS</code> 作为介绍，其他 <code>XDS</code> 实现类似。</p><p>服务端：既然作为服务，就需要对外提供接口服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public class GrpcService &#123;</span><br><span class="line">    private Server server;</span><br><span class="line">    private static final int PORT &#x3D; 50051;</span><br><span class="line"></span><br><span class="line">    private void start() throws IOException &#123;</span><br><span class="line">        server &#x3D; ServerBuilder.forPort(PORT)</span><br><span class="line">                .addService(new LdsService())</span><br><span class="line">                .addService(new CdsService())</span><br><span class="line">                .addService(new RdsService())</span><br><span class="line">                .addService(new EdsService())</span><br><span class="line">                .addService(new AdsService())</span><br><span class="line">                .build()</span><br><span class="line">                .start();</span><br><span class="line">        System.err.println(&quot;Server started, listening on &quot; + PORT);</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(new Thread(() -&gt; &#123;</span><br><span class="line">            System.err.println(&quot;*** shutting down gRPC server since JVM is shutting down&quot;);</span><br><span class="line">            GrpcService.this.stop();</span><br><span class="line">            System.err.println(&quot;*** server shut down&quot;);</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void stop() &#123;</span><br><span class="line">        if (server !&#x3D; null) &#123;</span><br><span class="line">            server.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void blockUntilShutdown() throws InterruptedException &#123;</span><br><span class="line">        if (server !&#x3D; null) &#123;</span><br><span class="line">            server.awaitTermination();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, InterruptedException &#123;</span><br><span class="line">        final GrpcService server &#x3D; new GrpcService();</span><br><span class="line">        server.start();</span><br><span class="line">        server.blockUntilShutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>XDS</code> 通过 <code>GRPC</code> 生成服务端的 <code>stub</code> 文件，实现 <code>LdsServer</code> 继承自 <code>ListenerDiscoveryServiceGrpc.ListenerDiscoveryServiceImplBase</code>，需要实现 <code>streamListeners</code> 方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class LdsService extends ListenerDiscoveryServiceGrpc.ListenerDiscoveryServiceImplBase &#123;</span><br><span class="line">    private static final Logger LOGGER &#x3D; LogManager.getLogger();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public StreamObserver&lt;Discovery.DiscoveryRequest&gt; streamListeners(StreamObserver&lt;Discovery.DiscoveryResponse&gt; responseObserver) &#123;</span><br><span class="line">        return new StreamObserver&lt;Discovery.DiscoveryRequest&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(Discovery.DiscoveryRequest request) &#123;</span><br><span class="line">                XdsHelper.getInstance().buildAndSendResult(request, responseObserver);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onError(Throwable throwable) &#123;</span><br><span class="line">                LOGGER.warn(&quot;Error happens&quot;, throwable);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onCompleted() &#123;</span><br><span class="line">                LOGGER.info(&quot;LdsService completed&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>至此，我们就基本介绍完 <code>Envoy</code> 使用的一些常见的使用方法，在实现的时候也会有其他一些细节需要注意。比如，<code>Envoy</code> 作为一个服务之间网络请求的代理，如何拦截全部的入和出流量？</p><p><code>Istio</code> 给了一个很好的解决方案，就是通过 <code>Iptables</code>。它会使用一个特定的 <code>uid</code>（默认 1337）用户运行 <code>Envoy</code> 进程，<code>Iptables</code> 对于 <code>1337</code> 用户的流量不做拦截。下面就是参考 <code>Istio</code> 的 <code>iptables.sh</code> 做的一个实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;envoy</span><br><span class="line">uid&#x3D;1337</span><br><span class="line">iptalbes -t nat -F</span><br><span class="line">iptables -t nat -I PREROUTING -p tcp -j REDIRECT --to-ports 10000</span><br><span class="line">iptables -t nat -N ENVOY_OUTPUT</span><br><span class="line">iptables -t nat -A OUTPUT -p tcp -j ENVOY_OUTPUT</span><br><span class="line">iptables -t nat -A ENVOY_OUTPUT -p tcp -d 127.0.0.1&#x2F;32 -j RETURN</span><br><span class="line">iptables -t nat -A ENVOY_OUTPUT -m owner --uid-owner $&#123;uid&#125; -j RETURN</span><br><span class="line">iptables -t nat -A ENVOY_OUTPUT -p tcp -j REDIRECT --to-ports 10000</span><br></pre></td></tr></table></figure><h2 id="参考文档">参考文档</h2><ol><li><p><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></p></li><li><p><a href="https://holajiawei.com/envoy/" target="_blank" rel="noopener">https://holajiawei.com/envoy/</a></p></li><li><p><a href="https://www.lijiaocn.com/soft/envoy/" target="_blank" rel="noopener">https://www.lijiaocn.com/soft/envoy/</a></p></li><li><p><a href="https://www.jianshu.com/p/90f9ee98ce70" target="_blank" rel="noopener">https://www.jianshu.com/p/90f9ee98ce70</a></p></li><li><p><a href="https://github.com/wellls/blog/issues/47" target="_blank" rel="noopener">https://github.com/wellls/blog/issues/47</a></p></li><li><p><a href="https://jimmysong.io/posts/envoy-as-front-proxy/" target="_blank" rel="noopener">https://jimmysong.io/posts/envoy-as-front-proxy/</a></p></li><li><p><a href="https://www.yangcs.net/posts/run-envoy-on-your-laptop/" target="_blank" rel="noopener">https://www.yangcs.net/posts/run-envoy-on-your-laptop/</a></p></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-Envoy&quot;&gt;什么是 Envoy&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Envoy&lt;/code&gt; 是一款 &lt;code&gt;CNCF&lt;/code&gt; 旗下的开源项目，由 &lt;code&gt;Lyft&lt;/code&gt; 开源。&lt;code&gt;Envoy&lt;/code&gt; 采用 C++ 实现，是面向 &lt;code&gt;Service Mesh&lt;/code&gt; 的高性能网络代理服务。它与应用程序并行运行，通过以平台无关的方式提供通用功能来抽象网络。当基础架构中的所有服务流量都通过 Envoy 网格时，通过一致的可观测性，很容易地查看问题区域，调整整体性能。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Envoy&lt;/code&gt; 也是 &lt;code&gt;Istio Service Mesh&lt;/code&gt; 中默认的 &lt;code&gt;Data Plane&lt;/code&gt;，本文我们将讲解 &lt;code&gt;Envoy&lt;/code&gt; 的一些基本概念，并采用一些实例来介绍如何在本地环境中快速使用 &lt;code&gt;Envoy&lt;/code&gt; 作为 &lt;code&gt;Service Mesh&lt;/code&gt; 的数据平面，以帮助读者理解 &lt;code&gt;Istio&lt;/code&gt; 的 &lt;code&gt;Data Panel&lt;/code&gt; 层实现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://www.envoyproxy.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.envoyproxy.io&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Envoy-特性&quot;&gt;Envoy 特性&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;整体架构&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/4483e99egy1ftn7wet57fj233f1utag1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;进程无关架构&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;Envoy&lt;/code&gt; 是一个自组织的模块，与应用 &lt;code&gt;Server&lt;/code&gt; 并无直接依赖。所有的 &lt;code&gt;Envoy&lt;/code&gt; 构建了一个透明的服务网格 &lt;code&gt;Service Mesh&lt;/code&gt;，处于其中的应用只需要简单的与本地的 &lt;code&gt;Envoy&lt;/code&gt; 进行收发信息，并不需要关注整个网络拓扑。这种架构对于应用通信有两大好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Envoy&lt;/code&gt; 可以让任何的编程语言编写的服务通信，协同工作，&lt;code&gt;Envoy&lt;/code&gt; 帮你屏蔽了服务之间的沟壑。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;任何曾经在大型微服务开发中工作过的人都知道发布一个库更新是多么的痛苦。&lt;code&gt;Envoy&lt;/code&gt; 可以以一种透明的方式快速的发布更新整个基础架构中的版本。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/categories/kubernetes/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
      <category term="Envoy" scheme="https://www.hi-linux.com/tags/Envoy/"/>
    
  </entry>
  
  <entry>
    <title>如何通过 Alertmanager 有效的给 Prometheus 添加一个警报系统</title>
    <link href="https://www.hi-linux.com/posts/23179.html"/>
    <id>https://www.hi-linux.com/posts/23179.html</id>
    <published>2020-05-17T01:00:00.000Z</published>
    <updated>2020-05-17T07:48:06.545Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>警报是监控系统中必不可少的一块, 当然了, 也是最难搞的一块. 我们乍一想, 警报似乎很简单一件事:</p><blockquote><p>假如发生了异常情况, 发送或邮件/消息通知给某人或某频道</p></blockquote><p>一把梭搞起来之后, 就不免有一些小麻烦:</p><ul><li><p>这个啊…一天中总有那么几次波动, 也难修难查了, 算了算了不看了</p></li><li><p>警报太多了, 实在看不过来, 屏蔽/归档/放生吧…</p></li><li><p>有毒吧, 这个阈值也太低了</p></li><li><p>卧槽, 这些警报啥意思啊, 发给我干嘛啊?</p></li><li><p>卧槽卧槽卧槽, 怎么一下子几十百来条警报, 哦…原来网络出问题了全崩了</p></li></ul><p>到最后我们还能总结出一个奇怪的规律:</p><blockquote><p>这世界上只有两种警报，一种是疯狂报警但是没有卵用完全没人看的警报，一种是非常有效大家都想看但在用户反馈前从来都报不出来的警报。—— 鲁迅(</p></blockquote><p>玩笑归玩笑，但至少我们能看出，警报不是一个简单的计算+通知系统。只是，”做好警报”这件事本身是个综合问题，代码能解决的也只是其中的一小部分，更多的事情要在组织、人事和管理上去做。我掰不出那么有深度的文章，这篇文章就专注一点，只讲代码部分里的通知，也就是 Prometheus 生态中的 Alertmanager 这个组件。</p><a id="more"></a><h2 id="为什么要-alertmanager">为什么要 Alertmanager？</h2><p>我们先介绍一点背景知识，Prometheus 生态中的警报是在 Prometheus Server 中计算警报规则(Alert Rule)并产生的，而所谓计算警报规则，其实就是周期性地执行一段 PromQL，得到的查询结果就是警报，比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_load5 &gt; 20</span><br></pre></td></tr></table></figure><p>这个 PromQL 会查出所有”在最近一次采样中，5分钟平均 Load 大于 20”的时间序列。这些序列带上它们的标签就被转化为警报。</p><p>只是，当 Prometheus Server 计算出一些警报后，它自己并没有能力将这些警报通知出去，只能将警报推给 Alertmanager，由 Alertmanager 进行发送。</p><p>这个切分，一方面是出于单一职责的考虑，让 Prometheus “do one thing and do it well”, 另一方面则是因为警报发送确实不是一件”简单”的事，需要一个专门的系统来做好它。可以这么说，Alertmanager 的目标不是简单地”发出警报”，而是”发出高质量的警报”。它提供的高级功能包括但不限于：</p><ul><li><p>Go Template 渲染警报内容；</p></li><li><p>管理警报的重复提醒时机与消除后消除通知的发送；</p></li><li><p>根据标签定义警报路由，实现警报的优先级、接收人划分，并针对不同的优先级和接收人定制不同的发送策略；</p></li><li><p>将同类型警报打包成一条通知发送出去，降低警报通知的频率；</p></li><li><p>支持静默规则: 用户可以定义一条静默规则，在一段时间内停止发送部分特定的警报，比如已经确认是搜索集群问题，在修复搜索集群时，先静默掉搜索集群相关警报；</p></li><li><p>支持”抑制”规则(Inhibition Rule): 用户可以定义一条”抑制”规则，规定在某种警报发生时，不发送另一种警报，比如在”A 机房网络故障”这条警报发生时，不发送所有”A 机房中的警报”；</p></li></ul><p>假如你很忙，那么读到这里就完全 OK 了，反正这类文章最大的作用就是让我们”知道有 X 这回事，大概了解有啥特性，当有需求匹配时，能想到试试看 X 合不合适“，其中 X = Alertmanager。当然，假如你是个好奇宝宝，那么还可以看看下面的解析。</p><h2 id="alertmanager-内部架构">Alertmanager 内部架构</h2><p>先看官方文档中的架构图：</p><p><img src="https://aleiwu.com/img/alertmanager/alertmanager.png" alt=""></p><ol><li><p>从左上开始，Prometheus 发送的警报到 Alertmanager;</p></li><li><p>警报会被存储到 AlertProvider 中，Alertmanager 的内置实现就是包了一个 map，也就是存放在本机内存中，这里可以很容易地扩展其它 Provider;</p></li><li><p>Dispatcher 是一个单独的 goroutine，它会不断到 AlertProvider 拉新的警报，并且根据 YAML 配置的 Routing Tree 将警报路由到一个分组中;</p></li><li><p>分组会定时进行 flush (间隔为配置参数中的 group_interval), flush 后这组警报会走一个 Notification Pipeline 链式处理;</p></li><li><p>Notification Pipeline 为这组警报确定发送目标，并执行抑制逻辑，静默逻辑，去重逻辑，发送与重试逻辑，实现警报的最终投递;</p></li></ol><p>下面就分开讲一讲核心的两块：</p><ol><li><p>Dispatcher 中的 Routing Tree 的实现与设计意图</p></li><li><p>Notification Pipeline 的实现与设计意图</p></li></ol><h3 id="routing-tree">Routing Tree</h3><p>Routing Tree 的是一颗多叉树，节点的数据结构定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 节点包含警报的路由逻辑</span><br><span class="line">type Route struct &#123;</span><br><span class="line">    &#x2F;&#x2F; 父节点</span><br><span class="line">    parent *Route</span><br><span class="line">    &#x2F;&#x2F; 节点的配置，下文详解</span><br><span class="line">    RouteOpts RouteOpts</span><br><span class="line">    &#x2F;&#x2F; Matchers 是一组匹配规则，用于判断 Alert 与当前节点是否匹配</span><br><span class="line">    Matchers types.Matchers</span><br><span class="line">    &#x2F;&#x2F; 假如为 true, 那么 Alert 在匹配到一个节点后，还会继续往下匹配</span><br><span class="line">    Continue bool</span><br><span class="line">    &#x2F;&#x2F; 子节点</span><br><span class="line">    Routes []*Route</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的处理代码很简单，深度优先搜索：警报从 root 开始匹配（root 默认匹配所有警报），然后根据节点中定义的 Matchers 检测警报与节点是否匹配，匹配则继续往下搜索，默认情况下第一个”最深”的 match (也就是 DFS 回溯之前的最后一个节点)会被返回。特殊情况就是节点配置了 Continue=true，这时假如这个节点匹配上了，那不会立即返回，而是继续搜索，用于支持警报发送给多方这种场景（比如”抄送”)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 深度优先搜索</span><br><span class="line">func (r *Route) Match(lset model.LabelSet) []*Route &#123;</span><br><span class="line">    if !r.Matchers.Match(lset) &#123;</span><br><span class="line">    return nil</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var all []*Route</span><br><span class="line">    for _, cr :&#x3D; range r.Routes &#123;</span><br><span class="line">        &#x2F;&#x2F; 递归调用子节点的 Match 方法</span><br><span class="line">        matches :&#x3D; cr.Match(lset)</span><br><span class="line"></span><br><span class="line">        all &#x3D; append(all, matches...)</span><br><span class="line"></span><br><span class="line">        if matches !&#x3D; nil &amp;&amp; !cr.Continue &#123;</span><br><span class="line">          break</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 假如没有任何节点匹配上，那就匹配根节点</span><br><span class="line">    if len(all) &#x3D;&#x3D;0 &#123;</span><br><span class="line">        all &#x3D; append(all, r)</span><br><span class="line">    &#125;</span><br><span class="line">    return all</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要设计一个复杂的 Routing Tree 逻辑呢？我们看看 Prometheus 官方的配置例子： 为了简化编写，Alertmanager 的设计是根节点的所有参数都会被子节点继承（除非子节点重写了这个参数）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">route:</span><br><span class="line">  # 根节点的警报会发送给默认的接收组</span><br><span class="line">  # 该节点中的警报会按’cluster’和’alertname’做 Group，每个分组中最多每5分钟发送一条警报，同样的警报最多4小时发送一次</span><br><span class="line">  receiver:’default-receiver’</span><br><span class="line">  group_wait: 30s</span><br><span class="line">  group_interval: 5m</span><br><span class="line">  repeat_interval: 4h</span><br><span class="line">  group_by: [cluster, alertname]</span><br><span class="line">  # 没有匹配到子节点的警报，会默认匹配到根节点上</span><br><span class="line">  # 接下来是子节点的配置：</span><br><span class="line">  routes:</span><br><span class="line">    # 所有 service 字段为 mysql 或 cassandra 的警报，会发送到’database-pager’这个接收组</span><br><span class="line">    # 由于继承逻辑，这个节点中的警报仍然是按’cluster’和’alertname’做 Group 的</span><br><span class="line">  - receiver:’database-pager’</span><br><span class="line">    group_wait: 10s</span><br><span class="line">    match_re:</span><br><span class="line">    service: mysql|cassandra</span><br><span class="line">    # 所有 team 字段为 fronted 的警报，会发送到’frontend-pager’这个接收组</span><br><span class="line">    # 很重要的一点是，这个组中的警报是按’product’和’environment’做分组的，因为’frontend’面向用户，更关心哪个’产品’的什么’环境’出问题了</span><br><span class="line">  - receiver:’frontend-pager’</span><br><span class="line">    group_by: [product, environment]</span><br><span class="line">    match:</span><br><span class="line">    team: frontend</span><br></pre></td></tr></table></figure><p>总结一下，Routing Tree 的设计意图是让用户能够非常自由地给警报归类，然后根据归类后的类别来配置要发送给谁以及怎么发送：</p><ul><li><p>发送给谁？上面已经做了很好的示例，’数据库警报’和’前端警报’都有特定的接收组，都没有匹配上那么就是’默认警报’, 发送给默认接收组</p></li><li><p>怎么发送？对于一类警报，有个多个字段来配置发送行为：</p><ul><li><p>group_by：决定了警报怎么分组，每个 group 只会定时产生一次通知，这就达到了降噪的效果，而不同的警报类别分组方式显然是不一样的，举个例子：</p><ul><li><p>配置中的 ‘数据库警报’ 是按 ‘集群’ 和 ‘规则名’ 分组的，这表明对于数据库警报，我们关心的是“哪个集群的哪个规则出问题了”，比如一个时间段内，’华东’集群产生了10条 ‘API响应时间过长’ 警报，这些警报就会聚合在一个通知里发出来；</p></li><li><p>配置中的 ‘前端警报’ 是按 ‘产品’ 和 ‘环境’ 分组的， 这表明对于前端警报，我们关心的是“哪个产品的哪个环境出问题了”</p></li></ul></li><li><p>group_interval 和 group_wait: 控制分组的细节，不细谈，其中 group_interval 控制了这个分组最快多久执行一次 Notification Pipeline</p></li><li><p>repeat_interval: 假如一个相同的警报一直 FIRING，Alertmanager 并不会一直发送警报，而会等待一段时间，这个等待时间就是 repeat_interval，显然，不同类型警报的发送频率也是不一样的</p></li></ul></li></ul><p>group_interval 和 repeat_interval 的区别会在下文中详述</p><h3 id="notification-pipeline">Notification Pipeline</h3><p>由 Routing Tree 分组后的警报会触发 Notification Pipeline:</p><ul><li><p>当一个 AlertGroup 新建后，它会等待一段时间（group_wait 参数)，再触发第一次 Notification Pipeline</p></li><li><p>假如这个 AlertGroup 持续存在，那么之后每隔一段时间（group_interval 参数)，都会触发一次 Notification Pipeline</p></li></ul><p>每次触发 Notification Pipeline，AlertGroup 都会将组内所有的 Alert 作为一个列表传进 Pipeline, Notification Pipeline 本身是一个按照责任链模式设计的接口，MultiStage 这个实现会链式执行所有的 Stage：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; A Stage processes alerts under the constraints of the given context.</span><br><span class="line">type Stage interface &#123;</span><br><span class="line">    Exec(ctx context.Context, l log.Logger, alerts …*types.Alert) (context.Context, []*types.Alert, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; A MultiStage executes a series of stages sequencially.</span><br><span class="line">type MultiStage []Stage</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Exec implements the Stage interface.</span><br><span class="line">func (ms MultiStage) Exec(ctx context.Context, l log.Logger, alerts …*types.Alert) (context.Context, []*types.Alert, error) &#123;</span><br><span class="line">    var err error</span><br><span class="line">    for _, s :&#x3D; range ms &#123;</span><br><span class="line">        if len(alerts) &#x3D;&#x3D;0&#123;</span><br><span class="line">            return ctx, nil, nil</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx, alerts, err &#x3D; s.Exec(ctx, l, alerts…)</span><br><span class="line">        if err !&#x3D; nil &#123;</span><br><span class="line">            return ctx, nil, err</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return ctx, alerts, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MultiStage 里塞的就是开头架构图里画的 InhibitStage、SilenceStage…这么一条链式处理的流程，这里要提一下，官方的架构图画错了，RoutingStage 其实处在整个 Pipeline 的首位，不过这个顺序并不影响逻辑。 要重点说的是DedupStage和NotifySetStage它俩协同负责去重工作，具体做法是：</p><ul><li><p>NotifySetStage 会为发送成功的警报记录一条发送通知，key 是’接收组名字’+’GroupKey 的 key 值’，value 是当前 Stage 收到的 []Alert (这个列表和最开始进入 Notification Pipeline 的警报列表有可能是不同的，因为其中有些 Alert 可能在前置 Stage 中已经被过滤掉了)</p></li><li><p>DedupStage 中会以’接收组名字’+’GroupKey 的 key 值’为 key 查询通知记录，假如：</p><ul><li><p>查询无结果，那么这条通知没发过，为这组警报发送一条通知；</p></li><li><p>查询有结果，那么查询得到已经发送过的一组警报 S，判断当前的这组警报 A 是否为 S 的子集：</p><ul><li><p>假如 A 是 S 的子集，那么表明 A 和 S 重复，这时候要根据 repeat_interval 来决定是否再次发送：</p><ul><li><p>距离 S 的发送时间已经过去了足够久（repeat_interval)，那么我们要再发送一遍；</p></li><li><p>距离 S 的发送时间还没有达到 repeat_interval，那么为了降低警报频率，触发去重逻辑，这次我们就不发了；</p></li></ul></li><li><p>假如 A 不是 S 的子集，那么 A 和 S 不重复，需要再发送一次； 上面的表述可能有些抽象，最后表现出来的结果是：</p></li></ul></li></ul></li><li><p>假如一个 AlertGroup 里的警报一直发生变化，那么虽然每次都是新警报，不会被去重，但是由于 group_interval （假设是5分钟）存在，这个 AlertGroup 最多 5 分钟触发一次 Notification Pipeline，因此最多也只会 5 分钟发送一条通知；</p></li><li><p>假如一个 AlertGroup 里的警报一直不变化，就是那么几条一直 FIRING 着，那么虽然每个 group_interval 都会触发 Notification Pipeline，但是由于 repeate_interval（假设是1小时）存在，因此最多也只会每 1 小时为这个重复的警报发送一条通知； 再说一下 Silence 和 Inhibit，两者都是基于用户主动定义的规则的：</p></li><li><p>Silence Rule：静默规则用来关闭掉部分警报的通知，比如某个性能问题已经修复了，但需要排期上线，那么在上线前就可以把对应的警报静默掉来减少噪音；</p></li><li><p>Inhibit Rule：抑制规则用于在某类警报发生时，抑制掉另一类警报，比如某个机房宕机了，那么会影响所有上层服务，产生级联的警报洪流，反而会掩盖掉根本原因，这时候抑制规则就有用了； 因此 Notification Pipeline 的设计意图就很明确了：通过一系列逻辑（如抑制、静默、去重）来获得更高的警报质量，由于警报质量的维度很多（剔除重复、类似的警报，静默暂时无用的警报，抑制级联警报），因此 Notification Pipeline 设计成了责任链模式，以便于随时添加新的环节来优化警报质量</p></li></ul><h2 id="一个-prometheus-报警处理实例">一个 Prometheus 报警处理实例</h2><p>最近又被问到了 Prometheus 为啥不报警，恰好回忆起之前经常解答相关问题，不妨写一篇文章来解决下面两个问题：</p><ul><li><p>我的 Prometheus 为啥报警？</p></li><li><p>我的 Prometheus 为啥不报警？</p></li></ul><h3 id="从-for-参数开始">从 for 参数开始</h3><p>我们首先需要一些背景知识：Prometheus 是如何计算并产生警报的？</p><p>看一条简单的警报规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- alert: KubeAPILatencyHigh</span><br><span class="line">  annotations:</span><br><span class="line">    message: The API server has a 99th percentile latency of &#123;&#123; $value &#125;&#125; seconds</span><br><span class="line">      for &#123;&#123; $labels.verb &#125;&#125; &#123;&#123; $labels.resource &#125;&#125;.</span><br><span class="line">  expr: |</span><br><span class="line">    cluster_quantile:apiserver_request_latencies:histogram_quantile&#123;job&#x3D;&quot;apiserver&quot;,quantile&#x3D;&quot;0.99&quot;,subresource!&#x3D;&quot;log&quot;&#125; &gt; 4</span><br><span class="line">  for: 10m</span><br><span class="line">  labels:</span><br><span class="line">    severity: critical</span><br></pre></td></tr></table></figure><p>这条警报的<em>大致</em>含义是，假如 kube-apiserver 的 P99 响应时间大于 4 秒，并持续 10 分钟以上，就产生报警。</p><p>首先要注意的是由 <code>for</code> 指定的 Pending Duration。这个参数主要用于降噪，很多类似响应时间这样的指标都是有抖动的，通过指定 Pending Duration，我们可以 过滤掉这些瞬时抖动，让 on-call 人员能够把注意力放在真正有持续影响的问题上。</p><p>那么显然，下面这样的状况是不会触发这条警报规则的，因为虽然指标已经达到了警报阈值，但持续时间并不够长：</p><p><img src="https://aleiwu.com/prometheus-peaks.png" alt=""></p><p>但偶尔我们也会碰到更奇怪的事情。</p><h3 id="为什么不报警">为什么不报警？</h3><p><img src="https://aleiwu.com/no-alert.jpg" alt=""></p><p>类似上面这样持续超出阈值的场景，为什么有时候会不报警呢？</p><h3 id="为什么报警">为什么报警？</h3><p><img src="https://aleiwu.com/why-alert.jpg" alt=""></p><p>类似上面这样并未持续超出阈值的场景，为什么有时又会报警呢？</p><h3 id="采样间隔">采样间隔</h3><p>这其实都源自于 Prometheus 的数据存储方式与计算方式。</p><p>首先，Prometheus 按照配置的抓取间隔(<code>scrape_interval</code>)定时抓取指标数据，因此存储的是形如 (timestamp, value) 这样的采样点。</p><p>对于警报， Prometheus 会按固定的时间间隔重复计算每条警报规则，因此警报规则计算得到的只是稀疏的采样点，而警报持续时间是否大于 <code>for</code> 指定的 Pending Duration 则是由这些稀疏的采样点决定的。</p><p>而在 Grafana 渲染图表时，Grafana 发送给 Prometheus 的是一个 Range Query，其执行机制是从时间区间的起始点开始，每隔一定的时间点（由 Range Query 的 <code>step</code> 请求参数决定） 进行一次计算采样。</p><p>这些结合在一起，就会导致警报规则计算时“看到的内容”和我们在 Grafana 图表上观察到的内容不一致，比如下面这张示意图：</p><p><img src="https://aleiwu.com/alert-firing.jpg" alt=""></p><p>上面图中，圆点代表原始采样点：</p><ul><li><p>40s 时，第一次计算，低于阈值</p></li><li><p>80s 时，第二次计算，高于阈值，进入 Pending 状态</p></li><li><p>120s 时，第三次计算，仍然高于阈值，90s 处的原始采样点虽然低于阈值，但是警报规则计算时并没有”看到它“</p></li><li><p>160s 时，第四次计算，高于阈值，Pending 达到 2 分钟，进入 firing 状态</p></li><li><p>持续高于阈值</p></li><li><p>直到 360s 时，计算得到低于阈值，警报消除</p></li></ul><p>由于采样是稀疏的，部分采样点会出现被跳过的状况，而当 Grafana 渲染图表时，取决于 Range Query 中采样点的分布，图表则有可能捕捉到 被警报规则忽略掉的”低谷“（图三)或者也可能无法捕捉到警报规则碰到的”低谷“（图二）。如此这般，我们就被”图表“给蒙骗过去，质疑起警报来了。</p><h3 id="如何应对">如何应对</h3><p>首先嘛， Prometheus 作为一个指标系统天生就不是精确的——由于指标本身就是稀疏采样的，事实上所有的图表和警报都是”估算”，我们也就不必 太纠结于图表和警报的对应性，能够帮助我们发现问题解决问题就是一个好监控系统。当然，有时候我们也得证明这个警报确实没问题，那可以看一眼 <code>ALERTS</code> 指标。<code>ALERTS</code> 是 Prometheus 在警报计算过程中维护的内建指标，它记录每个警报从 Pending 到 Firing 的整个历史过程，拉出来一看也就清楚了。</p><p>但有时候 ALERTS 的说服力可能还不够，因为它本身并没有记录每次计算出来的值到底是啥，而在我们回头去考证警报时，又无法选取出和警报计算过程中一模一样的计算时间点， 因此也就无法还原警报计算时看到的计算值究竟是啥。这时候终极解决方案就是把警报所要计算的指标定义成一条 Recording Rule，计算出一个新指标来记录计算值，然后针对这个 新指标做阈值报警。kube-prometheus 的警报规则中就大量采用了这种技术。</p><h3 id="到此为止了吗">到此为止了吗？</h3><p>Prometheus 警报不仅包含 Prometheus 本身，还包含用于警报治理的 Alertmanager，我们可以看一看上面那张指标计算示意图的全图：</p><p><img src="https://aleiwu.com/alert-overview.jpg" alt=""></p><p>在警报产生后，还要经过 Alertmanager 的分组、抑制处理、静默处理、去重处理和降噪处理最后再发送给接收者。而这个过程也有大量的因素可能会导致警报产生了却最终没有进行通知。</p><h2 id="结语">结语</h2><p>Alertmanager 整体的设计意图就是奔着治理警报（通知）去的，首先它用 Routing Tree 来帮助用户定义警报的归类与发送逻辑，然后再用 Notification Pipeline 来做抑制、静默、去重以提升警报质量。这些功能虽然不能解决”警报”这件事中所有令人头疼的问题，但确实为我们着手去解决”警报质量”相关问题提供了趁手的工具。</p><blockquote><p>本文转载自：「Aylei’s Blog」，原文：1.<a href="https://url.cn/5Gp0VLq%E3%80%812.https://url.cn/5MEMY8K%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://url.cn/5Gp0VLq、2.https://url.cn/5MEMY8K，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <code>editor@hi-linux.com</code> 。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;警报是监控系统中必不可少的一块, 当然了, 也是最难搞的一块. 我们乍一想, 警报似乎很简单一件事:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假如发生了异常情况, 发送或邮件/消息通知给某人或某频道&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一把梭搞起来之后, 就不免有一些小麻烦:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;这个啊…一天中总有那么几次波动, 也难修难查了, 算了算了不看了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;警报太多了, 实在看不过来, 屏蔽/归档/放生吧…&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有毒吧, 这个阈值也太低了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;卧槽, 这些警报啥意思啊, 发给我干嘛啊?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;卧槽卧槽卧槽, 怎么一下子几十百来条警报, 哦…原来网络出问题了全崩了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;到最后我们还能总结出一个奇怪的规律:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这世界上只有两种警报，一种是疯狂报警但是没有卵用完全没人看的警报，一种是非常有效大家都想看但在用户反馈前从来都报不出来的警报。—— 鲁迅(&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;玩笑归玩笑，但至少我们能看出，警报不是一个简单的计算+通知系统。只是，”做好警报”这件事本身是个综合问题，代码能解决的也只是其中的一小部分，更多的事情要在组织、人事和管理上去做。我掰不出那么有深度的文章，这篇文章就专注一点，只讲代码部分里的通知，也就是 Prometheus 生态中的 Alertmanager 这个组件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Prometheus" scheme="https://www.hi-linux.com/categories/Prometheus/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
      <category term="Prometheus" scheme="https://www.hi-linux.com/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>推荐一款让所有终端程序轻松支持 SOCKS5 代理的神器 graftcp</title>
    <link href="https://www.hi-linux.com/posts/13318.html"/>
    <id>https://www.hi-linux.com/posts/13318.html</id>
    <published>2020-05-17T01:00:00.000Z</published>
    <updated>2020-05-17T07:48:06.547Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>你是否经常有在终端下通过一些实用程序进行工作的需求呢，比如：Git 等。但是由于这些终端程序默认并不支持 Socks 5 代理或 HTTP 代理，在访问一些需要科学上网的网络服务时速度或许会非常的慢。</p><p>通常我们的解决方法就是使用环境变量 <code>export ALL_PROXY=socks5://proxyAddress:port</code> 或者 <code>export http_proxy=http://proxyAddress:port</code> 给所有终端程序配置一个全局代理，这样做虽然有效但并不是最佳解决方案。</p><p>今天就给大家介绍一款神器 <code>graftcp</code>，<code>graftcp</code> 可以把任何指定的终端程序的 TCP 连接重定向到 SOCKS5 或 HTTP 代理，并且不会影响其它的终端程序。是不是很好的解决了你的痛点呢？</p><h2 id="简介">简介</h2><p><code>graftcp</code> 可以把任何指定程序（应用程序、脚本、shell 等）的 TCP 连接重定向到 SOCKS5 或 HTTP 代理。</p><p>对比 <a href="https://linux.die.net/man/8/tsocks" target="_blank" rel="noopener">tsocks</a>、<a href="http://proxychains.sourceforge.net/" target="_blank" rel="noopener">proxychains</a> 或 <a href="https://github.com/rofl0r/proxychains-ng" target="_blank" rel="noopener">proxychains-ng</a>，<code>graftcp</code> 并不使用 <a href="https://stackoverflow.com/questions/426230/what-is-the-ld-preload-trick" target="_blank" rel="noopener">LD_PRELOAD 技巧</a>来劫持共享库的 connect()、getaddrinfo()<br>等系列函数达到重定向目的，这种方法只对使用动态链接编译的程序有效，对于静态链接编译出来的程序，例如<a href="https://golang.org/cmd/link/" target="_blank" rel="noopener">默认选项编译的 Go 程序</a>，<a href="https://github.com/rofl0r/proxychains-ng/issues/199" target="_blank" rel="noopener">proxychains-ng 就无效了</a>。<code>graftcp</code> 使用 <a href="https://en.wikipedia.org/wiki/Ptrace" target="_blank" rel="noopener"><code>ptrace(2)</code></a> 系统调用跟踪或修改任意指定程序的 connect 信息，对任何程序都有效。<a href="#principles">工作原理</a>后面将会解释。</p><blockquote><p>项目地址：<a href="https://github.com/hmgle/graftcp" target="_blank" rel="noopener">https://github.com/hmgle/graftcp</a></p></blockquote><a id="more"></a><h2 id="安装">安装</h2><p><code>graftcp</code> 在 Linux 系统内运行。 <code>graftcp-local</code> 使用 Go 编写, <a href="https://golang.org/doc/install" target="_blank" rel="noopener">Go</a> 环境是必需的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/hmgle/graftcp.git</span><br><span class="line">$ <span class="built_in">cd</span> graftcp</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><p>make 执行完后，即可运行 <code>graftcp-local/graftcp-local</code> 和 <code>./graftcp</code>。你也可以把它们都安装进系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><p>之后 <code>graftcp-local</code> 会随着系统启动而自动运行。</p><!-- more --><h2 id="用法参数">用法参数</h2><p><code>graftcp-local</code>:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> graftcp-local/graftcp-local -h</span></span><br><span class="line">Usage of graftcp-local/graftcp-local:</span><br><span class="line">  -config string</span><br><span class="line">        Path to the configuration file</span><br><span class="line">  -http_proxy string</span><br><span class="line">        http proxy address, e.g.: 127.0.0.1:8080</span><br><span class="line">  -listen string</span><br><span class="line">        Listen address (default ":2233")</span><br><span class="line">  -logfile string</span><br><span class="line">        Write logs to file</span><br><span class="line">  -loglevel value</span><br><span class="line">        Log level (0-6) (default 1)</span><br><span class="line">  -pipepath string</span><br><span class="line">        Pipe path for graftcp to send address info (default "/tmp/graftcplocal.fifo")</span><br><span class="line">  -select_proxy_mode string</span><br><span class="line">        Set the mode for select a proxy [auto | random | only_http_proxy | only_socks5] (default "auto")</span><br><span class="line">  -service string</span><br><span class="line">        Control the system service: ["start" "stop" "restart" "install" "uninstall"]</span><br><span class="line">  -socks5 string</span><br><span class="line">        SOCKS5 address (default "127.0.0.1:1080")</span><br><span class="line">  -syslog</span><br><span class="line">        Send logs to the local system logger (Eventlog on Windows, syslog on Unix)</span><br></pre></td></tr></table></figure><p><code>graftcp</code>:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> graftcp -h</span></span><br><span class="line">Usage: graftcp [options] prog [prog-args]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a --local-addr=&lt;graftcp-local-IP-addr&gt;</span><br><span class="line">                    graftcp-local's IP address. Default: localhost</span><br><span class="line">  -p --local-port=&lt;graftcp-local-port&gt;</span><br><span class="line">                    Which port is graftcp-local listening? Default: 2233</span><br><span class="line">  -f --local-fifo=&lt;fifo-path&gt;</span><br><span class="line">                    Path of fifo to communicate with graftcp-local.</span><br><span class="line">                    Default: /tmp/graftcplocal.fifo</span><br><span class="line">  -b --blackip-file=&lt;black-ip-file-path&gt;</span><br><span class="line">                    The IP in black-ip-file will connect direct</span><br><span class="line">  -w --whiteip-file=&lt;white-ip-file-path&gt;</span><br><span class="line">                    Only redirect the connect that destination ip in the</span><br><span class="line">                    white-ip-file to SOCKS5</span><br><span class="line">  -n --not-ignore-local</span><br><span class="line">                    Connecting to local is not changed by default, this</span><br><span class="line">                    option will redirect it to SOCKS5</span><br><span class="line">  -h --help</span><br><span class="line">                    Display this help and exit</span><br></pre></td></tr></table></figure><h2 id="使用示例">使用示例</h2><p>假设你正在运行默认地址 “localhost:1080” 的 SOCKS5 代理，首先启动 <code>graftcp-local</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ graftcp-local/graftcp-local</span><br></pre></td></tr></table></figure><p>通过 <code>graftcp</code> 安装来自 <a href="http://golang.org" target="_blank" rel="noopener">golang.org</a> 的 Go 包:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./graftcp go get -v golang.org/x/net/proxy</span><br></pre></td></tr></table></figure><p>通过 <code>graftcp</code> 打开 <code>Chromium</code> / <code>Chrome</code> / <code>Firefox</code> 浏览器，网页的所有请求都会重定向到 SOCKS5 代理：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./graftcp chromium-browser</span><br></pre></td></tr></table></figure><p>通过 <code>graftcp</code> 启动 <code>Bash</code> / <code>Zsh</code> / <code>Fish</code>，在这个新开的 shell 里面执行的任何新命令产生的 TCP 连接都会重定向到 SOCKS5 代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">% ./graftcp bash</span><br><span class="line">$ wget https://www.google.com</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hmgle/graftcp/master/demo.gif" alt="demo"></p><h2 id="工作原理">工作原理</h2><p>要达到重定向一个 app 发起的的 TCP 连接到其他目标地址并且该 app 本身对此毫无感知的目的，大概需要这些条件：</p><ul><li><code>fork(2)</code> 一个新进程，通过 <code>execve(2)</code> 启动该 app，并使用 <code>ptrace(2)</code> 进行跟踪，在 app 执行每一次 TCP 连接前，捕获并拦截这次 <code>connect(2)</code> 系统调用，获取目标地址的参数，并通过管道传给 <code>graftcp-local</code>。</li><li>修改这次 <code>connect(2)</code> 系统调用的目标地址参数为 <code>graftcp-local</code> 的地址，然后恢复执行被中断的系统调用。返回成功后，这个程序以为自己连的是原始的地址，但其实连的是 <code>graftcp-local</code> 的地址。这个就叫“移花接木”。</li><li><code>graftcp-local</code> 根据连接信息和目标地址信息，与 SOCKS5 proxy 建立连接，把 app 的请求的数据重定向到 SOCKS5 proxy。</li></ul><p>这里可能有个疑问：既然可以修改任何系统调用的参数，那么通过修改 app 的 <code>write(2)</code> / <code>send(2)</code> 的参数，直接往 <code>buffer</code> 里面附加原始目标地址信息给 <code>graftcp-local</code> 不是更简单吗？答案是这无法做到。如果直接往运行在子进程的被跟踪程序的 <code>buffer</code> 添加信息，可能会造成缓冲区溢出，造成程序崩溃或者覆盖了其他数据。<br>另外，<a href="http://man7.org/linux/man-pages/man2/execve.2.html" target="_blank" rel="noopener"><code>execve(2)</code> 会分离所有的共享内存</a>，所以也不能通过共享内存的方式让被跟踪的 app 的 <code>write</code> buffer 携带更多的数据，因此这里采用管道方式给 <code>graftcp-local</code> 传递原始的目标地址信息。</p><p>简单的流程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">+---------------+             +---------+         +--------+         +------+</span><br><span class="line">|   graftcp     |  dest host  |         |         |        |         |      |</span><br><span class="line">|   (tracer)    +---PIPE-----&gt;|         |         |        |         |      |</span><br><span class="line">|      ^        |  info       |         |         |        |         |      |</span><br><span class="line">|      | ptrace |             |         |         |        |         |      |</span><br><span class="line">|      v        |             |         |         |        |         |      |</span><br><span class="line">|  +---------+  |             |         |         |        |         |      |</span><br><span class="line">|  |         |  |  connect    |         | connect |        | connect |      |</span><br><span class="line">|  |         +---------------&gt;| graftcp +--------&gt;| SOCKS5 +--------&gt;| dest |</span><br><span class="line">|  |         |  |             | -local  |         |  or    |         | host |</span><br><span class="line">|  |  app    |  |  req        |         |  req    | HTTP   |  req    |      |</span><br><span class="line">|  |(tracee) +---------------&gt;|         +--------&gt;| proxy  +--------&gt;|      |</span><br><span class="line">|  |         |  |             |         |         |        |         |      |</span><br><span class="line">|  |         |  |  resp       |         |  resp   |        |  resp   |      |</span><br><span class="line">|  |         |&lt;---------------+         |&lt;--------+        |&lt;--------+      |</span><br><span class="line">|  +---------+  |             |         |         |        |         |      |</span><br><span class="line">+---------------+             +---------+         +--------+         +------+</span><br></pre></td></tr></table></figure><h2 id="常见问题解答及技巧">常见问题解答及技巧</h2><h3 id="有哪些重定向-tcp-连接的方式">有哪些重定向 TCP 连接的方式？</h3><p>主要有： 全局式、设置环境变量式和仅针对程序（或进程）式。</p><p>全局式：比如使用 <code>iptables</code> + <code>RedSocks</code> 可以把系统符合一定规则的流量转换为 SOCKS5 流量。这种方式的优点是全局有效；缺点是所有满足该规则的流量都被重定向了，影响范围较大。</p><p>设置环境变量方式：一些程序启动时会读取 proxy 相关的环境变量来决定是否将自己的数据转换为对应代理协议的流量，比如 <code>curl</code> 会<a href="https://curl.haxx.se/libcurl/c/CURLOPT_PROXY.html" target="_blank" rel="noopener">读取 <code>http_proxy</code>, <code>ftp_proxy</code>, <code>all_proxy</code> 环境变量并根据请求 scheme 来决定转换为哪种代理流量</a>。这种方法只有程序本身实现了转换的功能才有效，局限性较大。</p><p>仅针对程序方式： 这种方式可以仅针对特定的程序执行重定向，比如 <code>tsocks</code> 或 <code>proxychains</code>。如前面提到，它们之前都是使用 <code>LD_PRELOAD</code> 劫持动态库方式实现，对 <code>Go</code> 之类默认静态链接编译的程序就无效了。<code>graftcp</code> 改进了这一点，能够重定向任何程序的 TCP 连接。</p><h3 id="如果应用程序连接的目标地址是本机使用-graftcp-会把该连接重定向到-socks5-代理吗">如果应用程序连接的目标地址是本机，使用 <code>graftcp</code> 会把该连接重定向到 SOCKS5 代理吗？</h3><p>不会。默认会忽略目标地址为本地的连接，如果想重定向所有地址的话，可以使用 <code>-n</code>选项。如果想忽略更多的地址，可以把它们加入黑名单 IP 文件；如果想仅重定向某些 IP 地址，可以把这些地址加入白名单 IP 文件。使用 <code>graftcp --help</code> 获取设置参数。</p><h3 id="我的-dns-请求受到污染graftcp-会处理-dns-请求吗">我的 DNS 请求受到污染，<code>graftcp</code> 会处理 DNS 请求吗？</h3><p>不会。<code>graftcp</code> 目前仅处理 TCP 连接。建议使用 <code>dnscrypt-proxy</code> 或 <code>ChinaDNS</code> 等方式解决 DNS 污染问题。</p><h3 id="clone2-参数有个叫-clone_untraced-的标志位可以避免让父进程跟踪到自己graftcp-是如何做到强制跟踪的"><code>clone(2)</code> 参数有个叫 <code>CLONE_UNTRACED</code> 的标志位，可以避免让父进程跟踪到自己，<code>graftcp</code> 是如何做到强制跟踪的？</h3><p><code>graftcp</code> 在子进程调用 <code>clone(2)</code> 之前会把它拦截，清除这个 <code>CLONE_UNTRACED</code> 标志位，所以被跟踪的子进程最终还是难逃被跟踪的命运。另外，这个 <code>CLONE_UNTRACED</code> 标志位本意是给内核使用的，普通程序不应该去设置它。</p><p>Linux 提供了一种限制被 <code>ptrace(2)</code> 跟踪的方法：设置 <a href="https://www.kernel.org/doc/Documentation/security/Yama.txt" target="_blank" rel="noopener"><code>/proc/sys/kernel/yama/ptrace_scope</code></a> 的值，若 <code>ptrace(2)</code> 失效，请检查该值是否被修改过。</p><h3 id="支持-macos-吗">支持 macOS 吗？</h3><p>不。macOS 的 <a href="http://polarhome.com/service/man/?qf=ptrace&amp;af=0&amp;sf=0&amp;of=Darwin&amp;tf=2" target="_blank" rel="noopener"><code>ptrace(2)</code></a> 是个半残品。<s>不过理论上参考 DTrace那一套也能实现</s>，见<a href="https://github.com/hmgle/graftcp/issues/12" target="_blank" rel="noopener">issue 12</a>。或许有兴趣的同学可以趟下这趟浑水。</p><h2 id="参考文档">参考文档</h2><ol><li><p><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></p></li><li><p><a href="https://github.com/hmgle/graftcp" target="_blank" rel="noopener">https://github.com/hmgle/graftcp</a></p></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你是否经常有在终端下通过一些实用程序进行工作的需求呢，比如：Git 等。但是由于这些终端程序默认并不支持 Socks 5 代理或 HTTP 代理，在访问一些需要科学上网的网络服务时速度或许会非常的慢。&lt;/p&gt;
&lt;p&gt;通常我们的解决方法就是使用环境变量 &lt;code&gt;export ALL_PROXY=socks5://proxyAddress:port&lt;/code&gt; 或者 &lt;code&gt;export http_proxy=http://proxyAddress:port&lt;/code&gt; 给所有终端程序配置一个全局代理，这样做虽然有效但并不是最佳解决方案。&lt;/p&gt;
&lt;p&gt;今天就给大家介绍一款神器 &lt;code&gt;graftcp&lt;/code&gt;，&lt;code&gt;graftcp&lt;/code&gt; 可以把任何指定的终端程序的 TCP 连接重定向到 SOCKS5 或 HTTP 代理，并且不会影响其它的终端程序。是不是很好的解决了你的痛点呢？&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;graftcp&lt;/code&gt; 可以把任何指定程序（应用程序、脚本、shell 等）的 TCP 连接重定向到 SOCKS5 或 HTTP 代理。&lt;/p&gt;
&lt;p&gt;对比 &lt;a href=&quot;https://linux.die.net/man/8/tsocks&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tsocks&lt;/a&gt;、&lt;a href=&quot;http://proxychains.sourceforge.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;proxychains&lt;/a&gt; 或 &lt;a href=&quot;https://github.com/rofl0r/proxychains-ng&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;proxychains-ng&lt;/a&gt;，&lt;code&gt;graftcp&lt;/code&gt; 并不使用 &lt;a href=&quot;https://stackoverflow.com/questions/426230/what-is-the-ld-preload-trick&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LD_PRELOAD 技巧&lt;/a&gt;来劫持共享库的 connect()、getaddrinfo()&lt;br&gt;
等系列函数达到重定向目的，这种方法只对使用动态链接编译的程序有效，对于静态链接编译出来的程序，例如&lt;a href=&quot;https://golang.org/cmd/link/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;默认选项编译的 Go 程序&lt;/a&gt;，&lt;a href=&quot;https://github.com/rofl0r/proxychains-ng/issues/199&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;proxychains-ng 就无效了&lt;/a&gt;。&lt;code&gt;graftcp&lt;/code&gt; 使用 &lt;a href=&quot;https://en.wikipedia.org/wiki/Ptrace&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;ptrace(2)&lt;/code&gt;&lt;/a&gt; 系统调用跟踪或修改任意指定程序的 connect 信息，对任何程序都有效。&lt;a href=&quot;#principles&quot;&gt;工作原理&lt;/a&gt;后面将会解释。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/hmgle/graftcp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/hmgle/graftcp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Graftcp" scheme="https://www.hi-linux.com/tags/Graftcp/"/>
    
  </entry>
  
  <entry>
    <title>使用 Telepresence 在本地调试 Kubernetes 微服务</title>
    <link href="https://www.hi-linux.com/posts/35104.html"/>
    <id>https://www.hi-linux.com/posts/35104.html</id>
    <published>2020-05-17T01:00:00.000Z</published>
    <updated>2020-05-17T07:48:06.548Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>微服务作为一种全新的软件架构现在正变得越来越火。基本原因我觉得有两点：一方面软件系统越做越复杂，通过拆分将一个大系统解耦成一个个独立的子系统，我们就降低了整个系统的复杂性。另一方面，Kubernetes 的出现使得编排这么多子系统变得简单，可以说 Kubernetes 是目前为止微服务最好的载体。</p><p>Kubernetes 解决了微服务运行时的环境问题，但对开发环境就不那么友好了。比方说如果我们要在本地开发调试一个服务 A，但服务 A 可能依赖服务B、C，而服务 B 又有一层依赖 D，我们就需要在本地把服务 B、C、D 都搭建起来才能调试服务 A。这显然是一个很痛苦的过程。</p><p><img src="https://i.loli.net/2019/11/06/OXPumiy1AWHr3v9.png" alt=""></p><p>业界有朋友用 <code>docker-compose</code> 来模拟集群中的场景。这个方案的不足之处在于它需要把 <code>Kubernetes</code> 的那一套逻辑用 <code>docker-compose.yml</code> 文件重写一遍，这给我们带来了维护成本。另一方面，有的时候依赖树太大，本地机器完全无法同时运行这么多服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ratesvc:</span><br><span class="line">  image: kubeapps&#x2F;ratesvc:latest</span><br><span class="line">  environment:</span><br><span class="line">    - JWT_KEY&#x3D;secret  # &lt;------------------------ 手工维护</span><br><span class="line">  command:</span><br><span class="line">    - &#x2F;ratesvc</span><br><span class="line">    - --mongo-url&#x3D;mongodb:&#x2F;&#x2F;root@mongodb  # &lt;---- 手工维护</span><br><span class="line">    - --mongo-database&#x3D;ratesvc</span><br><span class="line"></span><br><span class="line">mongodb:</span><br><span class="line">  image: bitnami&#x2F;mongodb:3</span><br><span class="line">  environment:</span><br><span class="line">    - MONGODB_ROOT_PASSWORD&#x3D;password123</span><br><span class="line"></span><br><span class="line">auth:</span><br><span class="line">  image: kubeapps&#x2F;oauth2-bitnami:latest</span><br><span class="line">  volumes:</span><br><span class="line">    - .&#x2F;config.yaml:&#x2F;config&#x2F;monocular.yaml  # &lt;-- 手工维护</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">volumnes:  # &lt;----------------------------------- 手工维护</span><br><span class="line">  monocular-data:</span><br></pre></td></tr></table></figure><p>另一种解决方案就是我这里要介绍的 <code>Telepresence</code> 了，它能够在不修改程序代码的情况下，让本地应用程序无感的接入到 <code>Kubernetes</code> 集群中，这样你就可以直接在本地开发调试微服务了。</p><h2 id="telepresence-简介">Telepresence 简介</h2><p><code>Telepresence</code> 是一个 <code>CNCF</code> 基金会下的项目。它的工作原理是在本地和 <code>Kubernetes</code> 集群中搭建一个透明的双向代理，这使得我们可以在本地用熟悉的 <code>IDE</code> 和调试工具来运行一个微服务，同时该服务还可以无缝的与 <code>Kubernetes</code> 集群中的其他服务进行交互，好像它就运行在这个集群中一样。</p><p>这是一个 <code>Telepresence</code> 工作原理图，它将集群中的数据卷、环境变量、网络都代理到了本地（除了数据卷外，其他两个对应用程序来说都是透明的）：</p><p><img src="https://i.loli.net/2019/11/06/79IMTeOFfJ8p5wb.png" alt=""></p><p>有了这些代理之后：</p><ol><li><p>本地的服务就可以完整的访问到远程集群中的其他服务。</p></li><li><p>本地的服务直接访问到 Kubernetes 里的各种资源，包括环境变量、Secrets、Config map 等。</p></li><li><p>甚至集群中的服务还能直接访问到本地暴露出来的接口。</p></li></ol><h2 id="telepresence-安装">Telepresence 安装</h2><p>这里只说一下如何在 <code>macOS</code> 下进行安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew cask install osxfuse  <span class="comment"># required by sshfs to mount the pod's filesystem</span></span><br><span class="line">$ brew install datawire/blackbird/telepresence</span><br></pre></td></tr></table></figure><blockquote><p>其他平台请参考：<a href="https://www.telepresence.io/reference/install" target="_blank" rel="noopener">https://www.telepresence.io/reference/install</a></p></blockquote><p>如果官方的安装包没有覆盖到你的平台，其实也可以从源代码安装，因为它本身就是用 <code>Python 3</code> 写的，熟悉 <code>Python</code> 的朋友安装这个程序应该不难，我自己就在 <code>CentOS 7</code> 上安装成功了。</p><a id="more"></a><h2 id="telepresence-使用场景">Telepresence 使用场景</h2><p>假设我们有两个服务 A 和 B，服务 A 是依赖于服务 B 的。下面分两个场景来看看如何用 Telepresence 来调试 A 和 B。</p><p><img src="https://i.loli.net/2019/11/06/Pgp2NtCk8IGvoX3.png" alt=""></p><h3 id="调试服务-a">调试服务 A</h3><p>服务 A 在本地运行，服务 B 运行在远端集群中。借助 <code>Telepresence</code> 搭建的代理，A 就能直接访问到 B。比方说我们的服务 B 是这样一个程序，它监听在 8000 端口上。每当有人访问时它就返回 <code>Hello, world!</code> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl run service-b --image=datawire/hello-world --port=8000 --expose</span><br><span class="line">$ kubectl get service service-b</span><br><span class="line">NAME        CLUSTER-IP   EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">service-b   10.0.0.12    &lt;none&gt;        8000/TCP   1m</span><br></pre></td></tr></table></figure><p>现在在本地用默认参数启动 <code>Telepresence</code> ，等它连接好集群：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ telepresence</span><br><span class="line">T: Starting proxy with method <span class="string">'vpn-tcp'</span>, <span class="built_in">which</span> has the following limitations: All processes are affected, only one telepresence can run per machine, and you</span><br><span class="line">T: can<span class="string">'t use other VPNs. You may need to add cloud hosts and headless services with --also-proxy. For a full list of method limitations see</span></span><br><span class="line"><span class="string">T: https://telepresence.io/reference/methods.html</span></span><br><span class="line"><span class="string">T: Volumes are rooted at $TELEPRESENCE_ROOT. See https://telepresence.io/howto/volumes.html for details.</span></span><br><span class="line"><span class="string">T: Starting network proxy to cluster using new Deployment telepresence-1566230249-7112632-14485</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">T: No traffic is being forwarded from the remote Deployment to your local machine. You can use the --expose option to specify which ports you want to</span></span><br><span class="line"><span class="string">T: forward.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">T: Setup complete. Launching your command.</span></span><br><span class="line"><span class="string">@test_cluster|bash-4.2#</span></span><br></pre></td></tr></table></figure><p>这时候就可以开始调试服务 A 了，因为服务 B 暴露出来的接口本地已经可以直接访问到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://service-b:8000/</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure><p>这里要说明一下这背后发生的事情：</p><ol><li><p>当运行 <code>Telepresence</code> 命令的时候，它创建了一个 <code>Deployment</code>，这个 <code>Deployment</code> 又创建了一个用来做代理的 <code>Pod</code> ，我们可以这样查看到它 <code>kubectl get pod -l telepresence</code>。</p></li><li><p>同时它还在本地创建了一个全局的 <code>VPN</code>，使得本地的所有程序都可以访问到集群中的服务。 <code>Telepresence</code> 其实还支持其他的网络代理模式（使用 <code>--method</code> 切换），<code>vpn-tcp</code> 是默认的方式，其他的好像用处不大，<code>inject-tcp</code> 甚至要在后续的版本中取消掉。</p></li><li><p>当本地的 <code>curl</code> 访问 <code>http://service-b:8000/</code> 时，对应的 <code>DNS</code> 查询和 <code>HTTP</code> 请求都被 <code>VPN</code> 路由到集群中刚刚创建的 <code>Pod</code> 去处理。</p></li></ol><p>除此之外 <code>Telepresence</code> 还将远端的文件系统通过 <code>sshfs</code> 挂载到本地 <code>$TELEPRESENCE_ROOT</code> 下面（你也可以用参数 <code>--mount &lt;MOUNT_PATH&gt;</code> 指定挂载的路径）。这样，我们的应用程序就可以在本地访问到远程的文件系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls <span class="variable">$TELEPRESENCE_ROOT</span>/var/run/secrets/kubernetes.io/serviceaccount</span><br><span class="line">ca.crt  namespace  token</span><br></pre></td></tr></table></figure><p>如果我们退出 <code>Telepresence</code> 对应的 Shell，它也会做一些清理工作，比如取消本地 <code>VPN</code>、删除刚刚创建的 <code>Deployment</code> 等。</p><h3 id="调试服务-b">调试服务 B</h3><p>服务 B 与刚才的不同之处在于，它是被别人访问的，要调试它，首先得要有真实的访问流量。我们如何才能做到将别人对它的访问路由到本地来，从而实现在本地捕捉到集群中的流量呢？</p><p>Telepresence 提供这样一个参数，<code>--swap-deployment &lt;DEPLOYMENT_NAME[:CONTAINER]&gt;</code>，用来将集群中的一个 <code>Deployment</code> 替换为本地的服务。对于上面的 <code>service-b</code>，我们可以这样替换：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ telepresence --swap-deployment service-b --expose 8000:8000</span><br></pre></td></tr></table></figure><p>这个时候集群中的服务 A 再想访问服务 B 的 8000 端口时，<code>Telepresence</code> 就会将这个请求转发到本地的 8000 端口。它的工作原理就是将集群中的 <code>service-b</code> 替换为 <code>Telepresence</code> 创建的 Proxy ，然后这个 Proxy 再将请求转发到本地客户端。</p><p>即，将原始的网络：</p><p><img src="https://i.loli.net/2019/11/06/x6NvdWSFQK4HXCJ.png" alt=""></p><p>替换为这个结构：</p><p><img src="https://i.loli.net/2019/11/06/ATgkiv1X3jGy8Wn.png" alt=""></p><p>这样我们就有机会在本地查看具体的请求数据，调试逻辑，以及生成新的回复。</p><h2 id="总结">总结</h2><p>这篇文章里我先提出了微服务开发中一个常见的问题，然后介绍了 <code>Telepresence</code> 项目，并且举例说明了怎样用它来调试两种常见的微服务场景。当然，Telepresence 还在不断的演进，本文中使用的是 v0.101 版本，后续版本很可能有些不一样的地方，也欢迎大家不断指正。</p><blockquote><p>来源：喵叔没话说</p><p>原文：<a href="https://url.cn/5SnZHs3" target="_blank" rel="noopener">https://url.cn/5SnZHs3</a></p><p>题图：来自谷歌图片搜索</p><p>版权：本文版权归原作者所有</p><p>投稿：欢迎投稿，邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a></p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微服务作为一种全新的软件架构现在正变得越来越火。基本原因我觉得有两点：一方面软件系统越做越复杂，通过拆分将一个大系统解耦成一个个独立的子系统，我们就降低了整个系统的复杂性。另一方面，Kubernetes 的出现使得编排这么多子系统变得简单，可以说 Kubernetes 是目前为止微服务最好的载体。&lt;/p&gt;
&lt;p&gt;Kubernetes 解决了微服务运行时的环境问题，但对开发环境就不那么友好了。比方说如果我们要在本地开发调试一个服务 A，但服务 A 可能依赖服务B、C，而服务 B 又有一层依赖 D，我们就需要在本地把服务 B、C、D 都搭建起来才能调试服务 A。这显然是一个很痛苦的过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/11/06/OXPumiy1AWHr3v9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;业界有朋友用 &lt;code&gt;docker-compose&lt;/code&gt; 来模拟集群中的场景。这个方案的不足之处在于它需要把 &lt;code&gt;Kubernetes&lt;/code&gt; 的那一套逻辑用 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件重写一遍，这给我们带来了维护成本。另一方面，有的时候依赖树太大，本地机器完全无法同时运行这么多服务。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ratesvc:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  image: kubeapps&amp;#x2F;ratesvc:latest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  environment:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - JWT_KEY&amp;#x3D;secret  # &amp;lt;------------------------ 手工维护&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  command:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - &amp;#x2F;ratesvc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - --mongo-url&amp;#x3D;mongodb:&amp;#x2F;&amp;#x2F;root@mongodb  # &amp;lt;---- 手工维护&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - --mongo-database&amp;#x3D;ratesvc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mongodb:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  image: bitnami&amp;#x2F;mongodb:3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  environment:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - MONGODB_ROOT_PASSWORD&amp;#x3D;password123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;auth:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  image: kubeapps&amp;#x2F;oauth2-bitnami:latest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - .&amp;#x2F;config.yaml:&amp;#x2F;config&amp;#x2F;monocular.yaml  # &amp;lt;-- 手工维护&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;volumnes:  # &amp;lt;----------------------------------- 手工维护&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  monocular-data:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另一种解决方案就是我这里要介绍的 &lt;code&gt;Telepresence&lt;/code&gt; 了，它能够在不修改程序代码的情况下，让本地应用程序无感的接入到 &lt;code&gt;Kubernetes&lt;/code&gt; 集群中，这样你就可以直接在本地开发调试微服务了。&lt;/p&gt;
&lt;h2 id=&quot;Telepresence-简介&quot;&gt;Telepresence 简介&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Telepresence&lt;/code&gt; 是一个 &lt;code&gt;CNCF&lt;/code&gt; 基金会下的项目。它的工作原理是在本地和 &lt;code&gt;Kubernetes&lt;/code&gt; 集群中搭建一个透明的双向代理，这使得我们可以在本地用熟悉的 &lt;code&gt;IDE&lt;/code&gt; 和调试工具来运行一个微服务，同时该服务还可以无缝的与 &lt;code&gt;Kubernetes&lt;/code&gt; 集群中的其他服务进行交互，好像它就运行在这个集群中一样。&lt;/p&gt;
&lt;p&gt;这是一个 &lt;code&gt;Telepresence&lt;/code&gt; 工作原理图，它将集群中的数据卷、环境变量、网络都代理到了本地（除了数据卷外，其他两个对应用程序来说都是透明的）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/11/06/79IMTeOFfJ8p5wb.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;有了这些代理之后：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;本地的服务就可以完整的访问到远程集群中的其他服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本地的服务直接访问到 Kubernetes 里的各种资源，包括环境变量、Secrets、Config map 等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;甚至集群中的服务还能直接访问到本地暴露出来的接口。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Telepresence-安装&quot;&gt;Telepresence 安装&lt;/h2&gt;
&lt;p&gt;这里只说一下如何在 &lt;code&gt;macOS&lt;/code&gt; 下进行安装。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ brew cask install osxfuse  &lt;span class=&quot;comment&quot;&gt;# required by sshfs to mount the pod&#39;s filesystem&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ brew install datawire/blackbird/telepresence&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;其他平台请参考：&lt;a href=&quot;https://www.telepresence.io/reference/install&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.telepresence.io/reference/install&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果官方的安装包没有覆盖到你的平台，其实也可以从源代码安装，因为它本身就是用 &lt;code&gt;Python 3&lt;/code&gt; 写的，熟悉 &lt;code&gt;Python&lt;/code&gt; 的朋友安装这个程序应该不难，我自己就在 &lt;code&gt;CentOS 7&lt;/code&gt; 上安装成功了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/categories/kubernetes/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
      <category term="Telepresence" scheme="https://www.hi-linux.com/tags/Telepresence/"/>
    
  </entry>
  
  <entry>
    <title>一文读懂 Kubernetes 应用部署工具 Kustomize 和 Helm 的优劣势</title>
    <link href="https://www.hi-linux.com/posts/46223.html"/>
    <id>https://www.hi-linux.com/posts/46223.html</id>
    <published>2020-05-17T01:00:00.000Z</published>
    <updated>2020-05-17T08:23:22.749Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>本文将记录为什么最终没有采用 <code>Helm</code> 而是选择了 <code>Kustomize</code> 作为 <code>Kubernetes</code> 应用的部署工具。</p><h2 id="使用各种项目管理之前的情况">使用各种项目管理之前的情况</h2><p>首先说说之前的痛点。我们虽然不是个大公司，可是这代码也是越敲越多，服务也是越做越全。零零总总也有十几个项目要管理了。然后我们同样有多套部署环境：内网环境，预生产环境，生产环境。那么针对每一个环境几乎都要有一套 <code>Kubernetes</code> 的 YAML 文件，但是各个仅仅是稍有不同。</p><p>然后我们自己的 <code>CI</code> 是将构建好的 <code>Docker</code> 镜像放到 <code>Registry</code> 里面。</p><p>那么，每次更新的镜像之后就是通过人手工去部署一下，绝大多数情况就是修改一下镜像的 <code>Tag</code>，但是由于每个环境的 YAML 略有区别，那么如果我需要在不同环境切换的时候就需要来回修改这些 YAML 文件，一不小心写错了就只能怪自己手残。然而这种部署方式虽然在 <code>Kubernetes</code> 之下就是改改 YAML 就好了，但是依然感觉很是原始。</p><h2 id="希望有什么改善">希望有什么改善</h2><p>仔细想想，自己的需求就是这么几个：</p><ol><li>有一个统一的模板可以管理一个项目的 <code>Kubernetes</code> 部署结构</li><li>有某种方式可以管理不同环境之间微小的差异</li><li>每次更新基本就是修改镜像的标签然后部署，那么有没有什么简单的办法实现之，而不是让我每次都去修改 YAML 文件</li></ol><h2 id="针对-helm-的调研">针对 Helm 的调研</h2><p>既然都说 <code>Helm</code> 是 <code>Kubernetes</code> 的包管理工具，那么我就先去尝试了一下 <code>Helm</code>。</p><p><img src="https://i.loli.net/2019/08/14/4bFXOTAy3ILzWQ1.jpg" alt=""></p><blockquote><p>Helm 是 Deis 开发的一个用于 Kubernetes 应用的包管理工具，主要用来管理 Charts。有点类似于 Ubuntu 中的 APT 或 CentOS 中的 YUM。</p><p>Helm Chart 是用来封装 Kubernetes 原生应用程序的一系列 YAML 文件。可以在你部署应用的时候自定义应用程序的一些 Metadata，以便于应用程序的分发。</p><p>对于应用发布者而言，可以通过 Helm 打包应用、管理应用依赖关系、管理应用版本并发布应用到软件仓库。</p><p>对于使用者而言，使用 Helm 后不用需要编写复杂的应用部署文件，可以以简单的方式在 Kubernetes 上查找、安装、升级、回滚、卸载应用程序。</p></blockquote><p>更多 <code>Helm</code> 的介绍可参考 「<a href="https://mp.weixin.qq.com/s?__biz=MzI3MTI2NzkxMA==&amp;mid=2247486154&amp;idx=1&amp;sn=becd5dd0fadfe0b6072f5dfdc6fdf786&amp;chksm=eac52be3ddb2a2f555b8b1028db97aa3e92d0a4880b56f361e4b11cd252771147c44c08c8913&amp;token=2022032653&amp;lang=zh_CN#rd" target="_blank" rel="noopener">Helm 入门指南</a>」 一文。</p><p>简单的看了看，<code>Helm</code> 给我一种大而无当的感觉：它真的是一个做包管理工具的，复杂的 <code>Go Template</code> 体系以及需要单独存放的 <code>Charts</code> 让我感觉其更适合对标 <code>Ubuntu</code> 的 <code>APT</code> 或者 <code>macOS</code> 的 <code>Brew</code>。它更像是对外提供一个复杂的可以依据各种配置信息生成适合于不同环境的软件发布包，而不是用于我们这种轻量级的部署配置管理的。所以我就放弃使用 <code>Helm</code> 了。</p><a id="more"></a><h2 id="针对-kustomize-的调研">针对 Kustomize 的调研</h2><p>在这个时候我想起来了在之前 <code>Github Trending</code> 看到的另外一个用户做 <code>Kubernetes</code> 配置的工具 <code>Kustomize</code>。简单的说，它就是一个简化 <code>Kubernetes</code> YAML 编写的工具。它提供了两个重要的功能恰好满足了我的需求。</p><blockquote><p>Kustomize 是一个新晋选手，只有一个 CLI 工具。在 Kubernetes 1.14 之后，甚至这唯一的工具也成为 kubectl 的一部分。</p><p>Kustomize 放弃了对模板的要求，改用 Base + Overlay 的方式对应用的原始 YAML 进行派生。Overlay，顾名思义，就是覆盖。Kustomize 的 Overlay 可以在 Base 的基础上，通过对 resource、generator、transformer 等的定义，形成新的应用定义，不论 Base 还是 Overlay，都可以通过 kustomize build 生成有效的 YAML。</p></blockquote><h3 id="kustomize-的特色">Kustomize 的特色</h3><ol><li>功能简单清晰，kubectl 直接支持。</li><li>不考虑派生，仅作为应用的 YAML 组织方式也很有帮助。</li><li>自身支持插件。</li></ol><h3 id="继承和-patch">继承和 Patch</h3><p><code>Kustomize</code> 可以设置如下的层次：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── base</span><br><span class="line">│   ├── deployment.yaml</span><br><span class="line">│   ├── kustomization.yaml</span><br><span class="line">│   └── service.yaml</span><br><span class="line">└── overlays</span><br><span class="line">    └── stg</span><br><span class="line">        ├── ingress.yaml</span><br><span class="line">        └── kustomization.yaml</span><br></pre></td></tr></table></figure><p>其中 base 里保存各个环境所有的公有配置 <code>base/kustomization.yaml</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resources:</span><br><span class="line">- deployment.yaml</span><br><span class="line">- service.yaml</span><br></pre></td></tr></table></figure><p>然后在 overlays 中可以定义子环境 <code>overlays/stg/kustomization.yaml</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bases:</span><br><span class="line">- ..&#x2F;..&#x2F;base</span><br><span class="line"></span><br><span class="line">resources:</span><br><span class="line">- ingress.yaml</span><br></pre></td></tr></table></figure><p>可以看到 stg 下继承了 base 的配置，并且添加了 ingress.yaml 配置。同时，<code>Kustomize</code> 不仅仅支持文件级别的 patch，还支持对一个文件某些字段的 patch。</p><p>如下图所示，replica_count.yaml 只包含了有关 replicas 的部分即可，在执行 <code>kustomize build</code> 之后就可以将这部分覆盖默认的配置。</p><p><img src="https://i.loli.net/2019/08/14/cFlArJSXfEj67Kp.jpg" alt=""></p><h3 id="edit-命令">edit 命令</h3><p><code>Kustomize</code> 提供了一个命令行方法对镜像 Tag 进行修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kustomize edit set imagetag xxx:94c269ec</span><br></pre></td></tr></table></figure><p>如果想更方便的使用，你还可以这么做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ export NEWTAG&#x3D;94c269ec</span><br><span class="line">$ kustomize edit set imagetag xxx:$NEWTAG</span><br></pre></td></tr></table></figure><p>那么每次都去 <code>ctrl-r</code> 修改这个 <code>export</code> 然后再 <code>ctrl-r</code> 找到第二条命令执行一下就好了。虽然它还是修改了 kustomization.yaml 但是我觉得比打开编辑器改要舒服一些。</p><h2 id="kustomize-额外加分项">Kustomize 额外加分项</h2><h3 id="轻量级">轻量级</h3><p>相对 <code>Helm</code>，<code>Kustomize</code> 依然保留了对 <code>kubectl apply -f</code> 命令的支持，仅仅作为一个命令行工具；不像 <code>Helm</code> 还需要在 <code>K8s</code> 里面部署一个 <code>Tiller</code> 可谓是非常的轻量级了。</p><h3 id="对-secret-和-configmap-的支持">对 Secret 和 Configmap 的支持</h3><p>分别举例说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">bases:</span><br><span class="line">- ..&#x2F;..&#x2F;base</span><br><span class="line"></span><br><span class="line">configMapGenerator:</span><br><span class="line">- literals:</span><br><span class="line">  - STORAGE.DATASETUPLOADURL&#x3D;https:&#x2F;&#x2F;xxx&#x2F;files&#x2F;datasets</span><br><span class="line">  - STORAGE.CODEUPLOADURL&#x3D;https:&#x2F;&#x2F;xxx&#x2F;files&#x2F;codes</span><br><span class="line">  - LIVELOG_PREFIX&#x3D;https:&#x2F;&#x2F;xxx&#x2F;jobs</span><br><span class="line">  name: storage-server</span><br><span class="line"></span><br><span class="line">resources:</span><br><span class="line">- ingress.yaml</span><br><span class="line"></span><br><span class="line">imageTags:</span><br><span class="line">- name: xxx</span><br><span class="line">  newTag: dc12c4d7</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">resources:</span><br><span class="line">- deployment.yaml</span><br><span class="line"></span><br><span class="line">secretGenerator:</span><br><span class="line">- name: notification-service</span><br><span class="line">  commands:</span><br><span class="line">    SHORT_MESSAGE_API_KEY: &quot;bash -c &#39;echo -n $SHORT_MESSAGE_API_KEY&#39;&quot;</span><br><span class="line">    MG_API_KEY: &quot;bash -c &#39;echo -n $MG_API_KEY&#39;&quot;</span><br><span class="line">  type: Opaque</span><br><span class="line"></span><br><span class="line">generatorOptions:</span><br><span class="line">  disableNameSuffixHash: true</span><br></pre></td></tr></table></figure><p><code>secretGenerator</code> 和 <code>configMapGenerator</code> 可以以更灵活的方式生成 <code>configmap</code> 和 <code>secret</code>，相对来说更方便吧。</p><p>然后注意看我 <code>configMapGenerator</code> 的例子，<code>echo -n $xxx</code> 是会有问题的，一定要使用 <code>&quot;bash -c 'echo -n $SHORT_MESSAGE_API_KEY'&quot;</code> 的命令。</p><h2 id="kustomize-和-helm-的区别">Kustomize 和 Helm 的区别</h2><p>我认为他们的区别主要在工作流程上：</p><ol><li><p>Helm 的基础流程比较瀑布：定义 Chart-&gt;填充-&gt;运行，在 Chart 中没有定义的内容是无法更改的；</p></li><li><p>Kustomize 的用法比较迭代：Base 和 Overlay 都是可以独立运作的，增加新对象，或者对编写 Base 时未预料的内容进行变更，都不在话下。</p></li></ol><p>例如：我们定义了一个很基础的应用，由 Deployment + Service 组成，如果后续部署中需要完成两个变更：新建 Ingress 对象和修改镜像地址/名称/TAG。</p><ol><li>使用 Helm 你需要的步骤：</li></ol><ul><li>在 Chart 中加入对 Ingress 的定义</li><li>用变量控制 Ingress 是否进行渲染</li><li>Ingress 模板应该包含特定的主机名、注解等变量</li><li>把镜像也定义成变量</li><li>在 Values.yaml 中对这些变量进行赋值。</li></ul><ol start="2"><li>使用 Kustomize 你需要的步骤：</li></ol><ul><li>无需对 Base 进行修改</li><li>直接在新的 Overlay 中写入 Ingress Resource</li><li>使用内置的 image transformer 替换原有镜像</li></ul><h2 id="结论">结论</h2><p>要公开发布一个较为复杂的应用，编写良好的 Chart 能给用户很大帮助，用户通过对 values.yaml 的阅读，就能对这种复杂的部署产生一个较为深入的认识。</p><p>如果是常见的业务应用，因为不同部署之间的差异不大，用 Kustomize 可能会是一个更好的选择。</p><h2 id="参考文档">参考文档</h2><ol><li><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></li><li><a href="https://aisensiy.github.io/2018/11/27/helm-and-kustomize/" target="_blank" rel="noopener">https://aisensiy.github.io/2018/11/27/helm-and-kustomize/</a></li><li><a href="https://blog.fleeto.us/post/helm-vs-kustomize/" target="_blank" rel="noopener">https://blog.fleeto.us/post/helm-vs-kustomize/</a></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将记录为什么最终没有采用 &lt;code&gt;Helm&lt;/code&gt; 而是选择了 &lt;code&gt;Kustomize&lt;/code&gt; 作为 &lt;code&gt;Kubernetes&lt;/code&gt; 应用的部署工具。&lt;/p&gt;
&lt;h2 id=&quot;使用各种项目管理之前的情况&quot;&gt;使用各种项目管理之前的情况&lt;/h2&gt;
&lt;p&gt;首先说说之前的痛点。我们虽然不是个大公司，可是这代码也是越敲越多，服务也是越做越全。零零总总也有十几个项目要管理了。然后我们同样有多套部署环境：内网环境，预生产环境，生产环境。那么针对每一个环境几乎都要有一套 &lt;code&gt;Kubernetes&lt;/code&gt; 的 YAML 文件，但是各个仅仅是稍有不同。&lt;/p&gt;
&lt;p&gt;然后我们自己的 &lt;code&gt;CI&lt;/code&gt; 是将构建好的 &lt;code&gt;Docker&lt;/code&gt; 镜像放到 &lt;code&gt;Registry&lt;/code&gt; 里面。&lt;/p&gt;
&lt;p&gt;那么，每次更新的镜像之后就是通过人手工去部署一下，绝大多数情况就是修改一下镜像的 &lt;code&gt;Tag&lt;/code&gt;，但是由于每个环境的 YAML 略有区别，那么如果我需要在不同环境切换的时候就需要来回修改这些 YAML 文件，一不小心写错了就只能怪自己手残。然而这种部署方式虽然在 &lt;code&gt;Kubernetes&lt;/code&gt; 之下就是改改 YAML 就好了，但是依然感觉很是原始。&lt;/p&gt;
&lt;h2 id=&quot;希望有什么改善&quot;&gt;希望有什么改善&lt;/h2&gt;
&lt;p&gt;仔细想想，自己的需求就是这么几个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有一个统一的模板可以管理一个项目的 &lt;code&gt;Kubernetes&lt;/code&gt; 部署结构&lt;/li&gt;
&lt;li&gt;有某种方式可以管理不同环境之间微小的差异&lt;/li&gt;
&lt;li&gt;每次更新基本就是修改镜像的标签然后部署，那么有没有什么简单的办法实现之，而不是让我每次都去修改 YAML 文件&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;针对-Helm-的调研&quot;&gt;针对 Helm 的调研&lt;/h2&gt;
&lt;p&gt;既然都说 &lt;code&gt;Helm&lt;/code&gt; 是 &lt;code&gt;Kubernetes&lt;/code&gt; 的包管理工具，那么我就先去尝试了一下 &lt;code&gt;Helm&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/08/14/4bFXOTAy3ILzWQ1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Helm 是 Deis 开发的一个用于 Kubernetes 应用的包管理工具，主要用来管理 Charts。有点类似于 Ubuntu 中的 APT 或 CentOS 中的 YUM。&lt;/p&gt;
&lt;p&gt;Helm Chart 是用来封装 Kubernetes 原生应用程序的一系列 YAML 文件。可以在你部署应用的时候自定义应用程序的一些 Metadata，以便于应用程序的分发。&lt;/p&gt;
&lt;p&gt;对于应用发布者而言，可以通过 Helm 打包应用、管理应用依赖关系、管理应用版本并发布应用到软件仓库。&lt;/p&gt;
&lt;p&gt;对于使用者而言，使用 Helm 后不用需要编写复杂的应用部署文件，可以以简单的方式在 Kubernetes 上查找、安装、升级、回滚、卸载应用程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更多 &lt;code&gt;Helm&lt;/code&gt; 的介绍可参考 「&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MTI2NzkxMA==&amp;amp;mid=2247486154&amp;amp;idx=1&amp;amp;sn=becd5dd0fadfe0b6072f5dfdc6fdf786&amp;amp;chksm=eac52be3ddb2a2f555b8b1028db97aa3e92d0a4880b56f361e4b11cd252771147c44c08c8913&amp;amp;token=2022032653&amp;amp;lang=zh_CN#rd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Helm 入门指南&lt;/a&gt;」 一文。&lt;/p&gt;
&lt;p&gt;简单的看了看，&lt;code&gt;Helm&lt;/code&gt; 给我一种大而无当的感觉：它真的是一个做包管理工具的，复杂的 &lt;code&gt;Go Template&lt;/code&gt; 体系以及需要单独存放的 &lt;code&gt;Charts&lt;/code&gt; 让我感觉其更适合对标 &lt;code&gt;Ubuntu&lt;/code&gt; 的 &lt;code&gt;APT&lt;/code&gt; 或者 &lt;code&gt;macOS&lt;/code&gt; 的 &lt;code&gt;Brew&lt;/code&gt;。它更像是对外提供一个复杂的可以依据各种配置信息生成适合于不同环境的软件发布包，而不是用于我们这种轻量级的部署配置管理的。所以我就放弃使用 &lt;code&gt;Helm&lt;/code&gt; 了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/categories/kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
      <category term="Helm" scheme="https://www.hi-linux.com/tags/Helm/"/>
    
      <category term="Kustomize" scheme="https://www.hi-linux.com/tags/Kustomize/"/>
    
  </entry>
  
  <entry>
    <title>使用 Velero 快速备份和迁移 Kubernetes 集群应用以及持久化数据</title>
    <link href="https://www.hi-linux.com/posts/60858.html"/>
    <id>https://www.hi-linux.com/posts/60858.html</id>
    <published>2020-05-17T01:00:00.000Z</published>
    <updated>2020-05-17T08:44:56.284Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2 id="什么是-velero">什么是 Velero？</h2><p><img src="https://raw.githubusercontent.com/heptio/velero/master/site/docs/master/img/velero.png" alt=""></p><p><code>Heptio Velero</code> ( 以前的名字为 ARK) 是一款用于 <code>Kubernetes</code> 集群资源和持久存储卷（PV）的备份、迁移以及灾难恢复等的开源工具。</p><p><strong>Velero 特性</strong></p><p><code>Velero</code> 目前包含以下特性：</p><ul><li><p>支持 <code>Kubernetes</code> 集群数据备份和恢复</p></li><li><p>支持复制当前 <code>Kubernetes</code> 集群的资源到其它 <code>Kubernetes</code> 集群</p></li><li><p>支持复制生产环境到开发以及测试环境</p></li></ul><p><strong>Velero 组件</strong></p><p><code>Velero</code> 组件一共分两部分，分别是服务端和客户端。服务端运行在你 <code>Kubernetes</code> 的集群中，客户端是一些运行在本地的命令行的工具。</p><p><strong>Velero 支持的备份存储</strong></p><ul><li><p>AWS S3 以及兼容 S3 的存储，比如：Minio</p></li><li><p>Azure BloB 存储</p></li><li><p>Google Cloud 存储</p></li></ul><blockquote><p>项目地址：<a href="https://github.com/heptio/velero" target="_blank" rel="noopener">https://github.com/heptio/velero</a></p></blockquote><a id="more"></a><p><strong>与 Etcd 备份的区别</strong></p><p>与 Etcd 备份相比，直接备份 <code>Etcd</code> 是将集群的全部资源备份起来。而 <code>Velero</code> 就是可以对 <code>Kubernetes</code> 集群内对象级别进行备份。除了对 <code>Kubernetes</code> 集群进行整体备份外，<code>Velero</code> 还可以通过对 <code>Type</code>、<code>Namespace</code>、<code>Label</code> 等对象进行分类备份或者恢复。</p><blockquote><p>注意: 备份过程中创建的对象是不会被备份的。</p></blockquote><h2 id="velero-架构">Velero 架构</h2><h3 id="velero-备份过程">Velero 备份过程</h3><p><img src="https://qiniu.li-rui.top/velero.png" alt=""></p><ol><li><p>本地 <code>Velero</code> 客户端发送备份指令。</p></li><li><p><code>Kubernetes</code> 集群内就会创建一个 <code>Backup</code> 对象。</p></li><li><p><code>BackupController</code> 监测 <code>Backup</code> 对象并开始备份过程。</p></li><li><p><code>BackupController</code> 会向 <code>API Server</code> 查询相关数据。</p></li><li><p><code>BackupController</code> 将查询到的数据备份到远端的对象存储。</p></li></ol><p><code>Velero</code> 在 <code>Kubernetes</code> 集群中创建了很多 <code>CRD</code> 以及相关的控制器，进行备份恢复等操作实质上是对相关 <code>CRD</code> 的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Velero 在 Kubernetes 集群中创建的 CRD</span><br><span class="line">$ kubectl -n velero get crds -l component&#x3D;velero</span><br><span class="line">NAME                                CREATED AT</span><br><span class="line">backups.velero.io                   2019-08-28T03:19:56Z</span><br><span class="line">backupstoragelocations.velero.io    2019-08-28T03:19:56Z</span><br><span class="line">deletebackuprequests.velero.io      2019-08-28T03:19:56Z</span><br><span class="line">downloadrequests.velero.io          2019-08-28T03:19:56Z</span><br><span class="line">podvolumebackups.velero.io          2019-08-28T03:19:56Z</span><br><span class="line">podvolumerestores.velero.io         2019-08-28T03:19:56Z</span><br><span class="line">resticrepositories.velero.io        2019-08-28T03:19:56Z</span><br><span class="line">restores.velero.io                  2019-08-28T03:19:56Z</span><br><span class="line">schedules.velero.io                 2019-08-28T03:19:56Z</span><br><span class="line">serverstatusrequests.velero.io      2019-08-28T03:19:56Z</span><br><span class="line">volumesnapshotlocations.velero.io   2019-08-28T03:19:56Z</span><br></pre></td></tr></table></figure><p><strong>如何保证数据一致性</strong></p><p>对象存储的数据是唯一的数据源，也就是说 <code>Kubernetes</code> 集群内的控制器会检查远程的 <code>OSS</code> 存储，发现有备份就会在集群内创建相关 <code>CRD</code> 。如果发现远端存储没有当前集群内的 <code>CRD</code> 所关联的存储数据，那么就会删除当前集群内的 <code>CRD</code>。</p><p><strong>Velero 支持的后端存储</strong></p><p><code>Velero</code> 支持两种关于后端存储的 <code>CRD</code>，分别是 <code>BackupStorageLocation</code> 和 <code>VolumeSnapshotLocation</code>。</p><ol><li>BackupStorageLocation</li></ol><p><code>BackupStorageLocation</code> 主要用来定义 <code>Kubernetes</code> 集群资源的数据存放位置，也就是集群对象数据，不是 <code>PVC</code> 的数据。主要支持的后端存储是 <code>S3</code> 兼容的存储，比如：<code>Mino</code> 和阿里云 <code>OSS</code> 等。</p><ul><li>使用 Minio</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: velero.io&#x2F;v1</span><br><span class="line">kind: BackupStorageLocation</span><br><span class="line">metadata:</span><br><span class="line">  name: default</span><br><span class="line">  namespace: velero</span><br><span class="line">spec:</span><br><span class="line"># 只有 aws gcp azure</span><br><span class="line">  provider: aws</span><br><span class="line">  # 存储主要配置</span><br><span class="line">  objectStorage:</span><br><span class="line">  # bucket 的名称</span><br><span class="line">    bucket: myBucket</span><br><span class="line">    # bucket内的</span><br><span class="line">    prefix: backup</span><br><span class="line"># 不同的 provider 不同的配置</span><br><span class="line">  config:</span><br><span class="line">    #bucket地区</span><br><span class="line">    region: us-west-2</span><br><span class="line">    # s3认证信息</span><br><span class="line">    profile: &quot;default&quot;</span><br><span class="line">    # 使用 Minio 的时候加上，默认为 false</span><br><span class="line">    # AWS 的 S3 可以支持两种 Url Bucket URL</span><br><span class="line">    # 1 Path style URL： http:&#x2F;&#x2F;s3endpoint&#x2F;BUCKET</span><br><span class="line">    # 2 Virtual-hosted style URL： http:&#x2F;&#x2F;oss-cn-beijing.s3endpoint 将 Bucker Name 放到了 Host Header中</span><br><span class="line">    # 3 阿里云仅仅支持 Virtual hosted 如果下面写上 true, 阿里云 OSS 会报错 403</span><br><span class="line">    s3ForcePathStyle: &quot;false&quot;</span><br><span class="line">    # s3的地址，格式为 http:&#x2F;&#x2F;minio:9000</span><br><span class="line">    s3Url: http:&#x2F;&#x2F;minio:9000</span><br></pre></td></tr></table></figure><ul><li>使用阿里云的 OSS</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: velero.io&#x2F;v1</span><br><span class="line">kind: BackupStorageLocation</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    component: velero</span><br><span class="line">  name: default</span><br><span class="line">  namespace: velero</span><br><span class="line">spec:</span><br><span class="line">  config:</span><br><span class="line">    region: oss-cn-beijing</span><br><span class="line">    s3Url: http:&#x2F;&#x2F;oss-cn-beijing.aliyuncs.com</span><br><span class="line">    s3ForcePathStyle: &quot;false&quot;</span><br><span class="line">  objectStorage:</span><br><span class="line">    bucket: build-jenkins</span><br><span class="line">    prefix: &quot;&quot;</span><br><span class="line">  provider: aws</span><br></pre></td></tr></table></figure><ol start="2"><li>VolumeSnapshotLocation</li></ol><p>VolumeSnapshotLocation 主要用来给 PV 做快照，需要云提供商提供插件。阿里云已经提供了插件，这个需要使用 CSI 等存储机制。你也可以使用专门的备份工具 <code>Restic</code>，把 PV 数据备份到阿里云 OSS 中去(安装时需要自定义选项)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 安装时需要自定义选项</span><br><span class="line">--use-restic</span><br><span class="line"></span><br><span class="line"># 这里我们存储 PV 使用的是 OSS 也就是 BackupStorageLocation，因此不用创建 VolumeSnapshotLocation 对象</span><br><span class="line">--use-volume-snapshots&#x3D;false</span><br></pre></td></tr></table></figure><blockquote><p>Restic 是一款 GO 语言开发的数据加密备份工具，顾名思义，可以将本地数据加密后传输到指定的仓库。支持的仓库有 Local、SFTP、Aws S3、Minio、OpenStack Swift、Backblaze B2、Azure BS、Google Cloud storage、Rest Server。</p><p>项目地址：<a href="https://github.com/restic/restic" target="_blank" rel="noopener">https://github.com/restic/restic</a></p></blockquote><p>本文中，我们将使用 <code>Restic</code> 来对 <code>PV</code> 进行备份，不过现阶段通过 <code>Restic</code> 备份会有一些限制。</p><ul><li>不支持备份 hostPath</li><li>备份数据标志只能通过 Pod 来识别</li><li>单线程操作大量文件比较慢</li></ul><h2 id="安装-velero">安装 Velero</h2><p><code>Velero</code> 提供了一个命令行用来初始化服务端和进行常用的备份和恢复操作。该命令行和 <code>Kubernetes</code> 集群交互(和 Kubectl 的方式类似)，也是通过寻找 <code>kubeconfig</code> 的相关配置来访问集群。<code>kubeconfig</code> 主要是通过 <code>KUBECONFIG</code> 环境变量和 <code>~/.kube/config</code> 文件以及选项 <code>–-kubeconfig</code> 来指定。</p><p>本次安装将会使用阿里云的 OSS 和 <code>Restic</code> 来作为后端存储。</p><h3 id="安装前的准备">安装前的准备</h3><ol><li><p>开通阿里云的 OSS 并获取相关认证信息。</p></li><li><p><code>Restic</code> 需要 <code>Docker</code> 进程开通 <code>Mount</code> 传播，需要在 <code>Docker</code> 启动的 <code>Systemd</code> 文件内加入 <code>MountFlags=shared</code></p></li></ol><p>MountFlags：Docker 服务的 Mount Namespace 配置，会影响进程上下文中挂载点的信息。即服务是否会继承主机上已有挂载点，以及如果服务运行执行了挂载或卸载设备的操作，是否会真实地在主机上产生效果。可选值为 <code>shared</code>、<code>slaved</code> 或 <code>private</code> 。</p><ul><li><p>shared：服务与主机共用一个 <code>Mount Namespace</code>，继承主机挂载点，且服务挂载或卸载设备会真实地反映到主机上。</p></li><li><p>slave：服务使用独立的 <code>Mount Namespace</code>，它会继承主机挂载点，但服务对挂载点的操作只有在自己的 <code>Namespace</code> 内生效，不会反映到主机上。</p></li><li><p>private：服务使用独立的 <code>Mount Namespace</code>，它在启动时没有任何挂载点，服务对挂载点的操作也不会反映到主机上。</p></li></ul><p>更多 <code>Systemd</code> 服务管理可参考：<a href="https://blog.mallux.me/2017/02/13/systemd/" target="_blank" rel="noopener">https://blog.mallux.me/2017/02/13/systemd/</a></p><h3 id="安装-velero">安装 Velero</h3><ol><li>安装 Velero 客户端工具</li></ol><p>下载最新版 <code>Velero</code>，并解压。这里以 Linux 平台为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;github.com&#x2F;heptio&#x2F;velero&#x2F;releases&#x2F;download&#x2F;v1.1.0&#x2F;velero-v1.1.0-linux-amd64.tar.gz</span><br><span class="line">$ tar xzvf velero-v1.1.0-linux-amd64.tar.gz</span><br><span class="line">$ cp velero-v1.1.0-linux-amd64\velero \usr\local\bin</span><br></pre></td></tr></table></figure><p>更多平台可以在官方 Releases 页面下载：<a href="https://github.com/heptio/velero/releases/" target="_blank" rel="noopener">https://github.com/heptio/velero/releases/</a> 。</p><p>安装完成成后，可以加载下 <code>Shell</code> 自动完成功能，方便使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ velero completion bash</span><br></pre></td></tr></table></figure><ol start="2"><li>启动 Velero 服务端</li></ol><p>2.1 准备 credentials-velero 文件</p><p>credentials-velero 文件内容为阿里云 OSS 的认证信息，会用于在集群中创建密钥。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vim credentials-velero</span><br><span class="line"></span><br><span class="line"># default 和 BackupStorageLocation 对象中 profile 字段的值要对应</span><br><span class="line">[default]</span><br><span class="line">aws_access_key_id &#x3D; xxx</span><br><span class="line">aws_secret_access_key &#x3D; xxx</span><br></pre></td></tr></table></figure><p>2.2 启动 Velero 服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ velero install \</span><br><span class="line">    --image gcr.azk8s.cn&#x2F;heptio-images&#x2F;velero:v1.1.0 \</span><br><span class="line">    --provider aws \</span><br><span class="line">    --bucket xxx \</span><br><span class="line">    --prefix xxx \</span><br><span class="line">    --namespace velero \</span><br><span class="line">    --secret-file .&#x2F;credentials-velero \</span><br><span class="line">    --velero-pod-cpu-request 200m \</span><br><span class="line">    --velero-pod-mem-request 200Mi \</span><br><span class="line">    --velero-pod-cpu-limit 200m \</span><br><span class="line">    --velero-pod-mem-limit 200Mi \</span><br><span class="line">    --use-volume-snapshots&#x3D;false \</span><br><span class="line">    --use-restic \</span><br><span class="line">    --restic-pod-cpu-request 200m \</span><br><span class="line">    --restic-pod-mem-request 200Mi \</span><br><span class="line">    --restic-pod-cpu-limit 200m \</span><br><span class="line">    --restic-pod-mem-limit 200Mi \</span><br><span class="line">    --backup-location-config region&#x3D;oss-cn-beijing,s3ForcePathStyle&#x3D;&quot;false&quot;,s3Url&#x3D;http:&#x2F;&#x2F;oss-cn-beijing.aliyuncs.com</span><br></pre></td></tr></table></figure><h2 id="使用-velero-进行数据备份和恢复">使用 Velero 进行数据备份和恢复</h2><h3 id="给-pod-加注解">给 Pod 加注解</h3><p>使用 <code>Restic</code> 给带有 <code>PVC</code> 的 <code>Pod</code> 进行备份，必须先给 <code>Pod</code> 加上注解。</p><p>先看一看基本语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n YOUR_POD_NAMESPACE annotate pod&#x2F;YOUR_POD_NAME backup.velero.io&#x2F;backup-volumes&#x3D;YOUR_VOLUME_NAME_1,YOUR_VOLUME_NAME_2,...</span><br></pre></td></tr></table></figure><p>在来看一个实例，这里使用一个 <code>Elasticsearch</code> 的 <code>Pod</code> 为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n elasticsearch annotate pod elasticsearch-master-0 backup.velero.io&#x2F;backup-volumes&#x3D;elasticsearch-master</span><br><span class="line">$ kubectl get pod -n elasticsearch elasticsearch-master-0 -o jsonpath&#x3D;&#39;&#123;.metadata.annotations&#125;&#39;</span><br><span class="line">map[backup.velero.io&#x2F;backup-volumes:elasticsearch-master]</span><br></pre></td></tr></table></figure><h3 id="创建备份数据">创建备份数据</h3><ol><li>基本命令语法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ velero create backup NAME [flags]</span><br><span class="line"></span><br><span class="line"># 剔除 namespace</span><br><span class="line">--exclude-namespaces stringArray                  namespaces to exclude from the backup</span><br><span class="line"></span><br><span class="line"># 剔除资源类型</span><br><span class="line">--exclude-resources stringArray                   resources to exclude from the backup, formatted as resource.group, such as storageclasses.storage.k8s.io</span><br><span class="line"></span><br><span class="line"># 包含集群资源类型 </span><br><span class="line">--include-cluster-resources optionalBool[&#x3D;true]   include cluster-scoped resources in the backup</span><br><span class="line"></span><br><span class="line"># 包含 namespace</span><br><span class="line">--include-namespaces stringArray                  namespaces to include in the backup (use &#39;*&#39; for all namespaces) (default *)</span><br><span class="line"></span><br><span class="line"># 包含 namespace 资源类型</span><br><span class="line">--include-resources stringArray                   resources to include in the backup, formatted as resource.group, such as storageclasses.storage.k8s.io (use &#39;*&#39; for all resources)</span><br><span class="line"></span><br><span class="line"># 给这个备份加上标签</span><br><span class="line">--labels mapStringString                          labels to apply to the backup</span><br><span class="line">-o, --output string                               Output display format. For create commands, display the object but do not send it to the server. Valid formats are &#39;table&#39;, &#39;json&#39;, and &#39;yaml&#39;. &#39;table&#39; is not valid for the install command.</span><br><span class="line"></span><br><span class="line"># 对指定标签的资源进行备份</span><br><span class="line">-l, --selector labelSelector                      only back up resources matching this label selector (default &lt;none&gt;)</span><br><span class="line"></span><br><span class="line"># 对 PV 创建快照</span><br><span class="line">--snapshot-volumes optionalBool[&#x3D;true]            take snapshots of PersistentVolumes as part of the backup</span><br><span class="line"></span><br><span class="line"># 指定备份的位置</span><br><span class="line">--storage-location string                         location in which to store the backup</span><br><span class="line"></span><br><span class="line"># 备份数据多久删掉</span><br><span class="line"></span><br><span class="line">--ttl duration                                    how long before the backup can be garbage collected (default 720h0m0s)</span><br><span class="line"></span><br><span class="line"># 指定快照的位置，也就是哪一个公有云驱动</span><br><span class="line">--volume-snapshot-locations strings               list of locations (at most one per provider) where volume snapshots should be stored</span><br></pre></td></tr></table></figure><ol start="2"><li>创建一个备份</li></ol><p>这里同样以上面提到的 <code>elasticsearch</code> 为例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ velero create backup es --include-namespaces&#x3D;elasticsearch</span><br></pre></td></tr></table></figure><blockquote><p>注 Restic 会使用 Path Style，而阿里云禁止 Path style 需要使用 Virtual-Hosted，所以暂时备份没有办法备份 PV 到 OSS。</p></blockquote><p>备份创建成功后会创建一个名为 <code>backups.velero.io</code> 的 CRD 对象。</p><h3 id="恢复一个备份数据">恢复一个备份数据</h3><ol><li>基本命令语法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ velero restore create [RESTORE_NAME] [--from-backup BACKUP_NAME | --from-schedule SCHEDULE_NAME] [flags]</span><br><span class="line"></span><br><span class="line">      --exclude-namespaces stringArray                  namespaces to exclude from the restore</span><br><span class="line">      --exclude-resources stringArray                   resources to exclude from the restore, formatted as resource.group, such as storageclasses.storage.k8s.io</span><br><span class="line">      --from-backup string                              backup to restore from</span><br><span class="line">      --from-schedule string                            schedule to restore from</span><br><span class="line">  -h, --help                                            help for create</span><br><span class="line">      --include-cluster-resources optionalBool[&#x3D;true]   include cluster-scoped resources in the restore</span><br><span class="line">      --include-namespaces stringArray                  namespaces to include in the restore (use &#39;*&#39; for all namespaces) (default *)</span><br><span class="line">      --include-resources stringArray                   resources to include in the restore, formatted as resource.group, such as storageclasses.storage.k8s.io (use &#39;*&#39; for all resources)</span><br><span class="line">      --label-columns stringArray                       a comma-separated list of labels to be displayed as columns</span><br><span class="line">      --labels mapStringString                          labels to apply to the restore</span><br><span class="line">      --namespace-mappings mapStringString              namespace mappings from name in the backup to desired restored name in the form src1:dst1,src2:dst2,...</span><br><span class="line">  -o, --output string                                   Output display format. For create commands, display the object but do not send it to the server. Valid formats are &#39;table&#39;, &#39;json&#39;, and &#39;yaml&#39;. &#39;table&#39; is not valid for the install command.</span><br><span class="line">      --restore-volumes optionalBool[&#x3D;true]             whether to restore volumes from snapshots</span><br><span class="line">  -l, --selector labelSelector                          only restore resources matching this label selector (default &lt;none&gt;)</span><br><span class="line">      --show-labels                                     show labels in the last column</span><br><span class="line">  -w, --wait</span><br></pre></td></tr></table></figure><ol start="2"><li>恢复一个备份数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ velero restore create back --from-backup es</span><br></pre></td></tr></table></figure><p>恢复成功后，同样也会创建一个 <code>restores.velero.io</code> CRD 对象。</p><h2 id="使用-velero-进行集群数据迁移">使用 Velero 进行集群数据迁移</h2><p>首先，在集群 1 中创建备份（默认 TTL 是 30 天，你可以使用 --ttl 来修改）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ velero backup create &lt;BACKUP-NAME&gt;</span><br></pre></td></tr></table></figure><p>然后，为集群 2 配置 BackupStorageLocations 和 VolumeSnapshotLocations，指向与集群 1 相同的备份和快照路径，并确保 BackupStorageLocations 是只读的（使用 --access-mode=ReadOnly）。接下来，稍微等一会（默认的同步时间为 1 分钟），等待 Backup 对象创建成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># The default sync interval is 1 minute, so make sure to wait before checking.</span><br><span class="line"># You can configure this interval with the --backup-sync-period flag to the Velero server.</span><br><span class="line">$ velero backup describe &lt;BACKUP-NAME&gt;</span><br></pre></td></tr></table></figure><p>最后，执行数据恢复：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ velero restore create --from-backup &lt;BACKUP-NAME&gt;</span><br><span class="line">$ velero restore get</span><br><span class="line">$ velero restore describe &lt;RESTORE-NAME-FROM-GET-COMMAND&gt;</span><br></pre></td></tr></table></figure><blockquote><p>本文在 「集群备份工具 Velero 使用 」一文基础上修改而成。</p></blockquote><h2 id="参考文档">参考文档</h2><ol><li><p><a href="http://www.google.com" target="_blank" rel="noopener">http://www.google.com</a></p></li><li><p><a href="http://t.cn/AiRQWtIe" target="_blank" rel="noopener">http://t.cn/AiRQWtIe</a></p></li><li><p><a href="https://velero.io/docs/master/restic/" target="_blank" rel="noopener">https://velero.io/docs/master/restic/</a></p></li><li><p><a href="https://www.cnblogs.com/rongfengliang/p/11095330.html" target="_blank" rel="noopener">https://www.cnblogs.com/rongfengliang/p/11095330.html</a></p></li><li><p><a href="https://feisky.gitbooks.io/kubernetes/practice/backup.html" target="_blank" rel="noopener">https://feisky.gitbooks.io/kubernetes/practice/backup.html</a></p></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-Velero？&quot;&gt;什么是 Velero？&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/heptio/velero/master/site/docs/master/img/velero.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Heptio Velero&lt;/code&gt; ( 以前的名字为 ARK) 是一款用于 &lt;code&gt;Kubernetes&lt;/code&gt; 集群资源和持久存储卷（PV）的备份、迁移以及灾难恢复等的开源工具。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Velero 特性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Velero&lt;/code&gt; 目前包含以下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;支持 &lt;code&gt;Kubernetes&lt;/code&gt; 集群数据备份和恢复&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持复制当前 &lt;code&gt;Kubernetes&lt;/code&gt; 集群的资源到其它 &lt;code&gt;Kubernetes&lt;/code&gt; 集群&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持复制生产环境到开发以及测试环境&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Velero 组件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Velero&lt;/code&gt; 组件一共分两部分，分别是服务端和客户端。服务端运行在你 &lt;code&gt;Kubernetes&lt;/code&gt; 的集群中，客户端是一些运行在本地的命令行的工具。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Velero 支持的备份存储&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AWS S3 以及兼容 S3 的存储，比如：Minio&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Azure BloB 存储&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google Cloud 存储&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/heptio/velero&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/heptio/velero&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/categories/kubernetes/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
      <category term="Velero" scheme="https://www.hi-linux.com/tags/Velero/"/>
    
  </entry>
  
  <entry>
    <title>巧用 SSLH 实现 HTTPS 和 SSH 共享同一端口</title>
    <link href="https://www.hi-linux.com/posts/26290.html"/>
    <id>https://www.hi-linux.com/posts/26290.html</id>
    <published>2020-05-17T01:00:00.000Z</published>
    <updated>2020-05-17T08:44:56.292Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>一些互联网服务提供商或公司可能已经阻止了大多数网络端口，并且只允许使用少数特定端口（如：80 和 443）来进行服务访问，以加强其安全性。在这种情况下，如果我们需要将更多的服务暴露在公网上，我们该怎么办呢？这时你别无选择，只有为多个程序共用相同的端口，比如：共用 HTTPS 的端口 443。</p><p>那怎么样才能实现不同程序复用相同端口呢，这时你就需要 SSLH 这款神器。</p><blockquote><p>SSLH 是一款采用 C 语言编写的开源端口复用软件，目前支持 HTTP、SSL、SSH、OpenVPN、Tinc、XMPP 等多种协议识别。它主要运行于 *nix 环境，源代码托管在 GitHub 上。</p></blockquote><p>项目地址：<a href="https://github.com/yrutschle/sslh" target="_blank" rel="noopener">https://github.com/yrutschle/sslh</a></p><p>更简单地说，SSLH 允许我们在 Linux 系统上的同一端口上运行多个程序/服务。因此，您可以用同一端口来同时使用两种服务。如果你遇到大多数端口被防火墙阻止的情况，SSLH 就可以帮你派上大用场。下面我们就来看一个 SSL 和 SSH 同时复用同一端口的实例。</p><h2 id="安装-sslh">安装 SSLH</h2><p>SSLH 适用于大多数 Linux 发行版，因此您可以使用默认包管理器进行安装。</p><ul><li>在 Debian / Ubuntu 上</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install sslh</span><br></pre></td></tr></table></figure><ul><li>在 RHEL / CentOS 上</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 需要先安装 EPEL 仓库</span><br><span class="line">$ sudo yum install epel-release</span><br><span class="line">$ sudo yum install sslh</span><br></pre></td></tr></table></figure><h2 id="配置-web-服务器">配置 Web 服务器</h2><p>首先，我们需要安装一个 Web 服务器，并且配置它接受 HTTPS 请求。确保这个服务只监听在 localhost，当然也可以配置它监听在非标准端口，如：2443。这里我们以 Nginx 为例：</p><h3 id="安装-nginx">安装 Nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># RHEL &#x2F; CentOS </span><br><span class="line">$ yum install nginx</span><br><span class="line"></span><br><span class="line"># Debian &#x2F; Ubuntu</span><br><span class="line">$ apt install nginx</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="配置-nginx">配置 Nginx</h3><p>修改配置让其只监听 localhost 接口，即：<code>127.0.0.1:443</code> 或 <code>localhost：443</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vim nginx.conf</span><br><span class="line"></span><br><span class="line"># 找到如下行内容</span><br><span class="line">listen 443 ssl;</span><br><span class="line"></span><br><span class="line"># 并将其更改为以下内容</span><br><span class="line">listen 127.0.0.1:443 ssl;</span><br></pre></td></tr></table></figure><h2 id="配置-sslh">配置 SSLH</h2><p>接下来，我们需要修改 SSLH 的配置文件的如下几处。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi &#x2F;etc&#x2F;default&#x2F;sslh</span><br><span class="line"></span><br><span class="line"># 找到以下行：</span><br><span class="line">Run&#x3D;no</span><br><span class="line"></span><br><span class="line"># 并将其更改为：</span><br><span class="line">Run&#x3D;yes</span><br><span class="line"></span><br><span class="line"># 修改以下行以允许 SSLH 在所有可用接口上侦听端口 443。</span><br><span class="line">DAEMON_OPTS&#x3D;&quot;--user sslh --listen 0.0.0.0:443 --ssh 127.0.0.1:22 --ssl 127.0.0.1:443 --pidfile &#x2F;var&#x2F;run&#x2F;sslh&#x2F;sslh.pid&quot;</span><br></pre></td></tr></table></figure><p>修改完成后，记得保存并关闭配置文件。这里在简单说下几个选项的含义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-–user sslh : 用此指定的用户名运行 SSLH。</span><br><span class="line">-–listen 0.0.0.0:443 : 指定 SSLH 在所有接口上监听 443 端口。</span><br><span class="line">-–sshs 127.0.0.1:22 : 将 SSH 流量转发到 localhost 上的 22 端口。</span><br><span class="line">-–ssl 127.0.0.1:443 : 将 HTTPS&#x2F;SSL 流量转发到 localhost 上的 443 端口。</span><br></pre></td></tr></table></figure><h2 id="启动-sslh-服务">启动 SSLH 服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl enable sslh</span><br><span class="line">$ sudo systemctl start sslh</span><br></pre></td></tr></table></figure><h2 id="测试-sslh-服务">测试 SSLH 服务</h2><p>验证 SSLH 守护程序是否正在侦听 443 端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef | grep sslh </span><br><span class="line">sslh 2746 1 0 15:51 ? 00:00:00 &#x2F;usr&#x2F;sbin&#x2F;sslh --foreground --user sslh --listen 0.0.0.0 443 --ssh 127.0.0.1 22 --ssl 127.0.0.1 443 --pidfile &#x2F;var&#x2F;run&#x2F;sslh&#x2F;sslh.pid</span><br><span class="line">sslh 2747 2746 0 15:51 ? 00:00:00 &#x2F;usr&#x2F;sbin&#x2F;sslh --foreground --user sslh --listen 0.0.0.0 443 --ssh 127.0.0.1 22 --ssl 127.0.0.1 443 --pidfile &#x2F;var&#x2F;run&#x2F;sslh&#x2F;sslh.pid</span><br><span class="line">sk 2754 1432 0 15:51 pts&#x2F;0 00:00:00 grep --color&#x3D;auto sslh</span><br></pre></td></tr></table></figure><p>最后，我们来验证下使用 443 端口进行 SSH 和 HTTPS 访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -p 443 sk@192.168.43.2</span><br><span class="line">sk@192.168.43.2&#39;s password: </span><br><span class="line">Welcome to Ubuntu 16.04.1 LTS (GNU&#x2F;Linux 4.4.0-89-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation: https:&#x2F;&#x2F;help.ubuntu.com</span><br><span class="line"> * Management: https:&#x2F;&#x2F;landscape.canonical.com</span><br><span class="line"> * Support: https:&#x2F;&#x2F;ubuntu.com&#x2F;advantage</span><br><span class="line"></span><br><span class="line">Last login: Mon Aug 14 15:52:20 2017 from 192.168.43.192</span><br><span class="line">sk@ubuntuserver:~$</span><br></pre></td></tr></table></figure><p>同时使用浏览器访问 <code>https://SERVER_NAME</code> 这个地址也是可以正确访问的。</p><p>至此，我们就验证了 SSLH 确实可以在同一端口提供多种服务。</p><h2 id="参考文档">参考文档</h2><ol><li><a href="https://linux.cn/article-11247-1.html" target="_blank" rel="noopener">https://linux.cn/article-11247-1.html</a></li><li><a href="https://www.ostechnix.com/sslh-share-port-https-ssh/" target="_blank" rel="noopener">https://www.ostechnix.com/sslh-share-port-https-ssh/</a></li><li><a href="https://huataihuang.gitbooks.io/cloud-atlas/service/ssh/sslh_multi_service_in_one_port.html" target="_blank" rel="noopener">https://huataihuang.gitbooks.io/cloud-atlas/service/ssh/sslh_multi_service_in_one_port.html</a></li><li><a href="https://it.baiked.com/linux/linuxcommon/4525.html" target="_blank" rel="noopener">https://it.baiked.com/linux/linuxcommon/4525.html</a></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些互联网服务提供商或公司可能已经阻止了大多数网络端口，并且只允许使用少数特定端口（如：80 和 443）来进行服务访问，以加强其安全性。在这种情况下，如果我们需要将更多的服务暴露在公网上，我们该怎么办呢？这时你别无选择，只有为多个程序共用相同的端口，比如：共用 HTTPS 的端口 443。&lt;/p&gt;
&lt;p&gt;那怎么样才能实现不同程序复用相同端口呢，这时你就需要 SSLH 这款神器。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SSLH 是一款采用 C 语言编写的开源端口复用软件，目前支持 HTTP、SSL、SSH、OpenVPN、Tinc、XMPP 等多种协议识别。它主要运行于 *nix 环境，源代码托管在 GitHub 上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/yrutschle/sslh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/yrutschle/sslh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更简单地说，SSLH 允许我们在 Linux 系统上的同一端口上运行多个程序/服务。因此，您可以用同一端口来同时使用两种服务。如果你遇到大多数端口被防火墙阻止的情况，SSLH 就可以帮你派上大用场。下面我们就来看一个 SSL 和 SSH 同时复用同一端口的实例。&lt;/p&gt;
&lt;h2 id=&quot;安装-SSLH&quot;&gt;安装 SSLH&lt;/h2&gt;
&lt;p&gt;SSLH 适用于大多数 Linux 发行版，因此您可以使用默认包管理器进行安装。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Debian / Ubuntu 上&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get install sslh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;在 RHEL / CentOS 上&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 需要先安装 EPEL 仓库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo yum install epel-release&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo yum install sslh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;配置-Web-服务器&quot;&gt;配置 Web 服务器&lt;/h2&gt;
&lt;p&gt;首先，我们需要安装一个 Web 服务器，并且配置它接受 HTTPS 请求。确保这个服务只监听在 localhost，当然也可以配置它监听在非标准端口，如：2443。这里我们以 Nginx 为例：&lt;/p&gt;
&lt;h3 id=&quot;安装-Nginx&quot;&gt;安装 Nginx&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# RHEL &amp;#x2F; CentOS &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yum install nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Debian &amp;#x2F; Ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ apt install nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="HTTPS" scheme="https://www.hi-linux.com/tags/HTTPS/"/>
    
  </entry>
  
</feed>
