<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>奇妙的 Linux 世界</title>
  
  <subtitle>种一棵树最好的时间是十年前，其次是现在。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.hi-linux.com/"/>
  <updated>2021-04-22T01:29:09.383Z</updated>
  <id>https://www.hi-linux.com/</id>
  
  <author>
    <name>Mike</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>推荐一款 Kubernetes 应用性能分析工具 Kubectl Flame</title>
    <link href="https://www.hi-linux.com/posts/55077.html"/>
    <id>https://www.hi-linux.com/posts/55077.html</id>
    <published>2021-04-22T01:00:00.000Z</published>
    <updated>2021-04-22T01:29:09.383Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2><span id="什么是性能分析">什么是性能分析？</span></h2><p>性能分析是分析应用程序性能来改进代码质量的常用方法，最流行的可视化性能分析方法是生成火焰图。</p><p><img src="https://img.hi-linux.com/staticfile/640-2021-03-12-ogeYMt.jpg" alt></p><p>基于 Spring 框架的 Java 应用的火焰图</p><p>y轴是堆栈深度，x轴跨越样本总体。每个矩形都是一个函数，其中宽度显示它出现的频率，从左到右的排序并不重要 (堆栈按字母顺序排序)。</p><h2><span id="kubernetes-上的性能分析">Kubernetes 上的性能分析</span></h2><p>性能分析是一项较为复杂的任务，大多数探查器有两个主要问题：</p><ul><li>需要修改应用程序，通常可以通过将标志添加到执行命令或将一些性能分析库导入代码中来实现。</li><li>由于在分析过程中会严重影响性能，因此通常避免在生产环境中进行性能分析。</li></ul><p>选择正确的探查器可能会解决这些问题，但是这需要仔细去进行研究，并且通常取决于编程语言和操作系统。</p><p>在 Kubernetes 集群中运行的应用程序上执行分析时，会变得更加困难。需要部署一个包含配置文件修改的新容器镜像，而不是当前正在运行的容器。此外，当应用程序重新启动时，某些性能问题可能会消失，这就使得调试变得困难。</p><a id="more"></a><h2><span id="kubectl-flame">Kubectl flame</span></h2><p>Kubectl Flame 是一个 kubectl 插件，可以以较低的开销生成火焰图🔥来分析应用程序性能，无需进行任何应用程序修改或停机。</p><blockquote><p>项目仓库地址：<a href="https://github.com/VerizonMedia/kubectl-flame" target="_blank" rel="noopener">https://github.com/VerizonMedia/kubectl-flame</a></p></blockquote><h3><span id="安装">安装</span></h3><p>可以通过 Krew 来安装 <code>kubectl flame</code> 插件，一旦安装了 Krew，就可以通过如下命令进行安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl krew install flame</span><br></pre></td></tr></table></figure><h3><span id="使用要求">使用要求</span></h3><ul><li>支持的语言：Go、Java（任何基于JVM的语言）、Python 和 Ruby</li><li>使用 Docker 作为容器运行时的 Kubernetes 集群（已在 GKE，EKS 和 AKS 上测试）</li></ul><h3><span id="运行原理">运行原理</span></h3><p><code>kubectl-flame</code> 通过在与目标容器相同的节点上启动一个探查器来启动性能分析，大多数探查器将与目标容器共享一些资源：比如通过将 <code>hostPID</code> 设置为 true 来启用 PID 命名空间共享，通过挂载 <code>/var/lib/docker</code> 并查询 overlayFS 来启用文件系统共享。</p><p>在后台<code>kubectl-flame</code>使用 async-profiler 来为 Java 应用程序生成火焰图，通过共享<code>/tmp</code>文件夹与目标 JVM 进行交互，Golang 则支持基于 ebpf 分析，Python 支持基于 py-spy 进行分析。</p><p><img src="https://img.hi-linux.com/staticfile/640-20210312141618823-2021-03-12-Tdwboq.jpg" alt></p><p>kubectl flame 概述</p><h3><span id="使用实例">使用实例</span></h3><ol><li>分析 Kubernetes Pod</li></ol><p>分析 Java 应用 mypod 1分钟，并在将火焰图保存到 <code>/tmp/flamegraph.svg</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl flame mypod -t 1m --lang java -f &#x2F;tmp&#x2F;flamegraph.svg</span><br></pre></td></tr></table></figure><ol start="2"><li>分析基于 alpine 的容器</li></ol><p>在基于 alpine 的容器中分析 Java 应用程序需要使用 <code>--alpine</code> 标志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl flame mypod -t 1m -f &#x2F;tmp&#x2F;flamegraph.svg --lang Java --alpine</span><br></pre></td></tr></table></figure><blockquote><p><em>注意</em>：仅 Java 应用程序需要此 <code>--alpine</code> 标志，而 Go 分析则不需要该标志。</p></blockquote><ol start="3"><li>分析 sidecar 容器</li></ol><p>包含多个容器的 Pod 需要将目标容器指定为参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl flame mypod -t 1m --lang go -f &#x2F;tmp&#x2F;flamegraph.svg mycontainer</span><br></pre></td></tr></table></figure><blockquote><p>本文转载自：「 k8s技术圈 」，原文：<a href="http://t.cn/A6t8p02V%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">http://t.cn/A6t8p02V，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是性能分析？&quot;&gt;什么是性能分析？&lt;/h2&gt;
&lt;p&gt;性能分析是分析应用程序性能来改进代码质量的常用方法，最流行的可视化性能分析方法是生成火焰图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.hi-linux.com/staticfile/640-2021-03-12-ogeYMt.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;基于 Spring 框架的 Java 应用的火焰图&lt;/p&gt;
&lt;p&gt;y轴是堆栈深度，x轴跨越样本总体。每个矩形都是一个函数，其中宽度显示它出现的频率，从左到右的排序并不重要 (堆栈按字母顺序排序)。&lt;/p&gt;
&lt;h2 id=&quot;Kubernetes-上的性能分析&quot;&gt;Kubernetes 上的性能分析&lt;/h2&gt;
&lt;p&gt;性能分析是一项较为复杂的任务，大多数探查器有两个主要问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要修改应用程序，通常可以通过将标志添加到执行命令或将一些性能分析库导入代码中来实现。&lt;/li&gt;
&lt;li&gt;由于在分析过程中会严重影响性能，因此通常避免在生产环境中进行性能分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择正确的探查器可能会解决这些问题，但是这需要仔细去进行研究，并且通常取决于编程语言和操作系统。&lt;/p&gt;
&lt;p&gt;在 Kubernetes 集群中运行的应用程序上执行分析时，会变得更加困难。需要部署一个包含配置文件修改的新容器镜像，而不是当前正在运行的容器。此外，当应用程序重新启动时，某些性能问题可能会消失，这就使得调试变得困难。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/categories/kubernetes/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>三种不同场景下的 Kubernetes 服务调试方法</title>
    <link href="https://www.hi-linux.com/posts/21833.html"/>
    <id>https://www.hi-linux.com/posts/21833.html</id>
    <published>2021-04-19T01:00:00.000Z</published>
    <updated>2021-04-19T03:41:05.883Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>在开发、调试为生产环境下 K8s service 中的应用程序时，常常需要一些工具或者命令。本文介绍了三种不同场景下对应的解决方案以及工具。</p><blockquote><ul><li>作者：Erkan Erol</li><li>翻译：Bach（才云）</li><li>校对：木子（才云）</li></ul></blockquote><h2><span id="基本设置">基本设置</span></h2><p>以下解释了场景的基本设置：</p><p><img src="https://img.hi-linux.com/staticfile/640-20210317135843521-2021-03-17-e2IA9c.jpg" alt></p><p>我们有 3 个 service，service-front 通过入口暴露给外网。service-front 的后端服务是 service-middle，service-middle 的后端是 service-back。通信是通过 K8s service 完成的。</p><p>以下是安装该设置的必要命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create ns service-debug</span><br><span class="line">$ kubectl -n service-debug run service-back --image&#x3D;erkanerol&#x2F;service-back:v1 --port&#x3D;8080 --expose&#x3D;true --labels&#x3D;&quot;app&#x3D;back&quot;</span><br><span class="line">$ kubectl -n service-debug run service-middle --image&#x3D;erkanerol&#x2F;service-middle:v1 --port&#x3D;8081 --expose&#x3D;true --labels&#x3D;&quot;app&#x3D;middle&quot;</span><br><span class="line">$ kubectl -n service-debug run service-front --image&#x3D;erkanerol&#x2F;service-front:v1 --port&#x3D;8082 --expose&#x3D;true --labels&#x3D;&quot;app&#x3D;front&quot;</span><br></pre></td></tr></table></figure><blockquote><p>这是这些服务的源代码：<a href="https://github.com/erkanerol/service-examples-for-blog" target="_blank" rel="noopener">https://github.com/erkanerol/service-examples-for-blog</a></p></blockquote><a id="more"></a><h2><span id="工具1kubectl-port-forward">工具1：kubectl port-forward</span></h2><h3><span id="场景">场景：</span></h3><p>作为开发人员，我希望 service-back 可以直接发送一些请求，并在不影响其他 service 的情况下查看结果。</p><h3><span id="问题">问题：</span></h3><p>service-back 不会暴露在外网，所以我们不能直接向其发送请求。</p><h3><span id="解决方案">解决方案：</span></h3><p>使用 kubectl port-forward，可以打开从本地计算机到 service-back 集群中的隧道。</p><blockquote><p>可参考：<a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#port-forward" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#port-forward</a></p></blockquote><h3><span id="步骤">步骤：</span></h3><p>在终端中运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n service-debug port-forward service&#x2F;service-back 8080:8080</span><br><span class="line">Forwarding from 127.0.0.1:8080 -&gt; 8080</span><br><span class="line">Forwarding from [::1]:8080 -&gt; 8080</span><br></pre></td></tr></table></figure><p>然后在另一个终端中运行以下 curl 命令，以查看是否可以访问 service-back：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl localhost:8080</span><br><span class="line">Timestamp from back:1614508193</span><br></pre></td></tr></table></figure><h3><span id="实现原理">实现原理：</span></h3><p><img src="https://img.hi-linux.com/staticfile/640-20210317134229552-2021-03-17-ENK3sw.jpg" alt></p><p>kubectl 启动一个监听在 localhost:8080 的进程。它监控该端口并建立与 api-server 的连接，该连接将请求转发到 service-back。</p><h2><span id="工具2kubefwd">工具2：kubefwd</span></h2><h3><span id="场景">场景：</span></h3><p>作为开发人员，我希望在本地计算机上运行 service-front，以便在 IDE 中设置断点来调试应用程序。</p><h3><span id="问题">问题：</span></h3><p>service-front 被设计为，在 Kubernetes 中运行并可以通过 K8s service 访问 service-middle。service 名称是硬编码的，或者很难配置的，又或者我们懒得在本地计算机上模拟依赖项。</p><h3><span id="解决方案">解决方案：</span></h3><p>kubefwd 是解决该问题的有用工具。它可以执行批量端口转发并管理本地计算机中的 DNS 记录。</p><blockquote><p>可参考：<a href="https://github.com/txn2/kubefwd" target="_blank" rel="noopener">https://github.com/txn2/kubefwd</a></p></blockquote><h3><span id="步骤">步骤：</span></h3><p>在终端中运行以下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo KUBECONFIG&#x3D;$KUBECONFIG kubefwd svc -n service-debug -l app&#x3D;middle</span><br></pre></td></tr></table></figure><p>请注意，kubefwd 需要 root 特权，并且必须使用 sudo 运行。事先设置 KUBECONFIG 变量，不需要任何主文件夹引用。</p><p>在另一个终端中，在本地计算机上运行 front 应用程序。注意，我们也可以在调试模式下运行它并设置断点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd &#x2F;tmp</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;erkanerol&#x2F;service-examples-for-blog.git</span><br><span class="line">$ cd service-examples-for-blog&#x2F;front</span><br><span class="line">$ go run main.go</span><br></pre></td></tr></table></figure><p>再在另一个终端中，向 front 应用发送请求，以查看 front 应用在本地提供服务，并且可以在集群中访问 service-middle。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl localhost:8082</span><br><span class="line">Response from service middle:&#39;Response from service back:&#39;Timestamp from back:1614513901&#39;&#39;</span><br></pre></td></tr></table></figure><h3><span id="实现原理">实现原理：</span></h3><p><img src="https://img.hi-linux.com/staticfile/640-20210317135852855-2021-03-17-VCN08D.jpg" alt></p><p>从 kubefwd 的日志中可以看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">INFO[14:07:38] &#39;cat &#x2F;etc&#x2F;hosts&#39; to see all host entries.</span><br><span class="line">INFO[14:07:38] Loaded hosts file &#x2F;etc&#x2F;hosts</span><br><span class="line">INFO[14:07:38] HostFile management: Original hosts backup already exists at &#x2F;root&#x2F;hosts.original</span><br><span class="line">...</span><br><span class="line">INFO[14:07:38] Port-Forward: 127.1.27.1 service-middle:8081 to pod service-middle:8081</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>它启动一个进程，监听在 127.1.27.1:8081，并配置了 service-middle 的 /etc/hosts：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;etc&#x2F;hosts |grep service-middle</span><br><span class="line">127.1.27.1       service-middle.default service-middle.default.svc service-middle.default.svc.cluster.local service-middle.default.minikube service-middle.default.svc.minikube service-middle.default.svc.cluster.minikube service-middle service-middle.service-debug service-middle.service-debug.svc service-middle.service-debug.svc.cluster.local service-middle.service-debug.minikube service-middle.service-debug.svc.minikube service-middle.service-debug.svc.cluster.minikube</span><br></pre></td></tr></table></figure><p>然后，本地 front 应用程序可以像访问 K8s 集群一样访问 service-middle，而无需其他额外的工作。</p><h2><span id="工具3telepresence">工具3：telepresence</span></h2><h3><span id="场景">场景：</span></h3><p>作为开发人员，我希望在本地计算机上运行 service-middle，以便可以在 IDE 中设置断点来调试应用程序。</p><h3><span id="问题">问题：</span></h3><p>service-middle 设计为可在 Kubernetes 中运行，可通过 K8s service 访问 service-back。另外，它的 service-front 正在 K8s 上运行。这些 service 在本地计算机上不可用，而且我们也很难在本地计算机上模拟这些环境。</p><h3><span id="解决方案">解决方案：</span></h3><p>telepresence 是解决此问题的有用工具。</p><blockquote><p>可参考：<a href="https://www.telepresence.io/" target="_blank" rel="noopener">https://www.telepresence.io/</a></p></blockquote><h3><span id="步骤">步骤：</span></h3><p>首先从 K8s 集群中删除 service-middle。我们在本地运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n service-debug delete service service-middle --ignore-not-found&#x3D;true</span><br><span class="line">$ kubectl -n service-debug delete pod service-middle --ignore-not-found&#x3D;true</span><br></pre></td></tr></table></figure><p>为 service-middle 运行 telepresence：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  telepresence --namespace service-debug --new-deployment service-middle --expose 8081</span><br></pre></td></tr></table></figure><p>在另一个终端中，在本地计算机上运行 middle 应用程序。注意，我们也可以在调试模式下运行并设置断点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd &#x2F;tmp</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;erkanerol&#x2F;service-examples-for-blog.git</span><br><span class="line">$ cd service-examples-for-blog&#x2F;middle</span><br><span class="line">$ go run main.go</span><br></pre></td></tr></table></figure><p>再在另一个终端中，运行以下命令以通过集群中的临时 Pod 发送请求至 service-front ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n service-debug run curl -it  --rm&#x3D;true --image&#x3D;curlimages&#x2F;curl --restart&#x3D;Never -- http:&#x2F;&#x2F;service-front:8082Response from service middle:&#39;</span><br><span class="line">Response from service back:&#39;Timestamp from back:1614517363&#39;&#39;pod &quot;curl&quot; deleted</span><br></pre></td></tr></table></figure><p>要注意，这里的请求将转到 K8s 中的 service-front，K8s 将请求发送到本地计算机中的 service-middle，本地计算机再将请求发送到集群中的 service-back。</p><h3><span id="实现原理">实现原理：</span></h3><p><img src="https://img.hi-linux.com/staticfile/640-20210317135905079-2021-03-17-LvNbRd.jpg" alt></p><p>实际上，telepresence 将 proxy、fake agent 部署到集群中，并通过该代理在本地环境和集群之间打开一条双向通道。这样一来，我们便可以在本地计算机上运行 middle service，而无需调整 consumers、dependent service。</p><blockquote><p>telepresence 工作原理的详细说明，详见：<a href="https://www.telepresence.io/discussion/how-it-works" target="_blank" rel="noopener">https://www.telepresence.io/discussion/how-it-works</a></p></blockquote><h2><span id="小结">小结</span></h2><p>如果我们需要在不暴露 service 的情况下访问 service，kubectl port-forward 就足够了。</p><p>如果我们需要在本地运行 service 进行调试，并且 service 需要访问 K8s 上的其他 service ，kubefwd 可以发挥作用。它管理着本地计算机中的 DNS 记录，并为 service 依赖性打开从计算机到集群的单向通道。</p><p>如果我们需要在本地运行 service 进行调试，并且应用程序在集群中有一些使用方，那就使用telepresence。它可以打开双向网络通道，并将请求从集群转发至本地实例。</p><p>原文链接：<a href="https://erkanerol.github.io/post/debugging-k8s-services/" target="_blank" rel="noopener">https://erkanerol.github.io/post/debugging-k8s-services/</a></p><blockquote><p>本文转载自：「 K8sMeetup」，原文：<a href="http://t.cn/A6t1ABFC" target="_blank" rel="noopener">http://t.cn/A6t1ABFC</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发、调试为生产环境下 K8s service 中的应用程序时，常常需要一些工具或者命令。本文介绍了三种不同场景下对应的解决方案以及工具。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;作者：Erkan Erol&lt;/li&gt;
&lt;li&gt;翻译：Bach（才云）&lt;/li&gt;
&lt;li&gt;校对：木子（才云）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;基本设置&quot;&gt;基本设置&lt;/h2&gt;
&lt;p&gt;以下解释了场景的基本设置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.hi-linux.com/staticfile/640-20210317135843521-2021-03-17-e2IA9c.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们有 3 个 service，service-front 通过入口暴露给外网。service-front 的后端服务是 service-middle，service-middle 的后端是 service-back。通信是通过 K8s service 完成的。&lt;/p&gt;
&lt;p&gt;以下是安装该设置的必要命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl create ns service-debug&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl -n service-debug run service-back --image&amp;#x3D;erkanerol&amp;#x2F;service-back:v1 --port&amp;#x3D;8080 --expose&amp;#x3D;true --labels&amp;#x3D;&amp;quot;app&amp;#x3D;back&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl -n service-debug run service-middle --image&amp;#x3D;erkanerol&amp;#x2F;service-middle:v1 --port&amp;#x3D;8081 --expose&amp;#x3D;true --labels&amp;#x3D;&amp;quot;app&amp;#x3D;middle&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl -n service-debug run service-front --image&amp;#x3D;erkanerol&amp;#x2F;service-front:v1 --port&amp;#x3D;8082 --expose&amp;#x3D;true --labels&amp;#x3D;&amp;quot;app&amp;#x3D;front&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;这是这些服务的源代码：&lt;a href=&quot;https://github.com/erkanerol/service-examples-for-blog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/erkanerol/service-examples-for-blog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/categories/kubernetes/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>微软再推 Rust 语言免费中文教程，更香了！</title>
    <link href="https://www.hi-linux.com/posts/42443.html"/>
    <id>https://www.hi-linux.com/posts/42443.html</id>
    <published>2021-04-19T01:00:00.000Z</published>
    <updated>2021-04-20T05:03:32.420Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>在过去的几个月，Amazon、Facebook、微软以及谷歌等科技巨头正疯狂吸纳人才市场上的 Rust 语言程序员。 Rust 人才的动向，也标志着该语言社区在发展进程中迎来了新的转折点。</p><p>这场 “抢人大战”，源自各方着力筹备的 Rust 团队组建计划。凭借着出色的内存效率、速度与安全性，Rust 语言近年来的优势地位愈发明显。事实上，Rust 正越来越被视为 Go 以及 C++/C 等传统编程语言的现代替代选项。</p><p>各大厂商开始使用 Rust 语言支持从网站到开发者工具、再到电子游戏的多种应用场景。Facebook 一直在使用 Rust 语言构建 Diem 币（即原 Libra 币），Amazon 则使用 Rust 为其无服务器平台 Lambda（此平台允许开发者在无需管理底层服务器的前提下，轻松运行并扩展开发代码）等产品编写代码。</p><blockquote><p>Rust 语言是一种高效、可靠的通用高级语言。其高效不仅限于开发效率，它的执行效率也是令人称赞的，是一种少有的兼顾开发效率和执行效率的语言。</p><p>Rust 语言由 Mozilla 开发，最早发布于 2014 年 9 月。Rust 的编译器是在 MIT License 和 Apache License 2.0 双重协议声明下的免费开源软件。</p></blockquote><a id="more"></a><p>简而言之，就是一句话，Rust 编程语言越来越受欢迎了，如果你最近也正想学习这门语言，那真是来对地方了，微软最近开放了一个 Rust 教程，最关键的是还有中文版。</p><p><img src="https://img.hi-linux.com/staticfile/image-20210420101730237-2021-04-20-RwaIqE.png" alt="image-20210420101730237"></p><p>通过这份教程， 你将打下使用 Rust 构建快速、高效的程序所需的知识基础。</p><p>在此学习路径下，你将：</p><ul><li><p>安装编写第一批 Rust 代码所需的工具。</p></li><li><p>了解 Rust 中的基本概念。</p></li><li><p>了解如何处理错误。</p></li><li><p>在 Rust 中管理内存。</p></li><li><p>使用泛型类型和特征。</p></li><li><p>为包和箱设置模块。</p></li><li><p>编写并运行自动测试。</p></li><li><p>创建命令行程序。</p></li></ul><p>下面，我们一起来看看部分学习模块：</p><h3><span id="rust-入门">Rust 入门</span></h3><p><img src="https://img.hi-linux.com/staticfile/image-20210420102532317-2021-04-20-IiJ0AY.png" alt="image-20210420102532317"></p><p>在此模块中，了解如何开始使用 Rust - 设置环境、编写程序和使用 Cargo 生成系统。</p><h3><span id="了解-rust-中的常见概念">了解 Rust 中的常见概念</span></h3><p><img src="https://img.hi-linux.com/staticfile/image-20210420103101356-2021-04-20-R9GuUV.png" alt="image-20210420103101356"></p><p>这一模块中你将了解 Rust 的基础知识。 浏览变量、数据类型、结构、枚举、函数、索引、哈希映射和流控制。</p><h3><span id="在-rust-中处理错误">在 Rust 中处理错误</span></h3><p><img src="https://img.hi-linux.com/staticfile/image-20210420103246334-2021-04-20-GtOzn4.png" alt="image-20210420103246334"></p><p>在本模块中，你将了解在 Rust 中处理错误的方法。</p><h3><span id="了解-rust-如何管理内存">了解 Rust 如何管理内存</span></h3><p><img src="https://img.hi-linux.com/staticfile/image-20210420103303241-2021-04-20-6FbjVS.png" alt="image-20210420103303241"></p><p>这一模块了解让 Rust 如此与众不同的特性：所有权和借用。</p><p>看完前几章的介绍，不知道你是否对 Rust 语言感兴趣呢？欲查看完整课程的地址，可在公众号后台回复：「微软Rust」获取 。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在过去的几个月，Amazon、Facebook、微软以及谷歌等科技巨头正疯狂吸纳人才市场上的 Rust 语言程序员。 Rust 人才的动向，也标志着该语言社区在发展进程中迎来了新的转折点。&lt;/p&gt;
&lt;p&gt;这场 “抢人大战”，源自各方着力筹备的 Rust 团队组建计划。凭借着出色的内存效率、速度与安全性，Rust 语言近年来的优势地位愈发明显。事实上，Rust 正越来越被视为 Go 以及 C++/C 等传统编程语言的现代替代选项。&lt;/p&gt;
&lt;p&gt;各大厂商开始使用 Rust 语言支持从网站到开发者工具、再到电子游戏的多种应用场景。Facebook 一直在使用 Rust 语言构建 Diem 币（即原 Libra 币），Amazon 则使用 Rust 为其无服务器平台 Lambda（此平台允许开发者在无需管理底层服务器的前提下，轻松运行并扩展开发代码）等产品编写代码。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust 语言是一种高效、可靠的通用高级语言。其高效不仅限于开发效率，它的执行效率也是令人称赞的，是一种少有的兼顾开发效率和执行效率的语言。&lt;/p&gt;
&lt;p&gt;Rust 语言由 Mozilla 开发，最早发布于 2014 年 9 月。Rust 的编译器是在 MIT License 和 Apache License 2.0 双重协议声明下的免费开源软件。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Rust" scheme="https://www.hi-linux.com/categories/Rust/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="微软" scheme="https://www.hi-linux.com/tags/%E5%BE%AE%E8%BD%AF/"/>
    
      <category term="Rust" scheme="https://www.hi-linux.com/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>巧用 Docker Compose 管理 GPU 资源</title>
    <link href="https://www.hi-linux.com/posts/14919.html"/>
    <id>https://www.hi-linux.com/posts/14919.html</id>
    <published>2021-04-16T01:00:00.000Z</published>
    <updated>2021-04-16T03:17:43.760Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><blockquote><p><strong>在容器中使用 GPU 一直是使用 Compose 的一个痛点！</strong></p></blockquote><p>在面向 <code>AI</code> 开发的大趋势下，容器化可以将环境无缝迁移，将配置环境的成本无限降低。但是，在容器中配置 <code>CUDA</code> 并运行 <code>TensorFlow</code> 一段时间内确实是个比较麻烦的时候，所以我们这里就介绍和使用它。</p><ul><li><a href="https://docs.docker.com/compose/gpu-support/" target="_blank" rel="noopener">Enabling GPU access with Compose</a></li><li><a href="https://docs.docker.com/config/containers/resource_constraints/#gpu" target="_blank" rel="noopener">Runtime options with Memory, CPUs, and GPUs</a></li><li><a href="https://github.com/compose-spec/compose-spec/blob/master/spec.md" target="_blank" rel="noopener">The Compose Specification</a></li><li><a href="https://github.com/compose-spec/compose-spec/blob/master/deploy.md#devices" target="_blank" rel="noopener">The Compose Specification - Deployment support</a></li><li><a href="https://github.com/compose-spec/compose-spec/blob/master/build.md" target="_blank" rel="noopener">The Compose Specification - Build support</a></li></ul><p><strong>在 Compose 中使用 GPU 资源</strong></p><ul><li>如果我们部署 <code>Docker</code> 服务的的主机上正确安装并设置了其对应配置，且该主机上恰恰也有对应的 <code>GPU</code> 显卡，那么就可以在 <code>Compose</code> 中来定义和设置这些 <code>GPU</code> 显卡了。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要安装的配置</span></span><br><span class="line">$ apt-get install nvidia-container-runtime</span><br></pre></td></tr></table></figure><ul><li><strong>旧版本 &lt;= 19.03</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># runtime</span></span><br><span class="line">$ docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi</span><br></pre></td></tr></table></figure><ul><li><strong>新版本 &gt;= 19.03</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># with --gpus</span></span><br><span class="line">$ docker run -it --rm --gpus all ubuntu nvidia-smi</span><br><span class="line"></span><br><span class="line"><span class="comment"># use device</span></span><br><span class="line">$ docker run -it --rm --gpus \</span><br><span class="line">    device=GPU-3a23c669-1f69-c64e-cf85-44e9b07e7a2a \</span><br><span class="line">    ubuntu nvidia-smi</span><br><span class="line"></span><br><span class="line"><span class="comment"># specific gpu</span></span><br><span class="line">$ docker run -it --rm --gpus <span class="string">'"device=0,2"'</span> ubuntu nvidia-smi</span><br><span class="line"></span><br><span class="line"><span class="comment"># set nvidia capabilities</span></span><br><span class="line">$ docker run --gpus <span class="string">'all,capabilities=utility'</span> --rm ubuntu nvidia-smi</span><br></pre></td></tr></table></figure><ul><li>对应 <code>Compose</code> 工具的老版本(<code>v2.3</code>)配置文件来说的话，想要在部署的服务当中使用 <code>GPU</code> 显卡资源的话，就必须使用 <strong><code>runtime</code></strong> 参数来进行配置才可以。虽然可以作为运行时为容器提供 <code>GPU</code> 的访问和使用，但是在该模式下并不允许对 <code>GPU</code> 设备的特定属性进行控制。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nvidia/cuda:10.2-base</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">nvidia-smi</span></span><br><span class="line">    <span class="attr">runtime:</span> <span class="string">nvidia</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NVIDIA_VISIBLE_DEVICES=all</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>在 <code>Compose v1.28.0+</code> 的版本中，使用 <code>Compose Specification</code> 的配置文件写法，并提供了一些可以更细粒度的控制 <code>GPU</code> 资源的配置属性可被使用，因此可以在启动的时候来精确表达我们的需求。咳咳咳，那这里我们就一起看看吧！</strong></p></blockquote><ul><li><code>capabilities</code> - 必须字段<ul><li>指定需要支持的功能；可以配置多个不同功能；必须配置的字段</li><li><code>man 7 capabilities</code></li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">reservations:</span></span><br><span class="line">      <span class="attr">devices:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">capabilities:</span> <span class="string">["gpu"]</span></span><br></pre></td></tr></table></figure><ul><li><code>count</code><ul><li>指定需要使用的<code>GPU</code>数量；值为<code>int</code>类型；与<code>device_ids</code>字段二选一</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">reservations:</span></span><br><span class="line">      <span class="attr">devices:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">capabilities:</span> <span class="string">["tpu"]</span></span><br><span class="line">          <span class="attr">count:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li><code>device_ids</code><ul><li>指定使用<code>GPU</code>设备<code>ID</code>值；与<code>count</code>字段二选一</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">reservations:</span></span><br><span class="line">      <span class="attr">devices:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">capabilities:</span> <span class="string">["gpu"]</span></span><br><span class="line">          <span class="attr">device_ids:</span> <span class="string">["0",</span> <span class="string">"3"</span><span class="string">]</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">reservations:</span></span><br><span class="line">      <span class="attr">devices:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">capabilities:</span> <span class="string">["gpu"]</span></span><br><span class="line">          <span class="attr">device_ids:</span> <span class="string">["GPU-f123d1c9-26bb-df9b-1c23-4a731f61d8c7"]</span></span><br></pre></td></tr></table></figure><ul><li><code>driver</code><ul><li>指定<code>GPU</code>设备驱动类型</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">reservations:</span></span><br><span class="line">      <span class="attr">devices:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">capabilities:</span> <span class="string">["nvidia-compute"]</span></span><br><span class="line">          <span class="attr">driver:</span> <span class="string">nvidia</span></span><br></pre></td></tr></table></figure><ul><li><code>options</code><ul><li>指定驱动程序的特定选项</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">reservations:</span></span><br><span class="line">      <span class="attr">devices:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">capabilities:</span> <span class="string">["gpu"]</span></span><br><span class="line">          <span class="attr">driver:</span> <span class="string">gpuvendor</span></span><br><span class="line">          <span class="attr">options:</span></span><br><span class="line">            <span class="attr">virtualization:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>咳咳咳，看也看了，说也说了，那我们就简单的编写一个示例文件，让启动的 <code>cuda</code> 容器服务来使用一个 <code>GPU</code> 设备资源，并运行得到如下输出。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nvidia/cuda:10.2-base</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">nvidia-smi</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">5s</span></span><br><span class="line">        <span class="attr">max_attempts:</span> <span class="number">3</span></span><br><span class="line">        <span class="attr">window:</span> <span class="string">120s</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">"0.50"</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">50M</span></span><br><span class="line">        <span class="attr">reservations:</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">"0.25"</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">20M</span></span><br><span class="line">          <span class="attr">devices:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">driver:</span> <span class="string">nvidia</span></span><br><span class="line">              <span class="attr">count:</span> <span class="number">1</span></span><br><span class="line">              <span class="attr">capabilities:</span> <span class="string">[gpu,</span> <span class="string">utility]</span></span><br><span class="line">      <span class="attr">update_config:</span></span><br><span class="line">        <span class="attr">parallelism:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">10s</span></span><br><span class="line">        <span class="attr">order:</span> <span class="string">stop-first</span></span><br></pre></td></tr></table></figure><ul><li>注意这里，如果设置 <code>count: 2</code> 的话，就会下面的输出中看到两块显卡设置的信息。如果，我们这里均未设置 <code>count</code> 或 <code>device_ids</code> 字段的话，则默认情况下将主机上所有 <code>GPU</code> 一同使用。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前台直接运行</span></span><br><span class="line">$ docker-compose up</span><br><span class="line">Creating network <span class="string">"gpu_default"</span> with the default driver</span><br><span class="line">Creating gpu_test_1 ... <span class="keyword">done</span></span><br><span class="line">Attaching to gpu_test_1</span><br><span class="line">test_1  | +-----------------------------------------------------------------------------+</span><br><span class="line">test_1  | | NVIDIA-SMI 450.80.02    Driver Version: 450.80.02    CUDA Version: 11.1     |</span><br><span class="line">test_1  | |-------------------------------+----------------------+----------------------+</span><br><span class="line">test_1  | | GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">test_1  | | Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">test_1  | |                               |                      |               MIG M. |</span><br><span class="line">test_1  | |===============================+======================+======================|</span><br><span class="line">test_1  | |   0  Tesla T4            On   | 00000000:00:1E.0 Off |                    0 |</span><br><span class="line">test_1  | | N/A   23C    P8     9W /  70W |      0MiB / 15109MiB |      0%      Default |</span><br><span class="line">test_1  | |                               |                      |                  N/A |</span><br><span class="line">test_1  | +-------------------------------+----------------------+----------------------+</span><br><span class="line">test_1  |</span><br><span class="line">test_1  | +-----------------------------------------------------------------------------+</span><br><span class="line">test_1  | | Processes:                                                                  |</span><br><span class="line">test_1  | |  GPU   GI   CI        PID   Type   Process name                  GPU Memory |</span><br><span class="line">test_1  | |        ID   ID                                                   Usage      |</span><br><span class="line">test_1  | |=============================================================================|</span><br><span class="line">test_1  | |  No running processes found                                                 |</span><br><span class="line">test_1  | +-----------------------------------------------------------------------------+</span><br><span class="line">gpu_test_1 exited with code 0</span><br></pre></td></tr></table></figure><ul><li>当然，如果设置了 <code>count</code> 或 <code>device_ids</code> 字段的话，就可以在容器里面的程序中使用多块显卡资源了。可以通过以下部署配置文件来进行验证和使用。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tensorflow/tensorflow:latest-gpu</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">python</span> <span class="string">-c</span> <span class="string">"import tensorflow as tf;tf.test.gpu_device_name()"</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">reservations:</span></span><br><span class="line">          <span class="attr">devices:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">driver:</span> <span class="string">nvidia</span></span><br><span class="line">              <span class="attr">device_ids:</span> <span class="string">["0",</span> <span class="string">"3"</span><span class="string">]</span></span><br><span class="line">              <span class="attr">capabilities:</span> <span class="string">[gpu]</span></span><br></pre></td></tr></table></figure><ul><li>运行结果，如下所示，我们可以看到两块显卡均可以被使用到。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前台直接运行</span></span><br><span class="line">$ docker-compose up</span><br><span class="line">...</span><br><span class="line">Created TensorFlow device (/device:GPU:0 with 13970 MB memory -&gt; physical GPU (device: 0, name: Tesla T4, pci bus id: 0000:00:1b.0, compute capability: 7.5)</span><br><span class="line">...</span><br><span class="line">Created TensorFlow device (/device:GPU:1 with 13970 MB memory) -&gt; physical GPU (device: 1, name: Tesla T4, pci bus id: 0000:00:1e.0, compute capability: 7.5)</span><br><span class="line">...</span><br><span class="line">gpu_test_1 exited with code 0</span><br></pre></td></tr></table></figure><blockquote><p>本文转载自：「 Ecsape 的博客 」，原文：<a href="http://t.cn/A6c6d4l1" target="_blank" rel="noopener">http://t.cn/A6c6d4l1</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;div id=&quot;vip-container&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;在容器中使用 GPU 一直是使用 Compose 的一个痛点！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在面向 &lt;code&gt;AI&lt;/code&gt;
        
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.hi-linux.com/categories/docker/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>重磅 | AWS 免费开源增强版 Elasticsearch 分支 OpenSearch</title>
    <link href="https://www.hi-linux.com/posts/50892.html"/>
    <id>https://www.hi-linux.com/posts/50892.html</id>
    <published>2021-04-15T01:00:00.000Z</published>
    <updated>2021-04-15T01:36:05.433Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>今年 1 月，开发 Elasticsearch 和 Kibana 的公司 Elastic 宣布更改许可证，新版本将不再使用 Apache 2.0 许可证，而是使用 Elastic 许可证和服务器端公共许可证（SSPL），此举是为了禁止类似亚马逊等云服务商使用它的软件作为一种服务提供给客户。但同时，新的许可证不再符合开源许可证的定义，意味着 Elasticsearch 和 Kibana 不再是开源软件了。</p><p>然后，亚马逊宣布要创建它的 Elasticsearch 分支 OpenSearch 和 Kibana 分支 OpenSearch Dashboards。</p><p>近日 AWS 宣布创建 “真正” 开源的 Elasticsearch 分支有了下文。 OpenSearch 的源代码托管在 GitHub 上。亚马逊表示以后所有的更新将通过 OpenSearch 项目发布。包括红帽、SAP、Capital One 和 <a href="http://Logz.io" target="_blank" rel="noopener">Logz.io</a> 等在内的多个组织对 AWS 创建 OpenSearch 项目表示了支持。</p><blockquote><p>OpenSearch 项目由 OpenSearch (fork Elasticsearch 7.10.2) 和 OpenSearch Dashboards (fork Kibana 7.10.2) 组成，包括企业安全、告警、机器学习、SQL、索引状态管理等功能。OpenSearch 项目中的所有软件均采用了 Apache License 2.0 开源许可协议。</p></blockquote><p><strong>OpenSearch 项目仓库地址</strong></p><ol><li>OpenSearch</li></ol><p>项目地址：<a href="https://github.com/opensearch-project/OpenSearch" target="_blank" rel="noopener">https://github.com/opensearch-project/OpenSearch</a></p><ol start="2"><li>OpenSearch Dashboards</li></ol><p>项目地址：<a href="https://github.com/opensearch-project/OpenSearch-Dashboards" target="_blank" rel="noopener">https://github.com/opensearch-project/OpenSearch-Dashboards</a></p><p>AWS 介绍称，他们推出的 OpenSearch 删除了 Elasticsearch 中受 Elastic 商业许可证限制的功能、代码和商标，以兼容 Apache License 2.0，自称这是每个人都可以构建和创新的基础，任何人无需签署 CLA (Contributor License Agreement) 即可为项目贡献代码。</p><p>此外，AWS 现有的 Amazon Elasticsearch Service 被重命名为 Amazon OpenSearch Service，AWS 表示更名不会影响正在运营的业务，Amazon OpenSearch Service 会提供一系列可供部署和运行的开源引擎，包括当前可用的 19 个版本的 Elasticsearch（7.9 和更早版本、近期推出的 7.10）以及新版本的 OpenSearch。</p><p>AWS 还说到会继续通过安全性和错误修复来支持和维护采用 Apache License 2.0 的 Elasticsearch，并将通过 OpenSearch 和 OpenSearch Dashboards 提供所有新功能。Amazon OpenSearch Service API 将与现有服务 API 向后兼容。此外，AWS 会提供从现有 Elasticsearch 6.x 和 7.x 托管集群迁移至 OpenSearch 的无缝升级路径。</p><p>AWS 表示，当前版本的代码尚处于 Alpha 阶段，未经彻底测试并且不适合用于生产环境。他们计划在接下来的几周内发布 Beta 版本，有望在 2021 年中期发布稳定版并投入生产环境使用。</p><blockquote><p>本文转载自：「 开源中国 」，原文：<a href="http://t.cn/A6cxOsxg" target="_blank" rel="noopener">http://t.cn/A6cxOsxg</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;今年 1 月，开发 Elasticsearch 和 Kibana 的公司 Elastic 宣布更改许可证，新版本将不再使用 Apache 2.0 许可证，而是使用 Elastic
        
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="https://www.hi-linux.com/categories/Elasticsearch/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Elasticsearch" scheme="https://www.hi-linux.com/tags/Elasticsearch/"/>
    
      <category term="快迅" scheme="https://www.hi-linux.com/tags/%E5%BF%AB%E8%BF%85/"/>
    
  </entry>
  
  <entry>
    <title>全链路分布式跟踪系统 Apache SkyWalking 入门教程</title>
    <link href="https://www.hi-linux.com/posts/13634.html"/>
    <id>https://www.hi-linux.com/posts/13634.html</id>
    <published>2021-04-09T01:00:00.000Z</published>
    <updated>2021-04-09T03:40:18.073Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2><span id="先决条件">先决条件</span></h2><p>确保有一套运行正常的 Kubernetes 集群，本文默认为使用 Elasticsearch7 作为后端存储；**如果想把 ES 放到 Kubernetes 集群里那么还得确保集群配置了正确的存储，譬如默认的 StorageClass 可用等。**本文为了方便起见(其实就是穷)采用外部 ES 存储且使用 docker-compose 单节点部署，所以不需要集群的分布式存储；最后确保你本地的 <code>kubectl</code> 能够正常运行。</p><h2><span id="基本架构">基本架构</span></h2><p>Skywalking 在大体上(不准确)分为四大部分:</p><ul><li>oap-server: 无状态服务后端，主要负责处理核心逻辑，可以简单理解为一个标准 java web 项目。</li><li>skywalking-ui: UI 前端，通过 graphql 连接 oap-server 提供用户查询等 UI 展示。</li><li>agent: 各种语言实现的 agent 负责抓取应用运行数据并上报给 oap-server，核心的指标上报来源。</li><li>DB: 各种数据库，负责存储 Skywalking 的指标数据，生产环境推荐 ES、TiDB、MySQL。</li></ul><a id="more"></a><h2><span id="部署-skywalking">部署 Skywalking</span></h2><h3><span id="31-部署-elasticsearch">3.1、部署 Elasticsearch</span></h3><p>Elasticsearch 当前使用 7.9.2 版本，由于只是初次尝试还处于测试阶段所以直接 docker-compose 启动一个单点:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 如果有需要可以进入 es 容器使用以下命令设置密码</span><br><span class="line"># elasticsearch-setup-passwords interactive</span><br><span class="line">version: &#39;3.8&#39;</span><br><span class="line">services:</span><br><span class="line">  elasticsearch:</span><br><span class="line">    container_name: elasticsearch</span><br><span class="line">    image: docker.elastic.co&#x2F;elasticsearch&#x2F;elasticsearch:7.9.2</span><br><span class="line">    restart: always</span><br><span class="line">    network_mode: &quot;host&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - data:&#x2F;data&#x2F;elasticsearch</span><br><span class="line">    environment:</span><br><span class="line">      - http.host&#x3D;172.16.11.43</span><br><span class="line">      - http.port&#x3D;9200</span><br><span class="line">      - transport.tcp.port&#x3D;172.16.11.43</span><br><span class="line">      - transport.tcp.port&#x3D;9300</span><br><span class="line">      - cluster.name&#x3D;skyes</span><br><span class="line">      - node.name&#x3D;skyes</span><br><span class="line">      - discovery.type&#x3D;single-node</span><br><span class="line">      - xpack.security.enabled&#x3D;true</span><br><span class="line">      - xpack.monitoring.enabled&#x3D;true</span><br><span class="line">      - &quot;ES_JAVA_OPTS&#x3D;-Xms4096m -Xmx7168m&quot;</span><br><span class="line">volumes:</span><br><span class="line">  data:</span><br></pre></td></tr></table></figure><h3><span id="32-安装-helm">3.2、安装 Helm</span></h3><p>由于 Skywalking 官方给出的 Kubernetes 安装方式为 Helm 安装，所以需要本地先安装 Helm；Helm 安装方式非常简单，根据官方文档<strong>在网络没问题的情况下</strong>直接执行以下命令即可:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;helm&#x2F;helm&#x2F;master&#x2F;scripts&#x2F;get-helm-3 | bash</span><br></pre></td></tr></table></figure><p>如果网络不是那么 OK 的情况下请参考<a href="https://helm.sh/docs/intro/install/" target="_blank" rel="noopener">官方文档</a>的包管理器方式安装或直接下载二进制文件安装。</p><h3><span id="33-克隆仓库初始化-helm">3.3、克隆仓库初始化 Helm</span></h3><p>Helm 部署之前按照<a href="https://github.com/apache/skywalking-kubernetes" target="_blank" rel="noopener">官方文档</a>提示需要先初始化 Helm 仓库:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># clone helm 仓库</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;skywalking-kubernetes</span><br><span class="line">cd skywalking-kubernetes&#x2F;chart</span><br><span class="line"></span><br><span class="line"># 即使使用外部 ES 也要添加这个 repo，否则会导致依赖错误</span><br><span class="line">helm repo add elastic https:&#x2F;&#x2F;helm.elastic.co</span><br><span class="line">helm dep up skywalking</span><br><span class="line"></span><br><span class="line"># change the release name according to your scenario</span><br><span class="line">export SKYWALKING_RELEASE_NAME&#x3D;skywalking</span><br><span class="line"># 如果修改了 NAMESPACE，后续部署则需要先通过 kuebctl 创建该 NAMESPACE</span><br><span class="line"># change the namespace according to your scenario</span><br><span class="line">export SKYWALKING_RELEASE_NAMESPACE&#x3D;default</span><br></pre></td></tr></table></figure><h3><span id="34-安装-skywalking">3.4、安装 Skywalking</span></h3><p>Helm 初始化完成后需要自行调整配置文件，配置 oap-server 使用外部 ES</p><p><strong>values-my-es.yaml</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">oap:</span><br><span class="line">  image:</span><br><span class="line">    tag: 8.1.0-es7      # Set the right tag according to the existing Elasticsearch version</span><br><span class="line">  storageType: elasticsearch7</span><br><span class="line"></span><br><span class="line">ui:</span><br><span class="line">  image:</span><br><span class="line">    tag: 8.1.0</span><br><span class="line"></span><br><span class="line">elasticsearch:</span><br><span class="line">  enabled: false</span><br><span class="line">  config:               # For users of an existing elasticsearch cluster,takes effect when &#96;elasticsearch.enabled&#96; is false</span><br><span class="line">    host: 172.16.11.43</span><br><span class="line">    port:</span><br><span class="line">      http: 9200</span><br><span class="line">    user: &quot;elastic&quot;</span><br><span class="line">    password: &quot;elastic&quot;</span><br></pre></td></tr></table></figure><p>调整好配置后只需要使用 Helm 安装即可:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helm install &quot;$&#123;SKYWALKING_RELEASE_NAME&#125;&quot; skywalking -n &quot;$&#123;SKYWALKING_RELEASE_NAMESPACE&#125;&quot; \</span><br><span class="line">  -f .&#x2F;skywalking&#x2F;values-my-es.yaml --set oap.image.tag&#x3D;8.2.0-es7 --set ui.image.tag&#x3D;8.2.0</span><br></pre></td></tr></table></figure><p>如果安装出错或者其他问题可以使用以下命令进行卸载:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm uninstall &quot;$&#123;SKYWALKING_RELEASE_NAME&#125;&quot; skywalking -n &quot;$&#123;SKYWALKING_RELEASE_NAMESPACE&#125;&quot;</span><br></pre></td></tr></table></figure><p>安装成功后应该在 <code>${SKYWALKING_RELEASE_NAMESPACE}</code> 下看到相关 Pod:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">k8s21 ➜  ~ kubectl get pod -o wide -n skywalking</span><br><span class="line">NAME                              READY   STATUS      RESTARTS   AGE   IP             NODE    NOMINATED NODE   READINESS GATES</span><br><span class="line">skywalking-es-init-xw6tx          0&#x2F;1     Completed   0          32h   10.30.0.62     k8s21   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">skywalking-oap-64c65cc6bb-lnq82   1&#x2F;1     Running     0          32h   10.30.0.61     k8s21   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">skywalking-oap-64c65cc6bb-q7zj8   1&#x2F;1     Running     0          32h   10.30.32.103   k8s22   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">skywalking-ui-695ff9d69d-wqcm8    1&#x2F;1     Running     0          32h   10.30.161.42   k8s25   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p>在确认 Pod 都运行正常后可以通过 <code>kubectl port-forward</code> 命令来查看 UI 界面:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 执行以下命令，访问 127.0.0.1:8080 即可访问到 skywalking-ui</span><br><span class="line">kubectl port-forward -n $&#123;SKYWALKING_RELEASE_NAMESPACE&#125; service&#x2F;skywalking-ui 8080:80</span><br></pre></td></tr></table></figure><p><strong>在生产环境可能需要配置正确的 Ingress 或者 NodePort 等方式暴露 skywalking-ui 服务，具体取决于生产集群服务暴露方式，请自行调整。</strong></p><h2><span id="agent-配置">Agent 配置</span></h2><blockquote><p>由于目前仅在 Java 项目上测试，所以以下 Agent 配置仅仅对 Java 项目有效。</p></blockquote><p>Skywalking 在简单使用时不需要侵入代码，对于 jar 包启动的项目只需要在启动时增加 <code>-javaagent</code> 选项即可。</p><h3><span id="41-agent-获取">4.1、Agent 获取</span></h3><p><code>javaagent</code> 可以通过下载对应的 skywalking release 安装包获取，将此 <code>agent</code> 目录解压到任意位置，稍后将添加到 java 启动参数。</p><p><a href="https://cdn.oss.link/markdown/y1q3k.png" target="_blank" rel="noopener"><img src="https://img.hi-linux.com/staticfile/y1q3k-2021-01-10-frobUo.png" alt="agent_dir"></a></p><p><a href="https://cdn.oss.link/markdown/y1q3k.png" target="_blank" rel="noopener">agent_dir</a></p><h3><span id="42-agent-配置">4.2、Agent 配置</span></h3><p>Agent 主配置文件存放在 <code>config/agent.config</code> 配置文件中，配置文件内支持环境变量读取，可以自行添加其他配置和引用其他变量；通常这个配置文件在容器化时有两种选择，**一种是创建 ConfigMap，然后通过 ConfigMap 挂载到容器里进行覆盖；另一种是在默认配置里引用各种变量，在容器启动时通过环境变量注入。**这里暂时使用环境变量注入的方式:</p><p><strong>agent.config</strong></p><p><a href="https://cdn.oss.link/markdown/4t67x.png" target="_blank" rel="noopener"><img src="https://img.hi-linux.com/staticfile/4t67x-2021-01-10-3Y4bcU.png" alt="agent.config"></a></p><p><a href="https://cdn.oss.link/markdown/4t67x.png" target="_blank" rel="noopener">agent.config</a></p><p><strong>deployment.yml</strong></p><p><a href="https://cdn.oss.link/markdown/q0uw7.png" target="_blank" rel="noopener"><img src="https://img.hi-linux.com/staticfile/q0uw7-2021-01-10-o1GxOG.png" alt="deployment.yml"></a></p><p><a href="https://cdn.oss.link/markdown/q0uw7.png" target="_blank" rel="noopener">deployment.yml</a></p><p>调整完成后，应用运行一段时间后应该能在 UI 中看到数据</p><p><a href="https://cdn.oss.link/markdown/86vmo.png" target="_blank" rel="noopener"><img src="https://img.hi-linux.com/staticfile/86vmo-2021-01-10-2BmbMj.png" alt="skwalking-ui"></a></p><p><a href="https://cdn.oss.link/markdown/86vmo.png" target="_blank" rel="noopener">skwalking-ui</a></p><h2><span id="注意事项">注意事项</span></h2><ul><li><strong>默认情况下 Helm 相关命令执行缓慢，可能需要设置 <code>http(s)_proxy</code> <code>...( ＿ ＿)ノ｜壁</code>(自行体会这个表情)</strong></li><li><strong>Skywalking 镜像一般比较大，下载缓慢，推荐预先拉取好然后 load 到每个节点</strong></li><li><strong>ES 如果设置了密码，不要忘记在 Helm 安装时调整好密码配置</strong></li><li><strong>jar 包启动时 <code>-javaagent</code> 不能放在 <code>-jar</code> 选项之后，否则可能不生效</strong></li><li><strong>集群内连接 oap-server 推荐通过 <code>skywalking-oap.skywalking.svc.cluster.local</code> 域名服务发现方式寻址</strong></li></ul><blockquote><p>本文转载自：「 Bleem 」，原文：<a href="https://tinyurl.com/y4uwbmmb" target="_blank" rel="noopener">https://tinyurl.com/y4uwbmmb</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;先决条件&quot;&gt;先决条件&lt;/h2&gt;
&lt;p&gt;确保有一套运行正常的 Kubernetes 集群，本文默认为使用 Elasticsearch7 作为后端存储；**如果想把 ES 放到 Kubernetes 集群里那么还得确保集群配置了正确的存储，譬如默认的 StorageClass 可用等。**本文为了方便起见(其实就是穷)采用外部 ES 存储且使用 docker-compose 单节点部署，所以不需要集群的分布式存储；最后确保你本地的 &lt;code&gt;kubectl&lt;/code&gt; 能够正常运行。&lt;/p&gt;
&lt;h2 id=&quot;基本架构&quot;&gt;基本架构&lt;/h2&gt;
&lt;p&gt;Skywalking 在大体上(不准确)分为四大部分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;oap-server: 无状态服务后端，主要负责处理核心逻辑，可以简单理解为一个标准 java web 项目。&lt;/li&gt;
&lt;li&gt;skywalking-ui: UI 前端，通过 graphql 连接 oap-server 提供用户查询等 UI 展示。&lt;/li&gt;
&lt;li&gt;agent: 各种语言实现的 agent 负责抓取应用运行数据并上报给 oap-server，核心的指标上报来源。&lt;/li&gt;
&lt;li&gt;DB: 各种数据库，负责存储 Skywalking 的指标数据，生产环境推荐 ES、TiDB、MySQL。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="SkyWalking" scheme="https://www.hi-linux.com/categories/SkyWalking/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="SkyWalking" scheme="https://www.hi-linux.com/tags/SkyWalking/"/>
    
  </entry>
  
  <entry>
    <title>Linux 下自动化工具 Parallel SSH 中文使用指南</title>
    <link href="https://www.hi-linux.com/posts/53648.html"/>
    <id>https://www.hi-linux.com/posts/53648.html</id>
    <published>2021-03-31T01:00:00.000Z</published>
    <updated>2021-03-31T04:42:44.961Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><blockquote><p><strong>parallel-ssh 是为小规模自动化而设计的异步并行的 SSH 库!</strong></p></blockquote><p><strong><code>parallel-ssh</code></strong> 是为小规模自动化而设计的异步并行的 <code>SSH</code> 库，包括 <code>pssh</code>、<code>pscp</code>、<code>prsync</code>、<code>pslurp</code> 和 <code>pnuke</code>工具，其源代码使用 <code>Python</code>语言编写开发的。该项目最初位于<code>Google Code</code>上，是由<code>Brent N.Chun</code>编写和维护的，但是由于工作繁忙，<code>Brent</code>于<code>2009</code>年<code>10</code>月将维护工作移交给了<code>Andrew McNabb</code>管理。到了 <code>2012</code>年的时候，由于<code>Google Code</code>的已关闭，该项目一度被废弃，现在也只能在 <code>Google Code</code> 的归档中找到当时的版本了。</p><p>但是需要注意的是，之前的版本是不支持 <code>Python3</code> 的，但是 <code>Github</code> 上面有人 <code>Fork</code> 了一份，自己进行了改造使其支持 <code>Python3</code> 以上的版本了。与此同时，还有一个组织专门针对 <code>parallel-ssh</code> 进行了开发和维护，今天看了下很久都没有更新了。有需要的，自己可以自行查阅。</p><ul><li><p><a href="https://github.com/lilydjwg/pssh" target="_blank" rel="noopener">lilydjwg/pssh - supported on Python 3.5 and later</a></p></li><li><p><a href="https://github.com/ParallelSSH/parallel-ssh" target="_blank" rel="noopener">ParallelSSH/parallel-ssh - asynchronous parallel SSH client library</a></p></li><li><p>可扩展性</p><ul><li>支持扩展到百台，甚至上千台主机使用</li></ul></li><li><p>易于使用</p><ul><li>只需两行代码，即可在任意数量的主机上运行命令</li></ul></li><li><p>执行高效</p><ul><li>号称是最快的 <code>Python SSH</code> 库可用</li></ul></li><li><p>资源使用</p><ul><li>相比于其他 <code>Python SSH</code> 库，其消耗资源最少</li></ul></li></ul><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mac系统安装</span></span><br><span class="line">$ brew install pssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS系统安装</span></span><br><span class="line">$ yum install pssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu系统安装</span></span><br><span class="line">$ apt install pssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># PIP安装</span></span><br><span class="line">$ pip insall pssh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 源代码编译安装(2.3.1)</span></span><br><span class="line"><span class="comment"># 官方地址: https://code.google.com/archive/p/parallel-ssh/source/default/source</span></span><br><span class="line">$ tar zxvf pssh-2.3.1.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> pssh-2.3.1</span><br><span class="line">$ python setup.py install</span><br></pre></td></tr></table></figure><p><img src="https://img.hi-linux.com/staticfile/learn-pssh-command-1-2021-01-27-TVMY3S.png" alt="ParallelSSH在Google上面的版本"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 工具对应的子命令子命令</span></span><br><span class="line">$ ls -lh /usr/<span class="built_in">local</span>/Cellar/pssh/2.3.1_1/bin/</span><br><span class="line">pnuke -&gt; ../libexec/bin/pnuke</span><br><span class="line">prsync -&gt; ../libexec/bin/prsync</span><br><span class="line">pscp -&gt; ../libexec/bin/pscp</span><br><span class="line">pslurp -&gt; ../libexec/bin/pslurp</span><br><span class="line">pssh -&gt; ../libexec/bin/pssh</span><br><span class="line">pssh-askpass -&gt; ../libexec/bin/pssh-askpass</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">编号</th><th style="text-align:left">子命令</th><th style="text-align:left">对应功能解释</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><strong><code>pssh</code></strong></td><td style="text-align:left">通过 ssh 协议在多台主机上并行地运行命令</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><strong><code>pscp</code></strong></td><td style="text-align:left">通过 ssh 协议把文件并行地复制到多台主机上</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><strong><code>rsync</code></strong></td><td style="text-align:left">通过 rsync 协议把文件高效地并行复制到多台主机上</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><strong><code>slurp</code></strong></td><td style="text-align:left">通过 ssh 协议把文件并行地从多个远程主机复制到中心主机上</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><strong><code>pnuke</code></strong></td><td style="text-align:left">通过 ssh 协议并行地在多个远程主机上杀死进程</td></tr></tbody></table><h2><span id="1-pssh">1. pssh</span></h2><blockquote><p><strong>通过 ssh 协议在多台主机上并行地运行命令</strong></p></blockquote><ul><li><strong>命令参数使用</strong></li></ul><table><thead><tr><th style="text-align:left">编号</th><th style="text-align:left">参数选项</th><th style="text-align:left">对应参数解释</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><code>-h HOST_FILE</code></td><td style="text-align:left">指定主机文件列表文件；内容格式为”[user@]host[:port]”</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><code>-H HOST_STRING</code></td><td style="text-align:left">指定主机字符串地址；内容格式为”[user@]host[:port]”</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><code>-l USER</code></td><td style="text-align:left">指定登录使用的用户名</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><code>-p PAR</code></td><td style="text-align:left">设置并发的线程数(可选)</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><code>-o OUTDIR</code></td><td style="text-align:left">标准正常输出的文件目录(可选)</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><code>-e ERRDIR</code></td><td style="text-align:left">标准错误输出的文件目录(可选)</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left"><code>-t TIMEOUT</code></td><td style="text-align:left">超时时间设置，其中 0 表示无限制(可选)</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left"><code>-O OPTION</code></td><td style="text-align:left">设置 SSH 的选项</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left"><code>-x ARGS</code></td><td style="text-align:left">额外的命令行参数使用空白符号、引号、反斜线处理</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left"><code>-X ARG</code></td><td style="text-align:left">额外的命令行参数，单个参数模式，同-x 参数</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left"><code>-A</code></td><td style="text-align:left">手动输入密码模式</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left"><code>-i</code></td><td style="text-align:left">每个服务器内部处理信息输出</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left"><code>-P</code></td><td style="text-align:left">打印出服务器返回信息</td></tr><tr><td style="text-align:left">14</td><td style="text-align:left"><code>--help</code></td><td style="text-align:left">查看帮助，即此信息</td></tr><tr><td style="text-align:left">15</td><td style="text-align:left"><code>--version</code></td><td style="text-align:left">显示程序版本号</td></tr></tbody></table><ul><li><strong>适用范例</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Usage: pssh [OPTIONS] command [...]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在两个主机上运行命令并在每个服务器上打印其输出</span></span><br><span class="line">$ pssh -i -H <span class="string">"host1 host2"</span> hostname -i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行命令并将输出保存到单独的文件中</span></span><br><span class="line">$ pssh -H host1 -H host2 -o path/to/output_dir hostname -i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在多个主机上运行命令并在新行分隔的文件中指定</span></span><br><span class="line">$ pssh -i -h path/to/hosts_file hostname -i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以root运行命令(要求输入root用户密码)</span></span><br><span class="line">$ pssh -i -h path/to/hosts_file -A -l root_username hostname -i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行带有额外SSH参数的命令</span></span><br><span class="line">$ pssh -i -h path/to/hosts_file -x <span class="string">"-O VisualHostKey=yes"</span> hostname -i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行并行连接数量限制为10的命令</span></span><br><span class="line">$ pssh -i -h path/to/hosts_file -p 10 <span class="string">'cd dir; ./script.sh; exit'</span></span><br></pre></td></tr></table></figure><h2><span id="2-pscp">2. pscp</span></h2><blockquote><p><strong>通过 ssh 协议把文件并行地复制到多台主机上</strong></p></blockquote><ul><li><strong>命令参数使用</strong></li></ul><table><thead><tr><th style="text-align:left">编号</th><th style="text-align:left">参数选项</th><th style="text-align:left">对应参数解释</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><code>-h HOST_FILE</code></td><td style="text-align:left">指定主机文件列表文件；内容格式为”[user@]host[:port]”</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><code>-H HOST_STRING</code></td><td style="text-align:left">指定主机字符串地址；内容格式为”[user@]host[:port]”</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><code>-l USER</code></td><td style="text-align:left">指定登录使用的用户名</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><code>-p PAR</code></td><td style="text-align:left">设置并发的线程数(可选)</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><code>-o OUTDIR</code></td><td style="text-align:left">标准正常输出的文件目录(可选)</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><code>-e ERRDIR</code></td><td style="text-align:left">标准错误输出的文件目录(可选)</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left"><code>-t TIMEOUT</code></td><td style="text-align:left">超时时间设置，其中 0 表示无限制(可选)</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left"><code>-O OPTION</code></td><td style="text-align:left">设置 SSH 的选项</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left"><code>-x ARGS</code></td><td style="text-align:left">额外的命令行参数使用空白符号、引号、反斜线处理</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left"><code>-X ARG</code></td><td style="text-align:left">额外的命令行参数，单个参数模式，同-x 参数</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left"><code>-A</code></td><td style="text-align:left">手动输入密码模式</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left"><code>-r</code></td><td style="text-align:left">用于递归的复制目录(可选)</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left"><code>--help</code></td><td style="text-align:left">查看帮助，即此信息</td></tr><tr><td style="text-align:left">14</td><td style="text-align:left"><code>--version</code></td><td style="text-align:left">显示程序版本号</td></tr></tbody></table><ul><li><strong>适用范例</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Usage: pscp [OPTIONS] local remote</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地文件复制到远程机器上</span></span><br><span class="line">$ pscp -h hosts.txt -l root foo.txt /home/irb2/foo.txt</span><br><span class="line">[1] 23:00:08 [SUCCESS] 172.18.10.25</span><br><span class="line">[2] 09:52:28 [SUCCESS] 172.18.10.24</span><br></pre></td></tr></table></figure><h2><span id="3-prsync">3. prsync</span></h2><blockquote><p><strong>通过 rsync 协议把文件高效地并行复制到多台主机上</strong></p></blockquote><ul><li><strong>命令参数使用</strong></li></ul><table><thead><tr><th style="text-align:left">编号</th><th style="text-align:left">参数选项</th><th style="text-align:left">对应参数解释</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><code>-h HOST_FILE</code></td><td style="text-align:left">指定主机文件列表文件；内容格式为”[user@]host[:port]”</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><code>-H HOST_STRING</code></td><td style="text-align:left">指定主机字符串地址；内容格式为”[user@]host[:port]”</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><code>-l USER</code></td><td style="text-align:left">指定登录使用的用户名</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><code>-p PAR</code></td><td style="text-align:left">设置并发的线程数(可选)</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><code>-o OUTDIR</code></td><td style="text-align:left">标准正常输出的文件目录(可选)</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><code>-e ERRDIR</code></td><td style="text-align:left">标准错误输出的文件目录(可选)</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left"><code>-t TIMEOUT</code></td><td style="text-align:left">超时时间设置，其中 0 表示无限制(可选)</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left"><code>-O OPTION</code></td><td style="text-align:left">设置 SSH 的选项</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left"><code>-x ARGS</code></td><td style="text-align:left">额外的命令行参数使用空白符号、引号、反斜线处理</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left"><code>-X ARG</code></td><td style="text-align:left">额外的命令行参数，单个参数模式，同-x 参数</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left"><code>-A</code></td><td style="text-align:left">手动输入密码模式</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left"><code>-r</code></td><td style="text-align:left">用于递归的复制目录(可选)</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left"><code>-a</code></td><td style="text-align:left">使用 rsync 的归档模式(可选)</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left"><code>-z</code></td><td style="text-align:left">使用 rsync 的压缩方式(可选</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left"><code>-S ARGS</code></td><td style="text-align:left">设置 ssh 协议的扩展参数(可选)</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left"><code>--help</code></td><td style="text-align:left">查看帮助，即此信息</td></tr><tr><td style="text-align:left">14</td><td style="text-align:left"><code>--version</code></td><td style="text-align:left">显示程序版本号</td></tr></tbody></table><ul><li><strong>适用范例</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Usage: prsync [OPTIONS] local remote</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用rsync协议进行本地文件复制操作</span></span><br><span class="line">$ prsync -r -h hosts.txt -l root foo /home/irb2/foo</span><br></pre></td></tr></table></figure><h2><span id="4-pslurp">4. pslurp</span></h2><blockquote><p><strong>通过 ssh 协议把文件并行地从多个远程主机复制到中心主机上</strong></p></blockquote><ul><li><strong>命令参数使用</strong></li></ul><table><thead><tr><th style="text-align:left">编号</th><th style="text-align:left">参数选项</th><th style="text-align:left">对应参数解释</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><code>-h HOST_FILE</code></td><td style="text-align:left">指定主机文件列表文件；内容格式为”[user@]host[:port]”</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><code>-H HOST_STRING</code></td><td style="text-align:left">指定主机字符串地址；内容格式为”[user@]host[:port]”</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><code>-l USER</code></td><td style="text-align:left">指定登录使用的用户名</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><code>-p PAR</code></td><td style="text-align:left">设置并发的线程数(可选)</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><code>-o OUTDIR</code></td><td style="text-align:left">标准正常输出的文件目录(可选)</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><code>-e ERRDIR</code></td><td style="text-align:left">标准错误输出的文件目录(可选)</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left"><code>-t TIMEOUT</code></td><td style="text-align:left">超时时间设置，其中 0 表示无限制(可选)</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left"><code>-O OPTION</code></td><td style="text-align:left">设置 SSH 的选项</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left"><code>-x ARGS</code></td><td style="text-align:left">额外的命令行参数使用空白符号、引号、反斜线处理</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left"><code>-X ARG</code></td><td style="text-align:left">额外的命令行参数，单个参数模式，同-x 参数</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left"><code>-A</code></td><td style="text-align:left">手动输入密码模式</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left"><code>-r</code></td><td style="text-align:left">用于递归的复制目录(可选)</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left"><code>-L LOCALDIR</code></td><td style="text-align:left">指定本地存放文件的目录</td></tr><tr><td style="text-align:left">14</td><td style="text-align:left"><code>--help</code></td><td style="text-align:left">查看帮助，即此信息</td></tr><tr><td style="text-align:left">15</td><td style="text-align:left"><code>--version</code></td><td style="text-align:left">显示程序版本号</td></tr></tbody></table><ul><li><strong>适用范例</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Usage: pslurp [OPTIONS] remote local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将远程主机上面的文件复制到本地</span></span><br><span class="line">$ pslurp -h hosts.txt -l root -L /tmp/outdir /home/irb2/foo.txt foo.txt</span><br></pre></td></tr></table></figure><h2><span id="5-pnuke">5. pnuke</span></h2><blockquote><p><strong>通过 ssh 协议并行地在多个远程主机上杀死进程</strong></p></blockquote><ul><li><strong>命令参数使用</strong></li></ul><table><thead><tr><th style="text-align:left">编号</th><th style="text-align:left">参数选项</th><th style="text-align:left">对应参数解释</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><code>-h HOST_FILE</code></td><td style="text-align:left">指定主机文件列表文件；内容格式为”[user@]host[:port]”</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><code>-H HOST_STRING</code></td><td style="text-align:left">指定主机字符串地址；内容格式为”[user@]host[:port]”</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><code>-l USER</code></td><td style="text-align:left">指定登录使用的用户名</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><code>-p PAR</code></td><td style="text-align:left">设置并发的线程数(可选)</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><code>-o OUTDIR</code></td><td style="text-align:left">标准正常输出的文件目录(可选)</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><code>-e ERRDIR</code></td><td style="text-align:left">标准错误输出的文件目录(可选)</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left"><code>-t TIMEOUT</code></td><td style="text-align:left">超时时间设置，其中 0 表示无限制(可选)</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left"><code>-O OPTION</code></td><td style="text-align:left">设置 SSH 的选项</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left"><code>-x ARGS</code></td><td style="text-align:left">额外的命令行参数使用空白符号、引号、反斜线处理</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left"><code>-X ARG</code></td><td style="text-align:left">额外的命令行参数，单个参数模式，同-x 参数</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left"><code>-A</code></td><td style="text-align:left">手动输入密码模式</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left"><code>--help</code></td><td style="text-align:left">查看帮助，即此信息</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left"><code>--version</code></td><td style="text-align:left">显示程序版本号</td></tr></tbody></table><ul><li><strong>适用范例</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Usage: pnuke [OPTIONS] pattern</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结束远程主机上面的进程任务</span></span><br><span class="line">$ pnuke -h hosts.txt -l root java</span><br></pre></td></tr></table></figure><blockquote><p>本文转载自：「 Escape 的博客 」，原文：<a href="https://tinyurl.com/y2zucscu%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/y2zucscu，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;parallel-ssh 是为小规模自动化而设计的异步并行的 SSH 库!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;parallel-ssh&lt;/code&gt;&lt;/strong&gt; 是为小规模自动化而设计的异步并行的 &lt;code&gt;SSH&lt;/code&gt; 库，包括 &lt;code&gt;pssh&lt;/code&gt;、&lt;code&gt;pscp&lt;/code&gt;、&lt;code&gt;prsync&lt;/code&gt;、&lt;code&gt;pslurp&lt;/code&gt; 和 &lt;code&gt;pnuke&lt;/code&gt;工具，其源代码使用 &lt;code&gt;Python&lt;/code&gt;语言编写开发的。该项目最初位于&lt;code&gt;Google Code&lt;/code&gt;上，是由&lt;code&gt;Brent N.Chun&lt;/code&gt;编写和维护的，但是由于工作繁忙，&lt;code&gt;Brent&lt;/code&gt;于&lt;code&gt;2009&lt;/code&gt;年&lt;code&gt;10&lt;/code&gt;月将维护工作移交给了&lt;code&gt;Andrew McNabb&lt;/code&gt;管理。到了 &lt;code&gt;2012&lt;/code&gt;年的时候，由于&lt;code&gt;Google Code&lt;/code&gt;的已关闭，该项目一度被废弃，现在也只能在 &lt;code&gt;Google Code&lt;/code&gt; 的归档中找到当时的版本了。&lt;/p&gt;
&lt;p&gt;但是需要注意的是，之前的版本是不支持 &lt;code&gt;Python3&lt;/code&gt; 的，但是 &lt;code&gt;Github&lt;/code&gt; 上面有人 &lt;code&gt;Fork&lt;/code&gt; 了一份，自己进行了改造使其支持 &lt;code&gt;Python3&lt;/code&gt; 以上的版本了。与此同时，还有一个组织专门针对 &lt;code&gt;parallel-ssh&lt;/code&gt; 进行了开发和维护，今天看了下很久都没有更新了。有需要的，自己可以自行查阅。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/lilydjwg/pssh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;lilydjwg/pssh - supported on Python 3.5 and later&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ParallelSSH/parallel-ssh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ParallelSSH/parallel-ssh - asynchronous parallel SSH client library&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可扩展性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持扩展到百台，甚至上千台主机使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;易于使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只需两行代码，即可在任意数量的主机上运行命令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行高效&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;号称是最快的 &lt;code&gt;Python SSH&lt;/code&gt; 库可用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资源使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相比于其他 &lt;code&gt;Python SSH&lt;/code&gt; 库，其消耗资源最少&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="SSH" scheme="https://www.hi-linux.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>超实用的容器镜像漏洞检测工具 Trivy 入门指南</title>
    <link href="https://www.hi-linux.com/posts/17574.html"/>
    <id>https://www.hi-linux.com/posts/17574.html</id>
    <published>2021-03-29T01:00:00.000Z</published>
    <updated>2021-03-29T01:34:20.681Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2><span id="trivy-的特征">Trivy 的特征</span></h2><p>Trivy 是一种适用于 CI 的简单而全面的容器漏洞扫描程序。软件漏洞是指软件或操作系统中存在的故障、缺陷或弱点。Trivy 检测操作系统包（Alpine、RHEL、CentOS等）和应用程序依赖（Bundler、Composer、npm、yarn等）的漏洞。</p><p>Trivy 很容易使用，只要安装二进制文件，就可以扫描了。扫描只需指定容器的镜像名称。与其他镜像扫描工具相比，例如 Clair，Anchore Engine，Quay 相比，Trivy 在准确性、方便性和对 CI 的支持等方面都有着明显的优势。</p><p>推荐在 CI 中使用它，在推送到 Container Registry 之前，您可以轻松地扫描本地容器镜像，Trivy具备如下的特征：</p><ol><li><p>检测面很全，能检测全面的漏洞，操作系统软件包（Alpine、Red Hat Universal Base Image、Red Hat Enterprise Linux、CentOS、Oracle Linux、Debian、Ubuntu、Amazon Linux、openSUSE Leap、SUSE Enterprise Linux、Photon OS 和 Distrioless）、应用程序依赖项（Bundler、Composer、Pipenv、Poetry、npm、yarn 和 Cargo）；</p></li><li><p>使用简单，仅仅只需要指定镜像名称；</p></li><li><p>扫描快且无状态，第一次扫描将在 10 秒内完成（取决于您的网络）。随后的扫描将在一秒钟内完成。与其他扫描器在第一次运行时需要很长时间（大约10分钟）来获取漏洞信息，并鼓励您维护持久的漏洞数据库不同，Trivy 是无状态的，不需要维护或准备；</p></li><li><p>易于安装，安装方式：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install trivy</span><br><span class="line">$ yum install trivy</span><br><span class="line">$ brew install trivy</span><br></pre></td></tr></table></figure><p>无需安装数据库、库等先决条件（例外情况是需要安装 rpm 以扫描基于 RHEL/CentOS 的图像）。</p><a id="more"></a><h2><span id="trivy-的安装">Trivy 的安装</span></h2><p>这里安装 Trivy 的环境是 Centos7，安装的版本是 0.16.0，安装的命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;github.com&#x2F;aquasecurity&#x2F;trivy&#x2F;releases&#x2F;download&#x2F;v0.16.0&#x2F;trivy_0.16.0_Linux-64bit.rpm</span><br><span class="line"></span><br><span class="line">$ rpm -ivh trivy_0.16.0_Linux-64bit.rpm</span><br><span class="line">准备中...                          ################################# [100%]</span><br><span class="line">正在升级&#x2F;安装...</span><br><span class="line">   1:trivy-0:0.16.0-1                 ################################# [100%]</span><br><span class="line"></span><br><span class="line">$ trivy -v</span><br><span class="line">Version: 0.16.0</span><br></pre></td></tr></table></figure><h2><span id="trivy-的简单使用">Trivy 的简单使用</span></h2><p>下面介绍一些 Trivy 的简单使用的命令和一些测试的结果。主要从几个方面来测试 Trivy 的性能指标：</p><ul><li>镜像大小对 Trivy 扫描速度的影响；</li><li>扫描的镜像大小和网络流量使用情况的关系；</li><li>扫描的结果是否容易解析；</li></ul><h3><span id="镜像大小对-trivy-扫描速度的影响">镜像大小对 Trivy 扫描速度的影响</span></h3><ul><li>当镜像位于本地，大小 90MB 左右时候的扫描：</li></ul><p>执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trivy registry.cn-hangzhou.aliyuncs.com&#x2F;choerodon-tools&#x2F;javabase:0.5.0</span><br></pre></td></tr></table></figure><p>扫描结果：</p><p><img src="https://img.hi-linux.com/staticfile/trivy-2-2021-03-23-8gwNk2.png" alt></p><p>时间：第一次扫描会 DownLoad DB,大概花十分钟以内（14M，看网速），国外的主机 10s 以内，第二次扫描十秒钟以内完成。</p><ul><li>当镜像位于本地，大小 408MB 左右时候的扫描：</li></ul><p>执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trivy registry.cn-hangzhou.aliyuncs.com&#x2F;choerodon-tools&#x2F;mysql:5.7.17</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://img.hi-linux.com/staticfile/trivy-3-20210323150158269-2021-03-23-N7fY0h.png" alt></p><p>时间：10秒左右。</p><ul><li>当扫描的镜像位于线上，大小为 316M 左右时候的扫描：</li></ul><p>执行结果：</p><p><img src="https://img.hi-linux.com/staticfile/trivy-4-2021-03-23-TPlNlA.png" alt></p><p>时间：20s左右</p><p>结论：本地扫描镜像的大小对扫描速度影响不大，线上扫描与本地扫描的方式对扫描的速度影响大不。</p><h3><span id="扫描的镜像大小和网络流量使用情况的关系">扫描的镜像大小和网络流量使用情况的关系</span></h3><ul><li>线上扫描之前网络流量使用情况：</li></ul><p><img src="https://img.hi-linux.com/staticfile/trivy-5-2021-03-23-kChKZU.png" alt></p><p>扫描镜像大小：316M 左右</p><ul><li>扫描之后服务器的磁盘，网络流量使用情况：</li></ul><p><img src="https://img.hi-linux.com/staticfile/trivy-6-2021-03-23-RCXCt6.png" alt></p><p>结论：接收到的网络流量等于线上镜像的大小，镜像被下载放在服务器磁盘的某处（目前本服务器未装Docker）。</p><blockquote><p>注：再次全量扫描相同的镜像，接收流量和磁盘使用占比均不再增加。</p></blockquote><h3><span id="扫描的结果是否容易解析">扫描的结果是否容易解析</span></h3><ul><li>使用 JSON 输出扫描的结果：</li></ul><p>扫描镜像,openjdk:15-ea-jdk-buster</p><p>大小：316M 左右</p><p>时间：10s 左右</p><p><img src="https://img.hi-linux.com/staticfile/trivy-7-2021-03-23-H1Pzjr.png" alt></p><p>返回结果：标准的 josn 格式的文件</p><p><img src="https://img.hi-linux.com/staticfile/trivy-8-2021-03-23-iMgNEF.png" alt></p><h3><span id="其他更多可使用命令">其他更多可使用命令</span></h3><ol><li>扫描镜像文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker save ruby:2.3.0-alpine3.9 -o ruby-2.3.0.tar</span><br><span class="line">$ trivy --input ruby-2.3.0.tar</span><br></pre></td></tr></table></figure><ol start="2"><li>按严重性筛选漏洞：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trivy -–severity HIGH,CRITICAL ruby:2.3.0</span><br></pre></td></tr></table></figure><ol start="3"><li>按类型筛选漏洞：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trivy -–vuln-type os ruby:2.3.0</span><br></pre></td></tr></table></figure><ol start="4"><li>跳过漏洞数据库的更新</li></ol><p>Trivy 在开始运行时总是更新其漏洞数据库。这通常很快，因为这是一个差异更新。但是，如果您甚至想跳过这一步，请使用 <code>-–skip update</code> 选项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trivy -–skip-update python:3.4-alpine3.9</span><br></pre></td></tr></table></figure><ol start="5"><li>仅下载漏洞数据库</li></ol><p>您还可以要求 Trivy 简单地检索漏洞数据库。这对于初始化连续集成系统中的工作人员非常有用。在第一次运行中，<code>-–only update</code> 选项将被忽略。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ trivy -–download-db-only</span><br><span class="line">$ trivy -–download-db-only -–only-update alpine</span><br></pre></td></tr></table></figure><ol start="6"><li>忽略未修复的漏洞</li></ol><p>默认情况下，Trivy 还会检测未修补/未修复的漏洞。这意味着即使更新了所有包，也无法修复这些漏洞。如果要忽略它们，请使用 <code>-–ignore unfixed</code> 选项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trivy –-ignore-unfixed ruby:2.3.0</span><br></pre></td></tr></table></figure><ol start="7"><li>指定退出代码</li></ol><p>默认情况下，即使检测到漏洞，Trivy 也会以代码 0 退出。如果要使用非零退出代码退出，请使用 <code>-–exit code</code> 选项。此选项对 CI/CD 很有用。在下面的示例中，仅当发现关键漏洞时，测试才会失败。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ trivy -–exit-code 1 python:3.4-alpine3.9</span><br><span class="line">$ trivy -–exit-code 0 –severity MEDIUM,HIGH ruby:2.3.0</span><br><span class="line">$ trivy -–exit-code 1 –severity CRITICAL ruby:2.3.0</span><br></pre></td></tr></table></figure><ol start="8"><li>忽略指定的漏洞</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat .trivyignore</span><br><span class="line">CVE-2018-14618</span><br><span class="line">CVE-2019-1543</span><br><span class="line">$ trivy python:3.4-alpine3.9</span><br></pre></td></tr></table></figure><ol start="9"><li>指定缓存目录：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trivy -–cache-dir &#x2F;tmp&#x2F;trivy&#x2F; python:3.4-alpine3.9</span><br></pre></td></tr></table></figure><ol start="10"><li>清除镜像缓存</li></ol><p><code>-–clear cache</code> 选项删除镜像缓存。如果更新具有相同 tag 的镜像（例如使用最新 tag 时），此选项非常有用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trivy -–clear-cache</span><br></pre></td></tr></table></figure><p><code>--reset</code> 选项删除所有缓存和数据库。在此之后，需要很长时间才能在本地重建漏洞数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trivy -–reset</span><br></pre></td></tr></table></figure><ol start="11"><li>使用轻量级数据库：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trivy -–light alpine:3.10</span><br></pre></td></tr></table></figure><p>轻量级数据库不包含诸如描述和引用之类的漏洞详细信息。因此，数据库的大小更小，下载速度更快。当您不需要漏洞详细信息时，此选项非常有用，并且适用于CI/CD。</p><p>要查找其他信息，可以在 NVD 网站上搜索漏洞详细信息。</p><p>网站地址：<a href="https://nvd.nist.gov/vuln/search" target="_blank" rel="noopener">https://nvd.nist.gov/vuln/search</a></p><h2><span id="将-trivy-集成进-ci">将 Trivy 集成进 CI</span></h2><p>Trivy 有对 CI 友好的特点，并且官方也以这种方式使用它，想要集成 CI 只需要一段简单的 Yml 配置文件即可，如果发现漏洞，测试将失败。如果不希望测试失败，请指定 –exit code 0。由于在自动化场景（如CI/CD）中，您只对最终结果感兴趣，而不是对完整的报告感兴趣，因此请使用 –light 标志对此场景进行优化，以获得快速的结果。</p><p>集成 GitLab CI 的 Yml 配置可以参考：<a href="https://github.com/aquasecurity/trivy#gitlab-ci" target="_blank" rel="noopener">https://github.com/aquasecurity/trivy#gitlab-ci</a></p><h2><span id="使用注意点">使用注意点</span></h2><ul><li>国内拉取漏洞数据库慢。</li><li>同一台服务器，多个镜像扫描的时候不可并行执行。</li><li>可以使用 <code>-–light</code> 使用轻量级数据库来优化执行扫描的效率。</li></ul><blockquote><p>本文转载自：「 Choerodon 猪齿鱼社区 」，原文：<a href="https://choerodon.io/zh/blog/trivy/" target="_blank" rel="noopener">https://choerodon.io/zh/blog/trivy/</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Trivy-的特征&quot;&gt;Trivy 的特征&lt;/h2&gt;
&lt;p&gt;Trivy 是一种适用于 CI 的简单而全面的容器漏洞扫描程序。软件漏洞是指软件或操作系统中存在的故障、缺陷或弱点。Trivy 检测操作系统包（Alpine、RHEL、CentOS等）和应用程序依赖（Bundler、Composer、npm、yarn等）的漏洞。&lt;/p&gt;
&lt;p&gt;Trivy 很容易使用，只要安装二进制文件，就可以扫描了。扫描只需指定容器的镜像名称。与其他镜像扫描工具相比，例如 Clair，Anchore Engine，Quay 相比，Trivy 在准确性、方便性和对 CI 的支持等方面都有着明显的优势。&lt;/p&gt;
&lt;p&gt;推荐在 CI 中使用它，在推送到 Container Registry 之前，您可以轻松地扫描本地容器镜像，Trivy具备如下的特征：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;检测面很全，能检测全面的漏洞，操作系统软件包（Alpine、Red Hat Universal Base Image、Red Hat Enterprise Linux、CentOS、Oracle Linux、Debian、Ubuntu、Amazon Linux、openSUSE Leap、SUSE Enterprise Linux、Photon OS 和 Distrioless）、应用程序依赖项（Bundler、Composer、Pipenv、Poetry、npm、yarn 和 Cargo）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用简单，仅仅只需要指定镜像名称；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扫描快且无状态，第一次扫描将在 10 秒内完成（取决于您的网络）。随后的扫描将在一秒钟内完成。与其他扫描器在第一次运行时需要很长时间（大约10分钟）来获取漏洞信息，并鼓励您维护持久的漏洞数据库不同，Trivy 是无状态的，不需要维护或准备；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;易于安装，安装方式：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ apt-get install trivy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yum install trivy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ brew install trivy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;无需安装数据库、库等先决条件（例外情况是需要安装 rpm 以扫描基于 RHEL/CentOS 的图像）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.hi-linux.com/categories/docker/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Trivy" scheme="https://www.hi-linux.com/tags/Trivy/"/>
    
  </entry>
  
  <entry>
    <title>零配置，一条指令助你实现 SSH 免密登陆和安全加固</title>
    <link href="https://www.hi-linux.com/posts/37943.html"/>
    <id>https://www.hi-linux.com/posts/37943.html</id>
    <published>2021-03-26T01:00:00.000Z</published>
    <updated>2021-03-26T01:38:00.741Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2><span id="前言">前言</span></h2><p>对于新入手或重装后的 VPS 配置密钥登录需要创建 <code>~/.ssh</code> 目录、把公钥写入到 <code>~/.ssh/authorized_keys</code>、设置权限、禁用密码登录等操作，虽然都是很简单的基础操作，但过程麻烦且枯燥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~&#x2F;.ssh</span><br><span class="line">curl -fsSL https:&#x2F;&#x2F;github.com&#x2F;P3TERX.keys &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">chmod 700 ~&#x2F;.ssh</span><br><span class="line">chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">sudo sed -i &quot;s@.*\(PasswordAuthentication \).*@\1no@&quot; &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br><span class="line">sudo service sshd restart</span><br></pre></td></tr></table></figure><p><a href="https://github.com/P3TERX/SSH_Key_Installer" target="_blank" rel="noopener">SSH 密钥一键配置脚本</a>是一套用于简化 SSH 密钥配置过程的解决方案。使用它以上操作只需要一行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -fsSL git.io&#x2F;key.sh) -g P3TERX -d</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="语法及选项说明">语法及选项说明</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -fsSL git.io&#x2F;key.sh) [选项...] &lt;参数&gt;</span><br></pre></td></tr></table></figure><ul><li><code>-o</code> - 覆盖模式，必须写在最前面才会生效</li><li><code>-g</code> - 从 GitHub 获取公钥，参数为 GitHub 用户名</li><li><code>-u</code> - 从 URL 获取公钥，参数为 URL</li><li><code>-l</code> - 从本地文件获取公钥，参数为本地文件路径</li><li><code>-p</code> - 修改 SSH 端口，参数为端口号</li><li><code>-d</code> - 禁用密码登录</li></ul><h2><span id="使用方法">使用方法</span></h2><h3><span id="生成-ssh-密钥对">生成 SSH 密钥对</span></h3><p>如果没有密钥需要先生成，执行以下命令后一路回车即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ecdsa -b 521</span><br></pre></td></tr></table></figure><blockquote><p>TIPS：</p><p>此方法适用于 Windows 10 (1803后)的 PowerShell 或 WSL，Linux 发行版和 macOS 自带的终端，但不仅限于这些环境。</p><p><strong>科普：</strong> 521 位的 ECDSA 密钥比起 RSA 密钥更安全且验证速度更快。</p></blockquote><p>操作完后会在 <code>~/.ssh</code> 目录中生两个密钥文件，<code>id_ecdsa</code> 为私钥，<code>id_ecdsa.pub</code> 为公钥。公钥就是我们需要安装在远程主机上的。</p><blockquote><p><strong>科普：</strong><code>~</code>符号代表<strong>用户主目录</strong>，俗称<strong>家目录</strong>。其路径与当前登陆的用户有关，在 Linux 中普通用户家目录的路径是<code>/home/用户名</code>，而 root 用户是<code>/root</code>。Windows 10 中路径是<code>C:\Users\用户名</code>。在 macOS 中路径是<code>/Users/用户名</code>。</p></blockquote><h3><span id="安装公钥">安装公钥</span></h3><h4><span id="从-github-获取公钥">从 GitHub 获取公钥</span></h4><p>在 <a href="https://github.com/settings/keys" target="_blank" rel="noopener">GitHub 密钥管理页面</a> 添加公钥，比如我的用户名是 <code>P3TERX</code>，那么在主机上输入以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -fsSL git.io&#x2F;key.sh) -g P3TERX</span><br></pre></td></tr></table></figure><h4><span id="从-url-获取公钥">从 URL 获取公钥</span></h4><p>把公钥上传到网盘，通过网盘链接获取公钥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -fsSL git.io&#x2F;key.sh) -u https:&#x2F;&#x2F;p3terx.com&#x2F;key.pub</span><br></pre></td></tr></table></figure><h4><span id="从本地文件获取公钥">从本地文件获取公钥</span></h4><p>通过 FTP 的方式把公钥传到 VPS 上，然后指定公钥路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -fsSL git.io&#x2F;key.sh) -f ~&#x2F;key.pub</span><br></pre></td></tr></table></figure><h3><span id="覆盖模式">覆盖模式</span></h3><p>使用覆盖模式（<code>-o</code>）将覆盖 <code>/.ssh/authorized_keys</code> 文件，之前的密钥会被完全替换掉，选项必须写在最前面才会生效，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -fsSL git.io&#x2F;key.sh) -o -g P3TERX</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -fsSL git.io&#x2F;key.sh) -og P3TERX</span><br></pre></td></tr></table></figure><h3><span id="禁用密码登录">禁用密码登录</span></h3><p>在确定使用密钥能正常登录后禁用密码登录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -fsSL git.io&#x2F;key.sh) -d</span><br></pre></td></tr></table></figure><h3><span id="修改-ssh-端口">修改 SSH 端口</span></h3><p>把 SSH 端口修改为 <code>2222</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -fsSL git.io&#x2F;key.sh) -p 2222</span><br></pre></td></tr></table></figure><h3><span id="一键操作">一键操作</span></h3><p>安装密钥、修改端口、禁用密码登录一键操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -fsSL git.io&#x2F;key.sh) -og P3TERX -p 2222 -d</span><br></pre></td></tr></table></figure><blockquote><p>本文转载自：「 P3TERX ZONE 」，原文：<a href="http://t.cn/A6tjJeR0" target="_blank" rel="noopener">http://t.cn/A6tjJeR0</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;对于新入手或重装后的 VPS 配置密钥登录需要创建 &lt;code&gt;~/.ssh&lt;/code&gt; 目录、把公钥写入到 &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;、设置权限、禁用密码登录等操作，虽然都是很简单的基础操作，但过程麻烦且枯燥：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir -p ~&amp;#x2F;.ssh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl -fsSL https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;P3TERX.keys &amp;gt;&amp;gt; ~&amp;#x2F;.ssh&amp;#x2F;authorized_keys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chmod 700 ~&amp;#x2F;.ssh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chmod 600 ~&amp;#x2F;.ssh&amp;#x2F;authorized_keys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo sed -i &amp;quot;s@.*\(PasswordAuthentication \).*@\1no@&amp;quot; &amp;#x2F;etc&amp;#x2F;ssh&amp;#x2F;sshd_config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo service sshd restart&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/P3TERX/SSH_Key_Installer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SSH 密钥一键配置脚本&lt;/a&gt;是一套用于简化 SSH 密钥配置过程的解决方案。使用它以上操作只需要一行命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bash &amp;lt;(curl -fsSL git.io&amp;#x2F;key.sh) -g P3TERX -d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="SSH" scheme="https://www.hi-linux.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>几种修改 Docker 镜像默认存储位置的方法</title>
    <link href="https://www.hi-linux.com/posts/13457.html"/>
    <id>https://www.hi-linux.com/posts/13457.html</id>
    <published>2021-03-24T01:00:00.000Z</published>
    <updated>2021-03-24T01:00:24.788Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><blockquote><p>由于系统初始分区的原因，导致操作系统中对应 <code>/</code> 分区不会太大，通过 <code>/var</code> 目录不会单独分区。如果上面运行 <code>Docker</code> 服务，经过长时间的使用，会使原本就比较大的分区越来越不够用。如何更好地的处理这个问题呢？</p></blockquote><h2><span id="1-使用软链接">1. 使用软链接</span></h2><ul><li>我们知道在操作系统当中，默认情况下 <code>Docker</code> 容器的存放位置在 <code>/var/lib/docker</code> 目录下面，可以通过下面命令查看具体位置。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认存放位置</span></span><br><span class="line">$ sudo docker info | grep <span class="string">"Docker Root Dir"</span></span><br></pre></td></tr></table></figure><ul><li>解决默认存储容量不足的情况，最直接且最有效的方法就是挂载新的分区到该目录。但是在原有系统空间不变的情况下，所以采用软链接的方式，修改镜像和容器的存放路径达到同样的目的。</li></ul><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停掉Docker服务</span></span><br><span class="line">$ systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停掉Docker服务</span></span><br><span class="line">$ service docker stop</span><br></pre></td></tr></table></figure><ul><li>然后移动整个 <code>/var/lib/docker</code> 目录到空间不较大的目的路径。这时候启动 <code>Docker</code> 时发现存储目录依旧是 <code>/var/lib/docker</code> 目录，但是实际上是存储在数据盘 <code>/data/docker</code> 上了。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 移动原有的内容</span></span><br><span class="line">$ mv /var/lib/docker /data/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行链接</span></span><br><span class="line">$ ln -sf /data/docker /var/lib/docker</span><br></pre></td></tr></table></figure><h2><span id="2-指定容器启动参数">2. 指定容器启动参数</span></h2><ul><li>在配置文件中指定容器启动的参数 <code>--graph=/var/lib/docker</code> 来指定镜像和容器存放路径。<code>Docker</code> 的配置文件可以设置大部分的后台进程参数，在各个操作系统中的存放位置不一致。在 <code>Ubuntu</code> 中的位置是 <code>/etc/default/docker</code> 文件，在 <code>CentOS</code> 中的位置是 <code>/etc/sysconfig/docker</code> 文件。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS6</span></span><br><span class="line"><span class="comment"># 因为Ubuntu默认开启了selinux机制</span></span><br><span class="line">OPTIONS=--graph=<span class="string">"/data/docker"</span> --selinux-enabled -H fd://</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS7</span></span><br><span class="line"><span class="comment"># 修改docker.service文件，使用-g参数指定存储位置</span></span><br><span class="line">$ vi /usr/lib/systemd/system/docker.service</span><br><span class="line">ExecStart=/usr/bin/dockerd --graph /new-path/docker</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line"><span class="comment"># 因为Ubuntu默认没开启selinux机制</span></span><br><span class="line">OPTIONS=--graph=<span class="string">"/data/docker"</span> -H fd://</span><br></pre></td></tr></table></figure><ul><li>重新启动之后，<code>Docker</code> 的路径就改成 <code>/data/docker</code> 了。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新reload配置文件</span></span><br><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启docker服务</span></span><br><span class="line">$ sudo systemctl restart docker.service</span><br></pre></td></tr></table></figure><ul><li>如果 <code>Docker</code> 的版本是 <code>1.12</code> 或以上的，可以修改或新建 <code>daemon.json</code> 文件。修改后会立即生效，不需重启 <code>Docker</code> 服务。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">$ vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"registry-mirrors"</span>:</span><br><span class="line">        [<span class="string">"http://7e61f7f9.m.daocloud.io"</span>],</span><br><span class="line">    <span class="string">"graph"</span>: <span class="string">"/new-path/docker"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="3-system-下创建配置文件">3. System 下创建配置文件</span></h2><ul><li>在 <code>/etc/systemd/system/docker.service.d</code> 目录下创建一个 <code>Drop-In</code> 文件 <code>docker.conf</code>，默认 <code>docker.service.d</code> 文件夹不存在，必须先创建它。创建 <code>Drop-In</code> 文件的原因，是我们希望 <code>Docker</code>服务使用 <code>docker.conf</code> 文件中提到的特定参数，将默认服务所使用的位于 <code>/lib/systemd/system/docker.service</code> 文件中的参数进行覆盖。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义新的存储位置</span></span><br><span class="line">$ sudo vi /etc/systemd/system/docker.service.d/docker.conf</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/dockerd --graph=<span class="string">"/data/docker"</span> --storage-driver=devicemapper</span><br></pre></td></tr></table></figure><ul><li>保存并退出 <code>vim</code> 编辑器 <code>/data/docker</code> 就是新的存储位置，而 <code>devicemapper</code> 是当前 <code>Docker</code> 所使用的存储驱动。如果你的存储驱动有所不同，请输入之前第一步查看并记下的值。现在，你可以重新加载服务守护程序，并启动 <code>Docker</code> 服务了，这将改变新的镜像和容器的存储位置。为了确认一切顺利，运行 <code>docker info</code> 命令检查 <code>Docker</code> 的根目录。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新reload配置文件</span></span><br><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启docker服务</span></span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><h2><span id="参考文档">参考文档</span></h2><ul><li><a href="https://blog.51cto.com/forangela/1949947" target="_blank" rel="noopener">https://blog.51cto.com/forangela/1949947</a></li></ul><blockquote><p>本文转载自：「 Escape 的博客 」，原文：<a href="https://tinyurl.com/y5v7btf2%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/y5v7btf2，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;由于系统初始分区的原因，导致操作系统中对应 &lt;code&gt;/&lt;/code&gt; 分区不会太大，通过 &lt;code&gt;/var&lt;/code&gt; 目录不会单独分区。如果上面运行 &lt;code&gt;Docker&lt;/code&gt; 服务，经过长时间的使用，会使原本就比较大的分区越来越不够用。如何更好地的处理这个问题呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-使用软链接&quot;&gt;1. 使用软链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;我们知道在操作系统当中，默认情况下 &lt;code&gt;Docker&lt;/code&gt; 容器的存放位置在 &lt;code&gt;/var/lib/docker&lt;/code&gt; 目录下面，可以通过下面命令查看具体位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 默认存放位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo docker info | grep &lt;span class=&quot;string&quot;&gt;&quot;Docker Root Dir&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;解决默认存储容量不足的情况，最直接且最有效的方法就是挂载新的分区到该目录。但是在原有系统空间不变的情况下，所以采用软链接的方式，修改镜像和容器的存放路径达到同样的目的。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.hi-linux.com/categories/docker/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Linux 网络流量监控利器 iftop 中文入门指南</title>
    <link href="https://www.hi-linux.com/posts/35952.html"/>
    <id>https://www.hi-linux.com/posts/35952.html</id>
    <published>2021-03-22T01:00:00.000Z</published>
    <updated>2021-03-22T01:20:03.624Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2><span id="iftop-是什么">iftop 是什么</span></h2><blockquote><p>在 Linux 系统下即时监控服务器的网络带宽使用情况，有很多工具，比如 iptraf、nethogs 等等，但是推荐使用小巧但功能很强大的 iftop 工具。</p></blockquote><p>iftop 是 Linux 系统一个免费的网卡实时流量监控工具，类似于 top 命令。iftop 可以监控指定网卡的实时流量、端口连接信息、反向解析 IP 等，还可以精确显示本机网络流量及网络内各主机和本机相互通信的流量集合，非常适合于监控代理服务器或路由器的网络流量。同时，iftop 对检测流量异常的主机非常有效，通过 iftop 的输出可以迅速定位主机流量异常的根源，这对于网络故障排查、网络安全检测是十分有用的。缺点就是无报表功能，且必须以 root 身份才能运行。</p><p>官网：<a href="http://www.ex-parrot.com/~pdw/iftop/" target="_blank" rel="noopener">http://www.ex-parrot.com/~pdw/iftop/</a></p><h2><span id="安装">安装</span></h2><ol><li>通过软件管理工具安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># CentOS</span><br><span class="line">$ sudo yum install iftop</span><br><span class="line"></span><br><span class="line"># Ubuntu</span><br><span class="line">$ sudo apt install iftop</span><br></pre></td></tr></table></figure><ol start="2"><li>通过源代码编译安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 安装比较软件包</span><br><span class="line">$ sudo um install libpcap libpcap-devel ncurses ncurses-devel flex byacc</span><br><span class="line"></span><br><span class="line"># 下载软件包</span><br><span class="line">$ wget &quot;http:&#x2F;&#x2F;www.ex-parrot.com&#x2F;~pdw&#x2F;iftop&#x2F;download&#x2F;iftop-0.17.tar.gz&quot;</span><br><span class="line">$ tar zxvf iftop-0.17.tar.gz</span><br><span class="line">$ cd iftop-0.17</span><br><span class="line">$ .&#x2F;configure</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="常用参数">常用参数</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-i 指定需要检测的网卡， 如果有多个网络接口，则需要注意网络接口的选择，如：# iftop -i eth1</span><br><span class="line">-B 将输出以 byte 为单位显示网卡流量，默认是 bit</span><br><span class="line">-n 将输出的主机信息都通过 IP 显示，不进行 DNS 解析 </span><br><span class="line">-N 只显示连接端口号，不显示端口对应的服务名称</span><br><span class="line">-F 显示特定网段的网卡进出流量  如: iftop -F 192.168.85.0&#x2F;24</span><br><span class="line">-h 帮助，显示参数信息</span><br><span class="line">-p 以混杂模式运行 iftop，此时 iftop 可以用作网络嗅探器</span><br><span class="line">-P 显示主机以及端口信息</span><br><span class="line">-m 设置输出界面中最上面的流量刻度最大值，流量刻度分 5 个大段显示  如：# iftop -m 100M</span><br><span class="line">-f 使用筛选码选择数据包来计数  如 iftop -f filter code</span><br><span class="line">-b 不显示流量图形条</span><br><span class="line">-c 指定可选的配置文件，如：iftop  -c config file</span><br><span class="line">-t 使用不带 ncurses 的文本界面，</span><br><span class="line">    以下两个是只和 -t 一起用的：</span><br><span class="line">    -s num num 秒后打印一次文本输出然后退出，-t -s 60 组合使用，表示取 60 秒网络流量输出到终端</span><br><span class="line">    -L num 打印的行数</span><br><span class="line">-f 参数支持 tcpdump 的语法，可以使用各种过滤条件。</span><br></pre></td></tr></table></figure><h2><span id="界面操作">界面操作</span></h2><ol><li>界面信息</li></ol><p>安装完 <code>iftop</code> 工具后，直接输入 <code>iftop</code> 命令即可显示网卡实时流量信息。在默认情况下，<code>iftop</code> 显示系统第一块网卡的流量信息，如果要显示指定网卡信息，可通过<code>“-i”</code>参数实现。执行<code>“iftop -P -i eth0”</code>命令，得到如下图所示的 <code>iftop</code> 的一个典型输出界面。</p><ul><li><p>第一部分</p><ul><li>iftop 输出中最上面的一行，此行信息是流量刻度，用于显示网卡带宽流量。</li></ul></li><li><p>第二部分</p><ul><li>此部分为分割线中间的部分，其中又分别分为左、中、右三列。左列和中列，记录了哪些 IP 或主机正在和本机的网络进行连接。其中，中列的“=&gt;”代表发送数据，“&lt;=”代表接收数据，通过这个指示箭头可以很清晰地知道两个 IP 之间的通信情况。最右列又分为三小列，这些实时参数分别表示外部 IP 连接到本机 2 秒内、10 秒内和 40 秒内的平均流量值。</li><li>另外，这个部分还有一个流量图形条，流量图形条是对流量大小的动态展示，以第一部分中的流量刻度为基准。通过这个流量图形条可以很方便地看出哪个 IP 的流量最大，进而迅速定位网络中可能出现的流量问题。</li></ul></li><li><p>第三部分</p><ul><li>位于 iftop 输出的最下面，可以分为三行，其中，“TX”表示发送数据，“RX”表示接收数据，“TOTAL”表示发送和接收全部流量。与这三行对应的有三列，其中“cum”列表示从运行 iftop 到目前的发送、接收和总数据流量。“peak”列表示发送、接收以及总的流量峰值。“rates”列表示过去 2s、10s、40s 的平均流量值。</li></ul></li></ul><p><img src="https://img.hi-linux.com/staticfile/linux-network-iftop-tools-1-2021-02-22-uOPjUB.png" alt></p><ol start="2"><li>交互操作</li></ol><p>在 <code>iftop</code> 的实时监控界面中，还可以对输出结果进行交互式操作，用于对输出信息进行整理和过滤，在上图所示界面中，按键 <code>“h”</code> 即可进入交互选项界面，如下图所示。<code>iftop</code> 的交互功能和 <code>Linux</code> 下的 <code>top</code> 命令非常类似，交互参数主要分为 <code>4</code> 个部分，分别是一般参数、主机显示参数、端口显示参数和输出排序参数。相关参数的含义如下表所示。</p><p><img src="https://img.hi-linux.com/staticfile/linux-network-iftop-tools-2-2021-02-22-wisbVN.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">参数      含义</span><br><span class="line">P        通过此键可切换暂停/继续显示</span><br><span class="line">h        通过此键可在交互参数界面/状态输出界面之间来回切换</span><br><span class="line">b        通过此键可切换是否显示平均流量图形条</span><br><span class="line">B        通过此键可切换显示2秒、10秒、40秒内的平均流量</span><br><span class="line">T        通过此键可切换是否显示每个连接的总流量</span><br><span class="line">j/k      按j键或k键可以向上或向下滚动屏幕显示当前的连接信息</span><br><span class="line">l        通过此键可打开iftop输出过滤功能，比如输入要显示的IP，按回车后，屏幕就只显示与这个IP相关的流量信息</span><br><span class="line">L        通过此键可切换显示流量刻度范围，刻度不同，流量图形条会跟着变化</span><br><span class="line">q        通过此键可退出iftop流量监控界面</span><br><span class="line">n        通过此键可使iftop输出结果以IP或主机名的方式显示</span><br><span class="line">s        通过此键可切换是否显示源主机信息</span><br><span class="line">d        通过此键可切换是否显示远端目标主机信息</span><br><span class="line">t        通过此键可切换iftop显示格式，连续按此键可依次显示：以两行显示发送接收流量、以一行显示发送接收流量、只显示发送流量/接收流量</span><br><span class="line">N        通过此键可切换显示端口号/端口号对应服务名称</span><br><span class="line">S        通过此键可切换是否显示本地源主机的端口信息</span><br><span class="line">D        通过此键可切换是否显示远端目标主机的端口信息</span><br><span class="line">p        通过此键可切换是否显示端口信息</span><br><span class="line">1/2/3    根据最近 2 秒、10 秒、40 秒的平均网络流量排序</span><br><span class="line">&lt;        通过此键可根据左边的本地主机名或IP地址进行排序</span><br><span class="line">&gt;        通过此键可根据远端目标主机的主机名或IP地址进行排序</span><br><span class="line">o        通过此键可切换是否固定显示当前的连接</span><br></pre></td></tr></table></figure><h2><span id="使用示例">使用示例</span></h2><ol><li>显示网卡 eth0 的信息，主机通过 ip 显示</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iftop -i eth0 -n</span><br></pre></td></tr></table></figure><ol start="2"><li>显示端口号（添加 -P 参数，进入界面可通过 p 参数关闭）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iftop -i eth0 -n -P</span><br></pre></td></tr></table></figure><ol start="3"><li>显示将输出以 byte 为单位显示网卡流量,默认是 bit</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iftop -i eth0 -n -B</span><br></pre></td></tr></table></figure><ol start="4"><li>显示流量进度条</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## 进入界面后按下 L </span><br><span class="line">$ iftop -i eth0 -n</span><br></pre></td></tr></table></figure><ol start="5"><li>显示每个连接的总流量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## 进入界面后按下 T</span><br><span class="line">$ iftop -i eth0 -n</span><br></pre></td></tr></table></figure><ol start="6"><li>显示指定 ip 172.17.1.158 的流量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进入界面后按下 l 后,再输入 172.17.1.158 并回车)</span><br><span class="line">$ iftop -i eth0 -n</span><br></pre></td></tr></table></figure><h2><span id="实战">实战</span></h2><p>下面我们将通过找出最费流量的 IP 和端口号这一具体实例，来演示 iftop 强大的功能。</p><ol><li>进入界面</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iftop -i eth0 -nNB -m 10M</span><br></pre></td></tr></table></figure><ul><li>-i 指定网卡，</li><li>-n 代表主机通过ip显示不走DNS</li><li>-N 只显示连接端口号，不显示端口对应的服务名称(不加会显示如ssh这样的服务名称，不便于排查)</li><li>-B 指定显示单位为Kb，默认是bit，太小！</li><li>-m 设置输出界面中最上面的流量刻度最大值，流量刻度分5个大段显示</li></ul><p>进入后界面如下:</p><p><img src="https://img.hi-linux.com/staticfile/662544-20190409210125203-1972088283-2021-02-22-Dr2ib3.png" alt="img"></p><ol start="2"><li>按下 L 显示流量刻度</li></ol><p>L 参数直接显示进度条，方便人类阅读。</p><p><img src="https://img2018.cnblogs.com/blog/662544/201904/662544-20190409210311438-298086268.png" alt="img"></p><ol start="3"><li>按下 T 显示总量</li></ol><p>有个总数统计，看着方便！</p><p><img src="https://img.hi-linux.com/staticfile/662544-20190409210410810-1883429367-2021-02-22-ncetd0.png" alt="img"></p><ol start="4"><li>按下 3，根据最近 40s 统计排序</li></ol><p>用平均值来统计最权威点</p><p><img src="https://img.hi-linux.com/staticfile/662544-20190409210518173-21025455-2021-02-22-ePqAU2.png" alt="img"></p><ol start="5"><li>按下 t，发送和接受合成一行</li></ol><p><img src="https://img.hi-linux.com/staticfile/662544-20190409210625919-169291969-2021-02-22-6qL0Op.png" alt="img"></p><ol start="6"><li>多按几次 B，查看最近 2s、10s、40s 的统计</li></ol><p><img src="https://img2018.cnblogs.com/blog/662544/201904/662544-20190409211010423-1486003558.png" alt="img"></p><p>没错，图中的 172.17.1.158 就是我们找到的流量用得最多的 IP</p><ol start="7"><li>筛选指定 IP 172.17.1.158</li></ol><p>按下 l, 输入172.17.1.158，出现如下</p><p><img src="https://img.hi-linux.com/staticfile/662544-20190409211215269-1603240397-2021-02-22-l1x0Jt.png" alt="img"></p><p>回车后生效</p><p><img src="https://img2018.cnblogs.com/blog/662544/201904/662544-20190409211236275-1078452279.png" alt="img"></p><p>这下就只看到这个 IP 的流量监控了</p><ol start="8"><li>找到这个 IP 哪个端口流量用得最多</li></ol><p>按下 p, 根据端口号显示</p><p><img src="https://img.hi-linux.com/staticfile/662544-20190409211529439-1633640505-2021-02-22-NTAMbf.png" alt="img"></p><p>到这里，我们就学会了如何找出流量用得最多的 IP 和端口号。</p><blockquote><p>本文转载自：「 博客园 」，原文：<a href="http://t.cn/A6tM3oLg" target="_blank" rel="noopener">http://t.cn/A6tM3oLg</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;iftop-是什么&quot;&gt;iftop 是什么&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Linux 系统下即时监控服务器的网络带宽使用情况，有很多工具，比如 iptraf、nethogs 等等，但是推荐使用小巧但功能很强大的 iftop 工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;iftop 是 Linux 系统一个免费的网卡实时流量监控工具，类似于 top 命令。iftop 可以监控指定网卡的实时流量、端口连接信息、反向解析 IP 等，还可以精确显示本机网络流量及网络内各主机和本机相互通信的流量集合，非常适合于监控代理服务器或路由器的网络流量。同时，iftop 对检测流量异常的主机非常有效，通过 iftop 的输出可以迅速定位主机流量异常的根源，这对于网络故障排查、网络安全检测是十分有用的。缺点就是无报表功能，且必须以 root 身份才能运行。&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;http://www.ex-parrot.com/~pdw/iftop/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.ex-parrot.com/~pdw/iftop/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;通过软件管理工具安装&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# CentOS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo yum install iftop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt install iftop&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;通过源代码编译安装&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 安装比较软件包&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo um install libpcap libpcap-devel ncurses ncurses-devel flex byacc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 下载软件包&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ wget &amp;quot;http:&amp;#x2F;&amp;#x2F;www.ex-parrot.com&amp;#x2F;~pdw&amp;#x2F;iftop&amp;#x2F;download&amp;#x2F;iftop-0.17.tar.gz&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ tar zxvf iftop-0.17.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cd iftop-0.17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ .&amp;#x2F;configure&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ make &amp;amp;&amp;amp; make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="iftop" scheme="https://www.hi-linux.com/tags/iftop/"/>
    
  </entry>
  
  <entry>
    <title>如何在不重建镜像情况下优雅的修改容器内容</title>
    <link href="https://www.hi-linux.com/posts/49989.html"/>
    <id>https://www.hi-linux.com/posts/49989.html</id>
    <published>2021-03-19T01:00:00.000Z</published>
    <updated>2021-03-19T01:12:00.006Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>现在我们使用容器非常频繁，偶尔有一些需求需要更改容器镜像中的一些行为，也许是一个很小的变化，一般我们能想到的就是重新构建镜像，但是这个我们就需要重新构建发布镜像了，除了构建镜像这种方式之外其实还有其他方式可以来实现这个需求。</p><h2><span id="初始化容器">初始化容器</span></h2><p>Init Containers 是为了给 Pod 中定义的主容器提供附加功能的。它们在主容器之前执行，可以使用不同的容器镜像，如果出现任何故障，它们将阻止主容器的启动，所有的日志都可以很容易查看到，故障排除也相当简单，它们就像在 Pod 中定义的任何其他容器一样。这种方法在数据库等服务中比较常用，可以根据配置参数对它们进行初始化和配置。</p><p>下面的例子使用一个 <code>emptyDir</code> 来存储由初始化容器初始化的数据。在这个示例，它只是一个简单的 <code>echo</code> 命令，在实际的生产环境中，可能是一个脚本，做一些更复杂的事情。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">  name: nginx-init</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      initContainers:</span><br><span class="line">        - name: prepare-webpage</span><br><span class="line">          image: busybox:1.28</span><br><span class="line">          command: [&quot;sh&quot;, &quot;-c&quot;]</span><br><span class="line">          args: [</span><br><span class="line">              &quot;set -x;</span><br><span class="line">              echo &#39;&lt;h2&gt;Page prepared by an init container&lt;&#x2F;h2&gt;&#39; &gt; &#x2F;web&#x2F;index.html;</span><br><span class="line">              echo &#39;Init finished successfully&#39;</span><br><span class="line">              &quot;,</span><br><span class="line">            ]</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - mountPath: &#x2F;web</span><br><span class="line">              name: web</span><br><span class="line">      containers:</span><br><span class="line">        - image: nginx:1.19</span><br><span class="line">          name: nginx</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - mountPath: &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;</span><br><span class="line">              name: web</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">              name: http</span><br><span class="line">      volumes:</span><br><span class="line">        - name: web</span><br><span class="line">          emptyDir: &#123;&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="poststart-hook">PostStart Hook</span></h2><p>post-start hook 可用于在主容器启动后执行一些操作，它可以是在与容器相同的上下文中执行的脚本，也可以是针对定义的端点执行的 HTTP 请求，但是，<strong>不能保证回调会在容器入口点（ENTRYPOINT）之前执行</strong>。在大多数情况下，它可能是一个 shell 脚本，Pod一直保持在<code>ContainerCreating</code> 状态，直到这个脚本结束。由于没有可用的日志，所以调试起来可能很棘手。这个方法最大的特点是，当主容器中的服务启动时，脚本就会被执行，并且可以用来与服务进行交互，通过适当的 <code>readinessProbe</code> 配置，这可以提供一种很好的方式，在允许任何请求之前初始化应用程序。在下面的例子中，一个启动后的钩子会执行 echo 命令，但同样这可以是任何使用容器文件系统上可用的同一组文件来执行某种初始化的东西。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">  name: nginx-hook</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - image: nginx:1.19</span><br><span class="line">          name: nginx</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">              name: http</span><br><span class="line">          lifecycle:</span><br><span class="line">            postStart:</span><br><span class="line">              exec:</span><br><span class="line">                command:</span><br><span class="line">                  [</span><br><span class="line">                    &quot;sh&quot;,</span><br><span class="line">                    &quot;-c&quot;,</span><br><span class="line">                    &quot;sleep 5;set -x; echo &#39;&lt;h2&gt;Page prepared by a PostStart hook&lt;&#x2F;h2&gt;&#39; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html&quot;,</span><br><span class="line">                  ]</span><br></pre></td></tr></table></figure><h2><span id="sidecar-容器">Sidecar 容器</span></h2><p>这种方法利用了 Pod 的概念 - <strong>多个容器同时运行、共享 IPC 和网络命名空间</strong>。在 Kubernetes 生态系统中，它已经被 Istio、Consul Connect 等项目广泛使用。这里的假设是所有容器同时运行，这使得使用 sidecar 容器来修改主容器的行为变得有点棘手。但这是可行的，它可以用来与正在运行的应用程序或服务进行交互。我在 Jenkins Helm Chart 中使用了这个功能，其中有一个 sidecar 容器负责读取 ConfigMap 对象和 <code>Configuration-as-Code</code> 配置项。</p><p>在下面示例中同样只是使用 echo 这个命令，不过需要注意的是，因为 sidecar 容器必须遵循 restartPolicy 设置，所以这个容器在完成动作后还必须处于运行状态，示例中我们使用的是一个简单的 while 无限循环，在实际环境中，往往会是一个小的守护进程，像服务一样一直运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">  name: nginx-sidecar</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - image: nginx:1.19</span><br><span class="line">          name: nginx</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - mountPath: &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;</span><br><span class="line">              name: web</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">              name: http</span><br><span class="line">        - name: prepare-webpage</span><br><span class="line">          image: busybox:1.28</span><br><span class="line">          command: [&quot;sh&quot;, &quot;-c&quot;]</span><br><span class="line">          args: [</span><br><span class="line">              &quot;set -x;</span><br><span class="line">              echo &#39;&lt;h2&gt;Page prepared by a sidecar container&lt;&#x2F;h2&gt;&#39; &gt; &#x2F;web&#x2F;index.html;</span><br><span class="line">              while :;do sleep 9999;done</span><br><span class="line">              &quot;,</span><br><span class="line">            ]</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - mountPath: &#x2F;web</span><br><span class="line">              name: web</span><br><span class="line">      volumes:</span><br><span class="line">        - name: web</span><br><span class="line">          emptyDir: &#123;&#125;</span><br></pre></td></tr></table></figure><h2><span id="entrypoint">EntryPoint</span></h2><p>最后一种方法使用相同的容器镜像，与 PostStart Hook 类似，只是它在主应用程序或服务之前运行。我们在容器镜像中都定义一个<code>ENTRYPOINT</code> 命令，我们可以利用它来执行一些脚本，这种方式经常被很多官方镜像所使用，在这种方法中，我们只需要预置自己的脚本来修改主容器的行为。在实际生产环境中，其实我们可以提供一个修改后的原始入口点文件。</p><p>这个方法相对复杂一点，需要创建一个 ConfigMap，其中包含一个脚本内容，在主入口点之前执行。如下所示我们修改 nginx 入口点的脚本，然后嵌入到下面的 ConfigMap 中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: scripts</span><br><span class="line">data:</span><br><span class="line">  prestart-script.sh: |-</span><br><span class="line">    #!&#x2F;usr&#x2F;bin&#x2F;env bash</span><br><span class="line">    echo &#39;&lt;h2&gt;Page prepared by a script executed before entrypoint container&lt;&#x2F;h2&gt;&#39; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br><span class="line">    # 这是 &quot;ENTRYPOINT CMD &quot;从主容器镜像定义中提取出来的</span><br><span class="line">    exec &#x2F;docker-entrypoint.sh nginx -g &quot;daemon off;&quot;</span><br></pre></td></tr></table></figure><p>有一点非常重要，就是最后一行与 exec，它执行的是原始的入口点脚本，必须与 Dockerfile 中定义的脚本完全匹配，在这种情况下，它需要额外的参数，这些参数是在 CMD 中定义的。现在让我们定义一下 Deployment 资源对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">  name: nginx-script</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - image: nginx:1.19</span><br><span class="line">          name: nginx</span><br><span class="line">          command: [&quot;bash&quot;, &quot;-c&quot;, &quot;&#x2F;scripts&#x2F;prestart-script.sh&quot;]</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">              name: http</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - mountPath: &#x2F;scripts</span><br><span class="line">              name: scripts</span><br><span class="line">      volumes:</span><br><span class="line">        - name: scripts</span><br><span class="line">          configMap:</span><br><span class="line">            name: scripts</span><br><span class="line">            defaultMode: 0755 # &lt;- 这个很重要</span><br></pre></td></tr></table></figure><p>我们用命令覆盖入口点，我们还必须确保我们的脚本是以适当的权限挂载的（因此需要定义 defaultMode）。</p><h2><span id="总结">总结</span></h2><p>现在我们来总结下上面几种方式的差异。</p><p><img src="https://img.hi-linux.com/staticfile/640-2021-01-28-L0Y5IQ.png" alt="图片"></p><p>容器讲究的是可重用性，很多时候做一些小的调整，不需要重新构建整个容器的镜像，这样发布和维护就会轻松很多。</p><p>原文链接：<a href="https://cloudowski.com/articles/how-to-modify-containers-wihtout-rebuilding/" target="_blank" rel="noopener">https://cloudowski.com/articles/how-to-modify-containers-wihtout-rebuilding/</a></p><blockquote><p>本文转载自：「 k8s技术圈 」，原文：<a href="http://t.cn/A65IGVpX%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">http://t.cn/A65IGVpX，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在我们使用容器非常频繁，偶尔有一些需求需要更改容器镜像中的一些行为，也许是一个很小的变化，一般我们能想到的就是重新构建镜像，但是这个我们就需要重新构建发布镜像了，除了构建镜像这种方式之外其实还有其他方式可以来实现这个需求。&lt;/p&gt;
&lt;h2 id=&quot;初始化容器&quot;&gt;初始化容器&lt;/h2&gt;
&lt;p&gt;Init Containers 是为了给 Pod 中定义的主容器提供附加功能的。它们在主容器之前执行，可以使用不同的容器镜像，如果出现任何故障，它们将阻止主容器的启动，所有的日志都可以很容易查看到，故障排除也相当简单，它们就像在 Pod 中定义的任何其他容器一样。这种方法在数据库等服务中比较常用，可以根据配置参数对它们进行初始化和配置。&lt;/p&gt;
&lt;p&gt;下面的例子使用一个 &lt;code&gt;emptyDir&lt;/code&gt; 来存储由初始化容器初始化的数据。在这个示例，它只是一个简单的 &lt;code&gt;echo&lt;/code&gt; 命令，在实际的生产环境中，可能是一个脚本，做一些更复杂的事情。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apiVersion: apps&amp;#x2F;v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kind: Deployment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;metadata:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  labels:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    app: nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name: nginx-init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spec:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  selector:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    matchLabels:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      app: nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  template:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    metadata:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      labels:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        app: nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    spec:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      initContainers:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        - name: prepare-webpage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          image: busybox:1.28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          command: [&amp;quot;sh&amp;quot;, &amp;quot;-c&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          args: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;quot;set -x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              echo &amp;#39;&amp;lt;h2&amp;gt;Page prepared by an init container&amp;lt;&amp;#x2F;h2&amp;gt;&amp;#39; &amp;gt; &amp;#x2F;web&amp;#x2F;index.html;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              echo &amp;#39;Init finished successfully&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          volumeMounts:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            - mountPath: &amp;#x2F;web&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              name: web&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      containers:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        - image: nginx:1.19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          name: nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          volumeMounts:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            - mountPath: &amp;#x2F;usr&amp;#x2F;share&amp;#x2F;nginx&amp;#x2F;html&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              name: web&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ports:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            - containerPort: 80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              name: http&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      volumes:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        - name: web&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          emptyDir: &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/categories/kubernetes/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>小白也能看懂的网络基础 | 01 什么是网络？</title>
    <link href="https://www.hi-linux.com/posts/35925.html"/>
    <id>https://www.hi-linux.com/posts/35925.html</id>
    <published>2021-03-17T01:00:00.000Z</published>
    <updated>2021-03-17T02:02:47.313Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2><span id="引言">引言</span></h2><p>欢迎来到网络世界，《小白也能看懂的网络基础》系列文章会从零开始帮助你构建网络的基础知识。如果你完全没有接触过网络相关的内容，那我们是一样的，在学习过程中我们肯定遇到了相同的问题！写下这些文章一方面要记录自己的学习历程，另一方面也希望帮到同样想要学习网络基础的小伙伴。</p><p>文章的部分内容与素材是我从【Youtube平台】的【<a href="https://www.youtube.com/channel/UCtuXekfqj-paqsxtqVNCC2A" target="_blank" rel="noopener">Network Direction</a>】发布的系列视频学习和搜集过来的，翻译不易，部分内容可能无法做到尽善尽美，甚至可能会有部分瑕疵，我会尽力让文章内容通俗易懂，覆盖全面。若各位小伙伴发现任何问题，希望能够留言或私信告诉我，在下不胜感激！当然，我也会在第一时间进行更正。</p><p>在往后的每一篇文章中，我都会把看到文章的小伙伴当成是完全没有网络经验的小白，我的目标是和零基础小白一起建立坚实的网络基础，网络大神请略过此系列文章。</p><p>让我们开始网络之旅吧！</p><a id="more"></a><h2><span id="什么是网络">什么是网络</span></h2><p><img src="https://img.hi-linux.com/staticfile/1-2021-03-15-L9ffCR.png" alt="你身边的网络设备"></p><p>网络其实存在于我们日常生活中的每一个角落！你的 <strong>电脑</strong>，<strong>打印机</strong>，<strong>手机，甚至电视</strong> 等等都属于网络设备。通常，我们需要将这些设备通过网络连接起来，这样就可以实现数据的传输和共享，让我们的工作生活更加便捷。</p><p><img src="https://img.hi-linux.com/staticfile/ebdeae9ed432126dd50bc72f5a06836d-20210315105021092-2021-03-15-PmrY9L.gif" alt="协同办公"></p><p>如果我们的连接没有问题，就可以通过电脑给打印机发送指令，让它帮我们打印资料；或者将资料存储到我们的本地服务器；当然，也可以发布文章或视频到互联网上。</p><p>可问题是，我们虽然平时都在进行这些日常操作，可我们却并没有意识到网络的存在，或者说，我们并不太清楚这内部的工作流程与细节。我们之所以可以通过网络 <strong>浏览视频</strong>、<strong>下载资料</strong>、<strong>发送邮件或与朋友视频聊天</strong>，其实都是网络设备之间默契配合的结果。</p><h3><span id="1交换机">1.交换机</span></h3><p>那么，我们靠什么来连接这些网络设备呢？<strong>「交换机」</strong>，同时需要配合设备线缆，即可实现设备间的互连互通。</p><p><img src="https://img.hi-linux.com/staticfile/2ddd34d27eabbad32baecbcad5cdae84-2021-03-15-TI9cMz.gif" alt="交换机"></p><p>举个例子，公司办公室或学校教室里的电脑，大都可以使用网线来连接到墙上或其他位置的一个的网线接口中，而网线接口后面则是通过线缆又连接到了配线架上，这个配线架一般都放在一个单独的房间或柜子里面，接着，只需要再将配线架和 <strong>「交换机」</strong> 相连，即可实现一个最基础的网络连接。</p><p><img src="https://img.hi-linux.com/staticfile/dd01e6374c892d0e05d1daea412c09d1-2021-03-15-HlhmEP.gif" alt></p><p>对于 <strong>「交换机」</strong>，普通的家庭用户可能鲜有耳闻，那是因为，我们通常把线缆直接接到光猫或路由器上了，毕竟，我们家中的网络设备相对较少；但是对于一个企业或学校机构来说，它们的计算机非常多，对于线缆的管理也复杂起来，交换机就可以很好的解决这一问题。（后面的章节我们会详细展开讲解 <strong>「交换机」</strong>）</p><p><img src="https://img.hi-linux.com/staticfile/89b21b958bfac419efca4d53ccde8bce-20210315105036043-2021-03-15-uPdAcu.gif" alt="设备直连交换机"></p><p>当然，如果我们的设备并不是很多，我们也可以直接将线缆连接到交换机上，具体情况还要根据我们的设备与线缆的多少来决定的。</p><h3><span id="2无线连接">2.无线连接</span></h3><p>现实情况就是，除了台式机，我们最常用的就是移动设备了，手机，移动笔记本，平板电脑这些设备大都不需要使用线缆，也同样可以实现网络连接，这就是通过所谓的 <strong>「无线连接技术（Wi-Fi）」</strong>，来实现的。有了它，我们就可以在 Wi-Fi 覆盖的范围内进行无线上网了。</p><p><img src="https://img.hi-linux.com/staticfile/0a6a4a7ace20c645c48ef49557ea6e21-2021-03-15-1g9cKp.gif" alt="无线连接"></p><p>如果把无线设备也连接到交换机，我们就可以实现在一个局部网络中共享有线与无线设备的内容了，比如，将手机上的信息传输到打印机以实现数据打印；需要注意的是，无线连接与有线连接在数据传输速度上会有区别。</p><p><img src="https://img.hi-linux.com/staticfile/aba7496ed6f084b43453b06acdaf6bc4-2021-03-15-nAweir.gif" alt="无线设备连接到本地网络"></p><p>我在公司的对于移动设备的使用情况是这样的，当我坐在办公位上办公，我会使用有线连接，毕竟这样速度更快；但如果要开会的话，我就会把电脑网线拔了，拿着赤裸裸的笔记本去会议室，然后连接到无线网络。</p><p><img src="https://img.hi-linux.com/staticfile/3cddaf73995bd37ab5a0546fbb44d4f2-20210315105046323-2021-03-15-Og9QF7.gif" alt="真实办公场景"></p><h3><span id="3网络协议">3.网络协议</span></h3><p>无论通过哪种方式进行连接，我们的最终目的，是要将信息从一台设备发送到另一台设备，因此，发送方和接收方必须相互理解才行，这就需要它们在网络中说相同的语言。虽然我们并不需要担心这个问题，毕竟设备之间基本都知道该如何组织数据并进行处理和发送。究其根本，就是因为他们都遵循了同一套规则，我们称这套规则为 <strong>「协议」</strong>。</p><p><img src="https://img.hi-linux.com/staticfile/e6d3cae0de6b53d54e8c1d9cf8c5bd66-20210315105057137-2021-03-15-TWZaLk.gif" alt="网络协议"></p><p>协议，就是 <strong>「给双方制定的通讯规则」</strong>，这意味着双方想要默契配合，就必须遵循这些协议，也正因如此，若一方出现问题，我们可以快速准确的定位到问题所在位置。</p><p>在计算机网络中，那些设计网络软件和硬件的工程师会严格遵循这套 <strong>「协议」</strong>，这样才能保证它们再网络中的畅通无阻！大家可能听说过诸如 <strong>「以太网」</strong> 之类的协议，你也可能听说过 <strong>「TCP(用于发送和接收数据)」</strong> 协议，或 **「HTTP(用于访问网络)」**协议，或 <strong>「SMTP(用于邮件收发)」</strong> 协议，后续章节会详细讲解…… 无论哪种协议，其最终目的，都是为了完成数据交互。</p><p><strong>通常，我们都会将几种协议结合使用以完成一项任务。</strong></p><h3><span id="4总结">4.总结</span></h3><ol><li>网络的作用就是将设备连接在一起，可以让设备之间进行资源共享、信息交流等功能</li><li>网络设备之间需要说共同的语言，遵循相同的规则，我们称之为「协议「</li><li>协议就是一组有关设备如何处理信息的指令</li></ol><h3><span id="5小测试">5.小测试</span></h3><ol><li>计算机连接到网络的两种方式分别是什么？</li><li>多个网络设备之间通常使用什么设备进行统一连接？</li><li>当你想通过一台计算机与另一台计算机交互，会应用到哪些协议？</li></ol><h2><span id="网络类型">网络类型</span></h2><p>在本小节，我们将学习以下内容：</p><ol><li>网络中的 <strong>节点</strong> 是什么？</li><li>根据网络节点的不同，我们可以构建哪些 <strong>网络类型</strong> ？</li><li>在我们的日常生活中，不同网络类型的 <strong>实际应用场景</strong> ？</li></ol><h3><span id="1网络节点">1.网络节点</span></h3><p>连接到网络中，并且能够通过通信通道发送、接收或转发信息的设备，我们都可以称其为一个 <strong>「网络节点」</strong>。比如 <strong>交换机</strong>、<strong>路由器</strong>、<strong>电脑</strong>、<strong>打印机</strong>、<strong>手机</strong> 等，都属于网络中的一个节点。</p><h3><span id="2soho网络">2.Soho网络</span></h3><p><img src="https://img.hi-linux.com/staticfile/8845acd31302596cd39383bdceead741-20210315105105464-2021-03-15-iqUHON.gif" alt></p><p>只有几个节点的小型网络，我们可以称之为 <strong>「soho网络」</strong>，小型办公室或家庭办公室中构建的网络都属于 <strong>「soho网络」</strong>。通常是只有几台电脑，打印机，几部手机和平板电脑的小范围内的网络环境。</p><p><img src="https://img.hi-linux.com/staticfile/00480f87a5ef9b3dc953df3b5289dfba-2021-03-15-SfyT2P.gif" alt="交换机"></p><p>值得一提的是，人们经常把「交换机」说成是「中央集线器&quot;，也确实，」交换机「长得的确像」集线器「，但是这里大家请记住，交换机和集线器是完全不同的东西！集线器真的是很老的技术了，我们现在基本上见不到。而交换机是现在非常常用的网络设备，一定要分清楚哦。</p><p><img src="https://img.hi-linux.com/staticfile/8eebc49e3ac319985ca0b27d2c4d2826-2021-03-15-pmqxRF.gif" alt="路由器（集成了交换机、路由器的功能）"></p><p>在soho网络中，我们通常使用路由器来完成网络连接，因为现代的路由器大多集成了路由器、交换机的功能，但通常因为路由器的接口很少，因此我们只能接入少量节点设备实现网络共享。</p><h3><span id="3局域网lan">3.局域网（LAN）</span></h3><p><img src="https://img.hi-linux.com/staticfile/5d27a97a2cd85a9e5e220b3116e3d54b-20210315105115056-2021-03-15-KMcuoy.gif" alt="企业网络"></p><p>但其实在一个公司企业里面，很明显光有一台路由器，一台交换机是远远不够的！例如，一个地方银行企业，他们的网络设备可能遍布几个楼层、甚至跨越多栋楼房，此时，将此规模的网络设备连接在一起的网络，我们称之为 <strong>「局域网(LAN)」</strong>。</p><p><img src="https://img.hi-linux.com/staticfile/b87d933f16478782b83735bd224e3084-20210315105119063-2021-03-15-kcFZQq.gif" alt="局域网 - 1"></p><p>其实」soho网络「也属于局域网，只不过」soho网络「连接了少数设备。而在企业网络中，我们将需要使用多台交换机与路由器的链接，我们可以理解为，就是将多个」soho网络「连接在一起的较大的网络结构。</p><p><img src="https://img.hi-linux.com/staticfile/7e25a032df4756d4570d1f5cf8729c8c-2021-03-15-Ci5T4S.gif" alt="局域网 - 2"></p><h3><span id="4广域网wan">4.广域网（WAN）</span></h3><p>虽然」局域网技术「可以让一个较大区域内的网络节点实现互连互通与信息共享，但如果这个区域再扩大，跨越了城市，跨越了地区该怎么办呢？就比如一个跨地区的银行企业，通常不会只在一个地区有办公楼，可能在全国各个地区都会有自己的办公楼，此时银行网络变得非常巨大，即使距离遥远，银行企业也想实现让所有的这些网络都连接在一起，此时，我们需要使用到新的网络构建技术 「广域网(WAN)」。</p><p><img src="https://img.hi-linux.com/staticfile/1-20210315104554845-2021-03-15-trNbY6.png" alt="广域网"></p><p>举个例子，假如有一家跨国公司在悉尼和墨尔本都有分公司，我们在悉尼的办公室分享了数据，在墨尔本的办公室想要获取这些数据，在这个过程中，我们就需要联系服务提供商来帮助我们实现远距离数据的交互。</p><p><img src="https://img.hi-linux.com/staticfile/8e390b2a79dc6100405bc23f2522182d-2021-03-15-aPfKtc.gif" alt="悉尼办公室分享数据到墨尔本办公室"></p><h3><span id="5总结">5.总结</span></h3><ol><li><strong>soho网络：</strong> 通常适合家庭或小型办公室</li><li><strong>局域网LAN：</strong> 适合多个楼层的网络架构</li><li><strong>城域网MAN：</strong> 适合10~100km范围内的网络架构</li><li><strong>广域网WAN：</strong> 适合100km以上，通常是跨越国家与地区的大型网络架构</li></ol><h3><span id="6小测试">6.小测试</span></h3><ol><li>你在一家财务部门、工程部门、管理部门各有一个 <strong>局域网LAN</strong> 的公司工作，三个部门的局域网都连接在一起，这个网络仍然是 <strong>局域网LAN</strong> 吗？</li><li>除了总公司，该公司还有六个分公司，那么这家公司的网络连接类型属于哪种网络？</li></ol><h3><span id="结语">结语</span></h3><p>如果你觉得文章很棒，可以转发，评论该文章；如果文章有问题，请留言或私信告诉我，我会在第一时间对内容进行调整，这将会帮助每一位想要学习网络基础的小伙伴，感谢！抱拳！</p><h4><span id="原作者">原作者：</span></h4><ul><li>原文作者：Network Direction</li><li>链接地址：<a href="https://www.youtube.com/watch?v=v8aYhOxZuNg&amp;list=PLDQaRcbiSnqF5U8ffMgZzS7fq1rHUI3Q8&amp;index=16&amp;t=28s" target="_blank" rel="noopener">点击查看</a></li></ul><blockquote><p>本文转载自：「 少数派 」，原文：<a href="https://sspai.com/post/64634" target="_blank" rel="noopener">https://sspai.com/post/64634</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;欢迎来到网络世界，《小白也能看懂的网络基础》系列文章会从零开始帮助你构建网络的基础知识。如果你完全没有接触过网络相关的内容，那我们是一样的，在学习过程中我们肯定遇到了相同的问题！写下这些文章一方面要记录自己的学习历程，另一方面也希望帮到同样想要学习网络基础的小伙伴。&lt;/p&gt;
&lt;p&gt;文章的部分内容与素材是我从【Youtube平台】的【&lt;a href=&quot;https://www.youtube.com/channel/UCtuXekfqj-paqsxtqVNCC2A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Network Direction&lt;/a&gt;】发布的系列视频学习和搜集过来的，翻译不易，部分内容可能无法做到尽善尽美，甚至可能会有部分瑕疵，我会尽力让文章内容通俗易懂，覆盖全面。若各位小伙伴发现任何问题，希望能够留言或私信告诉我，在下不胜感激！当然，我也会在第一时间进行更正。&lt;/p&gt;
&lt;p&gt;在往后的每一篇文章中，我都会把看到文章的小伙伴当成是完全没有网络经验的小白，我的目标是和零基础小白一起建立坚实的网络基础，网络大神请略过此系列文章。&lt;/p&gt;
&lt;p&gt;让我们开始网络之旅吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络" scheme="https://www.hi-linux.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="网络" scheme="https://www.hi-linux.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅的给 Docker 配置网络代理</title>
    <link href="https://www.hi-linux.com/posts/32693.html"/>
    <id>https://www.hi-linux.com/posts/32693.html</id>
    <published>2021-03-15T01:00:00.000Z</published>
    <updated>2021-03-15T01:28:03.518Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>有时因为网络原因，比如公司 NAT，或其它啥的，需要使用代理。 <code>Docker</code> 的代理配置，略显复杂，因为有三种场景。 但基本原理都是一致的，都是利用 <code>Linux</code> 的 <code>http_proxy</code> 等环境变量。</p><h2><span id="dockerd-代理">Dockerd 代理</span></h2><p>在执行<code>docker pull</code>时，是由守护进程<code>dockerd</code>来执行。 因此，代理需要配在<code>dockerd</code>的环境中。 而这个环境，则是受<code>systemd</code>所管控，因此实际是<code>systemd</code>的配置。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line">sudo touch /etc/systemd/system/docker.service.d/proxy.conf</span><br></pre></td></tr></table></figure><p>在这个<code>proxy.conf</code>文件（可以是任意<code>*.conf</code>的形式）中，添加以下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">"HTTP_PROXY=http://proxy.example.com:8080/"</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">"HTTPS_PROXY=http://proxy.example.com:8080/"</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">"NO_PROXY=localhost,127.0.0.1,.example.com"</span></span><br></pre></td></tr></table></figure><p>其中，<code>proxy.example.com:8080</code> 要换成可用的免密代理。 通常使用 <code>cntlm</code> 在本机自建免密代理，去对接公司的代理。 可参考《<a href="https://note.qidong.name/content/2018/11/cntlm-proxy/" target="_blank" rel="noopener">Linux下安装配置Cntlm代理</a>》。</p><a id="more"></a><h2><span id="container-代理">Container 代理</span></h2><p>在容器运行阶段，如果需要代理上网，则需要配置 <code>~/.docker/config.json</code>。 以下配置，只在Docker 17.07及以上版本生效。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"proxies"</span>:</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="attr">"default"</span>:</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">"httpProxy"</span>: <span class="string">"http://proxy.example.com:8080"</span>,</span><br><span class="line">     <span class="attr">"httpsProxy"</span>: <span class="string">"http://proxy.example.com:8080"</span>,</span><br><span class="line">     <span class="attr">"noProxy"</span>: <span class="string">"localhost,127.0.0.1,.example.com"</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是用户级的配置，除了 <code>proxies</code>，<code>docker login</code> 等相关信息也会在其中。 而且还可以配置信息展示的格式、插件参数等。</p><p>此外，容器的网络代理，也可以直接在其运行时通过 <code>-e</code> 注入 <code>http_proxy</code> 等环境变量。 这两种方法分别适合不同场景。 <code>config.json</code> 非常方便，默认在所有配置修改后启动的容器生效，适合个人开发环境。 在CI/CD的自动构建环境、或者实际上线运行的环境中，这种方法就不太合适，用 <code>-e</code> 注入这种显式配置会更好，减轻对构建、部署环境的依赖。 当然，在这些环境中，最好用良好的设计避免配置代理上网。</p><h2><span id="docker-build-代理">Docker Build 代理</span></h2><p>虽然 <code>docker build</code> 的本质，也是启动一个容器，但是环境会略有不同，用户级配置无效。 在构建时，需要注入 <code>http_proxy</code> 等参数。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker build . \</span><br><span class="line">    --build-arg <span class="string">"HTTP_PROXY=http://proxy.example.com:8080/"</span> \</span><br><span class="line">    --build-arg <span class="string">"HTTPS_PROXY=http://proxy.example.com:8080/"</span> \</span><br><span class="line">    --build-arg <span class="string">"NO_PROXY=localhost,127.0.0.1,.example.com"</span> \</span><br><span class="line">    -t your/image:tag</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：无论是 <code>docker run</code> 还是 <code>docker build</code>，默认是网络隔绝的。 如果代理使用的是 <code>localhost:3128</code> 这类，则会无效。 这类仅限本地的代理，必须加上 <code>--network host</code> 才能正常使用。 而一般则需要配置代理的外部IP，而且代理本身要开启 Gateway 模式。</p><h2><span id="重启生效">重启生效</span></h2><p>代理配置完成后，<code>reboot</code> 重启当然可以生效，但不重启也行。</p><p><code>docker build</code> 代理是在执行前设置的，所以修改后，下次执行立即生效。 Container 代理的修改也是立即生效的，但是只针对以后启动的 Container，对已经启动的 Container 无效。</p><p><code>dockerd</code> 代理的修改比较特殊，它实际上是改 <code>systemd</code> 的配置，因此需要重载 <code>systemd</code> 并重启 <code>dockerd</code> 才能生效。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2><span id="参考">参考</span></h2><ul><li><a href="https://docs.docker.com/config/daemon/systemd/" target="_blank" rel="noopener">Control Docker with systemd | Docker Documentation</a></li><li><a href="https://docs.docker.com/network/proxy/" target="_blank" rel="noopener">Configure Docker to use a proxy server | Docker Documentation</a></li><li><a href="https://docs.docker.com/engine/reference/commandline/cli/" target="_blank" rel="noopener">Use the Docker command line | Docker Documentation</a></li></ul><blockquote><p>本文转载自：「 零壹軒·笔记 」，原文：<a href="http://t.cn/A6tMEC2k" target="_blank" rel="noopener">http://t.cn/A6tMEC2k</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时因为网络原因，比如公司 NAT，或其它啥的，需要使用代理。 &lt;code&gt;Docker&lt;/code&gt; 的代理配置，略显复杂，因为有三种场景。 但基本原理都是一致的，都是利用 &lt;code&gt;Linux&lt;/code&gt; 的 &lt;code&gt;http_proxy&lt;/code&gt; 等环境变量。&lt;/p&gt;
&lt;h2 id=&quot;Dockerd-代理&quot;&gt;Dockerd 代理&lt;/h2&gt;
&lt;p&gt;在执行&lt;code&gt;docker pull&lt;/code&gt;时，是由守护进程&lt;code&gt;dockerd&lt;/code&gt;来执行。 因此，代理需要配在&lt;code&gt;dockerd&lt;/code&gt;的环境中。 而这个环境，则是受&lt;code&gt;systemd&lt;/code&gt;所管控，因此实际是&lt;code&gt;systemd&lt;/code&gt;的配置。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo mkdir -p /etc/systemd/system/docker.service.d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo touch /etc/systemd/system/docker.service.d/proxy.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个&lt;code&gt;proxy.conf&lt;/code&gt;文件（可以是任意&lt;code&gt;*.conf&lt;/code&gt;的形式）中，添加以下内容：&lt;/p&gt;
&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;[Service]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Environment&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;HTTP_PROXY=http://proxy.example.com:8080/&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Environment&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;HTTPS_PROXY=http://proxy.example.com:8080/&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Environment&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;NO_PROXY=localhost,127.0.0.1,.example.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中，&lt;code&gt;proxy.example.com:8080&lt;/code&gt; 要换成可用的免密代理。 通常使用 &lt;code&gt;cntlm&lt;/code&gt; 在本机自建免密代理，去对接公司的代理。 可参考《&lt;a href=&quot;https://note.qidong.name/content/2018/11/cntlm-proxy/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Linux下安装配置Cntlm代理&lt;/a&gt;》。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.hi-linux.com/categories/docker/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>6 个超实用的 Sudo 命令使用技巧</title>
    <link href="https://www.hi-linux.com/posts/31636.html"/>
    <id>https://www.hi-linux.com/posts/31636.html</id>
    <published>2021-03-12T01:00:00.000Z</published>
    <updated>2021-03-12T01:16:18.933Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><blockquote><p><strong>Sudo 授权需谨慎，否则亲人两行泪！</strong></p></blockquote><p><code>sudo</code> 表示 <code>“superuser do”</code>，它允许已验证的用户以其他用户的身份来运行命令。其他用户可以是普通用户或者超级用户。然而，大部分时候我们用它来提权运行命令，以替代直接使用 <code>root</code> 用户的操作。<code>sudo</code> 命令与安全策略配合使用，安全策略可以通过文件 <code>/etc/sudoers</code> 来配置。其安全策略具有高度可拓展性，支持插件扩展。默认情况下 <code>/etc/sudoers</code> 是不能被任何人直接编辑的，因为它的权限是 <code>440</code>，虽然也可以对其赋予写权限后再编辑，但推荐使用 <code>visudo</code> 命令编辑该文件。</p><h2><span id="1-工作模式理解">1. 工作模式理解</span></h2><blockquote><p><strong>简述其使用工作流程和配置文件配置！</strong></p></blockquote><ul><li><strong>[1] 理解 sudo 命令的工作流程</strong><ul><li><code>sudo</code> 会读取和解析 <code>/etc/sudoers</code> 文件，查找调用命令的用户及其权限。</li><li>然后提示调用该命令的用户输入密码，或者也可以通过 <code>NOPASSWD</code> 标志来跳过密码验证。</li><li>之后，<code>sudo</code> 创建一个子进程，调用 <code>setuid()</code> 来切换到目标用户。</li><li>最好，它会在上述子进程中执行参数给定的 <code>shell</code> 或命令。</li></ul></li><li><strong>[2] 理解 sudo 命令授权配置</strong><ul><li><strong>USER/GROUP HOST=(USER[:GROUP]) [NOPASSWD:] COMMANDS</strong></li><li><code>USER/GROUP</code>: 表示需要被授权的用户或者组；如果是组则需要以 % 开头</li><li><code>HOST</code>: 表示允许从哪些主机登录的用户运行 sudo 命令；ALL 表示允许从任何终端、机器访问</li><li><code>(USER[:GROUP])</code>: 表示使用 sudo 可切换的用户或者组，组可以不指定；ALL 表示可以切换到系统的所有用户</li><li><code>NOPASSWD</code>: 如果指定，则该用户或组使用 sudo 时不必输入密码</li><li><code>COMMANDS</code>: 表示运行指定的命令；ALL 表示允许执行所有命令</li></ul></li></ul><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许 sudo 组执行所有命令</span></span><br><span class="line">%sudo ALL=(ALL:ALL) ALL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许用户执行所有命令，且无需输入密码</span></span><br><span class="line">escape ALL =(ALL) NOPASSWD: ALL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅允许用户执行 echo, ls 命令</span></span><br><span class="line">escape ALL =(ALL) NOPASSWD: /bin/<span class="built_in">echo</span> /bin/ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行本机的用户执行关机命令</span></span><br><span class="line">escape localhost=/sbin/shutdown -h now</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许 users 用户组中的用户像 root 用户一样使用 mount、unmount、chrom 命令</span></span><br><span class="line">%users ALL=/sbin/mount /mnt/cdrom, /sbin/umount /mnt/cdrom</span><br></pre></td></tr></table></figure><ul><li><strong>[3] 配置 Defaults 选项</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定用户尝试输入密码的次数，默认值为3</span></span><br><span class="line">Defaults passwd_tries=5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置密码超时时间，默认为 5 分钟</span></span><br><span class="line">Defaults passwd_timeout=2</span><br><span class="line"></span><br><span class="line">默认 sudo 询问用户自己的密码，添加 targetpw 或 rootpw 配置可以让 sudo 询问 root 密码</span><br><span class="line">Defaults targetpw</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定自定义日志文件</span></span><br><span class="line">Defaults logfile=<span class="string">"/var/log/sudo.log"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要在自定义日志文件中记录主机名和四位数年份，可以加上 log_host 和 log_year 参数</span></span><br><span class="line">Defaults log_host, log_year, logfile=<span class="string">"/var/log/sudo.log"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保持当前用户的环境变量</span></span><br><span class="line">Defaults env_keep += <span class="string">"LANG LC_ADDRESS LC_CTYPE COLORS DISPLAY HOSTNAME EDITOR"</span></span><br><span class="line">Defaults env_keep += <span class="string">"ftp_proxy http_proxy https_proxy no_proxy"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安置一个安全的 PATH 环境变量</span></span><br><span class="line">Defaults secure_path=<span class="string">"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br></pre></td></tr></table></figure><h2><span id="2-使用技巧总结">2. 使用技巧总结</span></h2><blockquote><p><strong>主要介绍使用 sudo 相关命令的使用技巧和问题处理方式！</strong></p></blockquote><ul><li><strong>[1] 如何将 visudo 编辑器从 nano 更改为 vim？</strong></li></ul><p>当我使用 <code>visudo</code> 命令的时候，它总是用 <code>nano</code> 编辑器打开它，对应平时习惯使用 <code>vi</code> 或者 <code>vim</code> 的用户来说，显得有些别扭，以及操作不够自如。所以，如何更好的将 <code>visudo</code> 编辑器从 <code>nano</code> 更改为 <code>vim</code> 就变得非常重要了。</p><p>最佳的解决办法，就是调用命令，永久的将终端的编辑器更换成为 <code>vim</code> 编辑器，一劳永逸。我们只需要执行如下命令，输入自己需要的编辑器序号并按下回车键即可。下次执行 <code>visudo</code> 命令的时候，就会使用 <code>vim</code> 编辑器打开文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为/etc/sudoers普通用户无法打开和使用</span></span><br><span class="line">$ sudo update-alternatives --config editor</span><br><span class="line">There are 4 choices <span class="keyword">for</span> the alternative editor (providing /usr/bin/editor).</span><br><span class="line">  Selection    Path                Priority   Status</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">* 0            /bin/nano            40        auto mode</span><br><span class="line">  1            /bin/ed             -100       manual mode</span><br><span class="line">  2            /bin/nano            40        manual mode</span><br><span class="line">  3            /usr/bin/vim.basic   30        manual mode</span><br><span class="line">  4            /usr/bin/vim.tiny    10        manual mode</span><br><span class="line"></span><br><span class="line">Press enter to keep the current choice[*], or <span class="built_in">type</span> selection number: 3</span><br></pre></td></tr></table></figure><p>其次的解决方法，就是通过环境变量修改当前终端的默认编辑器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在.zshrc或.profile文件中</span></span><br><span class="line">$ <span class="built_in">export</span> EDITOR=vim;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 希望执行对visudo生效</span></span><br><span class="line">$ sudo EDITOR=vim visudo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者修改/etc/sudoers文件的默认编辑器</span></span><br><span class="line">Defaults editor=/usr/bin/vim</span><br></pre></td></tr></table></figure><ul><li><strong>[2] Vim 如何强制保存只读文件？</strong></li></ul><p>在使用 <code>vim</code> 的时候，当以普通用户打开一个只有 <code>root</code> 用户才有权限操作的文件时，在编辑完成之后保存时发现，这个文件没有权限修改。好不容易把文件编辑完了，却无法保存，就只能放弃，然后退出，再以 <code>root</code> 权限打开，重新编辑，是在痛苦！那有没有好的方法来解决这个问题呢？咳咳咳，肯定是有的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Vim命令模式下执行即可强制保存</span></span><br><span class="line"><span class="comment"># w: 表示保存文件</span></span><br><span class="line"><span class="comment"># !: 表示执行外部命令</span></span><br><span class="line"><span class="comment"># tee: 表示把数据重定向到给定文件和屏幕上</span></span><br><span class="line"><span class="comment"># %: 在执行外部命令时，%会扩展成当前文件名</span></span><br><span class="line">:w !sudo tee %</span><br></pre></td></tr></table></figure><p>上述方式非常完美的解决了不能保存只读文件的问题，但毕竟命令还是有些长，为了避免每次输入一长串的命令，可以将它映射为一个简单的命令加到 <code>.vimrc</code> 中。这样，简单的运行 <code>:w!!</code> 即可，命令后半部分 <code>&gt; /dev/null</code> 作用为显式的丢掉标准输出的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">" Allow saving of files as sudo when I forgot to start vim using sudo.</span></span><br><span class="line"><span class="string">cmap w!! w !sudo tee &gt; /dev/null %</span></span><br></pre></td></tr></table></figure><ul><li><strong>[3] 如何更加安全地编辑文件？</strong></li></ul><p><code>Sudoedit</code> 是一个内置命令，允许用户安全地编辑文件。根据 <code>sudo</code> 手册页，<code>sudoedit</code> 等效于使用 <code>-e</code> 命令行选项执行 <code>sudo</code>。</p><p>那么这个命令会做什么呢，它会首先创建你要编辑的文件的临时副本。然后，命令将搜索 <code>SUDO_EDITOR</code>，<code>VISUAL</code> 和 <code>EDITOR</code> 环境变量（按此顺序），以确定应调用哪个编辑器来打开刚刚创建的临时副本。 用户完成修改工作后，更改将复制回原始文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sudo命令手册页</span></span><br><span class="line">-e, --edit</span><br><span class="line">Edit one or more files instead of running a <span class="built_in">command</span>. In lieu of a path name,</span><br><span class="line">the string <span class="string">"sudoedit"</span> is used when consulting the security policy. If the user</span><br><span class="line">is authorized by the policy, the followingsteps are taken:</span><br><span class="line"></span><br><span class="line"> 1. Temporary copies are made of the files to be edited with</span><br><span class="line"> the owner <span class="built_in">set</span> to the invoking user.</span><br><span class="line"></span><br><span class="line"> 2. The editor specified by the policy is run to edit the</span><br><span class="line"> temporary files. The sudoers policy uses the</span><br><span class="line"> SUDO_EDITOR, VISUAL and EDITOR environment variables (<span class="keyword">in</span></span><br><span class="line"> that order). If none of SUDO_EDITOR, VISUAL or EDITOR</span><br><span class="line"> are <span class="built_in">set</span>, the first program listed <span class="keyword">in</span> the editor</span><br><span class="line"> sudoers(5) option is used.</span><br><span class="line"></span><br><span class="line"> 3. If they have been modified, the temporary files are</span><br><span class="line"> copied back to their original location and the temporary</span><br><span class="line"> versions are removed.</span><br><span class="line"></span><br><span class="line">If the specified file does not exist, it will be created. Note that unlike most</span><br><span class="line">commands run by sudo, the editor is run with the invoking user is environment</span><br><span class="line">unmodified. If, <span class="keyword">for</span> some reason, sudo is unable to update a file with its edited</span><br><span class="line">version, the user will receive a warning and the edited copy will remain <span class="keyword">in</span> a</span><br><span class="line">temporary file.</span><br></pre></td></tr></table></figure><ul><li><strong>[4] 如何让 sudo 会话时间随心所欲？</strong></li></ul><p>其中 <code>sudo</code> 命令是权限委派的命令，在生产环境中是非常常用的，默认情况下 <code>sudo</code> 命令会话时间是在 <code>15</code> 分钟。要设置 <code>sudo</code> 密码超时的值，需要使用 <code>passwd_timeout</code> 参数进行设置。</p><p>可以以分钟设置为你所需的任何时间，它会在超时之前一直等待。 如果要为每个执行的 <code>sudo</code> 命令弹出密码提示，你也可以将时间设置为 <code>0</code>，或者通过设置值 <code>-1</code> 永久禁用密码提示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置timeout时间</span></span><br><span class="line"><span class="comment"># 意味着sudo密码提示将会在用户使用20分钟后过期</span></span><br><span class="line">Defaults        env_reset,timestamp_timeout=20</span><br></pre></td></tr></table></figure><ul><li><strong>[5] 如何更加安全的授权服务器权限？</strong></li></ul><p>如何我们管理的服务器，开发或者其他人员需要登录该服务器，进行环境调试或者问题复现等情况。这时，就需要我们给对应的用户开通登录的访问权限。但是如果我们直接编辑 <code>/etc/sudoers</code> 文件的话，之后当对方使用完成之后我就还需要手动进行清理。如果我们忘记的话，该开发或者其他人员将一直可以登录该服务器，会有一定程度的安全问题。</p><p>不幸的是，对应临时授权的话，<code>/etc/sudoers</code> 文件中没有对应的配置，可以对某个用户或者用户组进行指定范围的时间授权。当用户到达指定时间点之后，将拒绝该用户再次进行登录了。对应此种情况，我们可以通过 <code>crontab</code> 定时任务与 <code>/etc/sudoers.d</code> 目录的机制可以完美的解决上述问题。</p><p>我们通过定时任务的定时执行目录，来定时刷掉 <code>/etc/sudoers.d/</code> 目录下的用户或者用户组的授权配置文件。比如，我们需要定时每日刷掉今日临时授权的用户或者用户，可以在 <code>/etc/cron.daily</code> 目录下面创建用于删除 <code>/etc/sudoers.d/</code> 目录的 <code>rm -rf</code> 命令，之后在固定的时间会自动删除。对应授权用户，我们使用在 <code>/etc/sudoers.d/</code> 目录下创建单独的配置文件，而不是直接修改 <code>/etc/sudoers</code> 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Crontab有多种定时机制</span></span><br><span class="line"><span class="comment"># 下述分别表示每天、每时、每月、每周定时执行</span></span><br><span class="line">$ ls -dl /etc/cron.* | grep -v cron.d$</span><br><span class="line">drwxr-xr-x 2 root root 4096 May 15 06:18 /etc/cron.daily</span><br><span class="line">drwxr-xr-x 2 root root 4096 Feb 14  2019 /etc/cron.hourly</span><br><span class="line">drwxr-xr-x 2 root root 4096 Feb 14  2019 /etc/cron.monthly</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jun 18 09:57 /etc/cron.weekly</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建单独的授权配置文件</span></span><br><span class="line">$ ls -lh /etc/sudoers.d/</span><br><span class="line">-r--r----- 1 root root 666 Oct  6  2017 lisi</span><br><span class="line">-r--r----- 1 root root 958 Jan 18  2018 zhangsan</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看授权配置文件的内容</span></span><br><span class="line">$ cat /etc/sudoers.d/zhangsan</span><br><span class="line">ALL ALL = (root) NOPASSWD: zhangsan</span><br></pre></td></tr></table></figure><ul><li><strong>[6] 如何解决 sudo 命令找不到环境变量？</strong></li></ul><p>我们日常在使用 <code>sudo</code> 命令的时候，常常会遇到，当切换用户之后，发现之前设置的环境变量怎么不见了呢？这是因为，我们执行 <code>sudo</code> 命令之后会切换用户，如果保留环境变量会有一定的安全问题，系统会默认重置环境变量为安全的环境变量。先前设置的变量都会失效，只有少数配置文件中指定的环境变量能够保存下来。</p><p>我们可以看一下 <code>sudo</code> 配置文件 <code>/etc/sudoers</code> 来找找作用原因。我们执行如下命令之后，可以看到如下输入(有可能和我这里的不一样)。其中 <code>env_reset</code> 表示默认会重置环境变量，因此我们自定义的变量会在 <code>sudo</code> 命令执行之后失效，也就不会正确获取变量值了。而 <code>env_keep</code> 则表示用于保留部分环境变量不被重置，需要保留的变量就写入双引号之中，可自行追加需要保留的变量。最后就是 <code>secure_path</code> 变量，其作用就是包含的路径将被当做 <code>sudo</code> 环境的 <code>PATH</code> 变量来使用。如果在 <code>sudo</code> 环境无法找到某些命令，那么可以将这些命令的路径加入该配置项之中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo sed <span class="string">'/^#/d;/^$/d'</span> /etc/sudoers</span><br><span class="line">Defaults    env_reset</span><br><span class="line">Defaults    env_keep =  <span class="string">"COLORS IDSPLAY HOSTNAME HISTSIZE LS_COLORS"</span></span><br><span class="line">Defaults    env_keep += <span class="string">"MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS"</span></span><br><span class="line">Defaults    secure_path=<span class="string">"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"</span></span><br></pre></td></tr></table></figure><p>我们知道原因之后，就可以针对上述情况作出不用的处理方式，来解决 <code>sudo</code> 命令找不到环境变量的问题。</p><p>第一种解决方法，就是在使用的时候，使用 <code>-E</code> 参数。加上 <code>-E</code> 选项后，用户可以在 <code>sudo</code> 执行时保留当前用户已存在的环境变量，不会被 <code>sudo</code> 重置。另外，如果用户对于指定的环境变量没有权限，则会报错。需要注意的是，在内部测试机器中，安全性要求不高的情况下使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo sudo -E</span><br></pre></td></tr></table></figure><p>第二种解决方法，就是修改 <code>sudo</code> 配置文件。可以通过修改 <code>/etc/sudoers</code> 文件的 <code>env_keep</code> 和 <code>secure_path</code> 配置项，来指定 <code>sudo</code> 环境中需要保留的环境变量和路径。当然，我们也可以把配置文件的变量 <code>!env_reset</code> 给去掉，这样就不会有限制了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/sudoers</span><br><span class="line">Defaults !env_reset</span><br></pre></td></tr></table></figure><h2><span id="3-参考链接地址">3. 参考链接地址</span></h2><ul><li><a href="http://ghoulich.xninja.org/2017/05/09/how-to-find-env-variables-when-exec-sudo-commands/" target="_blank" rel="noopener">如何解决 sudo 命令找不到环境变量的问题</a></li></ul><blockquote><p>本文转载自：「 Escape 的博客 」，原文：<a href="https://tinyurl.com/y4r6d5fu%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/y4r6d5fu，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Sudo 授权需谨慎，否则亲人两行泪！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;sudo&lt;/code&gt; 表示 &lt;code&gt;“superuser do”&lt;/code&gt;，它允许已验证的用户以其他用户的身份来运行命令。其他用户可以是普通用户或者超级用户。然而，大部分时候我们用它来提权运行命令，以替代直接使用 &lt;code&gt;root&lt;/code&gt; 用户的操作。&lt;code&gt;sudo&lt;/code&gt; 命令与安全策略配合使用，安全策略可以通过文件 &lt;code&gt;/etc/sudoers&lt;/code&gt; 来配置。其安全策略具有高度可拓展性，支持插件扩展。默认情况下 &lt;code&gt;/etc/sudoers&lt;/code&gt; 是不能被任何人直接编辑的，因为它的权限是 &lt;code&gt;440&lt;/code&gt;，虽然也可以对其赋予写权限后再编辑，但推荐使用 &lt;code&gt;visudo&lt;/code&gt; 命令编辑该文件。&lt;/p&gt;
&lt;h2 id=&quot;1-工作模式理解&quot;&gt;1. 工作模式理解&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;简述其使用工作流程和配置文件配置！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[1] 理解 sudo 命令的工作流程&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo&lt;/code&gt; 会读取和解析 &lt;code&gt;/etc/sudoers&lt;/code&gt; 文件，查找调用命令的用户及其权限。&lt;/li&gt;
&lt;li&gt;然后提示调用该命令的用户输入密码，或者也可以通过 &lt;code&gt;NOPASSWD&lt;/code&gt; 标志来跳过密码验证。&lt;/li&gt;
&lt;li&gt;之后，&lt;code&gt;sudo&lt;/code&gt; 创建一个子进程，调用 &lt;code&gt;setuid()&lt;/code&gt; 来切换到目标用户。&lt;/li&gt;
&lt;li&gt;最好，它会在上述子进程中执行参数给定的 &lt;code&gt;shell&lt;/code&gt; 或命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[2] 理解 sudo 命令授权配置&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;USER/GROUP HOST=(USER[:GROUP]) [NOPASSWD:] COMMANDS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USER/GROUP&lt;/code&gt;: 表示需要被授权的用户或者组；如果是组则需要以 % 开头&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HOST&lt;/code&gt;: 表示允许从哪些主机登录的用户运行 sudo 命令；ALL 表示允许从任何终端、机器访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(USER[:GROUP])&lt;/code&gt;: 表示使用 sudo 可切换的用户或者组，组可以不指定；ALL 表示可以切换到系统的所有用户&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NOPASSWD&lt;/code&gt;: 如果指定，则该用户或组使用 sudo 时不必输入密码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;COMMANDS&lt;/code&gt;: 表示运行指定的命令；ALL 表示允许执行所有命令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Sudo" scheme="https://www.hi-linux.com/tags/Sudo/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你部署一个最小化的 Kubernetes 集群</title>
    <link href="https://www.hi-linux.com/posts/57272.html"/>
    <id>https://www.hi-linux.com/posts/57272.html</id>
    <published>2021-03-10T01:00:00.000Z</published>
    <updated>2021-03-10T01:18:29.908Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>虽然网上有大量从零搭建 <code>K8S</code> 的文章，但大都针对老版本，若直接照搬去安装最新的 <code>1.20</code> 版本会遇到一堆问题。故此将我的安装步骤记录下来，希望能为读者提供 <code>copy and paste</code> 式的集群搭建帮助。</p><h2><span id="1-部署准备工作">1. 部署准备工作</span></h2><blockquote><p><strong>部署最小化 K8S 集群：master + node1 + node2</strong></p></blockquote><p><code>Ubuntu</code> 是一款基于 <code>Debian Linux</code> 的以桌面应用为主的操作系统，内容涵盖文字处理、电子邮件、软件开发工具和 <code>Web</code> 服务等，可供用户免费下载、使用和分享。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜ vgs</span><br><span class="line">Current machine states:</span><br><span class="line">master                    running (virtualbox)</span><br><span class="line">node1                     running (virtualbox)</span><br><span class="line">node2                     running (virtualbox)</span><br></pre></td></tr></table></figure><h3><span id="11-基础环境信息">1.1 基础环境信息</span></h3><ul><li>设置系统主机名以及 Host 文件各节点之间的相互解析<ul><li>使用这个的 <code>Vagrantfile</code> 启动的三节点服务已经配置好了</li><li>以下使用 <code>master</code> 节点进行演示查看，其他节点操作均一致</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hostnamectl</span></span><br><span class="line">vagrant@k8s-master:~$ hostnamectl</span><br><span class="line">   Static hostname: k8s-master</span><br><span class="line"></span><br><span class="line"><span class="comment"># hosts</span></span><br><span class="line">vagrant@k8s-master:~$ cat /etc/hosts</span><br><span class="line">127.0.0.1        localhost</span><br><span class="line">127.0.1.1        vagrant.vm    vagrant</span><br><span class="line">192.168.30.30    k8s-master</span><br><span class="line">192.168.30.31    k8s-node1</span><br><span class="line">192.168.30.32    k8s-node2</span><br><span class="line"></span><br><span class="line"><span class="comment"># ping</span></span><br><span class="line">vagrant@k8s-master:~$ ping k8s-node1</span><br><span class="line">PING k8s-node1 (192.168.30.31) 56(84) bytes of data.</span><br><span class="line">64 bytes from k8s-node1 (192.168.30.31): icmp_seq=1 ttl=64 time=0.689 ms</span><br></pre></td></tr></table></figure><a id="more"></a><h3><span id="12-阿里源配置">1.2 阿里源配置</span></h3><ul><li>配置 Ubuntu 的阿里源来加速安装速度<ul><li><a href="https://developer.aliyun.com/mirror/ubuntu?spm=a2c6h.13651102.0.0.3e221b11ZqDVYZ" target="_blank" rel="noopener">阿里源镜像地址</a></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录服务器</span></span><br><span class="line">➜ vgssh master/node1/nod2</span><br><span class="line">Welcome to Ubuntu 18.04.2 LTS (GNU/Linux 4.15.0-50-generic x86_64)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置阿里云Ubuntu镜像</span></span><br><span class="line">$ sudo cp /etc/apt/sources.list&#123;,.bak&#125;</span><br><span class="line">$ sudo vim /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置kubeadm的阿里云镜像源</span></span><br><span class="line">$ sudo vim /etc/apt/sources.list</span><br><span class="line">deb https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial main</span><br><span class="line">$ sudo gpg --keyserver keyserver.ubuntu.com --recv-keys BA07F4FB</span><br><span class="line">$ sudo gpg --<span class="built_in">export</span> --armor BA07F4FB | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置docker安装</span></span><br><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">$ sudo apt-key fingerprint 0EBFCD88</span><br><span class="line">$ sudo vim /etc/apt/sources.list</span><br><span class="line">deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新仓库</span></span><br><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt dist-upgrade</span><br></pre></td></tr></table></figure><h3><span id="13-基础工具安装">1.3 基础工具安装</span></h3><ul><li>部署阶段的基础工具安装<ul><li>基础组件 <code>docker</code></li><li>部署工具 <code>kubeadm</code></li><li>路由规则 <code>ipvsadm</code></li><li>时间同步 <code>ntp</code></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础工具安装</span></span><br><span class="line">$ sudo apt install -y \</span><br><span class="line">    docker-ce docker-ce-cli containerd.io \</span><br><span class="line">    kubeadm ipvsadm \</span><br><span class="line">    ntp ntpdate \</span><br><span class="line">    nginx supervisor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前普通用户加入docker组(需重新登录)</span></span><br><span class="line">$ sudo usermod -a -G docker <span class="variable">$USER</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务启用</span></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker.service</span><br><span class="line">$ sudo systemctl start docker.service</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> kubelet.service</span><br><span class="line">$ sudo systemctl start kubelet.service</span><br></pre></td></tr></table></figure><h3><span id="14-操作系统配置">1.4 操作系统配置</span></h3><ul><li>操作系统相关配置<ul><li>关闭缓存</li><li>配置内核参数</li><li>调整系统时区</li><li>升级内核版本(默认为<code>4.15.0</code>的版本)</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭缓存</span></span><br><span class="line">$ sudo swapoff -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为K8S来调整内核参数</span></span><br><span class="line">$ sudo touch /etc/sysctl.d/kubernetes.conf</span><br><span class="line">$ sudo cat &gt; /etc/sysctl.d/kubernetes.conf &lt;&lt;EOF</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1 <span class="comment"># 开启网桥模式(必须)</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1 <span class="comment"># 开启网桥模式(必须)</span></span><br><span class="line">net.ipv6.conf.all.disable_ipv6 = 1 <span class="comment"># 关闭IPv6协议(必须)</span></span><br><span class="line">net.ipv4.ip_forward = 1 <span class="comment"># 转发模式(默认开启)</span></span><br><span class="line">vm.panic_on_oom=0 <span class="comment"># 开启OOM(默认开启)</span></span><br><span class="line">vm.swappiness = 0 <span class="comment"># 禁止使用swap空间</span></span><br><span class="line">vm.overcommit_memory=1 <span class="comment"># 不检查物理内存是否够用</span></span><br><span class="line">fs.inotify.max_user_instances=8192</span><br><span class="line">fs.inotify.max_user_watches=1048576</span><br><span class="line">fs.file-max = 52706963 <span class="comment"># 设置文件句柄数量</span></span><br><span class="line">fs.nr_open = 52706963 <span class="comment"># 设置文件的最大打开数量</span></span><br><span class="line">net.netfilter.nf_conntrack_max = 2310720</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统内核参数的方式</span></span><br><span class="line">$ sudo sysctl -a | grep xxx</span><br><span class="line"><span class="comment"># 使内核参数配置文件生效</span></span><br><span class="line">$ sudo sysctl -p /etc/sysctl.d/kubernetes.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置系统时区为中国/上海</span></span><br><span class="line">$ sudo timedatectl <span class="built_in">set</span>-timezone Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前的UTC时间写入硬件时钟</span></span><br><span class="line">$ sudo timedatectl <span class="built_in">set</span>-local-rtc 0</span><br></pre></td></tr></table></figure><h3><span id="15-开启-ipvs-服务">1.5 开启 ipvs 服务</span></h3><ul><li>开启 ipvs 服务<ul><li><code>kube-proxy</code> 开启 <code>ipvs</code> 的前置条件</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 载入指定的个别模块</span></span><br><span class="line">$ modprobe br_netfilter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line">$ cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载配置</span></span><br><span class="line">$ chmod 755 /etc/sysconfig/modules/ipvs.modules \</span><br><span class="line">    &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules \</span><br><span class="line">    &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv</span><br></pre></td></tr></table></figure><h2><span id="2-部署-master-节点">2. 部署 Master 节点</span></h2><blockquote><p><strong>节点最低配置: <code>2C+2G</code> 内存；从节点资源尽量充足</strong></p></blockquote><p><code>kubeadm</code> 工具的 <code>init</code> 命令，即可初始化以单节点部署的 <code>master</code>。为了避免翻墙，这里可以使用阿里云的谷歌源来代替。在执行 <code>kubeadm</code> 部署命令的时候，指定对应地址即可。当然，可以将其加入本地的镜像库之中，更易维护。</p><ul><li>注意事项<ul><li><a href="https://www.escapelife.site/posts/registry.aliyuncs.com/google_containers" target="_blank" rel="noopener">阿里云谷歌源地址</a></li><li><a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/control-plane-flags/" target="_blank" rel="noopener">使用 kubeadm 定制控制平面配置</a></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录服务器</span></span><br><span class="line">➜ vgssh master</span><br><span class="line">Welcome to Ubuntu 18.04.2 LTS (GNU/Linux 4.15.0-50-generic x86_64)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署节点(命令行)</span></span><br><span class="line"><span class="comment"># 注意pod和service的地址需要不同(否则会报错)</span></span><br><span class="line">$ sudo kubeadm init \</span><br><span class="line">    --kubernetes-version=1.20.2 \</span><br><span class="line">    --image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">    --apiserver-advertise-address=192.168.30.30 \</span><br><span class="line">    --pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">    --service-cidr=10.245.0.0/16</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署镜像配置(配置文件)</span></span><br><span class="line">$ sudo kubeadm init --config ./kubeadm-config.yaml</span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看IP段是否生效(iptable)</span></span><br><span class="line">$ ip route show</span><br><span class="line">10.244.0.0/24 dev cni0 proto kernel scope link src 10.244.0.1</span><br><span class="line">10.244.1.0/24 via 10.244.1.0 dev flannel.1 onlink</span><br><span class="line">10.244.2.0/24 via 10.244.2.0 dev flannel.1 onlink</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 查看IP段是否生效(ipvs)</span></span><br><span class="line">$ ipvsadm -L -n</span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br></pre></td></tr></table></figure><ul><li>配置文件定义<ul><li>接口使用了 <code>v1beta2</code> 版本</li><li>配置主节点 <code>IP</code> 地址为 <code>192.168.30.30</code></li><li>为 <code>flannel</code> 分配的是 <code>10.244.0.0/16</code> 网段</li><li>选择的 <code>kubernetes</code> 是当前最新的 <code>1.20.2</code> 版本</li><li>加入了 <code>controllerManager</code> 的水平扩容功能</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubeadm-config.yaml</span></span><br><span class="line"><span class="comment"># sudo kubeadm config print init-defaults &gt; kubeadm-config.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta2</span></span><br><span class="line"><span class="attr">imageRepository:</span> <span class="string">registry.aliyuncs.com/google_containers</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterConfiguration</span></span><br><span class="line"><span class="attr">kubernetesVersion:</span> <span class="string">v1.20.2</span></span><br><span class="line"><span class="attr">apiServer:</span></span><br><span class="line">  <span class="attr">extraArgs:</span></span><br><span class="line">    <span class="attr">advertise-address:</span> <span class="number">192.168</span><span class="number">.30</span><span class="number">.30</span></span><br><span class="line"><span class="attr">networking:</span></span><br><span class="line">  <span class="attr">podSubnet:</span> <span class="number">10.244</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line"><span class="attr">controllerManager:</span></span><br><span class="line">  <span class="attr">ExtraArgs:</span></span><br><span class="line">    <span class="attr">horizontal-pod-autoscaler-use-rest-clients:</span> <span class="string">"true"</span></span><br><span class="line">    <span class="attr">horizontal-pod-autoscaler-sync-period:</span> <span class="string">"10s"</span></span><br><span class="line">    <span class="attr">node-monitor-grace-period:</span> <span class="string">"10s"</span></span><br></pre></td></tr></table></figure><ul><li>执行成功之后会输出如下信息，需要安装如下步骤操作下<ul><li><strong>第一步</strong> 在 <code>kubectl</code> 默认控制和操作集群节点的时候，需要使用到 <code>CA</code> 的密钥，传输过程是通过 <code>TLS</code> 协议保障通讯的安全性。通过下面 <code>3</code> 行命令拷贝密钥信息到当前用户家目录下，这样 <code>kubectl</code> 执行时会首先访问 <code>.kube</code> 目录，使用这些授权信息访问集群。</li><li><strong>第二步</strong> 之后添加 <code>worker</code> 节点时，要通过 <code>token</code> 才能保障安全性。因此，先把显示的这行命令保存下来，以备后续使用会用到。</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># master setting step one</span></span><br><span class="line">To start cluster, you need to run the following as a regular user:</span><br><span class="line">  mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, <span class="keyword">if</span> you are the root user, you can run:</span><br><span class="line">  <span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># master setting step two</span></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">"kubectl apply -f [podnetwork].yaml"</span> with one of the options listed:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Join any number of worker nodes by running the following on each as root:</span><br><span class="line">kubeadm join 192.168.30.30:6443 \</span><br><span class="line">  --token lebbdi.p9lzoy2a16tmr6hq \</span><br><span class="line">  --discovery-token-ca-cert-hash \</span><br><span class="line">  sha256:6c79fd83825d7b2b0c3bed9e10c428acf8ffcd615a1d7b258e9b500848c20cae</span><br></pre></td></tr></table></figure><ul><li><strong>将子节点加入主节点中</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get nodes</span><br><span class="line">NAME         STATUS     ROLES                  AGE   VERSION</span><br><span class="line">k8s-master   NotReady   control-plane,master   62m   v1.20.2</span><br><span class="line">k8s-node1    NotReady   &lt;none&gt;                 82m   v1.20.2</span><br><span class="line">k8s-node2    NotReady   &lt;none&gt;                 82m   v1.20.2</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看token令牌</span></span><br><span class="line">$ sudo kubeadm token list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成token令牌</span></span><br><span class="line">$ sudo kubeadm token create</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忘记sha编码</span></span><br><span class="line">$ openssl x509 -pubkey -<span class="keyword">in</span> /etc/kubernetes/pki/ca.crt \</span><br><span class="line">    | openssl rsa -pubin -outform der 2&gt;/dev/null \</span><br><span class="line">    | openssl dgst -sha256 -hex | sed <span class="string">'s/^.* //'</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个新的 token 令牌(比上面的方便)</span></span><br><span class="line">$ kubeadm token generate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接生成 join 命令(比上面的方便)</span></span><br><span class="line">$ kubeadm token create &lt;token_generate&gt; --<span class="built_in">print</span>-join-command --ttl=0</span><br></pre></td></tr></table></figure><ul><li><p>执行完成之后可以通过如下命令，查看主节点信息</p><ul><li><p>默认生成四个命名空间</p><ul><li><code>default</code>、<code>kube-system</code>、<code>kube-public</code>、<code>kube-node-lease</code></li></ul></li><li><p>部署的核心服务有以下几个 (kube-system)</p><ul><li><code>coredns</code>、<code>etcd</code></li><li><code>kube-apiserver</code>、<code>kube-scheduler</code></li><li><code>kube-controller-manager</code>、<code>kube-controller-manager</code></li></ul></li><li><p>此时 <code>master</code> 并没有 <code>ready</code> 状态(需要安装网络插件)</p><ul><li>下一章节中，我们将安装 <code>flannel</code> 这个网络插件</li></ul></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命名空间</span></span><br><span class="line">$ kubectl get namespace</span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   19m</span><br><span class="line">kube-node-lease   Active   19m</span><br><span class="line">kube-public       Active   19m</span><br><span class="line">kube-system       Active   19m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 核心服务</span></span><br><span class="line">$ kubectl get pod -n kube-system</span><br><span class="line">NAME                                 READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-7f89b7bc75-bh42f             1/1     Running   0          19m</span><br><span class="line">coredns-7f89b7bc75-dvzpl             1/1     Running   0          19m</span><br><span class="line">etcd-k8s-master                      1/1     Running   0          19m</span><br><span class="line">kube-apiserver-k8s-master            1/1     Running   0          19m</span><br><span class="line">kube-controller-manager-k8s-master   1/1     Running   0          19m</span><br><span class="line">kube-proxy-5rlpv                     1/1     Running   0          19m</span><br><span class="line">kube-scheduler-k8s-master            1/1     Running   0          19m</span><br></pre></td></tr></table></figure><h2><span id="3-部署-flannel-网络">3. 部署 flannel 网络</span></h2><blockquote><p><strong>网络服务用于管理 K8S 集群中的服务网络</strong></p></blockquote><p><code>flannel</code> 网络需要指定 <code>IP</code> 地址段，即上一步中通过编排文件设置的 <code>10.244.0.0/16</code>。其实可以通过 <code>flannel</code> 官方和 <code>HELM</code> 工具直接部署服务，但是原地址是需要搭梯子的。所以，可以将其内容保存在如下配置文件中，修改对应镜像地址。</p><ul><li><a href="https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml" target="_blank" rel="noopener">部署 flannel 服务的官方下载地址</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署flannel服务</span></span><br><span class="line"><span class="comment"># 1.修改镜像地址(如果下载不了的话)</span></span><br><span class="line"><span class="comment"># 2.修改Network为--pod-network-cidr的参数IP段</span></span><br><span class="line">$ kubectl apply -f ./kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果部署出现问题可通过如下命令查看日志</span></span><br><span class="line">$ kubectl logs kube-flannel-ds-6xxs5 --namespace=kube-system</span><br><span class="line">$ kubectl describe pod kube-flannel-ds-6xxs5 --namespace=kube-system</span><br></pre></td></tr></table></figure><p><img src="https://img.hi-linux.com/staticfile/install-mini-k8s-01-2021-01-27-KgK5d2.png" alt></p><ul><li>如果使用当中存在问题的，可以参考官方的问题手册<ul><li>因为我们这里使用的是 <code>Vagrant</code> 虚拟出来的机器进行 <code>K8S</code> 的部署，但是在运行对应 <code>yaml</code> 配置的时候，会报错。通过查看日志发现是因为默认绑定的是虚拟机上面的 <code>eth0</code> 这块网卡，而这块网卡是 <code>Vagrant</code> 使用的，我们应该绑定的是 <code>eth1</code> 才对。</li><li><code>Vagrant</code> 通常为所有 <code>VM</code> 分配两个接口，第一个为所有主机分配的 <code>IP</code> 地址为 <code>10.0.2.15</code>，用于获得 <code>NAT</code> 的外部流量。这样会导致 <code>flannel</code> 部署存在问题。通过官方问题说明，我们可以使用 <code>--iface=eth1</code> 这个参数选择第二个网卡。</li><li>对应的参数使用方式，可以参考 <a href="https://stackoverflow.com/questions/47845739/configuring-flannel-to-use-a-non-default-interface-in-kubernetes" target="_blank" rel="noopener">flannel use –iface=eth1</a> 中的回答自行添加，而这里我直接修改了启动的配置文件，在启动服务的时候通过 <code>args</code> 修改了，如下所示。</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -n kube-system</span><br><span class="line">NAME                                 READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-7f89b7bc75-bh42f             1/1     Running   0          61m</span><br><span class="line">coredns-7f89b7bc75-dvzpl             1/1     Running   0          61m</span><br><span class="line">etcd-k8s-master                      1/1     Running   0          62m</span><br><span class="line">kube-apiserver-k8s-master            1/1     Running   0          62m</span><br><span class="line">kube-controller-manager-k8s-master   1/1     Running   0          62m</span><br><span class="line">kube-flannel-ds-zl148                1/1     Running   0          44s</span><br><span class="line">kube-flannel-ds-ll523                1/1     Running   0          44s</span><br><span class="line">kube-flannel-ds-wpmhw                1/1     Running   0          44s</span><br><span class="line">kube-proxy-5rlpv                     1/1     Running   0          61m</span><br><span class="line">kube-scheduler-k8s-master            1/1     Running   0          62m</span><br></pre></td></tr></table></figure><ul><li><strong>配置文件如下所示</strong></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">policy/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PodSecurityPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">psp.flannel.unprivileged</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">seccomp.security.alpha.kubernetes.io/allowedProfileNames:</span> <span class="string">docker/default</span></span><br><span class="line">    <span class="attr">seccomp.security.alpha.kubernetes.io/defaultProfileName:</span> <span class="string">docker/default</span></span><br><span class="line">    <span class="attr">apparmor.security.beta.kubernetes.io/allowedProfileNames:</span> <span class="string">runtime/default</span></span><br><span class="line">    <span class="attr">apparmor.security.beta.kubernetes.io/defaultProfileName:</span> <span class="string">runtime/default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">configMap</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">secret</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">emptyDir</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hostPath</span></span><br><span class="line">  <span class="attr">allowedHostPaths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">pathPrefix:</span> <span class="string">"/etc/cni/net.d"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">pathPrefix:</span> <span class="string">"/etc/kube-flannel"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">pathPrefix:</span> <span class="string">"/run/flannel"</span></span><br><span class="line">  <span class="attr">readOnlyRootFilesystem:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Users and groups</span></span><br><span class="line">  <span class="attr">runAsUser:</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">RunAsAny</span></span><br><span class="line">  <span class="attr">supplementalGroups:</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">RunAsAny</span></span><br><span class="line">  <span class="attr">fsGroup:</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">RunAsAny</span></span><br><span class="line">  <span class="comment"># Privilege Escalation</span></span><br><span class="line">  <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">defaultAllowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Capabilities</span></span><br><span class="line">  <span class="attr">allowedCapabilities:</span> <span class="string">["NET_ADMIN",</span> <span class="string">"NET_RAW"</span><span class="string">]</span></span><br><span class="line">  <span class="attr">defaultAddCapabilities:</span> <span class="string">[]</span></span><br><span class="line">  <span class="attr">requiredDropCapabilities:</span> <span class="string">[]</span></span><br><span class="line">  <span class="comment"># Host namespaces</span></span><br><span class="line">  <span class="attr">hostPID:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hostIPC:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hostPorts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">min:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">max:</span> <span class="number">65535</span></span><br><span class="line">  <span class="comment"># SELinux</span></span><br><span class="line">  <span class="attr">seLinux:</span></span><br><span class="line">    <span class="comment"># SELinux is unused in CaaSP</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">"RunAsAny"</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> <span class="string">["extensions"]</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="string">["podsecuritypolicies"]</span></span><br><span class="line">    <span class="attr">verbs:</span> <span class="string">["use"]</span></span><br><span class="line">    <span class="attr">resourceNames:</span> <span class="string">["psp.flannel.unprivileged"]</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes/status</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-flannel-cfg</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">cni-conf.json:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">"name":</span> <span class="string">"cbr0"</span><span class="string">,</span></span><br><span class="line">      <span class="attr">"cniVersion":</span> <span class="string">"0.3.1"</span><span class="string">,</span></span><br><span class="line">      <span class="attr">"plugins":</span> <span class="string">[</span></span><br><span class="line">        <span class="string">&#123;</span></span><br><span class="line">          <span class="attr">"type":</span> <span class="string">"flannel"</span><span class="string">,</span></span><br><span class="line">          <span class="attr">"delegate":</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="attr">"hairpinMode":</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">            <span class="attr">"isDefaultGateway":</span> <span class="literal">true</span></span><br><span class="line">          <span class="string">&#125;</span></span><br><span class="line">        <span class="string">&#125;,</span></span><br><span class="line">        <span class="string">&#123;</span></span><br><span class="line">          <span class="attr">"type":</span> <span class="string">"portmap"</span><span class="string">,</span></span><br><span class="line">          <span class="attr">"capabilities":</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="attr">"portMappings":</span> <span class="literal">true</span></span><br><span class="line">          <span class="string">&#125;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">      <span class="string">]</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="attr">net-conf.json:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">"Network":</span> <span class="string">"10.244.0.0/16"</span><span class="string">,</span></span><br><span class="line">      <span class="attr">"Backend":</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">"Type":</span> <span class="string">"vxlan"</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-flannel-ds</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">nodeAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">            <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/os</span></span><br><span class="line">                    <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                    <span class="attr">values:</span></span><br><span class="line">                      <span class="bullet">-</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">priorityClassName:</span> <span class="string">system-node-critical</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">operator:</span> <span class="string">Exists</span></span><br><span class="line">          <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">flannel</span></span><br><span class="line">      <span class="attr">initContainers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install-cni</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">quay.io/coreos/flannel:v0.13.1-rc1</span></span><br><span class="line">          <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">cp</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-f</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/etc/kube-flannel/cni-conf.json</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/etc/cni/net.d/10-flannel.conflist</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cni</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kube-flannel</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">quay.io/coreos/flannel:v0.13.1-rc1</span></span><br><span class="line">          <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/opt/bin/flanneld</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--ip-masq</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--kube-subnet-mgr</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--iface=eth1</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">"100m"</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">"50Mi"</span></span><br><span class="line">            <span class="attr">limits:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">"100m"</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">"50Mi"</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">capabilities:</span></span><br><span class="line">              <span class="attr">add:</span> <span class="string">["NET_ADMIN",</span> <span class="string">"NET_RAW"</span><span class="string">]</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">run</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/run/flannel</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">run</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/run/flannel</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cni</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">kube-flannel-cfg</span></span><br></pre></td></tr></table></figure><ul><li>至此集群部署成功！如果有参数错误需要修改，你也可以在 <code>reset</code> 后重新 <code>init</code> 集群。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get nodes</span><br><span class="line">NAME         STATUS   ROLES                  AGE   VERSION</span><br><span class="line">k8s-master   Ready    control-plane,master   62m   v1.20.2</span><br><span class="line">k8s-node1    Ready    control-plane,master   82m   v1.20.2</span><br><span class="line">k8s-node2    Ready    control-plane,master   82m   v1.20.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启集群</span></span><br><span class="line">$ sudo kubeadm reset</span><br><span class="line">$ sudo kubeadm init</span><br></pre></td></tr></table></figure><h2><span id="4-部署-dashboard-服务">4. 部署 dashboard 服务</span></h2><blockquote><p><strong>以 WEB 页面的可视化 dashboard 来监控集群的状态</strong></p></blockquote><p>这个还是会遇到需要搭梯子下载启动配置文件的问题，下面是对应的下载地址，可以下载之后上传到服务器上面在进行部署。</p><ul><li><a href="https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml" target="_blank" rel="noopener">部署 dashboard 服务的官方下载地址</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署flannel服务</span></span><br><span class="line">$ kubectl apply -f ./kube-dashboard.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果部署出现问题可通过如下命令查看日志</span></span><br><span class="line">$ kubectl logs \</span><br><span class="line">    kubernetes-dashboard-c9fb67ffc-nknpj \</span><br><span class="line">    --namespace=kubernetes-dashboard</span><br><span class="line">$ kubectl describe pod \</span><br><span class="line">    kubernetes-dashboard-c9fb67ffc-nknpj \</span><br><span class="line">    --namespace=kubernetes-dashboard</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get svc -n kubernetes-dashboard</span><br><span class="line">NAME                        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">dashboard-metrics-scraper   ClusterIP   10.245.214.11    &lt;none&gt;        8000/TCP   26s</span><br><span class="line">kubernetes-dashboard        ClusterIP   10.245.161.146   &lt;none&gt;        443/TCP    26s</span><br></pre></td></tr></table></figure><p>需要注意的是 <code>dashboard</code> 默认不允许外网访问，即使通过 <code>kubectl proxy</code> 允许外网访问。但 <code>dashboard</code> 又只允许 <code>HTTPS</code> 访问，这样 <code>kubeadm init</code> 时自签名的 <code>CA</code> 证书是不被浏览器承认的。</p><p>我采用的方案是 <code>Nginx</code> 作为反向代理，使用 <code>Lets Encrypt</code> 提供的有效证书对外提供服务，再经由 <code>proxy_pass</code> 指令反向代理到 <code>kubectl proxy</code> 上，如下所示。此时，本地可经由 <code>8888</code> 访问到 <code>dashboard</code> 服务，再通过 <code>Nginx</code> 访问它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代理(可以使用supervisor)</span></span><br><span class="line">$ kubectl proxy --accept-hosts=<span class="string">'^*$'</span></span><br><span class="line">$ kubectl proxy --port=8888 --accept-hosts=<span class="string">'^*$'</span></span><br><span class="line"><span class="comment"># 测试代理是否正常(默认监听在8001端口上)</span></span><br><span class="line">$ curl -X GET -L http://localhost:8001</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地(可以使用nginx)</span></span><br><span class="line">proxy_pass http://localhost:8001;</span><br><span class="line">proxy_pass http://localhost:8888;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 外网访问如下URL地址</span></span><br><span class="line">https://mydomain/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/<span class="comment">#/login</span></span><br></pre></td></tr></table></figure><ul><li>配置文件整理<ul><li><code>nginx</code></li><li><code>supervisor</code></li></ul></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># k8s.conf</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">client_max_body_size</span>     <span class="number">80M</span>;</span><br><span class="line"><span class="attribute">client_body_buffer_size</span>  <span class="number">128k</span>;</span><br><span class="line"><span class="attribute">proxy_connect_timeout</span>    <span class="number">600</span>;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span>       <span class="number">600</span>;</span><br><span class="line"><span class="attribute">proxy_send_timeout</span>       <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">8080</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>  _;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span>     /etc/kubernetes/pki/ca.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/kubernetes/pki/ca.key;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/k8s.access.log;</span><br><span class="line">    <span class="attribute">error_log</span>  /var/log/nginx/k8s.<span class="literal">error</span>.log  <span class="literal">error</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   Host              <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   X-Real-IP         <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># k8s.conf</span></span><br><span class="line"></span><br><span class="line">[program:k8s-master]</span><br><span class="line"><span class="built_in">command</span>=kubectl proxy --accept-hosts=<span class="string">'^*$'</span></span><br><span class="line">user=vagrant</span><br><span class="line">environment=KUBECONFIG=<span class="string">"/home/vagrant/.kube/config"</span></span><br><span class="line">stopasgroup=<span class="literal">true</span></span><br><span class="line">stopasgroup=<span class="literal">true</span></span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=unexpected</span><br><span class="line">stdout_logfile_maxbytes=1MB</span><br><span class="line">stdout_logfile_backups=10</span><br><span class="line">stderr_logfile_maxbytes=1MB</span><br><span class="line">stderr_logfile_backups=10</span><br><span class="line">stderr_logfile=/var/<span class="built_in">log</span>/supervisor/k8s-stderr.log</span><br><span class="line">stdout_logfile=/var/<span class="built_in">log</span>/supervisor/k8s-stdout.log</span><br></pre></td></tr></table></figure><ul><li><strong>配置文件如下所示</strong></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright 2017 The Kubernetes Authors.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"># you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"># You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8443</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard-csrf</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">csrf:</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard-key-holder</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard-settings</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="comment"># Allow Dashboard to get, update and delete Dashboard exclusive secrets.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="string">["secrets"]</span></span><br><span class="line">    <span class="attr">resourceNames:</span></span><br><span class="line">      <span class="string">[</span></span><br><span class="line">        <span class="string">"kubernetes-dashboard-key-holder"</span><span class="string">,</span></span><br><span class="line">        <span class="string">"kubernetes-dashboard-certs"</span><span class="string">,</span></span><br><span class="line">        <span class="string">"kubernetes-dashboard-csrf"</span><span class="string">,</span></span><br><span class="line">      <span class="string">]</span></span><br><span class="line">    <span class="attr">verbs:</span> <span class="string">["get",</span> <span class="string">"update"</span><span class="string">,</span> <span class="string">"delete"</span><span class="string">]</span></span><br><span class="line">    <span class="comment"># Allow Dashboard to get and update 'kubernetes-dashboard-settings' config map.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="string">["configmaps"]</span></span><br><span class="line">    <span class="attr">resourceNames:</span> <span class="string">["kubernetes-dashboard-settings"]</span></span><br><span class="line">    <span class="attr">verbs:</span> <span class="string">["get",</span> <span class="string">"update"</span><span class="string">]</span></span><br><span class="line">    <span class="comment"># Allow Dashboard to get metrics.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="string">["services"]</span></span><br><span class="line">    <span class="attr">resourceNames:</span> <span class="string">["heapster",</span> <span class="string">"dashboard-metrics-scraper"</span><span class="string">]</span></span><br><span class="line">    <span class="attr">verbs:</span> <span class="string">["proxy"]</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="string">["services/proxy"]</span></span><br><span class="line">    <span class="attr">resourceNames:</span></span><br><span class="line">      <span class="string">[</span></span><br><span class="line">        <span class="string">"heapster"</span><span class="string">,</span></span><br><span class="line">        <span class="string">"http:heapster:"</span><span class="string">,</span></span><br><span class="line">        <span class="string">"https:heapster:"</span><span class="string">,</span></span><br><span class="line">        <span class="string">"dashboard-metrics-scraper"</span><span class="string">,</span></span><br><span class="line">        <span class="string">"http:dashboard-metrics-scraper"</span><span class="string">,</span></span><br><span class="line">      <span class="string">]</span></span><br><span class="line">    <span class="attr">verbs:</span> <span class="string">["get"]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="comment"># Allow Metrics Scraper to get metrics from the Metrics server</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> <span class="string">["metrics.k8s.io"]</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="string">["pods",</span> <span class="string">"nodes"</span><span class="string">]</span></span><br><span class="line">    <span class="attr">verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">registry.cn-shanghai.aliyuncs.com/jieee/dashboard:v2.0.4</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8443</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--auto-generate-certificates</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--namespace=kubernetes-dashboard</span></span><br><span class="line">            <span class="comment"># Uncomment the following line to manually specify Kubernetes API server Host</span></span><br><span class="line">            <span class="comment"># If not specified, Dashboard will attempt to auto discover the API server and connect</span></span><br><span class="line">            <span class="comment"># to it. Uncomment only if the default does not work.</span></span><br><span class="line">            <span class="comment"># - --apiserver-host=http://my-address:port</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/certs</span></span><br><span class="line">              <span class="comment"># Create on-disk volume to store exec logs</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/tmp</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">tmp-volume</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTPS</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">8443</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">30</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">readOnlyRootFilesystem:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">runAsUser:</span> <span class="number">1001</span></span><br><span class="line">            <span class="attr">runAsGroup:</span> <span class="number">2001</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line">          <span class="attr">secret:</span></span><br><span class="line">            <span class="attr">secretName:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tmp-volume</span></span><br><span class="line">          <span class="attr">emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">"kubernetes.io/os":</span> <span class="string">linux</span></span><br><span class="line">      <span class="comment"># Comment the following tolerations if Dashboard must not be deployed on master</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line">          <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8000</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="attr">seccomp.security.alpha.kubernetes.io/pod:</span> <span class="string">"runtime/default"</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">registry.cn-shanghai.aliyuncs.com/jieee/metrics-scraper:v1.0.4</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8000</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">30</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/tmp</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">tmp-volume</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">readOnlyRootFilesystem:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">runAsUser:</span> <span class="number">1001</span></span><br><span class="line">            <span class="attr">runAsGroup:</span> <span class="number">2001</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">"kubernetes.io/os":</span> <span class="string">linux</span></span><br><span class="line">      <span class="comment"># Comment the following tolerations if Dashboard must not be deployed on master</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line">          <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tmp-volume</span></span><br><span class="line">          <span class="attr">emptyDir:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><ul><li>第一种：登录 dashboard 的方式(配置文件)<ul><li>采用 <code>token</code> 方式</li><li>采用秘钥文件方式</li></ul></li></ul><p><img src="https://img.hi-linux.com/staticfile/install-mini-k8s-02-2021-01-27-I5SV8j.jpg" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建管理员帐户(dashboard)</span></span><br><span class="line">$ cat &lt;&lt;EOF | kubectl apply -f -</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将用户绑定已经存在的集群管理员角色</span></span><br><span class="line">$ cat &lt;&lt;EOF | kubectl apply -f -</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取可用户于访问的token令牌</span></span><br><span class="line">$ kubectl -n kubernetes-dashboard describe secret \</span><br><span class="line">    $(kubectl -n kubernetes-dashboard get secret \</span><br><span class="line">    | grep admin-user | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br></pre></td></tr></table></figure><ul><li>登录界面展示<ul><li>针对 <code>Chrome</code> 浏览器，在空白处点击然后输入：<code>thisisunsafe</code></li><li>针对 <code>Firefox</code> 浏览器，遇到证书过期，添加例外访问</li></ul></li></ul><p><img src="https://img.hi-linux.com/staticfile/install-mini-k8s-03-2021-01-27-Ic3CiP.jpg" alt></p><ul><li>第二种：授权 dashboard 权限(不适用配置文件)<ul><li>如果登录之后提示权限问题的话，可以执行如下操作</li><li>把 <code>serviceaccount</code> 绑定在 <code>clusteradmin</code></li><li>授权 <code>serviceaccount</code> 用户具有整个集群的访问管理权限</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建serviceaccount</span></span><br><span class="line">$ kubectl create serviceaccount dashboard-admin -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把serviceaccount绑定在clusteradmin</span></span><br><span class="line"><span class="comment"># 授权serviceaccount用户具有整个集群的访问管理权限</span></span><br><span class="line">$ kubectl create clusterrolebinding \</span><br><span class="line">    dashboard-cluster-admin --clusterrole=cluster-admin \</span><br><span class="line">    --serviceaccount=kube-system:dashboard-admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取serviceaccount的secret信息，可得到token令牌的信息</span></span><br><span class="line">$ kubectl get secret -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过上边命令获取到dashboard-admin-token-slfcr信息</span></span><br><span class="line">$ kubectl describe secret &lt;dashboard-admin-token-slfcr&gt; -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问登录并把token粘贴进去登录即可</span></span><br><span class="line">https://192.168.30.30:8080/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 快捷查看token的命令</span></span><br><span class="line">$ kubectl describe secrets -n kube-system \</span><br><span class="line">    $(kubectl -n kube-system get secret | awk <span class="string">'/admin/&#123;print $1&#125;'</span>)</span><br></pre></td></tr></table></figure><h2><span id="5-参考链接">5. 参考链接</span></h2><ul><li><a href="https://www.taohui.pub/2020/12/22/%E5%8D%81%E5%88%86%E9%92%9F%E6%90%AD%E5%BB%BA%E5%A5%BDk8s%E9%9B%86%E7%BE%A4/" target="_blank" rel="noopener">十分钟搭建好 K8S 集群</a></li><li><a href="https://zhuanlan.zhihu.com/p/142945366" target="_blank" rel="noopener">基于阿里云 ubuntu 的 k8s-1.8.2 环境搭建</a></li><li><a href="https://zhang0peter.com/2020/01/30/k8s-install-and-use-and-fix-bug/" target="_blank" rel="noopener">从零开始在 ubuntu 上安装和使用 k8s 集群及报错解决</a></li></ul><blockquote><p>本文转载自：「 Escape 的博客 」，原文：<a href="https://tinyurl.com/y5cp67a3%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/y5cp67a3，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然网上有大量从零搭建 &lt;code&gt;K8S&lt;/code&gt; 的文章，但大都针对老版本，若直接照搬去安装最新的 &lt;code&gt;1.20&lt;/code&gt; 版本会遇到一堆问题。故此将我的安装步骤记录下来，希望能为读者提供 &lt;code&gt;copy and paste&lt;/code&gt; 式的集群搭建帮助。&lt;/p&gt;
&lt;h2 id=&quot;1-部署准备工作&quot;&gt;1. 部署准备工作&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;部署最小化 K8S 集群：master + node1 + node2&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Ubuntu&lt;/code&gt; 是一款基于 &lt;code&gt;Debian Linux&lt;/code&gt; 的以桌面应用为主的操作系统，内容涵盖文字处理、电子邮件、软件开发工具和 &lt;code&gt;Web&lt;/code&gt; 服务等，可供用户免费下载、使用和分享。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜ vgs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Current machine states:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;master                    running (virtualbox)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node1                     running (virtualbox)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node2                     running (virtualbox)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-1-基础环境信息&quot;&gt;1.1 基础环境信息&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;设置系统主机名以及 Host 文件各节点之间的相互解析
&lt;ul&gt;
&lt;li&gt;使用这个的 &lt;code&gt;Vagrantfile&lt;/code&gt; 启动的三节点服务已经配置好了&lt;/li&gt;
&lt;li&gt;以下使用 &lt;code&gt;master&lt;/code&gt; 节点进行演示查看，其他节点操作均一致&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# hostnamectl&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant@k8s-master:~$ hostnamectl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Static hostname: k8s-master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# hosts&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant@k8s-master:~$ cat /etc/hosts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1        localhost&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.1.1        vagrant.vm    vagrant&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.30.30    k8s-master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.30.31    k8s-node1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.30.32    k8s-node2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ping&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant@k8s-master:~$ ping k8s-node1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PING k8s-node1 (192.168.30.31) 56(84) bytes of data.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64 bytes from k8s-node1 (192.168.30.31): icmp_seq=1 ttl=64 time=0.689 ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/categories/kubernetes/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>再见 FTP/SFTP，是时候拥抱下一代文件传输利器 Croc 了！</title>
    <link href="https://www.hi-linux.com/posts/37218.html"/>
    <id>https://www.hi-linux.com/posts/37218.html</id>
    <published>2021-03-08T01:00:00.000Z</published>
    <updated>2021-03-08T01:30:13.616Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>两台电脑之间该如何传送档案，其实方法有超多种的，像是 FTP 或透过 SSH 方式来传送档案，但是这些方法步骤都有点复杂，<code>FTP</code> 需要搭建 <code>FTP</code> 服务，<code>SSH</code> 要学习 <code>SCP</code> 指令，那有没有更好的方式从单一电脑点对点传送档案到另一台呢？</p><p>传送过程需要快速又要安全，本文将介绍一套用 <a href="https://golang.org/" target="_blank" rel="noopener">Go 语言</a>写的工具叫 <a href="https://github.com/schollz/croc" target="_blank" rel="noopener">Croc</a>，详细的介绍可以参考看看 <a href="https://schollz.com/blog/croc6/" target="_blank" rel="noopener">作者的 Blog 介绍</a>，此工具有以下功能及优势。</p><a id="more"></a><h2><span id="工具特点及优势">工具特点及优势</span></h2><ol><li>用 Relay 方式让任意两台电脑传送档案</li><li>点对点加密 (使用 <a href="https://en.wikipedia.org/wiki/Password-authenticated_key_agreement" target="_blank" rel="noopener">PAKE</a>)</li><li>跨平台传送文件 (<code>Windows</code>, <code>Linux</code>, <code>Mac</code>)</li><li>一次可以传送多个文件或整个目录</li><li>支持断点续传</li><li>不需要自行搭建服务器或使用 port-forwarding 相关技术</li><li>优先使用<code> IPv6</code>，而 <code>IPv4</code> 当作备用</li><li>可以使用 <code>Socks5 proxy</code></li></ol><p>Croc 项目地址：<a href="https://github.com/schollz/croc" target="_blank" rel="noopener">https://github.com/schollz/croc</a></p><h2><span id="使用方式">使用方式</span></h2><p>使用方式如同底下这张图所表示</p><p><img src="https://img.hi-linux.com/staticfile/VHlioiLpLfqBnh5PnGjYhU6l7dZ2V3PURxz5RfulFL74xYYr4kL5EgkOa-OfLQyIALLgmRIcKlLHnbIENFe0cyv82XQW5ia0HgeNwm4u2ijNsjSQQjkrY4JJjloB_pHTOT-EtxzxOlw=w1920-h1080-2021-02-22-lN7gPS.png" alt></p><p>传送端只需要执行 <code>croc send file.txt</code> 即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ croc send ~/Downloads/data.csv</span><br><span class="line">Sending <span class="string">'data.csv'</span> (632.9 kB)</span><br><span class="line">Code is: cabinet-rodeo-mayday</span><br><span class="line">On the other computer run</span><br><span class="line"></span><br><span class="line">croc cabinet-rodeo-mayday</span><br></pre></td></tr></table></figure><p>上面可以看到会自动产生一个 <code>secret code</code>，接着在另外一台电脑执行底下指令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ croc cabinet-rodeo-mayday</span><br><span class="line">Accept <span class="string">'data.csv'</span> (632.9 kB)? (y/n) y</span><br><span class="line"></span><br><span class="line">Receiving (&lt;-111.243.108.9:51032)</span><br></pre></td></tr></table></figure><p>当然你也可以自订 <code>secret code</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">croc send --code appleboy ~/Downloads/data.csv</span><br></pre></td></tr></table></figure><p>由于此工具是通过 relay server 方式来进行传送，所以指令会预设连到官方所搭建的服务器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DEFAULT_RELAY is the default relay used (can be set using --relay)</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    DEFAULT_RELAY      = <span class="string">"croc.schollz.com"</span></span><br><span class="line">    DEFAULT_RELAY6     = <span class="string">"croc6.schollz.com"</span></span><br><span class="line">    DEFAULT_PORT       = <span class="string">"9009"</span></span><br><span class="line">    DEFAULT_PASSPHRASE = <span class="string">"pass123"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>假设你想要自己部署一个 <code>Relay Server</code> 呢？很简单，该工具也让使用者可以很快架设一台自己的 <code>Relay Server</code>，只需要执行下面的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ croc relay</span><br><span class="line">[info]  2021/02/16 11:38:59 starting croc relay version v8.6.7-05640cd</span><br><span class="line">[info]  2021/02/16 11:38:59 starting TCP server on 9010</span><br><span class="line">[info]  2021/02/16 11:38:59 starting TCP server on 9012</span><br><span class="line">[info]  2021/02/16 11:38:59 starting TCP server on 9009</span><br><span class="line">[info]  2021/02/16 11:38:59 starting TCP server on 9013</span><br><span class="line">[info]  2021/02/16 11:38:59 starting TCP server on 9011</span><br></pre></td></tr></table></figure><p>可以指定单一 Port:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ croc relay --ports 3001</span><br><span class="line">[info]  2021/02/16 11:39:22 starting croc relay version v8.6.7-05640cd</span><br><span class="line">[info]  2021/02/16 11:39:22 starting TCP server on 3001</span><br></pre></td></tr></table></figure><p>接着在传送档案时也要跟着换掉 <code>Relay Server</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ croc --relay 127.0.0.1:3001 send ~/Downloads/data.csv</span><br><span class="line">Sending <span class="string">'data.csv'</span> (632.9 kB)</span><br><span class="line">Code is: saddle-origin-horizon</span><br><span class="line">On the other computer run</span><br><span class="line"></span><br><span class="line">croc --relay 127.0.0.1:3001 saddle-origin-horizon</span><br></pre></td></tr></table></figure><p>可以看到只需要加上 <code>--relay 127.0.0.1:3001</code> 就可以完成了，所以部署 <code>Relay Server</code> 是很简单的，即使官方服务挂了，你也可以在任意一台电脑装上 <code>Relay Server</code> 了。</p><h2><span id="心得">心得</span></h2><p><code>Croc</code> 工具强调的就是: 简单 + 安全 + 快速，三大优势，让大家可以更容易点对点传送文件，加上 CLI 工具在任何平台都可以下载 (<code>Windows</code>,<code> Mac</code>, 及 <code>Linux</code>)，只需要一个指令就可以装好此工具，跟其他用户快速进行文件传输。</p><blockquote><p>本文转载自：「 小恶魔 」，原文：<a href="http://t.cn/A6tM8OkD" target="_blank" rel="noopener">http://t.cn/A6tM8OkD</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;两台电脑之间该如何传送档案，其实方法有超多种的，像是 FTP 或透过 SSH 方式来传送档案，但是这些方法步骤都有点复杂，&lt;code&gt;FTP&lt;/code&gt; 需要搭建 &lt;code&gt;FTP&lt;/code&gt; 服务，&lt;code&gt;SSH&lt;/code&gt; 要学习 &lt;code&gt;SCP&lt;/code&gt; 指令，那有没有更好的方式从单一电脑点对点传送档案到另一台呢？&lt;/p&gt;
&lt;p&gt;传送过程需要快速又要安全，本文将介绍一套用 &lt;a href=&quot;https://golang.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Go 语言&lt;/a&gt;写的工具叫 &lt;a href=&quot;https://github.com/schollz/croc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Croc&lt;/a&gt;，详细的介绍可以参考看看 &lt;a href=&quot;https://schollz.com/blog/croc6/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;作者的 Blog 介绍&lt;/a&gt;，此工具有以下功能及优势。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Croc" scheme="https://www.hi-linux.com/tags/Croc/"/>
    
  </entry>
  
  <entry>
    <title>推荐一款全能的跨平台文档格式转换工具 Pandoc</title>
    <link href="https://www.hi-linux.com/posts/14914.html"/>
    <id>https://www.hi-linux.com/posts/14914.html</id>
    <published>2021-03-05T01:00:00.000Z</published>
    <updated>2021-03-05T08:14:36.868Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><blockquote><p><strong>如果您需要将文件从一种标记格式转换为另一种标记格式，那么<a href="https://pandoc.org/" target="_blank" rel="noopener"><code>pandoc</code></a>就是您的瑞士军刀。</strong></p></blockquote><p><strong>OpenSource: 总结的快捷键使用文档</strong></p><p><img src="https://img.hi-linux.com/staticfile/pandoc-tools-3-20210128100807687-2021-01-28-oTubZV.png" alt="Pandoc文档格式转换工具"></p><h2><span id="1-格式转换">1. 格式转换</span></h2><blockquote><p><strong>具体的各种格式之间的转换，请看文末的图谱</strong></p></blockquote><p><img src="https://img.hi-linux.com/staticfile/pandoc-tools-1-2021-01-28-2nt2NR.jpg" alt="Pandoc文档格式转换工具"></p><h2><span id="2-安装方式">2. 安装方式</span></h2><blockquote><p><strong>几乎支持各种操作系统和平台，使用无忧</strong></p></blockquote><ul><li><strong>MacOS</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># brew</span></span><br><span class="line">brew install pandoc-citeproc</span><br><span class="line">brew install librsvg python homebrew/cask/basictex</span><br></pre></td></tr></table></figure><ul><li><strong>Linux</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt</span></span><br><span class="line">apt install pandoc</span><br><span class="line">apt install pandoc-citeproc</span><br><span class="line"></span><br><span class="line"><span class="comment"># download dpkg</span></span><br><span class="line">https://packages.ubuntu.com/pandoc</span><br></pre></td></tr></table></figure><ul><li><strong>Windows</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># download exe</span></span><br><span class="line">https://github.com/jgm/pandoc/releases/latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># using chocolatey</span></span><br><span class="line">choco install pandoc</span><br><span class="line">choco install rsvg-convert python miktex</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="3-使用方式">3. 使用方式</span></h2><blockquote><p><strong>转换原来，如此简单 =&gt; <a href="https://www.pandoc.org/demos.html" target="_blank" rel="noopener">官网使用参考地址</a></strong></p></blockquote><ul><li><strong>xxx =&gt; docx</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># txt to docx</span></span><br><span class="line">$ pandoc -s MANUAL.txt -o example29.docx</span><br><span class="line"></span><br><span class="line"><span class="comment"># LaTeX math to docx</span></span><br><span class="line">$ pandoc -s math.tex -o example30.docx</span><br><span class="line"></span><br><span class="line"><span class="comment"># Markdown to docx</span></span><br><span class="line">$ pandoc -s m.md -o m.docx</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docx with a reference docx:</span></span><br><span class="line">$ pandoc --reference-doc twocolumns.docx -o UsersGuide.docx MANUAL.txt</span><br></pre></td></tr></table></figure><ul><li><strong>md =&gt; xxx</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># markdown转换为html</span></span><br><span class="line">$ pandoc README.md -o README.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># markdown转换为word</span></span><br><span class="line">$ pandoc README.md -o README.docx</span><br><span class="line"></span><br><span class="line"><span class="comment"># markdown转换为pdf（latex之前是双短横线）</span></span><br><span class="line">$ pandoc README.md -o README.pdf --latex-engine=xelatex</span><br></pre></td></tr></table></figure><ul><li><strong>others</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EPUB to plain text</span></span><br><span class="line">$ pandoc MANUAL.epub -t plain -o example36.text</span><br></pre></td></tr></table></figure><ul><li><strong>注意事项</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过-V参数指定中文字体</span></span><br><span class="line">-V mainfont=<span class="string">"SimSun"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决中文乱码</span></span><br><span class="line">$ pandoc -V mainfont=<span class="string">"SimSun"</span> --reference-doc twocolumns.docx -o UsersGuide.docx MANUAL.txt</span><br></pre></td></tr></table></figure><p><img src="https://img.hi-linux.com/staticfile/pandoc-tools-2-20210128100913963-2021-01-28-t6meEe.jpg" alt="Pandoc文档格式转换工具"></p><blockquote><p>本文转载自：「 Escape 的博客 」，原文：<a href="http://t.cn/A65f0DtI%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">http://t.cn/A65f0DtI，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;如果您需要将文件从一种标记格式转换为另一种标记格式，那么&lt;a href=&quot;https://pandoc.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;pandoc&lt;/code&gt;&lt;/a&gt;就是您的瑞士军刀。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;OpenSource: 总结的快捷键使用文档&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.hi-linux.com/staticfile/pandoc-tools-3-20210128100807687-2021-01-28-oTubZV.png&quot; alt=&quot;Pandoc文档格式转换工具&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-格式转换&quot;&gt;1. 格式转换&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;具体的各种格式之间的转换，请看文末的图谱&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img.hi-linux.com/staticfile/pandoc-tools-1-2021-01-28-2nt2NR.jpg&quot; alt=&quot;Pandoc文档格式转换工具&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-安装方式&quot;&gt;2. 安装方式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;几乎支持各种操作系统和平台，使用无忧&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MacOS&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# brew&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;brew install pandoc-citeproc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;brew install librsvg python homebrew/cask/basictex&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# apt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apt install pandoc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apt install pandoc-citeproc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# download dpkg&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;https://packages.ubuntu.com/pandoc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# download exe&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;https://github.com/jgm/pandoc/releases/latest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# using chocolatey&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;choco install pandoc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;choco install rsvg-convert python miktex&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Pandoc" scheme="https://www.hi-linux.com/tags/Pandoc/"/>
    
  </entry>
  
  <entry>
    <title>使用 AutoSSH 工具实现自动化跨网络访问</title>
    <link href="https://www.hi-linux.com/posts/33293.html"/>
    <id>https://www.hi-linux.com/posts/33293.html</id>
    <published>2021-03-02T01:00:00.000Z</published>
    <updated>2021-03-02T03:07:04.750Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><blockquote><p><strong>AutoSSH 是一种用以对 SSH 登录进行安全地自动化的软件。！</strong></p></blockquote><p>比如我们在 <code>host2</code> 机器上面部署了很多服务，但是由于某种原因导致我们无法直接 <code>ssh</code> 访问该服务器已经其上服务的对应端口，但是 <code>host3</code> 服务器，既能够访问 <code>host2</code> 服务器，又可以访问我们的 host1 服务器。这是，我们可以通过设置 <code>ssh</code> 来进行服务的访问。但是还有两个问题：你需要保持终端开启防止 <code>SSH</code> 进程被关闭；由于网络故障/波动导致 <code>SSH</code> 终断时无法自动重连。</p><p>前者可以使用 <code>tmux</code> 等第三方工具来解决，后者需要 <code>supervisor</code> 等第三方监控工具，不过我们还有一个更常用的选择方案，那就是使用 <code>autossh</code> 工具。</p><ul><li><a href="http://www.freeoa.net/osuport/netmanage/autossh-useage-refer_2831.html" target="_blank" rel="noopener">autossh 使用参考</a></li><li><a href="https://www.escapelife.site/posts/e2e78d82.html" target="_blank" rel="noopener">SSH 服务原理和使用技巧</a></li></ul><h2><span id="1-工具介绍">1. 工具介绍</span></h2><blockquote><p><strong>该工具的起初灵感和机制来自于 rstunnel!</strong></p></blockquote><p><code>autossh</code> 工具是一个用来启动 <code>ssh</code> 服务并进行监控的命令行应用程序，可以在程序问题或者是网络问题的时候，重启 <code>ssh</code> 服务。</p><ul><li>在 <code>autossh 1.2</code> 的时候，其方法已经改变了：<code>autossh</code> 使用 <code>ssh</code> 来构造一个 <code>ssh</code> 重定向循环(本地到远程和远程到本地)，然后发送测试数据并获得返回结果。</li><li>在 <code>autossh 1.3</code> 增加了一个新的方法：可指定远程 <code>echo</code> 服务的端口用于返回测试数据发送结果。这个避免握手阶段以及所有远程机器端口的冲突问题，而老的 <code>loop-of-forwardings</code> 方法依然可用。</li></ul><p>内网主机主动连接到外网主机，又被称作<strong>反向连接</strong>(<code>Reverse Connection</code>)，这样 <code>NAT</code> 路由/防火墙就会在内网主机和外网主机之间建立映射即可相互通信了。但这种映射是路由网关自动维持的，不会持续下去，如果连接断开或者网络不稳定都会导致通信失败，这时内网主机需要自动重连机制了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装方式</span></span><br><span class="line">$ yum install autossh</span><br><span class="line">$ apt install autossh</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="2-使用方式">2. 使用方式</span></h2><blockquote><p><strong>autossh 使用了系统原生的 SSH 端口映射功能，性能开销非常小。</strong></p></blockquote><ul><li><strong>命令使用方式</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># autossh usage</span></span><br><span class="line">autossh [-V] [-M port[:echo_port]] [-f] [SSH_OPTIONS]</span><br></pre></td></tr></table></figure><ul><li><strong>命令使用参数</strong></li></ul><table><thead><tr><th style="text-align:left">编号</th><th style="text-align:left">参数</th><th style="text-align:left">含义说明</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><code>-M</code></td><td style="text-align:left">用于有问题时就会自动重连；服务器 echo 机制使用的端口</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><code>-D</code></td><td style="text-align:left">本地机器动态的应用程序端口转发</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><code>-R</code></td><td style="text-align:left">将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><code>-L</code></td><td style="text-align:left">将本地机(客户机)的某个端口转发到远端指定机器的指定端口</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><code>-f</code></td><td style="text-align:left">后台运行</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><code>-T</code></td><td style="text-align:left">不占用 shell</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left"><code>-n</code></td><td style="text-align:left">配合 -f 参数使用</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left"><code>-N</code></td><td style="text-align:left">不执行远程命令</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left"><code>-q</code></td><td style="text-align:left">安静模式运行；忽略提示和错误</td></tr></tbody></table><ul><li><strong>命令使用演示</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地端口绑定(在host1服务器上面运行)</span></span><br><span class="line"><span class="comment"># 将所有发送到本机的8527端口的所有数据转发到远程主机的8000端口</span></span><br><span class="line">$ ssh -vv -N -D localhost:8527 root@host2 -p 8000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要是为了更新安全的运行ssh服务</span></span><br><span class="line">$ autossh -M 5678 -vv -N -D localhost:8527 root@host2 -p 8000</span><br></pre></td></tr></table></figure><h2><span id="3-示例演示">3. 示例演示</span></h2><blockquote><p><strong>SSH 仅支持 TCP 端口映射!</strong></p></blockquote><p>如果需要映射的端口不多，只有几个的话，<code>autossh</code> 确实是最佳选择。但是如果需要映射大量端口，建议还是使用类似 <code>Ngrok</code> 的端口映射工具，毕竟这类工具拥有比较完善的管理功能。</p><ul><li><strong>[1] 本地端口绑定和转发 (-L) =&gt; 在 host1 上面设置</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将在host1主机上开启一个本地侦听的5900端口</span></span><br><span class="line"><span class="comment"># 这样之后，访问本地5900端口的流量将转发至host2的8000端口</span></span><br><span class="line"><span class="comment"># 其中-M参数负责通过5678端口监视连接状态，连接有问题时就会自动重连</span></span><br><span class="line">$ autossh -M 5678 -fCN -L 5900:localhost:8000 root@host3</span><br><span class="line">$ autossh -M 5678 -fCN -L 5900:root@host2:8000 root@host3</span><br></pre></td></tr></table></figure><p><img src="https://img.hi-linux.com/staticfile/ssh-authenticity-and-use-1-2021-01-25-YnJPBd.png" alt></p><ul><li><strong>[2] 远程端口转发功能 (-R) =&gt; 在 host3 上面设置</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将在host1主机上开启一个本地侦听的5900端口</span></span><br><span class="line"><span class="comment"># 这样之后，访问本地5900端口的流量将转发至host2的8080端口</span></span><br><span class="line"><span class="comment"># 其中-M参数负责通过5678端口监视连接状态，连接有问题时就会自动重连</span></span><br><span class="line">$ autossh -M 5678 -fCN -R 5900:localhost:8000 root@host1</span><br><span class="line">$ autossh -M 5678 -fCN -R 5900:root@host2:8000 root@host1</span><br></pre></td></tr></table></figure><p><img src="https://img.hi-linux.com/staticfile/ssh-authenticity-and-use-2-2021-01-25-nuyTIh.png" alt></p><ul><li><strong>[3] 动态端口转发功能 (-D) =&gt; 在 host1 上面设置</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 动态端口转发功能</span></span><br><span class="line">$ autossh -M 5678 -vv -D 1080 root@host2</span><br></pre></td></tr></table></figure><h2><span id="4-开机自启动">4. 开机自启动</span></h2><blockquote><p><strong>系统开机，服务自启动！</strong></p></blockquote><p>在 <code>Ubuntu</code> 或 <code>CentOS</code> 系统中，我们使用 <code>systemd</code> 来管理 <code>autossh</code> 的开机启动问题。配置很简单，只需要创建一个如下服务启动配置文件，即可。旧版本中可以使用 <code>init.d</code> 来管理方式，只需要添加对应命令到 <code>rc.local</code> 文件，即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line"><span class="comment"># 配置文件地址</span></span><br><span class="line"><span class="comment"># /etc/systemd/system/remote-autossh.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=AutoSSH service <span class="keyword">for</span> remote tunnel</span><br><span class="line">After=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/usr/bin/autossh -M 5678 -fCNR 18081:host2:8080 root@host1</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS</span></span><br><span class="line"><span class="comment"># 配置文件地址</span></span><br><span class="line"><span class="comment"># /etc/rc.d/rc.local</span></span><br><span class="line">$ /usr/bin/autossh -M 5678 -fCNR 18081:host2:8080 root@host1</span><br></pre></td></tr></table></figure><h2><span id="5-编写启停脚本">5. 编写启停脚本</span></h2><blockquote><p><strong>可以随时随地的启动、停止我们到服务端口映射！</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">PASS=<span class="string">"escapelife"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">doexit</span></span>()&#123;</span><br><span class="line">    expect -c <span class="string">"</span></span><br><span class="line"><span class="string">    set timeout -1</span></span><br><span class="line"><span class="string">    spawn <span class="variable">$1</span> -t ps aux |grep escape |grep sshd |awk '&#123;print <span class="variable">$2</span>&#125;' |xargs kill -9</span></span><br><span class="line"><span class="string">    expect &#123;</span></span><br><span class="line"><span class="string">        \"*?assword:*\" &#123;</span></span><br><span class="line"><span class="string">            send \"<span class="variable">$PASS</span>\r\"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    expect eof</span></span><br><span class="line"><span class="string">    "</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">dossh</span></span>()&#123;</span><br><span class="line">    nohup expect -c <span class="string">"</span></span><br><span class="line"><span class="string">    set timeout -1</span></span><br><span class="line"><span class="string">    spawn <span class="variable">$1</span></span></span><br><span class="line"><span class="string">    expect &#123;</span></span><br><span class="line"><span class="string">        \"*?assword:*\" &#123;</span></span><br><span class="line"><span class="string">            send \"<span class="variable">$PASS</span>\r\";</span></span><br><span class="line"><span class="string">            exp_continue</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    "</span> &amp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先关掉每台服务器的sshd连接</span></span><br><span class="line">doexit <span class="string">"ssh -o -p 6622 escape@aliyun"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动ssh端口映射</span></span><br><span class="line">dossh <span class="string">"autossh -o -M 5678 -N -L 5900:127.0.0.1:8000 escape@aliyun -p 6622"</span></span><br></pre></td></tr></table></figure><blockquote><p>本文转载自：「 Escape 的博客 」，原文：<a href="https://tinyurl.com/yxnrxgoa" target="_blank" rel="noopener">https://tinyurl.com/yxnrxgoa</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;AutoSSH 是一种用以对 SSH 登录进行安全地自动化的软件。！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比如我们在 &lt;code&gt;host2&lt;/code&gt; 机器上面部署了很多服务，但是由于某种原因导致我们无法直接 &lt;code&gt;ssh&lt;/code&gt; 访问该服务器已经其上服务的对应端口，但是 &lt;code&gt;host3&lt;/code&gt; 服务器，既能够访问 &lt;code&gt;host2&lt;/code&gt; 服务器，又可以访问我们的 host1 服务器。这是，我们可以通过设置 &lt;code&gt;ssh&lt;/code&gt; 来进行服务的访问。但是还有两个问题：你需要保持终端开启防止 &lt;code&gt;SSH&lt;/code&gt; 进程被关闭；由于网络故障/波动导致 &lt;code&gt;SSH&lt;/code&gt; 终断时无法自动重连。&lt;/p&gt;
&lt;p&gt;前者可以使用 &lt;code&gt;tmux&lt;/code&gt; 等第三方工具来解决，后者需要 &lt;code&gt;supervisor&lt;/code&gt; 等第三方监控工具，不过我们还有一个更常用的选择方案，那就是使用 &lt;code&gt;autossh&lt;/code&gt; 工具。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.freeoa.net/osuport/netmanage/autossh-useage-refer_2831.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;autossh 使用参考&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.escapelife.site/posts/e2e78d82.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SSH 服务原理和使用技巧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-工具介绍&quot;&gt;1. 工具介绍&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;该工具的起初灵感和机制来自于 rstunnel!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;autossh&lt;/code&gt; 工具是一个用来启动 &lt;code&gt;ssh&lt;/code&gt; 服务并进行监控的命令行应用程序，可以在程序问题或者是网络问题的时候，重启 &lt;code&gt;ssh&lt;/code&gt; 服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;autossh 1.2&lt;/code&gt; 的时候，其方法已经改变了：&lt;code&gt;autossh&lt;/code&gt; 使用 &lt;code&gt;ssh&lt;/code&gt; 来构造一个 &lt;code&gt;ssh&lt;/code&gt; 重定向循环(本地到远程和远程到本地)，然后发送测试数据并获得返回结果。&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;autossh 1.3&lt;/code&gt; 增加了一个新的方法：可指定远程 &lt;code&gt;echo&lt;/code&gt; 服务的端口用于返回测试数据发送结果。这个避免握手阶段以及所有远程机器端口的冲突问题，而老的 &lt;code&gt;loop-of-forwardings&lt;/code&gt; 方法依然可用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内网主机主动连接到外网主机，又被称作&lt;strong&gt;反向连接&lt;/strong&gt;(&lt;code&gt;Reverse Connection&lt;/code&gt;)，这样 &lt;code&gt;NAT&lt;/code&gt; 路由/防火墙就会在内网主机和外网主机之间建立映射即可相互通信了。但这种映射是路由网关自动维持的，不会持续下去，如果连接断开或者网络不稳定都会导致通信失败，这时内网主机需要自动重连机制了。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 安装方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yum install autossh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ apt install autossh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="SSH" scheme="https://www.hi-linux.com/categories/SSH/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="SSH" scheme="https://www.hi-linux.com/tags/SSH/"/>
    
      <category term="AutoSSH" scheme="https://www.hi-linux.com/tags/AutoSSH/"/>
    
  </entry>
  
  <entry>
    <title>利用 etcdhosts 插件快速搭建分布式 CoreDNS 集群</title>
    <link href="https://www.hi-linux.com/posts/3252.html"/>
    <id>https://www.hi-linux.com/posts/3252.html</id>
    <published>2021-03-01T01:00:00.000Z</published>
    <updated>2021-03-01T03:15:04.834Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2><span id="etcdhosts-插件简介">etcdhosts 插件简介</span></h2><p>etcdhosts 顾名思义，就是将 hosts 文件存储在 Etcd 中，然后多个 CoreDNS 共享一份 hosts 文件；得益于 Etcd 提供的 watch 功能，当 Etcd 中的 hosts 文件更新时，每台 CoreDNS 服务器都会接到推送，同时完成热重载；etcdhosts 基本架构如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">|                                                                             |</span><br><span class="line">|   +-----------+                                                             |</span><br><span class="line">|   |           |                                                             |</span><br><span class="line">|   |  CoreDNS  +---------------------+                                       |</span><br><span class="line">|   |           |                     |                                       |</span><br><span class="line">|   +-----------+                     |                +------------------+   |</span><br><span class="line">|                                     |                |                  |   |</span><br><span class="line">|                            +--------v---------+      |                  |   |</span><br><span class="line">|   +-----------+            |                  |      |                  |   |</span><br><span class="line">|   |           |            |                  |      | dnsctl or        |   |</span><br><span class="line">|   |  CoreDNS  +------------&gt;   Etcd Cluster   &lt;------+ other etcd tool  |   |</span><br><span class="line">|   |           |            |                  |      |                  |   |</span><br><span class="line">|   +-----------+            |                  |      |                  |   |</span><br><span class="line">|                            +---------^--------+      |                  |   |</span><br><span class="line">|                                      |               |                  |   |</span><br><span class="line">|   +-----------+                      |               +------------------+   |</span><br><span class="line">|   |           |                      |                                      |</span><br><span class="line">|   |  CoreDNS  +----------------------+                                      |</span><br><span class="line">|   |           |                                                             |</span><br><span class="line">|   +-----------+                                                             |</span><br><span class="line">|                                                                             |</span><br><span class="line">|                                                                             |</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><h2><span id="编译-coredns">编译 CoreDNS</span></h2><blockquote><p>etcdhosts <a href="https://github.com/ytpay/etcdhosts/releases" target="_blank" rel="noopener">release</a> 页已经提供部分版本的预编译文件，可以直接下载使用。</p></blockquote><p><a href="https://github.com/ytpay/etcdhosts" target="_blank" rel="noopener">etcdhosts</a> 作为一个 CoreDNS 扩展插件采用直接偶合的方式编写(未采用 gRPC 是因为考虑性能影响)，这意味着需要重新编译 CoreDNS 来集成插件，以下为 CoreDNS 编译过程(使用 docker):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># clone source code</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;ytpay&#x2F;etcdhosts.git</span><br><span class="line"># build</span><br><span class="line">cd etcdhosts &amp;&amp; .&#x2F;build v1.8.0</span><br></pre></td></tr></table></figure><p>编译完成后将在 <code>build</code> 目录下生成各个平台的二进制文件压缩包。</p><a id="more"></a><h2><span id="搭建-etcd-集群">搭建 Etcd 集群</span></h2><p>Etcd 集群搭建将直接采用 deb 安装包，具体细节这里不再阐述，本次搭建系统为 Ubuntu 20，以下为搭建步骤。</p><h3><span id="21-安装软件包">2.1、安装软件包</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 下载 cfssl 安装包，用于签署证书</span><br><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;mritd&#x2F;etcd-deb&#x2F;releases&#x2F;download&#x2F;v3.4.13&#x2F;cfssl_1.4.1_amd64.deb</span><br><span class="line"># 下载 etcd 安装包</span><br><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;mritd&#x2F;etcd-deb&#x2F;releases&#x2F;download&#x2F;v3.4.13&#x2F;etcd_3.4.13_amd64.deb</span><br><span class="line"># 执行安装</span><br><span class="line">dpkg -i cfssl_1.4.1_amd64.deb etcd_3.4.13_amd64.deb</span><br></pre></td></tr></table></figure><h3><span id="22-创建证书">2.2、创建证书</span></h3><p>创建证书需要先修改证书配置文件(<code>etcd-csr.json</code>)然后借助 cfssl 工具来创建证书</p><p><strong><code>/etc/etcd/cfssl/etcd-csr.json</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;O&quot;: &quot;etcd&quot;,</span><br><span class="line">            &quot;OU&quot;: &quot;etcd Security&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;Beijing&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;Beijing&quot;,</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;CN&quot;: &quot;etcd&quot;,</span><br><span class="line">    &quot;hosts&quot;: [</span><br><span class="line">        &quot;127.0.0.1&quot;,</span><br><span class="line">        &quot;localhost&quot;,</span><br><span class="line">        &quot;*.etcd.node&quot;,</span><br><span class="line">        &quot;*.kubernetes.node&quot;,</span><br><span class="line">+       &quot;172.16.11.71&quot;,</span><br><span class="line">+       &quot;172.16.11.72&quot;,</span><br><span class="line">+       &quot;172.16.11.73&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过脚本创建证书</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;etcd&#x2F;cfssl</span><br><span class="line">.&#x2F;create.sh</span><br><span class="line">cp *.pem &#x2F;etc&#x2F;etcd&#x2F;ssl</span><br></pre></td></tr></table></figure><p><strong>证书创建完成后需要分发到其他两台机器上，保证三台节点的 <code>/etc/etcd/ssl</code> 目录证书相同。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 复制证书</span><br><span class="line">scp &#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;*.pem root@NODE2:&#x2F;etc&#x2F;etcd&#x2F;ssl</span><br><span class="line">scp &#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;*.pem root@NODE3:&#x2F;etc&#x2F;etcd&#x2F;ssl</span><br><span class="line"># 修复权限(三台都要修复)</span><br><span class="line">chown -R etcd:etcd &#x2F;etc&#x2F;etcd&#x2F;</span><br></pre></td></tr></table></figure><h3><span id="23-调整集群配置">2.3、调整集群配置</span></h3><p>证书签署完成后，简单的调整每台机器上的集群节点配置即可</p><p><strong><code>/etc/etcd/etcd.conf</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># [member]</span><br><span class="line">+ # 节点号自行修改，推荐格式: etcd+节点IP，例如 etcd21</span><br><span class="line">+ ETCD_NAME&#x3D;etcd1</span><br><span class="line">ETCD_DATA_DIR&#x3D;&quot;&#x2F;var&#x2F;lib&#x2F;etcd&#x2F;data&quot;</span><br><span class="line">ETCD_WAL_DIR&#x3D;&quot;&#x2F;var&#x2F;lib&#x2F;etcd&#x2F;wal&quot;</span><br><span class="line">ETCD_SNAPSHOT_COUNT&#x3D;&quot;100&quot;</span><br><span class="line">+ # 修改为当前机器 IP</span><br><span class="line">+ ETCD_LISTEN_PEER_URLS&#x3D;&quot;https:&#x2F;&#x2F;172.16.11.71:2380&quot;</span><br><span class="line">+ # 修改为当前机器 IP</span><br><span class="line">+ ETCD_LISTEN_CLIENT_URLS&#x3D;&quot;https:&#x2F;&#x2F;172.16.11.71:2379,http:&#x2F;&#x2F;127.0.0.1:2379&quot;</span><br><span class="line">ETCD_QUOTA_BACKEND_BYTES&#x3D;&quot;8589934592&quot;</span><br><span class="line">ETCD_MAX_REQUEST_BYTES&#x3D;&quot;10485760&quot;</span><br><span class="line"></span><br><span class="line"># [cluster]</span><br><span class="line">+ # 修改为当前机器 IP</span><br><span class="line">+ ETCD_INITIAL_ADVERTISE_PEER_URLS&#x3D;&quot;https:&#x2F;&#x2F;172.16.11.71:2380&quot;</span><br><span class="line"># if you use different ETCD_NAME (e.g. test), set ETCD_INITIAL_CLUSTER value for this name, i.e. &quot;test&#x3D;http:&#x2F;&#x2F;...&quot;</span><br><span class="line">+ # 三台机器都要按照格式写好</span><br><span class="line">+ ETCD_INITIAL_CLUSTER&#x3D;&quot;etcd1&#x3D;https:&#x2F;&#x2F;172.16.11.71:2380,etcd2&#x3D;https:&#x2F;&#x2F;172.16.11.72:2380,etcd3&#x3D;https:&#x2F;&#x2F;172.16.11.73:2380&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE&#x3D;&quot;new&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN&#x3D;&quot;etcd-cluster&quot;</span><br><span class="line">+ # 修改为当前机器 IP</span><br><span class="line">+ ETCD_ADVERTISE_CLIENT_URLS&#x3D;&quot;https:&#x2F;&#x2F;172.16.11.71:2379&quot;</span><br><span class="line"></span><br><span class="line">ETCD_AUTO_COMPACTION_MODE&#x3D;&quot;revision&quot;</span><br><span class="line">ETCD_AUTO_COMPACTION_RETENTION&#x3D;&quot;16&quot;</span><br><span class="line">ETCD_QUOTA_BACKEND_BYTES&#x3D;&quot;5368709120&quot;</span><br><span class="line"></span><br><span class="line"># [security]</span><br><span class="line">ETCD_CERT_FILE&#x3D;&quot;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd.pem&quot;</span><br><span class="line">ETCD_KEY_FILE&#x3D;&quot;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd-key.pem&quot;</span><br><span class="line">ETCD_TRUSTED_CA_FILE&#x3D;&quot;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd-root-ca.pem&quot;</span><br><span class="line">ETCD_CLIENT_CERT_AUTH&#x3D;&quot;true&quot;</span><br><span class="line">ETCD_AUTO_TLS&#x3D;&quot;true&quot;</span><br><span class="line">ETCD_PEER_CERT_FILE&#x3D;&quot;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd.pem&quot;</span><br><span class="line">ETCD_PEER_KEY_FILE&#x3D;&quot;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd-key.pem&quot;</span><br><span class="line">ETCD_PEER_CLIENT_CERT_AUTH&#x3D;&quot;true&quot;</span><br><span class="line">ETCD_PEER_TRUSTED_CA_FILE&#x3D;&quot;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd-root-ca.pem&quot;</span><br><span class="line">ETCD_PEER_AUTO_TLS&#x3D;&quot;true&quot;</span><br></pre></td></tr></table></figure><p>最后每台机器执行 <code>systemctl start etcd</code> 启动即可，验证集群是否健康可以使用如下命令测试:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">etcdctl endpoint health --cert &#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd.pem --key &#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd-key.pem --cacert &#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd-root-ca.pem --endpoints https:&#x2F;&#x2F;172.16.11.71:2379,https:&#x2F;&#x2F;172.16.11.72:2379,https:&#x2F;&#x2F;172.16.11.73:2379</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;172.16.11.71:2379 is healthy: successfully committed proposal: took &#x3D; 33.07493ms</span><br><span class="line">https:&#x2F;&#x2F;172.16.11.72:2379 is healthy: successfully committed proposal: took &#x3D; 32.132266ms</span><br><span class="line">https:&#x2F;&#x2F;172.16.11.73:2379 is healthy: successfully committed proposal: took &#x3D; 40.745291ms</span><br></pre></td></tr></table></figure><h2><span id="搭建-coredns-集群">搭建 CoreDNS 集群</span></h2><h3><span id="31-coredns-安装">3.1、CoreDNS 安装</span></h3><p>系统级 CoreDNS 安装推荐直接使用 systemd 管理，官方目前提供了 systemd 相关配置文件: <a href="https://github.com/coredns/deployment/tree/master/systemd" target="_blank" rel="noopener">https://github.com/coredns/deployment/tree/master/systemd</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 安装二进制文件</span><br><span class="line">tar -zxvf coredns_1.8.0_linux_amd64.tgz</span><br><span class="line">mv coredns &#x2F;usr&#x2F;bin&#x2F;coredns</span><br><span class="line"></span><br><span class="line"># 安装 systemd 配置</span><br><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;coredns&#x2F;deployment&#x2F;master&#x2F;systemd&#x2F;coredns-sysusers.conf -O &#x2F;usr&#x2F;lib&#x2F;sysusers.d&#x2F;coredns-sysusers.conf</span><br><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;coredns&#x2F;deployment&#x2F;master&#x2F;systemd&#x2F;coredns-tmpfiles.conf -O &#x2F;usr&#x2F;lib&#x2F;tmpfiles.d&#x2F;coredns-tmpfiles.conf</span><br><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;coredns&#x2F;deployment&#x2F;master&#x2F;systemd&#x2F;coredns.service -O &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;coredns.service</span><br><span class="line"></span><br><span class="line"># reload</span><br><span class="line">systemctl daemon-reload</span><br><span class="line"># 初始化用户</span><br><span class="line">systemd-sysusers</span><br><span class="line"># 初始化临时目录</span><br><span class="line">systemd-tmpfiles --create</span><br><span class="line"># 创建配置目录</span><br><span class="line">mkdir -p &#x2F;etc&#x2F;coredns&#x2F;ssl</span><br></pre></td></tr></table></figure><h3><span id="32-etcdhosts-配置">3.2、etcdhosts 配置</span></h3><p>etcdhosts 的配置类似官方的 etcd 插件，其配置格式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">etcdhosts [ZONES...] &#123;</span><br><span class="line">    [INLINE]</span><br><span class="line">    ttl SECONDS</span><br><span class="line">    no_reverse</span><br><span class="line">    fallthrough [ZONES...]</span><br><span class="line">    key ETCD_KEY</span><br><span class="line">    endpoint ETCD_ENDPOINT...</span><br><span class="line">    credentials ETCD_USERNAME ETCD_PASSWORD</span><br><span class="line">    tls ETCD_CERT ETCD_KEY ETCD_CACERT</span><br><span class="line">    timeout ETCD_TIMEOUT</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是一个简单的可启动的样例配置:</p><p><strong><code>/etc/coredns/Corefile</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">. &#123;</span><br><span class="line">    # 绑定接口地址</span><br><span class="line">    bind 172.16.11.71</span><br><span class="line"></span><br><span class="line">    # cache</span><br><span class="line">    cache 30 . &#123;</span><br><span class="line">        success 4096</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # etcdhosts 配置</span><br><span class="line">    etcdhosts . &#123;</span><br><span class="line">        fallthrough .</span><br><span class="line">        key &#x2F;etcdhosts</span><br><span class="line">        timeout 5s</span><br><span class="line">        tls &#x2F;etc&#x2F;coredns&#x2F;ssl&#x2F;etcd.pem &#x2F;etc&#x2F;coredns&#x2F;ssl&#x2F;etcd-key.pem &#x2F;etc&#x2F;coredns&#x2F;ssl&#x2F;etcd-root-ca.pem</span><br><span class="line">        endpoint https:&#x2F;&#x2F;172.16.11.71:2379 https:&#x2F;&#x2F;172.16.11.72:2379 https:&#x2F;&#x2F;172.16.11.73:2379</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 上游 DNS 配置</span><br><span class="line">    forward . 114.114.114.114:53 &#123;</span><br><span class="line">        max_fails 2</span><br><span class="line">        expire 20s</span><br><span class="line">        policy random</span><br><span class="line">        health_check 0.2s</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 日志配置</span><br><span class="line">    errors</span><br><span class="line">    log . &quot;&#123;remote&#125;:&#123;port&#125; - &#123;&gt;id&#125; \&quot;&#123;type&#125; &#123;class&#125; &#123;name&#125; &#123;proto&#125; &#123;size&#125; &#123;&gt;do&#125; &#123;&gt;bufsize&#125;\&quot; &#123;rcode&#125; &#123;&gt;rflags&#125; &#123;rsize&#125; &#123;duration&#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 etcdhosts 插件需要连接 etcd 集群，所以需要将证书复制到 <code>Corefile</code> 指定的位置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 实际生产环境 coredns 与 etcd 一般不在一台机器上，请自行 scp</span><br><span class="line">cp &#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;*.pem &#x2F;etc&#x2F;coredns&#x2F;ssl</span><br><span class="line"># 修复权限</span><br><span class="line">chown -R coredns:coredns &#x2F;etc&#x2F;coredns</span><br></pre></td></tr></table></figure><p><strong>最后直接启动即可(首次启动会出现 <code>[ERROR] plugin/etcdhosts: invalid etcd response: 0</code> 错误，属于正常情况):</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 启动</span><br><span class="line">systemctl start coredns</span><br><span class="line"></span><br><span class="line"># 测试</span><br><span class="line">dig @172.16.11.71 baidu.com</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; @172.16.11.71 baidu.com</span><br><span class="line">; (1 server found)</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 35323</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="line">; COOKIE: 8e3137531ed0b57a (echoed)</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;baidu.com.                     IN      A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">baidu.com.              30      IN      A       220.181.38.148</span><br><span class="line">baidu.com.              30      IN      A       39.156.69.79</span><br><span class="line"></span><br><span class="line">;; Query time: 8 msec</span><br><span class="line">;; SERVER: 172.16.11.71#53(172.16.11.71)</span><br><span class="line">;; WHEN: Mon Nov 16 20:18:25 CST 2020</span><br><span class="line">;; MSG SIZE  rcvd: 100</span><br></pre></td></tr></table></figure><p><strong>最后在多台机器上通过同样的配置启动 CoreDNS 即可，此时所有 CoreDNS 服务器通过 Etcd 提供一致性的记录解析。</strong></p><h2><span id="记录调整">记录调整</span></h2><p>所有 CoreDNS 启动成功后，默认 etcdhosts 插件将会读取 Etcd 中的 <code>/etcdhosts</code> key 作为 hosts 文件载入；**载入成功后将会在内存级进行 Cache，多次查询不会造成疯狂的 Etcd 请求，只有当触发 reload 时(包括 Etcd 更新)才会重新查询 Etcd。**所以此时只需要向 Etcd 的 <code>/etcdhosts</code> key 写入一个 hosts 文件即可；写入 Etcd 可以使用 etcdctl 以及其他的开源工具，甚至自己开发都可以，**记录更改只需要跟 Etcd 打交道，不需要理会 CoreDNS；**由于本人实在是比较菜，前端页面写不出来，所以弄了一个命令行版本的工具: <a href="https://github.com/ytpay/dnsctl" target="_blank" rel="noopener">dnsctl</a></p><p>dnsctl 只有一个可执行文件，**默认情况下 dnsctl 读取 <code>$HOME/.dnsctl.yaml</code> 配置文件来沟通 Etcd，**配置文件格式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># etcd 中 etcdhosts 插件的 key</span><br><span class="line">dnskey: &#x2F;etcdhosts</span><br><span class="line"># etcd 集群配置</span><br><span class="line">etcd:</span><br><span class="line">  cert: &#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd.pem</span><br><span class="line">  key: &#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd-key.pem</span><br><span class="line">  ca: &#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd-root-ca.pem</span><br><span class="line">  endpoints:</span><br><span class="line">    - https:&#x2F;&#x2F;172.16.11.71:2379</span><br><span class="line">    - https:&#x2F;&#x2F;172.16.11.72:2379</span><br><span class="line">    - https:&#x2F;&#x2F;172.16.11.73:2379</span><br></pre></td></tr></table></figure><p>dnsctl 提供如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">dnsctl for etcdhosts plugin</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  dnsctl [flags]</span><br><span class="line">  dnsctl [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  config      show example config</span><br><span class="line">  dump        dump hosts</span><br><span class="line">  edit        edit hosts</span><br><span class="line">  help        Help about any command</span><br><span class="line">  upload      upload hosts from file</span><br><span class="line">  version     show hosts version</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --config string   config file (default is $HOME&#x2F;.dnsctl.yaml)</span><br><span class="line">  -h, --help            help for dnsctl</span><br><span class="line">  -v, --version         version for dnsctl</span><br><span class="line"></span><br><span class="line">Use &quot;dnsctl [command] --help&quot; for more information about a command.</span><br></pre></td></tr></table></figure><p>其中 <code>edit</code> 命令将会打开系统默认编辑器(例如 vim)，然后编辑完保存后会自动上传到 Etcd 中，此后 CoreDNS 的 etcdhosts 插件将会立即重载；<strong><code>dump</code> 命令用于将 Etcd 中的 hosts 文件保存到本地用于备份，<code>upload</code> 命令可以将已有的 hosts 文件上传到 Etcd 用于恢复。</strong></p><blockquote><p>本文转载自：「 Bleem 」，原文：<a href="https://tinyurl.com/y5sgwryn" target="_blank" rel="noopener">https://tinyurl.com/y5sgwryn</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;etcdhosts-插件简介&quot;&gt;etcdhosts 插件简介&lt;/h2&gt;
&lt;p&gt;etcdhosts 顾名思义，就是将 hosts 文件存储在 Etcd 中，然后多个 CoreDNS 共享一份 hosts 文件；得益于 Etcd 提供的 watch 功能，当 Etcd 中的 hosts 文件更新时，每台 CoreDNS 服务器都会接到推送，同时完成热重载；etcdhosts 基本架构如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+-----------------------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                                                                             |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   +-----------+                                                             |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |           |                                                             |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |  CoreDNS  +---------------------+                                       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |           |                     |                                       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   +-----------+                     |                +------------------+   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                                     |                |                  |   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                            +--------v---------+      |                  |   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   +-----------+            |                  |      |                  |   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |           |            |                  |      | dnsctl or        |   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |  CoreDNS  +------------&amp;gt;   Etcd Cluster   &amp;lt;------+ other etcd tool  |   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |           |            |                  |      |                  |   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   +-----------+            |                  |      |                  |   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                            +---------^--------+      |                  |   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                                      |               |                  |   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   +-----------+                      |               +------------------+   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |           |                      |                                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |  CoreDNS  +----------------------+                                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |           |                                                             |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   +-----------+                                                             |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                                                                             |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                                                                             |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-----------------------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;编译-CoreDNS&quot;&gt;编译 CoreDNS&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;etcdhosts &lt;a href=&quot;https://github.com/ytpay/etcdhosts/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;release&lt;/a&gt; 页已经提供部分版本的预编译文件，可以直接下载使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ytpay/etcdhosts&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;etcdhosts&lt;/a&gt; 作为一个 CoreDNS 扩展插件采用直接偶合的方式编写(未采用 gRPC 是因为考虑性能影响)，这意味着需要重新编译 CoreDNS 来集成插件，以下为 CoreDNS 编译过程(使用 docker):&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# clone source code&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git clone https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;ytpay&amp;#x2F;etcdhosts.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd etcdhosts &amp;amp;&amp;amp; .&amp;#x2F;build v1.8.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译完成后将在 &lt;code&gt;build&lt;/code&gt; 目录下生成各个平台的二进制文件压缩包。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CoreDNS" scheme="https://www.hi-linux.com/categories/CoreDNS/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="CoreDNS" scheme="https://www.hi-linux.com/tags/CoreDNS/"/>
    
  </entry>
  
</feed>
