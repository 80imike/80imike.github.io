<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>奇妙的 Linux 世界</title>
  
  <subtitle>种一棵树最好的时间是十年前，其次是现在。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.hi-linux.com/"/>
  <updated>2021-05-17T02:18:52.381Z</updated>
  <id>https://www.hi-linux.com/</id>
  
  <author>
    <name>Mike</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>手把手教你实现一个支持无限层级泛域名解析的 DNS 服务器 Xip</title>
    <link href="https://www.hi-linux.com/posts/12599.html"/>
    <id>https://www.hi-linux.com/posts/12599.html</id>
    <published>2021-05-17T01:00:00.000Z</published>
    <updated>2021-05-17T02:18:52.381Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2><span id="什么是-xipio">什么是 </span></h2><p><code>xip.io</code> 是一个提供通配符 <code>DNS</code> 解析的魔法域名。你可以无需配置，将自定义的任何域名解析到指定的 <code>IP</code> 地址。假设你的 <code>IP</code> 地址是 <code>10.0.0.1</code>，你只需使用 <code>前缀域名+IP地址+xip.io</code> 即可完成相应自定义域名解析。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10.0.0.1.xip.io         # 解析到 10.0.0.1</span><br><span class="line">www.10.0.0.2.xip.io     # www 子域解析到 10.0.0.2</span><br><span class="line">mysite.10.0.0.3.xip.io  # mysite 子域解析到 10.0.0.3</span><br><span class="line">foo.bar.10.0.0.4.xip.io # foo.bar 子域解析到 10.0.0.4</span><br></pre></td></tr></table></figure><p><code>xip.io</code> 使用上已经很简单了，如果你想使用自己的域名来实现一个类似 <code>xip.io</code> 同样功能也是很容易的。你只需部署一个 <code>xip.name</code> 的开源软件就可以简单实现了!</p><h2><span id="什么是-xipname">什么是 </span></h2><p><code>xip.name</code> 是受 <code>xip.io</code> 启发，使用 <code>Golang</code> 开发的一个支持通配符的 <code>DNS</code> 服务器。</p><blockquote><p>项目地址：<a href="https://github.com/peterhellberg/xip.name" target="_blank" rel="noopener">https://github.com/peterhellberg/xip.name</a></p></blockquote><p><a href="http://xip.name" target="_blank" rel="noopener">xip.name</a> 也同样提供了一个和 <a href="http://xip.io" target="_blank" rel="noopener">xip.io</a> 类似的公共 DNS 服务，它的使用上和 <code>xip.io</code> 无异。你同样可以直接使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10.0.0.1.xip.name         # 解析到 10.0.0.1</span><br><span class="line">www.10.0.0.2.xip.name     # www 子域解析到 10.0.0.2</span><br><span class="line">mysite.10.0.0.3.xip.name  # mysite 子域解析到 10.0.0.3</span><br><span class="line">foo.bar.10.0.0.4.xip.name # foo.bar 子域解析到 10.0.0.4</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="xipname-部署教程"> 部署教程</span></h2><p><strong>前置条件：</strong></p><ul><li>一台有公网 <code>IP</code> 并开放 <code>53</code> 端口的服务器</li><li>一个有管理权限的域名</li><li>一个提供支持通配 <code>NS</code> 记录的 <code>DNS</code> 解析服务的帐号</li></ul><h3><span id="安装-xipname">安装 </span></h3><p><code>xip.name</code> 使用 <code>Go</code> 语言开发，通常情况下，安装是很容易的，你只需直接下载并放到相应路径即可使用它。</p><p>由于 <code>xip.name</code> 项目没有直接提供二进制包下载，所以这里我们使用 <code>go</code> 命令进行源码下载后，进行编译安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 安装 GO 环境</span><br><span class="line">$ yum install -y golang</span><br><span class="line"># 获取、编译代码</span><br><span class="line">$ go get github.com&#x2F;peterhellberg&#x2F;xip.name</span><br><span class="line"># 将编译好的二进制文件放到系统 PATH 路径下</span><br><span class="line">$ cp go&#x2F;bin&#x2F;xip.name &#x2F;usr&#x2F;local&#x2F;bin&#x2F;xip</span><br></pre></td></tr></table></figure><p>安装完成后，我们给 <code>xip.name</code> 增加一个 <code>Systemd</code> 配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ cat &lt;&lt; EOF &gt; &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;xip.service</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;xip</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;xip -ip 0.0.0.0 -fqdn ywzm.org.</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><blockquote><p>注： ExecStart 配置的启动命令的 -fqdn 是用来定义 DNS 服务器要支持的域名，这里设置的是 <a href="http://ywzm.org" target="_blank" rel="noopener">ywzm.org</a>.。你可以根据实际情况进行调整。</p></blockquote><p>一些常规的 <code>xip</code> 服务管理操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 启动 xip</span><br><span class="line">$ systemctl start xip</span><br><span class="line"># 关闭 xip</span><br><span class="line">$ systemctl stop xip</span><br><span class="line"># 重启 xip</span><br><span class="line">$ systemctl restart xip</span><br><span class="line"># 配置开机自启 xip</span><br><span class="line">$ systemctl enable xip</span><br></pre></td></tr></table></figure><h3><span id="配置-dns">配置 DNS</span></h3><p>要成功实现 <code>xip.name</code> 提供的服务，只部署相关程序是不够的。还需要配置你自定义域名的 <code>NS</code> 解析记录，目前国内支持通配 <code>NS</code> 记录的免费 <code>DNS</code> 服务商不多，这里我使用的是阿里云 <code>DNS</code> 解析。</p><p>配置其实也很简单，主要需要配置一个通配的 <code>NS</code> 记录和一个指向 <code>DNS</code> 服务器的 A 记录。</p><p>以我的域名 <a href="http://ywzm.org" target="_blank" rel="noopener">ywzm.org</a> 为例，假设部署 <a href="http://xip.name" target="_blank" rel="noopener">xip.name</a> 服务器的公网 IP 是 <code>11.22.33.44</code>。DNS 就应该增加以下两条解析记录：</p><ul><li>增加一条通配 NS 记录解析到 <a href="http://ns1.ywzm.org" target="_blank" rel="noopener">ns1.ywzm.org</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*  ns ns1.ywzm.org</span><br></pre></td></tr></table></figure><p><img src="https://img.hi-linux.com/staticfile/image-20210425142336948-2021-04-25-u6uGGL.png" alt></p><ul><li>增加一条 A 记录解析到 11.22.33.44</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ns1.ywzm.org  A  11.22.33.44</span><br></pre></td></tr></table></figure><p><img src="https://img.hi-linux.com/staticfile/image-20210425142441740-2021-04-25-6911Td.png" alt></p><p>以上配置好就完成了，看下最终效果吧！</p><p><img src="https://img.hi-linux.com/staticfile/image-20210425142632078-2021-04-25-jrYChV.png" alt></p><p>最后，我们来验证一下吧：</p><p><img src="https://img.hi-linux.com/staticfile/image-20210425145305223-2021-04-25-bk0Kaq.png" alt></p><p>从上面的结果可以看到，我们并未对域名进行任何配置就自动实现了相应解析，是不是很给力呢？有兴趣的同学赶紧用起来吧！</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-xip-io&quot;&gt;什么是 &lt;a href=&quot;http://xip.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;xip.io&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;xip.io&lt;/code&gt; 是一个提供通配符 &lt;code&gt;DNS&lt;/code&gt; 解析的魔法域名。你可以无需配置，将自定义的任何域名解析到指定的 &lt;code&gt;IP&lt;/code&gt; 地址。假设你的 &lt;code&gt;IP&lt;/code&gt; 地址是 &lt;code&gt;10.0.0.1&lt;/code&gt;，你只需使用 &lt;code&gt;前缀域名+IP地址+xip.io&lt;/code&gt; 即可完成相应自定义域名解析。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;10.0.0.1.xip.io         # 解析到 10.0.0.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;www.10.0.0.2.xip.io     # www 子域解析到 10.0.0.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysite.10.0.0.3.xip.io  # mysite 子域解析到 10.0.0.3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.bar.10.0.0.4.xip.io # foo.bar 子域解析到 10.0.0.4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;xip.io&lt;/code&gt; 使用上已经很简单了，如果你想使用自己的域名来实现一个类似 &lt;code&gt;xip.io&lt;/code&gt; 同样功能也是很容易的。你只需部署一个 &lt;code&gt;xip.name&lt;/code&gt; 的开源软件就可以简单实现了!&lt;/p&gt;
&lt;h2 id=&quot;什么是-xip-name&quot;&gt;什么是 &lt;a href=&quot;http://xip.name&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;xip.name&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;xip.name&lt;/code&gt; 是受 &lt;code&gt;xip.io&lt;/code&gt; 启发，使用 &lt;code&gt;Golang&lt;/code&gt; 开发的一个支持通配符的 &lt;code&gt;DNS&lt;/code&gt; 服务器。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/peterhellberg/xip.name&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/peterhellberg/xip.name&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://xip.name&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;xip.name&lt;/a&gt; 也同样提供了一个和 &lt;a href=&quot;http://xip.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;xip.io&lt;/a&gt; 类似的公共 DNS 服务，它的使用上和 &lt;code&gt;xip.io&lt;/code&gt; 无异。你同样可以直接使用：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;10.0.0.1.xip.name         # 解析到 10.0.0.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;www.10.0.0.2.xip.name     # www 子域解析到 10.0.0.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysite.10.0.0.3.xip.name  # mysite 子域解析到 10.0.0.3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.bar.10.0.0.4.xip.name # foo.bar 子域解析到 10.0.0.4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="DNS" scheme="https://www.hi-linux.com/categories/DNS/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="工具" scheme="https://www.hi-linux.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="DNS" scheme="https://www.hi-linux.com/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>你在拥有「加密货币」前，必须要搞清楚的事</title>
    <link href="https://www.hi-linux.com/posts/6273.html"/>
    <id>https://www.hi-linux.com/posts/6273.html</id>
    <published>2021-05-13T01:00:00.000Z</published>
    <updated>2021-05-13T07:46:27.256Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>相对于通过数字货币的获利、区块链的技术原理，如果你更想了解如何拥有自己的加密货币、不同的<strong>加密货币有何区别</strong>、加密货币的<strong>应用场景</strong>，或是<strong>参与到加密货币</strong>的洪流里来，希望本文能够给到一定帮助。文中个别链接需要在特殊网络环境下访问。需要注意，<strong>本文不具有任何投资建议</strong>。</p><p>和历年来科技上大部分的新技术不同，区块链技术在给大众生活带来显著正面影响之前，就已经带来了显著又负面的大范围影响——显卡涨价。而在本文编辑的这段时间里，热度旺盛的 Chia 币因为其需要通过硬盘参与挖矿，导致了大容量硬盘继显卡后成为了下一个「受害者」。</p><a id="more"></a><p>由此很多人莫名其妙进入了这挖矿狂潮的辐射范围内，一些人开始通过抢购、倒卖显卡、组装矿机挖矿、囤积硬盘等等形式从中获利，甚至有网吧老板关门挖矿。区块链技术和比特币就以这样的方式「火」了起来。</p><p><img src="https://img.hi-linux.com/staticfile/1-2021-05-13-njL8AJ.png" alt="官网标注售价 3899 元起的显卡 RTX 3070 如今在京东随手一搜就是 11000+ 元的售价"></p><h2><span id="那些陌生的名词">那些陌生的名词</span></h2><p>以下挑选下文中出现的几个相对陌生的名词，仅以不影响阅读体验的最低程度展开介绍。想要更精准全面地了解相关名词需要另外查阅。</p><h3><span id="公有链"><strong>公有链</strong></span></h3><blockquote><p>公有链是指全世界任何人都可读取、发送交易且交易能获得有效确认的、也可以参与其中共识过程的区块链。</p></blockquote><p><a href="https://baike.baidu.com/item/%E5%85%AC%E6%9C%89%E9%93%BE/22447233?fr=aladdin" target="_blank" rel="noopener">公有链</a>（公共区块链）一般被称为公链，一般理解为记录信息的公共「账本」或是构建应用的「操作系统」，最为人熟知的账本有比特币、以太坊、EOS 等，不同的公链上的交易手续费（Gas Fee）与并发量（每秒处理的交易量）都可能不同，导致了不同程度的网络拥堵，也会影响到交易中的到账时间。</p><h3><span id="同质化代币ft">同质化代币（FT）</span></h3><p>大多数人了解的 BTC、ETH 等加密货币多数是同质化代币。像💴人民币、💵美元也是广义上的同质化代币，两张不同的一元人民币在价值上是不会有任何区别的（不考虑错版、靓号等特殊情况），同质化代币互相能够替换，具有统一性、可接近无穷拆分的特性。</p><p><img src="https://img.hi-linux.com/staticfile/1-20210513133043141-2021-05-13-3NUd5Z.png" alt></p><h3><span id="非同质化代币nft">非同质化代币（NFT）</span></h3><p>NFT 即非同质化代币（Non-Fungible Token），具有不可分割、不可替代、独一无二等特点。在现实生活中具有实际价值的事物是不可替代的，如一份📜合同、🏠房屋产权、🎨艺术作品、出生证明等，为了能数字化这些资产，就诞生了 NFT 这一概念。</p><p><img src="https://img.hi-linux.com/staticfile/1-20210513133043168-2021-05-13-0Y3U96.png" alt></p><p>NFT 这一概念最早产生于「<a href="https://cryptokitties.co/" target="_blank" rel="noopener">加密猫</a>」——全球首款区块链游戏，这么简单的一张图能卖上千元，离不开这张图在区块链上这一特性，保证了这猫咪在数字世界中的独一无二，即便这张图谁都可以保存数字版或打印出来一万份，也只有掌握「密码」的人能拥有这猫咪的价值或售卖交易。</p><blockquote><p>加密猫是一群讨人喜欢的数字喵咪，每一只猫咪都拥有独一无二的基因组，这决定它的外观和特征。玩家可以收集和繁殖喵咪，创造出全新的喵星人并解锁珍稀属性。</p></blockquote><p><img src="https://img.hi-linux.com/staticfile/1-20210513133043181-2021-05-13-FKF8dG.png" alt="基于不同毛色、稀有度的价格不一的加密猫"></p><p>「加密猫」只是 NFT 中的开始，极具知名度的奢侈品品牌「GUCCI」「DC 漫画」「NBA」「波多野结衣」等等，都有宣布关于 NFT 的计划或已卖起了各自的 NFT 。</p><p><img src="https://cdn.sspai.com/2021/05/07/cbc3221dae42b4a0ec73e4b5fc32959e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt></p><h3><span id="dapp">DApp</span></h3><p>DApp 即去中心化应用（Decentralization Application），实际上还是 app，只是有着去中心化的属性，不部署在中心化的服务器当中。也因为这个特性，影响到普通用户的地方主要在于 DApp 中的交易行为都需要连接到去中心化钱包，一般 PC 在浏览器中打开 DApp，然后连接到钱包插件；；手机端则是在钱包 app 内嵌的浏览器中打开 DApp 然后再连接到当前的钱包。</p><p><img src="https://cdn.sspai.com/2021/05/08/e5ef651a0c8f22046623f1d651016ce4.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt></p><h3><span id="去中心化钱包">去中心化钱包</span></h3><p>去中心化钱包的奇怪名称起源于区块链技术的应用，可以简单理解为可以存放各种加密货币的钱包，是数字货币界中的「支付宝钱包」「微信钱包」。</p><p>PC 端操作可以在 Edge 或 Chrome 浏览器中下载一个去中心化钱包插件，在这里推荐「<a href="https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn" target="_blank" rel="noopener">MetaMask</a>」。</p><p><img src="https://img.hi-linux.com/staticfile/1-20210513133043299-2021-05-13-oyiUOa.png" alt="MetaMask"></p><p>而手机应用中常用的也有 「<a href="https://tokenpocket.pro/" target="_blank" rel="noopener">TokenPocket</a>」「<a href="https://metamask.io/" target="_blank" rel="noopener">MetaMask</a>」「<a href="https://trustwallet.com/" target="_blank" rel="noopener">Trust Wallet</a>」等。</p><p><img src="https://img.hi-linux.com/staticfile/1-20210513133043321-2021-05-13-059jzA.png" alt></p><p>另外一点需要注意的区别在于钱包不再以你身份信息、手机号码、认证邮箱作为被盗后找回密码的依据，取而代之的是「助记词」，需要谨慎保存。</p><p><img src="https://img.hi-linux.com/staticfile/1-20210513133043365-2021-05-13-jvb5fO.png" alt></p><p><img src="https://cdn.sspai.com/2021/04/29/f05fb693e509674858e0c4760d1e32e8.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt></p><p>关于助记词，要是钱包没钱，也大可不必把这助记词的安全当回事🙄。但如果数字惊人，可以抄写到自己墙上，万一有好学的侄子侄女问起来怎么解释？当然是告诉他/她这是中考重点单词建议抄写背诵。</p><h2><span id="从哪里获取加密货币">从哪里获取加密货币</span></h2><h3><span id="参加空投">参加空投</span></h3><p>许多尚未发行或廉价的币为了提高知名度、宣传项目，会提供空投活动，免费发放各式各样的加密货币，除了部分含金量较高的加密货币为了防止不可控的白嫖，会要求钱包里预存一定等值金额的币种才能收到空投。</p><p>而大部分空投活动中要求的是只需动动手指就能完成的任务，像关注推特账号、转发推特、加入 「Discord」「Telegram」 频道、登记钱包地址、每日签到、邀请好友、位于积分排行榜前列等等。比起拼多多的无底线拉新活动，这些项目团队设置的规则要老实得多，自行配置好网络条件以及注册一个去中心化钱包后，可以通过空投导航网站 <a href="https://tokenairdrop.org/" target="_blank" rel="noopener">币空投</a> 体验白嫖空投的快感。</p><p><img src="https://cdn.sspai.com/2021/04/21/720e6044479bf8024797bed089f902df.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt></p><h3><span id="交易所获取">交易所获取</span></h3><p>由于 2017 年 9 月 4 日开始国内禁止交易所运营，内地环境中的手机应用商店也没有任何交易所 app 可供下载，身处港澳台以及国外的读者可以自行了解主流交易所。</p><h3><span id="家用机挖矿">家用机挖矿</span></h3><p>如果你家里恰好有一台性能不错的机器，那么仅需要电费和时间，就能获得不同种类的加密货币，这类软件有很多，以 <a href="http://www.qskg.top/welcome.html" target="_blank" rel="noopener">轻松矿工</a> 为例，支持多个币种，操作傻瓜化，相对适合我们这种尝尝鲜并不打算以此盈利的小白用户。但不是所有币种都能通过硬件挖矿的方式获取，能选择的币种相当有限。</p><h3><span id="朋友转账">朋友转账</span></h3><p>注册好去中心化钱包后，1️⃣选择好一条公链2️⃣复制你的钱包地址3️⃣找到一个有加密货币的朋友（重点🐢）。然后就可以告诉你的朋友让他给你转账啦！</p><p>数字货币钱包之间的转账行为区别于并没有我们常用的如支付宝、银行转账的体验如此之好，除了需要提供钱包地址，还需要确定公链的选择，不同公链上的交易手续费用（Gas Fee，即矿工费）、网络拥堵程度（影响到账时间）都不同。要是两个信息（钱包地址、公链）选错了一个，就只能做好准备接受数字货币消失带来的悲痛了💔。</p><h2><span id="加密货币不止比特币">加密货币不止比特币</span></h2><p>就我身边群体而言，大部分人只知道比特币，而实际上加密货币种类可谓是百花齐放，其中也包括一些相当<strong>有趣</strong>（但不具有投资价值）的币种。</p><p><img src="https://cdn.sspai.com/2021/04/27/8a185f6beb16b5d5bdf8f66ecf76778f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt>加密货币市值分布</p><h3><span id="doge狗狗币">Doge（狗狗币）</span></h3><p><img src="https://cdn.sspai.com/2021/04/27/ad4a2ab01d2a1ea19aadbde7ed39869d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt>Dogecoin</p><p>Doge（狗狗币）可谓是加密货币中的「潮牌」。Adobe 任职的 Jackson Palmer 觉得好玩把Doge Meme 加入到加密货币后便一发不可收拾，狗狗币诞生后便在国外论坛 Reddit 上一直保持着惊人的热度。而后被作为各种社交平台的打赏道具，赞助了各种慈善活动和赛事，特斯拉 CEO 马斯克对其“可能是我最喜欢的数字货币”的评价，陆续被作为各个平台的支付手段，因此用户量和市值也在不停增长，这个相当不正经的数字货币目前已经成为了有着市值前十的货币之一。</p><p><img src="https://img.hi-linux.com/staticfile/1-20210513133043526-2021-05-13-DADPFm.png" alt="马斯克日常推特 cue 狗狗币"></p><h3><span id="mona萌奈币">Mona（萌奈币）</span></h3><p><img src="https://cdn.sspai.com/2021/05/08/8729ad399a2c1e3e223239ebee45d8a2.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt>Monacoin</p><p><a href="https://monacoin.org/" target="_blank" rel="noopener">Mona</a>（萌奈币）是日本本土的首个加密货币，在（也仅仅在）日本拥有庞大的支持社区（<a href="https://monappy.jp/" target="_blank" rel="noopener">Monappy</a>），在社区中的各种交易行为都可以通过 Mona 来支付。包括游戏充值、文章打赏、图片打赏、自由买卖、购买礼品卡赠送等等。</p><p><img src="https://cdn.sspai.com/2021/05/08/b7b4bbb66e486c9d7fb5e14bb861c7c6.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt></p><h3><span id="flow">Flow</span></h3><p><img src="https://img.hi-linux.com/staticfile/1-20210513133043605-2021-05-13-gEQuMt.png" alt></p><p><a href="https://www.onflow.org/" target="_blank" rel="noopener">Flow</a> 是 NFT 的公链代币，由前文提及到的「加密猫」团队打造，而 NBA 也基于 Flow 公链开发了「<a href="https://nbatopshot.com/" target="_blank" rel="noopener">NBA TOP SHOT</a>」  这一火爆的 DApp。购买 NFT 并非必须使用 Flow 付款，所以对于仅仅想要购买 NFT 的人而言可以选择忽略 Flow。</p><blockquote><p>Open Worlds</p><p>Flow is a new blockchain built for the next generation of apps, games, and the digital assets that power them.（Flow 定义为“开放世界的区块链”，旨在成为下一代游戏、应用程序及数字资产的基础。）</p></blockquote><p><img src="https://img.hi-linux.com/staticfile/1-20210513133043646-2021-05-13-dbMc3A.png" alt="Flow 社区中还有 UFC、育碧、三星等知名赛事/企业"></p><h3><span id="shib柴犬币">SHIB（柴犬币）</span></h3><p><img src="https://cdn.sspai.com/2021/05/09/bec63295e1299fed885e07a3306040b2.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt>SHIB</p><blockquote><p>What would happen if a crypto currency project was 100% run by its community?（如果一个加密货币项目 100% 由其社区管理会发生什么？）</p></blockquote><p><a href="https://www.shibatoken.com/" target="_blank" rel="noopener">SHIB（柴犬币）</a>来自于一个去中心化自发社区「Shiba Inu」的实验，团队在白皮书中如此描述去中心化社区：建立在社区参与基础上的项目是我们未来里待征服的荒漠。当我们离僵化的金融结构和传统思维方式越来越远，我们发现了解决问题与相互产生联系的新方式。当成功仅取决于组织创建团队的力量时，我们为了和其他人保持一致而改变了自己的观点。通过研究社区成员后发现力量并非来源与个体而是和谐的团体合作。而其创造的社区的代币「SHIB」也被称为「狗狗币杀手」,同时又是一个被马斯克「带货」而爆红的加密货币。</p><h3><span id="其他山寨币">其他山寨币</span></h3><p>「山寨币」并没有明确的定义和覆盖范围，用来统称一些没有明显创新和实用价值，市价极其不稳定，崩盘风险极高，常被用来投机交易的币种，而被称为山寨币中的莱特币和狗狗币甚至有着前十的市值。但有许多山寨币仅凭借着吸引眼球的名字便吸引了不少的持币者。</p><p><img src="https://cdn.sspai.com/2021/05/09/689eca4fc75ecae8e67de0a6b7c82e97.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt>LOWB</p><p>「<a href="https://losercoin.org/" target="_blank" rel="noopener">LOWB</a>」又称为 Loser Coin，这一符合当代青年自嘲特性的名字完全不输狗狗币。而其创立背景也名副其实：</p><blockquote><p>中国一个四线城市的贫困青年，邀请另一位贫困程序员，一同发起了Loser Coin项目，代币 LOWB。两人于 17 年接触 BTC，进入币圈，陆续炒币亏了许多钱，本次抱着归零的心态，成立此项目，在项目上线当天拿出全部积蓄添加流动性池子。本项目承诺不护盘（主要没实力），不跑路（无私募公募）。</p></blockquote><p>官网中的介绍有着相当贴地气的颓废和鸡血，👻看起来压根不打算找得到投资的样子。</p><p><img src="https://img.hi-linux.com/staticfile/1-20210513133043738-2021-05-13-D6rHua.png" alt></p><h2><span id="多多少少有点用处">多多少少有点用处</span></h2><p>世界上第一个加密货币比特币的白皮书上第一段话如此写道：</p><blockquote><p>本文提出了一种完全通过点对点技术实现的电子现金系统，它使得在线支付能够直接由一方发起并支付给另外一方，中间不需要通过任何的金融机构。</p></blockquote><p>可以知道的是创造者中本聪的初衷与目前大家感知到的炒币、挖矿、炒显卡、屯硬盘大相径庭，也是因为这些加密货币直接给人们带来的负面影响，很多人对加密货币嗤之以鼻，诸如「污染环境」「浪费资源」「影响显卡价格」「傻子才买」「割韭菜」等评价，但除了这些缺点，目前加密货币也已经有许多较为实用的应用场景。</p><h3><span id="藏品">藏品</span></h3><p><a href="https://opensea.io/" target="_blank" rel="noopener">OpenSea</a> 是全球第一个也是目前最大规模的 NFT 市场，可以购买「艺术品」「域名」「虚拟世界（Virtual Worlds）」「交易卡（Trading Cards）」「收藏品（Collectibles）」等各种分类的 NFT。</p><blockquote><p>Discover, collect, and sell extraordinary NFTs</p><p>on the world’s first &amp; largest NFT marketplace</p></blockquote><p><img src="https://cdn.sspai.com/2021/05/08/8674ee3052051d85f8c450b641b72480.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="马斯克再次客串"></p><p>近期在 OpenSea 上拍卖最引人注目的 NFT 之一，是街头艺术家 Banksy 的画作《Morons》（《白痴》），有趣的是这张画作本身是实体艺术品，被区块链公司 Injective Protocol 买下来后便在网络直播中销毁了实体，利用区块链技术做数位化处理后作为 NFT 拍卖，价格也从买入价 9.5 万美元翻了四倍以 38 万美元成交。更有趣的是 Banksy 这张画意在讽刺 1987 年梵高作品《Sunflowers》拍卖会现场，作品上写下「I can’t believe you morons actually buy this shit.」</p><p><img src="https://cdn.sspai.com/2021/05/08/a6b168df40d166716b7cc7a30a7de846.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="《Morons》"></p><p>而另一张著名的纯 NFT 画作《EVERYDAYS: THE FIRST 5000 DAYS》，诞生于数码艺术家 Beeple（Mike Winkleman）之手，是历史上第一次在大型拍卖行以 NFT 形式进行拍卖的纯数码拍品，最终在佳士得拍卖行以 6900 万美元成交。</p><p><img src="https://img.hi-linux.com/staticfile/1-20210513133043898-2021-05-13-JV5B1t.jpeg" alt="《EVERYDAYS: THE FIRST 5000 DAYS》"></p><p>如果对艺术品没有兴趣，NBA 爱好者还能通过「<a href="https://www.nbatopshot.com/" target="_blank" rel="noopener">NBA TOP SHOT</a>」中购买各种 NFT 卡包，解锁不同稀有度的球星卡片，不同球星的拉杆、隔扣、绝杀、退役录像/图片，作为你偶像名场面在区块链上的拥有者，这独特的 NFT 相信比保存在相册里的视频更加珍贵（价钱也确实很珍贵）。</p><p><img src="https://img.hi-linux.com/staticfile/1-20210513133043936-2021-05-13-7qHfuN.png" alt></p><p>颇有知名度日本女演员波多野结衣、上原亚衣等，也推出了自己的 NFT 形式的写真集，相比纸质版的写真集，也多出了游戏上常用的盲盒玩法以及稀有度机制，区分了普通、高级、稀有、珍奇、史诗、传说多个档次，除了二次市场的价格以外，实际上不同稀有度的写真也确实有所不同（就是你想象的那样）。</p><p><img src="https://cdn.sspai.com/2021/05/08/1994dffdb2dafa4ba4aab9d7a1829974.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt></p><h3><span id="游戏">游戏</span></h3><p>依赖区块链技术上的三个特性：公开性、安全性和唯一性，区块链游戏也找到了一席之地，去中心化的游戏保证了以前从来没有的公平，因为数据上链，游戏里的资产都只属于玩家，由玩家进行自由交易，游戏厂商不能做出诸如收回、销毁等操作的干预，而老网游玩家必定经历过的数据泄露或资产被盗成为了不再需要担心的问题等等优势。</p><p><img src="https://cdn.sspai.com/2021/05/08/5ff1462e82e82857e68f13900f0567e2.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="基本区块链游戏都会在首页中宣传基于区块链所获得的游戏特性；来源：「加密三国」"></p><p>除了以上提到的改变，即便区块链游戏的前期玩家通常都能有机会通过质押挖矿等形式获得游戏的分红，游戏本身的乐趣并没有因为区块链的技术带来显著的体验加强，目前游戏的玩法也是早已普遍的卡牌、养成、创造类游戏，还有许多可玩性一眼望穿且极具 4399 既视感的游戏，作为一名游戏玩家，区块链游戏的特点中我只对「资产自由交易」这一点比较感兴趣，在「地下城与勇士」「梦幻西游」等游戏中混迹大小街头摆摊，刷出深渊史诗转手拍卖的体验在如今的游戏中已几乎绝迹。</p><p>「<a href="https://www.sandbox.game/en/" target="_blank" rel="noopener">The Sandbox</a>」是区块链游戏中关注度较高的代表之一，游戏类型为沙盒游戏，允许玩家买卖土地、个人创作的模型资产。虽然目前还在预注册阶段，但精美的 UI、已公布的丰富的游戏元素也能让玩家们以小见大了。</p><p><img src="https://img.hi-linux.com/staticfile/1-20210513133044086-2021-05-13-dpKZ20.png" alt></p><p><img src="https://img.hi-linux.com/staticfile/1-20210513133044148-2021-05-13-mRL7Vq.png" alt></p><h3><span id="购物">购物</span></h3><p>除了像 OpenSea 的各个 NFT 交易平台提供了使用加密货币进行支付以外，目前也有越来越多的品牌、电商平台提供了使用加密货币付款的支付方式。而像苹果礼品卡兑换、亚马逊购物、微软积分兑换、网络域名购买、订阅 Twitch 流媒体付费服务、连锁餐饮店支付、航空公司服务支付等等，加密货币的用途也在不断地扩大范围，覆盖人们的购物行为。</p><h2><span id="结语">结语</span></h2><p>体验了各种加密货币的应用后，能感受到这些应用场景中的各种不完善。</p><ul><li>区块链游戏中总是强调着并不能带来乐趣的去中心化特性，和堆砌在显眼的位置上的一堆陌生术语，让只想玩游戏的我兴致全无。</li><li>各种去中心化钱包的交互体验堪比 2010 年的各大银行 app 般难用。</li><li>各个平台使用加密货币作为支付手段的流程相当复杂，主流币种每次交易需扣除的手续费（Gas Fee）也并不低廉，让这种概念先进的支付手段成了麻烦又昂贵的选择。</li></ul><p>总得来说这种种糟糕的体验就像是一台 Microsoft HoloLens ，除了让我这普通互联网用户感觉到「牛」之外，并没有带来实用价值。</p><p>这种情况也是部分互联网用户对于加密货币的应用还比较陌生的原因，但不能否认加密货币在全球范围内正蓬勃发展，即便带来了许多让人懊恼的负面影响，也或多或少正面影响甚至改变了如购物、社区、艺术品、音乐、游戏等多个领域的发展方向。</p><p>感谢你看到这里，本文仅从自身兴趣角度片面地泛泛而谈，如有错误欢迎指出。</p><blockquote><p>本文转载自：「 少数派 」，原文：<a href="https://sspai.com/post/65694" target="_blank" rel="noopener">https://sspai.com/post/65694</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相对于通过数字货币的获利、区块链的技术原理，如果你更想了解如何拥有自己的加密货币、不同的&lt;strong&gt;加密货币有何区别&lt;/strong&gt;、加密货币的&lt;strong&gt;应用场景&lt;/strong&gt;，或是&lt;strong&gt;参与到加密货币&lt;/strong&gt;的洪流里来，希望本文能够给到一定帮助。文中个别链接需要在特殊网络环境下访问。需要注意，&lt;strong&gt;本文不具有任何投资建议&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;和历年来科技上大部分的新技术不同，区块链技术在给大众生活带来显著正面影响之前，就已经带来了显著又负面的大范围影响——显卡涨价。而在本文编辑的这段时间里，热度旺盛的 Chia 币因为其需要通过硬盘参与挖矿，导致了大容量硬盘继显卡后成为了下一个「受害者」。&lt;/p&gt;
    
    </summary>
    
    
      <category term="区块链" scheme="https://www.hi-linux.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="区块链" scheme="https://www.hi-linux.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>Docker 兴衰记 | 十年弹指一挥间，看容器霸业谁主沉浮！</title>
    <link href="https://www.hi-linux.com/posts/176.html"/>
    <id>https://www.hi-linux.com/posts/176.html</id>
    <published>2021-05-08T01:00:00.000Z</published>
    <updated>2021-05-08T01:34:39.445Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><blockquote><p>Docker support in the kubelet is now deprecated and will be removed in a future release. The kubelet uses a module called “dockershim” which implements CRI support for Docker and it has seen maintenance issues in the Kubernetes community. We encourage you to evaluate moving to a container runtime that is a full-fledged implementation of CRI (v1alpha1 or v1 compliant) as they become available. (#94624, @dims) [SIG Node]</p></blockquote><p>上述引言来自 Kubernetes 1.120 的 Release Note，标志着 Docker 的丧钟进入尾声。事实上，当 2018 年 Docker 创始人 CTO Solomon Hykes 宣布离职时，Docker 和公司的命运已是江河日下。在复杂商业利益的驱使和一意孤行的错误决策下，从 2016 年至今诞生了 CRI、OCI 等标准和 Containerd、Runc、Docker-shim、CRI-O 等眼花缭乱却、功能盘龙交错重叠的项目，Kubelet 和容器运行时的调用链路复杂冗长且多次变化，整个生态为此苦不堪言。</p><p>回想 1981 年 IBM 推出 PC 时，采用了非常开放的标准，凝聚了硬件和软件的生态，迅速占据市场第一把交椅。开放也导致了广大廉价而有竞争力的兼容机出现，渐渐蚕食 IBM 的市场份额。于是 1987 年 IBM 从开放走向封闭，推出一款不再兼容外部硬件的机器 IBM PS/2，彻底走上了一条不归路，失去市场的同时失去了 PC 产业话语权。让我们再次回顾 Docker 从一鸣惊人再到由盛而衰的历史，并思考开源商业、技术和文化和内在逻辑和一些教训。</p><a id="more"></a><h2><span id="小船出海">小船出海</span></h2><p>PaaS 历来是兵家必争之地，通过类似 Container 技术将应用封装并交由编排系统管理，将给 DevOps 带来巨大的效率和成本优化。2002 年诞生的 linux namespace 和 2006 年诞生的 cgroup 为此奠定基本技术基础，此后 Google 和百度依次建设了 Borg 和 Matrix 平台，并取得巨大的成功；与此同时开源界也诞生了 Cloud Foundry 等项目。但在外人看来，Borg 和 Matrix 只闻其名，未见其实；而 Cloud Foundry 一直不愠不火，未得到广泛的普及。</p><p>究其根本原因乃是对应用(交付)的标准抽象的不过友好。以 Cloud Foundry 为例，它针对每种语言指定了一系列的标准，比如目录、可执行文件、二进制等等。这用在内部场景用无可厚非，绝大部分上规模的公司都会为应用设定一系列的规则，比如编码、配置、打包、运行环境和依赖，并形成各自的特色的标准；但是放眼整个生态，这种要求过于苛刻而缺乏普及性。Docker 真正革命之处在于开创了基于镜像交付应用的先河，它把应用的代码、配置和所有用户态层次依赖的整合成一个镜像，保证了运行环境的高度闭环和统一，对宿主机的依赖仅限于内核，而内核的 posix 接口非常稳定和兼容，所以保证了 Docker 镜像具有一次制作，四处运行的强大兼容强大威力。</p><p>2013 年，成立三年的 dotCloud(Docker 公司前身) 在 PaaS 平台产品商业化走到穷途末路时选择了开源核心引擎 Docker，换来的是柳暗花明又一村。这种轻量级虚拟化、语音无关、可移植性强的技术给出完美的应用交付标准，直击用户痛点，立马一石激起千层浪。这一年，Docker 迅速成长为云计算领域最受欢迎的项目，诸多巨头逐步增加了对 Docker 的支持，很多应用软件的交付也提供了 Docker 镜像；这一年，dotCloud 更名为 Docker，注册了 Docker 商标，出售了 PaaS 平台产品，全力转向 Docker 技术研发和生态建设。</p><p>此后的两年里，Docker 的发展可谓顺风顺水，生态版图持续扩大，从 linux 到 windows，从云计算到广义的应用市场，已俨然成为容器的标准。即使 Google 和 CoreOS 强势推出竞品 lmctfy 和 rkt，面对已成气候的 Docker 毫无招架之力。伴随生态的成功，Docker 前后拿下 4000万刀和 9500万刀的两轮重要融资补充粮草。当 2016 年夏天 DockerCon 举办时，Docker Hub 镜像总下载数量高达 40 多亿次，甚至一度传出微软欲以 40 亿美金收购这家只有数百人的公司！</p><h2><span id="群雄逐鹿">群雄逐鹿</span></h2><p>技术的持续发展离不开商业化的支持，Docker 作为一家创业公司从出身就背负着商业化的根本任务。尽管取得生态和技术上的巨大成功，带来了普世的巨大价值，却面临着商业化的巨大挑战。和其它通用而基础的开源技术一样，比如操作系统 linux、编译工具 GCC、虚拟化技术 Qemu-KVM，开源决定了 Liscense 之路不通，而单一的技术无法带来服务的溢价。打造 PaaS 平台层次的产品便成最具备可行性之路，和 2013 年卖掉 PaaS 平台相反，2014 年 Docker 收购 Fig 项目，以此推出编排产品 Docker Swarm，拉开了编排领域群雄逐鹿的帷幕。</p><p>开源的长河充满了合作和竞争，推动着生态不断发展和演进。这一年，Mesos 背后的公司 Mesospheres 推出 Marathon 项目；Google 基于 Borg 推出开源版本的编排项目 Kubernetes。和 Google、Redhat 等深谙道理的老玩家相比，年少气盛的 Docker 公司显得不易相处，2014 年 Docker 项目最早积极贡献者 CoreOS 不久后分道扬镳，和 Google、Redhat 创建了 OCI 规范，定义了容器运行时标准，妥协之下 Docker 公司从 libcontainer 捐献出 RunC 项目作为符合 OCI 标准的容器运行时。2015 年 Google、Redhat 等共同发起了 CNFC 基金会，并迅速增加了 Prometheus、Etcd、Helm、CNI 等众多知名项目，生态发展的风向标逐步由 Docker 转向 Kubernetes，开始建造了坚固的护城河。</p><p>当时间来到 2016 年时，一切尘埃落定，远去了鼓角争鸣，Kubernetes 已成了容器编排领域的绝对标准。和暴发户 Docker 如日中天变得专横独断相比，K8S 民主化的风格和 Plugin 的架构迅速的吸引了周边的生态伙伴；其次 K8S 源自于 Google 基础设施领域多年的宝贵实践和升华，其设计的理念和抽象形态更贴近本质的需求。</p><p>即使 K8S 赢得编排的标准，由于 Docker 已成容器的标准，所以早期的 Kubelet 内嵌 Docker 客户端，默认其为容器的运行时，因而从 Kubelet 到容器运行时的代码整体比较路径简短优雅 —— 容器的归容器、编排的归编排。但之后 Docker 公司祭出以自杀八百、损敌一千的姿态做出损人不利己的骚招。在面对 Swarm 的失败后，由于 Docker 名声和美誉广为人知，于是公司将 PaaS 平台的能力沉淀到名为 Docker 产品(甚至集成了 K8S)，并将 Docker 项目改名为 moby，压上名气这张最后的筹码孤注一掷。</p><p>群雄逐鹿过程中，Docker 和 K8S 之间的纠葛埋下广大同行深受其苦的坑，从 Kubelet 到运行时主要经历了如下调用链路的变更，诞生了一堆临时和更多凑热闹的项目，给广大的开发者带来沉重的心智负担，留下一地鸡毛。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+-----------------------+    +---------+    +-----------+</span><br><span class="line">| Kubelet(Dockerclient) | -&gt; | Dockerd | -&gt; | Container |</span><br><span class="line">+-----------------------+    +---------+    +-----------+</span><br><span class="line"></span><br><span class="line">+--------------+    +-------------+    +---------+    +------------+    +------+    +------------+</span><br><span class="line">| Kubelet(CRI) | -&gt; | Docker-shim | -&gt; | Dockerd | -&gt; | Containerd | -&gt; | Runc | -&gt; | Containers |</span><br><span class="line">+--------------+    +-------------+    +---------+.   +------------+    +------+    +------------+</span><br><span class="line"></span><br><span class="line">+--------------+    +----------------+    +------------+    +------+    +-----------+</span><br><span class="line">| Kubelet(CRI) | -&gt; | CRI-Containerd | -&gt; | Containerd | -&gt; | RunC | -&gt; | Container | </span><br><span class="line">+--------------+    +----------------+    +------------+    +------+    +-----------+</span><br><span class="line"></span><br><span class="line">+--------------+    +------------+    +------+    +-----------+</span><br><span class="line">| Kubelet(CRI) | -&gt; | Containerd | -&gt; | RunC | -&gt; | Container | </span><br><span class="line">+--------------+    +------------+    +------+    +-----------+</span><br></pre></td></tr></table></figure><h2><span id="最佳选择">最佳选择</span></h2><p>有些历史被成为绝唱，那是因为没如果和重来。但是似曾相识的故事总是在不断的轮回，上世纪八十年代，蓝色巨人坐拥拥无人可撼动的市场霸主地位，当它试图以一己之力关闭兼容机的大门时，换来了作茧自缚。巅峰时期的 Docker 在生态上虽然取得了巨大的成功，但它的地位和当年的 IBM 丝毫不能相提并论，当然，这也是马后炮式的分析。</p><p>让我们站在 Docker 的曾经的巅峰上，俯瞰整个应用的交付标准唯我独尊，Docker hub 囊括了海量应用镜像，和下一个 “vmware” 相比，微软抛出区区 40 亿美金收购的橄榄枝又是多么的微不足道，我想换成任何人都愿意跃跃欲试，放手一搏向 PaaS 平台进军。当错失闪烁瞬间的机会后，便是土崩瓦解般的故事，2018 年创始人兼 CTO 离职，2019 年裁员，2020 年 Dockerhub 离奇的推出限速下载。</p><p>从商业的视角来看，基础而通用的开源技术项目本身价值和需求重大，但是成功的商业故事却寥寥无几。开源注定卖 License 之路不通，单一的基础技术很难带来服务的溢价，技术培训、二次开发的收益则是杯水车薪，而捐助等对于一家数百人的公司更天方夜谭，所以特别对于基础通用的技术来说，开源几乎不可能成为商业模式。但是从另外一个角度来说，开源更是一种市场策略，它可以快速试错，推广产品和思路，获得用户粘性，构建生态的护城河。如果顺着这个思路，从短期盈利的价值来看，Docker 公司卖给微软和 AWS 是中策，背靠着金主爸爸和强大的云计算服务；从长远的生态和普世价值角度来看，我认为 Redhat 收购 Docker 应该是最佳的选择，以 Redhat 的智慧，或将带来全方位的共赢和持久的繁荣。可以说，对于绝大部分做基础通用的开源技术产品的创业公司来说，被巨头收购已是最好的结局。</p><p>正如《大教堂和集市》所言：“开放式的文化会最终胜利，这或许不是因为”开放”在道德上正确，或者”封闭”在道德上错误，而只是因为开放式合作可以在一个问题上投入多几个数量级的技术工时，封闭的世界无法赢得这样的竞争。”当 Docker 开源时，它以新颖的理念解决应用交付的巨大痛点，描绘了 PaaS 的新蓝图，吸引了广泛的合作者。但是 Docker 的管理者既没有充分的识别和吸收他人优秀的想法，更没有良好的人际关系、交流技能和人格魅力。先后和 CoreOS、Redhat、Google 等开源巨头分道扬镳，最后又为一己之利和生态背离。开源生态的发展如一股大洪流滚滚向前，只能顺势和引领，不可阻挡，妄图借垄断之势损坏普遍大众的利益的行为只会被这股洪流冲垮和抛弃。</p><p>回首这八年，Docker 已到棺盖定论之时，它掀起了一场轰轰烈烈的 PaaS 革命，给 DevOps、云原生等带来了巨大的理念突破和奠定技术基础；而管理者的战略和战术的种种失误措施良机，接连败北，丢失了商业市场，失去了生态和名声，拉下一地鸡毛。数年以后，容器一词依旧盛行，而 Docker 或将无人提及，唯有一声叹息。</p><blockquote><p>本文转载自：「 Koala Bear 」，原文：<a href="http://t.cn/A6tYaES0" target="_blank" rel="noopener">http://t.cn/A6tYaES0</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Docker support in the kubelet is now deprecated and will be removed in a future release. The kubelet uses a module called “dockershim” which implements CRI support for Docker and it has seen maintenance issues in the Kubernetes community. We encourage you to evaluate moving to a container runtime that is a full-fledged implementation of CRI (v1alpha1 or v1 compliant) as they become available. (#94624, @dims) [SIG Node]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上述引言来自 Kubernetes 1.120 的 Release Note，标志着 Docker 的丧钟进入尾声。事实上，当 2018 年 Docker 创始人 CTO Solomon Hykes 宣布离职时，Docker 和公司的命运已是江河日下。在复杂商业利益的驱使和一意孤行的错误决策下，从 2016 年至今诞生了 CRI、OCI 等标准和 Containerd、Runc、Docker-shim、CRI-O 等眼花缭乱却、功能盘龙交错重叠的项目，Kubelet 和容器运行时的调用链路复杂冗长且多次变化，整个生态为此苦不堪言。&lt;/p&gt;
&lt;p&gt;回想 1981 年 IBM 推出 PC 时，采用了非常开放的标准，凝聚了硬件和软件的生态，迅速占据市场第一把交椅。开放也导致了广大廉价而有竞争力的兼容机出现，渐渐蚕食 IBM 的市场份额。于是 1987 年 IBM 从开放走向封闭，推出一款不再兼容外部硬件的机器 IBM PS/2，彻底走上了一条不归路，失去市场的同时失去了 PC 产业话语权。让我们再次回顾 Docker 从一鸣惊人再到由盛而衰的历史，并思考开源商业、技术和文化和内在逻辑和一些教训。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.hi-linux.com/categories/docker/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 Tmuxp 来优雅的管理多个 Tmux 会话</title>
    <link href="https://www.hi-linux.com/posts/253.html"/>
    <id>https://www.hi-linux.com/posts/253.html</id>
    <published>2021-05-06T01:00:00.000Z</published>
    <updated>2021-05-06T04:35:34.700Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><blockquote><p><strong>使用 <a href="https://github.com/tmux-python/tmuxp" target="_blank" rel="noopener">tmuxp</a> 可以很好的帮助我们来管理 tmux 的会话(session)，解决了平时在使用 tmux 工具时候的痛点。</strong></p></blockquote><h2><span id="1-工具介绍">1. 工具介绍</span></h2><blockquote><p><strong>安装和使用都非常简单</strong></p></blockquote><p>事实上，<code>tmuxp</code> 也是一个构建于 <code>tmux</code> 之上的对象关系映射的 <code>ORM</code> 的 <code>API</code> 工具，就是利用 <code>tmux</code> 工具定义的窗格(pane)、窗口(windows)和会话(session)，以创建关联视图的 <code>Server</code>, <code>Session</code>, <code>Window</code>, <code>Pane</code> 对象。我们在使用的时候，可以使用 <code>YAML</code>, <code>JSON</code> 以及 <code>dict</code> 字配置项来启动我们配置好的窗口和面板。使用时候需要注意的是，只支持 <code>tmux&gt;=1.8</code> 的版本。</p><ul><li>简洁的语法<ul><li>都支持在单独的命令中使用简短标记</li></ul></li><li>加载会话<ul><li>都是根据配置文件中加载 <code>tmux</code> 会话(<code>session</code>)</li></ul></li><li>多种格式支持<ul><li>可以使用 <code>YAML</code>, <code>JSON</code> 以及 <code>dict</code> 字配置项</li></ul></li></ul><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只有这一种安装方式</span></span><br><span class="line">$ pip install tmuxp</span><br><span class="line">$ pip install --user tmuxp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置zsh补全(.zshrc)</span></span><br><span class="line">$ <span class="built_in">eval</span> <span class="string">"<span class="variable">$(_TMUXP_COMPLETE=source_zsh tmuxp)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置bash补全(.bashrc)</span></span><br><span class="line">$ <span class="built_in">eval</span> <span class="string">"<span class="variable">$(_TMUXP_COMPLETE=source tmuxp)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果运行命令提示报错则执行如下命令即可</span></span><br><span class="line">$ tmux <span class="built_in">kill</span>-server</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简洁的语法配置</span></span><br><span class="line"><span class="attr">session_name:</span> <span class="string">shorthands</span></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">long</span> <span class="string">form</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">echo</span> <span class="string">'did you know'</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">echo</span> <span class="string">'you can inline'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span> <span class="string">echo</span> <span class="string">'single commands'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">'for panes'</span></span><br></pre></td></tr></table></figure><p><img src="https://img.hi-linux.com/staticfile/learn-tmuxp-tools-1-2021-01-27-aJHxhm.gif" alt></p><h2><span id="2-使用方式">2. 使用方式</span></h2><blockquote><p><strong>只需要记住 load 这个一个命令其实就够了</strong></p></blockquote><p><strong><code>tmuxp</code></strong> 工具将配置文件保存在 <code>~/.tmuxp</code> 中或在项目目录下作为 <code>~/.tmuxp.{yaml，json}</code> 独立出现。当然我们也可以使用其提供的命令，进行会话的相关操作和使用。下来就让我们一起去看看，如何使用吧！</p><ul><li>[1] 加载会话(Load session)<ul><li>Load a tmux workspace from each CONFIG.</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用方式</span></span><br><span class="line"><span class="comment"># session_name: 会话(Session)名称</span></span><br><span class="line"><span class="comment"># -h: tmux服务器的地址</span></span><br><span class="line"><span class="comment"># -L: tmux服务器的socket名，与tmux相同</span></span><br><span class="line"><span class="comment"># -S: tmux服务器的socket路径，与tmux相同</span></span><br><span class="line"><span class="comment"># -2: 强迫tmux的终端支持256色</span></span><br><span class="line"><span class="comment"># -8: 与-2类似，但是只支持88色</span></span><br><span class="line"><span class="comment"># --list=False: 列出可用的配置文件</span></span><br><span class="line">$ tmuxp load [-h] [-L socket-name] [-S socket-path] [-2 | -8] [--list] [config]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过配置文件路径加载</span></span><br><span class="line">$ tmuxp load .</span><br><span class="line">$ tmuxp load ./mysession.yaml</span><br><span class="line">$ tmuxp load ~/workspaces/myproject.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过自定义会话名称加载</span></span><br><span class="line">$ tmuxp load mysession</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一次加载多个会话</span></span><br><span class="line">$ tmuxp load mysession ./another/project/</span><br></pre></td></tr></table></figure><ul><li>[2] 冻结会话(Freeze sessions)<ul><li>Snapshot a session into a config.</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用方式</span></span><br><span class="line"><span class="comment"># session_name: 会话(Session)名称</span></span><br><span class="line"><span class="comment"># -h: tmux服务器的地址</span></span><br><span class="line"><span class="comment"># -L: tmux服务器的socket名，与tmux相同</span></span><br><span class="line"><span class="comment"># -S: tmux服务器的socket路径，与tmux相同</span></span><br><span class="line">$ tmuxp freeze [-h] [-L socket-name] [-S socket-path] session_name [session_name ...]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为tmux布局、窗格路径和窗口/会话名称创建快照</span></span><br><span class="line">$ tmuxp freeze session-name</span><br></pre></td></tr></table></figure><ul><li>[3] 配置转换<ul><li>Convert a tmuxp config between JSON and YAML.</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用方式</span></span><br><span class="line"><span class="comment"># config: 配置文件的绝对/相对路径</span></span><br><span class="line">tmuxp convert [-h] config</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以互相转换JSON/YAML格式</span></span><br><span class="line">$ tmuxp convert &lt;filename&gt;</span><br></pre></td></tr></table></figure><ul><li>[4] 配置导入<ul><li>Import a teamocil/tmuxinator config.</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用方式</span></span><br><span class="line"><span class="comment"># config: 在 ~/.teamocil 和当前目录下查找yaml文件</span></span><br><span class="line"><span class="comment"># --list=False: 列出 ~/.teamocil 和当前工作目录下的配置文件</span></span><br><span class="line">$ tmuxp import teamocil [-h] (--list | config)</span><br><span class="line">$ tmuxp import tmuxinator [-h] (--list | config)</span><br></pre></td></tr></table></figure><h2><span id="3-面板窗口配置">3. 面板窗口配置</span></h2><blockquote><p><strong>主要介绍 tmux 面板的切分、启动目录、索引设定等操作</strong></p></blockquote><ul><li>[1] 两个窗格(2 split panes)<ul><li>分割出两个窗格</li></ul></li></ul><p><img src="https://img.hi-linux.com/staticfile/learn-tmuxp-tools-2-2021-01-27-c3IkeK.gif" alt></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session_name:</span> <span class="number">2</span><span class="string">-pane-vertical</span></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">my</span> <span class="string">test</span> <span class="string">window</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">hello</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">hello</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session_name:</span> <span class="number">2</span><span class="string">-pane-vertical-long</span></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">cd</span> <span class="string">~</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">pwd</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">top</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">cd</span> <span class="string">/var/www</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">pwd</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">second</span> <span class="string">window</span></span><br><span class="line">    <span class="attr">shell_command_before:</span> <span class="string">cd</span> <span class="string">/var/www</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span> <span class="string">pwd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">pwd</span></span><br></pre></td></tr></table></figure><ul><li><strong>[2] 三个窗格(3 panes)</strong></li></ul><p><img src="https://img.hi-linux.com/staticfile/RA1Cc4-2021-01-27-a7MTrq.jpg" alt></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session_name:</span> <span class="number">3</span><span class="string">-panes</span></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">dev</span> <span class="string">window</span></span><br><span class="line">    <span class="attr">layout:</span> <span class="string">main-vertical</span></span><br><span class="line">    <span class="attr">shell_command_before:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cd</span> <span class="string">~/</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">cd</span> <span class="string">/var/log</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">ls</span> <span class="string">-al</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">\.log</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">hello</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">hellotmu</span></span><br></pre></td></tr></table></figure><ul><li><strong>[3] 四个窗格(4 panes)</strong></li></ul><p><img src="https://img.hi-linux.com/staticfile/learn-tmuxp-tools-4-2021-01-27-NB729J.gif" alt></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session_name:</span> <span class="number">4</span><span class="string">-pane-split</span></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">dev</span> <span class="string">window</span></span><br><span class="line">    <span class="attr">layout:</span> <span class="string">tiled</span></span><br><span class="line">    <span class="attr">shell_command_before:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cd</span> <span class="string">~/</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">cd</span> <span class="string">/var/log</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">ls</span> <span class="string">-al</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">\.log</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">hello</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">hello</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">hello</span></span><br></pre></td></tr></table></figure><ul><li>[4] 空白窗格(Blank panes)<ul><li>直接可以使用 ‘null, ‘blank’, ‘pane’ 中任何一个，即可创建空白窗格</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session_name:</span> <span class="string">Blank</span> <span class="string">pane</span> <span class="string">test</span></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line">  <span class="comment"># 如果之前没有shell命令将打开一个空白窗格</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">Blank</span> <span class="string">pane</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pane</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">blank</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">More</span> <span class="string">blank</span> <span class="string">panes</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="literal">null</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span></span><br><span class="line">  <span class="comment"># 空字符串将被视为回车</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">Empty</span> <span class="string">string</span> <span class="string">(return)</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span> <span class="string">""</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">  <span class="comment"># 窗格可以有其他选项但仍然是空的</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">Blank</span> <span class="string">with</span> <span class="string">options</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">focus:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">start_directory:</span> <span class="string">/tmp</span></span><br></pre></td></tr></table></figure><ul><li>[5] 启动目录(Start Directory)<ul><li>设置起始目录</li><li>等价于<code>tmux new-window -c &lt;start-directory&gt;</code>命令</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session_name:</span> <span class="string">start</span> <span class="string">directory</span></span><br><span class="line"><span class="attr">start_directory:</span> <span class="string">/var/</span></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">should</span> <span class="string">be</span> <span class="string">/var/</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"\033c</span></span><br><span class="line"><span class="string">          - it trickles down from session-level"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">hello</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">should</span> <span class="string">be</span> <span class="string">/var/log</span></span><br><span class="line">    <span class="attr">start_directory:</span> <span class="string">log</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">echo</span> <span class="string">'\033c</span></span><br><span class="line"><span class="string">          - window start_directory concatenates to session start_directory</span></span><br><span class="line"><span class="string">          - if it is not absolute'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">hello</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">should</span> <span class="string">be</span> <span class="string">~</span></span><br><span class="line">    <span class="attr">start_directory:</span> <span class="string">"~"</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">'echo \\033c ~ has precedence. note: remember to quote ~ in YAML'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">hello</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">should</span> <span class="string">be</span> <span class="string">/bin</span></span><br><span class="line">    <span class="attr">start_directory:</span> <span class="string">/bin</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">'\033c absolute paths also have precedence.'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">hello</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">should</span> <span class="string">be</span> <span class="string">config's</span> <span class="string">dir</span></span><br><span class="line">    <span class="attr">start_directory:</span> <span class="string">./</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">echo</span> <span class="string">'\033c</span></span><br><span class="line"><span class="string">          - ./ is relative to config file location</span></span><br><span class="line"><span class="string">          - ../ will be parent of config file</span></span><br><span class="line"><span class="string">          - ./test will be \"test\" dir inside dir of config file'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">echo</span> <span class="string">'\033c</span></span><br><span class="line"><span class="string">          - This way you can load up workspaces from projects and maintain</span></span><br><span class="line"><span class="string">          - relative paths.'</span></span><br></pre></td></tr></table></figure><ul><li>[6] 窗口索引<ul><li>定义窗口索引，就是我们在使用时候用来切换窗口时使用</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session_name:</span> <span class="string">Window</span> <span class="string">index</span> <span class="string">example</span></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">zero</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"this window's index will be zero"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">five</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"this window's index will be five"</span></span><br><span class="line">    <span class="attr">window_index:</span> <span class="number">5</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">one</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"this window's index will be one"</span></span><br></pre></td></tr></table></figure><h2><span id="4-面板窗口设置">4. 面板窗口设置</span></h2><blockquote><p><strong>工具系统方法的一些配置</strong></p></blockquote><ul><li>[1] 环境变量<ul><li>在<code>tmuxp</code>中设置会话环境变量</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session_name:</span> <span class="string">Environment</span> <span class="string">variables</span> <span class="string">test</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">EDITOR:</span> <span class="string">/usr/bin/vim</span></span><br><span class="line">  <span class="attr">HOME:</span> <span class="string">/tmp/hm</span></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line">  <span class="comment"># 如果之前没有shell命令将打开一个空白窗格。</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">Blank</span> <span class="string">pane</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span></span><br></pre></td></tr></table></figure><ul><li>[2] 定制主面板高度(Main pane height)<ul><li>根据实际使用情况，设置主面板的高度</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session_name:</span> <span class="string">main-pane-height</span></span><br><span class="line"><span class="attr">start_directory:</span> <span class="string">"~"</span></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">layout:</span> <span class="string">main-horizontal</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">main-pane-height:</span> <span class="number">30</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">top</span></span><br><span class="line">        <span class="attr">start_directory:</span> <span class="string">"~"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"hey"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"moo"</span></span><br><span class="line">    <span class="attr">window_name:</span> <span class="string">my</span> <span class="string">window</span> <span class="string">name</span></span><br></pre></td></tr></table></figure><ul><li>[3] 终端历史<ul><li>用于配置是否需要记录终端命令历史</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session_name:</span> <span class="string">suppress</span></span><br><span class="line"><span class="attr">suppress_history:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">appended</span></span><br><span class="line">    <span class="attr">focus:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">suppress_history:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"window in the history!"</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">suppressed</span></span><br><span class="line">    <span class="attr">suppress_history:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"window not in the history!"</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"session in the history!"</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">mixed</span></span><br><span class="line">    <span class="attr">suppress_history:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"command in the history!"</span></span><br><span class="line">        <span class="attr">suppress_history:</span> <span class="literal">false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"command not in the history!"</span></span><br><span class="line">        <span class="attr">suppress_history:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"window in the history!"</span></span><br></pre></td></tr></table></figure><ul><li>[4] 窗口选项<ul><li>创建窗格后设置窗口选项</li><li>在创建过程中在每个窗格中执行单个命令后，对于“同步窗格”选项很有用</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session_name:</span> <span class="number">2</span><span class="string">-pane-synchronized</span></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">Two</span> <span class="string">synchronized</span> <span class="string">panes</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ssh</span> <span class="string">server1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ssh</span> <span class="string">server2</span></span><br><span class="line">    <span class="attr">options_after:</span></span><br><span class="line">      <span class="attr">synchronize-panes:</span> <span class="string">on</span></span><br></pre></td></tr></table></figure><ul><li>[5] 设置选项<ul><li>设置<code>tmux</code>工具相关的选项，例如全局(服务器范围)选项、会话选项和窗口选项</li><li>包括<code>automatic-rename</code>,<code>default-shell</code>,<code>default-command</code>等相关命令</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session_name:</span> <span class="string">test</span> <span class="string">window</span> <span class="string">options</span></span><br><span class="line"><span class="attr">start_directory:</span> <span class="string">"~"</span></span><br><span class="line"><span class="attr">global_options:</span></span><br><span class="line">  <span class="attr">default-shell:</span> <span class="string">/bin/sh</span></span><br><span class="line">  <span class="attr">default-command:</span> <span class="string">/bin/sh</span></span><br><span class="line"><span class="attr">options:</span></span><br><span class="line">  <span class="attr">main-pane-height:</span> <span class="string">$&#123;MAIN_PANE_HEIGHT&#125;</span> <span class="comment"># works with env variables</span></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">layout:</span> <span class="string">main-horizontal</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">automatic-rename:</span> <span class="string">on</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">man</span> <span class="string">echo</span></span><br><span class="line">        <span class="attr">start_directory:</span> <span class="string">"~"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"hey"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"moo"</span></span><br></pre></td></tr></table></figure><ul><li>[6] 自动重命名(Automatic Rename)<ul><li>即可以自动命令创建的面板名称</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session_name:</span> <span class="string">test</span> <span class="string">window</span> <span class="string">options</span></span><br><span class="line"><span class="attr">start_directory:</span> <span class="string">"~"</span></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">layout:</span> <span class="string">main-horizontal</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">automatic-rename:</span> <span class="string">on</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">man</span> <span class="string">echo</span></span><br><span class="line">        <span class="attr">start_directory:</span> <span class="string">"~"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"hey"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"moo"</span></span><br></pre></td></tr></table></figure><ul><li>[7] 专注模式<ul><li>在专注模式中，可以确保在加载时附加和选择窗口和窗格</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session_name:</span> <span class="string">focus</span></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">attached</span> <span class="string">window</span></span><br><span class="line">    <span class="attr">focus:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">echo</span> <span class="string">hello</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">echo</span> <span class="string">'this pane should be selected on load'</span></span><br><span class="line">        <span class="attr">focus:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">cd</span> <span class="string">/var/log</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">echo</span> <span class="string">hello</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">second</span> <span class="string">window</span></span><br><span class="line">    <span class="attr">shell_command_before:</span> <span class="string">cd</span> <span class="string">/var/log</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pane</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">echo</span> <span class="string">'this pane should be focused, when window switched to first time'</span></span><br><span class="line">        <span class="attr">focus:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pane</span></span><br></pre></td></tr></table></figure><h2><span id="5-测试开发配置">5. 测试开发配置</span></h2><blockquote><p><strong>主要介绍在我们实际开发和测试当中应该如何使用该工具</strong></p></blockquote><ul><li>[1] 定制高级开发环境<ul><li>作为开发环境时候的相关配置</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session_name:</span> <span class="string">tmuxp</span></span><br><span class="line"><span class="attr">start_directory:</span> <span class="string">./</span> <span class="comment"># 加载相对于配置位置(项目根目录)的会话</span></span><br><span class="line"><span class="attr">before_script:</span> <span class="string">pipenv</span> <span class="string">install</span> <span class="string">--dev</span> <span class="string">--skip-lock</span></span><br><span class="line"><span class="attr">shell_command_before:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"[ -d `pipenv --venv` ] &amp;&amp; source `pipenv --venv`/bin/activate &amp;&amp; reset"</span></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">tmuxp</span></span><br><span class="line">    <span class="attr">focus:</span> <span class="literal">True</span></span><br><span class="line">    <span class="attr">layout:</span> <span class="string">main-horizontal</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">main-pane-height:</span> <span class="number">35</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">focus:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pane</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">make</span> <span class="string">watch_test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">docs</span></span><br><span class="line">    <span class="attr">layout:</span> <span class="string">main-horizontal</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">main-pane-height:</span> <span class="number">35</span></span><br><span class="line">    <span class="attr">start_directory:</span> <span class="string">doc/</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">focus:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pane</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">make</span> <span class="string">serve</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">make</span> <span class="string">watch</span></span><br></pre></td></tr></table></figure><ul><li>[2] 自动引导<ul><li>新版本<code>1.3.4</code>:在脚本 CWD 进入根(会话)级启动目录之前</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设您的.tmuxp.yaml位于项目的根目录中</span></span><br><span class="line"><span class="comment"># 如果使用pipenv的话，则可以使用如下脚本来确保已安装软件包</span></span><br><span class="line"><span class="attr">session_name:</span> <span class="string">my</span> <span class="string">pipenv</span> <span class="string">project</span></span><br><span class="line"><span class="attr">start_directory:</span> <span class="string">./</span></span><br><span class="line"><span class="attr">before_script:</span> <span class="string">pipenv</span> <span class="string">install</span> <span class="string">--dev</span> <span class="string">--skip-lock</span> <span class="comment"># 开发环境</span></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">django</span> <span class="string">project</span></span><br><span class="line">    <span class="attr">focus:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">blank</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pipenv</span> <span class="string">run</span> <span class="string">./manage.py</span> <span class="string">runserver</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设您的.tmuxp.yaml位于项目的根目录中</span></span><br><span class="line"><span class="comment"># 可以使用shell_command_before将自己置身于虚拟环境中</span></span><br><span class="line"><span class="attr">session_name:</span> <span class="string">my</span> <span class="string">pipenv</span> <span class="string">project</span></span><br><span class="line"><span class="attr">start_directory:</span> <span class="string">./</span></span><br><span class="line"><span class="attr">before_script:</span> <span class="string">pipenv</span> <span class="string">install</span> <span class="string">--dev</span> <span class="string">--skip-lock</span> <span class="comment"># 开发环境</span></span><br><span class="line"><span class="attr">shell_command_before:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"[ -d `pipenv --venv` ] &amp;&amp; source `pipenv --venv`/bin/activate &amp;&amp; reset"</span></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">django</span> <span class="string">project</span></span><br><span class="line">    <span class="attr">focus:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">blank</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./manage.py</span> <span class="string">runserver</span></span><br></pre></td></tr></table></figure><h2><span id="6-配置示例文件">6. 配置示例文件</span></h2><blockquote><p><strong>这里就是其他人使用该工具的配置文件，可以借鉴和引用</strong></p></blockquote><ul><li><strong>laixintao</strong></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session_name:</span> <span class="string">workspace</span></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">focus:</span> <span class="string">"true"</span></span><br><span class="line">    <span class="attr">layout:</span> <span class="number">66e3</span><span class="string">,238x57,0,0,14</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">automatic-rename:</span> <span class="string">"off"</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pane</span></span><br><span class="line">    <span class="attr">start_directory:</span> <span class="string">/Users/laixintao/Program</span></span><br><span class="line">    <span class="attr">window_name:</span> <span class="string">vim</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">layout:</span> <span class="string">a5de,238x57,0,0&#123;119x57,0,0,15,118x57,120,0[118x28,120,0,19,118x28,120,29,20]&#125;</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">automatic-rename:</span> <span class="string">"off"</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">focus:</span> <span class="string">"true"</span></span><br><span class="line">        <span class="attr">shell_command:</span> <span class="string">zsh</span></span><br><span class="line">      <span class="bullet">-</span></span><br><span class="line">      <span class="bullet">-</span></span><br><span class="line">    <span class="attr">start_directory:</span> <span class="string">/Users/laixintao</span></span><br><span class="line">    <span class="attr">window_name:</span> <span class="string">operation</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">layout:</span> <span class="number">66e5</span><span class="string">,238x57,0,0,16</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">automatic-rename:</span> <span class="string">"off"</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">focus:</span> <span class="string">"true"</span></span><br><span class="line">        <span class="attr">shell_command:</span> <span class="string">zsh</span></span><br><span class="line">    <span class="attr">start_directory:</span> <span class="string">/Users/laixintao</span></span><br><span class="line">    <span class="attr">window_name:</span> <span class="string">shell</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">layout:</span> <span class="number">66e6</span><span class="string">,238x57,0,0,17</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">automatic-rename:</span> <span class="string">"off"</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">focus:</span> <span class="string">"true"</span></span><br><span class="line">        <span class="attr">shell_command:</span> <span class="string">zsh</span></span><br><span class="line">    <span class="attr">start_directory:</span> <span class="string">/Users/laixintao</span></span><br><span class="line">    <span class="attr">window_name:</span> <span class="string">shell</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">layout:</span> <span class="number">66e7</span><span class="string">,238x57,0,0,18</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">automatic-rename:</span> <span class="string">"off"</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">focus:</span> <span class="string">"true"</span></span><br><span class="line">        <span class="attr">shell_command:</span> <span class="string">zsh</span></span><br><span class="line">    <span class="attr">start_directory:</span> <span class="string">/Users/laixintao</span></span><br><span class="line">    <span class="attr">window_name:</span> <span class="string">shell</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">layout:</span> <span class="string">main-vertical</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">automatic-rename:</span> <span class="string">"off"</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">focus:</span> <span class="string">"true"</span></span><br><span class="line">        <span class="attr">shell_command:</span> <span class="string">clash</span> <span class="string">&gt;</span> <span class="string">/tmp/clash.log</span></span><br><span class="line">    <span class="attr">window_name:</span> <span class="string">&lt;clash&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>vcspull</strong></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session_name:</span> <span class="string">vcspull</span></span><br><span class="line"><span class="attr">start_directory:</span> <span class="string">./</span></span><br><span class="line"><span class="attr">before_script:</span> <span class="string">pipenv</span> <span class="string">install</span> <span class="string">--dev</span> <span class="string">--skip-lock</span></span><br><span class="line"><span class="attr">shell_command_before:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"[ -d `pipenv --venv` ] &amp;&amp; source `pipenv --venv`/bin/activate &amp;&amp; reset"</span></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">vcspull</span></span><br><span class="line">    <span class="attr">focus:</span> <span class="literal">True</span></span><br><span class="line">    <span class="attr">layout:</span> <span class="string">main-horizontal</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">main-pane-height:</span> <span class="number">35</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">focus:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pane</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">make</span> <span class="string">watch_test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">docs</span></span><br><span class="line">    <span class="attr">layout:</span> <span class="string">main-horizontal</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">main-pane-height:</span> <span class="number">35</span></span><br><span class="line">    <span class="attr">start_directory:</span> <span class="string">doc/</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">focus:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pane</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">make</span> <span class="string">serve</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">make</span> <span class="string">watch</span></span><br></pre></td></tr></table></figure><ul><li><strong>dockerfiles</strong></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session_name:</span> <span class="string">docker</span></span><br><span class="line"><span class="attr">start_directory:</span> <span class="string">./</span></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">dockerfiles</span></span><br><span class="line">    <span class="attr">layout:</span> <span class="string">6da5,239x56,0,0[239x34,0,0,65,239x21,0,35&#123;119x21,0,35,66,119x21,120,35,67&#125;]</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">automatic-rename:</span> <span class="string">"off"</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">vim</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">:e</span> <span class="string">README.rst</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pane</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pane</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">docs</span></span><br><span class="line">    <span class="attr">layout:</span> <span class="string">main-horizontal</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">main-pane-height:</span> <span class="number">35</span></span><br><span class="line">    <span class="attr">shell_command_before:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">command</span> <span class="string">-v</span> <span class="string">virtualenv</span> <span class="string">&gt;/dev/null</span> <span class="number">2</span><span class="string">&gt;&amp;1</span> <span class="string">||</span> <span class="string">&#123;</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">virtualenv;</span> <span class="string">&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"[ -d .env -a -f .env/bin/activate ] &amp;&amp; source .env/bin/activate || virtualenv .env"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"[ ! -d .env/build ] || rm -rf .env/build"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cd</span> <span class="string">./doc</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">command</span> <span class="string">-v</span> <span class="string">.env/bin/tmuxp</span> <span class="string">&gt;/dev/null</span> <span class="number">2</span><span class="string">&gt;&amp;1</span> <span class="string">||</span> <span class="string">&#123;</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">-r</span> <span class="string">requirements.pip;</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">reset</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">vim</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">:Ex</span></span><br><span class="line">        <span class="attr">focus:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pwd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">'docs built to &lt;http://0.0.0.0:8007/_build/html&gt;'</span><span class="string">;</span> <span class="string">python</span> <span class="string">-m</span> <span class="string">SimpleHTTPServer</span> <span class="number">8007</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">command</span> <span class="string">-v</span> <span class="string">watching_testrunner</span> <span class="string">&gt;/dev/null</span> <span class="number">2</span><span class="string">&gt;&amp;1</span> <span class="string">||</span> <span class="string">&#123;</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">watching_testrunner;</span> <span class="string">&#125;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">watching_testrunner</span> <span class="string">--basepath</span> <span class="string">./</span> <span class="string">--pattern="*.rst"</span> <span class="string">'make html'</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">postgresql</span></span><br><span class="line">    <span class="attr">layout:</span> <span class="string">6da5,239x56,0,0[239x34,0,0,65,239x21,0,35&#123;119x21,0,35,66,119x21,120,35,67&#125;]</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">automatic-rename:</span> <span class="string">"off"</span></span><br><span class="line">    <span class="attr">start_directory:</span> <span class="string">postgresql</span></span><br><span class="line">    <span class="attr">panes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">vim</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">:e</span> <span class="string">Dockerfile</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pane</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pane</span></span><br></pre></td></tr></table></figure><ul><li><strong>sphinxcontrib</strong></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session_name:</span> <span class="string">sphinxcontrib-github</span></span><br><span class="line"><span class="attr">start_directory:</span> <span class="string">./</span></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">options:</span></span><br><span class="line">    <span class="attr">main-pane-height:</span> <span class="number">35</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">main-horizontal</span></span><br><span class="line">  <span class="attr">panes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">vim</span></span><br><span class="line">    <span class="attr">focus:</span> <span class="literal">true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pane</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pane</span></span><br><span class="line">  <span class="attr">window_name:</span> <span class="string">sphinxcontrib-github</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">window_name:</span> <span class="string">docs</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">main-horizontal</span></span><br><span class="line">  <span class="attr">options:</span></span><br><span class="line">    <span class="attr">main-pane-height:</span> <span class="number">35</span></span><br><span class="line">  <span class="attr">shell_command_before:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">command</span> <span class="string">-v</span> <span class="string">virtualenv</span> <span class="string">&gt;/dev/null</span> <span class="number">2</span><span class="string">&gt;&amp;1</span> <span class="string">||</span> <span class="string">&#123;</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">virtualenv;</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'[ -d .env -a -f .env/bin/activate ] &amp;&amp; source .env/bin/activate || virtualenv .env'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'[ ! -d .env/build ] || rm -rf .env/build'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">command</span> <span class="string">-v</span> <span class="string">.env/bin/tmuxp</span> <span class="string">&gt;/dev/null</span> <span class="number">2</span><span class="string">&gt;&amp;1</span> <span class="string">||</span> <span class="string">&#123;</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">-e</span> <span class="string">.;</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cd</span> <span class="string">./doc</span></span><br><span class="line">  <span class="attr">panes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">reset</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">vim</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">:Ex</span></span><br><span class="line">    <span class="attr">focus:</span> <span class="literal">true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pane</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">'docs built to &lt;http://0.0.0.0:8005/_build/html&gt;'</span><span class="string">;</span> <span class="string">python</span> <span class="string">-m</span> <span class="string">SimpleHTTPServer</span> <span class="number">8005</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">shell_command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">command</span> <span class="string">-v</span> <span class="string">sphinx-quickstart</span> <span class="string">&gt;/dev/null</span> <span class="number">2</span><span class="string">&gt;&amp;1</span> <span class="string">||</span> <span class="string">&#123;</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">-r</span> <span class="string">requirements.pip;</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">command</span> <span class="string">-v</span> <span class="string">watching_testrunner</span> <span class="string">&gt;/dev/null</span> <span class="number">2</span><span class="string">&gt;&amp;1</span> <span class="string">||</span> <span class="string">&#123;</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">watching_testrunner;</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">watching_testrunner</span> <span class="string">--basepath</span> <span class="string">./</span> <span class="string">--pattern="*.rst"</span> <span class="string">'make html'</span></span><br><span class="line"><span class="string">Terms</span></span><br></pre></td></tr></table></figure><blockquote><p>本文转载自：「 Escape 的博客 」，原文：<a href="https://tinyurl.com/y5zsckzv%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/y5zsckzv，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;使用 &lt;a href=&quot;https://github.com/tmux-python/tmuxp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tmuxp&lt;/a&gt; 可以很好的帮助我们来管理 tmux 的会话(session)，解决了平时在使用 tmux 工具时候的痛点。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-工具介绍&quot;&gt;1. 工具介绍&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;安装和使用都非常简单&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;事实上，&lt;code&gt;tmuxp&lt;/code&gt; 也是一个构建于 &lt;code&gt;tmux&lt;/code&gt; 之上的对象关系映射的 &lt;code&gt;ORM&lt;/code&gt; 的 &lt;code&gt;API&lt;/code&gt; 工具，就是利用 &lt;code&gt;tmux&lt;/code&gt; 工具定义的窗格(pane)、窗口(windows)和会话(session)，以创建关联视图的 &lt;code&gt;Server&lt;/code&gt;, &lt;code&gt;Session&lt;/code&gt;, &lt;code&gt;Window&lt;/code&gt;, &lt;code&gt;Pane&lt;/code&gt; 对象。我们在使用的时候，可以使用 &lt;code&gt;YAML&lt;/code&gt;, &lt;code&gt;JSON&lt;/code&gt; 以及 &lt;code&gt;dict&lt;/code&gt; 字配置项来启动我们配置好的窗口和面板。使用时候需要注意的是，只支持 &lt;code&gt;tmux&amp;gt;=1.8&lt;/code&gt; 的版本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简洁的语法
&lt;ul&gt;
&lt;li&gt;都支持在单独的命令中使用简短标记&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;加载会话
&lt;ul&gt;
&lt;li&gt;都是根据配置文件中加载 &lt;code&gt;tmux&lt;/code&gt; 会话(&lt;code&gt;session&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多种格式支持
&lt;ul&gt;
&lt;li&gt;可以使用 &lt;code&gt;YAML&lt;/code&gt;, &lt;code&gt;JSON&lt;/code&gt; 以及 &lt;code&gt;dict&lt;/code&gt; 字配置项&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Tmux" scheme="https://www.hi-linux.com/categories/Tmux/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Tmux" scheme="https://www.hi-linux.com/tags/Tmux/"/>
    
      <category term="Tmuxp" scheme="https://www.hi-linux.com/tags/Tmuxp/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 之父创造的 Rocky Linux 8.3 发布了！(内附镜像下载地址）</title>
    <link href="https://www.hi-linux.com/posts/16230.html"/>
    <id>https://www.hi-linux.com/posts/16230.html</id>
    <published>2021-05-02T01:00:00.000Z</published>
    <updated>2021-05-03T15:16:25.163Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>去年 12 月份，<code>CentOS</code> 官网正式宣布，将停止维护 <code>CentOS Linux</code>，并将更多资金和人力投入到 <code>CentOS Stream</code> 中。而 <code>Rocky Linux</code> 是红帽宣布放弃 <code>CentOS Linux</code> 后，由 <code>CentOS</code> 联合创始人 <code>Gregory Kurtzer</code> 创建的 <code>CentOS</code> 发行版，旨在继承 <code>CentOS</code> 的社区属性。</p><p><img src="https://img.hi-linux.com/staticfile/sPPw5k-2021-05-03-lHmSRy.jpg" alt></p><p>自去年年底创立该项目以来，<code>Rocky</code> 企业软件基金会一直致力于在今年 3 月和 5 月之间推出一个版本。现在随着五月的到来，Rocky Linux 8.3 的首个候选发行版发布，下载镜像已放出。</p><blockquote><p>Gregory Kurtzer 述：今年最受期待的开源项目发布就在这里！这是 Rocky Linux 8.3 的第一个候选发行版的首次发布！Rocky 是社区企业操作系统，现在 CentOS 已成为 RHEL 的协作开发测试基地。特别感谢所有实现此版本的朋友。言出必行，Rocky Linux 已经准备就绪！</p></blockquote><p>关于 <code>Rocky Linux 8.3 RC1</code> 首发版本的下载和更多细节可以通过 <a href="http://RockyLinux.org" target="_blank" rel="noopener">RockyLinux.org</a> 找到：</p><blockquote><p>链接：<a href="https://forums.rockylinux.org/t/rocky-linux-8-3-rc1-available-now/2393" target="_blank" rel="noopener">https://forums.rockylinux.org/t/rocky-linux-8-3-rc1-available-now/2393</a></p></blockquote><a id="more"></a><p><img src="https://img.hi-linux.com/staticfile/7kEryp-2021-05-03-ViaDUt.jpg" alt></p><p><strong>Rocky Linux 8.3 官方下载地址：</strong></p><ul><li><a href="https://rockylinux.org/download/" target="_blank" rel="noopener">https://rockylinux.org/download/</a></li></ul><p>为方便国内 Rocky Linux 爱好者下载试用，Rocky Linux 中文社区已经提供了多种下载方式，包括：<code>迅雷VIP</code>、<code>BT下载</code>、<code>百度网盘</code>、<code>天翼云盘</code>等（在此感谢社区爱好者），欢迎大家下载试用。</p><p><strong>Rocky Linux 中文社区下载链接：</strong></p><ul><li><a href="https://rockylinux.cn/rocky-linux-mirror-download.html" target="_blank" rel="noopener">https://rockylinux.cn/rocky-linux-mirror-download.html</a></li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年 12 月份，&lt;code&gt;CentOS&lt;/code&gt; 官网正式宣布，将停止维护 &lt;code&gt;CentOS Linux&lt;/code&gt;，并将更多资金和人力投入到 &lt;code&gt;CentOS Stream&lt;/code&gt; 中。而 &lt;code&gt;Rocky Linux&lt;/code&gt; 是红帽宣布放弃 &lt;code&gt;CentOS Linux&lt;/code&gt; 后，由 &lt;code&gt;CentOS&lt;/code&gt; 联合创始人 &lt;code&gt;Gregory Kurtzer&lt;/code&gt; 创建的 &lt;code&gt;CentOS&lt;/code&gt; 发行版，旨在继承 &lt;code&gt;CentOS&lt;/code&gt; 的社区属性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.hi-linux.com/staticfile/sPPw5k-2021-05-03-lHmSRy.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;自去年年底创立该项目以来，&lt;code&gt;Rocky&lt;/code&gt; 企业软件基金会一直致力于在今年 3 月和 5 月之间推出一个版本。现在随着五月的到来，Rocky Linux 8.3 的首个候选发行版发布，下载镜像已放出。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gregory Kurtzer 述：今年最受期待的开源项目发布就在这里！这是 Rocky Linux 8.3 的第一个候选发行版的首次发布！Rocky 是社区企业操作系统，现在 CentOS 已成为 RHEL 的协作开发测试基地。特别感谢所有实现此版本的朋友。言出必行，Rocky Linux 已经准备就绪！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于 &lt;code&gt;Rocky Linux 8.3 RC1&lt;/code&gt; 首发版本的下载和更多细节可以通过 &lt;a href=&quot;http://RockyLinux.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RockyLinux.org&lt;/a&gt; 找到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://forums.rockylinux.org/t/rocky-linux-8-3-rc1-available-now/2393&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://forums.rockylinux.org/t/rocky-linux-8-3-rc1-available-now/2393&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.hi-linux.com/categories/docker/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
      <category term="教程" scheme="https://www.hi-linux.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>推荐一款在 Kubernetes 中部署 Kubernetes 的神器 Vcluster</title>
    <link href="https://www.hi-linux.com/posts/19025.html"/>
    <id>https://www.hi-linux.com/posts/19025.html</id>
    <published>2021-04-26T01:00:00.000Z</published>
    <updated>2021-04-26T02:06:32.177Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><code>Vcluster</code> 是一个可以在 <code>Kubernetes</code> 集群中快速创建 <code>Kubernetes</code> 虚拟集群的实用工具。</p><blockquote><p>项目地址：<a href="https://github.com/loft-sh/vcluster" target="_blank" rel="noopener">https://github.com/loft-sh/vcluster</a></p></blockquote><h2><span id="什么是虚拟-kubernetes-集群">什么是虚拟 Kubernetes 集群？</span></h2><p>虚拟集群是运行在其它 <code>Kubernetes</code> 集群之上的 <code>Kubernetes</code> 集群。与完全独立的 “真实” 集群相比，虚拟集群没有自己的节点池。相反，它们是在底层集群内调度工作负载，同时拥有自己的控制平面。</p><h3><span id="虚拟-kubernetes-集群的特性">虚拟 Kubernetes 集群的特性</span></h3><ul><li>轻量级和低开销</li></ul><p>它是基于 <code>K3S</code>，捆绑在一个 <code>Pod</code> 中，具有超低的资源消耗。</p><ul><li>无性能损耗</li></ul><p>所有的 Pod 被调度在底层主机集群中，因此它们在运行时不会受到任何性能影响。</p><ul><li>减少主机集群的开销</li></ul><p>将大型多租户集群分割成较小的 <code>Vcluster</code> ，以减少复杂性并提高可扩展性。</p><ul><li>灵活而简单的配置</li></ul><p>你可以通过 <code>Vcluster CLI</code>、<code>Helm</code>、<code>Kubectl</code>、<code>Argo</code> 等任何工具来创建（它基本上只是一个 <code>StatefulSet</code>）。</p><ul><li>不需要管理权限</li></ul><p>如果你能将 <code>Web</code> 应用部署到 <code>Kubernetes</code> 命名空间，你也能部署 <code>Vcluster</code>。</p><ul><li>单一命名空间封装</li></ul><p>每个 <code>Vcluster</code> 及其所有的工作负载都在底层主机集群的单一命名空间内。</p><ul><li>易于清理</li></ul><p>删除主机命名空间，<code>Vcluster</code> 及其所有工作负载将立即被清除。</p><h3><span id="vcluster-架构图">Vcluster 架构图</span></h3><p><img src="https://img.hi-linux.com/staticfile/Vcluster1-2021-04-23-TlW8dG.png" alt="Vcluster 架构图"></p><a id="more"></a><h2><span id="使用-vcluster-创建-kubernetes-虚拟集群">使用 Vcluster 创建 Kubernetes 虚拟集群</span></h2><h3><span id="安装-vcluster-cli">安装 vcluster CLI</span></h3><ol><li>下载并安装 vcluster CLI</li></ol><p><code>vcluster CLI</code> 是使用 <code>Go</code> 语言开发的，只需根据你所使用的平台下载相应软件包并将其放到相应路径即可完成安装。</p><ul><li>Mac (Intel/AMD)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s -L &quot;https:&#x2F;&#x2F;github.com&#x2F;loft-sh&#x2F;vcluster&#x2F;releases&#x2F;latest&quot; | sed -nE &#39;s!.*&quot;([^&quot;]*vcluster-darwin-amd64)&quot;.*!https:&#x2F;&#x2F;github.com\1!p&#39; | xargs -n 1 curl -L -o vcluster &amp;&amp; chmod +x vcluster;</span><br><span class="line">$ sudo mv vcluster &#x2F;usr&#x2F;local&#x2F;bin;</span><br></pre></td></tr></table></figure><ul><li>Mac (Silicon/ARM)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s -L &quot;https:&#x2F;&#x2F;github.com&#x2F;loft-sh&#x2F;vcluster&#x2F;releases&#x2F;latest&quot; | sed -nE &#39;s!.*&quot;([^&quot;]*vcluster-darwin-arm64)&quot;.*!https:&#x2F;&#x2F;github.com\1!p&#39; | xargs -n 1 curl -L -o vcluster &amp;&amp; chmod +x vcluster;</span><br><span class="line">$ sudo mv vcluster &#x2F;usr&#x2F;local&#x2F;bin;</span><br></pre></td></tr></table></figure><ul><li>Linux (AMD)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s -L &quot;https:&#x2F;&#x2F;github.com&#x2F;loft-sh&#x2F;vcluster&#x2F;releases&#x2F;latest&quot; | sed -nE &#39;s!.*&quot;([^&quot;]*vcluster-linux-amd64)&quot;.*!https:&#x2F;&#x2F;github.com\1!p&#39; | xargs -n 1 curl -L -o vcluster &amp;&amp; chmod +x vcluster;</span><br><span class="line">$ sudo mv vcluster &#x2F;usr&#x2F;local&#x2F;bin;</span><br></pre></td></tr></table></figure><ul><li>Linux (ARM)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s -L &quot;https:&#x2F;&#x2F;github.com&#x2F;loft-sh&#x2F;vcluster&#x2F;releases&#x2F;latest&quot; | sed -nE &#39;s!.*&quot;([^&quot;]*vcluster-linux-arm64)&quot;.*!https:&#x2F;&#x2F;github.com\1!p&#39; | xargs -n 1 curl -L -o vcluster &amp;&amp; chmod +x vcluster;</span><br><span class="line">$ sudo mv vcluster &#x2F;usr&#x2F;local&#x2F;bin;</span><br></pre></td></tr></table></figure><ul><li>Windows (Powershell)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ md -Force &quot;$Env:APPDATA\vcluster&quot;; [System.Net.ServicePointManager]::SecurityProtocol &#x3D; [System.Net.SecurityProtocolType]&#39;Tls,Tls11,Tls12&#39;;</span><br><span class="line">$ Invoke-WebRequest -UseBasicParsing ((Invoke-WebRequest -URI &quot;https:&#x2F;&#x2F;github.com&#x2F;loft-sh&#x2F;vcluster&#x2F;releases&#x2F;latest&quot; -UseBasicParsing).Content -replace &quot;(?ms).*&#96;&quot;([^&#96;&quot;]*vcluster-windows-amd64.exe)&#96;&quot;.*&quot;,&quot;https:&#x2F;&#x2F;github.com&#x2F;&#96;$1&quot;) -o $Env:APPDATA\vcluster\vcluster.exe;</span><br><span class="line">$ $env:Path +&#x3D; &quot;;&quot; + $Env:APPDATA + &quot;\vcluster&quot;;</span><br><span class="line">$ [Environment]::SetEnvironmentVariable(&quot;Path&quot;, $env:Path, [System.EnvironmentVariableTarget]::User);</span><br></pre></td></tr></table></figure><blockquote><p>如果你在安装后收到 <code>Windows</code> 找不到 <code>Vcluster</code> 的错误，你将需要重新启动你的计算机，来应用 <code>PATH</code> 变量的修改。</p></blockquote><ol start="2"><li>确认 Vcluster CLI 已正确安装</li></ol><p>要确认 <code>Vcluster CLI</code> 已成功安装，可通过以下方式进行测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vcluster --version</span><br></pre></td></tr></table></figure><h3><span id="创建虚拟集群">创建虚拟集群</span></h3><ol><li>通过 Vcluster CLI 部署虚拟集群</li></ol><p>通过 <code>Vcluster CLI</code> 创建虚拟集群非常的简单，只需一条指定便可完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vcluster create vcluster-1 -n host-namespace-1</span><br></pre></td></tr></table></figure><blockquote><p>注：在使用 <code>Vcluster CLI</code> 前，确定你已经在本地配置好一个可以访问 <code>Kubernetes</code> 集群的环境。（可通过 <code>kubectl</code> 命令获取命名空间进行检查。）</p></blockquote><p>当然如果你不想安装 <code>Vcluster CLI</code>，也可以通过 <code>Helm</code> 和 <code>Kubectl</code> 直接部署虚拟集群。</p><ol start="2"><li>通过 Helm 部署虚拟集群</li></ol><p>首先建立一个部署文件，这里命名为 vcluster.yaml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ cat vcluster.yaml</span><br><span class="line">vcluster:</span><br><span class="line">  image: rancher&#x2F;k3s:v1.19.5-k3s2    </span><br><span class="line">  extraArgs:</span><br><span class="line">    - --service-cidr&#x3D;10.96.0.0&#x2F;12    </span><br><span class="line">  baseArgs:</span><br><span class="line">    - server</span><br><span class="line">    - --write-kubeconfig&#x3D;&#x2F;k3s-config&#x2F;kube-config.yaml</span><br><span class="line">    - --data-dir&#x3D;&#x2F;data</span><br><span class="line">    - --no-deploy&#x3D;traefik,servicelb,metrics-server,local-storage</span><br><span class="line">    - --disable-network-policy</span><br><span class="line">    - --disable-agent</span><br><span class="line">    - --disable-scheduler</span><br><span class="line">    - --disable-cloud-controller</span><br><span class="line">    - --flannel-backend&#x3D;none</span><br><span class="line">    - --kube-controller-manager-arg&#x3D;controllers&#x3D;*,-nodeipam,-nodelifecycle,-persistentvolume-binder,-attachdetach,-persistentvolume-expander,-cloud-node-lifecycle</span><br><span class="line">storage:</span><br><span class="line">  size: 5Gi</span><br></pre></td></tr></table></figure><p>然后使用 <code>Helm</code> 完成部署。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ helm upgrade --install vcluster-1 vcluster \</span><br><span class="line">  --values vcluster.yaml \</span><br><span class="line">  --repo https:&#x2F;&#x2F;charts.loft.sh \</span><br><span class="line">  --namespace vcluster-1 \</span><br><span class="line">  --repository-config&#x3D;&#39;&#39;</span><br></pre></td></tr></table></figure><ol start="3"><li>通过 Kubectl 部署虚拟集群</li></ol><p>首先建立一个部署文件，这里命名为 vcluster.yaml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">$ cat vcluster.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: vcluster-1</span><br><span class="line">---</span><br><span class="line">kind: Role</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">metadata:</span><br><span class="line">  name: vcluster-1</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups: [&quot;&quot;]</span><br><span class="line">    resources: [&quot;configmaps&quot;, &quot;secrets&quot;, &quot;services&quot;, &quot;services&#x2F;proxy&quot;, &quot;pods&quot;, &quot;pods&#x2F;proxy&quot;, &quot;pods&#x2F;attach&quot;, &quot;pods&#x2F;portforward&quot;, &quot;pods&#x2F;exec&quot;, &quot;pods&#x2F;log&quot;, &quot;events&quot;, &quot;endpoints&quot;, &quot;persistentvolumeclaims&quot;]</span><br><span class="line">    verbs: [&quot;*&quot;]</span><br><span class="line">  - apiGroups: [&quot;networking.k8s.io&quot;]</span><br><span class="line">    resources: [&quot;ingresses&quot;]</span><br><span class="line">    verbs: [&quot;*&quot;]</span><br><span class="line">  - apiGroups: [&quot;&quot;]</span><br><span class="line">    resources: [&quot;namespaces&quot;]</span><br><span class="line">    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]</span><br><span class="line">  - apiGroups: [&quot;apps&quot;]</span><br><span class="line">    resources: [&quot;statefulsets&quot;]</span><br><span class="line">    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]</span><br><span class="line">---</span><br><span class="line">kind: RoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">metadata:</span><br><span class="line">  name: vcluster-1</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: vcluster-1</span><br><span class="line">roleRef:</span><br><span class="line">  kind: Role</span><br><span class="line">  name: vcluster-1</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: vcluster-1</span><br><span class="line">spec:</span><br><span class="line">  type: ClusterIP</span><br><span class="line">  ports:</span><br><span class="line">    - name: https</span><br><span class="line">      port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">      protocol: TCP</span><br><span class="line">  selector:</span><br><span class="line">    app: vcluster-1</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: vcluster-1-headless</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - name: https</span><br><span class="line">      port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">      protocol: TCP</span><br><span class="line">  clusterIP: None</span><br><span class="line">  selector:</span><br><span class="line">    app: vcluster-1</span><br><span class="line">---</span><br><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: vcluster-1</span><br><span class="line">  labels:</span><br><span class="line">    app: vcluster-1</span><br><span class="line">spec:</span><br><span class="line">  serviceName: vcluster-1-headless</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: vcluster-1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: vcluster-1</span><br><span class="line">    spec:</span><br><span class="line">      terminationGracePeriodSeconds: 10</span><br><span class="line">      serviceAccountName: vcluster-1</span><br><span class="line">      containers:</span><br><span class="line">      - image: rancher&#x2F;k3s:v1.19.5-k3s2</span><br><span class="line">        name: virtual-cluster</span><br><span class="line">        command:</span><br><span class="line">          - &quot;&#x2F;bin&#x2F;k3s&quot;</span><br><span class="line">        args:</span><br><span class="line">          - &quot;server&quot;</span><br><span class="line">          - &quot;--write-kubeconfig&#x3D;&#x2F;k3s-config&#x2F;kube-config.yaml&quot;</span><br><span class="line">          - &quot;--data-dir&#x3D;&#x2F;data&quot;</span><br><span class="line">          - &quot;--disable&#x3D;traefik,servicelb,metrics-server,local-storage&quot;</span><br><span class="line">          - &quot;--disable-network-policy&quot;</span><br><span class="line">          - &quot;--disable-agent&quot;</span><br><span class="line">          - &quot;--disable-scheduler&quot;</span><br><span class="line">          - &quot;--disable-cloud-controller&quot;</span><br><span class="line">          - &quot;--flannel-backend&#x3D;none&quot;</span><br><span class="line">          - &quot;--kube-controller-manager-arg&#x3D;controllers&#x3D;*,-nodeipam,-nodelifecycle,-persistentvolume-binder,-attachdetach,-persistentvolume-expander,-cloud-node-lifecycle&quot;  </span><br><span class="line">          - &quot;--service-cidr&#x3D;10.96.0.0&#x2F;12&quot;  </span><br><span class="line">        volumeMounts:</span><br><span class="line">          - mountPath: &#x2F;data</span><br><span class="line">            name: data</span><br><span class="line">      - name: syncer</span><br><span class="line">        image: &quot;loftsh&#x2F;virtual-cluster:0.0.27&quot;</span><br><span class="line">        args:</span><br><span class="line">          - --service-name&#x3D;vcluster-1</span><br><span class="line">          - --suffix&#x3D;vcluster-1</span><br><span class="line">          - --owning-statefulset&#x3D;vcluster-1</span><br><span class="line">          - --out-kube-config-secret&#x3D;vcluster-1</span><br><span class="line">        volumeMounts:</span><br><span class="line">          - mountPath: &#x2F;data</span><br><span class="line">            name: data</span><br><span class="line">  volumeClaimTemplates:</span><br><span class="line">    - metadata:</span><br><span class="line">        name: data</span><br><span class="line">      spec:</span><br><span class="line">        accessModes: [ &quot;ReadWriteOnce&quot; ]</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            storage: 5Gi</span><br></pre></td></tr></table></figure><p>然后使用 <code>Kubectl</code> 命令完成部署。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f vcluster.yaml</span><br></pre></td></tr></table></figure><h3><span id="使用虚拟集群">使用虚拟集群</span></h3><p>在使用虚拟集群前，你必须先完成端口转发和 <code>kube-config</code> 文件的配置。你可以通过下面的命令来完成它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vcluster connect vcluster-1 -n host-namespace-1</span><br><span class="line">$ export KUBECONFIG&#x3D;.&#x2F;kubeconfig.yaml</span><br><span class="line"># 或者</span><br><span class="line">$ vcluster connect vcluster-1 -n host-namespace-1 --update-current</span><br></pre></td></tr></table></figure><p>以上配置完成后，你就可以愉快的使用这个 <code>Kubernetes</code> 虚拟集群了，它的使用和正常的 <code>Kubernetes</code> 集群并无区别。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 通过 Kubectl 管理虚拟集群</span><br><span class="line">$ kubectl get namespace</span><br><span class="line">$ kubectl get pods -n kube-system</span><br><span class="line">$ kubectl create namespace demo-nginx</span><br><span class="line">$ kubectl create deployment nginx-deployment -n demo-nginx --image&#x3D;nginx</span><br><span class="line">$ kubectl get pods -n demo-nginx</span><br></pre></td></tr></table></figure><h3><span id="删除虚拟集群">删除虚拟集群</span></h3><p>通过 <code>Vcluster CLI</code> 删除虚拟集群同样也是非常的简单，只需一条指定便可完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vcluster delete vcluster-1 -n host-namespace-1</span><br></pre></td></tr></table></figure><p>你也可以直接使用 <code>kubectl</code> 命令直接删除相应命名空间。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Vcluster&lt;/code&gt; 是一个可以在 &lt;code&gt;Kubernetes&lt;/code&gt; 集群中快速创建 &lt;code&gt;Kubernetes&lt;/code&gt; 虚拟集群的实用工具。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/loft-sh/vcluster&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/loft-sh/vcluster&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什么是虚拟-Kubernetes-集群？&quot;&gt;什么是虚拟 Kubernetes 集群？&lt;/h2&gt;
&lt;p&gt;虚拟集群是运行在其它 &lt;code&gt;Kubernetes&lt;/code&gt; 集群之上的 &lt;code&gt;Kubernetes&lt;/code&gt; 集群。与完全独立的 “真实” 集群相比，虚拟集群没有自己的节点池。相反，它们是在底层集群内调度工作负载，同时拥有自己的控制平面。&lt;/p&gt;
&lt;h3 id=&quot;虚拟-Kubernetes-集群的特性&quot;&gt;虚拟 Kubernetes 集群的特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;轻量级和低开销&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它是基于 &lt;code&gt;K3S&lt;/code&gt;，捆绑在一个 &lt;code&gt;Pod&lt;/code&gt; 中，具有超低的资源消耗。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无性能损耗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有的 Pod 被调度在底层主机集群中，因此它们在运行时不会受到任何性能影响。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少主机集群的开销&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将大型多租户集群分割成较小的 &lt;code&gt;Vcluster&lt;/code&gt; ，以减少复杂性并提高可扩展性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;灵活而简单的配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以通过 &lt;code&gt;Vcluster CLI&lt;/code&gt;、&lt;code&gt;Helm&lt;/code&gt;、&lt;code&gt;Kubectl&lt;/code&gt;、&lt;code&gt;Argo&lt;/code&gt; 等任何工具来创建（它基本上只是一个 &lt;code&gt;StatefulSet&lt;/code&gt;）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不需要管理权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你能将 &lt;code&gt;Web&lt;/code&gt; 应用部署到 &lt;code&gt;Kubernetes&lt;/code&gt; 命名空间，你也能部署 &lt;code&gt;Vcluster&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一命名空间封装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个 &lt;code&gt;Vcluster&lt;/code&gt; 及其所有的工作负载都在底层主机集群的单一命名空间内。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;易于清理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;删除主机命名空间，&lt;code&gt;Vcluster&lt;/code&gt; 及其所有工作负载将立即被清除。&lt;/p&gt;
&lt;h3 id=&quot;Vcluster-架构图&quot;&gt;Vcluster 架构图&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img.hi-linux.com/staticfile/Vcluster1-2021-04-23-TlW8dG.png&quot; alt=&quot;Vcluster 架构图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/categories/kubernetes/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="工具" scheme="https://www.hi-linux.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>推荐一款 Kubernetes 应用性能分析工具 Kubectl Flame</title>
    <link href="https://www.hi-linux.com/posts/55077.html"/>
    <id>https://www.hi-linux.com/posts/55077.html</id>
    <published>2021-04-22T01:00:00.000Z</published>
    <updated>2021-04-22T01:29:53.539Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2><span id="什么是性能分析">什么是性能分析？</span></h2><p>性能分析是分析应用程序性能来改进代码质量的常用方法，最流行的可视化性能分析方法是生成火焰图。</p><p><img src="https://img.hi-linux.com/staticfile/640-2021-03-12-ogeYMt.jpg" alt></p><p>基于 Spring 框架的 Java 应用的火焰图</p><p>y轴是堆栈深度，x轴跨越样本总体。每个矩形都是一个函数，其中宽度显示它出现的频率，从左到右的排序并不重要 (堆栈按字母顺序排序)。</p><h2><span id="kubernetes-上的性能分析">Kubernetes 上的性能分析</span></h2><p>性能分析是一项较为复杂的任务，大多数探查器有两个主要问题：</p><ul><li>需要修改应用程序，通常可以通过将标志添加到执行命令或将一些性能分析库导入代码中来实现。</li><li>由于在分析过程中会严重影响性能，因此通常避免在生产环境中进行性能分析。</li></ul><p>选择正确的探查器可能会解决这些问题，但是这需要仔细去进行研究，并且通常取决于编程语言和操作系统。</p><p>在 Kubernetes 集群中运行的应用程序上执行分析时，会变得更加困难。需要部署一个包含配置文件修改的新容器镜像，而不是当前正在运行的容器。此外，当应用程序重新启动时，某些性能问题可能会消失，这就使得调试变得困难。</p><a id="more"></a><h2><span id="kubectl-flame">Kubectl flame</span></h2><p>Kubectl Flame 是一个 kubectl 插件，可以以较低的开销生成火焰图🔥来分析应用程序性能，无需进行任何应用程序修改或停机。</p><blockquote><p>项目仓库地址：<a href="https://github.com/VerizonMedia/kubectl-flame" target="_blank" rel="noopener">https://github.com/VerizonMedia/kubectl-flame</a></p></blockquote><h3><span id="安装">安装</span></h3><p>可以通过 Krew 来安装 <code>kubectl flame</code> 插件，一旦安装了 Krew，就可以通过如下命令进行安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl krew install flame</span><br></pre></td></tr></table></figure><h3><span id="使用要求">使用要求</span></h3><ul><li>支持的语言：Go、Java（任何基于JVM的语言）、Python 和 Ruby</li><li>使用 Docker 作为容器运行时的 Kubernetes 集群（已在 GKE，EKS 和 AKS 上测试）</li></ul><h3><span id="运行原理">运行原理</span></h3><p><code>kubectl-flame</code> 通过在与目标容器相同的节点上启动一个探查器来启动性能分析，大多数探查器将与目标容器共享一些资源：比如通过将 <code>hostPID</code> 设置为 true 来启用 PID 命名空间共享，通过挂载 <code>/var/lib/docker</code> 并查询 overlayFS 来启用文件系统共享。</p><p>在后台<code>kubectl-flame</code>使用 async-profiler 来为 Java 应用程序生成火焰图，通过共享<code>/tmp</code>文件夹与目标 JVM 进行交互，Golang 则支持基于 ebpf 分析，Python 支持基于 py-spy 进行分析。</p><p><img src="https://img.hi-linux.com/staticfile/640-20210312141618823-2021-03-12-Tdwboq.jpg" alt></p><p>kubectl flame 概述</p><h3><span id="使用实例">使用实例</span></h3><ol><li>分析 Kubernetes Pod</li></ol><p>分析 Java 应用 mypod 1分钟，并在将火焰图保存到 <code>/tmp/flamegraph.svg</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl flame mypod -t 1m --lang java -f &#x2F;tmp&#x2F;flamegraph.svg</span><br></pre></td></tr></table></figure><ol start="2"><li>分析基于 alpine 的容器</li></ol><p>在基于 alpine 的容器中分析 Java 应用程序需要使用 <code>--alpine</code> 标志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl flame mypod -t 1m -f &#x2F;tmp&#x2F;flamegraph.svg --lang Java --alpine</span><br></pre></td></tr></table></figure><blockquote><p><em>注意</em>：仅 Java 应用程序需要此 <code>--alpine</code> 标志，而 Go 分析则不需要该标志。</p></blockquote><ol start="3"><li>分析 sidecar 容器</li></ol><p>包含多个容器的 Pod 需要将目标容器指定为参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl flame mypod -t 1m --lang go -f &#x2F;tmp&#x2F;flamegraph.svg mycontainer</span><br></pre></td></tr></table></figure><blockquote><p>本文转载自：「 k8s技术圈 」，原文：<a href="http://t.cn/A6t8p02V%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">http://t.cn/A6t8p02V，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是性能分析？&quot;&gt;什么是性能分析？&lt;/h2&gt;
&lt;p&gt;性能分析是分析应用程序性能来改进代码质量的常用方法，最流行的可视化性能分析方法是生成火焰图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.hi-linux.com/staticfile/640-2021-03-12-ogeYMt.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;基于 Spring 框架的 Java 应用的火焰图&lt;/p&gt;
&lt;p&gt;y轴是堆栈深度，x轴跨越样本总体。每个矩形都是一个函数，其中宽度显示它出现的频率，从左到右的排序并不重要 (堆栈按字母顺序排序)。&lt;/p&gt;
&lt;h2 id=&quot;Kubernetes-上的性能分析&quot;&gt;Kubernetes 上的性能分析&lt;/h2&gt;
&lt;p&gt;性能分析是一项较为复杂的任务，大多数探查器有两个主要问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要修改应用程序，通常可以通过将标志添加到执行命令或将一些性能分析库导入代码中来实现。&lt;/li&gt;
&lt;li&gt;由于在分析过程中会严重影响性能，因此通常避免在生产环境中进行性能分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择正确的探查器可能会解决这些问题，但是这需要仔细去进行研究，并且通常取决于编程语言和操作系统。&lt;/p&gt;
&lt;p&gt;在 Kubernetes 集群中运行的应用程序上执行分析时，会变得更加困难。需要部署一个包含配置文件修改的新容器镜像，而不是当前正在运行的容器。此外，当应用程序重新启动时，某些性能问题可能会消失，这就使得调试变得困难。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/categories/kubernetes/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>三种不同场景下的 Kubernetes 服务调试方法</title>
    <link href="https://www.hi-linux.com/posts/21833.html"/>
    <id>https://www.hi-linux.com/posts/21833.html</id>
    <published>2021-04-19T01:00:00.000Z</published>
    <updated>2021-04-19T03:41:05.883Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>在开发、调试为生产环境下 K8s service 中的应用程序时，常常需要一些工具或者命令。本文介绍了三种不同场景下对应的解决方案以及工具。</p><blockquote><ul><li>作者：Erkan Erol</li><li>翻译：Bach（才云）</li><li>校对：木子（才云）</li></ul></blockquote><h2><span id="基本设置">基本设置</span></h2><p>以下解释了场景的基本设置：</p><p><img src="https://img.hi-linux.com/staticfile/640-20210317135843521-2021-03-17-e2IA9c.jpg" alt></p><p>我们有 3 个 service，service-front 通过入口暴露给外网。service-front 的后端服务是 service-middle，service-middle 的后端是 service-back。通信是通过 K8s service 完成的。</p><p>以下是安装该设置的必要命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create ns service-debug</span><br><span class="line">$ kubectl -n service-debug run service-back --image&#x3D;erkanerol&#x2F;service-back:v1 --port&#x3D;8080 --expose&#x3D;true --labels&#x3D;&quot;app&#x3D;back&quot;</span><br><span class="line">$ kubectl -n service-debug run service-middle --image&#x3D;erkanerol&#x2F;service-middle:v1 --port&#x3D;8081 --expose&#x3D;true --labels&#x3D;&quot;app&#x3D;middle&quot;</span><br><span class="line">$ kubectl -n service-debug run service-front --image&#x3D;erkanerol&#x2F;service-front:v1 --port&#x3D;8082 --expose&#x3D;true --labels&#x3D;&quot;app&#x3D;front&quot;</span><br></pre></td></tr></table></figure><blockquote><p>这是这些服务的源代码：<a href="https://github.com/erkanerol/service-examples-for-blog" target="_blank" rel="noopener">https://github.com/erkanerol/service-examples-for-blog</a></p></blockquote><a id="more"></a><h2><span id="工具1kubectl-port-forward">工具1：kubectl port-forward</span></h2><h3><span id="场景">场景：</span></h3><p>作为开发人员，我希望 service-back 可以直接发送一些请求，并在不影响其他 service 的情况下查看结果。</p><h3><span id="问题">问题：</span></h3><p>service-back 不会暴露在外网，所以我们不能直接向其发送请求。</p><h3><span id="解决方案">解决方案：</span></h3><p>使用 kubectl port-forward，可以打开从本地计算机到 service-back 集群中的隧道。</p><blockquote><p>可参考：<a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#port-forward" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#port-forward</a></p></blockquote><h3><span id="步骤">步骤：</span></h3><p>在终端中运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n service-debug port-forward service&#x2F;service-back 8080:8080</span><br><span class="line">Forwarding from 127.0.0.1:8080 -&gt; 8080</span><br><span class="line">Forwarding from [::1]:8080 -&gt; 8080</span><br></pre></td></tr></table></figure><p>然后在另一个终端中运行以下 curl 命令，以查看是否可以访问 service-back：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl localhost:8080</span><br><span class="line">Timestamp from back:1614508193</span><br></pre></td></tr></table></figure><h3><span id="实现原理">实现原理：</span></h3><p><img src="https://img.hi-linux.com/staticfile/640-20210317134229552-2021-03-17-ENK3sw.jpg" alt></p><p>kubectl 启动一个监听在 localhost:8080 的进程。它监控该端口并建立与 api-server 的连接，该连接将请求转发到 service-back。</p><h2><span id="工具2kubefwd">工具2：kubefwd</span></h2><h3><span id="场景">场景：</span></h3><p>作为开发人员，我希望在本地计算机上运行 service-front，以便在 IDE 中设置断点来调试应用程序。</p><h3><span id="问题">问题：</span></h3><p>service-front 被设计为，在 Kubernetes 中运行并可以通过 K8s service 访问 service-middle。service 名称是硬编码的，或者很难配置的，又或者我们懒得在本地计算机上模拟依赖项。</p><h3><span id="解决方案">解决方案：</span></h3><p>kubefwd 是解决该问题的有用工具。它可以执行批量端口转发并管理本地计算机中的 DNS 记录。</p><blockquote><p>可参考：<a href="https://github.com/txn2/kubefwd" target="_blank" rel="noopener">https://github.com/txn2/kubefwd</a></p></blockquote><h3><span id="步骤">步骤：</span></h3><p>在终端中运行以下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo KUBECONFIG&#x3D;$KUBECONFIG kubefwd svc -n service-debug -l app&#x3D;middle</span><br></pre></td></tr></table></figure><p>请注意，kubefwd 需要 root 特权，并且必须使用 sudo 运行。事先设置 KUBECONFIG 变量，不需要任何主文件夹引用。</p><p>在另一个终端中，在本地计算机上运行 front 应用程序。注意，我们也可以在调试模式下运行它并设置断点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd &#x2F;tmp</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;erkanerol&#x2F;service-examples-for-blog.git</span><br><span class="line">$ cd service-examples-for-blog&#x2F;front</span><br><span class="line">$ go run main.go</span><br></pre></td></tr></table></figure><p>再在另一个终端中，向 front 应用发送请求，以查看 front 应用在本地提供服务，并且可以在集群中访问 service-middle。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl localhost:8082</span><br><span class="line">Response from service middle:&#39;Response from service back:&#39;Timestamp from back:1614513901&#39;&#39;</span><br></pre></td></tr></table></figure><h3><span id="实现原理">实现原理：</span></h3><p><img src="https://img.hi-linux.com/staticfile/640-20210317135852855-2021-03-17-VCN08D.jpg" alt></p><p>从 kubefwd 的日志中可以看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">INFO[14:07:38] &#39;cat &#x2F;etc&#x2F;hosts&#39; to see all host entries.</span><br><span class="line">INFO[14:07:38] Loaded hosts file &#x2F;etc&#x2F;hosts</span><br><span class="line">INFO[14:07:38] HostFile management: Original hosts backup already exists at &#x2F;root&#x2F;hosts.original</span><br><span class="line">...</span><br><span class="line">INFO[14:07:38] Port-Forward: 127.1.27.1 service-middle:8081 to pod service-middle:8081</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>它启动一个进程，监听在 127.1.27.1:8081，并配置了 service-middle 的 /etc/hosts：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;etc&#x2F;hosts |grep service-middle</span><br><span class="line">127.1.27.1       service-middle.default service-middle.default.svc service-middle.default.svc.cluster.local service-middle.default.minikube service-middle.default.svc.minikube service-middle.default.svc.cluster.minikube service-middle service-middle.service-debug service-middle.service-debug.svc service-middle.service-debug.svc.cluster.local service-middle.service-debug.minikube service-middle.service-debug.svc.minikube service-middle.service-debug.svc.cluster.minikube</span><br></pre></td></tr></table></figure><p>然后，本地 front 应用程序可以像访问 K8s 集群一样访问 service-middle，而无需其他额外的工作。</p><h2><span id="工具3telepresence">工具3：telepresence</span></h2><h3><span id="场景">场景：</span></h3><p>作为开发人员，我希望在本地计算机上运行 service-middle，以便可以在 IDE 中设置断点来调试应用程序。</p><h3><span id="问题">问题：</span></h3><p>service-middle 设计为可在 Kubernetes 中运行，可通过 K8s service 访问 service-back。另外，它的 service-front 正在 K8s 上运行。这些 service 在本地计算机上不可用，而且我们也很难在本地计算机上模拟这些环境。</p><h3><span id="解决方案">解决方案：</span></h3><p>telepresence 是解决此问题的有用工具。</p><blockquote><p>可参考：<a href="https://www.telepresence.io/" target="_blank" rel="noopener">https://www.telepresence.io/</a></p></blockquote><h3><span id="步骤">步骤：</span></h3><p>首先从 K8s 集群中删除 service-middle。我们在本地运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n service-debug delete service service-middle --ignore-not-found&#x3D;true</span><br><span class="line">$ kubectl -n service-debug delete pod service-middle --ignore-not-found&#x3D;true</span><br></pre></td></tr></table></figure><p>为 service-middle 运行 telepresence：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  telepresence --namespace service-debug --new-deployment service-middle --expose 8081</span><br></pre></td></tr></table></figure><p>在另一个终端中，在本地计算机上运行 middle 应用程序。注意，我们也可以在调试模式下运行并设置断点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd &#x2F;tmp</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;erkanerol&#x2F;service-examples-for-blog.git</span><br><span class="line">$ cd service-examples-for-blog&#x2F;middle</span><br><span class="line">$ go run main.go</span><br></pre></td></tr></table></figure><p>再在另一个终端中，运行以下命令以通过集群中的临时 Pod 发送请求至 service-front ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n service-debug run curl -it  --rm&#x3D;true --image&#x3D;curlimages&#x2F;curl --restart&#x3D;Never -- http:&#x2F;&#x2F;service-front:8082Response from service middle:&#39;</span><br><span class="line">Response from service back:&#39;Timestamp from back:1614517363&#39;&#39;pod &quot;curl&quot; deleted</span><br></pre></td></tr></table></figure><p>要注意，这里的请求将转到 K8s 中的 service-front，K8s 将请求发送到本地计算机中的 service-middle，本地计算机再将请求发送到集群中的 service-back。</p><h3><span id="实现原理">实现原理：</span></h3><p><img src="https://img.hi-linux.com/staticfile/640-20210317135905079-2021-03-17-LvNbRd.jpg" alt></p><p>实际上，telepresence 将 proxy、fake agent 部署到集群中，并通过该代理在本地环境和集群之间打开一条双向通道。这样一来，我们便可以在本地计算机上运行 middle service，而无需调整 consumers、dependent service。</p><blockquote><p>telepresence 工作原理的详细说明，详见：<a href="https://www.telepresence.io/discussion/how-it-works" target="_blank" rel="noopener">https://www.telepresence.io/discussion/how-it-works</a></p></blockquote><h2><span id="小结">小结</span></h2><p>如果我们需要在不暴露 service 的情况下访问 service，kubectl port-forward 就足够了。</p><p>如果我们需要在本地运行 service 进行调试，并且 service 需要访问 K8s 上的其他 service ，kubefwd 可以发挥作用。它管理着本地计算机中的 DNS 记录，并为 service 依赖性打开从计算机到集群的单向通道。</p><p>如果我们需要在本地运行 service 进行调试，并且应用程序在集群中有一些使用方，那就使用telepresence。它可以打开双向网络通道，并将请求从集群转发至本地实例。</p><p>原文链接：<a href="https://erkanerol.github.io/post/debugging-k8s-services/" target="_blank" rel="noopener">https://erkanerol.github.io/post/debugging-k8s-services/</a></p><blockquote><p>本文转载自：「 K8sMeetup」，原文：<a href="http://t.cn/A6t1ABFC" target="_blank" rel="noopener">http://t.cn/A6t1ABFC</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发、调试为生产环境下 K8s service 中的应用程序时，常常需要一些工具或者命令。本文介绍了三种不同场景下对应的解决方案以及工具。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;作者：Erkan Erol&lt;/li&gt;
&lt;li&gt;翻译：Bach（才云）&lt;/li&gt;
&lt;li&gt;校对：木子（才云）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;基本设置&quot;&gt;基本设置&lt;/h2&gt;
&lt;p&gt;以下解释了场景的基本设置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.hi-linux.com/staticfile/640-20210317135843521-2021-03-17-e2IA9c.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们有 3 个 service，service-front 通过入口暴露给外网。service-front 的后端服务是 service-middle，service-middle 的后端是 service-back。通信是通过 K8s service 完成的。&lt;/p&gt;
&lt;p&gt;以下是安装该设置的必要命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl create ns service-debug&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl -n service-debug run service-back --image&amp;#x3D;erkanerol&amp;#x2F;service-back:v1 --port&amp;#x3D;8080 --expose&amp;#x3D;true --labels&amp;#x3D;&amp;quot;app&amp;#x3D;back&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl -n service-debug run service-middle --image&amp;#x3D;erkanerol&amp;#x2F;service-middle:v1 --port&amp;#x3D;8081 --expose&amp;#x3D;true --labels&amp;#x3D;&amp;quot;app&amp;#x3D;middle&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl -n service-debug run service-front --image&amp;#x3D;erkanerol&amp;#x2F;service-front:v1 --port&amp;#x3D;8082 --expose&amp;#x3D;true --labels&amp;#x3D;&amp;quot;app&amp;#x3D;front&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;这是这些服务的源代码：&lt;a href=&quot;https://github.com/erkanerol/service-examples-for-blog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/erkanerol/service-examples-for-blog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/categories/kubernetes/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>微软再推 Rust 语言免费中文教程，更香了！</title>
    <link href="https://www.hi-linux.com/posts/42443.html"/>
    <id>https://www.hi-linux.com/posts/42443.html</id>
    <published>2021-04-19T01:00:00.000Z</published>
    <updated>2021-04-20T05:03:32.420Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>在过去的几个月，Amazon、Facebook、微软以及谷歌等科技巨头正疯狂吸纳人才市场上的 Rust 语言程序员。 Rust 人才的动向，也标志着该语言社区在发展进程中迎来了新的转折点。</p><p>这场 “抢人大战”，源自各方着力筹备的 Rust 团队组建计划。凭借着出色的内存效率、速度与安全性，Rust 语言近年来的优势地位愈发明显。事实上，Rust 正越来越被视为 Go 以及 C++/C 等传统编程语言的现代替代选项。</p><p>各大厂商开始使用 Rust 语言支持从网站到开发者工具、再到电子游戏的多种应用场景。Facebook 一直在使用 Rust 语言构建 Diem 币（即原 Libra 币），Amazon 则使用 Rust 为其无服务器平台 Lambda（此平台允许开发者在无需管理底层服务器的前提下，轻松运行并扩展开发代码）等产品编写代码。</p><blockquote><p>Rust 语言是一种高效、可靠的通用高级语言。其高效不仅限于开发效率，它的执行效率也是令人称赞的，是一种少有的兼顾开发效率和执行效率的语言。</p><p>Rust 语言由 Mozilla 开发，最早发布于 2014 年 9 月。Rust 的编译器是在 MIT License 和 Apache License 2.0 双重协议声明下的免费开源软件。</p></blockquote><a id="more"></a><p>简而言之，就是一句话，Rust 编程语言越来越受欢迎了，如果你最近也正想学习这门语言，那真是来对地方了，微软最近开放了一个 Rust 教程，最关键的是还有中文版。</p><p><img src="https://img.hi-linux.com/staticfile/image-20210420101730237-2021-04-20-RwaIqE.png" alt="image-20210420101730237"></p><p>通过这份教程， 你将打下使用 Rust 构建快速、高效的程序所需的知识基础。</p><p>在此学习路径下，你将：</p><ul><li><p>安装编写第一批 Rust 代码所需的工具。</p></li><li><p>了解 Rust 中的基本概念。</p></li><li><p>了解如何处理错误。</p></li><li><p>在 Rust 中管理内存。</p></li><li><p>使用泛型类型和特征。</p></li><li><p>为包和箱设置模块。</p></li><li><p>编写并运行自动测试。</p></li><li><p>创建命令行程序。</p></li></ul><p>下面，我们一起来看看部分学习模块：</p><h3><span id="rust-入门">Rust 入门</span></h3><p><img src="https://img.hi-linux.com/staticfile/image-20210420102532317-2021-04-20-IiJ0AY.png" alt="image-20210420102532317"></p><p>在此模块中，了解如何开始使用 Rust - 设置环境、编写程序和使用 Cargo 生成系统。</p><h3><span id="了解-rust-中的常见概念">了解 Rust 中的常见概念</span></h3><p><img src="https://img.hi-linux.com/staticfile/image-20210420103101356-2021-04-20-R9GuUV.png" alt="image-20210420103101356"></p><p>这一模块中你将了解 Rust 的基础知识。 浏览变量、数据类型、结构、枚举、函数、索引、哈希映射和流控制。</p><h3><span id="在-rust-中处理错误">在 Rust 中处理错误</span></h3><p><img src="https://img.hi-linux.com/staticfile/image-20210420103246334-2021-04-20-GtOzn4.png" alt="image-20210420103246334"></p><p>在本模块中，你将了解在 Rust 中处理错误的方法。</p><h3><span id="了解-rust-如何管理内存">了解 Rust 如何管理内存</span></h3><p><img src="https://img.hi-linux.com/staticfile/image-20210420103303241-2021-04-20-6FbjVS.png" alt="image-20210420103303241"></p><p>这一模块了解让 Rust 如此与众不同的特性：所有权和借用。</p><p>看完前几章的介绍，不知道你是否对 Rust 语言感兴趣呢？欲查看完整课程的地址，可在公众号后台回复：「微软Rust」获取 。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在过去的几个月，Amazon、Facebook、微软以及谷歌等科技巨头正疯狂吸纳人才市场上的 Rust 语言程序员。 Rust 人才的动向，也标志着该语言社区在发展进程中迎来了新的转折点。&lt;/p&gt;
&lt;p&gt;这场 “抢人大战”，源自各方着力筹备的 Rust 团队组建计划。凭借着出色的内存效率、速度与安全性，Rust 语言近年来的优势地位愈发明显。事实上，Rust 正越来越被视为 Go 以及 C++/C 等传统编程语言的现代替代选项。&lt;/p&gt;
&lt;p&gt;各大厂商开始使用 Rust 语言支持从网站到开发者工具、再到电子游戏的多种应用场景。Facebook 一直在使用 Rust 语言构建 Diem 币（即原 Libra 币），Amazon 则使用 Rust 为其无服务器平台 Lambda（此平台允许开发者在无需管理底层服务器的前提下，轻松运行并扩展开发代码）等产品编写代码。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust 语言是一种高效、可靠的通用高级语言。其高效不仅限于开发效率，它的执行效率也是令人称赞的，是一种少有的兼顾开发效率和执行效率的语言。&lt;/p&gt;
&lt;p&gt;Rust 语言由 Mozilla 开发，最早发布于 2014 年 9 月。Rust 的编译器是在 MIT License 和 Apache License 2.0 双重协议声明下的免费开源软件。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Rust" scheme="https://www.hi-linux.com/categories/Rust/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="微软" scheme="https://www.hi-linux.com/tags/%E5%BE%AE%E8%BD%AF/"/>
    
      <category term="Rust" scheme="https://www.hi-linux.com/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>巧用 Docker Compose 管理 GPU 资源</title>
    <link href="https://www.hi-linux.com/posts/14919.html"/>
    <id>https://www.hi-linux.com/posts/14919.html</id>
    <published>2021-04-16T01:00:00.000Z</published>
    <updated>2021-04-16T03:17:43.760Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><blockquote><p><strong>在容器中使用 GPU 一直是使用 Compose 的一个痛点！</strong></p></blockquote><p>在面向 <code>AI</code> 开发的大趋势下，容器化可以将环境无缝迁移，将配置环境的成本无限降低。但是，在容器中配置 <code>CUDA</code> 并运行 <code>TensorFlow</code> 一段时间内确实是个比较麻烦的时候，所以我们这里就介绍和使用它。</p><ul><li><a href="https://docs.docker.com/compose/gpu-support/" target="_blank" rel="noopener">Enabling GPU access with Compose</a></li><li><a href="https://docs.docker.com/config/containers/resource_constraints/#gpu" target="_blank" rel="noopener">Runtime options with Memory, CPUs, and GPUs</a></li><li><a href="https://github.com/compose-spec/compose-spec/blob/master/spec.md" target="_blank" rel="noopener">The Compose Specification</a></li><li><a href="https://github.com/compose-spec/compose-spec/blob/master/deploy.md#devices" target="_blank" rel="noopener">The Compose Specification - Deployment support</a></li><li><a href="https://github.com/compose-spec/compose-spec/blob/master/build.md" target="_blank" rel="noopener">The Compose Specification - Build support</a></li></ul><p><strong>在 Compose 中使用 GPU 资源</strong></p><ul><li>如果我们部署 <code>Docker</code> 服务的的主机上正确安装并设置了其对应配置，且该主机上恰恰也有对应的 <code>GPU</code> 显卡，那么就可以在 <code>Compose</code> 中来定义和设置这些 <code>GPU</code> 显卡了。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要安装的配置</span></span><br><span class="line">$ apt-get install nvidia-container-runtime</span><br></pre></td></tr></table></figure><ul><li><strong>旧版本 &lt;= 19.03</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># runtime</span></span><br><span class="line">$ docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi</span><br></pre></td></tr></table></figure><ul><li><strong>新版本 &gt;= 19.03</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># with --gpus</span></span><br><span class="line">$ docker run -it --rm --gpus all ubuntu nvidia-smi</span><br><span class="line"></span><br><span class="line"><span class="comment"># use device</span></span><br><span class="line">$ docker run -it --rm --gpus \</span><br><span class="line">    device=GPU-3a23c669-1f69-c64e-cf85-44e9b07e7a2a \</span><br><span class="line">    ubuntu nvidia-smi</span><br><span class="line"></span><br><span class="line"><span class="comment"># specific gpu</span></span><br><span class="line">$ docker run -it --rm --gpus <span class="string">'"device=0,2"'</span> ubuntu nvidia-smi</span><br><span class="line"></span><br><span class="line"><span class="comment"># set nvidia capabilities</span></span><br><span class="line">$ docker run --gpus <span class="string">'all,capabilities=utility'</span> --rm ubuntu nvidia-smi</span><br></pre></td></tr></table></figure><ul><li>对应 <code>Compose</code> 工具的老版本(<code>v2.3</code>)配置文件来说的话，想要在部署的服务当中使用 <code>GPU</code> 显卡资源的话，就必须使用 <strong><code>runtime</code></strong> 参数来进行配置才可以。虽然可以作为运行时为容器提供 <code>GPU</code> 的访问和使用，但是在该模式下并不允许对 <code>GPU</code> 设备的特定属性进行控制。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nvidia/cuda:10.2-base</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">nvidia-smi</span></span><br><span class="line">    <span class="attr">runtime:</span> <span class="string">nvidia</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NVIDIA_VISIBLE_DEVICES=all</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>在 <code>Compose v1.28.0+</code> 的版本中，使用 <code>Compose Specification</code> 的配置文件写法，并提供了一些可以更细粒度的控制 <code>GPU</code> 资源的配置属性可被使用，因此可以在启动的时候来精确表达我们的需求。咳咳咳，那这里我们就一起看看吧！</strong></p></blockquote><ul><li><code>capabilities</code> - 必须字段<ul><li>指定需要支持的功能；可以配置多个不同功能；必须配置的字段</li><li><code>man 7 capabilities</code></li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">reservations:</span></span><br><span class="line">      <span class="attr">devices:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">capabilities:</span> <span class="string">["gpu"]</span></span><br></pre></td></tr></table></figure><ul><li><code>count</code><ul><li>指定需要使用的<code>GPU</code>数量；值为<code>int</code>类型；与<code>device_ids</code>字段二选一</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">reservations:</span></span><br><span class="line">      <span class="attr">devices:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">capabilities:</span> <span class="string">["tpu"]</span></span><br><span class="line">          <span class="attr">count:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li><code>device_ids</code><ul><li>指定使用<code>GPU</code>设备<code>ID</code>值；与<code>count</code>字段二选一</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">reservations:</span></span><br><span class="line">      <span class="attr">devices:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">capabilities:</span> <span class="string">["gpu"]</span></span><br><span class="line">          <span class="attr">device_ids:</span> <span class="string">["0",</span> <span class="string">"3"</span><span class="string">]</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">reservations:</span></span><br><span class="line">      <span class="attr">devices:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">capabilities:</span> <span class="string">["gpu"]</span></span><br><span class="line">          <span class="attr">device_ids:</span> <span class="string">["GPU-f123d1c9-26bb-df9b-1c23-4a731f61d8c7"]</span></span><br></pre></td></tr></table></figure><ul><li><code>driver</code><ul><li>指定<code>GPU</code>设备驱动类型</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">reservations:</span></span><br><span class="line">      <span class="attr">devices:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">capabilities:</span> <span class="string">["nvidia-compute"]</span></span><br><span class="line">          <span class="attr">driver:</span> <span class="string">nvidia</span></span><br></pre></td></tr></table></figure><ul><li><code>options</code><ul><li>指定驱动程序的特定选项</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">reservations:</span></span><br><span class="line">      <span class="attr">devices:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">capabilities:</span> <span class="string">["gpu"]</span></span><br><span class="line">          <span class="attr">driver:</span> <span class="string">gpuvendor</span></span><br><span class="line">          <span class="attr">options:</span></span><br><span class="line">            <span class="attr">virtualization:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>咳咳咳，看也看了，说也说了，那我们就简单的编写一个示例文件，让启动的 <code>cuda</code> 容器服务来使用一个 <code>GPU</code> 设备资源，并运行得到如下输出。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nvidia/cuda:10.2-base</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">nvidia-smi</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">5s</span></span><br><span class="line">        <span class="attr">max_attempts:</span> <span class="number">3</span></span><br><span class="line">        <span class="attr">window:</span> <span class="string">120s</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">"0.50"</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">50M</span></span><br><span class="line">        <span class="attr">reservations:</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">"0.25"</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">20M</span></span><br><span class="line">          <span class="attr">devices:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">driver:</span> <span class="string">nvidia</span></span><br><span class="line">              <span class="attr">count:</span> <span class="number">1</span></span><br><span class="line">              <span class="attr">capabilities:</span> <span class="string">[gpu,</span> <span class="string">utility]</span></span><br><span class="line">      <span class="attr">update_config:</span></span><br><span class="line">        <span class="attr">parallelism:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">10s</span></span><br><span class="line">        <span class="attr">order:</span> <span class="string">stop-first</span></span><br></pre></td></tr></table></figure><ul><li>注意这里，如果设置 <code>count: 2</code> 的话，就会下面的输出中看到两块显卡设置的信息。如果，我们这里均未设置 <code>count</code> 或 <code>device_ids</code> 字段的话，则默认情况下将主机上所有 <code>GPU</code> 一同使用。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前台直接运行</span></span><br><span class="line">$ docker-compose up</span><br><span class="line">Creating network <span class="string">"gpu_default"</span> with the default driver</span><br><span class="line">Creating gpu_test_1 ... <span class="keyword">done</span></span><br><span class="line">Attaching to gpu_test_1</span><br><span class="line">test_1  | +-----------------------------------------------------------------------------+</span><br><span class="line">test_1  | | NVIDIA-SMI 450.80.02    Driver Version: 450.80.02    CUDA Version: 11.1     |</span><br><span class="line">test_1  | |-------------------------------+----------------------+----------------------+</span><br><span class="line">test_1  | | GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">test_1  | | Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">test_1  | |                               |                      |               MIG M. |</span><br><span class="line">test_1  | |===============================+======================+======================|</span><br><span class="line">test_1  | |   0  Tesla T4            On   | 00000000:00:1E.0 Off |                    0 |</span><br><span class="line">test_1  | | N/A   23C    P8     9W /  70W |      0MiB / 15109MiB |      0%      Default |</span><br><span class="line">test_1  | |                               |                      |                  N/A |</span><br><span class="line">test_1  | +-------------------------------+----------------------+----------------------+</span><br><span class="line">test_1  |</span><br><span class="line">test_1  | +-----------------------------------------------------------------------------+</span><br><span class="line">test_1  | | Processes:                                                                  |</span><br><span class="line">test_1  | |  GPU   GI   CI        PID   Type   Process name                  GPU Memory |</span><br><span class="line">test_1  | |        ID   ID                                                   Usage      |</span><br><span class="line">test_1  | |=============================================================================|</span><br><span class="line">test_1  | |  No running processes found                                                 |</span><br><span class="line">test_1  | +-----------------------------------------------------------------------------+</span><br><span class="line">gpu_test_1 exited with code 0</span><br></pre></td></tr></table></figure><ul><li>当然，如果设置了 <code>count</code> 或 <code>device_ids</code> 字段的话，就可以在容器里面的程序中使用多块显卡资源了。可以通过以下部署配置文件来进行验证和使用。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tensorflow/tensorflow:latest-gpu</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">python</span> <span class="string">-c</span> <span class="string">"import tensorflow as tf;tf.test.gpu_device_name()"</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">reservations:</span></span><br><span class="line">          <span class="attr">devices:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">driver:</span> <span class="string">nvidia</span></span><br><span class="line">              <span class="attr">device_ids:</span> <span class="string">["0",</span> <span class="string">"3"</span><span class="string">]</span></span><br><span class="line">              <span class="attr">capabilities:</span> <span class="string">[gpu]</span></span><br></pre></td></tr></table></figure><ul><li>运行结果，如下所示，我们可以看到两块显卡均可以被使用到。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前台直接运行</span></span><br><span class="line">$ docker-compose up</span><br><span class="line">...</span><br><span class="line">Created TensorFlow device (/device:GPU:0 with 13970 MB memory -&gt; physical GPU (device: 0, name: Tesla T4, pci bus id: 0000:00:1b.0, compute capability: 7.5)</span><br><span class="line">...</span><br><span class="line">Created TensorFlow device (/device:GPU:1 with 13970 MB memory) -&gt; physical GPU (device: 1, name: Tesla T4, pci bus id: 0000:00:1e.0, compute capability: 7.5)</span><br><span class="line">...</span><br><span class="line">gpu_test_1 exited with code 0</span><br></pre></td></tr></table></figure><blockquote><p>本文转载自：「 Ecsape 的博客 」，原文：<a href="http://t.cn/A6c6d4l1" target="_blank" rel="noopener">http://t.cn/A6c6d4l1</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;div id=&quot;vip-container&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;在容器中使用 GPU 一直是使用 Compose 的一个痛点！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在面向 &lt;code&gt;AI&lt;/code&gt;
        
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.hi-linux.com/categories/docker/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>重磅 | AWS 免费开源增强版 Elasticsearch 分支 OpenSearch</title>
    <link href="https://www.hi-linux.com/posts/50892.html"/>
    <id>https://www.hi-linux.com/posts/50892.html</id>
    <published>2021-04-15T01:00:00.000Z</published>
    <updated>2021-04-15T01:36:05.433Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>今年 1 月，开发 Elasticsearch 和 Kibana 的公司 Elastic 宣布更改许可证，新版本将不再使用 Apache 2.0 许可证，而是使用 Elastic 许可证和服务器端公共许可证（SSPL），此举是为了禁止类似亚马逊等云服务商使用它的软件作为一种服务提供给客户。但同时，新的许可证不再符合开源许可证的定义，意味着 Elasticsearch 和 Kibana 不再是开源软件了。</p><p>然后，亚马逊宣布要创建它的 Elasticsearch 分支 OpenSearch 和 Kibana 分支 OpenSearch Dashboards。</p><p>近日 AWS 宣布创建 “真正” 开源的 Elasticsearch 分支有了下文。 OpenSearch 的源代码托管在 GitHub 上。亚马逊表示以后所有的更新将通过 OpenSearch 项目发布。包括红帽、SAP、Capital One 和 <a href="http://Logz.io" target="_blank" rel="noopener">Logz.io</a> 等在内的多个组织对 AWS 创建 OpenSearch 项目表示了支持。</p><blockquote><p>OpenSearch 项目由 OpenSearch (fork Elasticsearch 7.10.2) 和 OpenSearch Dashboards (fork Kibana 7.10.2) 组成，包括企业安全、告警、机器学习、SQL、索引状态管理等功能。OpenSearch 项目中的所有软件均采用了 Apache License 2.0 开源许可协议。</p></blockquote><p><strong>OpenSearch 项目仓库地址</strong></p><ol><li>OpenSearch</li></ol><p>项目地址：<a href="https://github.com/opensearch-project/OpenSearch" target="_blank" rel="noopener">https://github.com/opensearch-project/OpenSearch</a></p><ol start="2"><li>OpenSearch Dashboards</li></ol><p>项目地址：<a href="https://github.com/opensearch-project/OpenSearch-Dashboards" target="_blank" rel="noopener">https://github.com/opensearch-project/OpenSearch-Dashboards</a></p><p>AWS 介绍称，他们推出的 OpenSearch 删除了 Elasticsearch 中受 Elastic 商业许可证限制的功能、代码和商标，以兼容 Apache License 2.0，自称这是每个人都可以构建和创新的基础，任何人无需签署 CLA (Contributor License Agreement) 即可为项目贡献代码。</p><p>此外，AWS 现有的 Amazon Elasticsearch Service 被重命名为 Amazon OpenSearch Service，AWS 表示更名不会影响正在运营的业务，Amazon OpenSearch Service 会提供一系列可供部署和运行的开源引擎，包括当前可用的 19 个版本的 Elasticsearch（7.9 和更早版本、近期推出的 7.10）以及新版本的 OpenSearch。</p><p>AWS 还说到会继续通过安全性和错误修复来支持和维护采用 Apache License 2.0 的 Elasticsearch，并将通过 OpenSearch 和 OpenSearch Dashboards 提供所有新功能。Amazon OpenSearch Service API 将与现有服务 API 向后兼容。此外，AWS 会提供从现有 Elasticsearch 6.x 和 7.x 托管集群迁移至 OpenSearch 的无缝升级路径。</p><p>AWS 表示，当前版本的代码尚处于 Alpha 阶段，未经彻底测试并且不适合用于生产环境。他们计划在接下来的几周内发布 Beta 版本，有望在 2021 年中期发布稳定版并投入生产环境使用。</p><blockquote><p>本文转载自：「 开源中国 」，原文：<a href="http://t.cn/A6cxOsxg" target="_blank" rel="noopener">http://t.cn/A6cxOsxg</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;今年 1 月，开发 Elasticsearch 和 Kibana 的公司 Elastic 宣布更改许可证，新版本将不再使用 Apache 2.0 许可证，而是使用 Elastic
        
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="https://www.hi-linux.com/categories/Elasticsearch/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Elasticsearch" scheme="https://www.hi-linux.com/tags/Elasticsearch/"/>
    
      <category term="快迅" scheme="https://www.hi-linux.com/tags/%E5%BF%AB%E8%BF%85/"/>
    
  </entry>
  
  <entry>
    <title>全链路分布式跟踪系统 Apache SkyWalking 入门教程</title>
    <link href="https://www.hi-linux.com/posts/13634.html"/>
    <id>https://www.hi-linux.com/posts/13634.html</id>
    <published>2021-04-09T01:00:00.000Z</published>
    <updated>2021-04-09T03:40:18.073Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2><span id="先决条件">先决条件</span></h2><p>确保有一套运行正常的 Kubernetes 集群，本文默认为使用 Elasticsearch7 作为后端存储；**如果想把 ES 放到 Kubernetes 集群里那么还得确保集群配置了正确的存储，譬如默认的 StorageClass 可用等。**本文为了方便起见(其实就是穷)采用外部 ES 存储且使用 docker-compose 单节点部署，所以不需要集群的分布式存储；最后确保你本地的 <code>kubectl</code> 能够正常运行。</p><h2><span id="基本架构">基本架构</span></h2><p>Skywalking 在大体上(不准确)分为四大部分:</p><ul><li>oap-server: 无状态服务后端，主要负责处理核心逻辑，可以简单理解为一个标准 java web 项目。</li><li>skywalking-ui: UI 前端，通过 graphql 连接 oap-server 提供用户查询等 UI 展示。</li><li>agent: 各种语言实现的 agent 负责抓取应用运行数据并上报给 oap-server，核心的指标上报来源。</li><li>DB: 各种数据库，负责存储 Skywalking 的指标数据，生产环境推荐 ES、TiDB、MySQL。</li></ul><a id="more"></a><h2><span id="部署-skywalking">部署 Skywalking</span></h2><h3><span id="31-部署-elasticsearch">3.1、部署 Elasticsearch</span></h3><p>Elasticsearch 当前使用 7.9.2 版本，由于只是初次尝试还处于测试阶段所以直接 docker-compose 启动一个单点:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 如果有需要可以进入 es 容器使用以下命令设置密码</span><br><span class="line"># elasticsearch-setup-passwords interactive</span><br><span class="line">version: &#39;3.8&#39;</span><br><span class="line">services:</span><br><span class="line">  elasticsearch:</span><br><span class="line">    container_name: elasticsearch</span><br><span class="line">    image: docker.elastic.co&#x2F;elasticsearch&#x2F;elasticsearch:7.9.2</span><br><span class="line">    restart: always</span><br><span class="line">    network_mode: &quot;host&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - data:&#x2F;data&#x2F;elasticsearch</span><br><span class="line">    environment:</span><br><span class="line">      - http.host&#x3D;172.16.11.43</span><br><span class="line">      - http.port&#x3D;9200</span><br><span class="line">      - transport.tcp.port&#x3D;172.16.11.43</span><br><span class="line">      - transport.tcp.port&#x3D;9300</span><br><span class="line">      - cluster.name&#x3D;skyes</span><br><span class="line">      - node.name&#x3D;skyes</span><br><span class="line">      - discovery.type&#x3D;single-node</span><br><span class="line">      - xpack.security.enabled&#x3D;true</span><br><span class="line">      - xpack.monitoring.enabled&#x3D;true</span><br><span class="line">      - &quot;ES_JAVA_OPTS&#x3D;-Xms4096m -Xmx7168m&quot;</span><br><span class="line">volumes:</span><br><span class="line">  data:</span><br></pre></td></tr></table></figure><h3><span id="32-安装-helm">3.2、安装 Helm</span></h3><p>由于 Skywalking 官方给出的 Kubernetes 安装方式为 Helm 安装，所以需要本地先安装 Helm；Helm 安装方式非常简单，根据官方文档<strong>在网络没问题的情况下</strong>直接执行以下命令即可:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;helm&#x2F;helm&#x2F;master&#x2F;scripts&#x2F;get-helm-3 | bash</span><br></pre></td></tr></table></figure><p>如果网络不是那么 OK 的情况下请参考<a href="https://helm.sh/docs/intro/install/" target="_blank" rel="noopener">官方文档</a>的包管理器方式安装或直接下载二进制文件安装。</p><h3><span id="33-克隆仓库初始化-helm">3.3、克隆仓库初始化 Helm</span></h3><p>Helm 部署之前按照<a href="https://github.com/apache/skywalking-kubernetes" target="_blank" rel="noopener">官方文档</a>提示需要先初始化 Helm 仓库:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># clone helm 仓库</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;skywalking-kubernetes</span><br><span class="line">cd skywalking-kubernetes&#x2F;chart</span><br><span class="line"></span><br><span class="line"># 即使使用外部 ES 也要添加这个 repo，否则会导致依赖错误</span><br><span class="line">helm repo add elastic https:&#x2F;&#x2F;helm.elastic.co</span><br><span class="line">helm dep up skywalking</span><br><span class="line"></span><br><span class="line"># change the release name according to your scenario</span><br><span class="line">export SKYWALKING_RELEASE_NAME&#x3D;skywalking</span><br><span class="line"># 如果修改了 NAMESPACE，后续部署则需要先通过 kuebctl 创建该 NAMESPACE</span><br><span class="line"># change the namespace according to your scenario</span><br><span class="line">export SKYWALKING_RELEASE_NAMESPACE&#x3D;default</span><br></pre></td></tr></table></figure><h3><span id="34-安装-skywalking">3.4、安装 Skywalking</span></h3><p>Helm 初始化完成后需要自行调整配置文件，配置 oap-server 使用外部 ES</p><p><strong>values-my-es.yaml</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">oap:</span><br><span class="line">  image:</span><br><span class="line">    tag: 8.1.0-es7      # Set the right tag according to the existing Elasticsearch version</span><br><span class="line">  storageType: elasticsearch7</span><br><span class="line"></span><br><span class="line">ui:</span><br><span class="line">  image:</span><br><span class="line">    tag: 8.1.0</span><br><span class="line"></span><br><span class="line">elasticsearch:</span><br><span class="line">  enabled: false</span><br><span class="line">  config:               # For users of an existing elasticsearch cluster,takes effect when &#96;elasticsearch.enabled&#96; is false</span><br><span class="line">    host: 172.16.11.43</span><br><span class="line">    port:</span><br><span class="line">      http: 9200</span><br><span class="line">    user: &quot;elastic&quot;</span><br><span class="line">    password: &quot;elastic&quot;</span><br></pre></td></tr></table></figure><p>调整好配置后只需要使用 Helm 安装即可:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helm install &quot;$&#123;SKYWALKING_RELEASE_NAME&#125;&quot; skywalking -n &quot;$&#123;SKYWALKING_RELEASE_NAMESPACE&#125;&quot; \</span><br><span class="line">  -f .&#x2F;skywalking&#x2F;values-my-es.yaml --set oap.image.tag&#x3D;8.2.0-es7 --set ui.image.tag&#x3D;8.2.0</span><br></pre></td></tr></table></figure><p>如果安装出错或者其他问题可以使用以下命令进行卸载:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm uninstall &quot;$&#123;SKYWALKING_RELEASE_NAME&#125;&quot; skywalking -n &quot;$&#123;SKYWALKING_RELEASE_NAMESPACE&#125;&quot;</span><br></pre></td></tr></table></figure><p>安装成功后应该在 <code>${SKYWALKING_RELEASE_NAMESPACE}</code> 下看到相关 Pod:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">k8s21 ➜  ~ kubectl get pod -o wide -n skywalking</span><br><span class="line">NAME                              READY   STATUS      RESTARTS   AGE   IP             NODE    NOMINATED NODE   READINESS GATES</span><br><span class="line">skywalking-es-init-xw6tx          0&#x2F;1     Completed   0          32h   10.30.0.62     k8s21   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">skywalking-oap-64c65cc6bb-lnq82   1&#x2F;1     Running     0          32h   10.30.0.61     k8s21   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">skywalking-oap-64c65cc6bb-q7zj8   1&#x2F;1     Running     0          32h   10.30.32.103   k8s22   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">skywalking-ui-695ff9d69d-wqcm8    1&#x2F;1     Running     0          32h   10.30.161.42   k8s25   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p>在确认 Pod 都运行正常后可以通过 <code>kubectl port-forward</code> 命令来查看 UI 界面:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 执行以下命令，访问 127.0.0.1:8080 即可访问到 skywalking-ui</span><br><span class="line">kubectl port-forward -n $&#123;SKYWALKING_RELEASE_NAMESPACE&#125; service&#x2F;skywalking-ui 8080:80</span><br></pre></td></tr></table></figure><p><strong>在生产环境可能需要配置正确的 Ingress 或者 NodePort 等方式暴露 skywalking-ui 服务，具体取决于生产集群服务暴露方式，请自行调整。</strong></p><h2><span id="agent-配置">Agent 配置</span></h2><blockquote><p>由于目前仅在 Java 项目上测试，所以以下 Agent 配置仅仅对 Java 项目有效。</p></blockquote><p>Skywalking 在简单使用时不需要侵入代码，对于 jar 包启动的项目只需要在启动时增加 <code>-javaagent</code> 选项即可。</p><h3><span id="41-agent-获取">4.1、Agent 获取</span></h3><p><code>javaagent</code> 可以通过下载对应的 skywalking release 安装包获取，将此 <code>agent</code> 目录解压到任意位置，稍后将添加到 java 启动参数。</p><p><a href="https://cdn.oss.link/markdown/y1q3k.png" target="_blank" rel="noopener"><img src="https://img.hi-linux.com/staticfile/y1q3k-2021-01-10-frobUo.png" alt="agent_dir"></a></p><p><a href="https://cdn.oss.link/markdown/y1q3k.png" target="_blank" rel="noopener">agent_dir</a></p><h3><span id="42-agent-配置">4.2、Agent 配置</span></h3><p>Agent 主配置文件存放在 <code>config/agent.config</code> 配置文件中，配置文件内支持环境变量读取，可以自行添加其他配置和引用其他变量；通常这个配置文件在容器化时有两种选择，**一种是创建 ConfigMap，然后通过 ConfigMap 挂载到容器里进行覆盖；另一种是在默认配置里引用各种变量，在容器启动时通过环境变量注入。**这里暂时使用环境变量注入的方式:</p><p><strong>agent.config</strong></p><p><a href="https://cdn.oss.link/markdown/4t67x.png" target="_blank" rel="noopener"><img src="https://img.hi-linux.com/staticfile/4t67x-2021-01-10-3Y4bcU.png" alt="agent.config"></a></p><p><a href="https://cdn.oss.link/markdown/4t67x.png" target="_blank" rel="noopener">agent.config</a></p><p><strong>deployment.yml</strong></p><p><a href="https://cdn.oss.link/markdown/q0uw7.png" target="_blank" rel="noopener"><img src="https://img.hi-linux.com/staticfile/q0uw7-2021-01-10-o1GxOG.png" alt="deployment.yml"></a></p><p><a href="https://cdn.oss.link/markdown/q0uw7.png" target="_blank" rel="noopener">deployment.yml</a></p><p>调整完成后，应用运行一段时间后应该能在 UI 中看到数据</p><p><a href="https://cdn.oss.link/markdown/86vmo.png" target="_blank" rel="noopener"><img src="https://img.hi-linux.com/staticfile/86vmo-2021-01-10-2BmbMj.png" alt="skwalking-ui"></a></p><p><a href="https://cdn.oss.link/markdown/86vmo.png" target="_blank" rel="noopener">skwalking-ui</a></p><h2><span id="注意事项">注意事项</span></h2><ul><li><strong>默认情况下 Helm 相关命令执行缓慢，可能需要设置 <code>http(s)_proxy</code> <code>...( ＿ ＿)ノ｜壁</code>(自行体会这个表情)</strong></li><li><strong>Skywalking 镜像一般比较大，下载缓慢，推荐预先拉取好然后 load 到每个节点</strong></li><li><strong>ES 如果设置了密码，不要忘记在 Helm 安装时调整好密码配置</strong></li><li><strong>jar 包启动时 <code>-javaagent</code> 不能放在 <code>-jar</code> 选项之后，否则可能不生效</strong></li><li><strong>集群内连接 oap-server 推荐通过 <code>skywalking-oap.skywalking.svc.cluster.local</code> 域名服务发现方式寻址</strong></li></ul><blockquote><p>本文转载自：「 Bleem 」，原文：<a href="https://tinyurl.com/y4uwbmmb" target="_blank" rel="noopener">https://tinyurl.com/y4uwbmmb</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;先决条件&quot;&gt;先决条件&lt;/h2&gt;
&lt;p&gt;确保有一套运行正常的 Kubernetes 集群，本文默认为使用 Elasticsearch7 作为后端存储；**如果想把 ES 放到 Kubernetes 集群里那么还得确保集群配置了正确的存储，譬如默认的 StorageClass 可用等。**本文为了方便起见(其实就是穷)采用外部 ES 存储且使用 docker-compose 单节点部署，所以不需要集群的分布式存储；最后确保你本地的 &lt;code&gt;kubectl&lt;/code&gt; 能够正常运行。&lt;/p&gt;
&lt;h2 id=&quot;基本架构&quot;&gt;基本架构&lt;/h2&gt;
&lt;p&gt;Skywalking 在大体上(不准确)分为四大部分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;oap-server: 无状态服务后端，主要负责处理核心逻辑，可以简单理解为一个标准 java web 项目。&lt;/li&gt;
&lt;li&gt;skywalking-ui: UI 前端，通过 graphql 连接 oap-server 提供用户查询等 UI 展示。&lt;/li&gt;
&lt;li&gt;agent: 各种语言实现的 agent 负责抓取应用运行数据并上报给 oap-server，核心的指标上报来源。&lt;/li&gt;
&lt;li&gt;DB: 各种数据库，负责存储 Skywalking 的指标数据，生产环境推荐 ES、TiDB、MySQL。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="SkyWalking" scheme="https://www.hi-linux.com/categories/SkyWalking/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="SkyWalking" scheme="https://www.hi-linux.com/tags/SkyWalking/"/>
    
  </entry>
  
  <entry>
    <title>Linux 下自动化工具 Parallel SSH 中文使用指南</title>
    <link href="https://www.hi-linux.com/posts/53648.html"/>
    <id>https://www.hi-linux.com/posts/53648.html</id>
    <published>2021-03-31T01:00:00.000Z</published>
    <updated>2021-03-31T04:42:44.961Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><blockquote><p><strong>parallel-ssh 是为小规模自动化而设计的异步并行的 SSH 库!</strong></p></blockquote><p><strong><code>parallel-ssh</code></strong> 是为小规模自动化而设计的异步并行的 <code>SSH</code> 库，包括 <code>pssh</code>、<code>pscp</code>、<code>prsync</code>、<code>pslurp</code> 和 <code>pnuke</code>工具，其源代码使用 <code>Python</code>语言编写开发的。该项目最初位于<code>Google Code</code>上，是由<code>Brent N.Chun</code>编写和维护的，但是由于工作繁忙，<code>Brent</code>于<code>2009</code>年<code>10</code>月将维护工作移交给了<code>Andrew McNabb</code>管理。到了 <code>2012</code>年的时候，由于<code>Google Code</code>的已关闭，该项目一度被废弃，现在也只能在 <code>Google Code</code> 的归档中找到当时的版本了。</p><p>但是需要注意的是，之前的版本是不支持 <code>Python3</code> 的，但是 <code>Github</code> 上面有人 <code>Fork</code> 了一份，自己进行了改造使其支持 <code>Python3</code> 以上的版本了。与此同时，还有一个组织专门针对 <code>parallel-ssh</code> 进行了开发和维护，今天看了下很久都没有更新了。有需要的，自己可以自行查阅。</p><ul><li><p><a href="https://github.com/lilydjwg/pssh" target="_blank" rel="noopener">lilydjwg/pssh - supported on Python 3.5 and later</a></p></li><li><p><a href="https://github.com/ParallelSSH/parallel-ssh" target="_blank" rel="noopener">ParallelSSH/parallel-ssh - asynchronous parallel SSH client library</a></p></li><li><p>可扩展性</p><ul><li>支持扩展到百台，甚至上千台主机使用</li></ul></li><li><p>易于使用</p><ul><li>只需两行代码，即可在任意数量的主机上运行命令</li></ul></li><li><p>执行高效</p><ul><li>号称是最快的 <code>Python SSH</code> 库可用</li></ul></li><li><p>资源使用</p><ul><li>相比于其他 <code>Python SSH</code> 库，其消耗资源最少</li></ul></li></ul><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mac系统安装</span></span><br><span class="line">$ brew install pssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS系统安装</span></span><br><span class="line">$ yum install pssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu系统安装</span></span><br><span class="line">$ apt install pssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># PIP安装</span></span><br><span class="line">$ pip insall pssh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 源代码编译安装(2.3.1)</span></span><br><span class="line"><span class="comment"># 官方地址: https://code.google.com/archive/p/parallel-ssh/source/default/source</span></span><br><span class="line">$ tar zxvf pssh-2.3.1.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> pssh-2.3.1</span><br><span class="line">$ python setup.py install</span><br></pre></td></tr></table></figure><p><img src="https://img.hi-linux.com/staticfile/learn-pssh-command-1-2021-01-27-TVMY3S.png" alt="ParallelSSH在Google上面的版本"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 工具对应的子命令子命令</span></span><br><span class="line">$ ls -lh /usr/<span class="built_in">local</span>/Cellar/pssh/2.3.1_1/bin/</span><br><span class="line">pnuke -&gt; ../libexec/bin/pnuke</span><br><span class="line">prsync -&gt; ../libexec/bin/prsync</span><br><span class="line">pscp -&gt; ../libexec/bin/pscp</span><br><span class="line">pslurp -&gt; ../libexec/bin/pslurp</span><br><span class="line">pssh -&gt; ../libexec/bin/pssh</span><br><span class="line">pssh-askpass -&gt; ../libexec/bin/pssh-askpass</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">编号</th><th style="text-align:left">子命令</th><th style="text-align:left">对应功能解释</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><strong><code>pssh</code></strong></td><td style="text-align:left">通过 ssh 协议在多台主机上并行地运行命令</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><strong><code>pscp</code></strong></td><td style="text-align:left">通过 ssh 协议把文件并行地复制到多台主机上</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><strong><code>rsync</code></strong></td><td style="text-align:left">通过 rsync 协议把文件高效地并行复制到多台主机上</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><strong><code>slurp</code></strong></td><td style="text-align:left">通过 ssh 协议把文件并行地从多个远程主机复制到中心主机上</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><strong><code>pnuke</code></strong></td><td style="text-align:left">通过 ssh 协议并行地在多个远程主机上杀死进程</td></tr></tbody></table><h2><span id="1-pssh">1. pssh</span></h2><blockquote><p><strong>通过 ssh 协议在多台主机上并行地运行命令</strong></p></blockquote><ul><li><strong>命令参数使用</strong></li></ul><table><thead><tr><th style="text-align:left">编号</th><th style="text-align:left">参数选项</th><th style="text-align:left">对应参数解释</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><code>-h HOST_FILE</code></td><td style="text-align:left">指定主机文件列表文件；内容格式为”[user@]host[:port]”</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><code>-H HOST_STRING</code></td><td style="text-align:left">指定主机字符串地址；内容格式为”[user@]host[:port]”</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><code>-l USER</code></td><td style="text-align:left">指定登录使用的用户名</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><code>-p PAR</code></td><td style="text-align:left">设置并发的线程数(可选)</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><code>-o OUTDIR</code></td><td style="text-align:left">标准正常输出的文件目录(可选)</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><code>-e ERRDIR</code></td><td style="text-align:left">标准错误输出的文件目录(可选)</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left"><code>-t TIMEOUT</code></td><td style="text-align:left">超时时间设置，其中 0 表示无限制(可选)</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left"><code>-O OPTION</code></td><td style="text-align:left">设置 SSH 的选项</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left"><code>-x ARGS</code></td><td style="text-align:left">额外的命令行参数使用空白符号、引号、反斜线处理</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left"><code>-X ARG</code></td><td style="text-align:left">额外的命令行参数，单个参数模式，同-x 参数</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left"><code>-A</code></td><td style="text-align:left">手动输入密码模式</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left"><code>-i</code></td><td style="text-align:left">每个服务器内部处理信息输出</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left"><code>-P</code></td><td style="text-align:left">打印出服务器返回信息</td></tr><tr><td style="text-align:left">14</td><td style="text-align:left"><code>--help</code></td><td style="text-align:left">查看帮助，即此信息</td></tr><tr><td style="text-align:left">15</td><td style="text-align:left"><code>--version</code></td><td style="text-align:left">显示程序版本号</td></tr></tbody></table><ul><li><strong>适用范例</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Usage: pssh [OPTIONS] command [...]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在两个主机上运行命令并在每个服务器上打印其输出</span></span><br><span class="line">$ pssh -i -H <span class="string">"host1 host2"</span> hostname -i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行命令并将输出保存到单独的文件中</span></span><br><span class="line">$ pssh -H host1 -H host2 -o path/to/output_dir hostname -i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在多个主机上运行命令并在新行分隔的文件中指定</span></span><br><span class="line">$ pssh -i -h path/to/hosts_file hostname -i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以root运行命令(要求输入root用户密码)</span></span><br><span class="line">$ pssh -i -h path/to/hosts_file -A -l root_username hostname -i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行带有额外SSH参数的命令</span></span><br><span class="line">$ pssh -i -h path/to/hosts_file -x <span class="string">"-O VisualHostKey=yes"</span> hostname -i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行并行连接数量限制为10的命令</span></span><br><span class="line">$ pssh -i -h path/to/hosts_file -p 10 <span class="string">'cd dir; ./script.sh; exit'</span></span><br></pre></td></tr></table></figure><h2><span id="2-pscp">2. pscp</span></h2><blockquote><p><strong>通过 ssh 协议把文件并行地复制到多台主机上</strong></p></blockquote><ul><li><strong>命令参数使用</strong></li></ul><table><thead><tr><th style="text-align:left">编号</th><th style="text-align:left">参数选项</th><th style="text-align:left">对应参数解释</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><code>-h HOST_FILE</code></td><td style="text-align:left">指定主机文件列表文件；内容格式为”[user@]host[:port]”</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><code>-H HOST_STRING</code></td><td style="text-align:left">指定主机字符串地址；内容格式为”[user@]host[:port]”</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><code>-l USER</code></td><td style="text-align:left">指定登录使用的用户名</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><code>-p PAR</code></td><td style="text-align:left">设置并发的线程数(可选)</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><code>-o OUTDIR</code></td><td style="text-align:left">标准正常输出的文件目录(可选)</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><code>-e ERRDIR</code></td><td style="text-align:left">标准错误输出的文件目录(可选)</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left"><code>-t TIMEOUT</code></td><td style="text-align:left">超时时间设置，其中 0 表示无限制(可选)</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left"><code>-O OPTION</code></td><td style="text-align:left">设置 SSH 的选项</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left"><code>-x ARGS</code></td><td style="text-align:left">额外的命令行参数使用空白符号、引号、反斜线处理</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left"><code>-X ARG</code></td><td style="text-align:left">额外的命令行参数，单个参数模式，同-x 参数</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left"><code>-A</code></td><td style="text-align:left">手动输入密码模式</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left"><code>-r</code></td><td style="text-align:left">用于递归的复制目录(可选)</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left"><code>--help</code></td><td style="text-align:left">查看帮助，即此信息</td></tr><tr><td style="text-align:left">14</td><td style="text-align:left"><code>--version</code></td><td style="text-align:left">显示程序版本号</td></tr></tbody></table><ul><li><strong>适用范例</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Usage: pscp [OPTIONS] local remote</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地文件复制到远程机器上</span></span><br><span class="line">$ pscp -h hosts.txt -l root foo.txt /home/irb2/foo.txt</span><br><span class="line">[1] 23:00:08 [SUCCESS] 172.18.10.25</span><br><span class="line">[2] 09:52:28 [SUCCESS] 172.18.10.24</span><br></pre></td></tr></table></figure><h2><span id="3-prsync">3. prsync</span></h2><blockquote><p><strong>通过 rsync 协议把文件高效地并行复制到多台主机上</strong></p></blockquote><ul><li><strong>命令参数使用</strong></li></ul><table><thead><tr><th style="text-align:left">编号</th><th style="text-align:left">参数选项</th><th style="text-align:left">对应参数解释</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><code>-h HOST_FILE</code></td><td style="text-align:left">指定主机文件列表文件；内容格式为”[user@]host[:port]”</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><code>-H HOST_STRING</code></td><td style="text-align:left">指定主机字符串地址；内容格式为”[user@]host[:port]”</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><code>-l USER</code></td><td style="text-align:left">指定登录使用的用户名</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><code>-p PAR</code></td><td style="text-align:left">设置并发的线程数(可选)</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><code>-o OUTDIR</code></td><td style="text-align:left">标准正常输出的文件目录(可选)</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><code>-e ERRDIR</code></td><td style="text-align:left">标准错误输出的文件目录(可选)</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left"><code>-t TIMEOUT</code></td><td style="text-align:left">超时时间设置，其中 0 表示无限制(可选)</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left"><code>-O OPTION</code></td><td style="text-align:left">设置 SSH 的选项</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left"><code>-x ARGS</code></td><td style="text-align:left">额外的命令行参数使用空白符号、引号、反斜线处理</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left"><code>-X ARG</code></td><td style="text-align:left">额外的命令行参数，单个参数模式，同-x 参数</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left"><code>-A</code></td><td style="text-align:left">手动输入密码模式</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left"><code>-r</code></td><td style="text-align:left">用于递归的复制目录(可选)</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left"><code>-a</code></td><td style="text-align:left">使用 rsync 的归档模式(可选)</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left"><code>-z</code></td><td style="text-align:left">使用 rsync 的压缩方式(可选</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left"><code>-S ARGS</code></td><td style="text-align:left">设置 ssh 协议的扩展参数(可选)</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left"><code>--help</code></td><td style="text-align:left">查看帮助，即此信息</td></tr><tr><td style="text-align:left">14</td><td style="text-align:left"><code>--version</code></td><td style="text-align:left">显示程序版本号</td></tr></tbody></table><ul><li><strong>适用范例</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Usage: prsync [OPTIONS] local remote</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用rsync协议进行本地文件复制操作</span></span><br><span class="line">$ prsync -r -h hosts.txt -l root foo /home/irb2/foo</span><br></pre></td></tr></table></figure><h2><span id="4-pslurp">4. pslurp</span></h2><blockquote><p><strong>通过 ssh 协议把文件并行地从多个远程主机复制到中心主机上</strong></p></blockquote><ul><li><strong>命令参数使用</strong></li></ul><table><thead><tr><th style="text-align:left">编号</th><th style="text-align:left">参数选项</th><th style="text-align:left">对应参数解释</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><code>-h HOST_FILE</code></td><td style="text-align:left">指定主机文件列表文件；内容格式为”[user@]host[:port]”</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><code>-H HOST_STRING</code></td><td style="text-align:left">指定主机字符串地址；内容格式为”[user@]host[:port]”</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><code>-l USER</code></td><td style="text-align:left">指定登录使用的用户名</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><code>-p PAR</code></td><td style="text-align:left">设置并发的线程数(可选)</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><code>-o OUTDIR</code></td><td style="text-align:left">标准正常输出的文件目录(可选)</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><code>-e ERRDIR</code></td><td style="text-align:left">标准错误输出的文件目录(可选)</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left"><code>-t TIMEOUT</code></td><td style="text-align:left">超时时间设置，其中 0 表示无限制(可选)</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left"><code>-O OPTION</code></td><td style="text-align:left">设置 SSH 的选项</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left"><code>-x ARGS</code></td><td style="text-align:left">额外的命令行参数使用空白符号、引号、反斜线处理</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left"><code>-X ARG</code></td><td style="text-align:left">额外的命令行参数，单个参数模式，同-x 参数</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left"><code>-A</code></td><td style="text-align:left">手动输入密码模式</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left"><code>-r</code></td><td style="text-align:left">用于递归的复制目录(可选)</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left"><code>-L LOCALDIR</code></td><td style="text-align:left">指定本地存放文件的目录</td></tr><tr><td style="text-align:left">14</td><td style="text-align:left"><code>--help</code></td><td style="text-align:left">查看帮助，即此信息</td></tr><tr><td style="text-align:left">15</td><td style="text-align:left"><code>--version</code></td><td style="text-align:left">显示程序版本号</td></tr></tbody></table><ul><li><strong>适用范例</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Usage: pslurp [OPTIONS] remote local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将远程主机上面的文件复制到本地</span></span><br><span class="line">$ pslurp -h hosts.txt -l root -L /tmp/outdir /home/irb2/foo.txt foo.txt</span><br></pre></td></tr></table></figure><h2><span id="5-pnuke">5. pnuke</span></h2><blockquote><p><strong>通过 ssh 协议并行地在多个远程主机上杀死进程</strong></p></blockquote><ul><li><strong>命令参数使用</strong></li></ul><table><thead><tr><th style="text-align:left">编号</th><th style="text-align:left">参数选项</th><th style="text-align:left">对应参数解释</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><code>-h HOST_FILE</code></td><td style="text-align:left">指定主机文件列表文件；内容格式为”[user@]host[:port]”</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><code>-H HOST_STRING</code></td><td style="text-align:left">指定主机字符串地址；内容格式为”[user@]host[:port]”</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><code>-l USER</code></td><td style="text-align:left">指定登录使用的用户名</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><code>-p PAR</code></td><td style="text-align:left">设置并发的线程数(可选)</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><code>-o OUTDIR</code></td><td style="text-align:left">标准正常输出的文件目录(可选)</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><code>-e ERRDIR</code></td><td style="text-align:left">标准错误输出的文件目录(可选)</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left"><code>-t TIMEOUT</code></td><td style="text-align:left">超时时间设置，其中 0 表示无限制(可选)</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left"><code>-O OPTION</code></td><td style="text-align:left">设置 SSH 的选项</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left"><code>-x ARGS</code></td><td style="text-align:left">额外的命令行参数使用空白符号、引号、反斜线处理</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left"><code>-X ARG</code></td><td style="text-align:left">额外的命令行参数，单个参数模式，同-x 参数</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left"><code>-A</code></td><td style="text-align:left">手动输入密码模式</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left"><code>--help</code></td><td style="text-align:left">查看帮助，即此信息</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left"><code>--version</code></td><td style="text-align:left">显示程序版本号</td></tr></tbody></table><ul><li><strong>适用范例</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Usage: pnuke [OPTIONS] pattern</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结束远程主机上面的进程任务</span></span><br><span class="line">$ pnuke -h hosts.txt -l root java</span><br></pre></td></tr></table></figure><blockquote><p>本文转载自：「 Escape 的博客 」，原文：<a href="https://tinyurl.com/y2zucscu%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/y2zucscu，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;parallel-ssh 是为小规模自动化而设计的异步并行的 SSH 库!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;parallel-ssh&lt;/code&gt;&lt;/strong&gt; 是为小规模自动化而设计的异步并行的 &lt;code&gt;SSH&lt;/code&gt; 库，包括 &lt;code&gt;pssh&lt;/code&gt;、&lt;code&gt;pscp&lt;/code&gt;、&lt;code&gt;prsync&lt;/code&gt;、&lt;code&gt;pslurp&lt;/code&gt; 和 &lt;code&gt;pnuke&lt;/code&gt;工具，其源代码使用 &lt;code&gt;Python&lt;/code&gt;语言编写开发的。该项目最初位于&lt;code&gt;Google Code&lt;/code&gt;上，是由&lt;code&gt;Brent N.Chun&lt;/code&gt;编写和维护的，但是由于工作繁忙，&lt;code&gt;Brent&lt;/code&gt;于&lt;code&gt;2009&lt;/code&gt;年&lt;code&gt;10&lt;/code&gt;月将维护工作移交给了&lt;code&gt;Andrew McNabb&lt;/code&gt;管理。到了 &lt;code&gt;2012&lt;/code&gt;年的时候，由于&lt;code&gt;Google Code&lt;/code&gt;的已关闭，该项目一度被废弃，现在也只能在 &lt;code&gt;Google Code&lt;/code&gt; 的归档中找到当时的版本了。&lt;/p&gt;
&lt;p&gt;但是需要注意的是，之前的版本是不支持 &lt;code&gt;Python3&lt;/code&gt; 的，但是 &lt;code&gt;Github&lt;/code&gt; 上面有人 &lt;code&gt;Fork&lt;/code&gt; 了一份，自己进行了改造使其支持 &lt;code&gt;Python3&lt;/code&gt; 以上的版本了。与此同时，还有一个组织专门针对 &lt;code&gt;parallel-ssh&lt;/code&gt; 进行了开发和维护，今天看了下很久都没有更新了。有需要的，自己可以自行查阅。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/lilydjwg/pssh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;lilydjwg/pssh - supported on Python 3.5 and later&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ParallelSSH/parallel-ssh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ParallelSSH/parallel-ssh - asynchronous parallel SSH client library&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可扩展性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持扩展到百台，甚至上千台主机使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;易于使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只需两行代码，即可在任意数量的主机上运行命令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行高效&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;号称是最快的 &lt;code&gt;Python SSH&lt;/code&gt; 库可用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资源使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相比于其他 &lt;code&gt;Python SSH&lt;/code&gt; 库，其消耗资源最少&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="SSH" scheme="https://www.hi-linux.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>超实用的容器镜像漏洞检测工具 Trivy 入门指南</title>
    <link href="https://www.hi-linux.com/posts/17574.html"/>
    <id>https://www.hi-linux.com/posts/17574.html</id>
    <published>2021-03-29T01:00:00.000Z</published>
    <updated>2021-03-29T01:34:20.681Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2><span id="trivy-的特征">Trivy 的特征</span></h2><p>Trivy 是一种适用于 CI 的简单而全面的容器漏洞扫描程序。软件漏洞是指软件或操作系统中存在的故障、缺陷或弱点。Trivy 检测操作系统包（Alpine、RHEL、CentOS等）和应用程序依赖（Bundler、Composer、npm、yarn等）的漏洞。</p><p>Trivy 很容易使用，只要安装二进制文件，就可以扫描了。扫描只需指定容器的镜像名称。与其他镜像扫描工具相比，例如 Clair，Anchore Engine，Quay 相比，Trivy 在准确性、方便性和对 CI 的支持等方面都有着明显的优势。</p><p>推荐在 CI 中使用它，在推送到 Container Registry 之前，您可以轻松地扫描本地容器镜像，Trivy具备如下的特征：</p><ol><li><p>检测面很全，能检测全面的漏洞，操作系统软件包（Alpine、Red Hat Universal Base Image、Red Hat Enterprise Linux、CentOS、Oracle Linux、Debian、Ubuntu、Amazon Linux、openSUSE Leap、SUSE Enterprise Linux、Photon OS 和 Distrioless）、应用程序依赖项（Bundler、Composer、Pipenv、Poetry、npm、yarn 和 Cargo）；</p></li><li><p>使用简单，仅仅只需要指定镜像名称；</p></li><li><p>扫描快且无状态，第一次扫描将在 10 秒内完成（取决于您的网络）。随后的扫描将在一秒钟内完成。与其他扫描器在第一次运行时需要很长时间（大约10分钟）来获取漏洞信息，并鼓励您维护持久的漏洞数据库不同，Trivy 是无状态的，不需要维护或准备；</p></li><li><p>易于安装，安装方式：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install trivy</span><br><span class="line">$ yum install trivy</span><br><span class="line">$ brew install trivy</span><br></pre></td></tr></table></figure><p>无需安装数据库、库等先决条件（例外情况是需要安装 rpm 以扫描基于 RHEL/CentOS 的图像）。</p><a id="more"></a><h2><span id="trivy-的安装">Trivy 的安装</span></h2><p>这里安装 Trivy 的环境是 Centos7，安装的版本是 0.16.0，安装的命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;github.com&#x2F;aquasecurity&#x2F;trivy&#x2F;releases&#x2F;download&#x2F;v0.16.0&#x2F;trivy_0.16.0_Linux-64bit.rpm</span><br><span class="line"></span><br><span class="line">$ rpm -ivh trivy_0.16.0_Linux-64bit.rpm</span><br><span class="line">准备中...                          ################################# [100%]</span><br><span class="line">正在升级&#x2F;安装...</span><br><span class="line">   1:trivy-0:0.16.0-1                 ################################# [100%]</span><br><span class="line"></span><br><span class="line">$ trivy -v</span><br><span class="line">Version: 0.16.0</span><br></pre></td></tr></table></figure><h2><span id="trivy-的简单使用">Trivy 的简单使用</span></h2><p>下面介绍一些 Trivy 的简单使用的命令和一些测试的结果。主要从几个方面来测试 Trivy 的性能指标：</p><ul><li>镜像大小对 Trivy 扫描速度的影响；</li><li>扫描的镜像大小和网络流量使用情况的关系；</li><li>扫描的结果是否容易解析；</li></ul><h3><span id="镜像大小对-trivy-扫描速度的影响">镜像大小对 Trivy 扫描速度的影响</span></h3><ul><li>当镜像位于本地，大小 90MB 左右时候的扫描：</li></ul><p>执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trivy registry.cn-hangzhou.aliyuncs.com&#x2F;choerodon-tools&#x2F;javabase:0.5.0</span><br></pre></td></tr></table></figure><p>扫描结果：</p><p><img src="https://img.hi-linux.com/staticfile/trivy-2-2021-03-23-8gwNk2.png" alt></p><p>时间：第一次扫描会 DownLoad DB,大概花十分钟以内（14M，看网速），国外的主机 10s 以内，第二次扫描十秒钟以内完成。</p><ul><li>当镜像位于本地，大小 408MB 左右时候的扫描：</li></ul><p>执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trivy registry.cn-hangzhou.aliyuncs.com&#x2F;choerodon-tools&#x2F;mysql:5.7.17</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://img.hi-linux.com/staticfile/trivy-3-20210323150158269-2021-03-23-N7fY0h.png" alt></p><p>时间：10秒左右。</p><ul><li>当扫描的镜像位于线上，大小为 316M 左右时候的扫描：</li></ul><p>执行结果：</p><p><img src="https://img.hi-linux.com/staticfile/trivy-4-2021-03-23-TPlNlA.png" alt></p><p>时间：20s左右</p><p>结论：本地扫描镜像的大小对扫描速度影响不大，线上扫描与本地扫描的方式对扫描的速度影响大不。</p><h3><span id="扫描的镜像大小和网络流量使用情况的关系">扫描的镜像大小和网络流量使用情况的关系</span></h3><ul><li>线上扫描之前网络流量使用情况：</li></ul><p><img src="https://img.hi-linux.com/staticfile/trivy-5-2021-03-23-kChKZU.png" alt></p><p>扫描镜像大小：316M 左右</p><ul><li>扫描之后服务器的磁盘，网络流量使用情况：</li></ul><p><img src="https://img.hi-linux.com/staticfile/trivy-6-2021-03-23-RCXCt6.png" alt></p><p>结论：接收到的网络流量等于线上镜像的大小，镜像被下载放在服务器磁盘的某处（目前本服务器未装Docker）。</p><blockquote><p>注：再次全量扫描相同的镜像，接收流量和磁盘使用占比均不再增加。</p></blockquote><h3><span id="扫描的结果是否容易解析">扫描的结果是否容易解析</span></h3><ul><li>使用 JSON 输出扫描的结果：</li></ul><p>扫描镜像,openjdk:15-ea-jdk-buster</p><p>大小：316M 左右</p><p>时间：10s 左右</p><p><img src="https://img.hi-linux.com/staticfile/trivy-7-2021-03-23-H1Pzjr.png" alt></p><p>返回结果：标准的 josn 格式的文件</p><p><img src="https://img.hi-linux.com/staticfile/trivy-8-2021-03-23-iMgNEF.png" alt></p><h3><span id="其他更多可使用命令">其他更多可使用命令</span></h3><ol><li>扫描镜像文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker save ruby:2.3.0-alpine3.9 -o ruby-2.3.0.tar</span><br><span class="line">$ trivy --input ruby-2.3.0.tar</span><br></pre></td></tr></table></figure><ol start="2"><li>按严重性筛选漏洞：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trivy -–severity HIGH,CRITICAL ruby:2.3.0</span><br></pre></td></tr></table></figure><ol start="3"><li>按类型筛选漏洞：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trivy -–vuln-type os ruby:2.3.0</span><br></pre></td></tr></table></figure><ol start="4"><li>跳过漏洞数据库的更新</li></ol><p>Trivy 在开始运行时总是更新其漏洞数据库。这通常很快，因为这是一个差异更新。但是，如果您甚至想跳过这一步，请使用 <code>-–skip update</code> 选项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trivy -–skip-update python:3.4-alpine3.9</span><br></pre></td></tr></table></figure><ol start="5"><li>仅下载漏洞数据库</li></ol><p>您还可以要求 Trivy 简单地检索漏洞数据库。这对于初始化连续集成系统中的工作人员非常有用。在第一次运行中，<code>-–only update</code> 选项将被忽略。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ trivy -–download-db-only</span><br><span class="line">$ trivy -–download-db-only -–only-update alpine</span><br></pre></td></tr></table></figure><ol start="6"><li>忽略未修复的漏洞</li></ol><p>默认情况下，Trivy 还会检测未修补/未修复的漏洞。这意味着即使更新了所有包，也无法修复这些漏洞。如果要忽略它们，请使用 <code>-–ignore unfixed</code> 选项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trivy –-ignore-unfixed ruby:2.3.0</span><br></pre></td></tr></table></figure><ol start="7"><li>指定退出代码</li></ol><p>默认情况下，即使检测到漏洞，Trivy 也会以代码 0 退出。如果要使用非零退出代码退出，请使用 <code>-–exit code</code> 选项。此选项对 CI/CD 很有用。在下面的示例中，仅当发现关键漏洞时，测试才会失败。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ trivy -–exit-code 1 python:3.4-alpine3.9</span><br><span class="line">$ trivy -–exit-code 0 –severity MEDIUM,HIGH ruby:2.3.0</span><br><span class="line">$ trivy -–exit-code 1 –severity CRITICAL ruby:2.3.0</span><br></pre></td></tr></table></figure><ol start="8"><li>忽略指定的漏洞</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat .trivyignore</span><br><span class="line">CVE-2018-14618</span><br><span class="line">CVE-2019-1543</span><br><span class="line">$ trivy python:3.4-alpine3.9</span><br></pre></td></tr></table></figure><ol start="9"><li>指定缓存目录：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trivy -–cache-dir &#x2F;tmp&#x2F;trivy&#x2F; python:3.4-alpine3.9</span><br></pre></td></tr></table></figure><ol start="10"><li>清除镜像缓存</li></ol><p><code>-–clear cache</code> 选项删除镜像缓存。如果更新具有相同 tag 的镜像（例如使用最新 tag 时），此选项非常有用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trivy -–clear-cache</span><br></pre></td></tr></table></figure><p><code>--reset</code> 选项删除所有缓存和数据库。在此之后，需要很长时间才能在本地重建漏洞数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trivy -–reset</span><br></pre></td></tr></table></figure><ol start="11"><li>使用轻量级数据库：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trivy -–light alpine:3.10</span><br></pre></td></tr></table></figure><p>轻量级数据库不包含诸如描述和引用之类的漏洞详细信息。因此，数据库的大小更小，下载速度更快。当您不需要漏洞详细信息时，此选项非常有用，并且适用于CI/CD。</p><p>要查找其他信息，可以在 NVD 网站上搜索漏洞详细信息。</p><p>网站地址：<a href="https://nvd.nist.gov/vuln/search" target="_blank" rel="noopener">https://nvd.nist.gov/vuln/search</a></p><h2><span id="将-trivy-集成进-ci">将 Trivy 集成进 CI</span></h2><p>Trivy 有对 CI 友好的特点，并且官方也以这种方式使用它，想要集成 CI 只需要一段简单的 Yml 配置文件即可，如果发现漏洞，测试将失败。如果不希望测试失败，请指定 –exit code 0。由于在自动化场景（如CI/CD）中，您只对最终结果感兴趣，而不是对完整的报告感兴趣，因此请使用 –light 标志对此场景进行优化，以获得快速的结果。</p><p>集成 GitLab CI 的 Yml 配置可以参考：<a href="https://github.com/aquasecurity/trivy#gitlab-ci" target="_blank" rel="noopener">https://github.com/aquasecurity/trivy#gitlab-ci</a></p><h2><span id="使用注意点">使用注意点</span></h2><ul><li>国内拉取漏洞数据库慢。</li><li>同一台服务器，多个镜像扫描的时候不可并行执行。</li><li>可以使用 <code>-–light</code> 使用轻量级数据库来优化执行扫描的效率。</li></ul><blockquote><p>本文转载自：「 Choerodon 猪齿鱼社区 」，原文：<a href="https://choerodon.io/zh/blog/trivy/" target="_blank" rel="noopener">https://choerodon.io/zh/blog/trivy/</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Trivy-的特征&quot;&gt;Trivy 的特征&lt;/h2&gt;
&lt;p&gt;Trivy 是一种适用于 CI 的简单而全面的容器漏洞扫描程序。软件漏洞是指软件或操作系统中存在的故障、缺陷或弱点。Trivy 检测操作系统包（Alpine、RHEL、CentOS等）和应用程序依赖（Bundler、Composer、npm、yarn等）的漏洞。&lt;/p&gt;
&lt;p&gt;Trivy 很容易使用，只要安装二进制文件，就可以扫描了。扫描只需指定容器的镜像名称。与其他镜像扫描工具相比，例如 Clair，Anchore Engine，Quay 相比，Trivy 在准确性、方便性和对 CI 的支持等方面都有着明显的优势。&lt;/p&gt;
&lt;p&gt;推荐在 CI 中使用它，在推送到 Container Registry 之前，您可以轻松地扫描本地容器镜像，Trivy具备如下的特征：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;检测面很全，能检测全面的漏洞，操作系统软件包（Alpine、Red Hat Universal Base Image、Red Hat Enterprise Linux、CentOS、Oracle Linux、Debian、Ubuntu、Amazon Linux、openSUSE Leap、SUSE Enterprise Linux、Photon OS 和 Distrioless）、应用程序依赖项（Bundler、Composer、Pipenv、Poetry、npm、yarn 和 Cargo）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用简单，仅仅只需要指定镜像名称；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扫描快且无状态，第一次扫描将在 10 秒内完成（取决于您的网络）。随后的扫描将在一秒钟内完成。与其他扫描器在第一次运行时需要很长时间（大约10分钟）来获取漏洞信息，并鼓励您维护持久的漏洞数据库不同，Trivy 是无状态的，不需要维护或准备；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;易于安装，安装方式：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ apt-get install trivy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yum install trivy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ brew install trivy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;无需安装数据库、库等先决条件（例外情况是需要安装 rpm 以扫描基于 RHEL/CentOS 的图像）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.hi-linux.com/categories/docker/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Trivy" scheme="https://www.hi-linux.com/tags/Trivy/"/>
    
  </entry>
  
  <entry>
    <title>零配置，一条指令助你实现 SSH 免密登陆和安全加固</title>
    <link href="https://www.hi-linux.com/posts/37943.html"/>
    <id>https://www.hi-linux.com/posts/37943.html</id>
    <published>2021-03-26T01:00:00.000Z</published>
    <updated>2021-03-26T01:38:00.741Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2><span id="前言">前言</span></h2><p>对于新入手或重装后的 VPS 配置密钥登录需要创建 <code>~/.ssh</code> 目录、把公钥写入到 <code>~/.ssh/authorized_keys</code>、设置权限、禁用密码登录等操作，虽然都是很简单的基础操作，但过程麻烦且枯燥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~&#x2F;.ssh</span><br><span class="line">curl -fsSL https:&#x2F;&#x2F;github.com&#x2F;P3TERX.keys &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">chmod 700 ~&#x2F;.ssh</span><br><span class="line">chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">sudo sed -i &quot;s@.*\(PasswordAuthentication \).*@\1no@&quot; &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br><span class="line">sudo service sshd restart</span><br></pre></td></tr></table></figure><p><a href="https://github.com/P3TERX/SSH_Key_Installer" target="_blank" rel="noopener">SSH 密钥一键配置脚本</a>是一套用于简化 SSH 密钥配置过程的解决方案。使用它以上操作只需要一行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -fsSL git.io&#x2F;key.sh) -g P3TERX -d</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="语法及选项说明">语法及选项说明</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -fsSL git.io&#x2F;key.sh) [选项...] &lt;参数&gt;</span><br></pre></td></tr></table></figure><ul><li><code>-o</code> - 覆盖模式，必须写在最前面才会生效</li><li><code>-g</code> - 从 GitHub 获取公钥，参数为 GitHub 用户名</li><li><code>-u</code> - 从 URL 获取公钥，参数为 URL</li><li><code>-l</code> - 从本地文件获取公钥，参数为本地文件路径</li><li><code>-p</code> - 修改 SSH 端口，参数为端口号</li><li><code>-d</code> - 禁用密码登录</li></ul><h2><span id="使用方法">使用方法</span></h2><h3><span id="生成-ssh-密钥对">生成 SSH 密钥对</span></h3><p>如果没有密钥需要先生成，执行以下命令后一路回车即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ecdsa -b 521</span><br></pre></td></tr></table></figure><blockquote><p>TIPS：</p><p>此方法适用于 Windows 10 (1803后)的 PowerShell 或 WSL，Linux 发行版和 macOS 自带的终端，但不仅限于这些环境。</p><p><strong>科普：</strong> 521 位的 ECDSA 密钥比起 RSA 密钥更安全且验证速度更快。</p></blockquote><p>操作完后会在 <code>~/.ssh</code> 目录中生两个密钥文件，<code>id_ecdsa</code> 为私钥，<code>id_ecdsa.pub</code> 为公钥。公钥就是我们需要安装在远程主机上的。</p><blockquote><p><strong>科普：</strong><code>~</code>符号代表<strong>用户主目录</strong>，俗称<strong>家目录</strong>。其路径与当前登陆的用户有关，在 Linux 中普通用户家目录的路径是<code>/home/用户名</code>，而 root 用户是<code>/root</code>。Windows 10 中路径是<code>C:\Users\用户名</code>。在 macOS 中路径是<code>/Users/用户名</code>。</p></blockquote><h3><span id="安装公钥">安装公钥</span></h3><h4><span id="从-github-获取公钥">从 GitHub 获取公钥</span></h4><p>在 <a href="https://github.com/settings/keys" target="_blank" rel="noopener">GitHub 密钥管理页面</a> 添加公钥，比如我的用户名是 <code>P3TERX</code>，那么在主机上输入以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -fsSL git.io&#x2F;key.sh) -g P3TERX</span><br></pre></td></tr></table></figure><h4><span id="从-url-获取公钥">从 URL 获取公钥</span></h4><p>把公钥上传到网盘，通过网盘链接获取公钥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -fsSL git.io&#x2F;key.sh) -u https:&#x2F;&#x2F;p3terx.com&#x2F;key.pub</span><br></pre></td></tr></table></figure><h4><span id="从本地文件获取公钥">从本地文件获取公钥</span></h4><p>通过 FTP 的方式把公钥传到 VPS 上，然后指定公钥路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -fsSL git.io&#x2F;key.sh) -f ~&#x2F;key.pub</span><br></pre></td></tr></table></figure><h3><span id="覆盖模式">覆盖模式</span></h3><p>使用覆盖模式（<code>-o</code>）将覆盖 <code>/.ssh/authorized_keys</code> 文件，之前的密钥会被完全替换掉，选项必须写在最前面才会生效，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -fsSL git.io&#x2F;key.sh) -o -g P3TERX</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -fsSL git.io&#x2F;key.sh) -og P3TERX</span><br></pre></td></tr></table></figure><h3><span id="禁用密码登录">禁用密码登录</span></h3><p>在确定使用密钥能正常登录后禁用密码登录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -fsSL git.io&#x2F;key.sh) -d</span><br></pre></td></tr></table></figure><h3><span id="修改-ssh-端口">修改 SSH 端口</span></h3><p>把 SSH 端口修改为 <code>2222</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -fsSL git.io&#x2F;key.sh) -p 2222</span><br></pre></td></tr></table></figure><h3><span id="一键操作">一键操作</span></h3><p>安装密钥、修改端口、禁用密码登录一键操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -fsSL git.io&#x2F;key.sh) -og P3TERX -p 2222 -d</span><br></pre></td></tr></table></figure><blockquote><p>本文转载自：「 P3TERX ZONE 」，原文：<a href="http://t.cn/A6tjJeR0" target="_blank" rel="noopener">http://t.cn/A6tjJeR0</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;对于新入手或重装后的 VPS 配置密钥登录需要创建 &lt;code&gt;~/.ssh&lt;/code&gt; 目录、把公钥写入到 &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;、设置权限、禁用密码登录等操作，虽然都是很简单的基础操作，但过程麻烦且枯燥：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir -p ~&amp;#x2F;.ssh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl -fsSL https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;P3TERX.keys &amp;gt;&amp;gt; ~&amp;#x2F;.ssh&amp;#x2F;authorized_keys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chmod 700 ~&amp;#x2F;.ssh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chmod 600 ~&amp;#x2F;.ssh&amp;#x2F;authorized_keys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo sed -i &amp;quot;s@.*\(PasswordAuthentication \).*@\1no@&amp;quot; &amp;#x2F;etc&amp;#x2F;ssh&amp;#x2F;sshd_config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo service sshd restart&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/P3TERX/SSH_Key_Installer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SSH 密钥一键配置脚本&lt;/a&gt;是一套用于简化 SSH 密钥配置过程的解决方案。使用它以上操作只需要一行命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bash &amp;lt;(curl -fsSL git.io&amp;#x2F;key.sh) -g P3TERX -d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="SSH" scheme="https://www.hi-linux.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>几种修改 Docker 镜像默认存储位置的方法</title>
    <link href="https://www.hi-linux.com/posts/13457.html"/>
    <id>https://www.hi-linux.com/posts/13457.html</id>
    <published>2021-03-24T01:00:00.000Z</published>
    <updated>2021-03-24T01:00:24.788Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><blockquote><p>由于系统初始分区的原因，导致操作系统中对应 <code>/</code> 分区不会太大，通过 <code>/var</code> 目录不会单独分区。如果上面运行 <code>Docker</code> 服务，经过长时间的使用，会使原本就比较大的分区越来越不够用。如何更好地的处理这个问题呢？</p></blockquote><h2><span id="1-使用软链接">1. 使用软链接</span></h2><ul><li>我们知道在操作系统当中，默认情况下 <code>Docker</code> 容器的存放位置在 <code>/var/lib/docker</code> 目录下面，可以通过下面命令查看具体位置。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认存放位置</span></span><br><span class="line">$ sudo docker info | grep <span class="string">"Docker Root Dir"</span></span><br></pre></td></tr></table></figure><ul><li>解决默认存储容量不足的情况，最直接且最有效的方法就是挂载新的分区到该目录。但是在原有系统空间不变的情况下，所以采用软链接的方式，修改镜像和容器的存放路径达到同样的目的。</li></ul><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停掉Docker服务</span></span><br><span class="line">$ systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停掉Docker服务</span></span><br><span class="line">$ service docker stop</span><br></pre></td></tr></table></figure><ul><li>然后移动整个 <code>/var/lib/docker</code> 目录到空间不较大的目的路径。这时候启动 <code>Docker</code> 时发现存储目录依旧是 <code>/var/lib/docker</code> 目录，但是实际上是存储在数据盘 <code>/data/docker</code> 上了。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 移动原有的内容</span></span><br><span class="line">$ mv /var/lib/docker /data/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行链接</span></span><br><span class="line">$ ln -sf /data/docker /var/lib/docker</span><br></pre></td></tr></table></figure><h2><span id="2-指定容器启动参数">2. 指定容器启动参数</span></h2><ul><li>在配置文件中指定容器启动的参数 <code>--graph=/var/lib/docker</code> 来指定镜像和容器存放路径。<code>Docker</code> 的配置文件可以设置大部分的后台进程参数，在各个操作系统中的存放位置不一致。在 <code>Ubuntu</code> 中的位置是 <code>/etc/default/docker</code> 文件，在 <code>CentOS</code> 中的位置是 <code>/etc/sysconfig/docker</code> 文件。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS6</span></span><br><span class="line"><span class="comment"># 因为Ubuntu默认开启了selinux机制</span></span><br><span class="line">OPTIONS=--graph=<span class="string">"/data/docker"</span> --selinux-enabled -H fd://</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS7</span></span><br><span class="line"><span class="comment"># 修改docker.service文件，使用-g参数指定存储位置</span></span><br><span class="line">$ vi /usr/lib/systemd/system/docker.service</span><br><span class="line">ExecStart=/usr/bin/dockerd --graph /new-path/docker</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line"><span class="comment"># 因为Ubuntu默认没开启selinux机制</span></span><br><span class="line">OPTIONS=--graph=<span class="string">"/data/docker"</span> -H fd://</span><br></pre></td></tr></table></figure><ul><li>重新启动之后，<code>Docker</code> 的路径就改成 <code>/data/docker</code> 了。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新reload配置文件</span></span><br><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启docker服务</span></span><br><span class="line">$ sudo systemctl restart docker.service</span><br></pre></td></tr></table></figure><ul><li>如果 <code>Docker</code> 的版本是 <code>1.12</code> 或以上的，可以修改或新建 <code>daemon.json</code> 文件。修改后会立即生效，不需重启 <code>Docker</code> 服务。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">$ vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"registry-mirrors"</span>:</span><br><span class="line">        [<span class="string">"http://7e61f7f9.m.daocloud.io"</span>],</span><br><span class="line">    <span class="string">"graph"</span>: <span class="string">"/new-path/docker"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="3-system-下创建配置文件">3. System 下创建配置文件</span></h2><ul><li>在 <code>/etc/systemd/system/docker.service.d</code> 目录下创建一个 <code>Drop-In</code> 文件 <code>docker.conf</code>，默认 <code>docker.service.d</code> 文件夹不存在，必须先创建它。创建 <code>Drop-In</code> 文件的原因，是我们希望 <code>Docker</code>服务使用 <code>docker.conf</code> 文件中提到的特定参数，将默认服务所使用的位于 <code>/lib/systemd/system/docker.service</code> 文件中的参数进行覆盖。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义新的存储位置</span></span><br><span class="line">$ sudo vi /etc/systemd/system/docker.service.d/docker.conf</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/dockerd --graph=<span class="string">"/data/docker"</span> --storage-driver=devicemapper</span><br></pre></td></tr></table></figure><ul><li>保存并退出 <code>vim</code> 编辑器 <code>/data/docker</code> 就是新的存储位置，而 <code>devicemapper</code> 是当前 <code>Docker</code> 所使用的存储驱动。如果你的存储驱动有所不同，请输入之前第一步查看并记下的值。现在，你可以重新加载服务守护程序，并启动 <code>Docker</code> 服务了，这将改变新的镜像和容器的存储位置。为了确认一切顺利，运行 <code>docker info</code> 命令检查 <code>Docker</code> 的根目录。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新reload配置文件</span></span><br><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启docker服务</span></span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><h2><span id="参考文档">参考文档</span></h2><ul><li><a href="https://blog.51cto.com/forangela/1949947" target="_blank" rel="noopener">https://blog.51cto.com/forangela/1949947</a></li></ul><blockquote><p>本文转载自：「 Escape 的博客 」，原文：<a href="https://tinyurl.com/y5v7btf2%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/y5v7btf2，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;由于系统初始分区的原因，导致操作系统中对应 &lt;code&gt;/&lt;/code&gt; 分区不会太大，通过 &lt;code&gt;/var&lt;/code&gt; 目录不会单独分区。如果上面运行 &lt;code&gt;Docker&lt;/code&gt; 服务，经过长时间的使用，会使原本就比较大的分区越来越不够用。如何更好地的处理这个问题呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-使用软链接&quot;&gt;1. 使用软链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;我们知道在操作系统当中，默认情况下 &lt;code&gt;Docker&lt;/code&gt; 容器的存放位置在 &lt;code&gt;/var/lib/docker&lt;/code&gt; 目录下面，可以通过下面命令查看具体位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 默认存放位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo docker info | grep &lt;span class=&quot;string&quot;&gt;&quot;Docker Root Dir&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;解决默认存储容量不足的情况，最直接且最有效的方法就是挂载新的分区到该目录。但是在原有系统空间不变的情况下，所以采用软链接的方式，修改镜像和容器的存放路径达到同样的目的。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.hi-linux.com/categories/docker/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Linux 网络流量监控利器 iftop 中文入门指南</title>
    <link href="https://www.hi-linux.com/posts/35952.html"/>
    <id>https://www.hi-linux.com/posts/35952.html</id>
    <published>2021-03-22T01:00:00.000Z</published>
    <updated>2021-03-22T01:20:03.624Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2><span id="iftop-是什么">iftop 是什么</span></h2><blockquote><p>在 Linux 系统下即时监控服务器的网络带宽使用情况，有很多工具，比如 iptraf、nethogs 等等，但是推荐使用小巧但功能很强大的 iftop 工具。</p></blockquote><p>iftop 是 Linux 系统一个免费的网卡实时流量监控工具，类似于 top 命令。iftop 可以监控指定网卡的实时流量、端口连接信息、反向解析 IP 等，还可以精确显示本机网络流量及网络内各主机和本机相互通信的流量集合，非常适合于监控代理服务器或路由器的网络流量。同时，iftop 对检测流量异常的主机非常有效，通过 iftop 的输出可以迅速定位主机流量异常的根源，这对于网络故障排查、网络安全检测是十分有用的。缺点就是无报表功能，且必须以 root 身份才能运行。</p><p>官网：<a href="http://www.ex-parrot.com/~pdw/iftop/" target="_blank" rel="noopener">http://www.ex-parrot.com/~pdw/iftop/</a></p><h2><span id="安装">安装</span></h2><ol><li>通过软件管理工具安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># CentOS</span><br><span class="line">$ sudo yum install iftop</span><br><span class="line"></span><br><span class="line"># Ubuntu</span><br><span class="line">$ sudo apt install iftop</span><br></pre></td></tr></table></figure><ol start="2"><li>通过源代码编译安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 安装比较软件包</span><br><span class="line">$ sudo um install libpcap libpcap-devel ncurses ncurses-devel flex byacc</span><br><span class="line"></span><br><span class="line"># 下载软件包</span><br><span class="line">$ wget &quot;http:&#x2F;&#x2F;www.ex-parrot.com&#x2F;~pdw&#x2F;iftop&#x2F;download&#x2F;iftop-0.17.tar.gz&quot;</span><br><span class="line">$ tar zxvf iftop-0.17.tar.gz</span><br><span class="line">$ cd iftop-0.17</span><br><span class="line">$ .&#x2F;configure</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="常用参数">常用参数</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-i 指定需要检测的网卡， 如果有多个网络接口，则需要注意网络接口的选择，如：# iftop -i eth1</span><br><span class="line">-B 将输出以 byte 为单位显示网卡流量，默认是 bit</span><br><span class="line">-n 将输出的主机信息都通过 IP 显示，不进行 DNS 解析 </span><br><span class="line">-N 只显示连接端口号，不显示端口对应的服务名称</span><br><span class="line">-F 显示特定网段的网卡进出流量  如: iftop -F 192.168.85.0&#x2F;24</span><br><span class="line">-h 帮助，显示参数信息</span><br><span class="line">-p 以混杂模式运行 iftop，此时 iftop 可以用作网络嗅探器</span><br><span class="line">-P 显示主机以及端口信息</span><br><span class="line">-m 设置输出界面中最上面的流量刻度最大值，流量刻度分 5 个大段显示  如：# iftop -m 100M</span><br><span class="line">-f 使用筛选码选择数据包来计数  如 iftop -f filter code</span><br><span class="line">-b 不显示流量图形条</span><br><span class="line">-c 指定可选的配置文件，如：iftop  -c config file</span><br><span class="line">-t 使用不带 ncurses 的文本界面，</span><br><span class="line">    以下两个是只和 -t 一起用的：</span><br><span class="line">    -s num num 秒后打印一次文本输出然后退出，-t -s 60 组合使用，表示取 60 秒网络流量输出到终端</span><br><span class="line">    -L num 打印的行数</span><br><span class="line">-f 参数支持 tcpdump 的语法，可以使用各种过滤条件。</span><br></pre></td></tr></table></figure><h2><span id="界面操作">界面操作</span></h2><ol><li>界面信息</li></ol><p>安装完 <code>iftop</code> 工具后，直接输入 <code>iftop</code> 命令即可显示网卡实时流量信息。在默认情况下，<code>iftop</code> 显示系统第一块网卡的流量信息，如果要显示指定网卡信息，可通过<code>“-i”</code>参数实现。执行<code>“iftop -P -i eth0”</code>命令，得到如下图所示的 <code>iftop</code> 的一个典型输出界面。</p><ul><li><p>第一部分</p><ul><li>iftop 输出中最上面的一行，此行信息是流量刻度，用于显示网卡带宽流量。</li></ul></li><li><p>第二部分</p><ul><li>此部分为分割线中间的部分，其中又分别分为左、中、右三列。左列和中列，记录了哪些 IP 或主机正在和本机的网络进行连接。其中，中列的“=&gt;”代表发送数据，“&lt;=”代表接收数据，通过这个指示箭头可以很清晰地知道两个 IP 之间的通信情况。最右列又分为三小列，这些实时参数分别表示外部 IP 连接到本机 2 秒内、10 秒内和 40 秒内的平均流量值。</li><li>另外，这个部分还有一个流量图形条，流量图形条是对流量大小的动态展示，以第一部分中的流量刻度为基准。通过这个流量图形条可以很方便地看出哪个 IP 的流量最大，进而迅速定位网络中可能出现的流量问题。</li></ul></li><li><p>第三部分</p><ul><li>位于 iftop 输出的最下面，可以分为三行，其中，“TX”表示发送数据，“RX”表示接收数据，“TOTAL”表示发送和接收全部流量。与这三行对应的有三列，其中“cum”列表示从运行 iftop 到目前的发送、接收和总数据流量。“peak”列表示发送、接收以及总的流量峰值。“rates”列表示过去 2s、10s、40s 的平均流量值。</li></ul></li></ul><p><img src="https://img.hi-linux.com/staticfile/linux-network-iftop-tools-1-2021-02-22-uOPjUB.png" alt></p><ol start="2"><li>交互操作</li></ol><p>在 <code>iftop</code> 的实时监控界面中，还可以对输出结果进行交互式操作，用于对输出信息进行整理和过滤，在上图所示界面中，按键 <code>“h”</code> 即可进入交互选项界面，如下图所示。<code>iftop</code> 的交互功能和 <code>Linux</code> 下的 <code>top</code> 命令非常类似，交互参数主要分为 <code>4</code> 个部分，分别是一般参数、主机显示参数、端口显示参数和输出排序参数。相关参数的含义如下表所示。</p><p><img src="https://img.hi-linux.com/staticfile/linux-network-iftop-tools-2-2021-02-22-wisbVN.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">参数      含义</span><br><span class="line">P        通过此键可切换暂停/继续显示</span><br><span class="line">h        通过此键可在交互参数界面/状态输出界面之间来回切换</span><br><span class="line">b        通过此键可切换是否显示平均流量图形条</span><br><span class="line">B        通过此键可切换显示2秒、10秒、40秒内的平均流量</span><br><span class="line">T        通过此键可切换是否显示每个连接的总流量</span><br><span class="line">j/k      按j键或k键可以向上或向下滚动屏幕显示当前的连接信息</span><br><span class="line">l        通过此键可打开iftop输出过滤功能，比如输入要显示的IP，按回车后，屏幕就只显示与这个IP相关的流量信息</span><br><span class="line">L        通过此键可切换显示流量刻度范围，刻度不同，流量图形条会跟着变化</span><br><span class="line">q        通过此键可退出iftop流量监控界面</span><br><span class="line">n        通过此键可使iftop输出结果以IP或主机名的方式显示</span><br><span class="line">s        通过此键可切换是否显示源主机信息</span><br><span class="line">d        通过此键可切换是否显示远端目标主机信息</span><br><span class="line">t        通过此键可切换iftop显示格式，连续按此键可依次显示：以两行显示发送接收流量、以一行显示发送接收流量、只显示发送流量/接收流量</span><br><span class="line">N        通过此键可切换显示端口号/端口号对应服务名称</span><br><span class="line">S        通过此键可切换是否显示本地源主机的端口信息</span><br><span class="line">D        通过此键可切换是否显示远端目标主机的端口信息</span><br><span class="line">p        通过此键可切换是否显示端口信息</span><br><span class="line">1/2/3    根据最近 2 秒、10 秒、40 秒的平均网络流量排序</span><br><span class="line">&lt;        通过此键可根据左边的本地主机名或IP地址进行排序</span><br><span class="line">&gt;        通过此键可根据远端目标主机的主机名或IP地址进行排序</span><br><span class="line">o        通过此键可切换是否固定显示当前的连接</span><br></pre></td></tr></table></figure><h2><span id="使用示例">使用示例</span></h2><ol><li>显示网卡 eth0 的信息，主机通过 ip 显示</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iftop -i eth0 -n</span><br></pre></td></tr></table></figure><ol start="2"><li>显示端口号（添加 -P 参数，进入界面可通过 p 参数关闭）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iftop -i eth0 -n -P</span><br></pre></td></tr></table></figure><ol start="3"><li>显示将输出以 byte 为单位显示网卡流量,默认是 bit</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iftop -i eth0 -n -B</span><br></pre></td></tr></table></figure><ol start="4"><li>显示流量进度条</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## 进入界面后按下 L </span><br><span class="line">$ iftop -i eth0 -n</span><br></pre></td></tr></table></figure><ol start="5"><li>显示每个连接的总流量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## 进入界面后按下 T</span><br><span class="line">$ iftop -i eth0 -n</span><br></pre></td></tr></table></figure><ol start="6"><li>显示指定 ip 172.17.1.158 的流量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进入界面后按下 l 后,再输入 172.17.1.158 并回车)</span><br><span class="line">$ iftop -i eth0 -n</span><br></pre></td></tr></table></figure><h2><span id="实战">实战</span></h2><p>下面我们将通过找出最费流量的 IP 和端口号这一具体实例，来演示 iftop 强大的功能。</p><ol><li>进入界面</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iftop -i eth0 -nNB -m 10M</span><br></pre></td></tr></table></figure><ul><li>-i 指定网卡，</li><li>-n 代表主机通过ip显示不走DNS</li><li>-N 只显示连接端口号，不显示端口对应的服务名称(不加会显示如ssh这样的服务名称，不便于排查)</li><li>-B 指定显示单位为Kb，默认是bit，太小！</li><li>-m 设置输出界面中最上面的流量刻度最大值，流量刻度分5个大段显示</li></ul><p>进入后界面如下:</p><p><img src="https://img.hi-linux.com/staticfile/662544-20190409210125203-1972088283-2021-02-22-Dr2ib3.png" alt="img"></p><ol start="2"><li>按下 L 显示流量刻度</li></ol><p>L 参数直接显示进度条，方便人类阅读。</p><p><img src="https://img2018.cnblogs.com/blog/662544/201904/662544-20190409210311438-298086268.png" alt="img"></p><ol start="3"><li>按下 T 显示总量</li></ol><p>有个总数统计，看着方便！</p><p><img src="https://img.hi-linux.com/staticfile/662544-20190409210410810-1883429367-2021-02-22-ncetd0.png" alt="img"></p><ol start="4"><li>按下 3，根据最近 40s 统计排序</li></ol><p>用平均值来统计最权威点</p><p><img src="https://img.hi-linux.com/staticfile/662544-20190409210518173-21025455-2021-02-22-ePqAU2.png" alt="img"></p><ol start="5"><li>按下 t，发送和接受合成一行</li></ol><p><img src="https://img.hi-linux.com/staticfile/662544-20190409210625919-169291969-2021-02-22-6qL0Op.png" alt="img"></p><ol start="6"><li>多按几次 B，查看最近 2s、10s、40s 的统计</li></ol><p><img src="https://img2018.cnblogs.com/blog/662544/201904/662544-20190409211010423-1486003558.png" alt="img"></p><p>没错，图中的 172.17.1.158 就是我们找到的流量用得最多的 IP</p><ol start="7"><li>筛选指定 IP 172.17.1.158</li></ol><p>按下 l, 输入172.17.1.158，出现如下</p><p><img src="https://img.hi-linux.com/staticfile/662544-20190409211215269-1603240397-2021-02-22-l1x0Jt.png" alt="img"></p><p>回车后生效</p><p><img src="https://img2018.cnblogs.com/blog/662544/201904/662544-20190409211236275-1078452279.png" alt="img"></p><p>这下就只看到这个 IP 的流量监控了</p><ol start="8"><li>找到这个 IP 哪个端口流量用得最多</li></ol><p>按下 p, 根据端口号显示</p><p><img src="https://img.hi-linux.com/staticfile/662544-20190409211529439-1633640505-2021-02-22-NTAMbf.png" alt="img"></p><p>到这里，我们就学会了如何找出流量用得最多的 IP 和端口号。</p><blockquote><p>本文转载自：「 博客园 」，原文：<a href="http://t.cn/A6tM3oLg" target="_blank" rel="noopener">http://t.cn/A6tM3oLg</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;iftop-是什么&quot;&gt;iftop 是什么&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Linux 系统下即时监控服务器的网络带宽使用情况，有很多工具，比如 iptraf、nethogs 等等，但是推荐使用小巧但功能很强大的 iftop 工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;iftop 是 Linux 系统一个免费的网卡实时流量监控工具，类似于 top 命令。iftop 可以监控指定网卡的实时流量、端口连接信息、反向解析 IP 等，还可以精确显示本机网络流量及网络内各主机和本机相互通信的流量集合，非常适合于监控代理服务器或路由器的网络流量。同时，iftop 对检测流量异常的主机非常有效，通过 iftop 的输出可以迅速定位主机流量异常的根源，这对于网络故障排查、网络安全检测是十分有用的。缺点就是无报表功能，且必须以 root 身份才能运行。&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;http://www.ex-parrot.com/~pdw/iftop/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.ex-parrot.com/~pdw/iftop/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;通过软件管理工具安装&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# CentOS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo yum install iftop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt install iftop&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;通过源代码编译安装&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 安装比较软件包&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo um install libpcap libpcap-devel ncurses ncurses-devel flex byacc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 下载软件包&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ wget &amp;quot;http:&amp;#x2F;&amp;#x2F;www.ex-parrot.com&amp;#x2F;~pdw&amp;#x2F;iftop&amp;#x2F;download&amp;#x2F;iftop-0.17.tar.gz&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ tar zxvf iftop-0.17.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cd iftop-0.17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ .&amp;#x2F;configure&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ make &amp;amp;&amp;amp; make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="iftop" scheme="https://www.hi-linux.com/tags/iftop/"/>
    
  </entry>
  
  <entry>
    <title>如何在不重建镜像情况下优雅的修改容器内容</title>
    <link href="https://www.hi-linux.com/posts/49989.html"/>
    <id>https://www.hi-linux.com/posts/49989.html</id>
    <published>2021-03-19T01:00:00.000Z</published>
    <updated>2021-03-19T01:12:00.006Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>现在我们使用容器非常频繁，偶尔有一些需求需要更改容器镜像中的一些行为，也许是一个很小的变化，一般我们能想到的就是重新构建镜像，但是这个我们就需要重新构建发布镜像了，除了构建镜像这种方式之外其实还有其他方式可以来实现这个需求。</p><h2><span id="初始化容器">初始化容器</span></h2><p>Init Containers 是为了给 Pod 中定义的主容器提供附加功能的。它们在主容器之前执行，可以使用不同的容器镜像，如果出现任何故障，它们将阻止主容器的启动，所有的日志都可以很容易查看到，故障排除也相当简单，它们就像在 Pod 中定义的任何其他容器一样。这种方法在数据库等服务中比较常用，可以根据配置参数对它们进行初始化和配置。</p><p>下面的例子使用一个 <code>emptyDir</code> 来存储由初始化容器初始化的数据。在这个示例，它只是一个简单的 <code>echo</code> 命令，在实际的生产环境中，可能是一个脚本，做一些更复杂的事情。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">  name: nginx-init</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      initContainers:</span><br><span class="line">        - name: prepare-webpage</span><br><span class="line">          image: busybox:1.28</span><br><span class="line">          command: [&quot;sh&quot;, &quot;-c&quot;]</span><br><span class="line">          args: [</span><br><span class="line">              &quot;set -x;</span><br><span class="line">              echo &#39;&lt;h2&gt;Page prepared by an init container&lt;&#x2F;h2&gt;&#39; &gt; &#x2F;web&#x2F;index.html;</span><br><span class="line">              echo &#39;Init finished successfully&#39;</span><br><span class="line">              &quot;,</span><br><span class="line">            ]</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - mountPath: &#x2F;web</span><br><span class="line">              name: web</span><br><span class="line">      containers:</span><br><span class="line">        - image: nginx:1.19</span><br><span class="line">          name: nginx</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - mountPath: &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;</span><br><span class="line">              name: web</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">              name: http</span><br><span class="line">      volumes:</span><br><span class="line">        - name: web</span><br><span class="line">          emptyDir: &#123;&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="poststart-hook">PostStart Hook</span></h2><p>post-start hook 可用于在主容器启动后执行一些操作，它可以是在与容器相同的上下文中执行的脚本，也可以是针对定义的端点执行的 HTTP 请求，但是，<strong>不能保证回调会在容器入口点（ENTRYPOINT）之前执行</strong>。在大多数情况下，它可能是一个 shell 脚本，Pod一直保持在<code>ContainerCreating</code> 状态，直到这个脚本结束。由于没有可用的日志，所以调试起来可能很棘手。这个方法最大的特点是，当主容器中的服务启动时，脚本就会被执行，并且可以用来与服务进行交互，通过适当的 <code>readinessProbe</code> 配置，这可以提供一种很好的方式，在允许任何请求之前初始化应用程序。在下面的例子中，一个启动后的钩子会执行 echo 命令，但同样这可以是任何使用容器文件系统上可用的同一组文件来执行某种初始化的东西。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">  name: nginx-hook</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - image: nginx:1.19</span><br><span class="line">          name: nginx</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">              name: http</span><br><span class="line">          lifecycle:</span><br><span class="line">            postStart:</span><br><span class="line">              exec:</span><br><span class="line">                command:</span><br><span class="line">                  [</span><br><span class="line">                    &quot;sh&quot;,</span><br><span class="line">                    &quot;-c&quot;,</span><br><span class="line">                    &quot;sleep 5;set -x; echo &#39;&lt;h2&gt;Page prepared by a PostStart hook&lt;&#x2F;h2&gt;&#39; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html&quot;,</span><br><span class="line">                  ]</span><br></pre></td></tr></table></figure><h2><span id="sidecar-容器">Sidecar 容器</span></h2><p>这种方法利用了 Pod 的概念 - <strong>多个容器同时运行、共享 IPC 和网络命名空间</strong>。在 Kubernetes 生态系统中，它已经被 Istio、Consul Connect 等项目广泛使用。这里的假设是所有容器同时运行，这使得使用 sidecar 容器来修改主容器的行为变得有点棘手。但这是可行的，它可以用来与正在运行的应用程序或服务进行交互。我在 Jenkins Helm Chart 中使用了这个功能，其中有一个 sidecar 容器负责读取 ConfigMap 对象和 <code>Configuration-as-Code</code> 配置项。</p><p>在下面示例中同样只是使用 echo 这个命令，不过需要注意的是，因为 sidecar 容器必须遵循 restartPolicy 设置，所以这个容器在完成动作后还必须处于运行状态，示例中我们使用的是一个简单的 while 无限循环，在实际环境中，往往会是一个小的守护进程，像服务一样一直运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">  name: nginx-sidecar</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - image: nginx:1.19</span><br><span class="line">          name: nginx</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - mountPath: &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;</span><br><span class="line">              name: web</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">              name: http</span><br><span class="line">        - name: prepare-webpage</span><br><span class="line">          image: busybox:1.28</span><br><span class="line">          command: [&quot;sh&quot;, &quot;-c&quot;]</span><br><span class="line">          args: [</span><br><span class="line">              &quot;set -x;</span><br><span class="line">              echo &#39;&lt;h2&gt;Page prepared by a sidecar container&lt;&#x2F;h2&gt;&#39; &gt; &#x2F;web&#x2F;index.html;</span><br><span class="line">              while :;do sleep 9999;done</span><br><span class="line">              &quot;,</span><br><span class="line">            ]</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - mountPath: &#x2F;web</span><br><span class="line">              name: web</span><br><span class="line">      volumes:</span><br><span class="line">        - name: web</span><br><span class="line">          emptyDir: &#123;&#125;</span><br></pre></td></tr></table></figure><h2><span id="entrypoint">EntryPoint</span></h2><p>最后一种方法使用相同的容器镜像，与 PostStart Hook 类似，只是它在主应用程序或服务之前运行。我们在容器镜像中都定义一个<code>ENTRYPOINT</code> 命令，我们可以利用它来执行一些脚本，这种方式经常被很多官方镜像所使用，在这种方法中，我们只需要预置自己的脚本来修改主容器的行为。在实际生产环境中，其实我们可以提供一个修改后的原始入口点文件。</p><p>这个方法相对复杂一点，需要创建一个 ConfigMap，其中包含一个脚本内容，在主入口点之前执行。如下所示我们修改 nginx 入口点的脚本，然后嵌入到下面的 ConfigMap 中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: scripts</span><br><span class="line">data:</span><br><span class="line">  prestart-script.sh: |-</span><br><span class="line">    #!&#x2F;usr&#x2F;bin&#x2F;env bash</span><br><span class="line">    echo &#39;&lt;h2&gt;Page prepared by a script executed before entrypoint container&lt;&#x2F;h2&gt;&#39; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br><span class="line">    # 这是 &quot;ENTRYPOINT CMD &quot;从主容器镜像定义中提取出来的</span><br><span class="line">    exec &#x2F;docker-entrypoint.sh nginx -g &quot;daemon off;&quot;</span><br></pre></td></tr></table></figure><p>有一点非常重要，就是最后一行与 exec，它执行的是原始的入口点脚本，必须与 Dockerfile 中定义的脚本完全匹配，在这种情况下，它需要额外的参数，这些参数是在 CMD 中定义的。现在让我们定义一下 Deployment 资源对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">  name: nginx-script</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - image: nginx:1.19</span><br><span class="line">          name: nginx</span><br><span class="line">          command: [&quot;bash&quot;, &quot;-c&quot;, &quot;&#x2F;scripts&#x2F;prestart-script.sh&quot;]</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">              name: http</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - mountPath: &#x2F;scripts</span><br><span class="line">              name: scripts</span><br><span class="line">      volumes:</span><br><span class="line">        - name: scripts</span><br><span class="line">          configMap:</span><br><span class="line">            name: scripts</span><br><span class="line">            defaultMode: 0755 # &lt;- 这个很重要</span><br></pre></td></tr></table></figure><p>我们用命令覆盖入口点，我们还必须确保我们的脚本是以适当的权限挂载的（因此需要定义 defaultMode）。</p><h2><span id="总结">总结</span></h2><p>现在我们来总结下上面几种方式的差异。</p><p><img src="https://img.hi-linux.com/staticfile/640-2021-01-28-L0Y5IQ.png" alt="图片"></p><p>容器讲究的是可重用性，很多时候做一些小的调整，不需要重新构建整个容器的镜像，这样发布和维护就会轻松很多。</p><p>原文链接：<a href="https://cloudowski.com/articles/how-to-modify-containers-wihtout-rebuilding/" target="_blank" rel="noopener">https://cloudowski.com/articles/how-to-modify-containers-wihtout-rebuilding/</a></p><blockquote><p>本文转载自：「 k8s技术圈 」，原文：<a href="http://t.cn/A65IGVpX%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">http://t.cn/A65IGVpX，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在我们使用容器非常频繁，偶尔有一些需求需要更改容器镜像中的一些行为，也许是一个很小的变化，一般我们能想到的就是重新构建镜像，但是这个我们就需要重新构建发布镜像了，除了构建镜像这种方式之外其实还有其他方式可以来实现这个需求。&lt;/p&gt;
&lt;h2 id=&quot;初始化容器&quot;&gt;初始化容器&lt;/h2&gt;
&lt;p&gt;Init Containers 是为了给 Pod 中定义的主容器提供附加功能的。它们在主容器之前执行，可以使用不同的容器镜像，如果出现任何故障，它们将阻止主容器的启动，所有的日志都可以很容易查看到，故障排除也相当简单，它们就像在 Pod 中定义的任何其他容器一样。这种方法在数据库等服务中比较常用，可以根据配置参数对它们进行初始化和配置。&lt;/p&gt;
&lt;p&gt;下面的例子使用一个 &lt;code&gt;emptyDir&lt;/code&gt; 来存储由初始化容器初始化的数据。在这个示例，它只是一个简单的 &lt;code&gt;echo&lt;/code&gt; 命令，在实际的生产环境中，可能是一个脚本，做一些更复杂的事情。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apiVersion: apps&amp;#x2F;v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kind: Deployment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;metadata:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  labels:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    app: nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name: nginx-init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spec:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  selector:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    matchLabels:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      app: nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  template:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    metadata:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      labels:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        app: nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    spec:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      initContainers:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        - name: prepare-webpage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          image: busybox:1.28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          command: [&amp;quot;sh&amp;quot;, &amp;quot;-c&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          args: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;quot;set -x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              echo &amp;#39;&amp;lt;h2&amp;gt;Page prepared by an init container&amp;lt;&amp;#x2F;h2&amp;gt;&amp;#39; &amp;gt; &amp;#x2F;web&amp;#x2F;index.html;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              echo &amp;#39;Init finished successfully&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          volumeMounts:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            - mountPath: &amp;#x2F;web&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              name: web&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      containers:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        - image: nginx:1.19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          name: nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          volumeMounts:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            - mountPath: &amp;#x2F;usr&amp;#x2F;share&amp;#x2F;nginx&amp;#x2F;html&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              name: web&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ports:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            - containerPort: 80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              name: http&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      volumes:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        - name: web&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          emptyDir: &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/categories/kubernetes/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>小白也能看懂的网络基础 | 01 什么是网络？</title>
    <link href="https://www.hi-linux.com/posts/35925.html"/>
    <id>https://www.hi-linux.com/posts/35925.html</id>
    <published>2021-03-17T01:00:00.000Z</published>
    <updated>2021-03-17T02:02:47.313Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2><span id="引言">引言</span></h2><p>欢迎来到网络世界，《小白也能看懂的网络基础》系列文章会从零开始帮助你构建网络的基础知识。如果你完全没有接触过网络相关的内容，那我们是一样的，在学习过程中我们肯定遇到了相同的问题！写下这些文章一方面要记录自己的学习历程，另一方面也希望帮到同样想要学习网络基础的小伙伴。</p><p>文章的部分内容与素材是我从【Youtube平台】的【<a href="https://www.youtube.com/channel/UCtuXekfqj-paqsxtqVNCC2A" target="_blank" rel="noopener">Network Direction</a>】发布的系列视频学习和搜集过来的，翻译不易，部分内容可能无法做到尽善尽美，甚至可能会有部分瑕疵，我会尽力让文章内容通俗易懂，覆盖全面。若各位小伙伴发现任何问题，希望能够留言或私信告诉我，在下不胜感激！当然，我也会在第一时间进行更正。</p><p>在往后的每一篇文章中，我都会把看到文章的小伙伴当成是完全没有网络经验的小白，我的目标是和零基础小白一起建立坚实的网络基础，网络大神请略过此系列文章。</p><p>让我们开始网络之旅吧！</p><a id="more"></a><h2><span id="什么是网络">什么是网络</span></h2><p><img src="https://img.hi-linux.com/staticfile/1-2021-03-15-L9ffCR.png" alt="你身边的网络设备"></p><p>网络其实存在于我们日常生活中的每一个角落！你的 <strong>电脑</strong>，<strong>打印机</strong>，<strong>手机，甚至电视</strong> 等等都属于网络设备。通常，我们需要将这些设备通过网络连接起来，这样就可以实现数据的传输和共享，让我们的工作生活更加便捷。</p><p><img src="https://img.hi-linux.com/staticfile/ebdeae9ed432126dd50bc72f5a06836d-20210315105021092-2021-03-15-PmrY9L.gif" alt="协同办公"></p><p>如果我们的连接没有问题，就可以通过电脑给打印机发送指令，让它帮我们打印资料；或者将资料存储到我们的本地服务器；当然，也可以发布文章或视频到互联网上。</p><p>可问题是，我们虽然平时都在进行这些日常操作，可我们却并没有意识到网络的存在，或者说，我们并不太清楚这内部的工作流程与细节。我们之所以可以通过网络 <strong>浏览视频</strong>、<strong>下载资料</strong>、<strong>发送邮件或与朋友视频聊天</strong>，其实都是网络设备之间默契配合的结果。</p><h3><span id="1交换机">1.交换机</span></h3><p>那么，我们靠什么来连接这些网络设备呢？<strong>「交换机」</strong>，同时需要配合设备线缆，即可实现设备间的互连互通。</p><p><img src="https://img.hi-linux.com/staticfile/2ddd34d27eabbad32baecbcad5cdae84-2021-03-15-TI9cMz.gif" alt="交换机"></p><p>举个例子，公司办公室或学校教室里的电脑，大都可以使用网线来连接到墙上或其他位置的一个的网线接口中，而网线接口后面则是通过线缆又连接到了配线架上，这个配线架一般都放在一个单独的房间或柜子里面，接着，只需要再将配线架和 <strong>「交换机」</strong> 相连，即可实现一个最基础的网络连接。</p><p><img src="https://img.hi-linux.com/staticfile/dd01e6374c892d0e05d1daea412c09d1-2021-03-15-HlhmEP.gif" alt></p><p>对于 <strong>「交换机」</strong>，普通的家庭用户可能鲜有耳闻，那是因为，我们通常把线缆直接接到光猫或路由器上了，毕竟，我们家中的网络设备相对较少；但是对于一个企业或学校机构来说，它们的计算机非常多，对于线缆的管理也复杂起来，交换机就可以很好的解决这一问题。（后面的章节我们会详细展开讲解 <strong>「交换机」</strong>）</p><p><img src="https://img.hi-linux.com/staticfile/89b21b958bfac419efca4d53ccde8bce-20210315105036043-2021-03-15-uPdAcu.gif" alt="设备直连交换机"></p><p>当然，如果我们的设备并不是很多，我们也可以直接将线缆连接到交换机上，具体情况还要根据我们的设备与线缆的多少来决定的。</p><h3><span id="2无线连接">2.无线连接</span></h3><p>现实情况就是，除了台式机，我们最常用的就是移动设备了，手机，移动笔记本，平板电脑这些设备大都不需要使用线缆，也同样可以实现网络连接，这就是通过所谓的 <strong>「无线连接技术（Wi-Fi）」</strong>，来实现的。有了它，我们就可以在 Wi-Fi 覆盖的范围内进行无线上网了。</p><p><img src="https://img.hi-linux.com/staticfile/0a6a4a7ace20c645c48ef49557ea6e21-2021-03-15-1g9cKp.gif" alt="无线连接"></p><p>如果把无线设备也连接到交换机，我们就可以实现在一个局部网络中共享有线与无线设备的内容了，比如，将手机上的信息传输到打印机以实现数据打印；需要注意的是，无线连接与有线连接在数据传输速度上会有区别。</p><p><img src="https://img.hi-linux.com/staticfile/aba7496ed6f084b43453b06acdaf6bc4-2021-03-15-nAweir.gif" alt="无线设备连接到本地网络"></p><p>我在公司的对于移动设备的使用情况是这样的，当我坐在办公位上办公，我会使用有线连接，毕竟这样速度更快；但如果要开会的话，我就会把电脑网线拔了，拿着赤裸裸的笔记本去会议室，然后连接到无线网络。</p><p><img src="https://img.hi-linux.com/staticfile/3cddaf73995bd37ab5a0546fbb44d4f2-20210315105046323-2021-03-15-Og9QF7.gif" alt="真实办公场景"></p><h3><span id="3网络协议">3.网络协议</span></h3><p>无论通过哪种方式进行连接，我们的最终目的，是要将信息从一台设备发送到另一台设备，因此，发送方和接收方必须相互理解才行，这就需要它们在网络中说相同的语言。虽然我们并不需要担心这个问题，毕竟设备之间基本都知道该如何组织数据并进行处理和发送。究其根本，就是因为他们都遵循了同一套规则，我们称这套规则为 <strong>「协议」</strong>。</p><p><img src="https://img.hi-linux.com/staticfile/e6d3cae0de6b53d54e8c1d9cf8c5bd66-20210315105057137-2021-03-15-TWZaLk.gif" alt="网络协议"></p><p>协议，就是 <strong>「给双方制定的通讯规则」</strong>，这意味着双方想要默契配合，就必须遵循这些协议，也正因如此，若一方出现问题，我们可以快速准确的定位到问题所在位置。</p><p>在计算机网络中，那些设计网络软件和硬件的工程师会严格遵循这套 <strong>「协议」</strong>，这样才能保证它们再网络中的畅通无阻！大家可能听说过诸如 <strong>「以太网」</strong> 之类的协议，你也可能听说过 <strong>「TCP(用于发送和接收数据)」</strong> 协议，或 **「HTTP(用于访问网络)」**协议，或 <strong>「SMTP(用于邮件收发)」</strong> 协议，后续章节会详细讲解…… 无论哪种协议，其最终目的，都是为了完成数据交互。</p><p><strong>通常，我们都会将几种协议结合使用以完成一项任务。</strong></p><h3><span id="4总结">4.总结</span></h3><ol><li>网络的作用就是将设备连接在一起，可以让设备之间进行资源共享、信息交流等功能</li><li>网络设备之间需要说共同的语言，遵循相同的规则，我们称之为「协议「</li><li>协议就是一组有关设备如何处理信息的指令</li></ol><h3><span id="5小测试">5.小测试</span></h3><ol><li>计算机连接到网络的两种方式分别是什么？</li><li>多个网络设备之间通常使用什么设备进行统一连接？</li><li>当你想通过一台计算机与另一台计算机交互，会应用到哪些协议？</li></ol><h2><span id="网络类型">网络类型</span></h2><p>在本小节，我们将学习以下内容：</p><ol><li>网络中的 <strong>节点</strong> 是什么？</li><li>根据网络节点的不同，我们可以构建哪些 <strong>网络类型</strong> ？</li><li>在我们的日常生活中，不同网络类型的 <strong>实际应用场景</strong> ？</li></ol><h3><span id="1网络节点">1.网络节点</span></h3><p>连接到网络中，并且能够通过通信通道发送、接收或转发信息的设备，我们都可以称其为一个 <strong>「网络节点」</strong>。比如 <strong>交换机</strong>、<strong>路由器</strong>、<strong>电脑</strong>、<strong>打印机</strong>、<strong>手机</strong> 等，都属于网络中的一个节点。</p><h3><span id="2soho网络">2.Soho网络</span></h3><p><img src="https://img.hi-linux.com/staticfile/8845acd31302596cd39383bdceead741-20210315105105464-2021-03-15-iqUHON.gif" alt></p><p>只有几个节点的小型网络，我们可以称之为 <strong>「soho网络」</strong>，小型办公室或家庭办公室中构建的网络都属于 <strong>「soho网络」</strong>。通常是只有几台电脑，打印机，几部手机和平板电脑的小范围内的网络环境。</p><p><img src="https://img.hi-linux.com/staticfile/00480f87a5ef9b3dc953df3b5289dfba-2021-03-15-SfyT2P.gif" alt="交换机"></p><p>值得一提的是，人们经常把「交换机」说成是「中央集线器&quot;，也确实，」交换机「长得的确像」集线器「，但是这里大家请记住，交换机和集线器是完全不同的东西！集线器真的是很老的技术了，我们现在基本上见不到。而交换机是现在非常常用的网络设备，一定要分清楚哦。</p><p><img src="https://img.hi-linux.com/staticfile/8eebc49e3ac319985ca0b27d2c4d2826-2021-03-15-pmqxRF.gif" alt="路由器（集成了交换机、路由器的功能）"></p><p>在soho网络中，我们通常使用路由器来完成网络连接，因为现代的路由器大多集成了路由器、交换机的功能，但通常因为路由器的接口很少，因此我们只能接入少量节点设备实现网络共享。</p><h3><span id="3局域网lan">3.局域网（LAN）</span></h3><p><img src="https://img.hi-linux.com/staticfile/5d27a97a2cd85a9e5e220b3116e3d54b-20210315105115056-2021-03-15-KMcuoy.gif" alt="企业网络"></p><p>但其实在一个公司企业里面，很明显光有一台路由器，一台交换机是远远不够的！例如，一个地方银行企业，他们的网络设备可能遍布几个楼层、甚至跨越多栋楼房，此时，将此规模的网络设备连接在一起的网络，我们称之为 <strong>「局域网(LAN)」</strong>。</p><p><img src="https://img.hi-linux.com/staticfile/b87d933f16478782b83735bd224e3084-20210315105119063-2021-03-15-kcFZQq.gif" alt="局域网 - 1"></p><p>其实」soho网络「也属于局域网，只不过」soho网络「连接了少数设备。而在企业网络中，我们将需要使用多台交换机与路由器的链接，我们可以理解为，就是将多个」soho网络「连接在一起的较大的网络结构。</p><p><img src="https://img.hi-linux.com/staticfile/7e25a032df4756d4570d1f5cf8729c8c-2021-03-15-Ci5T4S.gif" alt="局域网 - 2"></p><h3><span id="4广域网wan">4.广域网（WAN）</span></h3><p>虽然」局域网技术「可以让一个较大区域内的网络节点实现互连互通与信息共享，但如果这个区域再扩大，跨越了城市，跨越了地区该怎么办呢？就比如一个跨地区的银行企业，通常不会只在一个地区有办公楼，可能在全国各个地区都会有自己的办公楼，此时银行网络变得非常巨大，即使距离遥远，银行企业也想实现让所有的这些网络都连接在一起，此时，我们需要使用到新的网络构建技术 「广域网(WAN)」。</p><p><img src="https://img.hi-linux.com/staticfile/1-20210315104554845-2021-03-15-trNbY6.png" alt="广域网"></p><p>举个例子，假如有一家跨国公司在悉尼和墨尔本都有分公司，我们在悉尼的办公室分享了数据，在墨尔本的办公室想要获取这些数据，在这个过程中，我们就需要联系服务提供商来帮助我们实现远距离数据的交互。</p><p><img src="https://img.hi-linux.com/staticfile/8e390b2a79dc6100405bc23f2522182d-2021-03-15-aPfKtc.gif" alt="悉尼办公室分享数据到墨尔本办公室"></p><h3><span id="5总结">5.总结</span></h3><ol><li><strong>soho网络：</strong> 通常适合家庭或小型办公室</li><li><strong>局域网LAN：</strong> 适合多个楼层的网络架构</li><li><strong>城域网MAN：</strong> 适合10~100km范围内的网络架构</li><li><strong>广域网WAN：</strong> 适合100km以上，通常是跨越国家与地区的大型网络架构</li></ol><h3><span id="6小测试">6.小测试</span></h3><ol><li>你在一家财务部门、工程部门、管理部门各有一个 <strong>局域网LAN</strong> 的公司工作，三个部门的局域网都连接在一起，这个网络仍然是 <strong>局域网LAN</strong> 吗？</li><li>除了总公司，该公司还有六个分公司，那么这家公司的网络连接类型属于哪种网络？</li></ol><h3><span id="结语">结语</span></h3><p>如果你觉得文章很棒，可以转发，评论该文章；如果文章有问题，请留言或私信告诉我，我会在第一时间对内容进行调整，这将会帮助每一位想要学习网络基础的小伙伴，感谢！抱拳！</p><h4><span id="原作者">原作者：</span></h4><ul><li>原文作者：Network Direction</li><li>链接地址：<a href="https://www.youtube.com/watch?v=v8aYhOxZuNg&amp;list=PLDQaRcbiSnqF5U8ffMgZzS7fq1rHUI3Q8&amp;index=16&amp;t=28s" target="_blank" rel="noopener">点击查看</a></li></ul><blockquote><p>本文转载自：「 少数派 」，原文：<a href="https://sspai.com/post/64634" target="_blank" rel="noopener">https://sspai.com/post/64634</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;欢迎来到网络世界，《小白也能看懂的网络基础》系列文章会从零开始帮助你构建网络的基础知识。如果你完全没有接触过网络相关的内容，那我们是一样的，在学习过程中我们肯定遇到了相同的问题！写下这些文章一方面要记录自己的学习历程，另一方面也希望帮到同样想要学习网络基础的小伙伴。&lt;/p&gt;
&lt;p&gt;文章的部分内容与素材是我从【Youtube平台】的【&lt;a href=&quot;https://www.youtube.com/channel/UCtuXekfqj-paqsxtqVNCC2A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Network Direction&lt;/a&gt;】发布的系列视频学习和搜集过来的，翻译不易，部分内容可能无法做到尽善尽美，甚至可能会有部分瑕疵，我会尽力让文章内容通俗易懂，覆盖全面。若各位小伙伴发现任何问题，希望能够留言或私信告诉我，在下不胜感激！当然，我也会在第一时间进行更正。&lt;/p&gt;
&lt;p&gt;在往后的每一篇文章中，我都会把看到文章的小伙伴当成是完全没有网络经验的小白，我的目标是和零基础小白一起建立坚实的网络基础，网络大神请略过此系列文章。&lt;/p&gt;
&lt;p&gt;让我们开始网络之旅吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络" scheme="https://www.hi-linux.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="网络" scheme="https://www.hi-linux.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅的给 Docker 配置网络代理</title>
    <link href="https://www.hi-linux.com/posts/32693.html"/>
    <id>https://www.hi-linux.com/posts/32693.html</id>
    <published>2021-03-15T01:00:00.000Z</published>
    <updated>2021-03-15T01:28:03.518Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>有时因为网络原因，比如公司 NAT，或其它啥的，需要使用代理。 <code>Docker</code> 的代理配置，略显复杂，因为有三种场景。 但基本原理都是一致的，都是利用 <code>Linux</code> 的 <code>http_proxy</code> 等环境变量。</p><h2><span id="dockerd-代理">Dockerd 代理</span></h2><p>在执行<code>docker pull</code>时，是由守护进程<code>dockerd</code>来执行。 因此，代理需要配在<code>dockerd</code>的环境中。 而这个环境，则是受<code>systemd</code>所管控，因此实际是<code>systemd</code>的配置。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line">sudo touch /etc/systemd/system/docker.service.d/proxy.conf</span><br></pre></td></tr></table></figure><p>在这个<code>proxy.conf</code>文件（可以是任意<code>*.conf</code>的形式）中，添加以下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">"HTTP_PROXY=http://proxy.example.com:8080/"</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">"HTTPS_PROXY=http://proxy.example.com:8080/"</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">"NO_PROXY=localhost,127.0.0.1,.example.com"</span></span><br></pre></td></tr></table></figure><p>其中，<code>proxy.example.com:8080</code> 要换成可用的免密代理。 通常使用 <code>cntlm</code> 在本机自建免密代理，去对接公司的代理。 可参考《<a href="https://note.qidong.name/content/2018/11/cntlm-proxy/" target="_blank" rel="noopener">Linux下安装配置Cntlm代理</a>》。</p><a id="more"></a><h2><span id="container-代理">Container 代理</span></h2><p>在容器运行阶段，如果需要代理上网，则需要配置 <code>~/.docker/config.json</code>。 以下配置，只在Docker 17.07及以上版本生效。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"proxies"</span>:</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="attr">"default"</span>:</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">"httpProxy"</span>: <span class="string">"http://proxy.example.com:8080"</span>,</span><br><span class="line">     <span class="attr">"httpsProxy"</span>: <span class="string">"http://proxy.example.com:8080"</span>,</span><br><span class="line">     <span class="attr">"noProxy"</span>: <span class="string">"localhost,127.0.0.1,.example.com"</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是用户级的配置，除了 <code>proxies</code>，<code>docker login</code> 等相关信息也会在其中。 而且还可以配置信息展示的格式、插件参数等。</p><p>此外，容器的网络代理，也可以直接在其运行时通过 <code>-e</code> 注入 <code>http_proxy</code> 等环境变量。 这两种方法分别适合不同场景。 <code>config.json</code> 非常方便，默认在所有配置修改后启动的容器生效，适合个人开发环境。 在CI/CD的自动构建环境、或者实际上线运行的环境中，这种方法就不太合适，用 <code>-e</code> 注入这种显式配置会更好，减轻对构建、部署环境的依赖。 当然，在这些环境中，最好用良好的设计避免配置代理上网。</p><h2><span id="docker-build-代理">Docker Build 代理</span></h2><p>虽然 <code>docker build</code> 的本质，也是启动一个容器，但是环境会略有不同，用户级配置无效。 在构建时，需要注入 <code>http_proxy</code> 等参数。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker build . \</span><br><span class="line">    --build-arg <span class="string">"HTTP_PROXY=http://proxy.example.com:8080/"</span> \</span><br><span class="line">    --build-arg <span class="string">"HTTPS_PROXY=http://proxy.example.com:8080/"</span> \</span><br><span class="line">    --build-arg <span class="string">"NO_PROXY=localhost,127.0.0.1,.example.com"</span> \</span><br><span class="line">    -t your/image:tag</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：无论是 <code>docker run</code> 还是 <code>docker build</code>，默认是网络隔绝的。 如果代理使用的是 <code>localhost:3128</code> 这类，则会无效。 这类仅限本地的代理，必须加上 <code>--network host</code> 才能正常使用。 而一般则需要配置代理的外部IP，而且代理本身要开启 Gateway 模式。</p><h2><span id="重启生效">重启生效</span></h2><p>代理配置完成后，<code>reboot</code> 重启当然可以生效，但不重启也行。</p><p><code>docker build</code> 代理是在执行前设置的，所以修改后，下次执行立即生效。 Container 代理的修改也是立即生效的，但是只针对以后启动的 Container，对已经启动的 Container 无效。</p><p><code>dockerd</code> 代理的修改比较特殊，它实际上是改 <code>systemd</code> 的配置，因此需要重载 <code>systemd</code> 并重启 <code>dockerd</code> 才能生效。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2><span id="参考">参考</span></h2><ul><li><a href="https://docs.docker.com/config/daemon/systemd/" target="_blank" rel="noopener">Control Docker with systemd | Docker Documentation</a></li><li><a href="https://docs.docker.com/network/proxy/" target="_blank" rel="noopener">Configure Docker to use a proxy server | Docker Documentation</a></li><li><a href="https://docs.docker.com/engine/reference/commandline/cli/" target="_blank" rel="noopener">Use the Docker command line | Docker Documentation</a></li></ul><blockquote><p>本文转载自：「 零壹軒·笔记 」，原文：<a href="http://t.cn/A6tMEC2k" target="_blank" rel="noopener">http://t.cn/A6tMEC2k</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时因为网络原因，比如公司 NAT，或其它啥的，需要使用代理。 &lt;code&gt;Docker&lt;/code&gt; 的代理配置，略显复杂，因为有三种场景。 但基本原理都是一致的，都是利用 &lt;code&gt;Linux&lt;/code&gt; 的 &lt;code&gt;http_proxy&lt;/code&gt; 等环境变量。&lt;/p&gt;
&lt;h2 id=&quot;Dockerd-代理&quot;&gt;Dockerd 代理&lt;/h2&gt;
&lt;p&gt;在执行&lt;code&gt;docker pull&lt;/code&gt;时，是由守护进程&lt;code&gt;dockerd&lt;/code&gt;来执行。 因此，代理需要配在&lt;code&gt;dockerd&lt;/code&gt;的环境中。 而这个环境，则是受&lt;code&gt;systemd&lt;/code&gt;所管控，因此实际是&lt;code&gt;systemd&lt;/code&gt;的配置。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo mkdir -p /etc/systemd/system/docker.service.d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo touch /etc/systemd/system/docker.service.d/proxy.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个&lt;code&gt;proxy.conf&lt;/code&gt;文件（可以是任意&lt;code&gt;*.conf&lt;/code&gt;的形式）中，添加以下内容：&lt;/p&gt;
&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;[Service]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Environment&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;HTTP_PROXY=http://proxy.example.com:8080/&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Environment&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;HTTPS_PROXY=http://proxy.example.com:8080/&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Environment&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;NO_PROXY=localhost,127.0.0.1,.example.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中，&lt;code&gt;proxy.example.com:8080&lt;/code&gt; 要换成可用的免密代理。 通常使用 &lt;code&gt;cntlm&lt;/code&gt; 在本机自建免密代理，去对接公司的代理。 可参考《&lt;a href=&quot;https://note.qidong.name/content/2018/11/cntlm-proxy/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Linux下安装配置Cntlm代理&lt;/a&gt;》。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.hi-linux.com/categories/docker/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
  </entry>
  
</feed>
