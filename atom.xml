<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>运维之美</title>
  
  <subtitle>种一棵树最好的时间是十年前，其次是现在。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.hi-linux.com/"/>
  <updated>2020-09-08T03:05:44.349Z</updated>
  <id>https://www.hi-linux.com/</id>
  
  <author>
    <name>Mike</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GitHub 镜像仓库服务 Ghcr 快速上手教程</title>
    <link href="https://www.hi-linux.com/posts/29574.html"/>
    <id>https://www.hi-linux.com/posts/29574.html</id>
    <published>2020-09-08T01:00:00.000Z</published>
    <updated>2020-09-08T03:05:44.349Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2 id="github-container-registry">Github Container Registry</h2><p>9 月 1 日，<code>GitHub</code> 宣布 <code>Github Container Registry</code> 开始公测，测试期间提供免费、无限容量的 <code>Docker</code> 镜像仓库服务。</p><p>再也不用担心，<code>docker.io</code> 一言不合清理镜像了。真好真香！</p><p><code>GitHub</code> 正在以托管代码仓库为切入点，逐步覆盖整个研发工具链，打造一站式 <code>DevOps</code> 平台。项目管理有 <code>Issues</code> 、<code>Projects</code>，包管理有 <code>Packages</code>，<code>CI</code> 有 <code>Actions</code>，知识管理有 <code>Wiki</code> ，覆盖面越来越广。</p><p>接下来应该就是 <code>CD</code> 部分了，提供容器托管服务是个不错的选择。@GitHub</p><h2 id="推送第一个镜像">推送第一个镜像</h2><p>下面我们来试试推送一个镜像。</p><ol><li>创建登陆 Token</li></ol><p>直接使用 <code>GitHub</code> 的账户密码推送镜像会提示错误:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unauthorized: Your token has not been granted the required scopes to execute this query. The &#39;id&#39; field requires one of the following scopes: [&#39;read:packages&#39;], but your token has only been granted the: [&#39;&#39;] scopes. Please modify your token&#39;s scopes at: https:&#x2F;&#x2F;github.com&#x2F;settings&#x2F;tokens.</span><br></pre></td></tr></table></figure><p><code>Github Container registry</code> 需要使用 <code>https://github.com/settings/tokens/new</code> 页面创建的 <code>Token</code> 作为密码才可以推送镜像。</p><p>打开上面的链接，勾选 <code>write:packages</code> 和 <code>read:packages</code> ，<code>repo</code> 会自动选中，创建 <code>Token</code>。</p><p><img src="https://www.hi-linux.com/img/linux/ghcr1.png" alt=""></p><p><img src="https://www.hi-linux.com/img/linux/ghcr2.png" alt=""></p><p>下面以 <code>XXX</code> 代指这里的 <code>Token</code> 值。</p><ol start="2"><li>镜像推送</li></ol><ul><li>登陆</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;XXX&quot; | docker login ghcr.io -u shaowenchen --password-stdin</span><br><span class="line"></span><br><span class="line">WARNING! Your password will be stored unencrypted in &#x2F;root&#x2F;.docker&#x2F;config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;commandline&#x2F;login&#x2F;#credentials-store</span><br></pre></td></tr></table></figure><ul><li>新建 Tag</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看镜像列表</span><br><span class="line">$ docker images</span><br><span class="line">mysql     8.0.11      5dbe5b6313e1        2 years ago         445MB</span><br><span class="line"></span><br><span class="line"># 新建 Tag</span><br><span class="line">$ docker tag 5dbe5b6313e1 ghcr.io&#x2F;shaowenchen&#x2F;mysql</span><br></pre></td></tr></table></figure><ul><li>推送</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker push ghcr.io&#x2F;shaowenchen&#x2F;mysql</span><br><span class="line"></span><br><span class="line">The push refers to repository [ghcr.io&#x2F;shaowenchen&#x2F;mysql]</span><br><span class="line">ae2d2cded00e: ...</span><br><span class="line">latest: digest: sha256:d98a807f255bd60cd7807af6a11f94cd2456a2908a12adb3737088473c1625a2 size: 2828</span><br></pre></td></tr></table></figure><p>这样就完成了镜像的推送。但是镜像并不是每个人都可以 <code>pull</code> ，下面接着来看下镜像的可见性管理。</p><ol start="3"><li>可见性管理</li></ol><p>推送完成镜像之后，在个人的主页 <code>packages</code> 标签页下面，可以看到镜像列表。</p><p><img src="https://www.hi-linux.com/img/linux/ghcr3.png" alt=""></p><p>默认推送的镜像是 <code>Private</code> ，只有授权的账户才可以 <code>pull</code> 。而 <code>Public</code> 镜像可以匿名 <code>pull</code> ，没有限制。</p><ul><li>Private</li></ul><p><img src="https://www.hi-linux.com/img/linux/ghcr4.png" alt=""></p><p><img src="https://www.hi-linux.com/img/linux/ghcr5.png" alt=""></p><p>在 <code>Private</code> 镜像的 <code>Packages settings</code> 页面，可以将 <code>Private</code> 镜像改为 <code>Public</code> ，还可以进行授权的管理 <code>Manage Access</code>。</p><ul><li>Public</li></ul><p><img src="https://www.hi-linux.com/img/linux/ghcr6.png" alt=""></p><p><img src="https://www.hi-linux.com/img/linux/ghcr7.png" alt=""></p><p>需要注意的是在 <code>Public</code> 镜像的 <code>Packages settings</code> 页面，无法修改镜像的可见性，只能删除镜像。</p><h2 id="与-dockerpkggithubcom-的区别">与 <a href="http://docker.pkg.github.com" target="_blank" rel="noopener">docker.pkg.github.com</a> 的区别</h2><p><code>ghcr.io</code> 与 <code>docker.pkg.github.com</code> 类似，都是提供镜像仓库服务，使用一样的鉴权方式。但是也有些不同：</p><ol><li>维度不同</li></ol><p><code>ghcr.io</code> 针对的是账户维度，是以账户为基本对象提供的服务。而 <code>docker.pkg.github.com</code> 针对的是仓库维度，是以仓库为基本对象提供的服务。</p><ol start="2"><li>管理粒度不同</li></ol><p><img src="https://www.hi-linux.com/img/linux/ghcr8.png" alt=""></p><p><code>docker.pkg.github.com</code> 中的镜像不允许直接删除，只能通过删除仓库的方式，关联删除镜像。</p><p>而在 <code>ghcr.io</code> 中，可以直接完全管理镜像。</p><ol start="3"><li>镜像格式不同</li></ol><p>对比一下两者的镜像格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker.pkg.github.com&#x2F;OWNER&#x2F;REPOSITORY&#x2F;IMAGE-NAME</span><br><span class="line">ghcr.io&#x2F;OWNER&#x2F;IMAGE-NAME</span><br></pre></td></tr></table></figure><p><code>docker.pkg.github.com</code> 镜像格式形如 <code>docker.pkg.github.com/shaowenchen/pipeline-test/mysql</code> ，在名字中会带上仓库名。而 <code>ghcr.io</code> 提供的 <code>ghcr.io/shaowenchen/mysql</code> 与其他镜像仓库的命名规范更加一致。</p><h2 id="参考">参考</h2><ol><li><a href="https://docs.github.com/en/packages/using-github-packages-with-your-projects-ecosystem/configuring-docker-for-use-with-github-packages/" target="_blank" rel="noopener">https://docs.github.com/en/packages/using-github-packages-with-your-projects-ecosystem/configuring-docker-for-use-with-github-packages/</a></li><li><a href="https://github.blog/2020-09-01-introducing-github-container-registry/" target="_blank" rel="noopener">https://github.blog/2020-09-01-introducing-github-container-registry/</a></li></ol><blockquote><p>本文转载自：「陈少文的博客」，原文：<a href="http://suo.im/5MiEVF%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">http://suo.im/5MiEVF，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;div id=&quot;vip-container&quot;&gt;&lt;h2 id=&quot;github-container-registry&quot;&gt;Github Container Registry&lt;/h2&gt;
&lt;p&gt;9 月 1 日，&lt;code&gt;GitHub&lt;/code&gt; 宣布 &lt;code&gt;Github
        
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.hi-linux.com/categories/docker/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
      <category term="GitHub" scheme="https://www.hi-linux.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Nali：一个离线查询 IP 地理信息和 CDN 提供商的终端利器</title>
    <link href="https://www.hi-linux.com/posts/13783.html"/>
    <id>https://www.hi-linux.com/posts/13783.html</id>
    <published>2020-09-07T01:00:00.000Z</published>
    <updated>2020-09-07T08:31:55.161Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2 id="什么是-nali">什么是 Nali</h2><p><code>dig</code>、<code>nslookup</code>、<code>traceroute</code> 等都是非常实用的网络调试工具，<code>Nali</code> 是一个可以自动解析这些工具 <code>stdout</code> 中的 <code>IP</code> 并附上所属 <code>ISP</code> 和地理信息，对这些已是瑞士军刀般的工具可谓如虎添翼。</p><p><code>Nali</code> 取自中文「哪里」。<code>Nali</code> 一开始是数年前由 <code>surfchen</code> 用 <code>C</code> 和 <code>Perl</code> 写成的小工具（<code>C</code> 用于解析纯真 <code>IP</code> 数据库，<code>Perl</code> 用于解析 stdout），如今已经失传。</p><p>今天给大家介绍两款基于 <code>GO</code> 语言和 <code>Nodejs</code> 开发的，且具有更多高级功能的新一代  <code>Nali</code>。</p><a id="more"></a><h2 id="nali-cli">Nali CLI</h2><p><code>Nali CLI</code> 采用 <code>Nodejs</code> 开发，在安装之前，你的环境必须已经具备 <code>Nodejs</code> 环境。</p><p><strong>项目地址：</strong></p><ul><li>GitHub: <a href="https://github.com/sukkaw/nali-cli" target="_blank" rel="noopener">https://github.com/sukkaw/nali-cli</a></li><li>官网：<a href="https://nali.skk.moe/" target="_blank" rel="noopener">https://nali.skk.moe/</a></li></ul><h3 id="安装">安装</h3><p>对于环境中有 <code>Node.js</code> 的，可以直接通过 <code>NPM</code> 和 <code>Yarn</code> 安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># NPM</span><br><span class="line">$ npm i nali-cli -g</span><br><span class="line"># Yarn</span><br><span class="line">$ yarn global add nali-cli</span><br></pre></td></tr></table></figure><p><code>Nali CLI</code> 也有预编译好的供 <code>macOS x64</code> 和 <code>Linux x64</code> 的二进制文件，可以在 <code>GitHub Repo</code> 中的 <a href="https://github.com/SukkaW/nali-cli/tree/master/bin" target="_blank" rel="noopener">bin</a> 目录中下载。</p><p>首次运行 <code>Nali CLI</code> 时会自动下载所需的 <code>qqwry.dat</code> 到 <code>$HOME/.config/nali-cli/</code> 目录下。</p><h3 id="常用命令行语法">常用命令行语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ nali --help</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Usage: nali &lt;command&gt; [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -v, --version  版本信息</span><br><span class="line">  -h, --help     output usage information</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  parse          解析 stdin 或参数中的 IP 信息 (默认)</span><br><span class="line">  update         更新 IP 库</span><br><span class="line">  help [cmd]     display help for [cmd]</span><br><span class="line"></span><br><span class="line">$ nali update --help       </span><br><span class="line">Usage: update [options]</span><br><span class="line"></span><br><span class="line">更新 IP 库 (qqwry.dat)</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -r, --remote  获取最新 IP 库版本信息</span><br><span class="line">  -f, --force   强制更新 IP 库</span><br><span class="line">  -y, --yes     直接更新 IP 库</span><br><span class="line">  -h, --help    output usage information</span><br></pre></td></tr></table></figure><h3 id="使用">使用</h3><p><code>Nali CLI</code> 支持从传入的参数中解析 <code>IP</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ nali 11.4.5.14</span><br><span class="line">11.4.5.14 [美国 俄亥俄州哥伦布市 DoD 网络信息中心]</span><br><span class="line"></span><br><span class="line">$ nali Cloudflare 1.0.0.1 1.1.1.1</span><br><span class="line">Cloudflare 1.1.1.1 [美国 APNIC&amp;CloudFlare 公共 DNS 服务器] 1.0.0.1 [美国 APNIC&amp;CloudFlare 公共 DNS 服务器]</span><br><span class="line"></span><br><span class="line">$ nali 114.514.191.9 114.5.1.4</span><br><span class="line">114.514.191.8 114.5.1.4 [印度尼西亚]</span><br></pre></td></tr></table></figure><p>除此以外，<code>Nali CLI</code> 内置了以下几个常用工具：</p><ul><li>nali-dig</li><li>nali-nslookup</li><li>nali-ping</li><li>nali-tracepath</li><li>nali-traceroute</li></ul><blockquote><p>注意，上述工具只是 Wrapper，使用时仍然需要安装原始程序。比如要使用 nali-dig 和 nali-nslookup 需要先安装 Bind (dnsutils)。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ nali-nslookup nali.skk.moe 1.1.1.1</span><br><span class="line">Server:         1.1.1.1 [美国 APNIC&amp;CloudFlare 公共 DNS 服务器]</span><br><span class="line">Address:        1.1.1.1 [美国 APNIC&amp;CloudFlare 公共 DNS 服务器]#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:   nali.skk.moe</span><br><span class="line">Address: 104.18.100.28 [美国 CloudFlare 公司 CDN 节点]</span><br><span class="line">Name:   nali.skk.moe</span><br><span class="line">Address: 104.18.101.28 [美国 CloudFlare 公司 CDN 节点]</span><br><span class="line">Name:   nali.skk.moe</span><br><span class="line">Address: 2606:4700::6812:641c</span><br><span class="line">Name:   nali.skk.moe</span><br><span class="line">Address: 2606:4700::6812:651c</span><br></pre></td></tr></table></figure><p><code>Nali CLI</code> 还支持从外部的 <code>stdin</code> 中解析和查询 <code>IP</code> 信息，因此像 <code>mtr</code> 这类未被 <code>Nali CLI</code> 包装的工具也可以使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 这里以 dig 为例</span><br><span class="line"></span><br><span class="line">$ dig nali.skk.moe @1.1.1.1 +short | nali</span><br><span class="line">104.18.100.28 [美国 CloudFlare 公司 CDN 节点]</span><br><span class="line">104.18.101.28 [美国 CloudFlare 公司 CDN 节点]</span><br></pre></td></tr></table></figure><p>对于 <code>mtr</code> 等，还可以自行创建 <code>nali-mtr</code> 文件并添加到 <code>PATH</code> 中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line"></span><br><span class="line">mtr $@ 2&gt;&amp;1 | nali</span><br></pre></td></tr></table></figure><p>也可以直接在 <code>.bashrc</code> 或 <code>.zshrc</code> 中注册 <code>nali-mtr</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nali-mtr() &#123;</span><br><span class="line">  mtr $@ 2&gt;&amp;1 | nali</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Nali CLI</code> 也可以更新 <code>qqwry.dat</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nali upadte</span><br></pre></td></tr></table></figure><h2 id="nali-go-版本">Nali （Go 版本）</h2><p><code>Nali</code> （Go 版本）是在 <code>Sukka</code> 的 <code>Nodejs</code> 版本上进行改良的，它在原有功能的基础上增加了对 <code>IPv6</code> 的支持，并且增加了 <code>Geoip2</code> 数据库。</p><p><strong>项目地址：</strong></p><ul><li>GitHub: <a href="https://github.com/zu1k/nali" target="_blank" rel="noopener">https://github.com/zu1k/nali</a></li></ul><h3 id="支持的功能">支持的功能</h3><ul><li>纯真 IPv4 离线数据库</li><li>ZX IPv6 离线数据库</li><li>Geoip2 城市数据库 (可选)</li><li>IPIP 数据库 (可选)</li><li>CDN 服务提供商查询</li><li>支持管道处理</li><li>支持交互式查询</li><li>同时支持 IPv4 和 IPv6</li><li>查询完全离线</li><li>全平台支持</li></ul><h3 id="安装">安装</h3><ol><li>从源码安装</li></ol><p><code>Nali</code> 需要预先安装 <code>Go</code>. 安装后可以从源码安装软件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get -u -v github.com&#x2F;zu1k&#x2F;nali</span><br></pre></td></tr></table></figure><ol start="2"><li>下载预编译的可执行程序（推荐）</li></ol><p>直接从项目的 <a href="https://github.com/zu1k/nali/releases" target="_blank" rel="noopener">Release</a> 页面下载预编译好的可执行程序，你只需要选择适合你系统和硬件架构的版本下载，解压后直接运行即可。</p><h3 id="常用命令语法">常用命令语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ nali --help</span><br><span class="line">Usage:</span><br><span class="line">  nali [flags]</span><br><span class="line">  nali [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  cdn         Query cdn service provider</span><br><span class="line">  help        Help about any command</span><br><span class="line">  parse       Query IP information</span><br><span class="line">  update      update chunzhen ip database</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help     help for nali</span><br><span class="line">  -t, --toggle   Help message for toggle</span><br><span class="line"></span><br><span class="line">Use &quot;nali [command] --help&quot; for more information about a command.</span><br></pre></td></tr></table></figure><h3 id="使用">使用</h3><p>第一次使用时会需要点时间，因为要下载纯真和 <code>CDN</code> 相关数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ nali                                                         </span><br><span class="line">2020&#x2F;08&#x2F;20 17:37:14 文件不存在，尝试从网络获取最新纯真 IP 库</span><br><span class="line">2020&#x2F;08&#x2F;20 17:37:32 已将最新的 纯真IP库 保存到本地: &#x2F;Users&#x2F;Mike&#x2F;.nali&#x2F;qqwry.dat</span><br><span class="line">2020&#x2F;08&#x2F;20 17:37:32 文件不存在，尝试从网络获取最新ZX IPv6数据库</span><br><span class="line">2020&#x2F;08&#x2F;20 17:37:33 已将最新的 ZX IPv6数据库 保存到本地: &#x2F;Users&#x2F;Mike&#x2F;.nali&#x2F;ipv6wry.db</span><br><span class="line">2020&#x2F;08&#x2F;20 17:37:33 文件不存在，尝试从网络获取最新CDN数据库</span><br><span class="line">2020&#x2F;08&#x2F;20 17:37:34 已将最新的 CDN数据库 保存到本地: &#x2F;Users&#x2F;Mike&#x2F;.nali&#x2F;cdn.json</span><br></pre></td></tr></table></figure><ol><li>查询一个 IP 的地理信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ nali 1.2.3.4</span><br><span class="line">1.2.3.4 [澳大利亚 APNIC Debogon-prefix网络]</span><br><span class="line"></span><br><span class="line"># 或者使用管道</span><br><span class="line">$ echo IP 6.6.6.6 | nali</span><br><span class="line">IP 6.6.6.6 [美国 亚利桑那州华楚卡堡市美国国防部网络中心]</span><br></pre></td></tr></table></figure><ol start="2"><li>同时查询多个IP的地理信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ nali 1.2.3.4 4.3.2.1 123.23.3.0</span><br><span class="line">1.2.3.4 [澳大利亚 APNIC Debogon-prefix网络]</span><br><span class="line">4.3.2.1 [美国 新泽西州纽瓦克市Level3Communications]</span><br><span class="line">123.23.3.0 [越南 越南邮电集团公司]</span><br></pre></td></tr></table></figure><ol start="3"><li>交互式查询</li></ol><p>使用 <code>exit</code> 或 <code>quit</code> 退出查询。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ nali</span><br><span class="line">123.23.23.23</span><br><span class="line">123.23.23.23 [越南 越南邮电集团公司]</span><br><span class="line">1.0.0.1</span><br><span class="line">1.0.0.1 [美国 APNIC&amp;CloudFlare公共DNS服务器]</span><br><span class="line">8.8.8.8</span><br><span class="line">8.8.8.8 [美国 加利福尼亚州圣克拉拉县山景市谷歌公司DNS服务器]</span><br><span class="line">quit</span><br></pre></td></tr></table></figure><ol start="4"><li>与 dig 命令配合使用</li></ol><p>需要你系统中已经安装好 <code>dig</code> 程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ dig nali.lgf.im +short | nali</span><br><span class="line">104.28.2.115 [美国 CloudFlare公司CDN节点]</span><br><span class="line">104.28.3.115 [美国 CloudFlare公司CDN节点]</span><br><span class="line">172.67.135.48 [美国 CloudFlare节点]</span><br></pre></td></tr></table></figure><ol start="5"><li>与 nslookup 命令配合使用</li></ol><p>需要你系统中已经安装好 <code>nslookup</code> 程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ nslookup nali.lgf.im 8.8.8.8 | nali</span><br><span class="line">Server:         8.8.8.8 [美国 加利福尼亚州圣克拉拉县山景市谷歌公司DNS服务器]</span><br><span class="line">Address:        8.8.8.8 [美国 加利福尼亚州圣克拉拉县山景市谷歌公司DNS服务器]#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:   nali.lgf.im</span><br><span class="line">Address: 104.28.3.115 [美国 CloudFlare公司CDN节点]</span><br><span class="line">Name:   nali.lgf.im</span><br><span class="line">Address: 104.28.2.115 [美国 CloudFlare公司CDN节点]</span><br><span class="line">Name:   nali.lgf.im</span><br><span class="line">Address: 172.67.135.48 [美国 CloudFlare节点]</span><br></pre></td></tr></table></figure><ol start="6"><li>与任意程序配合使用</li></ol><p>因为 <code>nali</code> 支持管道处理，所以可以和任意程序配合使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash abc.sh | nali</span><br></pre></td></tr></table></figure><p><code>Nali</code> 将在 <code>IP</code> 后面插入 <code>IP</code> 地理信息，<code>CDN</code> 域名后面插入 <code>CDN</code> 服务提供商信息。</p><ol start="7"><li>支持 IPv6</li></ol><p>和 <code>IPv4</code> 用法完全相同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ nslookup google.com | nali</span><br><span class="line">Server:         127.0.0.53 [局域网 IP]</span><br><span class="line">Address:        127.0.0.53 [局域网 IP]#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:   google.com</span><br><span class="line">Address: 216.58.211.110 [美国 Google全球边缘网络]</span><br><span class="line">Name:   google.com</span><br><span class="line">Address: 2a00:1450:400e:809::200e [荷兰Amsterdam Google Inc. 服务器网段]</span><br></pre></td></tr></table></figure><ol start="8"><li>查询 CDN 服务提供商</li></ol><p>因为 <code>CDN</code> 服务通常使用 <code>CNAME</code> 的域名解析方式，所以推荐与 <code>nslookup</code> 或者 <code>dig</code> 配合使用，在已经知道 <code>CNAME</code> 后可单独使用。</p><ul><li>只查询 CDN 服务提供商</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ nslookup www.gov.cn | nali cdn</span><br><span class="line">Server:         127.0.0.53</span><br><span class="line">Address:        127.0.0.53#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">www.gov.cn      canonical name &#x3D; www.gov.cn.bsgslb.cn [白山云 CDN].</span><br><span class="line">www.gov.cn.bsgslb.cn [白山云 CDN]       canonical name &#x3D; zgovweb.v.bsgslb.cn [白山云 CDN].</span><br><span class="line">Name:   zgovweb.v.bsgslb.cn [白山云 CDN]</span><br><span class="line">Address: 185.232.56.148</span><br><span class="line">Name:   zgovweb.v.bsgslb.cn [白山云 CDN]</span><br><span class="line">Address: 185.232.56.147</span><br><span class="line">Name:   zgovweb.v.bsgslb.cn [白山云 CDN]</span><br><span class="line">Address: 2001:428:6402:21b::6</span><br><span class="line">Name:   zgovweb.v.bsgslb.cn [白山云 CDN]</span><br><span class="line">Address: 2001:428:6402:21b::5</span><br></pre></td></tr></table></figure><ul><li>查询所有信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ nslookup www.gov.cn | nali</span><br><span class="line">Server:         127.0.0.53 [局域网 IP]</span><br><span class="line">Address:        127.0.0.53 [局域网 IP]#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">www.gov.cn      canonical name &#x3D; www.gov.cn.bsgslb.cn [白山云 CDN].</span><br><span class="line">www.gov.cn.bsgslb.cn [白山云 CDN]       canonical name &#x3D; zgovweb.v.bsgslb.cn [白山云 CDN].</span><br><span class="line">Name:   zgovweb.v.bsgslb.cn [白山云 CDN]</span><br><span class="line">Address: 103.104.170.25 [新加坡 ]</span><br><span class="line">Name:   zgovweb.v.bsgslb.cn [白山云 CDN]</span><br><span class="line">Address: 2001:428:6402:21b::5 [美国Louisiana州Monroe Qwest Communications Company, LLC (CenturyLink)]</span><br><span class="line">Name:   zgovweb.v.bsgslb.cn [白山云 CDN]</span><br><span class="line">Address: 2001:428:6402:21b::6 [美国Louisiana州Monroe Qwest Communications Company, LLC (CenturyLink)]</span><br></pre></td></tr></table></figure><ul><li>单独使用</li></ul><p>需要提前查询到 <code>CNAME</code> 域名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nali cdn cdn.somecdncname.com</span><br></pre></td></tr></table></figure><h3 id="一些使用技巧">一些使用技巧</h3><ol><li>更新纯真数据库</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nali update</span><br><span class="line">2020&#x2F;07&#x2F;17 12:53:46 正在下载最新纯真 IP 库...</span><br><span class="line">2020&#x2F;07&#x2F;17 12:54:05 已将最新的纯真 IP 库保存到本地 &#x2F;root&#x2F;.nali&#x2F;qqwry.dat</span><br></pre></td></tr></table></figure><ol start="2"><li>使用自定义 IP 库</li></ol><p>使用自定义 <code>IP</code> 库前，你需要设置环境变量：<code>NALI_DB</code>。目前支持的变量内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Geoip2 [&#39;geoip&#39;, &#39;geoip2&#39;, &#39;geo&#39;]</span><br><span class="line">Chunzhen [&#39;chunzhen&#39;, &#39;qqip&#39;, &#39;qqwry&#39;]</span><br></pre></td></tr></table></figure><p>使用三方 <code>IP</code> 库，需要手动提前下载相应的 <code>IP</code> 数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Windows 平台</span><br><span class="line">## 使用geoip数据库</span><br><span class="line">set NALI_DB&#x3D;geoip</span><br><span class="line"></span><br><span class="line">## 使用ipip数据库</span><br><span class="line">set NALI_DB&#x3D;ipip</span><br><span class="line"></span><br><span class="line"># Linux平台</span><br><span class="line"></span><br><span class="line">## 使用geoip数据库</span><br><span class="line">export NALI_DB&#x3D;geoip</span><br><span class="line"></span><br><span class="line">## 使用ipip数据库</span><br><span class="line">export NALI_DB&#x3D;ipip</span><br></pre></td></tr></table></figure><h2 id="参考文档">参考文档</h2><ol><li><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></li><li><a href="https://blog.skk.moe/post/nali-cli/" target="_blank" rel="noopener">https://blog.skk.moe/post/nali-cli/</a></li><li><a href="https://juejin.im/post/6854573212865560584" target="_blank" rel="noopener">https://juejin.im/post/6854573212865560584</a></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-Nali&quot;&gt;什么是 Nali&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;dig&lt;/code&gt;、&lt;code&gt;nslookup&lt;/code&gt;、&lt;code&gt;traceroute&lt;/code&gt; 等都是非常实用的网络调试工具，&lt;code&gt;Nali&lt;/code&gt; 是一个可以自动解析这些工具 &lt;code&gt;stdout&lt;/code&gt; 中的 &lt;code&gt;IP&lt;/code&gt; 并附上所属 &lt;code&gt;ISP&lt;/code&gt; 和地理信息，对这些已是瑞士军刀般的工具可谓如虎添翼。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nali&lt;/code&gt; 取自中文「哪里」。&lt;code&gt;Nali&lt;/code&gt; 一开始是数年前由 &lt;code&gt;surfchen&lt;/code&gt; 用 &lt;code&gt;C&lt;/code&gt; 和 &lt;code&gt;Perl&lt;/code&gt; 写成的小工具（&lt;code&gt;C&lt;/code&gt; 用于解析纯真 &lt;code&gt;IP&lt;/code&gt; 数据库，&lt;code&gt;Perl&lt;/code&gt; 用于解析 stdout），如今已经失传。&lt;/p&gt;
&lt;p&gt;今天给大家介绍两款基于 &lt;code&gt;GO&lt;/code&gt; 语言和 &lt;code&gt;Nodejs&lt;/code&gt; 开发的，且具有更多高级功能的新一代  &lt;code&gt;Nali&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Nali" scheme="https://www.hi-linux.com/tags/Nali/"/>
    
  </entry>
  
  <entry>
    <title>分享两个冷门但又超实用的 VIM 使用技巧</title>
    <link href="https://www.hi-linux.com/posts/613.html"/>
    <id>https://www.hi-linux.com/posts/613.html</id>
    <published>2020-08-31T01:00:00.000Z</published>
    <updated>2020-08-31T01:42:14.359Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>最近在使用 <code>VIM</code> 时遇到两个新的问题，觉得还很挺有价值的。现在将处理方法总结后，分享给大家。</p><h2 id="vim-中-deletebackspace键不能向左删除">VIM 中 delete（backspace）键不能向左删除</h2><p>MacOS 下打开 <code>vim</code> 编辑文本，进入插入模式，要删除编辑之前的保存过的几个字符，按下 <code>delete</code> 键删除它们，万万没想到呀！只听到 &quot;duang duang duang”，竟然无效！</p><p>有一点先明确一下，在 <code>Mac</code> 的键盘中没有 <code>backspace</code> 键，有个键叫 <code>delete</code>，其实相当于 <code>Window</code> 下的 <code>backspace</code> 键，编辑文本时按下都具有向左删除字符的功能。</p><p><strong>问题的原因</strong></p><p>网上搜索得知，出现开头说的令人恼火的问题的原因是：</p><blockquote><p>VIM 使用了 compatible 模式，或者把 backspace 变量设置为空。其实 compatible 模式是 VIM 为了兼容 VI 而出现的配置，它的作用是使 VIM 的操作行为和规范和 VI 一致，而这种模式下 backspace 配置是空的。即意味着 backspace 无法删除 indent ， end of line ， start 这三种字符。</p></blockquote><p>在默认状态下，delete（backspace）按下只会删除本次插入模式下插入的文本，这跟 backspace 的模式设置有关，其模式可以设置为以下三种模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 same as “:set backspace&#x3D;” (Vi compatible)</span><br><span class="line">1 same as “:set backspace&#x3D;indent,eol”</span><br><span class="line">2 same as “:set backspace&#x3D;indent,eol,start”</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>问题的解决</strong></p><p>知道原因后，就好解决了，我们只需要将 <code>backspace</code> 的模式设置成 <code>2</code> 就可以了。</p><p>编辑 <code>~/.vimrc</code> 文件并添加以下内容并保存，下次进入 <code>VIM</code> 就可以在插入模式下任意使用 <code>delete</code>（<code>backspace</code>）键了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot; 解决插入模式下 delete&#x2F;backspce 键失效问题</span><br><span class="line">set backspace&#x3D;2</span><br></pre></td></tr></table></figure><h2 id="使用-vim-airline-美化你的状态栏">使用 vim-airline 美化你的状态栏</h2><p>之前一直使用 <code>Powerline</code> 进行状态栏美化，系统升级到 macOS 10.15.5 后突然发现不能正常使用了。</p><p>使用 Google 搜索解决问题无果后，发现了另一款更轻量且功能强大的状态栏美化神器 <code>vim-airline</code>。</p><blockquote><p>vim-airline 是一个在 VIM 中显示更友好的状态栏的插件，可以让你工作更开心哟！</p></blockquote><p>项目地址：<a href="https://github.com/vim-airline/vim-airline" target="_blank" rel="noopener">https://github.com/vim-airline/vim-airline</a></p><p>先看下效果，是不是很漂亮呢！</p><p><img src="https://www.hi-linux.com/img/linux/vim-airline.gif" alt=""></p><p><strong>安装 vim-airline</strong></p><p><code>vim-airline</code> 的使用也很简单，你只需直接下载 <code>vim-airline</code> 插件并放到 <code>VIM</code> 的安装目录下的插件目录即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;vim-airline&#x2F;vim-airline.git</span><br><span class="line">$ cp vim-airline&#x2F;plugin&#x2F;airline.vim ~&#x2F;.vim&#x2F;plugin&#x2F;</span><br><span class="line">$ ls ~&#x2F;.vim&#x2F;plugin</span><br><span class="line">airline-themes.vim airline.vim</span><br></pre></td></tr></table></figure><p>当然你也可以直接使用多种 <code>VIM</code> 插件管理器来安装 <code>vim-airline</code> 插件，比如：</p><table><thead><tr><th>Plugin Manager</th><th>Install with…</th></tr></thead><tbody><tr><td>[Pathogen]</td><td><code>git clone https://github.com/vim-airline/vim-airline ~/.vim/bundle/vim-airline</code><br>Remember to run <code>:Helptags</code> to generate help tags</td></tr><tr><td>[NeoBundle]</td><td><code>NeoBundle 'vim-airline/vim-airline'</code></td></tr><tr><td>[Vundle]</td><td><code>Plugin 'vim-airline/vim-airline'</code></td></tr><tr><td>[Plug]</td><td><code>Plug 'vim-airline/vim-airline'</code></td></tr><tr><td>[VAM]</td><td><code>call vam#ActivateAddons([ 'vim-airline' ])</code></td></tr><tr><td>[Dein]</td><td><code>call dein#add('vim-airline/vim-airline')</code></td></tr><tr><td>[minpac]</td><td><code>call minpac#add('vim-airline/vim-airline')</code></td></tr><tr><td>pack feature (native Vim 8 package feature)</td><td><code>git clone https://github.com/vim-airline/vim-airline ~/.vim/pack/dist/start/vim-airline</code><br>Remember to run <code>:helptags ~/.vim/pack/dist/start/vim-airline/doc</code> to generate help tags</td></tr></tbody></table><p><strong>配置 vim-airline</strong></p><p><code>vim-airline</code> 安装完成后，基本上就完全可以使用了。如果你需要定制一些个性化的需求，也可以通过 <code>.vimrc</code> 文件进行配置。下面是我的配置，你可以参考下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">if !exists(&#39;g:airline_symbols&#39;)</span><br><span class="line">let g:airline_symbols &#x3D; &#123;&#125;</span><br><span class="line">endif</span><br><span class="line">let g:airline_left_sep &#x3D; &#39;▶&#39;</span><br><span class="line">let g:airline_left_alt_sep &#x3D; &#39;❯&#39;</span><br><span class="line">let g:airline_right_sep &#x3D; &#39;◀&#39;</span><br><span class="line">let g:airline_right_alt_sep &#x3D; &#39;❮&#39;</span><br><span class="line">let g:airline_symbols.linenr &#x3D; &#39;¶&#39;</span><br><span class="line">let g:airline_symbols.branch &#x3D; &#39;⎇&#39;</span><br><span class="line"></span><br><span class="line">&quot; 是否打开tabline</span><br><span class="line">let g:airline#extensions#tabline#enabled &#x3D; 1</span><br><span class="line">let g:airline_theme&#x3D;&#39;powerlineish&#39;</span><br><span class="line"></span><br><span class="line">set laststatus&#x3D;2</span><br><span class="line">set encoding&#x3D;utf-8</span><br><span class="line">set t_Co&#x3D;256</span><br><span class="line">set fillchars+&#x3D;stl:\ ,stlnc:\</span><br><span class="line">set term&#x3D;xterm-256color</span><br><span class="line">set termencoding&#x3D;utf-8</span><br><span class="line">set nocompatible</span><br><span class="line">set number</span><br><span class="line">syntax enable</span><br><span class="line">set backspace&#x3D;2</span><br></pre></td></tr></table></figure><p><code>vim-airline</code> 除了自带的样式外，你还可以通过官方主题仓库 <code>vim-airline-themes</code> 项目找到更多漂亮又好用的主题哟！</p><p>项目地址： <a href="https://github.com/vim-airline/vim-airline-themes" target="_blank" rel="noopener">https://github.com/vim-airline/vim-airline-themes</a></p><p><img src="https://www.hi-linux.com/img/linux/vim-airline-theme.png" alt=""></p><p>最后，如果你还有什么好玩又实用的技巧，欢迎大家留言分享哟！</p><h2 id="参考文档">参考文档</h2><ol><li><p><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></p></li><li><p><a href="https://www.smslit.top/2016/11/27/vim-backspace-invalid/" target="_blank" rel="noopener">https://www.smslit.top/2016/11/27/vim-backspace-invalid/</a></p></li><li><p><a href="http://cenalulu.github.io/linux/why-my-backspace-not-work-in-vim/" target="_blank" rel="noopener">http://cenalulu.github.io/linux/why-my-backspace-not-work-in-vim/</a></p></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在使用 &lt;code&gt;VIM&lt;/code&gt; 时遇到两个新的问题，觉得还很挺有价值的。现在将处理方法总结后，分享给大家。&lt;/p&gt;
&lt;h2 id=&quot;VIM-中-delete（backspace）键不能向左删除&quot;&gt;VIM 中 delete（backspace）键不能向左删除&lt;/h2&gt;
&lt;p&gt;MacOS 下打开 &lt;code&gt;vim&lt;/code&gt; 编辑文本，进入插入模式，要删除编辑之前的保存过的几个字符，按下 &lt;code&gt;delete&lt;/code&gt; 键删除它们，万万没想到呀！只听到 &amp;quot;duang duang duang”，竟然无效！&lt;/p&gt;
&lt;p&gt;有一点先明确一下，在 &lt;code&gt;Mac&lt;/code&gt; 的键盘中没有 &lt;code&gt;backspace&lt;/code&gt; 键，有个键叫 &lt;code&gt;delete&lt;/code&gt;，其实相当于 &lt;code&gt;Window&lt;/code&gt; 下的 &lt;code&gt;backspace&lt;/code&gt; 键，编辑文本时按下都具有向左删除字符的功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题的原因&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网上搜索得知，出现开头说的令人恼火的问题的原因是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VIM 使用了 compatible 模式，或者把 backspace 变量设置为空。其实 compatible 模式是 VIM 为了兼容 VI 而出现的配置，它的作用是使 VIM 的操作行为和规范和 VI 一致，而这种模式下 backspace 配置是空的。即意味着 backspace 无法删除 indent ， end of line ， start 这三种字符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在默认状态下，delete（backspace）按下只会删除本次插入模式下插入的文本，这跟 backspace 的模式设置有关，其模式可以设置为以下三种模式：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0 same as “:set backspace&amp;#x3D;” (Vi compatible)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 same as “:set backspace&amp;#x3D;indent,eol”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 same as “:set backspace&amp;#x3D;indent,eol,start”&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="VIM" scheme="https://www.hi-linux.com/categories/VIM/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="VIM" scheme="https://www.hi-linux.com/tags/VIM/"/>
    
  </entry>
  
  <entry>
    <title>新一代 Python 项目环境与依赖管理工具 Pipenv 入门教程</title>
    <link href="https://www.hi-linux.com/posts/2536.html"/>
    <id>https://www.hi-linux.com/posts/2536.html</id>
    <published>2020-08-24T01:00:00.000Z</published>
    <updated>2020-08-24T04:49:56.214Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>Python 开发中一般会使用 <code>Virtualenv</code>、<code>Pip</code> 管理项目运行环境与依赖。在创建一个新项目时先使用 <code>Virtualenv</code> 创建一个虚拟运行环境，然后使用 <code>Pip</code> 安装依赖，最后使用 <code>pip freeze &gt; requirements.txt</code> 记录项目依赖。这个过程中会遇到一些问题：</p><ul><li>版本信息没有保存</li><li>升级依赖包时需要先查看requirements.txt</li><li>开发环境与生产环境依赖区分</li></ul><p>解决上述问题最直接的做法就是生成多个 <code>requirements.txt</code> ，比如：<code>requirements-dev.txt</code>、<code>requirements-prod.txt</code> 并记录好依赖版本信息，或者选择 <code>Pipenv: Python Dev Workflow for Humans</code> 。</p><p>从名字可以很直观的看出 <code>pipenv = pip + virtualenv</code>。</p><a id="more"></a><h2 id="在开发中使用-pipenv">在开发中使用 pipenv</h2><p>在项目开发过程中使用 <code>pipenv</code> 体验基本与 <code>pip</code> 一致，而且由于 <code>pipenv</code> 也会同时管理虚拟环境，体验上流程更顺滑。<code>pipenv</code> 使用 <code>Pipfile</code> 与 <code>Pipfile.lock</code> 来管理依赖，<code>Pipfile.lock</code> 会根据安装的依赖包记录 hash 校验值与版本信息。</p><h3 id="创建虚拟环境">创建虚拟环境</h3><p>在新建项目目录下可以通过以下三种方式创建虚拟环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv --python 3.6</span><br><span class="line">$ pipenv --python &#x2F;path&#x2F;to&#x2F;python</span><br><span class="line">$ pipenv install requests --python 3.6</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果没有使用 <code>--python</code> 参数指定 Python 版本则会使用默认的 Python 版本创建，如果想指定默认 Python 版本可以通过环境变量 <code>PIPENV_DEFAULT_PYTHON_VERSION</code> 配置，可以设置为 Python 版本号：3.6.8 或 Python 解释器程序路径。</p></blockquote><p>如果需要虚拟运行环境目录指定在项目目录下创建，有两种方式可以实现：</p><ul><li>执行 pipenv 前先创建 .venv 目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir .venv &amp;&amp; pipenv install requests --python 3.6</span><br></pre></td></tr></table></figure><ul><li>配置 PIPENV_VENV_IN_PROJECT 环境变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ export PIPENV_VENV_IN_PROJECT&#x3D;1</span><br></pre></td></tr></table></figure><p>如果想自定义这个目录则需要通过 WORKON_HOME 环境变量来配置。</p><ol><li>从现有项目创建虚拟环境</li></ol><p>对于现有项目，可以区分为三种情况：</p><ul><li>没有使用 pipenv</li></ul><p>使用 <code>pipenv install -r path/to/requirements.txt --python 3.6</code> 来安装依赖。</p><ul><li>有使用意向，但需要兼容旧方式</li></ul><p>通过 <code>pipenv lock -r &gt; requirements.txt</code> 生成与 pip 相同格式的依赖管理文件。</p><ul><li>已经在使用</li></ul><p>根据需要可以使用 <code>pipenv install</code> 或 <code>pipenv sync</code>。两者都会根据 <code>Pipfile</code> 中的 <code>Python</code> 版本创建虚拟环境，使用指定的 <code>PyPI</code> 源，区别是 <code>pipenv install</code> 会根据 <code>Pipfile</code> 中的版本信息安装依赖包，并重新生成 <code>Pipfile.lock</code>；而 <code>pipenv sync</code> 会根据 <code>Pipfile.lock</code> 中的版本信息安装依赖包。</p><p>也就是 <code>pipenv install</code> 安装的依赖包版本可能被更新，具体的机制在依赖包管理中进一步说明。</p><h3 id="激活虚拟环境">激活虚拟环境</h3><p>可以先激活虚拟环境，再来运行 <code>Python</code> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv shell</span><br></pre></td></tr></table></figure><p>或者直接运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv run python main.py</span><br></pre></td></tr></table></figure><p>在项目根目录下有 <code>.env</code> 环境配置文件时，激活虚拟环境同时会加载 <code>.env</code> 文件中的环境变量配置，如果不想使用这个功能可以通过配置 <code>PIPENV_DONT_LOAD_ENV</code> 变量来关闭它。</p><h3 id="依赖包管理">依赖包管理</h3><p><code>pipenv</code> 安装包的使用方式与 <code>pip</code>基本一致，直接在项目目录下执行 <code>pipenv install request</code> 会安装到虚拟环境目录下，没有虚拟环境则会创建后安装。</p><ol><li>安装包</li></ol><p>没有指定版本信息时，<code>Pipfile</code> 中不会注明版本，如果在新目录中使用 <code>pipenv install</code> 直接安装依赖包的最新版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install requests</span><br></pre></td></tr></table></figure><p>以下方式会指定为 <code>1.2</code> 或以上版本，但不会大于等于 <code>2.0</code>，使用 <code>pipenv install</code> 安装依赖时，如果新版本在 <code>1.2</code> 到 <code>2.0</code> 之间（不包含 <code>2.0</code> 版本）就会更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install “requests~&#x3D;1.2”</span><br></pre></td></tr></table></figure><p>更多的版本指定方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install &quot;requests&gt;&#x3D;1.4&quot;   # 版本号大于或等于 1.4.0</span><br><span class="line">$ pipenv install &quot;requests&lt;&#x3D;2.13&quot;  # 版本号小于或等于 2.13.0</span><br><span class="line">$ pipenv install &quot;requests&gt;2.19&quot;   # 版本号大于 2.19.0</span><br></pre></td></tr></table></figure><p>如果仅仅在开发 环境下使用这个包，可以添加 <code>--dev</code> 参数安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install ipython --dev</span><br></pre></td></tr></table></figure><ol start="2"><li>更新包</li></ol><ul><li>查看有更新的包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv update --outdated</span><br></pre></td></tr></table></figure><ul><li>更新所有依赖包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv update</span><br></pre></td></tr></table></figure><ul><li>更新指定依赖包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv update request</span><br></pre></td></tr></table></figure><p>注意：升级依赖包的版本时受到 <code>Pipfile</code> 中版本信息限制，如果想安装超出限制的版本，则需要执行 <code>pipenv install &lt;pkg&gt;</code> 安装。</p><ol start="3"><li>卸载包</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv uninstall requests</span><br></pre></td></tr></table></figure><p>查看依赖关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv graph</span><br></pre></td></tr></table></figure><p>安装或卸载依赖包之后，<code>pipenv</code> 都会更新 <code>pipfile</code> 与 <code>pipfile.lock</code></p><h3 id="配置-pypi-镜像源">配置 PyPI 镜像源</h3><p>通常会使用 <code>pip.conf</code> 或者 <code>--index-url</code> 参数来配置 <code>PyPI</code> 镜像源，pipenv 中有多种配置方式：</p><ul><li>使用环境变量 PIPENV_PYPI_MIRROR 配置。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ export PIPENV_PYPI_MIRROR&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br></pre></td></tr></table></figure><ul><li>使用项目中的 pipfile 文件配置。</li></ul><p>通过项目 <code>pipfile</code> 文件中的 <code>[[source]]</code> 节也可以配置安装源，并且只对该项目生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[[source]]</span><br><span class="line">name &#x3D; &quot;pypi&quot;</span><br><span class="line">url &#x3D; &quot;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;&quot;</span><br><span class="line">verify_ssl &#x3D; true</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="配合-pyenv-使用">配合 pyenv 使用</h3><p><code>Linux</code> 和 <code>macOS</code> 下可以安装 <code>pyenv</code> 配合使用，在使用 <code>pipenv</code> 时如果指定的 <code>Python</code> 版本没有安装，就会调用 <code>pyenv</code> 进行编译安装。</p><p>首先请参考 <code>pyenv: Common build problems - Prerequisites</code> 安装好编译依赖。</p><p>官方文档链接：<a href="https://github.com/pyenv/pyenv/wiki/Common-build-problems#prerequisites" target="_blank" rel="noopener">https://github.com/pyenv/pyenv/wiki/Common-build-problems#prerequisites</a></p><p>然后根据 <code>Simple Python Version Management: pyenv - Installation</code> 安装好 <code>pyenv</code>。</p><p>官方文档链接：<a href="https://github.com/pyenv/pyenv#installation" target="_blank" rel="noopener">https://github.com/pyenv/pyenv#installation</a></p><blockquote><p>注意：Windows 用户请手动下载 Python 安装包安装，通过 <code>pipenv --python X:\Python\...\python.exe</code> 指定 Python 版本，如果想编译安装请自行解决。</p></blockquote><ol><li>配置 pyenv</li></ol><p>可以根据需要配置源码缓存与编译临时文件路径，解决因为网络问题无法下载源码包，或者 <code>/tmp</code> 分区空间不足造成编译安装失败。</p><ul><li>源码包缓存</li></ul><p>添加缓存目录，然后将源码包存放到缓存目录，并且编译失败时不会重新下载源码包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p $(pyenv root)&#x2F;cache</span><br></pre></td></tr></table></figure><ul><li>临时文件目录</li></ul><p>默认使用系统临时文件路径 <code>/tmp</code>，指定其他路径为临时文件目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ~&#x2F;tmp</span><br><span class="line">$ export TMPDIR&#x3D;&quot;$HOME&#x2F;tmp&quot;</span><br></pre></td></tr></table></figure><ul><li>有些第三方包工具比如 PyInstaller 需要 CPython 以 --enable-shared 参数编译</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ env PYTHON_CONFIGURE_OPTS&#x3D;&quot;--enable-shared&quot; pyenv install 3.6.8</span><br></pre></td></tr></table></figure><h2 id="在部署时使用-pipenv">在部署时使用 pipenv</h2><p>为了保证部署时安装的依赖版本与发布一致，使用 <code>pipenv install</code> 需要加上 <code>--deploy</code> 参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install --deploy</span><br></pre></td></tr></table></figure><p>如果不使用虚拟环境，还需要加上 <code>--system</code> 参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pipenv install --deploy --system</span><br></pre></td></tr></table></figure><h3 id="在-docker-中使用-pipenv">在 Docker 中使用 pipenv</h3><p>这里给一个 <code>Dockerfile</code> 作为参考。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.6.8</span><br><span class="line"></span><br><span class="line">ENV PIP_INDEX_URL https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line">RUN pip3 install pipenv --no-cache-dir</span><br><span class="line"></span><br><span class="line">RUN set -ex &amp;&amp; mkdir &#x2F;app</span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line"></span><br><span class="line">COPY Pipfile Pipfile</span><br><span class="line">COPY Pipfile.lock Pipfile.lock</span><br><span class="line">RUN set -ex &amp;&amp; pipenv install --deploy --system</span><br><span class="line"></span><br><span class="line">COPY . &#x2F;app</span><br><span class="line">EXPOSE 8888</span><br><span class="line">CMD [&quot;python3&quot;, &quot;main.py&quot;]</span><br></pre></td></tr></table></figure><p>也可以先构建一个 <code>Base Image</code> ，然后在构建应用镜像时使用，假设构建的 <code>Base Image tag</code> 为 <code>tomczhen/python-pipenv-base:3.6.8</code>。</p><ul><li>Base Image Dockerfile</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.6.8</span><br><span class="line"></span><br><span class="line">ENV PIP_INDEX_URL https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line">RUN pip3 install pipenv --no-cache-dir</span><br><span class="line"></span><br><span class="line">RUN set -ex &amp;&amp; mkdir &#x2F;app</span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line"></span><br><span class="line">ONBUILD COPY [&quot;Pipfile&quot;,&quot;Pipfile.lock&quot;,&quot;.&#x2F;&quot;]</span><br><span class="line">ONBUILD RUN set -ex &amp;&amp; pipenv install --deploy --system</span><br></pre></td></tr></table></figure><ul><li>Python Application Image Dockerfile</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM tomczhen&#x2F;python-pipenv-base:3.6.8</span><br><span class="line"></span><br><span class="line">COPY . &#x2F;app</span><br><span class="line">EXPOSE 8888</span><br><span class="line">CMD [&quot;python3&quot;, &quot;main.py&quot;]</span><br></pre></td></tr></table></figure><h2 id="pipenv-的缺点">pipenv 的缺点</h2><p>当然，<code>pipenv</code> 也有缺点存在。</p><h3 id="lock-耗时">lock 耗时</h3><p>Lock updating is very slow · Issue #1914 · pypa/pipenv</p><p>这是一个代价问题。</p><p>由于需要根据依赖关系以及文件 <code>hash</code> 来生成 <code>Pipfile.lock</code>，所以短时间内看这个问题应该是无法解决的。需要在 <code>pipenv</code> 带来的依赖管理功能与速度上做一个权衡取舍。</p><p>目前的办法是在安装依赖时使用 <code>pipenv install --skip-lock</code> 来跳过生成/更新 <code>Pipfile.lock</code>,然后在需要时执行 <code>pipenv lock</code> 来生成/更新 <code>Pipfile.lock</code>。</p><h3 id="跨平台问题">跨平台问题</h3><p>严格来说这并不算是 <code>pipenv</code> 的问题。</p><p>部分包在跨平台时的依赖不同，比如 <code>PyInstaller</code> 可以在多个平台使用，但仅在 <code>Windows</code> 上才依赖 <code>pywin32</code> 包，由于 <code>Pipfile.lock</code> 是根据安装的包生成的，在之前的 <code>pipenv</code> 版本中会造成跨平台时安装依赖失败（当前新版本中没有问题）。</p><p>根据 <code>Problem with Pipfile and system specific packages · Issue #1575 · pypa/pipenv</code> 中的讨论看，即便 <code>pywin32</code> 修复了问题也只能在新版本中解决，因此如果有跨平台需求还需要先确定是否正常。</p><blockquote><p>本文转载自：「Tom CzHen’s Blog」，原文：<a href="https://tinyurl.com/y6bw3wsx%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/y6bw3wsx，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 开发中一般会使用 &lt;code&gt;Virtualenv&lt;/code&gt;、&lt;code&gt;Pip&lt;/code&gt; 管理项目运行环境与依赖。在创建一个新项目时先使用 &lt;code&gt;Virtualenv&lt;/code&gt; 创建一个虚拟运行环境，然后使用 &lt;code&gt;Pip&lt;/code&gt; 安装依赖，最后使用 &lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; 记录项目依赖。这个过程中会遇到一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;版本信息没有保存&lt;/li&gt;
&lt;li&gt;升级依赖包时需要先查看requirements.txt&lt;/li&gt;
&lt;li&gt;开发环境与生产环境依赖区分&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决上述问题最直接的做法就是生成多个 &lt;code&gt;requirements.txt&lt;/code&gt; ，比如：&lt;code&gt;requirements-dev.txt&lt;/code&gt;、&lt;code&gt;requirements-prod.txt&lt;/code&gt; 并记录好依赖版本信息，或者选择 &lt;code&gt;Pipenv: Python Dev Workflow for Humans&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;从名字可以很直观的看出 &lt;code&gt;pipenv = pip + virtualenv&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.hi-linux.com/categories/Python/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Python" scheme="https://www.hi-linux.com/tags/Python/"/>
    
      <category term="Pipenv" scheme="https://www.hi-linux.com/tags/Pipenv/"/>
    
  </entry>
  
  <entry>
    <title>推荐一款自动更新 Docker 镜像与容器的神器 Watchtower</title>
    <link href="https://www.hi-linux.com/posts/49978.html"/>
    <id>https://www.hi-linux.com/posts/49978.html</id>
    <published>2020-08-17T01:00:00.000Z</published>
    <updated>2020-08-17T02:57:03.184Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2 id="前言">前言</h2><p><code>Docker</code> 容器的部署有一种在手机上装 <code>App</code> 的感觉，但 <code>Docker</code> 容器并不会像手机 <code>App</code> 那样会自动更新，而如果我们需要更新容器一般需要以下四个步骤：</p><ul><li>停止容器：<code>docker stop &lt;CONTAINER&gt;</code></li><li>删除容器：<code>docker rm &lt;CONTAINER&gt;</code></li><li>更新镜像：<code>docker pull &lt;IMAGE&gt;</code></li><li>启动容器：<code>docker run &lt;ARG&gt; ... &lt;IMAGE&gt;</code></li></ul><p>停止容器这个步骤可以在删除容器时使用 <code>-f</code> 参数来代替，即使这样还是需要三个步骤。如果部署了大量的容器需要更新使用这种传统的方式工作量是巨大的。</p><p><code>Watchtower</code> 是一个可以实现自动化更新 <code>Docker</code> 基础镜像与容器的实用工具。它监视正在运行的容器以及相关的镜像，当检测到 <code>reg­istry</code> 中的镜像与本地的镜像有差异时，它会拉取最新镜像并使用最初部署时相同的参数重新启动相应的容器，一切好像什么都没发生过，就像更新手机上的 <code>App</code> 一样。</p><a id="more"></a><h2 id="快速开始">快速开始</h2><p><code>Watch­tower</code> 本身被打包为 <code>Docker</code> 镜像，因此可以像运行任何其他容器一样运行它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">    containrrr&#x2F;watchtower</span><br></pre></td></tr></table></figure><p>然后所有容器都会自动更新，也包括 Watch­tower 本身。</p><h2 id="选项参数">选项参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm containrrr&#x2F;watchtower -h</span><br><span class="line"></span><br><span class="line">Watchtower automatically updates running Docker containers whenever a new image is released.</span><br><span class="line">More information available at https:&#x2F;&#x2F;github.com&#x2F;containrrr&#x2F;watchtower&#x2F;.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  watchtower [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -a, --api-version string                          api version to use by docker client (default &quot;1.24&quot;)</span><br><span class="line">  -c, --cleanup                                     remove previously used images after updating</span><br><span class="line">  -d, --debug                                       enable debug mode with verbose logging</span><br><span class="line">      --enable-lifecycle-hooks                      Enable the execution of commands triggered by pre- and post-update lifecycle hooks</span><br><span class="line">  -h, --help                                        help for watchtower</span><br><span class="line">  -H, --host string                                 daemon socket to connect to (default &quot;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock&quot;)</span><br><span class="line">  -S, --include-stopped                             Will also include created and exited containers</span><br><span class="line">  -i, --interval int                                poll interval (in seconds) (default 300)</span><br><span class="line">  -e, --label-enable                                watch containers where the com.centurylinklabs.watchtower.enable label is true</span><br><span class="line">  -m, --monitor-only                                Will only monitor for new images, not update the containers</span><br><span class="line">      --no-pull                                     do not pull any new images</span><br><span class="line">      --no-restart                                  do not restart any containers</span><br><span class="line">      --notification-email-delay int                Delay before sending notifications, expressed in seconds</span><br><span class="line">      --notification-email-from string              Address to send notification emails from</span><br><span class="line">      --notification-email-server string            SMTP server to send notification emails through</span><br><span class="line">      --notification-email-server-password string   SMTP server password for sending notifications</span><br><span class="line">      --notification-email-server-port int          SMTP server port to send notification emails through (default 25)</span><br><span class="line">      --notification-email-server-tls-skip-verify</span><br><span class="line">                                                    Controls whether watchtower verifies the SMTP server&#39;s certificate chain and host name.</span><br><span class="line">                                                    Should only be used for testing.</span><br><span class="line"></span><br><span class="line">      --notification-email-server-user string       SMTP server user for sending notifications</span><br><span class="line">      --notification-email-subjecttag string        Subject prefix tag for notifications via mail</span><br><span class="line">      --notification-email-to string                Address to send notification emails to</span><br><span class="line">      --notification-gotify-token string            The Gotify Application required to query the Gotify API</span><br><span class="line">      --notification-gotify-url string              The Gotify URL to send notifications to</span><br><span class="line">      --notification-msteams-data                   The MSTeams notifier will try to extract log entry fields as MSTeams message facts</span><br><span class="line">      --notification-msteams-hook string            The MSTeams WebHook URL to send notifications to</span><br><span class="line">      --notification-slack-channel string           A string which overrides the webhook&#39;s default channel. Example: #my-custom-channel</span><br><span class="line">      --notification-slack-hook-url string          The Slack Hook URL to send notifications to</span><br><span class="line">      --notification-slack-icon-emoji string        An emoji code string to use in place of the default icon</span><br><span class="line">      --notification-slack-icon-url string          An icon image URL string to use in place of the default icon</span><br><span class="line">      --notification-slack-identifier string        A string which will be used to identify the messages coming from this watchtower instance (default &quot;watchtower&quot;)</span><br><span class="line">  -n, --notifications strings                        notification types to send (valid: email, slack, msteams, gotify)</span><br><span class="line">      --notifications-level string                  The log level used for sending notifications. Possible values: panic, fatal, error, warn, info or debug (default &quot;info&quot;)</span><br><span class="line">      --remove-volumes                              remove attached volumes before updating</span><br><span class="line">      --revive-stopped                              Will also start stopped containers that were updated, if include-stopped is active</span><br><span class="line">  -R, --run-once                                    Run once now and exit</span><br><span class="line">  -s, --schedule string                             the cron expression which defines when to update</span><br><span class="line">  -t, --stop-timeout duration                       timeout before a container is forcefully stopped (default 10s)</span><br><span class="line">  -v, --tlsverify                                   use TLS and verify the remote</span><br></pre></td></tr></table></figure><h2 id="自动清除旧镜像">自动清除旧镜像</h2><p>官方给出的默认启动命令在长期使用后会堆积非常多的标签为 <code>none</code> 的旧镜像，如果放任不管会占用大量的磁盘空间。要避免这种情况可以加入 <code>--cleanup</code> 选项，这样每次更新都会把旧的镜像清理掉。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">    containrrr&#x2F;watchtower \</span><br><span class="line">    --cleanup</span><br></pre></td></tr></table></figure><p><code>--cleanup</code> 选项可以简写为 <code>-c</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">    containrrr&#x2F;watchtower -c</span><br></pre></td></tr></table></figure><h2 id="选择性自动更新">选择性自动更新</h2><p>某些容器可能需要稳定的运行，经常更新或重启可能会造成一些问题，这时我们可以使用一些选项参数来选择与控制容器的更新。</p><ol><li>容器更新列表</li></ol><p>假设我们只想更新 <code>nginx</code>、<code>redis</code> 这两个容器，我们可以把容器名称追加到启动命令的最后面，就像下面这个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">    containrrr&#x2F;watchtower -c \</span><br><span class="line">    nginx redis</span><br></pre></td></tr></table></figure><p>博主觉得把需要更新的容器名称写在启动命令中不利于管理，于是想了个更好的方法，建立一个更新列表文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~&#x2F;.watchtower.list</span><br><span class="line">aria2-pro</span><br><span class="line">unlockmusic</span><br><span class="line">mtg</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>通过变量的方式去调用这个列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">    containrrr&#x2F;watchtower -c \</span><br><span class="line">    $(cat ~&#x2F;.watchtower.list)</span><br></pre></td></tr></table></figure><p>这样只需要调整列表后删除 <code>Watch­tower</code> 容器并重新执行上面的命令重新启动 <code>Watch­tower</code> 即可。</p><ol start="2"><li>设置单个容器自动更新特征</li></ol><p>给容器添加 <code>com.centurylinklabs.watchtower.enable</code> 这个 <code>LA­BEL</code> 并设置它的值为 <code>false</code>，或者在启动命令中加入 <code>--label com.centurylinklabs.watchtower.enable=false</code> 参数可以排除相应的容器。下面这个例子是博主的 <code>openwrt-mini</code> 镜像的容器启动命令，<code>Watch­tower</code> 将永远忽略它的更新，即使它包含在自动更新列表中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name openwrt-mini \</span><br><span class="line">    --restart always \</span><br><span class="line">    --network openwrt \</span><br><span class="line">    --privileged \</span><br><span class="line">    --label com.centurylinklabs.watchtower.enable&#x3D;false \</span><br><span class="line">    p3terx&#x2F;openwrt-mini \</span><br><span class="line">    &#x2F;sbin&#x2F;init</span><br></pre></td></tr></table></figure><p>当容器启动命令中加入 <code>--label com.centurylinklabs.watchtower.enable=true</code> 参数，并且给 <code>Watch­tower</code> 加上 <code>--label-enable</code> 选项时，<code>Watch­tower</code> 将只更新这些包含此参数的容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">    containrrr&#x2F;watchtower -c \</span><br><span class="line">    --label-enable</span><br></pre></td></tr></table></figure><p><code>--label-enable</code> 可以简写为 <code>-e</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">    containrrr&#x2F;watchtower -ce</span><br></pre></td></tr></table></figure><p>因为需要在容器启动时进行设置，且设置后就无法直接更改，只能重建容器，所以这种方式的灵活性不如更新列表法。尤其是在设置 <code>com.centurylinklabs.watchtower.enable=false</code> 参数后容器将永远被 Watch­tower 忽略，也包括后面将要提到的手动更新方式，所以一般不推荐这样做，除非你愿意手动重建的原生方式更新。</p><h2 id="设置自动更新检查频率">设置自动更新检查频率</h2><p>默认情况下 <code>Watch­tower</code> 每 <code>5</code> 分钟会轮询一次，如果你觉得这个频率太高了可以使用如下选项来控制更新检查的频率，但二者只能选择其一。</p><p><code>--interval</code>, <code>-i</code> - 设置更新检测时间间隔，单位为秒。比如每隔 <code>1</code> 个小时检查一次更新：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">    containrrr&#x2F;watchtower -c \</span><br><span class="line">    --interval 3600</span><br></pre></td></tr></table></figure><p><code>--schedule</code>, <code>-s</code> - 设置定时检测更新时间。格式为 <code>6</code> 字段 <code>Cron</code> 表达式，而非传统的 <code>5</code> 字段，即第一位是秒。比如每天凌晨 <code>2</code> 点检查一次更新：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">    containrrr&#x2F;watchtower -c \</span><br><span class="line">    --schedule &quot;0 0 2 * * *&quot;</span><br></pre></td></tr></table></figure><h2 id="手动更新">手动更新</h2><p>前面的使用方式都是让 <code>Watch­tower</code> 以 <code>detached</code>（后台）模式在运行并自动更新容器，而 <code>Watch­tower</code> 也支持以 <code>foreground</code>（前台）模式来使用，即运行一次退出并删掉容器，来实现手动更新容器。这对于偶尔更新一次那些不在自动更新列表中的容器非常有用。</p><p>对于 <code>foreground</code> 模式，需要加上 <code>--run-once</code> 这个专用的选项。下面的例子 <code>Docker</code> 会运行一次 <code>Watch­tower</code> 并检查 <code>aria2-pro</code> 容器的基础镜像更新，最后删掉本次运行创建的 <code>Watch­tower</code> 容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm \</span><br><span class="line">    -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">    containrrr&#x2F;watchtower -c \</span><br><span class="line">    --run-once \</span><br><span class="line">    aria2-pro</span><br></pre></td></tr></table></figure><p><code>--run-once</code> 可以简写为 <code>-R</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm \</span><br><span class="line">    -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">    containrrr&#x2F;watchtower -cR \</span><br><span class="line">    aria2-pro</span><br></pre></td></tr></table></figure><p>需要注意的是当这个容器设置过 <code>com.centurylinklabs.watchtower.enable=false</code> 参数时不会更新。</p><h2 id="尾巴">尾巴</h2><p>以上是博主在使用 <code>Watch­tower</code> 中总结的一些使用方式和方法，当然它还有一些其它的功能与使用方式，比如电子邮件通知、监视私人注册表的镜像、更新远程主机上的容器等，这些对于一般用户来说可能很少会用到，所以这里就不赘述了，感兴趣的小伙伴可以去研究 <code>Watchtower</code> 官方文档。</p><blockquote><p>本文转载自：「P3TERX ZONE」，原文：<a href="https://tinyurl.com/y9e4pslr%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/y9e4pslr，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt; 容器的部署有一种在手机上装 &lt;code&gt;App&lt;/code&gt; 的感觉，但 &lt;code&gt;Docker&lt;/code&gt; 容器并不会像手机 &lt;code&gt;App&lt;/code&gt; 那样会自动更新，而如果我们需要更新容器一般需要以下四个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;停止容器：&lt;code&gt;docker stop &amp;lt;CONTAINER&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除容器：&lt;code&gt;docker rm &amp;lt;CONTAINER&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;更新镜像：&lt;code&gt;docker pull &amp;lt;IMAGE&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动容器：&lt;code&gt;docker run &amp;lt;ARG&amp;gt; ... &amp;lt;IMAGE&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;停止容器这个步骤可以在删除容器时使用 &lt;code&gt;-f&lt;/code&gt; 参数来代替，即使这样还是需要三个步骤。如果部署了大量的容器需要更新使用这种传统的方式工作量是巨大的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Watchtower&lt;/code&gt; 是一个可以实现自动化更新 &lt;code&gt;Docker&lt;/code&gt; 基础镜像与容器的实用工具。它监视正在运行的容器以及相关的镜像，当检测到 &lt;code&gt;reg­istry&lt;/code&gt; 中的镜像与本地的镜像有差异时，它会拉取最新镜像并使用最初部署时相同的参数重新启动相应的容器，一切好像什么都没发生过，就像更新手机上的 &lt;code&gt;App&lt;/code&gt; 一样。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.hi-linux.com/categories/docker/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 实用小妙招系列：巧用程序进程 PID、容器名称获取其对应的 Pod 名称或 PID</title>
    <link href="https://www.hi-linux.com/posts/1620.html"/>
    <id>https://www.hi-linux.com/posts/1620.html</id>
    <published>2020-08-13T01:00:00.000Z</published>
    <updated>2020-08-13T03:29:27.807Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>在管理 Kubernetes 集群的过程中，我们经常会遇到这样一种情况：在某台节点上发现某个进程资源占用量很高，却又不知道是哪个容器里的进程。有没有办法可以根据 PID 快速找到 Pod 名称呢？</p><p>假设现在有一个 Prometheus 进程的 PID 是 14338：</p><p><img src="https://www.hi-linux.com/img/linux/k8s-pid.png" alt=""></p><p>为了进一步挖掘信息，有两种思路，一种是挖掘 PID 对应的容器的信息，另一种是挖掘 PID 对应的 Pod 的信息。</p><h2 id="1-container-id">1. Container ID</h2><p>要获取容器的 ID，可以查看 PID 对应的 cgroup 信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;proc&#x2F;14338&#x2F;cgroup</span><br><span class="line"></span><br><span class="line">11:blkio:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">10:cpuset:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">9:freezer:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">8:hugetlb:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">7:perf_event:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">6:cpuacct,cpu:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">5:pids:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">4:devices:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">3:net_prio,net_cls:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">2:memory:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">1:name&#x3D;systemd:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br></pre></td></tr></table></figure><p>可以看到该进程对应的容器 ID 为 d6f24b62…，可以再优化一下上面的命令，直接获取容器 ID：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ CID&#x3D;$(cat &#x2F;proc&#x2F;14338&#x2F;cgroup | awk -F &#39;&#x2F;&#39; &#39;&#123;print $5&#125;&#39;)</span><br><span class="line">$ echo $&#123;CID:0:8&#125;</span><br><span class="line">d6f24b62</span><br></pre></td></tr></table></figure><a id="more"></a><p>最后一步根据容器 ID 获取 Pod 名称，如果你的容器运行时是 containerd 或 crio，可以使用 crictl 来获取容器信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 使用 Go template 或 jq 都能获取 Pod 名称，看个人喜好。</span><br><span class="line"></span><br><span class="line"># Go Template</span><br><span class="line">$ crictl inspect -o go-template --template&#x3D;&#39;&#123;&#123;index .status.labels &quot;io.kubernetes.pod.name&quot;&#125;&#125;&#39; d6f24b62</span><br><span class="line">prometheus-k8s-0</span><br><span class="line"></span><br><span class="line"># jq</span><br><span class="line">$ crictl inspect d6f24b62|jq &#39;.status.labels[&quot;io.kubernetes.pod.name&quot;]&#39;</span><br><span class="line">&quot;prometheus-k8s-0&quot;</span><br></pre></td></tr></table></figure><p>如果你的容器运行时是 Docker，可以使用命令行工具 docker 来获取，方法和上面类似。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect d6f24b62 | jq &#39;.[0].Config.Labels.&quot;io.kubernetes.pod.name&quot;&#39;</span><br><span class="line">&quot;prometheus-k8s-0&quot;</span><br></pre></td></tr></table></figure><p>一种特殊情况的处理，上面的方法适用于大多数场景。但有可能你的 <code>cat /proc/14338/cgroup</code> 输出的结果是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;proc&#x2F;14338&#x2F;cgroup</span><br><span class="line"></span><br><span class="line">11:blkio:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;docker-d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">10:cpuset:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;docker-d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">9:freezer:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;docker-d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>这时你就需要将上面取容器 ID 的方法稍做修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;proc&#x2F;d6f24b62&#x2F;cgroup | awk -F &#39;&#x2F;&#39; &#39;&#123;print $5&#125;&#39;|sed &#39;s&#x2F;docker-&#x2F;&#x2F;g&#39;</span><br><span class="line">11:blkio:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">10:cpuset:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">9:freezer:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br></pre></td></tr></table></figure><h2 id="2-pod-uid">2. Pod UID</h2><p>下面来看看第二种方法，先根据 PID 直接获取 Pod UID：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;proc&#x2F;14338&#x2F;mountinfo | grep &quot;etc-hosts&quot; | awk -F &#x2F; &#123;&#39;print $6&#39;&#125;</span><br><span class="line">8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1</span><br></pre></td></tr></table></figure><p>然后根据 Pod UID 获取 Pod 名称：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ crictl ps -o json | jq  &#39;.[][].labels | select (.[&quot;io.kubernetes.pod.uid&quot;] &#x3D;&#x3D; &quot;8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&quot;) | .[&quot;io.kubernetes.pod.name&quot;]&#39;|uniq</span><br><span class="line">&quot;prometheus-k8s-0&quot;</span><br></pre></td></tr></table></figure><h2 id="3-整合">3. 整合</h2><p>方法是有了，怎么才能将所有的步骤合并成一个步骤，一步到位获取 Pod 名称呢？可以在 ~/.bashrc 中添加一个 shell 函数，选择上面的方法 1，并使用 go template 来格式化（你也可以使用上面提到的其他方法，但需要安装 jq）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">podinfo() &#123;</span><br><span class="line">  CID&#x3D;$(cat &#x2F;proc&#x2F;$1&#x2F;cgroup | awk -F &#39;&#x2F;&#39; &#39;&#123;print $5&#125;&#39;)</span><br><span class="line">  CID&#x3D;$(echo $&#123;CID:0:8&#125;)</span><br><span class="line">  crictl inspect -o go-template --template&#x3D;&#39;&#123;&#123;index .status.labels &quot;io.kubernetes.pod.name&quot;&#125;&#125;&#39; $CID</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行下面的命令使修改立即生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure><p>然后就可以使用该函数来获取 Pod 名称啦：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ podinfo 14338</span><br><span class="line">prometheus-k8s-0</span><br></pre></td></tr></table></figure><h2 id="4-举一反三">4. 举一反三</h2><p>这个思路也可以用来解决其他问题，大家要学会举一反三，我举个例子。Kubernetes 中的很多组件都是通过 HTTPS 协议来暴露指标，比如 kubelet，那么如何使用 API 来访问这些指标呢？</p><p>先选取一个容器，比如 prometheus，找到它的 PID：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef|grep &quot;&#x2F;bin&#x2F;prometheus&quot;</span><br><span class="line"></span><br><span class="line">1000     14338 14246  4 7月10 ?       04:29:02 &#x2F;bin&#x2F;prometheus --web.console.templates&#x3D;&#x2F;etc&#x2F;prometheus&#x2F;consoles --web.console.libraries&#x3D;&#x2F;etc&#x2F;prometheus&#x2F;console_libraries --config.file&#x3D;&#x2F;etc&#x2F;prometheus&#x2F;config_out&#x2F;prometheus.env.yaml --storage.tsdb.path&#x3D;&#x2F;prometheus --storage.tsdb.retention.time&#x3D;24h --web.enable-lifecycle --storage.tsdb.no-lockfile --web.route-prefix&#x3D;&#x2F;</span><br><span class="line">1000     14402 14246  0 7月10 ?       00:00:10 &#x2F;bin&#x2F;prometheus-config-reloader --log-format&#x3D;logfmt --reload-url&#x3D;http:&#x2F;&#x2F;localhost:9090&#x2F;-&#x2F;reload --config-file&#x3D;&#x2F;etc&#x2F;prometheus&#x2F;config&#x2F;prometheus.yaml.gz --config-envsubst-file&#x3D;&#x2F;etc&#x2F;prometheus&#x2F;config_out&#x2F;prometheus.env.yaml</span><br><span class="line">root     15956   555  0 18:19 pts&#x2F;0    00:00:00 grep --color&#x3D;auto &#x2F;bin&#x2F;prometheus</span><br></pre></td></tr></table></figure><p>根据 PID 找到 Pod UID：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;proc&#x2F;14338&#x2F;mountinfo | grep &quot;etc-hosts&quot; | awk -F &#x2F; &#123;&#39;print $6&#39;&#125;</span><br><span class="line">8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1</span><br></pre></td></tr></table></figure><p>根据 Pod UID 找到 Service Account 的 token 挂载目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ll &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;pods&#x2F;8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;volumes&#x2F;kubernetes.io~secret&#x2F;prometheus-k8s-token-p7bgb&#x2F;</span><br><span class="line"></span><br><span class="line">总用量 0</span><br><span class="line">lrwxrwxrwx 1 root root 13 7月  10 21:24 ca.crt -&gt; ..data&#x2F;ca.crt</span><br><span class="line">lrwxrwxrwx 1 root root 16 7月  10 21:24 namespace -&gt; ..data&#x2F;namespace</span><br><span class="line">lrwxrwxrwx 1 root root 12 7月  10 21:24 token -&gt; ..data&#x2F;token</span><br></pre></td></tr></table></figure><p>获取 token 信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ export TOKEN&#x3D;$(cat &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;pods&#x2F;8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;volumes&#x2F;kubernetes.io~secret&#x2F;prometheus-k8s-token-p7bgb&#x2F;token)</span><br></pre></td></tr></table></figure><p>通过 curl 直接访问指标：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s -H &quot;Authorization: Bearer $TOKEN&quot; --cacert &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;pods&#x2F;8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;volumes&#x2F;kubernetes.io~secret&#x2F;prometheus-k8s-token-p7bgb&#x2F;ca.crt --insecure https:&#x2F;&#x2F;127.0.0.1:10250&#x2F;metrics&#x2F;cadvisor</span><br></pre></td></tr></table></figure><p>当然，如果你能找到集群管理员的证书、密钥和 CA 证书，也可以直接使用它们来访问，我就不展开说了。</p><h2 id="延伸阅读">延伸阅读</h2><p>上面的神技是不是很好用呢？一步步执行，你肯定觉得还是有点麻烦。最后在给大家提供两个另一位大神 YP 写的 Shell 脚本,使用它可以帮助你快速找到 Pid 和 Pod 的对应关系，助你定位问题哟！</p><h3 id="根据-pid-获取-k8s-pod-名称">根据 Pid 获取 K8s Pod 名称</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 通过 Pid 获取 Pod 名称</span><br><span class="line">$ .&#x2F;pod_name_info.sh Pid</span><br></pre></td></tr></table></figure><blockquote><p>注：该 Shell 脚本需要服务器上安装 jq 命令，因为脚本依赖 jq 来处理 json 格式。</p></blockquote><h3 id="根据-pod-名称获取-pid">根据 Pod 名称获取 Pid</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 通过 Pod名称 获取 Pid</span><br><span class="line">$ .&#x2F;pod_pid_info.sh Pod名称</span><br></pre></td></tr></table></figure><p>这么棒的神技，难道你不想掌握吗？欲下载此脚本，只需在公众号对话框内回复 「<code>k8s-pid-podname</code>」，即可获取下载地址。</p><h2 id="参考文档">参考文档</h2><ol><li><a href="https://mp.weixin.qq.com/s/77v46oIraV22acC8eYqC5A" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/77v46oIraV22acC8eYqC5A</a></li><li><a href="https://mp.weixin.qq.com/s/HF5rzr5fULiMWq1NPe780g" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/HF5rzr5fULiMWq1NPe780g</a></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在管理 Kubernetes 集群的过程中，我们经常会遇到这样一种情况：在某台节点上发现某个进程资源占用量很高，却又不知道是哪个容器里的进程。有没有办法可以根据 PID 快速找到 Pod 名称呢？&lt;/p&gt;
&lt;p&gt;假设现在有一个 Prometheus 进程的 PID 是 14338：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/k8s-pid.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;为了进一步挖掘信息，有两种思路，一种是挖掘 PID 对应的容器的信息，另一种是挖掘 PID 对应的 Pod 的信息。&lt;/p&gt;
&lt;h2 id=&quot;1-Container-ID&quot;&gt;1. Container ID&lt;/h2&gt;
&lt;p&gt;要获取容器的 ID，可以查看 PID 对应的 cgroup 信息：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cat &amp;#x2F;proc&amp;#x2F;14338&amp;#x2F;cgroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11:blkio:&amp;#x2F;kubepods&amp;#x2F;burstable&amp;#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&amp;#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10:cpuset:&amp;#x2F;kubepods&amp;#x2F;burstable&amp;#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&amp;#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9:freezer:&amp;#x2F;kubepods&amp;#x2F;burstable&amp;#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&amp;#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8:hugetlb:&amp;#x2F;kubepods&amp;#x2F;burstable&amp;#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&amp;#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7:perf_event:&amp;#x2F;kubepods&amp;#x2F;burstable&amp;#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&amp;#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6:cpuacct,cpu:&amp;#x2F;kubepods&amp;#x2F;burstable&amp;#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&amp;#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5:pids:&amp;#x2F;kubepods&amp;#x2F;burstable&amp;#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&amp;#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4:devices:&amp;#x2F;kubepods&amp;#x2F;burstable&amp;#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&amp;#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3:net_prio,net_cls:&amp;#x2F;kubepods&amp;#x2F;burstable&amp;#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&amp;#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2:memory:&amp;#x2F;kubepods&amp;#x2F;burstable&amp;#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&amp;#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1:name&amp;#x3D;systemd:&amp;#x2F;kubepods&amp;#x2F;burstable&amp;#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&amp;#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到该进程对应的容器 ID 为 d6f24b62…，可以再优化一下上面的命令，直接获取容器 ID：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ CID&amp;#x3D;$(cat &amp;#x2F;proc&amp;#x2F;14338&amp;#x2F;cgroup | awk -F &amp;#39;&amp;#x2F;&amp;#39; &amp;#39;&amp;#123;print $5&amp;#125;&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ echo $&amp;#123;CID:0:8&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d6f24b62&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/categories/kubernetes/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>推荐一款强大的 Shell 历史命令管理神器 HSTR</title>
    <link href="https://www.hi-linux.com/posts/14499.html"/>
    <id>https://www.hi-linux.com/posts/14499.html</id>
    <published>2020-08-10T01:00:00.000Z</published>
    <updated>2020-08-10T04:48:26.591Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><code>HSTR</code> 是一款可以轻松查看、导航和搜索历史命令的小工具，它支持 <code>Bash</code> 和 <code>Zsh</code>。</p><blockquote><p>项目地址：<a href="https://github.com/dvorka/hstr" target="_blank" rel="noopener">https://github.com/dvorka/hstr</a></p></blockquote><p>话不多说，先看效果图。看完后，你就明白它的神奇之处了。</p><p><img src="https://www.hi-linux.com/img/linux/hstr-v2.gif" alt=""></p><h2 id="安装">安装</h2><p><code>HSTR</code> 提供了基本上全部主流平台上的安装包，安装非常简单。下面我们就来看一些常用的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Centos （需安装 EPEL 源）</span><br><span class="line">$ yum install  --disablerepo&#x3D;\* --enablerepo&#x3D;epel hstr</span><br><span class="line"></span><br><span class="line"># Ubuntu</span><br><span class="line">$ sudo add-apt-repository ppa:ultradvorka&#x2F;ppa &amp;&amp; sudo apt-get update &amp;&amp; sudo apt-get install hstr  </span><br><span class="line"></span><br><span class="line"># macOS</span><br><span class="line">$ brew install hstr</span><br></pre></td></tr></table></figure><p>如果你不是使用的上面的平台，你还可以参考「<a href="https://github.com/dvorka/hstr/blob/master/INSTALLATION.md" target="_blank" rel="noopener">官方安装文档</a> 」 查看其它平台的安装方法。</p><a id="more"></a><h2 id="使用-hstr">使用 HSTR</h2><p><code>HSTR</code> 安装完成后，你可以直接运行 <code>hstr</code> 命令使用它。 当然，如果每次都通过命令行调用，这看上去显得非常的不酷。</p><p>我们可以通过下面的方法给 <code>HSTR</code> 配置一个快捷键，方便日常调用。默认配置的快捷键是：<code>Ctrl+r</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># bash</span><br><span class="line">$ hstr --show-configuration &gt;&gt; ~&#x2F;.bashrc</span><br><span class="line">$ source ~&#x2F;.bashrc</span><br><span class="line"></span><br><span class="line"># zsh</span><br><span class="line">$ hstr --show-configuration &gt;&gt; ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure><p><code>HSTR</code> 默认生成的配置基本上能满足大多数应用场景。<code>HSTR</code> 可定制的参数也是很丰富的，比如：是否支持按正则方式匹配、默认显示收藏的命令等。如果你需要定制更多的个性化配置可参考「<a href="https://github.com/dvorka/hstr/blob/master/CONFIGURATION.md" target="_blank" rel="noopener">官方配置文档</a> 」 。</p><p><code>HSTR</code> 默认还为我们配置一个好用的别名：<code>hh</code>，你也可以随时通过它来运行 <code>HSTR</code>。更多好用好玩的功能，就等大家去官网探索吧！</p><h2 id="参考文档">参考文档</h2><ol><li><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></li><li><a href="https://github.com/dvorka/hstr" target="_blank" rel="noopener">https://github.com/dvorka/hstr</a></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;HSTR&lt;/code&gt; 是一款可以轻松查看、导航和搜索历史命令的小工具，它支持 &lt;code&gt;Bash&lt;/code&gt; 和 &lt;code&gt;Zsh&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/dvorka/hstr&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/dvorka/hstr&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;话不多说，先看效果图。看完后，你就明白它的神奇之处了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/hstr-v2.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;HSTR&lt;/code&gt; 提供了基本上全部主流平台上的安装包，安装非常简单。下面我们就来看一些常用的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Centos （需安装 EPEL 源）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yum install  --disablerepo&amp;#x3D;\* --enablerepo&amp;#x3D;epel hstr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo add-apt-repository ppa:ultradvorka&amp;#x2F;ppa &amp;amp;&amp;amp; sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install hstr  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# macOS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ brew install hstr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你不是使用的上面的平台，你还可以参考「&lt;a href=&quot;https://github.com/dvorka/hstr/blob/master/INSTALLATION.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方安装文档&lt;/a&gt; 」 查看其它平台的安装方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Shell" scheme="https://www.hi-linux.com/tags/Shell/"/>
    
      <category term="HSTR" scheme="https://www.hi-linux.com/tags/HSTR/"/>
    
  </entry>
  
  <entry>
    <title>微软开源基于 Envoy 的服务网格 Open Service Mesh</title>
    <link href="https://www.hi-linux.com/posts/27903.html"/>
    <id>https://www.hi-linux.com/posts/27903.html</id>
    <published>2020-08-07T01:00:00.000Z</published>
    <updated>2020-08-10T04:48:26.592Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><code>Open Service Mesh（OSM）</code> 是一个轻量级的、可扩展的、云原生的服务网格，它允许用户对高度动态的微服务环境进行统一管理、安全保护，并获得开箱即用的可观察性功能。</p><ul><li>官网地址 <a href="https://openservicemesh.io" target="_blank" rel="noopener">https://openservicemesh.io</a>，</li><li>开源仓库地址：<a href="https://github.com/openservicemesh/osm" target="_blank" rel="noopener">https://github.com/openservicemesh/osm</a></li></ul><p><img src="https://www.hi-linux.com/img/linux/Open-Service-Mesh-01.png" alt=""></p><p>微软今天宣布推出一个新的基于 <code>Envoy</code> 代理的 <code>Open Service Mesh</code>。<code>Open Service Mesh</code> 意在成为 <code>Service Mesh Interface（SMI）</code> 规范的参考实现，这是 <code>Kubernetes</code> 上 <code>Service Mesh</code> 的标准接口，得到了这个生态系统中大多数玩家的支持。</p><p>微软公司计划将 <code>Open Service Mesh</code> 捐赠给云原生计算基金会（<code>CNCF</code>），以确保它由社区主导，并具有开放的治理。</p><a id="more"></a><p>微软 Azure Compute 合作伙伴管理总监（同时也是 CNCF 董事会成员）Gabe Monroy 说：</p><blockquote><p>“SMI 真的引起了人们的共鸣，因此我们真的认为在生态系统中存在着 SMI 的参考实现空间，其中 Mesh 技术首先是实现 SMI API，并为客户提供最佳的 SMI 体验，”</p></blockquote><p><img src="https://www.hi-linux.com/img/linux/Open-Service-Mesh-02.gif" alt=""></p><p>他还补充说，因为 <code>SMI</code> 提供了最低共同点的 <code>API</code> 设计，所以 <code>Open Service Mesh</code> 让用户在需要一些更高级的功能时，可以 “保送” 到原始的 <code>Envoy</code>。Monroy 指出，这种 “没有断层” 的设计，是 <code>Open Service Mesh</code> 背后的核心理念。</p><p>至于它的功能集，<code>SMI</code> 处理了所有你期望的标准服务 <code>Mesh</code> 功能，包括使用 <code>mTLS</code> 确保服务之间的通信安全，管理访问控制策略，服务监控等。</p><p><img src="https://www.hi-linux.com/img/linux/Open-Service-Mesh-03.gif" alt=""></p><p>不过目前市场上还有很多其他的服务网格技术。那么微软为什么要推出这个呢？</p><p>“我们的客户一直告诉我们的是，今天的解决方案，<code>Istio</code> 就是一个很好的例子，非常复杂。” 他说。“这不仅仅是我说的。我们在 <code>AKS</code> 支持队列中看到了客户的数据，他们正在尝试使用这些东西 —— 他们就在这里挣扎。这就是难以使用的技术，难以大规模构建的技术。所以外面的解决方案都有一些不尽如人意的地方，我们真的觉得一些重量较轻、更注重 <code>SMI</code> 的东西，才是当前涉足这项技术的客户的最佳选择。”</p><p>Monroy 还指出，<code>Open Service Mesh</code> 可以与 <code>Linkerd</code> 等其他解决方案并驾齐驱。</p><p>很多专家预计谷歌也会将其 <code>Istio</code> 服务网格捐赠给 <code>CNCF</code>。但是这并没有实现。“这很有趣。很多人都非常关注治理方面的问题。” 他说。“我认为，当人们过度关注这一点时，你就会忽视客户是如何使用这项技术的。而事实是，客户今天使用 <code>Istio</code> 的日子并不好过。我想即使是那些深陷该社区的人也会承认这一点，这也是我们目前没有兴趣为该生态系统做出贡献的真正原因。”</p><p>英文原文地址：<a href="https://techcrunch.com/2020/08/05/microsoft-launches-open-service-mesh/" target="_blank" rel="noopener">https://techcrunch.com/2020/08/05/microsoft-launches-open-service-mesh/</a></p><blockquote><p>本文转载自：「ServiceMesher」，原文：<a href="https://mp.weixin.qq.com/s/-v-wo3Wl_qfnw3KfpdAzKA%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/-v-wo3Wl_qfnw3KfpdAzKA，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Open Service Mesh（OSM）&lt;/code&gt; 是一个轻量级的、可扩展的、云原生的服务网格，它允许用户对高度动态的微服务环境进行统一管理、安全保护，并获得开箱即用的可观察性功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官网地址 &lt;a href=&quot;https://openservicemesh.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://openservicemesh.io&lt;/a&gt;，&lt;/li&gt;
&lt;li&gt;开源仓库地址：&lt;a href=&quot;https://github.com/openservicemesh/osm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/openservicemesh/osm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/Open-Service-Mesh-01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;微软今天宣布推出一个新的基于 &lt;code&gt;Envoy&lt;/code&gt; 代理的 &lt;code&gt;Open Service Mesh&lt;/code&gt;。&lt;code&gt;Open Service Mesh&lt;/code&gt; 意在成为 &lt;code&gt;Service Mesh Interface（SMI）&lt;/code&gt; 规范的参考实现，这是 &lt;code&gt;Kubernetes&lt;/code&gt; 上 &lt;code&gt;Service Mesh&lt;/code&gt; 的标准接口，得到了这个生态系统中大多数玩家的支持。&lt;/p&gt;
&lt;p&gt;微软公司计划将 &lt;code&gt;Open Service Mesh&lt;/code&gt; 捐赠给云原生计算基金会（&lt;code&gt;CNCF&lt;/code&gt;），以确保它由社区主导，并具有开放的治理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ServiceMesh" scheme="https://www.hi-linux.com/categories/ServiceMesh/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
      <category term="ServiceMesh" scheme="https://www.hi-linux.com/tags/ServiceMesh/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 高性能网络组件 Calico 入门教程</title>
    <link href="https://www.hi-linux.com/posts/38692.html"/>
    <id>https://www.hi-linux.com/posts/38692.html</id>
    <published>2020-08-06T01:00:00.000Z</published>
    <updated>2020-08-06T06:43:16.897Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2 id="1-calico概述">1、Calico概述</h2><p>Calico 是 Kubernetes 生态系统中另一种流行的网络选择。虽然 Flannel 被公认为是最简单的选择，但 Calico 以其性能、灵活性而闻名。Calico 的功能更为全面，不仅提供主机和pod之间的网络连接，还涉及网络安全和管理。Calico CNI插件在 CNI 框架内封装了Calico的功能。</p><p>Calico 是一个基于BGP的纯三层的网络方案，与 OpenStack、Kubernetes、AWS、GCE 等云平台都能够良好地集成。Calico 在每个计算节点都利用 Linux Kernel 实现了一个高效的虚拟路由器 vRouter 来负责数据转发。每个 vRouter 都通过 BGP1 协议把在本节点上运行的容器的路由信息向整个 Calico 网络广播，并自动设置到达其他节点的路由转发规则。Calico 保证所有容器之间的数据流量都是通过IP路由的方式完成互联互通的。Calico 节点组网时可以直接利用数据中心的网络结构（ L2 或者 L3），不需要额外的 NAT、隧道或者 Overlay Network，没有额外的封包解包，能够节约 CPU 运算，提高网络效率。</p><p><img src="https://www.hi-linux.com/img/linux/k8s-calico-1.png" alt=""></p><p>Calico 在小规模集群中可以直接互联，在大规模集群中可以通过额外的 BGP route reflector 来完成。</p><p><img src="https://www.hi-linux.com/img/linux/k8s-calico-2.png" alt=""></p><p>此外，Calico 基于 Iptables 还提供了丰富的网络策略，实现了 Kubernetes 的 Network Policy 策略，提供容器间网络可达性限制的功能。</p><a id="more"></a><h2 id="2-calico-架构及-bgp-实现">2、Calico 架构及 BGP 实现</h2><p>BGP 是互联网上一个核心的去中心化自治路由协议，它通过维护IP路由表或“前缀”表来实现自治系统AS之间的可达性，属于矢量路由协议。不过，考虑到并非所有的网络都能支持 BGP，以及 Calico 控制平面的设计要求物理网络必须是二层网络，以确保 vRouter 间均直接可达，路由不能够将物理设备当作下一跳等原因，为了支持三层网络，Calico 还推出了 IP-in-IP 叠加的模型，它也使用 Overlay 的方式来传输数据。IPIP 的包头非常小，而且也是内置在内核中，因此理论上它的速度要比 VxLAN 快一点 ，但安全性更差。Calico 3.x 的默认配置使用的是IPIP类型的传输方案而非 BGP。</p><p>Calico 的系统架构如图所示：</p><p><img src="https://www.hi-linux.com/img/linux/k8s-calico-3.png" alt=""></p><p>Calico 主要由 Felix、Orchestrator Plugin、etcd、BIRD 和 BGP Router Reflector 等组件组成。</p><ul><li>Felix: Calico Agent，运行于每个节点。</li><li>Orchestrator Plugi：编排系统（如 Kubernetes 、 OpenStack 等）以将 Calico 整合进系统中的插件，例如 Kubernetes 的 CNI。</li><li>etcd：持久存储Calico数据的存储管理系统。</li><li>BIRD：用于分发路由信息的BGP客户端。</li><li>BGP Route Reflector: BGP 路由反射器，可选组件，用于较大规模的网络场景。</li></ul><h2 id="3-calico部署">3、Calico部署</h2><p>在 Kubernetes 中部署 Calico 的主要步骤如下:</p><ul><li><p>修改 Kubernetes 服务的启动参数，并重启服务</p><ul><li>设置 Master 上 kube-apiserver 服务的启动参数：–allowprivileged=true（因为 calico-node 需要以特权模式运行在各 Node 上）。</li><li>设置各 Node 上 kubelet 服务的启动参数：–networkplugin=cni（使用 CNI 网络插件）</li></ul></li><li><p>创建 Calico 服务，主要包括 calico-node 和 calico policy controller。需要创建的资源对象如下</p><ul><li>创建 ConfigMap calico-config，包含 Calico 所需的配置参数</li><li>创建 Secret calico-etcd-secrets，用于使用 TLS 方式连接 etcd。</li><li>在每个 Node 上都运行 calico/node 容器，部署为 DaemonSet</li><li>在每个 Node 上都安装 Calico（由 install-cni 容器完成）</li><li>部署一个名为 calico/kube-policy-controller 的 Deployment，以对接 Kubernetes 集群中为 Pod 设置的 Network Policy</li></ul></li></ul><p>具体部署的步骤如下：</p><p>下载 yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># curl https:&#x2F;&#x2F;docs.projectcalico.org&#x2F;v3.11&#x2F;manifests&#x2F;calico-etcd.yaml -o calico-etcd.yaml</span><br></pre></td></tr></table></figure><p>下载完后修改配置项</p><ul><li>配置连接 etcd 地址，如果使用 https，还需要配置证书。（ConfigMap，Secret）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># cat &#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;ca.pem | base64 -w 0</span><br><span class="line">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURlakNDQW1LZ0F3SUJBZ0lVRHQrZ21iYnhzWmoxRGNrbGl3K240MkI5YW5Nd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1F6RUxNQWtHQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFXcHBibWN4RURBT0JnTlZCQWNUQjBKbAphV3BwYm1jeEVEQU9CZ05WQkFNVEIyVjBZMlFnUTBFd0hoY05NVGt4TWpBeE1UQXdNREF3V2hjTk1qUXhNVEk1Ck1UQXdNREF3V2pCRE1Rc3dDUVlEVlFRR0V3SkRUakVRTUE0R0ExVUVDQk1IUW1WcGFtbHVaekVRTUE0R0ExVUUKQnhNSFFtVnBhbWx1WnpFUU1BNEdBMVVFQXhNSFpYUmpaQ0JEUVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRApnZ0VQQURDQ0FRb0NnZ0VCQUtEaGFsNHFaVG5DUE0ra3hvN3pYT2ZRZEFheGo2R3JVSWFwOGd4MTR4dFhRcnhrCmR0ZmVvUXh0UG5EbDdVdG1ZUkUza2xlYXdDOVhxM0hPZ3J1YkRuQ2ZMRnJZV05DUjFkeG1KZkNFdXU0YmZKeE4KVHNETVF1aUlxcnZ2aVN3QnQ3ZHUzczVTbEJUc2NOV0Y4TWNBMkNLTkVRbzR2Snp5RFZXRTlGTm1kdC8wOEV3UwpmZVNPRmpRV3BWWnprQW1Fc0VRaldtYUVHZjcyUXZvbmRNM2Raejl5M2x0UTgrWnJxOGdaZHRBeWpXQmdrZHB1ClVXZ2NaUTBZWmQ2Q2p4YWUwVzBqVkt5RER4bGlSQ3pLcUFiaUNucW9XYW1DVDR3RUdNU2o0Q0JiYTkwVXc3cTgKajVyekFIVVdMK0dnM2dzdndQcXFnL2JmMTR2TzQ2clRkR1g0Q2hzQ0F3RUFBYU5tTUdRd0RnWURWUjBQQVFILwpCQVFEQWdFR01CSUdBMVVkRXdFQi93UUlNQVlCQWY4Q0FRSXdIUVlEVlIwT0JCWUVGRFJTakhxMm0wVWVFM0JmCks2bDZJUUpPU2Vzck1COEdBMVVkSXdRWU1CYUFGRFJTakhxMm0wVWVFM0JmSzZsNklRSk9TZXNyTUEwR0NTcUcKU0liM0RRRUJDd1VBQTRJQkFRQUsyZXhBY2VhUndIRU9rQXkxbUsyWlhad1Q1ZC9jRXFFMmZCTmROTXpFeFJSbApnZDV0aGwvYlBKWHRSeWt0aEFUdVB2dzBjWVFPM1gwK09QUGJkOHl6dzRsZk5Ka1FBaUlvRUJUZEQvZWdmODFPCmxZOCtrRFhxZ1FZdFZLQm9HSGt5K2xRNEw4UUdOVEdaeWIvU3J5N0g3VXVDcTN0UmhzR2E4WGQ2YTNIeHJKYUsKTWZna1ZsNDA0bW83QXlWUHl0eHMrNmpLWCtJSmd3a2dHcG9DOXA2cDMyZDI1Q0NJelEweDRiZCtqejQzNXY1VApvRldBUmcySGdiTTR0aHdhRm1VRDcrbHdqVHpMczMreFN3Tys0S3Bmc2tScTR5dEEydUdNRDRqUTd0bnpoNi8wCkhQRkx6N0FGazRHRXoxaTNmMEtVTThEUlhwS0JKUXZNYzk4a3IrK24KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo&#x3D;</span><br><span class="line"></span><br><span class="line"># cat &#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;server-key.pem | base64 -w 0        </span><br><span class="line">LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdUZJdlNWNndHTTROZURqZktSWDgzWEVTWHhDVERvSVdpcFVJQmVTL3JnTHBFek10Cmk3enp6SjRyUGplbElJZ2ZRdVJHMHdJVXNzN3FDOVhpa3JGcEdnNXp5d2dMNmREZE9KNkUxcUIrUWprbk85ZzgKalRaenc3cWwxSitVOExNZ0k3TWNCU2VtWVo0TUFSTmd6Z09xd2x2WkVBMnUvNFh5azdBdUJYWFgrUTI2SitLVApYVEJ4MnBHOXoxdnVmU0xzMG52YzdKY2gxT2lLZ2R2UHBqSktPQjNMTm83ZnJXMWlaenprTExWSjlEV3U1NFdMCk4rVE5GZWZCK1lBTTdlSHVHTjdHSTJKdW1YL3hKczc3dnQzRjF2VStYSitzVTZ3cmRGMStULzVyamNUN1dDdmgKbkZVWlBxTk9NWUZTWUdlOVBIY1l0Y1Y1MENnUVV2NUx2OTE1elFJREFRQUJBb0lCQUY1YkRBUG1LZ1Y0cmVLRwpVbzhJeDNwZ29NUHppeVJaS2NybGdjYnFrOGt6aWpjZThzamZBSHNWMlJNdmp5TjVLMitseGkvTWwrWDFFRkRnCnUreldUdlJjdzZBQ3pYNXpRbHZ5b2hQdzh0Rlp5cURURUNSRjVMc2t1REdCUTlCNEVoTFVaSnFxOG54MFdMYlEKUWJVVW9YeC9ZajNhazJRUklOM0R5YnRYMlNpUHBPN1hVMmFiVkNzYkZBWW1uN2lweW16M25WWFRseDJuVk1sZQpmYzhXbERsd09pL3FJUThwZjNpRnowRDVoUGl5ZDY5eXp2b2ZrVk5CbCtodGFPbGdwdVNqSEFrNnhIcFpBUExTCkIxclVJaDk1RWozTUk5U3BuSnNWcUFFVHFSSmpYOHl3bFZYa2dvd3I2TXJuTnVXelRZUnlSNDY5UFVmKzhaSzQKUjE1WTdvMENnWUVBM21HdjErSmRuSkVrL1R4M2ZaMkFmOWJIazJ1dE5FemxUakN5YlZtYkxKamx0M1pjSG96UgphZVR2azJSQ0Q4VDU0NU9EWmIzS3Zxdzg2TXkxQW9lWmpqV3pTR1VIVHZJYTRDQ3lMenBXaVNaQkRHSE9KbDBtCk9nbnRRclFPK0UwZjNXOHZtbkp0NGoySGxMWHByL1R6Zk12R05lTWVkSUlIMC8xZXV0WkJjNnNDZ1lFQTFDK0gKaDVtQ0pnbllNcm5zK3dZZ2lWVTJFdjZmRUc2VGl2QU5XUUlldVpHcDRoclZISXc0UTV3SHhZNWgrNE15bXFORAprMmVDYU15RjFxb1NCS1hOckFZS3RtWCtxR3ltaVBpWlRJWEltZlppcENocWl3dm1udjMxbWE1Njk2NkZ6SjdaCjJTLzZkTGtweWI2OTUxRTl5azRBOEYzNVdQRlY4M01DanJ1bjBHY0NnWUFoOFVFWXIybGdZMXNFOS95NUJKZy8KYXZYdFQyc1JaNGM4WnZ4azZsOWY4RHBueFQ0TVA2d2JBS0Y4bXJubWxFY2I4RUVHLzIvNXFHcG5rZzh5d3FXeQphZ25pUytGUXNHMWZ0ajNjTFloVnlLdjNDdHFmU21weVExK2VaY00vTE81bkt2aFdGNDhrRUFZb3NaZG9qdmUzCkhaYzBWR1VxblVvNmxocW1ZOXQ3bndLQmdGbFFVRm9Sa2FqMVI5M0NTVEE0bWdWMHFyaEFHVEJQZXlkbWVCZloKUHBtWjZNcFZ4UktwS3gyNlZjTWdkYm5xdGFoRnhMSU5SZVZiQVpNa0wwVnBqVE0xcjlpckFoQmUrNUo0SWY4Rgo2VFIxYzN2cHp6OE1HVjBmUlB3Vlo0bE9HdC9RbFo1SUJjS1FGampuWXdRMVBDOGx1bHR6RXZ3UFNjQ1p6cC9KCitZOU5Bb0dBVkpybjl4QmZhYWF5T3BlMHFTTjNGVzRlaEZyaTFaRUYvVHZqS3lnMnJGUng3VDRhY1dNWWdSK20KL2RsYU9CRFN6bjNheVVXNlBwSnN1UTBFanpIajFNSVFtV3JOQXNGSVJiN0Z6YzdhaVQzMFZmNFFYUmMwQUloLwpXNHk0OW5wNWNDWUZ5SXRSWEhXMUk5bkZPSjViQjF2b1pYTWNMK1dyMVZVa2FuVlIvNEE9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line"># cat &#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;server.pem | base64 -w 0</span><br><span class="line">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURyekNDQXBlZ0F3SUJBZ0lVZUFZTHdLMkxVdnE0V2ZiSG92cTlzVS8rWlJ3d0RRWUpLb1pJaHZjTkFRRUwKQlFBd1F6RUxNQWtHQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFXcHBibWN4RURBT0JnTlZCQWNUQjBKbAphV3BwYm1jeEVEQU9CZ05WQkFNVEIyVjBZMlFnUTBFd0hoY05NVGt4TWpBeE1UQXdNREF3V2hjTk1qa3hNVEk0Ck1UQXdNREF3V2pCQU1Rc3dDUVlEVlFRR0V3SkRUakVRTUE0R0ExVUVDQk1IUW1WcFNtbHVaekVRTUE0R0ExVUUKQnhNSFFtVnBTbWx1WnpFTk1Bc0dBMVVFQXhNRVpYUmpaRENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUApBRENDQVFvQ2dnRUJBTGhTTDBsZXNCak9EWGc0M3lrVi9OMXhFbDhRa3c2Q0ZvcVZDQVhrdjY0QzZSTXpMWXU4Cjg4eWVLejQzcFNDSUgwTGtSdE1DRkxMTzZndlY0cEt4YVJvT2M4c0lDK25RM1RpZWhOYWdma0k1Snp2WVBJMDIKYzhPNnBkU2ZsUEN6SUNPekhBVW5wbUdlREFFVFlNNERxc0piMlJBTnJ2K0Y4cE93TGdWMTEva051aWZpazEwdwpjZHFSdmM5YjduMGk3Tko3M095WElkVG9pb0hiejZZeVNqZ2R5emFPMzYxdFltYzg1Q3kxU2ZRMXJ1ZUZpemZrCnpSWG53Zm1BRE8zaDdoamV4aU5pYnBsLzhTYk8rNzdkeGRiMVBseWZyRk9zSzNSZGZrLythNDNFKzFncjRaeFYKR1Q2alRqR0JVbUJudlR4M0dMWEZlZEFvRUZMK1M3L2RlYzBDQXdFQUFhT0JuVENCbWpBT0JnTlZIUThCQWY4RQpCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDCk1BQXdIUVlEVlIwT0JCWUVGTHNKb2pPRUZGcGVEdEhFSTBZOEZIUjQvV0c4TUI4R0ExVWRJd1FZTUJhQUZEUlMKakhxMm0wVWVFM0JmSzZsNklRSk9TZXNyTUJzR0ExVWRFUVFVTUJLSEJNQ29BajJIQk1Db0FqNkhCTUNvQWo4dwpEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQzVOSlh6QTQvTStFRjFHNXBsc2luSC9sTjlWWDlqK1FHdU0wRWZrCjhmQnh3bmV1ZzNBM2l4OGxXQkhZTCtCZ0VySWNsc21ZVXpJWFJXd0h4ZklKV2x1Ukx5NEk3OHB4bDBaVTZWUTYKalFiQVI2YzhrK0FhbGxBTUJUTkphY3lTWkV4MVp2c3BVTUJUU0l3bmk5RFFDUDJIQStDNG5mdHEwMGRvckQwcgp5OXVDZ3dnSDFrOG42TkdSZ0lJbVl6dFlZZmZHbEQ3R3lybEM1N0plSkFFbElUaElEMks1Y090M2dUb2JiNk5oCk9pSWpNWVAwYzRKL1FTTHNMNjZZRTh5YnhvZ2M2L3JTYzBIblladkNZbXc5MFZxY05oU3hkT2liaWtPUy9SdDAKZHVRSnU3cmdkM3pldys3Y05CaTIwTFZrbzc3dDNRZWRZK0c3dUxVZ21qNWJudkU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K</span><br></pre></td></tr></table></figure><p>将上述 Base64 加密的字符串修改至文件中声明：ca.pem 对应 etcd-ca、server-key.pem 对应 etcd-key、server.pem 对应 etcd-cert；修改 etcd 证书的位置；修改 etcd 的连接地址(与 api-server 中配置 /opt/kubernetes/cfg/kube-apiserver.conf 中相同)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># vim calico-etcd.yaml</span><br><span class="line">...</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">type: Opaque</span><br><span class="line">metadata:</span><br><span class="line">  name: calico-etcd-secrets</span><br><span class="line">  namespace: kube-system</span><br><span class="line">data:</span><br><span class="line">  # Populate the following with etcd TLS configuration if desired, but leave blank if</span><br><span class="line">  # not using TLS for etcd.</span><br><span class="line">  # The keys below should be uncommented and the values populated with the base64</span><br><span class="line">  # encoded contents of each file that would be associated with the TLS data.</span><br><span class="line">  # Example command for encoding a file contents: cat &lt;file&gt; | base64 -w 0</span><br><span class="line">  etcd-key: 填写上面的加密字符串</span><br><span class="line">  etcd-cert: 填写上面的加密字符串</span><br><span class="line">  etcd-ca: 填写上面的加密字符串</span><br><span class="line">...</span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: calico-config</span><br><span class="line">  namespace: kube-system</span><br><span class="line">data:</span><br><span class="line">  # Configure this with the location of your etcd cluster.</span><br><span class="line">  etcd_endpoints: &quot;https:&#x2F;&#x2F;192.168.2.61:2379,https:&#x2F;&#x2F;192.168.2.62:2379,https:&#x2F;&#x2F;192.168.2.63:2379&quot;</span><br><span class="line">  # If you&#39;re using TLS enabled etcd uncomment the following.</span><br><span class="line">  # You must also populate the Secret below with these files.</span><br><span class="line">  etcd_ca: &quot;&#x2F;calico-secrets&#x2F;etcd-ca&quot;</span><br><span class="line">  etcd_cert: &quot;&#x2F;calico-secrets&#x2F;etcd-cert&quot;</span><br><span class="line">  etcd_key: &quot;&#x2F;calico-secrets&#x2F;etcd-key&quot;</span><br></pre></td></tr></table></figure><p>根据实际网络规划修改 Pod CIDR（CALICO_IPV4POOL_CIDR）,与 controller-manager 配置 /opt/kubernetes/cfg/kube-controller-manager.conf 中相同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># vim calico-etcd.yaml</span><br><span class="line">...</span><br><span class="line">320             - name: CALICO_IPV4POOL_CIDR</span><br><span class="line">321               value: &quot;10.244.0.0&#x2F;16&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>选择工作模式（CALICO_IPV4POOL_IPIP），支持 BGP，IPIP，此处先关闭 IPIP 模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># vim calico-etcd.yaml</span><br><span class="line">...</span><br><span class="line">309             - name: CALICO_IPV4POOL_IPIP</span><br><span class="line">310               value: &quot;Never&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>修改完后应用清单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f calico-etcd.yaml </span><br><span class="line">secret&#x2F;calico-etcd-secrets created</span><br><span class="line">configmap&#x2F;calico-config created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io&#x2F;calico-kube-controllers created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io&#x2F;calico-kube-controllers created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io&#x2F;calico-node created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io&#x2F;calico-node created</span><br><span class="line">daemonset.apps&#x2F;calico-node created</span><br><span class="line">serviceaccount&#x2F;calico-node created</span><br><span class="line">deployment.apps&#x2F;calico-kube-controllers created</span><br><span class="line">serviceaccount&#x2F;calico-kube-controllers created</span><br><span class="line"># kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure><p>如果事先部署了 Fannel 网络组件，需要先卸载和删除 Flannel，在每个节点均需要操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># kubectl delete -f kube-flannel.yaml</span><br><span class="line"># ip link delete cni0</span><br><span class="line"># ip link delete flannel.1</span><br><span class="line"># ip route </span><br><span class="line">default via 192.168.2.2 dev eth0 </span><br><span class="line">10.244.1.0&#x2F;24 via 192.168.2.63 dev eth0 </span><br><span class="line">10.244.2.0&#x2F;24 via 192.168.2.62 dev eth0 </span><br><span class="line">169.254.0.0&#x2F;16 dev eth0 scope link metric 1002 </span><br><span class="line">172.17.0.0&#x2F;16 dev docker0 proto kernel scope link src 172.17.0.1 </span><br><span class="line">192.168.2.0&#x2F;24 dev eth0 proto kernel scope link src 192.168.2.61 </span><br><span class="line"># ip route del 10.244.1.0&#x2F;24 via 192.168.2.63 dev eth0 </span><br><span class="line"># ip route del 10.244.2.0&#x2F;24 via 192.168.2.62 dev eth0</span><br><span class="line"># ip route </span><br><span class="line">default via 192.168.2.2 dev eth0 </span><br><span class="line">169.254.0.0&#x2F;16 dev eth0 scope link metric 1002 </span><br><span class="line">172.17.0.0&#x2F;16 dev docker0 proto kernel scope link src 172.17.0.1 </span><br><span class="line">192.168.2.0&#x2F;24 dev eth0 proto kernel scope link src 192.168.2.61</span><br></pre></td></tr></table></figure><h2 id="4-calico-管理工具">4、Calico 管理工具</h2><p>下载工具：<a href="https://github.com/projectcalico/calicoctl/releases" target="_blank" rel="noopener">https://github.com/projectcalico/calicoctl/releases</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># wget -O &#x2F;usr&#x2F;local&#x2F;bin&#x2F;calicoctl https:&#x2F;&#x2F;github.com&#x2F;projectcalico&#x2F;calicoctl&#x2F;releases&#x2F;download&#x2F;v3.11.1&#x2F;calicoctl</span><br><span class="line"># chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;calicoctl</span><br></pre></td></tr></table></figure><p>使用 calicoctl 查看服务状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># .&#x2F;calicoctl node status</span><br><span class="line">Calico process is running.</span><br><span class="line"></span><br><span class="line">IPv4 BGP status</span><br><span class="line">+--------------+-------------------+-------+----------+-------------+</span><br><span class="line">| PEER ADDRESS |     PEER TYPE     | STATE |  SINCE   |    INFO     |</span><br><span class="line">+--------------+-------------------+-------+----------+-------------+</span><br><span class="line">| 192.168.2.62 | node-to-node mesh | up    | 02:58:05 | Established |</span><br><span class="line">| 192.168.2.63 | node-to-node mesh | up    | 03:08:46 | Established |</span><br><span class="line">+--------------+-------------------+-------+----------+-------------+</span><br><span class="line"></span><br><span class="line">IPv6 BGP status</span><br><span class="line">No IPv6 peers found.</span><br></pre></td></tr></table></figure><p>实际上，使用 calicoctl 查看 Node 状态就是调用系统查看的，与 netstat 效果一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># netstat -antp|grep bird  </span><br><span class="line">tcp        0      0 0.0.0.0:179             0.0.0.0:*               LISTEN      62709&#x2F;bird          </span><br><span class="line">tcp        0      0 192.168.2.61:179        192.168.2.63:58963      ESTABLISHED 62709&#x2F;bird          </span><br><span class="line">tcp        0      0 192.168.2.61:179        192.168.2.62:37390      ESTABLISHED 62709&#x2F;bird</span><br></pre></td></tr></table></figure><p>想要查看更多的信息，需要指定配置查看 etcd 中的数据</p><p>创建配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># mkdir &#x2F;etc&#x2F;calico</span><br><span class="line"># vim &#x2F;etc&#x2F;calico&#x2F;calicoctl.cfg  </span><br><span class="line">apiVersion: projectcalico.org&#x2F;v3</span><br><span class="line">kind: CalicoAPIConfig</span><br><span class="line">metadata:</span><br><span class="line">spec:</span><br><span class="line">  datastoreType: &quot;etcdv3&quot;</span><br><span class="line">  etcdEndpoints: &quot;https:&#x2F;&#x2F;192.168.2.61:2379,https:&#x2F;&#x2F;192.168.2.62:2379,https:&#x2F;&#x2F;192.168.2.63:2379&quot;</span><br><span class="line">  etcdKeyFile: &quot;&#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;server-key.pem&quot;</span><br><span class="line">  etcdCertFile: &quot;&#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;server.pem&quot;</span><br><span class="line">  etcdCACertFile: &quot;&#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;ca.pem&quot;</span><br></pre></td></tr></table></figure><p>查看数据等操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># calicoctl get node</span><br><span class="line">NAME            </span><br><span class="line">k8s-master-01   </span><br><span class="line">k8s-node-01     </span><br><span class="line">k8s-node-02</span><br></pre></td></tr></table></figure><p>查看 IPAM 的 IP 地址池：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># .&#x2F;calicoctl get ippool</span><br><span class="line">NAME                  CIDR            SELECTOR   </span><br><span class="line">default-ipv4-ippool   10.244.0.0&#x2F;16   all()      </span><br><span class="line"></span><br><span class="line"># .&#x2F;calicoctl get ippool -o wide</span><br><span class="line">NAME                  CIDR            NAT    IPIPMODE   VXLANMODE   DISABLED   SELECTOR   </span><br><span class="line">default-ipv4-ippool   10.244.0.0&#x2F;16   true   Never      Never       false      all()</span><br></pre></td></tr></table></figure><h2 id="5-calico-bgp-模式">5、Calico BGP 模式</h2><p><img src="https://www.hi-linux.com/img/linux/k8s-calico-4.png" alt=""></p><p>Pod 1 访问 Pod 2 大致流程如下：</p><ul><li>数据包从容器 1 出到达 Veth Pair 另一端（宿主机上，以 cali 前缀开头）；</li><li>宿主机根据路由规则，将数据包转发给下一跳（网关）；</li><li>到达 Node 2，根据路由规则将数据包转发给 cali 设备，从而到达容器 2。</li></ul><p>路由表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># node1</span><br><span class="line">10.244.36.65 dev cali4f18ce2c9a1 scope link </span><br><span class="line">10.244.169.128&#x2F;26 via 192.168.31.63 dev ens33 proto bird </span><br><span class="line">10.244.235.192&#x2F;26 via 192.168.31.61 dev ens33 proto bird </span><br><span class="line"></span><br><span class="line"># node2</span><br><span class="line">10.244.169.129 dev calia4d5b2258bb scope link </span><br><span class="line">10.244.36.64&#x2F;26 via 192.168.31.62 dev ens33 proto bird</span><br><span class="line">10.244.235.192&#x2F;26 via 192.168.31.61 dev ens33 proto bird</span><br></pre></td></tr></table></figure><p>其中，这里最核心的 “下一跳” 路由规则，就是由 Calico 的 Felix 进程负责维护的。这些路由规则信息，则是通过 BGP Client 也就是 BIRD 组件，使用 BGP 协议传输而来的。</p><p>不难发现，Calico 项目实际上将集群里的所有节点，都当作是边界路由器来处理，它们一起组成了一个全连通的网络，互相之间通过 BGP 协议交换路由规则。这些节点，我们称为 BGP Peer。</p><p>Calico 相关文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># ls &#x2F;opt&#x2F;cni&#x2F;bin&#x2F;calico-ipam </span><br><span class="line">&#x2F;opt&#x2F;cni&#x2F;bin&#x2F;calico-ipam</span><br><span class="line"># cat &#x2F;etc&#x2F;cni&#x2F;net.d&#x2F;</span><br><span class="line">10-calico.conflist  calico-kubeconfig    calico-tls&#x2F;          </span><br><span class="line"># cat &#x2F;etc&#x2F;cni&#x2F;net.d&#x2F;10-calico.conflist </span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;k8s-pod-network&quot;,</span><br><span class="line">  &quot;cniVersion&quot;: &quot;0.3.1&quot;,</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;type&quot;: &quot;calico&quot;,</span><br><span class="line">      &quot;log_level&quot;: &quot;info&quot;,</span><br><span class="line">      &quot;etcd_endpoints&quot;: &quot;https:&#x2F;&#x2F;192.168.2.61:2379,https:&#x2F;&#x2F;192.168.2.62:2379,https:&#x2F;&#x2F;192.168.2.63:2379&quot;,</span><br><span class="line">      &quot;etcd_key_file&quot;: &quot;&#x2F;etc&#x2F;cni&#x2F;net.d&#x2F;calico-tls&#x2F;etcd-key&quot;,</span><br><span class="line">      &quot;etcd_cert_file&quot;: &quot;&#x2F;etc&#x2F;cni&#x2F;net.d&#x2F;calico-tls&#x2F;etcd-cert&quot;,</span><br><span class="line">      &quot;etcd_ca_cert_file&quot;: &quot;&#x2F;etc&#x2F;cni&#x2F;net.d&#x2F;calico-tls&#x2F;etcd-ca&quot;,</span><br><span class="line">      &quot;mtu&quot;: 1440,</span><br><span class="line">      &quot;ipam&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;calico-ipam&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;policy&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;k8s&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;kubernetes&quot;: &#123;</span><br><span class="line">          &quot;kubeconfig&quot;: &quot;&#x2F;etc&#x2F;cni&#x2F;net.d&#x2F;calico-kubeconfig&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;type&quot;: &quot;portmap&quot;,</span><br><span class="line">      &quot;snat&quot;: true,</span><br><span class="line">      &quot;capabilities&quot;: &#123;&quot;portMappings&quot;: true&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-calico-route-reflector-模式rr">6、Calico Route Reflector 模式（RR）</h2><p>Calico 维护的网络在默认是（Node-to-Node Mesh）全互联模式，Calico 集群中的节点之间都会相互建立连接，用于路由交换。但是随着集群规模的扩大，Mesh 模式将形成一个巨大服务网格，连接数成倍增加。</p><p>这时就需要使用 Route Reflector（路由器反射）模式解决这个问题。</p><p>确定一个或多个 Calico 节点充当路由反射器（一般配置两个以上），让其他节点从这个 RR 节点获取路由信息。</p><p>具体步骤如下：</p><ol><li>关闭 node-to-node BGP 网格</li></ol><p>默认 node to node 模式最好在 100 个节点以下</p><p>添加 default BGP 配置，调整 nodeToNodeMeshEnabled 和 asNumber：bgp.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># cat &lt;&lt; EOF | calicoctl create -f -</span><br><span class="line">apiVersion: projectcalico.org&#x2F;v3</span><br><span class="line">kind: BGPConfiguration</span><br><span class="line">metadata:</span><br><span class="line">  name: default</span><br><span class="line">spec:</span><br><span class="line">  logSeverityScreen: Info</span><br><span class="line">  nodeToNodeMeshEnabled: false  </span><br><span class="line">  asNumber: 63400</span><br><span class="line">EOF</span><br><span class="line"># calicoctl apply -f bgp.yaml  # 一旦执行，集群会立即断网</span><br><span class="line">Successfully applied 1 &#39;BGPConfiguration&#39; resource(s)</span><br><span class="line"># calicoctl get bgpconfig</span><br><span class="line">NAME      LOGSEVERITY   MESHENABLED   ASNUMBER   </span><br><span class="line">default   Info          false         63400</span><br><span class="line"># calicoctl node status</span><br><span class="line">Calico process is running.</span><br><span class="line"></span><br><span class="line">IPv4 BGP status</span><br><span class="line">No IPv4 peers found.</span><br><span class="line"></span><br><span class="line">IPv6 BGP status</span><br><span class="line">No IPv6 peers found.</span><br></pre></td></tr></table></figure><p>ASN 号可以通过获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># calicoctl get nodes --output&#x3D;wide  </span><br><span class="line">NAME            ASN       IPV4              IPV6   </span><br><span class="line">k8s-master-01   (63400)   192.168.2.61&#x2F;24          </span><br><span class="line">k8s-node-01     (63400)   192.168.2.62&#x2F;24          </span><br><span class="line">k8s-node-02     (63400)   192.168.2.63&#x2F;24</span><br></pre></td></tr></table></figure><ol start="2"><li>配置指定节点充当路由反射器</li></ol><p>为方便让 BGPPeer 轻松选择节点，通过标签选择器匹配。</p><p>给路由器反射器节点打标签：</p><p>增加第二个路由反射器时，给新的 node 打标签并配置成反射器节点即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kubectl label node k8s-node-02 route-reflector&#x3D;true</span><br><span class="line">node&#x2F;k8s-node-02 labeled</span><br></pre></td></tr></table></figure><p>然后配置路由器反射器节点 routeReflectorClusterID：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># calicoctl get nodes k8s-node-02 -o yaml&gt; node.yaml</span><br><span class="line"># vim node.yaml</span><br><span class="line">apiVersion: projectcalico.org&#x2F;v3</span><br><span class="line">kind: Node</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    projectcalico.org&#x2F;kube-labels: &#39;&#123;&quot;beta.kubernetes.io&#x2F;arch&quot;:&quot;amd64&quot;,&quot;beta.kubernetes.io&#x2F;os&quot;:&quot;linux&quot;,&quot;kubernetes.io&#x2F;arch&quot;:&quot;amd64&quot;,&quot;kubernetes.io&#x2F;hostname&quot;:&quot;k8s-node2&quot;,&quot;kubernetes.io&#x2F;os&quot;:&quot;linux&quot;&#125;&#39;</span><br><span class="line">  creationTimestamp: null</span><br><span class="line">  labels:</span><br><span class="line">    beta.kubernetes.io&#x2F;arch: amd64</span><br><span class="line">    beta.kubernetes.io&#x2F;os: linux</span><br><span class="line">    kubernetes.io&#x2F;arch: amd64</span><br><span class="line">    kubernetes.io&#x2F;hostname: k8s-node2</span><br><span class="line">    kubernetes.io&#x2F;os: linux</span><br><span class="line">  name: k8s-node2</span><br><span class="line">spec:</span><br><span class="line">  bgp:</span><br><span class="line">    ipv4Address: 192.168.31.63&#x2F;24</span><br><span class="line">    routeReflectorClusterID: 244.0.0.1   # 增加集群ID</span><br><span class="line">  orchRefs:</span><br><span class="line">  - nodeName: k8s-node2</span><br><span class="line">    orchestrator: k8s</span><br><span class="line"># .&#x2F;calicoctl apply -f node.yaml </span><br><span class="line">Successfully applied 1 &#39;Node&#39; resource(s)</span><br></pre></td></tr></table></figure><p>现在，很容易使用标签选择器将路由反射器节点与其他非路由反射器节点配置为对等。表示所有节点都连接路由反射器节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># vim peer-with-route-reflectors.yaml</span><br><span class="line">apiVersion: projectcalico.org&#x2F;v3</span><br><span class="line">kind: BGPPeer</span><br><span class="line">metadata:</span><br><span class="line">  name: peer-with-route-reflectors</span><br><span class="line">spec:</span><br><span class="line">  nodeSelector: all()</span><br><span class="line">  peerSelector: route-reflector &#x3D;&#x3D; &#39;true&#39;</span><br><span class="line"># calicoctl apply -f peer-with-route-reflectors.yaml</span><br><span class="line">Successfully applied 1 &#39;BGPPeer&#39; resource(s)</span><br><span class="line"># calicoctl get bgppeer</span><br><span class="line">NAME                         PEERIP   NODE    ASN   </span><br><span class="line">peer-with-route-reflectors            all()   0</span><br></pre></td></tr></table></figure><p>查看节点的BGP连接状态，只有本节点与路由反射器节点的连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># calicoctl node status                             </span><br><span class="line">Calico process is running.</span><br><span class="line"></span><br><span class="line">IPv4 BGP status</span><br><span class="line">+--------------+---------------+-------+----------+-------------+</span><br><span class="line">| PEER ADDRESS |   PEER TYPE   | STATE |  SINCE   |    INFO     |</span><br><span class="line">+--------------+---------------+-------+----------+-------------+</span><br><span class="line">| 192.168.2.63 | node specific | up    | 04:17:14 | Established |</span><br><span class="line">+--------------+---------------+-------+----------+-------------+</span><br><span class="line"></span><br><span class="line">IPv6 BGP status</span><br><span class="line">No IPv6 peers found.</span><br></pre></td></tr></table></figure><h2 id="7-calico-ipip-模式">7、Calico IPIP 模式</h2><p>Flannel host-gw 模式最主要的限制，就是要求集群宿主机之间是二层连通的。而这个限制对于 Calico 来说，也同样存在。</p><p>修改为 IPIP 模式：</p><p>也可以直接在部署 Calico 的时候直接修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># calicoctl get ipPool -o yaml &gt; ipip.yaml</span><br><span class="line"># vi ipip.yaml</span><br><span class="line">apiVersion: projectcalico.org&#x2F;v3</span><br><span class="line">kind: IPPool</span><br><span class="line">metadata:</span><br><span class="line">  name: default-ipv4-ippool</span><br><span class="line">spec:</span><br><span class="line">  blockSize: 26</span><br><span class="line">  cidr: 10.244.0.0&#x2F;16</span><br><span class="line">  ipipMode: Always  # 启动ipip模式</span><br><span class="line">  natOutgoing: true</span><br><span class="line"></span><br><span class="line"># calicoctl apply -f ipip.yaml</span><br><span class="line"># calicoctl get ippool -o wide</span><br><span class="line">NAME                  CIDR            NAT    IPIPMODE   VXLANMODE   DISABLED   SELECTOR   </span><br><span class="line">default-ipv4-ippool   10.244.0.0&#x2F;16   true   Always     Never       false      all()</span><br><span class="line"># ip route # 会增加tunl0网卡</span><br><span class="line">default via 192.168.2.2 dev eth0 </span><br><span class="line">10.244.44.192&#x2F;26 via 192.168.2.63 dev tunl0 proto bird onlink </span><br><span class="line">blackhole 10.244.151.128&#x2F;26 proto bird </span><br><span class="line">10.244.154.192&#x2F;26 via 192.168.2.62 dev tunl0 proto bird onlink </span><br><span class="line">169.254.0.0&#x2F;16 dev eth0 scope link metric 1002 </span><br><span class="line">172.17.0.0&#x2F;16 dev docker0 proto kernel scope link src 172.17.0.1 </span><br><span class="line">192.168.2.0&#x2F;24 dev eth0 proto kernel scope link src 192.168.2.61</span><br></pre></td></tr></table></figure><p>IPIP 示意图：</p><p><img src="https://www.hi-linux.com/img/linux/k8s-calico-5.png" alt=""></p><p>Pod 1 访问 Pod 2 大致流程如下：</p><ul><li>数据包从容器1 出到达 Veth Pair 另一端（宿主机上，以 cali 前缀开头）；</li><li>进入 IP 隧道设备（ tunl0 ），由 Linux 内核 IPIP 驱动封装在宿主机网络的 IP 包中（新的 IP 包目的地之是原 IP 包的下一跳地址，即 192.168.31.63 ），这样，就成了 Node1 到 Node2 的数据包；</li><li>数据包经过路由器三层转发到 Node2；</li><li>Node2 收到数据包后，网络协议栈会使用 IPIP 驱动进行解包，从中拿到原始 IP 包；</li><li>然后根据路由规则，根据路由规则将数据包转发给 Cali 设备，从而到达容器 2。</li></ul><p>路由表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># node1</span><br><span class="line">10.244.36.65 dev cali4f18ce2c9a1 scope link </span><br><span class="line">10.244.169.128&#x2F;26 via 192.168.31.63 dev tunl0 proto bird onlink </span><br><span class="line"># node2</span><br><span class="line">10.244.169.129 dev calia4d5b2258bb scope link </span><br><span class="line">10.244.36.64&#x2F;26 via 192.168.31.62 dev tunl0 proto bird onlink</span><br></pre></td></tr></table></figure><p>不难看到，当 Calico 使用 IPIP 模式的时候，集群的网络性能会因为额外的封包和解包工作而下降。所以建议你将所有宿主机节点放在一个子网里，避免使用 IPIP。</p><h2 id="8-calico-网络策略">8、Calico 网络策略</h2><p>部署完成 Calico 后，就可以实现 K8s 中的网络策略 NetworkPolicy，对于网络策略在前面的文章使用 Flannel+ Canal 实现 K8s 的 NetworkPolicy 有详细描述，这里不再赘述。😊</p><blockquote><p>本文转载自：「山山仙人博客」，原文：<a href="https://tinyurl.com/y2hlh7ks%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/y2hlh7ks，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、Calico概述&quot;&gt;1、Calico概述&lt;/h2&gt;
&lt;p&gt;Calico 是 Kubernetes 生态系统中另一种流行的网络选择。虽然 Flannel 被公认为是最简单的选择，但 Calico 以其性能、灵活性而闻名。Calico 的功能更为全面，不仅提供主机和pod之间的网络连接，还涉及网络安全和管理。Calico CNI插件在 CNI 框架内封装了Calico的功能。&lt;/p&gt;
&lt;p&gt;Calico 是一个基于BGP的纯三层的网络方案，与 OpenStack、Kubernetes、AWS、GCE 等云平台都能够良好地集成。Calico 在每个计算节点都利用 Linux Kernel 实现了一个高效的虚拟路由器 vRouter 来负责数据转发。每个 vRouter 都通过 BGP1 协议把在本节点上运行的容器的路由信息向整个 Calico 网络广播，并自动设置到达其他节点的路由转发规则。Calico 保证所有容器之间的数据流量都是通过IP路由的方式完成互联互通的。Calico 节点组网时可以直接利用数据中心的网络结构（ L2 或者 L3），不需要额外的 NAT、隧道或者 Overlay Network，没有额外的封包解包，能够节约 CPU 运算，提高网络效率。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/k8s-calico-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Calico 在小规模集群中可以直接互联，在大规模集群中可以通过额外的 BGP route reflector 来完成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/k8s-calico-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;此外，Calico 基于 Iptables 还提供了丰富的网络策略，实现了 Kubernetes 的 Network Policy 策略，提供容器间网络可达性限制的功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Calico" scheme="https://www.hi-linux.com/categories/Calico/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
      <category term="Calico" scheme="https://www.hi-linux.com/tags/Calico/"/>
    
  </entry>
  
  <entry>
    <title>巧用 Nginx 快速实现 HTTPS 双向认证</title>
    <link href="https://www.hi-linux.com/posts/38492.html"/>
    <id>https://www.hi-linux.com/posts/38492.html</id>
    <published>2020-08-03T01:00:00.000Z</published>
    <updated>2020-08-03T02:28:16.331Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>研究 <code>HTTPS</code> 的双向认证实现与原理，踩了不少坑，终于整个流程都跑通了，现在总结出一篇文档来，把一些心得，特别是容易踩坑的地方记录下来。</p><h2 id="1原理">1.原理</h2><p>双向认证，顾名思义，客户端和服务器端都需要验证对方的身份，在建立 <code>HTTPS</code> 连接的过程中，握手的流程比单向认证多了几步。单向认证的过程，客户端从服务器端下载服务器端公钥证书进行验证，然后建立安全通信通道。双向通信流程，客户端除了需要从服务器端下载服务器的公钥证书进行验证外，还需要把客户端的公钥证书上传到服务器端给服务器端进行验证，等双方都认证通过了，才开始建立安全通信通道进行数据传输。</p><h3 id="11-单向认证流程">1.1 单向认证流程</h3><p>单向认证流程中，服务器端保存着公钥证书和私钥两个文件，整个握手过程如下：</p><p><img src="https://www.hi-linux.com/img/linux/nginx-ssl-01.png" alt=""></p><ol><li>客户端发起建立 HTTPS 连接请求，将 SSL 协议版本的信息发送给服务器端；</li><li>服务器端将本机的公钥证书（server.crt）发送给客户端；</li><li>客户端读取公钥证书 (server.crt)，取出了服务端公钥；</li><li>客户端生成一个随机数（密钥 R），用刚才得到的服务器公钥去加密这个随机数形成密文，发送给服务端；</li><li>服务端用自己的私钥 (server.key) 去解密这个密文，得到了密钥 R</li><li>服务端和客户端在后续通讯过程中就使用这个密钥R进行通信了。</li></ol><h3 id="12-双向认证流程">1.2 双向认证流程</h3><p><img src="https://www.hi-linux.com/img/linux/nginx-ssl-02.png" alt=""></p><ol><li>客户端发起建立 HTTPS 连接请求，将 SSL 协议版本的信息发送给服务端；</li><li>服务器端将本机的公钥证书 (server.crt) 发送给客户端；</li><li>客户端读取公钥证书 (server.crt)，取出了服务端公钥；</li><li>客户端将客户端公钥证书 (client.crt) 发送给服务器端；</li><li>服务器端解密客户端公钥证书，拿到客户端公钥；</li><li>客户端发送自己支持的加密方案给服务器端；</li><li>服务器端根据自己和客户端的能力，选择一个双方都能接受的加密方案，使用客户端的公钥加密后发送给客户端；</li><li>客户端使用自己的私钥解密加密方案，生成一个随机数 R，使用服务器公钥加密后传给服务器端；</li><li>服务端用自己的私钥去解密这个密文，得到了密钥 R</li><li>服务端和客户端在后续通讯过程中就使用这个密钥R进行通信了。</li></ol><a id="more"></a><h2 id="2-证书生成">2. 证书生成</h2><p>从上一章内容中，我们可以总结出来，如果要把整个双向认证的流程跑通，最终需要五个证书文件：</p><ul><li>服务器端公钥证书：server.crt</li><li>服务器端私钥文件：server.key</li><li>客户端公钥证书：client.crt</li><li>客户端私钥文件：client.key</li><li>客户端集成证书（包括公钥和私钥，用于浏览器访问场景）：client.p12</li></ul><p>生成这一些列证书之前，我们需要先生成一个 <code>CA</code> 根证书，然后由这个 <code>CA</code> 根证书颁发服务器公钥证书和客户端公钥证书。</p><p><img src="https://www.hi-linux.com/img/linux/nginx-ssl-03.png" alt=""></p><p>我们可以全程使用 <code>Openssl</code> 来生成一些列的自签名证书，自签名证书没有通过证书机构的认证，很多浏览器会认为不安全，但我们用来实验是足够的。需要在本机安装了 <code>Openssl</code> 后才能继续本章的实验。</p><h3 id="21-生成自签名根证书">2.1 生成自签名根证书</h3><ol><li>创建根证书私钥：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl genrsa -out root.key 1024</span><br></pre></td></tr></table></figure><ol start="2"><li>创建根证书请求文件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ openssl req -new -out root.csr -key root.key</span><br><span class="line"></span><br><span class="line">后续参数请自行填写，下面是一个例子：</span><br><span class="line"></span><br><span class="line">Country Name (2 letter code) [XX]:cn</span><br><span class="line">State or Province Name (full name) []:bj</span><br><span class="line">Locality Name (eg, city) [Default City]:bj</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:alibaba</span><br><span class="line">Organizational Unit Name (eg, section) []:test</span><br><span class="line">Common Name (eg, your name or your servers hostname) []:www.yourdomain.com</span><br><span class="line">Email Address []:a.alibaba.com</span><br><span class="line">A challenge password []:</span><br><span class="line">An optional company name []:</span><br></pre></td></tr></table></figure><ol start="3"><li>创建根证书：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl x509 -req -in root.csr -out root.crt -signkey root.key -CAcreateserial -days 3650</span><br></pre></td></tr></table></figure><p>在创建证书请求文件的时候需要注意三点，下面生成服务器请求文件和客户端请求文件均要注意这三点：</p><ul><li>Common Name 填写证书对应的服务域名；</li><li>所有字段的填写，根证书、服务器端证书、客户端证书需保持一致</li><li>最后的密码可以直接回车跳过。</li></ul><p>经过上面三个命令行，我们最终可以得到一个签名有效期为 10 年的根证书 root.crt，后面我们可以用这个根证书去颁发服务器证书和客户端证书。</p><h3 id="22-生成自签名服务器端证书">2.2 生成自签名服务器端证书</h3><ol><li>生成服务器端证书私钥：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl genrsa -out server.key 1024</span><br></pre></td></tr></table></figure><ol start="2"><li>生成服务器证书请求文件，过程和注意事项参考根证书，本节不详述：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl req -new -out server.csr -key server.key</span><br></pre></td></tr></table></figure><ol start="3"><li>生成服务器端公钥证书</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl x509 -req -in server.csr -out server.crt -signkey server.key -CA root.crt -CAkey root.key -CAcreateserial -days 3650</span><br></pre></td></tr></table></figure><p>经过上面的三个命令，我们得到：</p><ul><li>server.key：服务器端的秘钥文件</li><li>server.crt：有效期十年的服务器端公钥证书，使用根证书和服务器端私钥文件一起生成</li></ul><h3 id="23-生成自签名客户端证书">2.3 生成自签名客户端证书</h3><ol><li>生成客户端证书秘钥：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl genrsa -out client.key 1024</span><br></pre></td></tr></table></figure><ol start="2"><li>生成客户端证书请求文件，过程和注意事项参考根证书，本节不详述：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl req -new -out client.csr -key client.key</span><br></pre></td></tr></table></figure><ol start="3"><li>生客户端证书</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl x509 -req -in client.csr -out client.crt -signkey client.key -CA root.crt -CAkey root.key -CAcreateserial -days 3650</span><br></pre></td></tr></table></figure><ol start="4"><li>生客户端 P12 格式证书</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl pkcs12 -export -clcerts -in client.crt -inkey client.key -out client.p12</span><br></pre></td></tr></table></figure><p>经过上面的三个命令，我们得到：</p><ul><li>client.key：客户端的私钥文件</li><li>client.crt：有效期十年的客户端证书，使用根证书和客户端私钥一起生成</li><li>client.p12：客户端 p12 格式，这个证书文件包含客户端的公钥和私钥，主要用来给浏览器访问使用</li></ul><h2 id="3nginx-配置">3.Nginx 配置</h2><p>有了上面的一些列证书，我们可以在 <code>Nginx</code> 服务器上配置双向认证的 <code>HTTPS</code> 服务了，具体配置方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        server_name  www.yourdomain.com;</span><br><span class="line">        ssl                  on;  </span><br><span class="line">        ssl_certificate      &#x2F;data&#x2F;sslKey&#x2F;server.crt;  #server公钥证书</span><br><span class="line">        ssl_certificate_key  &#x2F;data&#x2F;sslKey&#x2F;server.key;  #server私钥</span><br><span class="line">        ssl_client_certificate &#x2F;data&#x2F;sslKey&#x2F;client.crt;  #客户端公钥证书</span><br><span class="line">        ssl_verify_client on;  #开启客户端证书验证  </span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>具体就是将服务器端的两个证书文件 (server.crt/server.key) 和客户端的公钥证书文件 (client.crt) 的路径配置到 <code>Nginx</code> 的 <code>server</code> 节点配置中，并且把 <code>ssl_verify_client</code> 这个参数设置为 <code>on</code>。</p><p>有一点需要注意的就是，如果客户端证书不是由根证书直接颁发的，配置中还需要加一个配置：<code>ssl_verify_depth 1</code> ;</p><p>配置完成后，执行 <code>nginx -s reload</code> 重新加载下就生效了。</p><h2 id="4curl-调用">4.curl 调用</h2><p>使用 <code>curl</code> 加上证书路径，可以直接测试 <code>Nginx</code> 的 <code>HTTPS</code> 双向认证是否配置成功。</p><ol><li>带证书的成功调用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># --cert指定客户端公钥证书的路径</span><br><span class="line"># --key指定客户端私钥文件的路径</span><br><span class="line"># -k不校验证书的合法性，因为我们用的是自签名证书，所以需要加这个参数</span><br><span class="line"># 可以使用 -v 来观察具体的 SSL 握手过程</span><br><span class="line"></span><br><span class="line">$ curl --cert .&#x2F;client.crt --key .&#x2F;client.key https:&#x2F;&#x2F;integration-fred2.fredhuang.com -k -v</span><br><span class="line">* Rebuilt URL to: https:&#x2F;&#x2F;integration-fred2.fredhuang.com&#x2F;</span><br><span class="line">*   Trying 47.91.39.145...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to integration-fred2.fredhuang.com (47.91.39.145) port 443 (#0)</span><br><span class="line">* ALPN, offering h2</span><br><span class="line">* ALPN, offering http&#x2F;1.1</span><br><span class="line">* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH</span><br><span class="line">* successfully set certificate verify locations:</span><br><span class="line">*   CAfile: &#x2F;etc&#x2F;ssl&#x2F;cert.pem</span><br><span class="line">  CApath: none</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Client hello (1):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Server hello (2):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Certificate (11):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Server key exchange (12):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Request CERT (13):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Server finished (14):</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Certificate (11):</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, CERT verify (15):</span><br><span class="line">* TLSv1.2 (OUT), TLS change cipher, Client hello (1):</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Finished (20):</span><br><span class="line">* TLSv1.2 (IN), TLS change cipher, Client hello (1):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Finished (20):</span><br><span class="line">* SSL connection using TLSv1.2 &#x2F; ECDHE-RSA-AES128-GCM-SHA256</span><br><span class="line">* ALPN, server accepted to use h2</span><br><span class="line">* Server certificate:</span><br><span class="line">*  subject: C&#x3D;CN; ST&#x3D;BeiJing; L&#x3D;BeiJing; O&#x3D;Alibaba; OU&#x3D;Test; CN&#x3D;integration-fred2.fredhuang.com; emailAddress&#x3D;a@alibaba.com</span><br><span class="line">*  start date: Oct 30 06:43:19 2019 GMT</span><br><span class="line">*  expire date: Oct 27 06:43:19 2029 GMT</span><br><span class="line">*  issuer: C&#x3D;CN; ST&#x3D;BeiJing; L&#x3D;BeiJing; O&#x3D;Alibaba; OU&#x3D;Test; CN&#x3D;integration-fred2.fredhuang.com; emailAddress&#x3D;a@alibaba.com</span><br><span class="line">*  SSL certificate verify result: self signed certificate (18), continuing anyway.</span><br><span class="line">* Using HTTP2, server supports multi-use</span><br><span class="line">* Connection state changed (HTTP&#x2F;2 confirmed)</span><br><span class="line">* Copying HTTP&#x2F;2 data in stream buffer to connection buffer after upgrade: len&#x3D;0</span><br><span class="line">* Using Stream ID: 1 (easy handle 0x7f8ae1809a00)</span><br><span class="line">&gt; GET &#x2F; HTTP&#x2F;2</span><br><span class="line">&gt; Host: integration-fred2.fredhuang.com</span><br><span class="line">&gt; User-Agent: curl&#x2F;7.54.0</span><br><span class="line">&gt; Accept: *&#x2F;*</span><br><span class="line">&gt;</span><br><span class="line">* Connection state changed (MAX_CONCURRENT_STREAMS updated)!</span><br><span class="line">&lt; HTTP&#x2F;2 200</span><br><span class="line">&lt; server: Tengine</span><br><span class="line">&lt; date: Fri, 01 Nov 2019 11:16:39 GMT</span><br><span class="line">&lt; content-type: text&#x2F;plain;charset&#x3D;UTF-8</span><br><span class="line">&lt; content-length: 0</span><br></pre></td></tr></table></figure><ol start="2"><li>不带证书的失败调用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">$ curl  https:&#x2F;&#x2F;integration-fred2.fredhuang.com -k -v</span><br><span class="line">* Rebuilt URL to: https:&#x2F;&#x2F;integration-fred2.fredhuang.com&#x2F;</span><br><span class="line">*   Trying 47.91.39.145...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to integration-fred2.fredhuang.com (47.91.39.145) port 443 (#0)</span><br><span class="line">* ALPN, offering h2</span><br><span class="line">* ALPN, offering http&#x2F;1.1</span><br><span class="line">* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH</span><br><span class="line">* successfully set certificate verify locations:</span><br><span class="line">*   CAfile: &#x2F;etc&#x2F;ssl&#x2F;cert.pem</span><br><span class="line">  CApath: none</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Client hello (1):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Server hello (2):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Certificate (11):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Server key exchange (12):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Request CERT (13):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Server finished (14):</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Certificate (11):</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):</span><br><span class="line">* TLSv1.2 (OUT), TLS change cipher, Client hello (1):</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Finished (20):</span><br><span class="line">* TLSv1.2 (IN), TLS change cipher, Client hello (1):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Finished (20):</span><br><span class="line">* SSL connection using TLSv1.2 &#x2F; ECDHE-RSA-AES128-GCM-SHA256</span><br><span class="line">* ALPN, server accepted to use h2</span><br><span class="line">* Server certificate:</span><br><span class="line">*  subject: C&#x3D;CN; ST&#x3D;BeiJing; L&#x3D;BeiJing; O&#x3D;Alibaba; OU&#x3D;Test; CN&#x3D;integration-fred2.fredhuang.com; emailAddress&#x3D;a@alibaba.com</span><br><span class="line">*  start date: Oct 30 06:43:19 2019 GMT</span><br><span class="line">*  expire date: Oct 27 06:43:19 2029 GMT</span><br><span class="line">*  issuer: C&#x3D;CN; ST&#x3D;BeiJing; L&#x3D;BeiJing; O&#x3D;Alibaba; OU&#x3D;Test; CN&#x3D;integration-fred2.fredhuang.com; emailAddress&#x3D;a@alibaba.com</span><br><span class="line">*  SSL certificate verify result: self signed certificate (18), continuing anyway.</span><br><span class="line">* Using HTTP2, server supports multi-use</span><br><span class="line">* Connection state changed (HTTP&#x2F;2 confirmed)</span><br><span class="line">* Copying HTTP&#x2F;2 data in stream buffer to connection buffer after upgrade: len&#x3D;0</span><br><span class="line">* Using Stream ID: 1 (easy handle 0x7fcc52805e00)</span><br><span class="line">&gt; GET &#x2F; HTTP&#x2F;2</span><br><span class="line">&gt; Host: integration-fred2.fredhuang.com</span><br><span class="line">&gt; User-Agent: curl&#x2F;7.54.0</span><br><span class="line">&gt; Accept: *&#x2F;*</span><br><span class="line">&gt;</span><br><span class="line">* Connection state changed (MAX_CONCURRENT_STREAMS updated)!</span><br><span class="line">&lt; HTTP&#x2F;2 400</span><br><span class="line">&lt; server: Tengine</span><br><span class="line">&lt; date: Fri, 01 Nov 2019 11:25:28 GMT</span><br><span class="line">&lt; content-type: text&#x2F;html</span><br><span class="line">&lt; content-length: 685</span><br><span class="line">&lt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;IETF&#x2F;&#x2F;DTD HTML 2.0&#x2F;&#x2F;EN&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;400 No required SSL certificate was sent&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;400 Bad Request&lt;&#x2F;h1&gt;&lt;&#x2F;center&gt;</span><br><span class="line">&lt;center&gt;No required SSL certificate was sent&lt;&#x2F;center&gt;</span><br><span class="line"> Sorry for the inconvenience.&lt;br&#x2F;&gt;</span><br><span class="line">Please report this message and include the following information to us.&lt;br&#x2F;&gt;</span><br><span class="line">Thank you very much!&lt;&#x2F;p&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;URL:&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;https:&#x2F;&#x2F;integration-fred2.fredhuang.com:444&#x2F;&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;Server:&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;cag-access-tengine011192099198.au49&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;Date:&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;2019&#x2F;11&#x2F;01 19:25:28&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line">&lt;hr&#x2F;&gt;Powered by Tengine&lt;hr&gt;&lt;center&gt;tengine&lt;&#x2F;center&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="5java-调用">5.Java 调用</h2><p>由于使用的是自签名证书，使用 <code>ApacheHttpClient</code> 去调用的话，需要将服务器证书加入可信任证书库中，才能成功调用，也可以在代码中简单忽略证书。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd $JAVA_HOME</span><br><span class="line">$ sudo .&#x2F;bin&#x2F;keytool -import -alias ttt -keystore cacerts -file &#x2F;Users&#x2F;fred&#x2F;temp&#x2F;cert5&#x2F;server.crt</span><br></pre></td></tr></table></figure><p>将服务器端公钥证书设置为可信证书后，使用以下代码可以直接发起带客户端证书的 <code>HTTPS</code> 请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.http.HttpEntity;</span><br><span class="line">import org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line">import org.apache.http.client.methods.HttpGet;</span><br><span class="line">import org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class="line">import org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line">import org.apache.http.impl.client.HttpClients;</span><br><span class="line">import org.apache.http.ssl.SSLContexts;</span><br><span class="line">import org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line">import javax.net.ssl.SSLContext;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.security.KeyStore;</span><br><span class="line"></span><br><span class="line">public class HttpClientWithClientCert &#123;</span><br><span class="line"></span><br><span class="line">    private final static String PFX_PATH &#x3D; &quot;&#x2F;Users&#x2F;fred&#x2F;temp&#x2F;cert5&#x2F;client.p12&quot;;    &#x2F;&#x2F;客户端证书路径</span><br><span class="line">    private final static String PFX_PWD &#x3D; &quot;123456&quot;;    &#x2F;&#x2F;客户端证书密码</span><br><span class="line"></span><br><span class="line">    public static String sslRequestGet(String url) throws Exception &#123;</span><br><span class="line">        KeyStore keyStore &#x3D; KeyStore.getInstance(&quot;PKCS12&quot;);</span><br><span class="line">        InputStream instream &#x3D; new FileInputStream(new File(PFX_PATH));</span><br><span class="line">        try &#123;</span><br><span class="line">            keyStore.load(instream, PFX_PWD.toCharArray());</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            instream.close();</span><br><span class="line">        &#125;</span><br><span class="line">        SSLContext sslcontext &#x3D; SSLContexts.custom().loadKeyMaterial(keyStore, PFX_PWD.toCharArray()).build();</span><br><span class="line">        SSLConnectionSocketFactory sslsf &#x3D; new SSLConnectionSocketFactory(sslcontext</span><br><span class="line">                , new String[] &#123; &quot;TLSv1&quot; &#125;    &#x2F;&#x2F; supportedProtocols ,这里可以按需要设置</span><br><span class="line">                , null    &#x2F;&#x2F; supportedCipherSuites</span><br><span class="line">                , SSLConnectionSocketFactory.getDefaultHostnameVerifier());</span><br><span class="line"></span><br><span class="line">        CloseableHttpClient httpclient &#x3D; HttpClients.custom().setSSLSocketFactory(sslsf).build();</span><br><span class="line">        try &#123;</span><br><span class="line">            HttpGet httpget &#x3D; new HttpGet(url);</span><br><span class="line">            &#x2F;&#x2F;httpget.addHeader(&quot;host&quot;, &quot;integration-fred2.fredhuang.com&quot;);&#x2F;&#x2F; 设置一些heander等</span><br><span class="line">            CloseableHttpResponse response &#x3D; httpclient.execute(httpget);</span><br><span class="line">            try &#123;</span><br><span class="line">                HttpEntity entity &#x3D; response.getEntity();</span><br><span class="line">                String jsonStr &#x3D; EntityUtils.toString(response.getEntity(), &quot;UTF-8&quot;);&#x2F;&#x2F;返回结果</span><br><span class="line">                EntityUtils.consume(entity);</span><br><span class="line">                return jsonStr;</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            httpclient.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        System.out.println(System.getProperty(&quot;java.home&quot;));</span><br><span class="line">        System.out.println(sslRequestGet(&quot;https:&#x2F;&#x2F;integration-fred2.fredhuang.com&#x2F;test&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-存疑">6. 存疑</h2><p>网上很多文章都描述到 <code>Nginx</code> 配置中的客户端证书（<code>ssl_client_certificate</code>）可以配置根证书 root.crt，然后就可以适配所有这个根证书办法的客户端公钥证书了。我试了，使用 root.crt 作为 <code>ssl_client_certificate</code> 的值，然后使用 client.crt 来访问，发现不行，<code>Nginx</code> 会报这个错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;400 The SSL certificate error&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;400 Bad Request&lt;&#x2F;h1&gt;&lt;&#x2F;center&gt;</span><br><span class="line">&lt;center&gt;The SSL certificate error&lt;&#x2F;center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx&#x2F;1.17.5&lt;&#x2F;center&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>这个特性原作者一直没有配置成功 (我也没配置成功)，有可能是配置有问题，也有可能是网上文章不靠谱，写错了。</p><blockquote><p>本文转载自：「阿里云开发者社区」，原文：<a href="https://tinyurl.com/yaamh7vf%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/yaamh7vf，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote><h2 id="扩展阅读-本文核心">扩展阅读 (本文核心)</h2><p>在原文基础上，我在分享一个你在大多数网站和搜索引擎中都找不到的很实用的小技巧，说得这么神秘到底是什么呢？</p><p>那就是使用受信证书进行双向认证，网上大多数文章介绍的实现 <code>HTTPS</code> 双向认证的文章都是使用 <code>CA</code> 自签的方式进行。虽然这能实现目的，但方法不太优雅。</p><p>在 <code>SSL</code> 证书全面普及的当下，你其实很有必要申请一个受信证书来进行 <code>HTTPS</code> 双向认证。这样看上去不但更权威，而且实现上也更便捷一些。</p><h3 id="使用受信证书进行双向认证">使用受信证书进行双向认证</h3><p>要使用受信证书进行认证的前提条件：当然是你必须有一个权威 CA 机构给你签发的证书。</p><ul><li>如果你是土豪，随便购买一个就行了。</li><li>如果你囊中羞涩，也不要紧，可以去申请一个免费的 <code>SSL</code> 证书。目前 <code>Let's Encrypt</code>、<code>阿里云</code> 都可以申请，具体方法就不在这展开了，你可以直接在公众号上搜索相关文章。</li><li>为了便于管理和多场景使用，建议直接申请通配证书。</li></ul><p>证书准备完成后，接下来当然是直接使用它。因为是受信证书，上面所有的证书自签操作都不需要了，你只需直接配置 <code>Nginx</code> 就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">                listen       443 ssl;</span><br><span class="line">                access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;accesse.log  main;</span><br><span class="line">                server_name  ci.hi-linux.com;</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">                ssl_certificate      &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;hi-linux.com&#x2F;hi-linux.com.pem;</span><br><span class="line">                ssl_certificate_key  &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;hi-linux.com&#x2F;hi-linux.com.key;</span><br><span class="line">                ssl_client_certificate &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;hi-linux.com&#x2F;hi-linux.com.pem;</span><br><span class="line"></span><br><span class="line">                ssl_verify_depth 3;</span><br><span class="line">                ssl_session_timeout  5m;</span><br><span class="line">                ssl_verify_client on;</span><br><span class="line"></span><br><span class="line">                ssl_protocols  SSLv2 SSLv3 TLSv1;</span><br><span class="line">                ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</span><br><span class="line">                ssl_prefer_server_ciphers   on;</span><br><span class="line"></span><br><span class="line">                location &#x2F; &#123;</span><br><span class="line">                        proxy_pass   http:&#x2F;&#x2F;ci&#x2F;;</span><br><span class="line">                        proxy_set_header Host $host:$server_port;</span><br><span class="line">                        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">                        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>ssl_certificate</code> 指定的是证书，<code>ssl_certificate_key</code> 指定是证书对应的私钥，请自行将对应证书文件放到配置文件中指定的目录中。</p></blockquote><p>以上配置段和上面的自签证书大同小异，主要需注意的有 <code>ssl_client_certificate</code> 和 <code>ssl_verify_depth</code> 这两个参数。</p><ul><li><code>ssl_client_certificate</code> 主要用于指定客户端所使用的证书，这里可以直接使用受信证书机构签发的证书文件。</li><li><code>ssl_verify_depth</code>  这个参数是使用受信证书能成功进行客户端验证的关键，注意它的值是 <code>3</code>。</li></ul><p>因为当 <code>ssl_verify_depth</code> 设置为 <code>1</code>（ <code>Nginx</code> 的默认值）的时候，服务端只会接受直接被 <code>CA</code> 签发的客户端证书或自签名的证书。也就是说，直接尝试使用中级 <code>CA</code> 来验证客户端是无法通过的，<code>OpenSSL</code> 会自动的去找中级 <code>CA</code> 的签发者并一层层验证上去，直到找到根证书。</p><p>所以，就算将中级 <code>CA</code> 和根 <code>CA</code> 都放在信任证书列表中，由于最终 <code>ssl_verify_depth</code> 为 <code>2</code> 的缘故，验证还是通不过的。</p><p>因此，在实际使用的时候，需要注意以下两点：</p><ul><li>CA 文件中必须同时存在 中级 <code>CA</code> 和根 <code>CA</code>，必须构成完整证书链，不能少任何一个；</li><li>默认的验证深度 <code>ssl_verify_depth</code> 是 1，中级 <code>CA</code> 签发的客户端证书一律无法通过认证，需要增大该值，所以我们上面配置中 <code>ssl_verify_depth</code> 值为 <code>3</code> 。</li></ul><p>为了客户端方便导入，你同样还是需要将证书文件转换成 P12 格式。当然你还可以在转换的过程中给证书加个密码，以保证证书的安全。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl pkcs12 -export -clcerts -in hi-linux.com.pem -inkey hi-linux.com.key -out hi-linux.com-client.p12</span><br></pre></td></tr></table></figure><p>至此，<code>HTTPS</code> 双向证书的实现就讲完了，如果你还有什么更好的补充，欢迎大家积极留言交流哟！</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;研究 &lt;code&gt;HTTPS&lt;/code&gt; 的双向认证实现与原理，踩了不少坑，终于整个流程都跑通了，现在总结出一篇文档来，把一些心得，特别是容易踩坑的地方记录下来。&lt;/p&gt;
&lt;h2 id=&quot;1-原理&quot;&gt;1.原理&lt;/h2&gt;
&lt;p&gt;双向认证，顾名思义，客户端和服务器端都需要验证对方的身份，在建立 &lt;code&gt;HTTPS&lt;/code&gt; 连接的过程中，握手的流程比单向认证多了几步。单向认证的过程，客户端从服务器端下载服务器端公钥证书进行验证，然后建立安全通信通道。双向通信流程，客户端除了需要从服务器端下载服务器的公钥证书进行验证外，还需要把客户端的公钥证书上传到服务器端给服务器端进行验证，等双方都认证通过了，才开始建立安全通信通道进行数据传输。&lt;/p&gt;
&lt;h3 id=&quot;1-1-单向认证流程&quot;&gt;1.1 单向认证流程&lt;/h3&gt;
&lt;p&gt;单向认证流程中，服务器端保存着公钥证书和私钥两个文件，整个握手过程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/nginx-ssl-01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发起建立 HTTPS 连接请求，将 SSL 协议版本的信息发送给服务器端；&lt;/li&gt;
&lt;li&gt;服务器端将本机的公钥证书（server.crt）发送给客户端；&lt;/li&gt;
&lt;li&gt;客户端读取公钥证书 (server.crt)，取出了服务端公钥；&lt;/li&gt;
&lt;li&gt;客户端生成一个随机数（密钥 R），用刚才得到的服务器公钥去加密这个随机数形成密文，发送给服务端；&lt;/li&gt;
&lt;li&gt;服务端用自己的私钥 (server.key) 去解密这个密文，得到了密钥 R&lt;/li&gt;
&lt;li&gt;服务端和客户端在后续通讯过程中就使用这个密钥R进行通信了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;1-2-双向认证流程&quot;&gt;1.2 双向认证流程&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/nginx-ssl-02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发起建立 HTTPS 连接请求，将 SSL 协议版本的信息发送给服务端；&lt;/li&gt;
&lt;li&gt;服务器端将本机的公钥证书 (server.crt) 发送给客户端；&lt;/li&gt;
&lt;li&gt;客户端读取公钥证书 (server.crt)，取出了服务端公钥；&lt;/li&gt;
&lt;li&gt;客户端将客户端公钥证书 (client.crt) 发送给服务器端；&lt;/li&gt;
&lt;li&gt;服务器端解密客户端公钥证书，拿到客户端公钥；&lt;/li&gt;
&lt;li&gt;客户端发送自己支持的加密方案给服务器端；&lt;/li&gt;
&lt;li&gt;服务器端根据自己和客户端的能力，选择一个双方都能接受的加密方案，使用客户端的公钥加密后发送给客户端；&lt;/li&gt;
&lt;li&gt;客户端使用自己的私钥解密加密方案，生成一个随机数 R，使用服务器公钥加密后传给服务器端；&lt;/li&gt;
&lt;li&gt;服务端用自己的私钥去解密这个密文，得到了密钥 R&lt;/li&gt;
&lt;li&gt;服务端和客户端在后续通讯过程中就使用这个密钥R进行通信了。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="https://www.hi-linux.com/categories/nginx/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Nginx" scheme="https://www.hi-linux.com/tags/Nginx/"/>
    
      <category term="HTTPS" scheme="https://www.hi-linux.com/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>两个助你高效编写 Kubernetes YAML 文件的神技</title>
    <link href="https://www.hi-linux.com/posts/52035.html"/>
    <id>https://www.hi-linux.com/posts/52035.html</id>
    <published>2020-07-30T01:00:00.000Z</published>
    <updated>2020-07-30T04:49:05.917Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>我们在编写 <code>Kubernetes</code> 资源清单的时候可能会经常会忘记要创建的资源名称，即使知道了可能也不记得该资源对象有哪些属性可以使用了，特别是对于那些名称很长的资源或者属性，即使死记硬背下来隔一段时间又会忘记了。</p><p>比如现在我们要创建一个 <code>validating</code> 的 <code>admission webhook</code>，我们就需要定义一个 <code>ValidatingWebhookConfiguration</code> 的资源对象，但是可能我们不记得它的全名了。这个时候我们可以使用 <code>kubectl api-resources</code> 命令来找到我们需要的 <code>API</code> 资源。找到了正确的资源名称之后，就需要了解如何编写正确的 <code>YAML</code> 资源清单文件了，但是 <code>Kubernetes</code> 中资源对象实在是太多了，而且每一个资源对象中配置属性也是非常多的，我们不可能都能完全记住，这个时候我们也可以借助 <code>kubectl explain</code> 命令来找到完整的结构，这对于我们编写 <code>YAML</code> 资源清单文件非常有帮助。</p><h2 id="kubectl-api-resources-命令">kubectl api-resources 命令</h2><p><code>kubectl api-resources</code> 命令可以打印所有已经注册的 <code>API</code> 资源，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ Kubectl api-resources</span><br><span class="line">NAME                              SHORTNAMES                                   APIGROUP                       NAMESPACED   KIND</span><br><span class="line">bindings                                                                                                      true         Binding</span><br><span class="line">componentstatuses                 cs                                                                          false        ComponentStatus</span><br><span class="line">configmaps                        cm                                                                          true         ConfigMap</span><br><span class="line">endpoints                         ep                                                                          true         Endpoints</span><br><span class="line">events                            ev                                                                          true         Event</span><br><span class="line">limitranges                       limits                                                                      true         LimitRange</span><br><span class="line">namespaces                        ns                                                                          false        Namespace</span><br><span class="line">nodes                             no                                                                          false        Node</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>其中也会包含上面提到的 <code>ValidatingWebhookConfiguration</code> 资源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mutatingwebhookconfigurations                                                  admissionregistration.k8s.io   false        MutatingWebhookConfiguration</span><br><span class="line">validatingwebhookconfigurations                                                admissionregistration.k8s.io   false        ValidatingWebhookConfiguration</span><br><span class="line">customresourcedefinitions         crd,crds                                     apiextensions.k8s.io           false        CustomResourceDefinition</span><br><span class="line">apiservices                                                                    apiregistration.k8s.io         false        APIService</span><br></pre></td></tr></table></figure><p>由于 <code>Kubernetes</code> 中已经注册的资源对象非常多，所以如果我们知道我们要查找的资源名称包含一些关键词的话，可以用 <code>grep</code> 来过滤:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl api-resources |grep validating</span><br><span class="line">validatingwebhookconfigurations                                                admissionregistration.k8s.io   false        ValidatingWebhookConfiguration</span><br></pre></td></tr></table></figure><p>这样就可以更精确的搜索到需要使用的资源名称了，比如我们这里就是 <code>ValidatingWebhookConfiguration</code> ，现在知道了资源对象的名称，然后可以使用 <code>kubectl explain</code> 命令来查找资源对象的属性。</p><a id="more"></a><h2 id="kubectl-explain-命令">kubectl explain 命令</h2><p><code>kubectl explain</code> 命令可以将资源对象的详细属性都展示出来，比如我们现在不知道如何去编写 <code>ValidatingWebhookConfiguration</code> ，这个时候我们可以通过命令 <code>kubectl explain ValidatingWebhookConfiguration</code> 来获取详细的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl explain ValidatingWebhookConfiguration</span><br><span class="line">KIND:     ValidatingWebhookConfiguration</span><br><span class="line">VERSION:  admissionregistration.k8s.io&#x2F;v1</span><br><span class="line"></span><br><span class="line">DESCRIPTION:</span><br><span class="line">     ValidatingWebhookConfiguration describes the configuration of and admission</span><br><span class="line">     webhook that accept or reject and object without changing it.</span><br><span class="line"></span><br><span class="line">FIELDS:</span><br><span class="line">   apiVersion  &lt;string&gt;</span><br><span class="line">     APIVersion defines the versioned schema of this representation of an</span><br><span class="line">     object. Servers should convert recognized schemas to the latest internal</span><br><span class="line">     value, and may reject unrecognized values. More info:</span><br><span class="line">     https:&#x2F;&#x2F;git.k8s.io&#x2F;community&#x2F;contributors&#x2F;devel&#x2F;sig-architecture&#x2F;api-conventions.md#resources</span><br><span class="line"></span><br><span class="line">   kind  &lt;string&gt;</span><br><span class="line">     Kind is a string value representing the REST resource this object</span><br><span class="line">     represents. Servers may infer this from the endpoint the client submits</span><br><span class="line">     requests to. Cannot be updated. In CamelCase. More info:</span><br><span class="line">     https:&#x2F;&#x2F;git.k8s.io&#x2F;community&#x2F;contributors&#x2F;devel&#x2F;sig-architecture&#x2F;api-conventions.md#types-kinds</span><br><span class="line"></span><br><span class="line">   metadata  &lt;Object&gt;</span><br><span class="line">     Standard object metadata; More info:</span><br><span class="line">     https:&#x2F;&#x2F;git.k8s.io&#x2F;community&#x2F;contributors&#x2F;devel&#x2F;sig-architecture&#x2F;api-conventions.md#metadata.</span><br><span class="line"></span><br><span class="line">   webhooks  &lt;[]Object&gt;</span><br><span class="line">     Webhooks is a list of webhooks and the affected resources and operations.</span><br></pre></td></tr></table></figure><p>这个命令会输出顶层的属性，我们只需要明白 <code>&lt;string&gt;</code> 表示字符串，<code>&lt;Object&gt;</code> 表示对象, <code>[]</code> 表示数组即可，对象在 <code>YAML</code> 文件中就需要缩进，数组就需要通过添加一个破折号来表示一个 <code>Item</code>，对于对象和对象数组我们不知道里面有什么属性的，我们还可以继续在后面查看，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl explain ValidatingWebhookConfiguration.metadata</span><br><span class="line">KIND:     ValidatingWebhookConfiguration</span><br><span class="line">VERSION:  admissionregistration.k8s.io&#x2F;v1</span><br><span class="line"></span><br><span class="line">RESOURCE: metadata &lt;Object&gt;</span><br><span class="line"></span><br><span class="line">DESCRIPTION:</span><br><span class="line">     Standard object metadata; More info:</span><br><span class="line">     https:&#x2F;&#x2F;git.k8s.io&#x2F;community&#x2F;contributors&#x2F;devel&#x2F;sig-architecture&#x2F;api-conventions.md#metadata.</span><br><span class="line"></span><br><span class="line">     ObjectMeta is metadata that all persisted resources must have, which</span><br><span class="line">     includes all objects users must create.</span><br><span class="line"></span><br><span class="line">FIELDS:</span><br><span class="line">   annotations  &lt;map[string]string&gt;</span><br><span class="line">     Annotations is an unstructured key value map stored with a resource that</span><br><span class="line">     may be set by external tools to store and retrieve arbitrary metadata. They</span><br><span class="line">     are not queryable and should be preserved when modifying objects. More</span><br><span class="line">     info: http:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;user-guide&#x2F;annotations</span><br><span class="line"></span><br><span class="line">   ......</span><br></pre></td></tr></table></figure><p>上面输出的属性就是属于 <code>metadata</code> 这个 <code>key</code> 下面对应的对象了，有的时候如果觉得这样一层一层的去查看比较麻烦，我们还可以传入一个 <code>--recursive</code> 参数来获取所有的属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl explain validatingwebhookconfiguration --recursive</span><br><span class="line">KIND:     ValidatingWebhookConfiguration</span><br><span class="line">VERSION:  admissionregistration.k8s.io&#x2F;v1</span><br><span class="line"></span><br><span class="line">DESCRIPTION:</span><br><span class="line">     ValidatingWebhookConfiguration describes the configuration of and admission</span><br><span class="line">     webhook that accept or reject and object without changing it.</span><br><span class="line"></span><br><span class="line">FIELDS:</span><br><span class="line">   apiVersion  &lt;string&gt;</span><br><span class="line">   kind  &lt;string&gt;</span><br><span class="line">   metadata  &lt;Object&gt;</span><br><span class="line">      annotations  &lt;map[string]string&gt;</span><br><span class="line">      clusterName  &lt;string&gt;</span><br><span class="line">      creationTimestamp  &lt;string&gt;</span><br><span class="line">      deletionGracePeriodSeconds  &lt;integer&gt;</span><br><span class="line">      deletionTimestamp  &lt;string&gt;</span><br><span class="line">      finalizers  &lt;[]string&gt;</span><br><span class="line">      generateName  &lt;string&gt;</span><br><span class="line">      generation  &lt;integer&gt;</span><br><span class="line">      labels  &lt;map[string]string&gt;</span><br><span class="line">      managedFields  &lt;[]Object&gt;</span><br><span class="line">         apiVersion  &lt;string&gt;</span><br><span class="line">         fieldsType  &lt;string&gt;</span><br><span class="line">         fieldsV1  &lt;map[string]&gt;</span><br><span class="line">         manager  &lt;string&gt;</span><br><span class="line">         operation  &lt;string&gt;</span><br><span class="line">         time  &lt;string&gt;</span><br><span class="line">      name  &lt;string&gt;</span><br><span class="line">      namespace  &lt;string&gt;</span><br><span class="line">      ownerReferences  &lt;[]Object&gt;</span><br><span class="line">         apiVersion  &lt;string&gt;</span><br><span class="line">         blockOwnerDeletion  &lt;boolean&gt;</span><br><span class="line">         controller  &lt;boolean&gt;</span><br><span class="line">         kind  &lt;string&gt;</span><br><span class="line">         name  &lt;string&gt;</span><br><span class="line">         uid  &lt;string&gt;</span><br><span class="line">      resourceVersion  &lt;string&gt;</span><br><span class="line">      selfLink  &lt;string&gt;</span><br><span class="line">      uid  &lt;string&gt;</span><br><span class="line">   webhooks  &lt;[]Object&gt;</span><br><span class="line">      admissionReviewVersions  &lt;[]string&gt;</span><br><span class="line">      clientConfig  &lt;Object&gt;</span><br><span class="line">         caBundle  &lt;string&gt;</span><br><span class="line">         service  &lt;Object&gt;</span><br><span class="line">            name  &lt;string&gt;</span><br><span class="line">            namespace  &lt;string&gt;</span><br><span class="line">            path  &lt;string&gt;</span><br><span class="line">            port  &lt;integer&gt;</span><br><span class="line">         url  &lt;string&gt;</span><br><span class="line">      failurePolicy  &lt;string&gt;</span><br><span class="line">      matchPolicy  &lt;string&gt;</span><br><span class="line">      name  &lt;string&gt;</span><br><span class="line">      namespaceSelector  &lt;Object&gt;</span><br><span class="line">         matchExpressions  &lt;[]Object&gt;</span><br><span class="line">            key  &lt;string&gt;</span><br><span class="line">            operator  &lt;string&gt;</span><br><span class="line">            values  &lt;[]string&gt;</span><br><span class="line">         matchLabels  &lt;map[string]string&gt;</span><br><span class="line">      objectSelector  &lt;Object&gt;</span><br><span class="line">         matchExpressions  &lt;[]Object&gt;</span><br><span class="line">            key  &lt;string&gt;</span><br><span class="line">            operator  &lt;string&gt;</span><br><span class="line">            values  &lt;[]string&gt;</span><br><span class="line">         matchLabels  &lt;map[string]string&gt;</span><br><span class="line">      rules  &lt;[]Object&gt;</span><br><span class="line">         apiGroups  &lt;[]string&gt;</span><br><span class="line">         apiVersions  &lt;[]string&gt;</span><br><span class="line">         operations  &lt;[]string&gt;</span><br><span class="line">         resources  &lt;[]string&gt;</span><br><span class="line">         scope  &lt;string&gt;</span><br><span class="line">      sideEffects  &lt;string&gt;</span><br><span class="line">      timeoutSeconds  &lt;integer&gt;</span><br></pre></td></tr></table></figure><p>这个命令就可以将资源对象的完整属性列出来，而且缩进格式和 <code>YAML</code> 文件基本上是一致的，这样对于我们去编写资源清单文件就更加友好了。</p><p>自从使用 <code>kubectl api-resources</code> 和 <code>kubectl explain</code> 这两个命令后，为我们编写资源清单文件节省了很多时间，工作效率大大提高了！</p><p>这么好的神技，你还不赶紧用起来吗？ 如果你还有更好的方法，欢迎大家积极留言讨论哟！</p><blockquote><p>本文转载自：「k8s技术圈」，原文：<a href="https://tinyurl.com/y4vvln2x%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/y4vvln2x，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在编写 &lt;code&gt;Kubernetes&lt;/code&gt; 资源清单的时候可能会经常会忘记要创建的资源名称，即使知道了可能也不记得该资源对象有哪些属性可以使用了，特别是对于那些名称很长的资源或者属性，即使死记硬背下来隔一段时间又会忘记了。&lt;/p&gt;
&lt;p&gt;比如现在我们要创建一个 &lt;code&gt;validating&lt;/code&gt; 的 &lt;code&gt;admission webhook&lt;/code&gt;，我们就需要定义一个 &lt;code&gt;ValidatingWebhookConfiguration&lt;/code&gt; 的资源对象，但是可能我们不记得它的全名了。这个时候我们可以使用 &lt;code&gt;kubectl api-resources&lt;/code&gt; 命令来找到我们需要的 &lt;code&gt;API&lt;/code&gt; 资源。找到了正确的资源名称之后，就需要了解如何编写正确的 &lt;code&gt;YAML&lt;/code&gt; 资源清单文件了，但是 &lt;code&gt;Kubernetes&lt;/code&gt; 中资源对象实在是太多了，而且每一个资源对象中配置属性也是非常多的，我们不可能都能完全记住，这个时候我们也可以借助 &lt;code&gt;kubectl explain&lt;/code&gt; 命令来找到完整的结构，这对于我们编写 &lt;code&gt;YAML&lt;/code&gt; 资源清单文件非常有帮助。&lt;/p&gt;
&lt;h2 id=&quot;kubectl-api-resources-命令&quot;&gt;kubectl api-resources 命令&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;kubectl api-resources&lt;/code&gt; 命令可以打印所有已经注册的 &lt;code&gt;API&lt;/code&gt; 资源，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ Kubectl api-resources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                              SHORTNAMES                                   APIGROUP                       NAMESPACED   KIND&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bindings                                                                                                      true         Binding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;componentstatuses                 cs                                                                          false        ComponentStatus&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;configmaps                        cm                                                                          true         ConfigMap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endpoints                         ep                                                                          true         Endpoints&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;events                            ev                                                                          true         Event&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;limitranges                       limits                                                                      true         LimitRange&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;namespaces                        ns                                                                          false        Namespace&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nodes                             no                                                                          false        Node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中也会包含上面提到的 &lt;code&gt;ValidatingWebhookConfiguration&lt;/code&gt; 资源：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mutatingwebhookconfigurations                                                  admissionregistration.k8s.io   false        MutatingWebhookConfiguration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;validatingwebhookconfigurations                                                admissionregistration.k8s.io   false        ValidatingWebhookConfiguration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;customresourcedefinitions         crd,crds                                     apiextensions.k8s.io           false        CustomResourceDefinition&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apiservices                                                                    apiregistration.k8s.io         false        APIService&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于 &lt;code&gt;Kubernetes&lt;/code&gt; 中已经注册的资源对象非常多，所以如果我们知道我们要查找的资源名称包含一些关键词的话，可以用 &lt;code&gt;grep&lt;/code&gt; 来过滤:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl api-resources |grep validating&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;validatingwebhookconfigurations                                                admissionregistration.k8s.io   false        ValidatingWebhookConfiguration&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样就可以更精确的搜索到需要使用的资源名称了，比如我们这里就是 &lt;code&gt;ValidatingWebhookConfiguration&lt;/code&gt; ，现在知道了资源对象的名称，然后可以使用 &lt;code&gt;kubectl explain&lt;/code&gt; 命令来查找资源对象的属性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/categories/kubernetes/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
      <category term="YAML" scheme="https://www.hi-linux.com/tags/YAML/"/>
    
  </entry>
  
  <entry>
    <title>再见 ELK，是时候拥抱下一代日志系统 Loki 了</title>
    <link href="https://www.hi-linux.com/posts/61047.html"/>
    <id>https://www.hi-linux.com/posts/61047.html</id>
    <published>2020-07-27T01:00:00.000Z</published>
    <updated>2020-07-27T04:18:14.060Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>最近，在对公司容器云的日志方案进行设计的时候，发现主流的 ELK 或者 EFK 比较重，再加上现阶段对于 ES 复杂的搜索功能很多都用不上，最终选择了 Grafana 开源的 Loki 日志系统。下面我们来介绍下 Loki 的一些基本概念和架构。</p><blockquote><p>Loki 是 Grafana Labs 团队最新的开源项目，是一个水平可扩展，高可用性，多租户的日志聚合系统。它的设计非常经济高效且易于操作，因为它不会为日志内容编制索引，而是为每个日志流编制一组标签，专门为 Prometheus 和 Kubernetes 用户做了相关优化。该项目受 Prometheus 启发，官方的介绍就是： <code>Like Prometheus,But For Logs.</code>，类似于 Prometheus 的日志系统。</p><p>项目地址：<a href="https://github.com/grafana/loki/" target="_blank" rel="noopener">https://github.com/grafana/loki/</a></p></blockquote><p>与其他日志聚合系统相比， Loki 具有下面的一些特性：</p><ul><li><p>不对日志进行全文索引。通过存储压缩非结构化日志和仅索引元数据，Loki 操作起来会更简单，更省成本。</p></li><li><p>通过使用与 Prometheus 相同的标签记录流对日志进行索引和分组，这使得日志的扩展和操作效率更高。</p></li><li><p>特别适合储存 Kubernetes Pod 日志; 诸如 Pod 标签之类的元数据会被自动删除和编入索引。</p></li><li><p>受 Grafana 原生支持。</p></li></ul><h2 id="背景和动机">背景和动机</h2><p>当我们的容器云运行的应用或者某个节点出现问题了，解决思路应该如下：</p><p><img src="https://www.hi-linux.com/img/linux/loki1.jpeg" alt=""></p><p>我们的监控使用的是基于 Prometheus 体系进行改造的，Prometheus 中比较重要的是 Metric 和 Alert，Metric 是来说明当前或者历史达到了某个值，Alert 设置 Metric 达到某个特定的基数触发了告警，但是这些信息明显是不够的。</p><p>我们都知道，Kubernetes 的基本单位是 Pod，Pod 把日志输出到 Stdout 和 Stderr，平时有什么问题我们通常在界面或者通过命令查看相关的日志。</p><p>举个例子：当我们的某个 Pod 的内存变得很大，触发了我们的 Alert。这时管理员，去页面查询确认是哪个 Pod 有问题，然后要确认 Pod 内存变大的原因，我们还需要去查询 Pod 的日志，如果没有日志系统，那么我们就需要到页面或者使用命令进行查询：</p><p><img src="https://www.hi-linux.com/img/linux/loki2.jpeg" alt=""></p><p>如果，这个时候应用突然挂了，这个时候我们就无法查到相关的日志了。所以需要引入日志系统，统一收集日志。而使用 ELK 的话，就需要在 Kibana 和 Grafana 之间切换，影响用户体验。所以 ，Loki 的第一目的就是最小化度量和日志的切换成本，有助于减少异常事件的响应时间和提高用户的体验。</p><a id="more"></a><h2 id="elk-存在的问题">ELK 存在的问题</h2><p>现有的很多日志采集的方案都是采用全文检索对日志进行索引（如 ELK 方案），优点是功能丰富，允许复杂的操作。但是，这些方案往往规模复杂，资源占用高，操作苦难。很多功能往往用不上，大多数查询只关注一定时间范围和一些简单的参数（如：host、service 等），使用这些解决方案就有点杀鸡用牛刀的感觉了。</p><p><img src="https://www.hi-linux.com/img/linux/loki3.jpeg" alt=""></p><p>因此，Loki 的第二个目的是，在查询语言的易操作性和复杂性之间可以达到一个权衡。</p><h2 id="成本考量">成本考量</h2><p>全文检索的方案也带来成本问题，简单的说就是全文搜索（如：ES）的倒排索引的切分和共享的成本较高。后来出现了其他不同的设计方案，如：</p><ul><li>OKlog</li></ul><p>项目地址：<a href="https://github.com/oklog/oklog" target="_blank" rel="noopener">https://github.com/oklog/oklog</a></p><p>采用最终一致的、基于网格的分布策略。这两个设计决策提供了大量的成本降低和非常简单的操作，但是查询不够方便。因此，Loki 的第三个目的是，提供一个更具成本效益的解决方案。</p><h2 id="整体架构">整体架构</h2><p>Loki 的架构如下：</p><p><img src="https://www.hi-linux.com/img/linux/loki4.jpeg" alt=""></p><p>不难看出，Loki 的架构非常简单，主要由以下 3 个部分组成：</p><ul><li><p>Loki 是主服务器，负责存储日志和处理查询。</p></li><li><p>Promtail是代理，负责收集日志并将其发送给 Loki 。</p></li><li><p>Grafana 用于 UI 展示。</p></li></ul><p>Loki 使用了和 Prometheus 一样的标签来作为索引。也就是说，你通过这些标签既可以查询日志的内容也可以查询到监控的数据，不但减少了两种查询之间的切换成本，也极大地降低了日志索引的存储。</p><p>Loki 使用与 Prometheus 相同的服务发现和标签重新标记库，编写了 Pormtail。在 Kubernetes 中 Promtail 以 DaemonSet 方式运行在每个节点中，通过 Kubernetes API 得到日志的正确元数据，并将它们发送到 Loki。下面是日志的存储架构：</p><p><img src="https://www.hi-linux.com/img/linux/loki5.jpeg" alt=""></p><h3 id="读写">读写</h3><p>日志数据的写主要依托的是 Distributor 和 Ingester 两个组件，整体的流程如下：</p><p><img src="https://www.hi-linux.com/img/linux/loki6.jpeg" alt=""></p><h3 id="distributor">Distributor</h3><p>一旦 Promtail 收集日志并将其发送给 Loki，Distributor 就是第一个接收日志的组件。由于日志的写入量可能很大，所以不能在它们传入时将它们写入数据库。这会毁掉数据库。我们需要批处理和压缩数据。</p><p>Loki 通过构建压缩数据块来实现这一点，方法是在日志进入时对其进行 Gzip 操作。组件 Ingester 是一个有状态的组件，负责构建和刷新 Chunck，当 Chunk 达到一定的数量或者时间后，刷新到存储中去。每个流的日志对应一个 Ingester，当日志到达 Distributor 后，根据元数据和 Hash 算法计算出应该到哪个 Ingester 上面。</p><p><img src="https://www.hi-linux.com/img/linux/loki7.jpeg" alt=""></p><p>此外，为了冗余和弹性，我们将其复制 n（默认情况下为 3）次。</p><h3 id="ingester">Ingester</h3><p>Ingester 接收到日志并开始构建 Chunk：</p><p><img src="https://www.hi-linux.com/img/linux/loki8.jpeg" alt=""></p><p>基本上就是将日志进行压缩并附加到 Chunk 上面。一旦 Chunk 填满（数据达到一定数量或者过了一定期限），Ingester 将其刷新到数据库。我们对块和索引使用单独的数据库，因为它们存储的数据类型不同。</p><p><img src="https://www.hi-linux.com/img/linux/loki9.jpeg" alt=""></p><p>刷新一个 Chunk 之后，Ingester 然后创建一个新的空 Chunk 并将新条目添加到该 Chunk 中。</p><h3 id="querier">Querier</h3><p>读取就非常简单了，由 Querier 负责给定一个时间范围和标签选择器，Querier 查看索引以确定哪些块匹配，并通过 Greps 将结果显示出来。它还从 Ingester 获取尚未刷新的最新数据。</p><p>对于每个查询，一个查询器将为您显示所有相关日志。实现了查询并行化，提供分布式 Grep，使即使是大型查询也是足够的。</p><p><img src="https://www.hi-linux.com/img/linux/loki10.jpeg" alt=""></p><h3 id="可扩展性">可扩展性</h3><p>Loki 的索引存储可以是 Cassandra/Bigtable/Dynamodb，而 Chuncks 可以是各种对象存储，Querier 和 Distributor 都是无状态的组件。</p><p>对于 Ingester，它虽然是有状态的。但是，当新的节点加入或者减少，整节点间的 Chunk 会重新分配，已适应新的散列环。而 Loki 底层存储的实现 Cortex 已经在实际的生产中投入使用多年了。</p><h2 id="参考链接">参考链接</h2><ol><li><p><a href="https://blog.csdn.net/Linkthaha/article/details/100575278" target="_blank" rel="noopener">https://blog.csdn.net/Linkthaha/article/details/100575278</a></p></li><li><p><a href="http://blog.csdn.net/Linkthaha/article/details/100575651" target="_blank" rel="noopener">http://blog.csdn.net/Linkthaha/article/details/100575651</a></p></li><li><p><a href="https://www.qikqiak.com/post/grafana-log-tool-loki/" target="_blank" rel="noopener">https://www.qikqiak.com/post/grafana-log-tool-loki/</a></p></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，在对公司容器云的日志方案进行设计的时候，发现主流的 ELK 或者 EFK 比较重，再加上现阶段对于 ES 复杂的搜索功能很多都用不上，最终选择了 Grafana 开源的 Loki 日志系统。下面我们来介绍下 Loki 的一些基本概念和架构。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Loki 是 Grafana Labs 团队最新的开源项目，是一个水平可扩展，高可用性，多租户的日志聚合系统。它的设计非常经济高效且易于操作，因为它不会为日志内容编制索引，而是为每个日志流编制一组标签，专门为 Prometheus 和 Kubernetes 用户做了相关优化。该项目受 Prometheus 启发，官方的介绍就是： &lt;code&gt;Like Prometheus,But For Logs.&lt;/code&gt;，类似于 Prometheus 的日志系统。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/grafana/loki/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/grafana/loki/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;与其他日志聚合系统相比， Loki 具有下面的一些特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不对日志进行全文索引。通过存储压缩非结构化日志和仅索引元数据，Loki 操作起来会更简单，更省成本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过使用与 Prometheus 相同的标签记录流对日志进行索引和分组，这使得日志的扩展和操作效率更高。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特别适合储存 Kubernetes Pod 日志; 诸如 Pod 标签之类的元数据会被自动删除和编入索引。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;受 Grafana 原生支持。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;背景和动机&quot;&gt;背景和动机&lt;/h2&gt;
&lt;p&gt;当我们的容器云运行的应用或者某个节点出现问题了，解决思路应该如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/loki1.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们的监控使用的是基于 Prometheus 体系进行改造的，Prometheus 中比较重要的是 Metric 和 Alert，Metric 是来说明当前或者历史达到了某个值，Alert 设置 Metric 达到某个特定的基数触发了告警，但是这些信息明显是不够的。&lt;/p&gt;
&lt;p&gt;我们都知道，Kubernetes 的基本单位是 Pod，Pod 把日志输出到 Stdout 和 Stderr，平时有什么问题我们通常在界面或者通过命令查看相关的日志。&lt;/p&gt;
&lt;p&gt;举个例子：当我们的某个 Pod 的内存变得很大，触发了我们的 Alert。这时管理员，去页面查询确认是哪个 Pod 有问题，然后要确认 Pod 内存变大的原因，我们还需要去查询 Pod 的日志，如果没有日志系统，那么我们就需要到页面或者使用命令进行查询：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/loki2.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果，这个时候应用突然挂了，这个时候我们就无法查到相关的日志了。所以需要引入日志系统，统一收集日志。而使用 ELK 的话，就需要在 Kibana 和 Grafana 之间切换，影响用户体验。所以 ，Loki 的第一目的就是最小化度量和日志的切换成本，有助于减少异常事件的响应时间和提高用户的体验。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Loki" scheme="https://www.hi-linux.com/categories/Loki/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
      <category term="Loki" scheme="https://www.hi-linux.com/tags/Loki/"/>
    
  </entry>
  
  <entry>
    <title>推荐几款快速管理 Kubernetes 多集群环境的神器</title>
    <link href="https://www.hi-linux.com/posts/25886.html"/>
    <id>https://www.hi-linux.com/posts/25886.html</id>
    <published>2020-07-20T01:00:00.000Z</published>
    <updated>2020-07-20T01:24:53.671Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><code>Kubernetes</code> 生态在很多企业广泛应用的当下，相信很多运维和开发人员都会同时管理和维护多个 <code>Kubernetes</code> 集群，比如：开发环境、测试环境、预发布环境、生产环境等等。</p><p>为了方便管理多个环境的集群，通常都是在本地环境通过 <code>Kubernetes</code> 的客户端工具 <code>kubectl</code> 来管理多个 <code>Kubernetes</code> 集群的。这时你就需要用到各个集群的 <code>kubeconfig</code> 文件，你是不是首先想到的就是手动将多个 <code>kubeconfig</code> 配置文件合并为一个，然后通过 <code>kubectx</code> 或 <code>kubie</code> 这样的工具来快速切换上下文环境（context）来达到多集群环境的管理呢？虽然手动合并 <code>kubeconfig</code> 配置文件的方法是可行的，但是集群环境较多时或者集群环境经常变更时，这样的方法就显得很麻烦了。</p><p>今天，我们就给大家介绍几种更方便更快捷的 <code>Kubernetes</code> 多集群管理方法。首先我们来看看官方提供的实现方式：</p><h3 id="官方提供的解决方法">官方提供的解决方法</h3><p>官方目前提供了配置环境变量和通过命令行参数显示指定两种方法来解决这个问题。</p><ol><li>配置环境变量指定多个集群的 kubeconfig 文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 配置 Kubernetes 多集群，注意使用 : 隔开</span><br><span class="line">export KUBECONFIG&#x3D;$KUBECONFIG:$HOME&#x2F;.kube&#x2F;config:$HOME&#x2F;.kube&#x2F;mike-local-kubernetes.yaml:$HOME&#x2F;.kube&#x2F;dev-kubernetes.yaml:$HOME&#x2F;.kube&#x2F;test-kubernetes.yaml:$HOME&#x2F;.kube&#x2F;prod-kubernetes.yaml:$HOME&#x2F;.kube&#x2F;okteto-kube.yaml</span><br></pre></td></tr></table></figure><ol start="2"><li>通过命令行参数显示指定不同集群的 kubeconfig 文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 切换到本地集群</span><br><span class="line">kubectl get pod --kubeconfig&#x3D;$HOME&#x2F;.kube&#x2F;mike-local-kubernetes.yaml</span><br><span class="line"></span><br><span class="line"># 切换到开发集群</span><br><span class="line">kubectl get pod --kubeconfig&#x3D;$HOME&#x2F;.kube&#x2F;dev-kubernetes.yaml</span><br><span class="line"></span><br><span class="line"># 切换到测试集群</span><br><span class="line">kubectl get pod --kubeconfig&#x3D;$HOME&#x2F;.kube&#x2F;test-kubernetes.yaml</span><br><span class="line"></span><br><span class="line"># 切换到生产集群</span><br><span class="line">kubectl get pod --kubeconfig&#x3D;$HOME&#x2F;.kube&#x2F;prod-kubernetes.yaml</span><br></pre></td></tr></table></figure><p>虽然官方提供的方法，能实现多集群管理。但是不断来回切换 <code>kubeconfig</code> 配置文件或者经常手动编辑环境变量来增减多个集群的配置文件，显然还是比较麻烦的。</p><a id="more"></a><p>接下来，给大家介绍的就是本文的重点，这是一种更优雅的解决方法。</p><h3 id="通过自动合并工具实现多集群-kubeconfig-配置文件管理">通过自动合并工具实现多集群 Kubeconfig 配置文件管理</h3><p>既然手动合并太过麻烦和复杂，有没有自动合并工具呢？你别说，还真有且不此一款。下面我们来介绍下如何使用这几款好用的自动合并工具。</p><h3 id="kubecm">KubeCM</h3><p><code>KubeCM</code> 是一款使用 <code>Go</code> 语言开发的 <code>KubeConfig</code> 管理工具，功能非常的强大。它不但能实现多个 <code>KubeConfig</code> 文件的自动合并，还能很方便的管理多个 <code>Kubernetes</code> 集群环境，比如：增加、删除、重命名不同集群环境等。</p><ol><li>安装 KubeCM</li></ol><p><code>KubeCM</code> 的安装非常的简单，你只需直接下载相应平台的二进制文件解压后就可使用了，完全就是开箱即用。</p><ul><li>通过二进制文件安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 根据你的实际情况，下载对应平台二进制文件即可。</span><br><span class="line"></span><br><span class="line"># Linux</span><br><span class="line">$ curl -Lo kubecm.tar.gz https:&#x2F;&#x2F;github.com&#x2F;sunny0826&#x2F;kubecm&#x2F;releases&#x2F;download&#x2F;v0.8.0&#x2F;kubecm_0.8.0_Linux_x86_64.tar.gz</span><br><span class="line"># macOS</span><br><span class="line">$ curl -Lo kubecm.tar.gz https:&#x2F;&#x2F;github.com&#x2F;sunny0826&#x2F;kubecm&#x2F;releases&#x2F;download&#x2F;v0.8.0&#x2F;kubecm_0.8.0_Darwin_x86_64.tar.gz</span><br><span class="line"># Windows</span><br><span class="line">$ curl -Lo kubecm.tar.gz https:&#x2F;&#x2F;github.com&#x2F;sunny0826&#x2F;kubecm&#x2F;releases&#x2F;download&#x2F;v0.8.0&#x2F;kubecm_0.8.0_Windows_x86_64.tar.gz</span><br></pre></td></tr></table></figure><p>下载完成后，解压对应安装包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Linux &amp; macOS</span><br><span class="line">$ tar -zxvf kubecm.tar.gz kubecm</span><br><span class="line">$ sudo mv kubecm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br><span class="line"></span><br><span class="line"># Windows</span><br><span class="line"># 你可以使用做任意一款压缩软件进行解压并放到 $PATH 中</span><br><span class="line">$ unzip kubecm.tar.gz</span><br></pre></td></tr></table></figure><ul><li>通过包管理器进行安装</li></ul><p>如果你使用的是 <code>macOS</code>，还可以使用 <code>Homebrew</code> 来进行一键安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install sunny0826&#x2F;tap&#x2F;kubecm</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 KubeCM</li></ol><p>为了方便演示，我们先创建一个 <code>mike-kubeconfig</code> 目录并将多个集群配置文件复制到这里。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir mike-kubeconfig</span><br><span class="line">$ cp *.yaml mike-kubeconfig&#x2F;</span><br><span class="line">$ ls mike-kubeconfig</span><br><span class="line">dev-kubernetes.yaml   mike-local-kubernetes.yaml okteto-kube.yaml</span><br></pre></td></tr></table></figure><blockquote><p>注：你可能发现了，我这里的 Kubeconfig 配置文件都是以 .yaml 结尾的，这是为了方便 Kubie 这个工具进行多集群切换。你只需按自己环境的规则管理 Kubeconfig 文件即可。</p></blockquote><ul><li>使用 KubeCM 完成自动合并</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 将指定目录中的所有 kubeconfig 配置文件合并为一个</span><br><span class="line">$ kubecm merge -f mike-kubeconfig</span><br><span class="line">Loading kubeconfig file: [mike-kubeconfig&#x2F;dev-kubernetes.yaml mike-kubeconfig&#x2F;mike-local-kubernetes.yaml mike-kubeconfig&#x2F;okteto-kube.yaml]</span><br><span class="line">Context Add: dev-kubernetes</span><br><span class="line">Context Add: mike-local-kubernetes</span><br><span class="line">Context Add: okteto-kube</span><br><span class="line"></span><br><span class="line"># 将指定目录中的所有 kubeconfig 配置文件合并为一个并且覆盖默认的 Kubeconfig 配置文件</span><br><span class="line">$ kubecm merge -f mike-kubeconfig -c</span><br></pre></td></tr></table></figure><blockquote><p>注意：是否使用 -c 参数的区别是：-c 参数生成的合并后文件名为 .kube/config，而不使用 -c 参数生成的合并后的文件名为 .kube/config.yaml。</p></blockquote><ul><li>使用 KubeCM 快速增加一个集群配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用 KubeCM 快速增加一个集群配置文件</span><br><span class="line">$ kubecm add -f mike-local-kubernetes.yaml</span><br><span class="line"></span><br><span class="line"># 使用 KubeCM 快速增加一个集群配置文件并指定默认命名空间</span><br><span class="line">$ kubecm add -f mike-local-kubernetes.yaml -n test</span><br></pre></td></tr></table></figure><ul><li>使用 KubeCM 快速删除一个集群配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 通过命令行模式删除一个集群配置</span><br><span class="line">$ kubecm delete mike-local-kubernetes</span><br></pre></td></tr></table></figure><ul><li>使用 KubeCM 快速重命名一个集群配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 将 dev 重命名为 test</span><br><span class="line">$ kubecm rename -o dev -n test</span><br><span class="line"># 将当前上下文重命名为 dev</span><br><span class="line">$ kubecm rename -n dev -c</span><br></pre></td></tr></table></figure><p>以上就是 <code>KubeCM</code> 的一些命令行下的常规操作，为了更高效的使用命令行。<code>KubeCM</code> 还提供了 <code>SHELL</code> 自动补全功能，只需按下面的方法简单设置一下即可。</p><ul><li>Bash</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubecm completion bash &gt; ~&#x2F;.kube&#x2F;kubecm.bash.inc</span><br><span class="line">$ printf &quot;</span><br><span class="line"># kubecm shell completion</span><br><span class="line">source &#39;$HOME&#x2F;.kube&#x2F;kubecm.bash.inc&#39;</span><br><span class="line">&quot; &gt;&gt; $HOME&#x2F;.bash_profile</span><br><span class="line">$ source $HOME&#x2F;.bash_profile</span><br></pre></td></tr></table></figure><ul><li>ZSH</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># add to $HOME&#x2F;.zshrc </span><br><span class="line">source &lt;(kubecm completion zsh)</span><br><span class="line"># or</span><br><span class="line">$ kubecm completion zsh &gt; &quot;$&#123;fpath[1]&#125;&#x2F;_kubecm&quot;</span><br></pre></td></tr></table></figure><p>到这里，你肯定以为就该结束了吧！不，你错了，<code>KubeCM</code> 不仅提供了命令行模式，它还提供更加人性化的交互模式。话不多说，直接看图：</p><p><img src="https://www.hi-linux.com/img/linux/Kubecm-Interaction.gif" alt=""></p><p>这样操作是不是更加方便了呢？除此之外，<code>KubeCM</code> 还提供了快速切换集群和命名空间的功能哟，这样一来，你完全可以省去安装文章开头提到的 <code>kubectx</code> 或 <code>kubie</code> 这类集群切换工具了呢。</p><ul><li>使用 KubeCM 快速切换到不同集群环境</li></ul><p><img src="https://www.hi-linux.com/img/linux/Kubecm-switch.gif" alt=""></p><ul><li>使用 KubeCM 快速切换到集群中的不同命名空间</li></ul><p><img src="https://www.hi-linux.com/img/linux/Kubecm-ns.gif" alt=""></p><h3 id="kubectx-contexts-manager">Kubectx Contexts Manager</h3><p><code>Kubectx.Manager</code> 和  <code>KubeCM</code> 功能类似，也是一个可以将多个 <code>kubeconfig</code> 配置文件自动合并成一个管理工具。</p><p><code>Kubectx.Manager</code> 使用 <code>Nodejs</code> 开发。在安装前，你必须先有一个 <code>Nodejs</code> 环境。<code>Nodejs</code> 的安装也挺简单的，这里就不展开讲了，可自行 <code>Google</code>。</p><p><code>Nodejs</code> 环境安装完成后，你只需运行下面的命令即可完成安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g git+https:&#x2F;&#x2F;git@github.com&#x2F;AveryanovS&#x2F;kubectx.manager</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;kubemanager -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;kubectx.manager&#x2F;cli.js</span><br><span class="line">+ kubectx.manager@1.0.0</span><br><span class="line">added 4 packages from 6 contributors in 11.208s</span><br></pre></td></tr></table></figure><p>安装完成后，我们就来演示如何合并多个 <code>kubeconfig</code> 配置文件。<code>Kubectx.Manager</code> 同样也是支持交互式操作的，你只需执行命令，然后根据一系列交互动作的提示进行操作便可轻松完成操作。</p><ol><li>使用 Kubectx.Manager 自动合并</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubemanager</span><br><span class="line">✔ Select action · merge</span><br><span class="line">✔ Path to current kube config? · &#x2F;Users&#x2F;Mike&#x2F;.kube&#x2F;config</span><br><span class="line">✔ Path to config to merge? · &#x2F;Users&#x2F;Mike&#x2F;.kube&#x2F;mike-local-kubernetes.yaml</span><br><span class="line">✔ Name of new context? · mike-local</span><br><span class="line">Context test created!</span><br><span class="line">Config file updated!</span><br></pre></td></tr></table></figure><p>下面我们来简单说说以上几步操作的作用。</p><ul><li>第一行选择 merge，表示合并。</li><li>第二行选择需要合并到哪个 Kubeconfig，也就是你最终要用的 Kubeconfig。</li><li>第三行选择需要合并的 Kubeconfig。</li><li>第四行定义合并后新加入的 Context 名称。</li></ul><ol start="2"><li>使用 Kubectx.Manager 删除指定的集群环境</li></ol><p>删除操作和合并操作类似，相信聪明的你一看就明白了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubemanager</span><br><span class="line">✔ Select action · delete</span><br><span class="line">✔ Path to current kube config? · &#x2F;Users&#x2F;Mike&#x2F;.kube&#x2F;config</span><br><span class="line">✔ Select context to delete · mike-local</span><br><span class="line">Context mike-local deleted!</span><br><span class="line">Config file updated!</span><br></pre></td></tr></table></figure><p><code>Kubectx.Manager</code> 目前仅支持以上的两种对 <code>Kubeconfig</code> 文件的管理操作，相对于 <code>KubeCM</code> 来说功能还是相对于弱一些。它并不支持多集群和多命名空间的快速切换。如果要实现多集群和多命名空间的快速切换，你还需要结合 <code>kubectx</code> 或 <code>kubie</code> 这类快速集群切换工具一并使用哟!</p><h3 id="mergekubeconfig">mergeKubeConfig</h3><p><code>mergeKubeConfig</code> 是由 <code>Python</code> 开发的类似的工具，它和 <code>KubeCM</code> 来自同一开发者。目前已停止维护，都有 <code>Go</code> 版本了，还要什么自行车呢？</p><p>这里顺手提一下纯粹是记录下它曾经存在过，哈哈！</p><p>好了，本文到此就结束了。这些神奇的小工具是不是很好的解决了你在 <code>Kubernetes</code> 多集群管理中的痛点呢？</p><p>最后，根据自己的实际情况选一个最符合你需求的使用吧。这时，你可能会惊奇的发现文中并没有这几个小工具的项目地址！</p><p>哈哈，是时候支持一波公众号了！如需以上小工具项目地址，<strong>请在公众号对话框内回复 「<code>Kubeconfig</code>」，即可获取这一系列小工具的项目下载地址。</strong></p><h3 id="参考文档">参考文档</h3><ol><li><p><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></p></li><li><p><a href="https://yq.aliyun.com/articles/695429" target="_blank" rel="noopener">https://yq.aliyun.com/articles/695429</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/Sp37W-5C3YGSNf_H8HTuUA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Sp37W-5C3YGSNf_H8HTuUA</a></p></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Kubernetes&lt;/code&gt; 生态在很多企业广泛应用的当下，相信很多运维和开发人员都会同时管理和维护多个 &lt;code&gt;Kubernetes&lt;/code&gt; 集群，比如：开发环境、测试环境、预发布环境、生产环境等等。&lt;/p&gt;
&lt;p&gt;为了方便管理多个环境的集群，通常都是在本地环境通过 &lt;code&gt;Kubernetes&lt;/code&gt; 的客户端工具 &lt;code&gt;kubectl&lt;/code&gt; 来管理多个 &lt;code&gt;Kubernetes&lt;/code&gt; 集群的。这时你就需要用到各个集群的 &lt;code&gt;kubeconfig&lt;/code&gt; 文件，你是不是首先想到的就是手动将多个 &lt;code&gt;kubeconfig&lt;/code&gt; 配置文件合并为一个，然后通过 &lt;code&gt;kubectx&lt;/code&gt; 或 &lt;code&gt;kubie&lt;/code&gt; 这样的工具来快速切换上下文环境（context）来达到多集群环境的管理呢？虽然手动合并 &lt;code&gt;kubeconfig&lt;/code&gt; 配置文件的方法是可行的，但是集群环境较多时或者集群环境经常变更时，这样的方法就显得很麻烦了。&lt;/p&gt;
&lt;p&gt;今天，我们就给大家介绍几种更方便更快捷的 &lt;code&gt;Kubernetes&lt;/code&gt; 多集群管理方法。首先我们来看看官方提供的实现方式：&lt;/p&gt;
&lt;h3 id=&quot;官方提供的解决方法&quot;&gt;官方提供的解决方法&lt;/h3&gt;
&lt;p&gt;官方目前提供了配置环境变量和通过命令行参数显示指定两种方法来解决这个问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;配置环境变量指定多个集群的 kubeconfig 文件&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 配置 Kubernetes 多集群，注意使用 : 隔开&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export KUBECONFIG&amp;#x3D;$KUBECONFIG:$HOME&amp;#x2F;.kube&amp;#x2F;config:$HOME&amp;#x2F;.kube&amp;#x2F;mike-local-kubernetes.yaml:$HOME&amp;#x2F;.kube&amp;#x2F;dev-kubernetes.yaml:$HOME&amp;#x2F;.kube&amp;#x2F;test-kubernetes.yaml:$HOME&amp;#x2F;.kube&amp;#x2F;prod-kubernetes.yaml:$HOME&amp;#x2F;.kube&amp;#x2F;okteto-kube.yaml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;通过命令行参数显示指定不同集群的 kubeconfig 文件&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 切换到本地集群&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubectl get pod --kubeconfig&amp;#x3D;$HOME&amp;#x2F;.kube&amp;#x2F;mike-local-kubernetes.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 切换到开发集群&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubectl get pod --kubeconfig&amp;#x3D;$HOME&amp;#x2F;.kube&amp;#x2F;dev-kubernetes.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 切换到测试集群&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubectl get pod --kubeconfig&amp;#x3D;$HOME&amp;#x2F;.kube&amp;#x2F;test-kubernetes.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 切换到生产集群&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubectl get pod --kubeconfig&amp;#x3D;$HOME&amp;#x2F;.kube&amp;#x2F;prod-kubernetes.yaml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;虽然官方提供的方法，能实现多集群管理。但是不断来回切换 &lt;code&gt;kubeconfig&lt;/code&gt; 配置文件或者经常手动编辑环境变量来增减多个集群的配置文件，显然还是比较麻烦的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/categories/kubernetes/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>推荐 3 款超好用的 Docker 图形化管理工具</title>
    <link href="https://www.hi-linux.com/posts/279.html"/>
    <id>https://www.hi-linux.com/posts/279.html</id>
    <published>2020-07-17T01:00:00.000Z</published>
    <updated>2020-07-17T03:54:56.828Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>Docker 是一项非常流行的容器技术，现在在各行各业有着广泛的使用。不过如何管理 Docker 容器是一个问题，所以我今天向大家介绍 3 款 Docker 可视化工具，希望对大家有所帮助。</p><h3 id="portainer">Portainer</h3><p>Portainer 是一款 Docker 可视化管理工具，允许我们在网页中方便的查看和管理 Docker 容器。</p><p>项目地址：<a href="https://www.portainer.io/" target="_blank" rel="noopener">https://www.portainer.io/</a></p><p><img src="https://www.hi-linux.com/img/linux/portainer-1.jpeg" alt=""></p><p>要使用 Portainer 很简单，运行下面两条命令即可。这些命令会创建一个 Portainer 专用的卷，然后在 8000 和 9000 端口创建容器并运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume create portainer_data</span><br><span class="line">$ docker run --name portainer -d -p 8000:8000 -p 9000:9000 -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock -v portainer_data:&#x2F;data portainer&#x2F;portainer</span><br></pre></td></tr></table></figure><p>然后在浏览器打开对应地址，就会发现成功运行了。第一次运行的时候需要设置账号，然后选择要管理的 Docker 主机。</p><p><img src="https://www.hi-linux.com/img/linux/portainer-2.jpeg" alt=""></p><p>设置账号</p><p><img src="https://www.hi-linux.com/img/linux/portainer-3.jpeg" alt=""></p><p>选择要管理的主机</p><p>之后就可以看到本机上运行的 Docker 容器了，点击它们还可以进行容器的管理。左边的条目可以管理卷、创建容器、查看主机信息等等。基本上该有的功能都有了，这也是我推荐的一个工具。</p><p><img src="https://www.hi-linux.com/img/linux/portainer-4.jpeg" alt=""></p><a id="more"></a><h3 id="lazydocker">LazyDocker</h3><p>LazyDocker 是基于终端的一个可视化查询工具，支持键盘操作和鼠标点击。相比 Portainer 来说可能不那么专业，不过对于开发者来说可能反而更加好用了。因为一般开发者都是使用命令行来运行 Docker，偶尔需要图形化查看的时候，就可以使用 LazyDocker 这个工具。</p><p>项目地址：<a href="https://github.com/jesseduffield/lazydocker" target="_blank" rel="noopener">https://github.com/jesseduffield/lazydocker</a></p><p><img src="https://www.hi-linux.com/img/linux/lazydocker-1.gif" alt=""></p><p>官网演示图</p><p>安装 LazyDocker 也非常简单，运行下面的命令即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm -it -v \</span><br><span class="line">&#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">-v ~&#x2F;.config&#x2F;lazydocker:&#x2F;.config&#x2F;jesseduffield&#x2F;lazydocker \</span><br><span class="line">lazyteam&#x2F;lazydocker</span><br></pre></td></tr></table></figure><p>当然如果发现 LazyDocker 挺好用，准备经常使用的话，还可以把它做成缩写添加到 Shell 配置文件中，这样就可以将它变成一个简单的命令。</p><p>例如我用的是 zsh，就将下面这样添加到 .zshrc 文件中。以后就可以直接用 lzd 来 调用 LazyDocker 了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias lzd&#x3D;&#39;docker run --rm -it -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock -v ~&#x2F;.config&#x2F;lazydocker:&#x2F;.config&#x2F;jesseduffield&#x2F;lazydocker lazyteam&#x2F;lazydocker&#39;</span><br></pre></td></tr></table></figure><p>然后就可以在终端中查看 Docker 容器、镜像和卷的信息了。</p><p>LazyDocker 支持键盘操作和鼠标点击，直接用鼠标点击就可以查看对应信息了。</p><p><img src="https://www.hi-linux.com/img/linux/lazydocker-2.jpeg" alt=""></p><p>需要注意如果你的终端 LazyDocker 的图形显示的是乱的，不用担心，只不过是显示字体的问题。重新设置一下终端字体就可以解决了。</p><p><img src="https://www.hi-linux.com/img/linux/lazydocker-3.jpeg" alt=""></p><h3 id="docui">Docui</h3><p>Docui 同样是一个开源的终端 Docker 管理工具，形式与 Lazydocker 一样，也是 终端 UI 的形式。</p><p>Docui 和 Lazydocker 它们都有一个共同的优势，就是支持大量的快捷键，熟练后会极其便利。</p><p>项目地址：<a href="https://github.com/skanehira/docui" target="_blank" rel="noopener">https://github.com/skanehira/docui</a></p><p><img src="https://www.hi-linux.com/img/linux/docui.jpeg" alt=""></p><p>Docui 安装也是很简单的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 通过源码安装</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;skanehira&#x2F;docui.git</span><br><span class="line">$ cd docui&#x2F;</span><br><span class="line">$ GO111MODULE&#x3D;on go install</span><br><span class="line"></span><br><span class="line"># macOS 可能通过 Homebrew 安装</span><br><span class="line">$ brew tap skanehira&#x2F;docui</span><br><span class="line">$ brew install docui</span><br></pre></td></tr></table></figure><h3 id="小结">小结</h3><p>如果你是团队使用，Portainer 会比较适合，因为它有访问控制。</p><p>Lazydocker 和 Docui 都属于简单灵活的终端小工具，如果你不需要复杂的功能，或许它们会更适合你。</p><p>Docker 有很多免费的好用三方客户端工具，上面只是其中的一些，具体哪一款更适合你，还需要自行试用了解后根据实际需求来选择最适合的。</p><h3 id="参考文档">参考文档</h3><ol><li><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></li><li><a href="https://www.toutiao.com/i6780014313227682316/" target="_blank" rel="noopener">https://www.toutiao.com/i6780014313227682316/</a></li><li><a href="https://mp.weixin.qq.com/s/sbnFeAk0NvkG-3ahq6lUfg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/sbnFeAk0NvkG-3ahq6lUfg</a></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 是一项非常流行的容器技术，现在在各行各业有着广泛的使用。不过如何管理 Docker 容器是一个问题，所以我今天向大家介绍 3 款 Docker 可视化工具，希望对大家有所帮助。&lt;/p&gt;
&lt;h3 id=&quot;Portainer&quot;&gt;Portainer&lt;/h3&gt;
&lt;p&gt;Portainer 是一款 Docker 可视化管理工具，允许我们在网页中方便的查看和管理 Docker 容器。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://www.portainer.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.portainer.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/portainer-1.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;要使用 Portainer 很简单，运行下面两条命令即可。这些命令会创建一个 Portainer 专用的卷，然后在 8000 和 9000 端口创建容器并运行。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker volume create portainer_data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --name portainer -d -p 8000:8000 -p 9000:9000 -v &amp;#x2F;var&amp;#x2F;run&amp;#x2F;docker.sock:&amp;#x2F;var&amp;#x2F;run&amp;#x2F;docker.sock -v portainer_data:&amp;#x2F;data portainer&amp;#x2F;portainer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在浏览器打开对应地址，就会发现成功运行了。第一次运行的时候需要设置账号，然后选择要管理的 Docker 主机。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/portainer-2.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;设置账号&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/portainer-3.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;选择要管理的主机&lt;/p&gt;
&lt;p&gt;之后就可以看到本机上运行的 Docker 容器了，点击它们还可以进行容器的管理。左边的条目可以管理卷、创建容器、查看主机信息等等。基本上该有的功能都有了，这也是我推荐的一个工具。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/portainer-4.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.hi-linux.com/categories/docker/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>SSH 证书登录教程</title>
    <link href="https://www.hi-linux.com/posts/5424.html"/>
    <id>https://www.hi-linux.com/posts/5424.html</id>
    <published>2020-07-09T01:00:00.000Z</published>
    <updated>2020-07-09T06:04:42.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>SSH 是服务器登录工具，提供密码登录和密钥登录。</p><p>但是，SSH 还有第三种登录方法，那就是证书登录。很多情况下，它是更合理、更安全的登录方法，本文就介绍这种登录方法。</p><h2 id="一-非证书登录的缺点">一、非证书登录的缺点</h2><p>密码登录和密钥登录，都有各自的缺点。</p><p>密码登录需要输入服务器密码，这非常麻烦，也不安全，存在被暴力破解的风险。</p><p>密钥登录需要服务器保存用户的公钥，也需要用户保存服务器公钥的指纹。这对于多用户、多服务器的大型机构很不方便，如果有员工离职，需要将他的公钥从每台服务器删除。</p><h2 id="二-证书登录是什么">二、证书登录是什么？</h2><p>证书登录就是为了解决上面的缺点而设计的。它引入了一个证书颁发机构（Certificate1 authority，简称 CA），对信任的服务器颁发服务器证书，对信任的用户颁发用户证书。</p><p>登录时，用户和服务器不需要提前知道彼此的公钥，只需要交换各自的证书，验证是否可信即可。</p><p>证书登录的主要优点有两个：（1）用户和服务器不用交换公钥，这更容易管理，也具有更好的可扩展性。（2）证书可以设置到期时间，而公钥没有到期时间。针对不同的情况，可以设置有效期很短的证书，进一步提高安全性。</p><a id="more"></a><h2 id="三-证书登录的流程">三、证书登录的流程</h2><p>SSH 证书登录之前，如果还没有证书，需要生成证书。具体方法是：（1）用户和服务器都将自己的公钥，发给 CA；（2）CA 使用服务器公钥，生成服务器证书，发给服务器；（3）CA 使用用户的公钥，生成用户证书，发给用户。</p><p>有了证书以后，用户就可以登录服务器了。整个过程都是 SSH 自动处理，用户无感知。</p><p>第一步，用户登录服务器时，SSH 自动将用户证书发给服务器。</p><p>第二步，服务器检查用户证书是否有效，以及是否由可信的 CA 颁发。</p><p>第三步，SSH 自动将服务器证书发给用户。</p><p>第四步，用户检查服务器证书是否有效，以及是否由信任的 CA 颁发。</p><p>第五步，双方建立连接，服务器允许用户登录。</p><h2 id="四-生成-ca-的密钥">四、生成 CA 的密钥</h2><p>证书登录的前提是，必须有一个 CA，而 CA 本质上就是一对密钥，跟其他密钥没有不同，CA 就用这对密钥去签发证书。</p><p>虽然 CA 可以用同一对密码签发用户证书和服务器证书，但是出于安全性和灵活性，最好用不同的密钥分别签发。所以，CA 至少需要两对密钥，一对是签发用户证书的密钥，假设叫做 user_ca，另一对是签发服务器证书的密钥，假设叫做 host_ca。</p><p>使用下面的命令，生成 user_ca。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成 CA 签发用户证书的密钥</span><br><span class="line">$ ssh-keygen -t rsa -b 4096 -f ~&#x2F;.ssh&#x2F;user_ca -C user_ca</span><br></pre></td></tr></table></figure><p>上面的命令会在 ~/.ssh 目录生成一对密钥：user_ca（私钥）和 user_ca.pub（公钥）。</p><p>这个命令的各个参数含义如下。</p><ul><li>-t rsa：指定密钥算法 RSA。</li><li>-b 4096：指定密钥的位数是4096位。安全性要求不高的场合，这个值可以小一点，但是不应小于1024。</li><li>-f ~/.ssh/user_ca：指定生成密钥的位置和文件名。</li><li>-C user_ca：指定密钥的识别字符串，相当于注释，可以随意设置。</li></ul><p>使用下面的命令，生成 host_ca。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成 CA 签发服务器证书的密钥</span><br><span class="line">$ ssh-keygen -t rsa -b 4096 -f host_ca -C host_ca</span><br></pre></td></tr></table></figure><p>上面的命令会在~/.ssh目录生成一对密钥：host_ca（私钥）和 host_ca.pub（公钥）。</p><p>现在，~/.ssh 目录应该至少有四把密钥。</p><ul><li>~/.ssh/user_ca</li><li>~/.ssh/user_ca.pub</li><li>~/.ssh/host_ca</li><li>~/.ssh/host_ca.pub</li></ul><h2 id="五-ca-签发服务器证书">五、CA 签发服务器证书</h2><p>有了 CA 以后，就可以签发服务器证书了。</p><p>签发证书，除了 CA 的密钥以外，还需要服务器的公钥。一般来说，SSH 服务器（通常是sshd）安装时，已经生成密钥 /etc/ssh/ssh_host_rsa_key 了。如果没有的话，可以用下面的命令生成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ssh-keygen -f &#x2F;etc&#x2F;ssh&#x2F;ssh_host_rsa_key -b 4096 -t rsa</span><br></pre></td></tr></table></figure><p>上面命令会在 /etc/ssh 目录，生成 ssh_host_rsa_key（私钥）和 ssh_host_rsa_key.pub（公钥）。然后，需要把服务器公钥 ssh_host_rsa_key.pub，复制或上传到 CA 所在的服务器。</p><p>上传以后，CA 就可以使用密钥 host_ca 为服务器的公钥 ssh_host_rsa_key.pub 签发服务器证书。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -s host_ca -I host.example.com -h -n host.example.com -V +52w ssh_host_rsa_key.pub</span><br></pre></td></tr></table></figure><p>上面的命令会生成服务器证书 ssh_host_rsa_key-cert.pub（服务器公钥名字加后缀-cert）。这个命令各个参数的含义如下。</p><ul><li>-s：指定 CA 签发证书的密钥。</li><li>-I：身份字符串，可以随便设置，相当于注释，方便区分证书，将来可以使用这个字符串撤销证书。</li><li>-h：指定该证书是服务器证书，而不是用户证书。</li><li>-n <a href="http://host.example.com" target="_blank" rel="noopener">host.example.com</a>：指定服务器的域名，表示证书仅对该域名有效。如果有多个域名，则使用逗号分隔。用户登录该域名服务器时，SSH 通过证书的这个值，分辨应该使用哪张证书发给用户，用来证明服务器的可信性。</li><li>-V +52w：指定证书的有效期，这里为 52 周（一年）。默认情况下，证书是永远有效的。建议使用该参数指定有效期，并且有效期最好短一点，最长不超过 52 周。</li><li>ssh_host_rsa_key.pub：服务器公钥。</li></ul><p>生成证书以后，可以使用下面的命令，查看证书的细节。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -L -f ssh_host_rsa_key-cert.pub</span><br></pre></td></tr></table></figure><p>最后，为证书设置权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod 600 ssh_host_rsa_key-cert.pub</span><br></pre></td></tr></table></figure><h2 id="六-ca-签发用户证书">六、CA 签发用户证书</h2><p>下面，再用 CA 签发用户证书。这时需要用户的公钥，如果没有的话，客户端可以用下面的命令生成一对密钥。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -f ~&#x2F;.ssh&#x2F;user_key -b 4096 -t rsa</span><br></pre></td></tr></table></figure><p>上面命令会在 ~/.ssh 目录，生成 user_key（私钥）和 user_key.pub（公钥）。</p><p>然后，将用户公钥 user_key.pub，上传或复制到 CA 服务器。接下来，就可以使用 CA 的密钥 user_ca 为用户公钥 user_key.pub 签发用户证书。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -s user_ca -I user@example.com -n user -V +1d user_key.pub</span><br></pre></td></tr></table></figure><p>上面的命令会生成用户证书 user_key-cert.pub（用户公钥名字加后缀-cert）。这个命令各个参数的含义如下。</p><ul><li>-s：指定 CA 签发证书的密钥</li><li>-I：身份字符串，可以随便设置，相当于注释，方便区分证书，将来可以使用这个字符串撤销证书。</li><li>-n user：指定用户名，表示证书仅对该用户名有效。如果有多个用户名，使用逗号分隔。用户以该用户名登录服务器时，SSH 通过这个值，分辨应该使用哪张证书，证明自己的身份，发给服务器。</li><li>-V +1d：指定证书的有效期，这里为1天，强制用户每天都申请一次证书，提高安全性。默认情况下，证书是永远有效的。</li><li>user_key.pub：用户公钥。</li></ul><p>生成证书以后，可以使用下面的命令，查看证书的细节。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -L -f user_key-cert.pub</span><br></pre></td></tr></table></figure><p>最后，为证书设置权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod 600 user_key-cert.pub</span><br></pre></td></tr></table></figure><h2 id="七-服务器安装证书">七、服务器安装证书</h2><p>CA 生成服务器证书 ssh_host_rsa_key-cert.pub 以后，需要将该证书发回服务器，可以使用下面的 scp 命令，将证书拷贝过去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp ~&#x2F;.ssh&#x2F;ssh_host_rsa_key-cert.pub root@host.example.com:&#x2F;etc&#x2F;ssh&#x2F;</span><br></pre></td></tr></table></figure><p>然后，将下面一行添加到服务器配置文件 /etc/ssh/sshd_config。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HostCertificate &#x2F;etc&#x2F;ssh&#x2F;ssh_host_rsa_key-cert.pub</span><br></pre></td></tr></table></figure><p>上面的代码告诉 sshd，服务器证书是哪一个文件。</p><p>重新启动 sshd。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl restart sshd</span><br><span class="line"># 或者</span><br><span class="line">$ sudo service sshd restart</span><br></pre></td></tr></table></figure><h2 id="八-服务器安装-ca-公钥">八、服务器安装 CA 公钥</h2><p>为了让服务器信任用户证书，必须将 CA 签发用户证书的公钥 user_ca.pub，拷贝到服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp ~&#x2F;.ssh&#x2F;user_ca.pub root@host.example.com:&#x2F;etc&#x2F;ssh&#x2F;</span><br></pre></td></tr></table></figure><p>上面的命令，将 CA 签发用户证书的公钥 user_ca.pub，拷贝到 SSH 服务器的 /etc/ssh 目录。</p><p>然后，将下面一行添加到服务器配置文件 /etc/ssh/sshd_config。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TrustedUserCAKeys &#x2F;etc&#x2F;ssh&#x2F;user_ca.pub</span><br></pre></td></tr></table></figure><p>上面的做法是将 user_ca.pub 加到 /etc/ssh/sshd_config，这会产生全局效果，即服务器的所有账户都会信任 user_ca 签发的所有用户证书。</p><p>另一种做法是将 user_ca.pub 加到服务器某个账户的 ~/.ssh/authorized_keys 文件，只让该账户信任 user_ca 签发的用户证书。具体方法是打开 ~/.ssh/authorized_keys，追加一行，开头是 <code>@cert-authority principals=&quot;...&quot;</code>，然后后面加上 user_ca.pub 的内容，大概是下面这个样子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@cert-authority principals&#x3D;&quot;user&quot; ssh-rsa AAAAB3Nz...XNRM1EX2gQ&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>上面代码中，<code>principals=&quot;user&quot;</code> 指定用户登录的服务器账户名，一般就是 authorized_keys 文件所在的账户。</p><p>重新启动 sshd。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl restart sshd</span><br><span class="line"># 或者</span><br><span class="line">$ sudo service sshd restart</span><br></pre></td></tr></table></figure><p>至此，SSH 服务器已配置为信任 user_ca 签发的证书。</p><h2 id="九-客户端安装证书">九、客户端安装证书</h2><p>客户端安装用户证书很简单，就是从 CA 将用户证书 user_key-cert.pub 复制到客户端，与用户的密钥 user_key 保存在同一个目录即可。</p><h2 id="十-客户端安装-ca-公钥">十、客户端安装 CA 公钥</h2><p>为了让客户端信任服务器证书，必须将 CA 签发服务器证书的公钥 host_ca.pub，加到客户端的 /etc/ssh/ssh_known_hosts 文件（全局级别）或者 ~/.ssh/known_hosts 文件（用户级别）。</p><p>具体做法是打开 ssh_known_hosts 或 known_hosts 文件，追加一行，开头为 <code>@cert-authority *.example.com</code>，然后将 <code>host_ca.pub</code> 文件的内容（即公钥）粘贴在后面，大概是下面这个样子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@cert-authority *.example.com ssh-rsa AAAAB3Nz...XNRM1EX2gQ&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>上面代码中，<code>*.example.com</code> 是域名的模式匹配，表示只要服务器符合该模式的域名，且签发服务器证书的 CA 匹配后面给出的公钥，就都可以信任。如果没有域名限制，这里可以写成*。如果有多个域名模式，可以使用逗号分隔；如果服务器没有域名，可以用主机名（比如 host1,host2,host3）或者 IP 地址（比如 11.12.13.14,21.22.23.24）。</p><p>然后，就可以使用证书，登录远程服务器了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -i ~&#x2F;.ssh&#x2F;user_key user@host.example.com</span><br></pre></td></tr></table></figure><p>上面命令的 -i 参数用来指定用户的密钥。如果证书与密钥在同一个目录，则连接服务器时将自动使用该证书。</p><h2 id="十一-废除证书">十一、废除证书</h2><p>废除证书的操作，分成用户证书的废除和服务器证书的废除两种。</p><p>服务器证书的废除，用户需要在 known_hosts 文件里面，修改或删除对应的 <code>@cert-authority</code> 命令的那一行。</p><p>用户证书的废除，需要在服务器新建一个 /etc/ssh/revoked_keys 文件，然后在配置文件 sshd_config 添加一行，内容如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RevokedKeys &#x2F;etc&#x2F;ssh&#x2F;revoked_keys</span><br></pre></td></tr></table></figure><p>revoked_keys 文件保存不再信任的用户公钥，由下面的命令生成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -kf &#x2F;etc&#x2F;ssh&#x2F;revoked_keys -z 1 ~&#x2F;.ssh&#x2F;user1_key.pub</span><br></pre></td></tr></table></figure><p>上面命令中，-z 参数用来指定用户公钥保存在 revoked_keys 文件的哪一行，这个例子是保存在第 1 行。</p><p>如果以后需要废除其他的用户公钥，可以用下面的命令保存在第 2 行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -ukf &#x2F;etc&#x2F;ssh&#x2F;revoked_keys -z 2 ~&#x2F;.ssh&#x2F;user2_key.pub</span><br></pre></td></tr></table></figure><h2 id="十二-参考链接">十二、参考链接</h2><ul><li>SSH Emergency Access, Carl Tashian</li><li>Using OpenSSH Certificate Authentication, Red Hat Enterprise Linux Deployment Guide</li><li>How to SSH Properly, Gus Luxton</li></ul><blockquote><p>本文转载自：「阮一峰的网络日志」，原文：<a href="https://tinyurl.com/yc9xrc7t%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/yc9xrc7t，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SSH 是服务器登录工具，提供密码登录和密钥登录。&lt;/p&gt;
&lt;p&gt;但是，SSH 还有第三种登录方法，那就是证书登录。很多情况下，它是更合理、更安全的登录方法，本文就介绍这种登录方法。&lt;/p&gt;
&lt;h2 id=&quot;一、非证书登录的缺点&quot;&gt;一、非证书登录的缺点&lt;/h2&gt;
&lt;p&gt;密码登录和密钥登录，都有各自的缺点。&lt;/p&gt;
&lt;p&gt;密码登录需要输入服务器密码，这非常麻烦，也不安全，存在被暴力破解的风险。&lt;/p&gt;
&lt;p&gt;密钥登录需要服务器保存用户的公钥，也需要用户保存服务器公钥的指纹。这对于多用户、多服务器的大型机构很不方便，如果有员工离职，需要将他的公钥从每台服务器删除。&lt;/p&gt;
&lt;h2 id=&quot;二、证书登录是什么？&quot;&gt;二、证书登录是什么？&lt;/h2&gt;
&lt;p&gt;证书登录就是为了解决上面的缺点而设计的。它引入了一个证书颁发机构（Certificate1 authority，简称 CA），对信任的服务器颁发服务器证书，对信任的用户颁发用户证书。&lt;/p&gt;
&lt;p&gt;登录时，用户和服务器不需要提前知道彼此的公钥，只需要交换各自的证书，验证是否可信即可。&lt;/p&gt;
&lt;p&gt;证书登录的主要优点有两个：（1）用户和服务器不用交换公钥，这更容易管理，也具有更好的可扩展性。（2）证书可以设置到期时间，而公钥没有到期时间。针对不同的情况，可以设置有效期很短的证书，进一步提高安全性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SSH" scheme="https://www.hi-linux.com/categories/SSH/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="SSH" scheme="https://www.hi-linux.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>手把手教会你解决 Chrome 访问非受信证书页面时，提示「您的连接不是私密连接」错误的方法</title>
    <link href="https://www.hi-linux.com/posts/35330.html"/>
    <id>https://www.hi-linux.com/posts/35330.html</id>
    <published>2020-07-06T01:00:00.000Z</published>
    <updated>2020-07-06T06:20:14.078Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>在较新版本的 <code>Chrome</code> 中访问一些未受信任的 <code>HTTPS</code> 页面时，会提示类似 <code>NET::ERR_CERT_INVALID</code> 的错误。以往旧版本中，我们可以选择跳过得以继续访问，但是新版本的 <code>Chrome</code> 中并不允许继续，且提示以下错误：</p><p><img src="https://www.hi-linux.com/img/linux/Kubernetes-Dashboard-1.png" alt=""></p><p>经过很多种尝试后，目前发现只有两种比较有效的方法可以解决。</p><ul><li>方法一</li></ul><p>你可以在 <code>Chrome</code> 启动时加上 <code>--ignore-certificate-errors</code> 和 <code>--ignore-urlfetcher-cert-requests</code> 参数来解决该问题。</p><ol><li>Windows 用户</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot; --ignore-certificate-errors</span><br></pre></td></tr></table></figure><ol start="2"><li>Mac 用户</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;Applications&#x2F;Google\ Chrome.app&#x2F;Contents&#x2F;MacOS&#x2F;Google\ Chrome --ignore-certificate-errors --ignore-urlfetcher-cert-requests &amp;&gt; &#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure><p>然后重新打开 <code>Chrome</code> 并浏览您的网站，便可正常访问。</p><a id="more"></a><ul><li>方法二</li></ul><p>当出现 “您的连接不是私密” 页面时，点击高级后，并直接输入 <code>thisisunsafe</code> 关键字并回车。当你使用的 <code>Chrome</code> 版本不允许通过点击操作设置例外时，这样操作将允许将此次请求设置到安全例外中。</p><p><img src="https://www.hi-linux.com/img/linux/Kubernetes-Dashboard-4.png" alt=""></p><p><img src="https://www.hi-linux.com/img/linux/Kubernetes-Dashboard-6.png" alt=""></p><blockquote><p>注意：在 Chrome 该页面上，直接键盘输入后回车，并不是在地址栏输入。</p></blockquote><p>如果你真的看不明白上面的文字描述，还可以参考下面的操作演示：</p><p><img src="https://www.hi-linux.com/img/linux/chrome-unsafessl.gif" alt=""></p><p><strong>参考文档</strong></p><ol><li><p><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></p></li><li><p><a href="http://www.hackdig.com/03/hack-68770.htm" target="_blank" rel="noopener">http://www.hackdig.com/03/hack-68770.htm</a></p></li><li><p><a href="https://blog.csdn.net/quanqxj/article/details/103076795" target="_blank" rel="noopener">https://blog.csdn.net/quanqxj/article/details/103076795</a></p></li><li><p><a href="https://medium.com/@dblazeski/chrome-bypass-net-err-cert-invalid-for-development-daefae43eb12" target="_blank" rel="noopener">https://medium.com/@dblazeski/chrome-bypass-net-err-cert-invalid-for-development-daefae43eb12</a></p></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在较新版本的 &lt;code&gt;Chrome&lt;/code&gt; 中访问一些未受信任的 &lt;code&gt;HTTPS&lt;/code&gt; 页面时，会提示类似 &lt;code&gt;NET::ERR_CERT_INVALID&lt;/code&gt; 的错误。以往旧版本中，我们可以选择跳过得以继续访问，但是新版本的 &lt;code&gt;Chrome&lt;/code&gt; 中并不允许继续，且提示以下错误：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/Kubernetes-Dashboard-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;经过很多种尝试后，目前发现只有两种比较有效的方法可以解决。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法一&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以在 &lt;code&gt;Chrome&lt;/code&gt; 启动时加上 &lt;code&gt;--ignore-certificate-errors&lt;/code&gt; 和 &lt;code&gt;--ignore-urlfetcher-cert-requests&lt;/code&gt; 参数来解决该问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Windows 用户&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&amp;quot; --ignore-certificate-errors&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Mac 用户&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;Applications&amp;#x2F;Google\ Chrome.app&amp;#x2F;Contents&amp;#x2F;MacOS&amp;#x2F;Google\ Chrome --ignore-certificate-errors --ignore-urlfetcher-cert-requests &amp;amp;&amp;gt; &amp;#x2F;dev&amp;#x2F;null&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后重新打开 &lt;code&gt;Chrome&lt;/code&gt; 并浏览您的网站，便可正常访问。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Chrome" scheme="https://www.hi-linux.com/categories/Chrome/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Chrome" scheme="https://www.hi-linux.com/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>分享一个解决 sudo 命令找不到环境变量的小技巧</title>
    <link href="https://www.hi-linux.com/posts/30418.html"/>
    <id>https://www.hi-linux.com/posts/30418.html</id>
    <published>2020-06-22T01:00:00.000Z</published>
    <updated>2020-06-22T04:44:37.009Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h3 id="如何解决-sudo-命令找不到环境变量的问题">如何解决 sudo 命令找不到环境变量的问题</h3><p>在通过 <code>sudo</code> 运行命令时，系统会默认重置环境变量为安全的环境变量，也就是说，先前设置的变量都会失效，只有少数配置文件中指定的环境变量能够保存下来。</p><p><code>sudo</code> 的配置文件是 <code>/etc/sudoers</code>，需要 <code>root</code> 权限才能读取，运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo sed &#39;&#x2F;^#&#x2F;d;&#x2F;^$&#x2F;d&#39; &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure><p><code>sudo</code> 的配置如下图所示：</p><p><img src="http://ghoulich.xninja.org/wp-content/uploads/sites/2/2017/05/image-01_sudo-conf.png" alt=""></p><p>sudo 配置文件</p><p>请注意：</p><ul><li><p>第 3 行的 <code>Defaults env_reset</code> 表示默认会重置环境变量，因此自定义的变量会在 <code>sudo</code> 环境中失效，也就不会获取正确的变量值。</p></li><li><p>第 4 行至第 8 行的 <code>env_keep</code> 配置项，用于保留部分环境变量不被重置，需要保留的变量就写入双引号之中。</p></li><li><p>第 9 行的 <code>secure_path</code> 配置项，其中包含的路径将被当做 <code>sudo</code> 环境的 <code>PATH</code> 变量使用，如果在 <code>sudo</code> 环境无法找到某些命令，那么可以将这些命令的路径加入该配置项之中。</p></li></ul><a id="more"></a><p>综上所述，<code>sudo</code> 命令找不到环境变量或命令的问题，有三种解决方法：</p><ol><li>sudo -E</li></ol><p>加上 <code>-E</code>  选项后，用户可以在 <code>sudo</code>  执行时保留当前用户已存在的环境变量，不会被 <code>sudo</code> 重置。另外，如果用户对于指定的环境变量没有权限，则会报错。</p><ol start="2"><li>修改 sudo 配置文件</li></ol><p>在内部测试机器中，安全性要求不高，总是需要加上 <code>-E</code> 参数来执行脚本，这个安全设定也不是很方便。因此，可以通过修改 <code>/etc/sudoers</code> 文件的 <code>env_keep</code> 和 <code>secure_path</code> 配置项，来指定 <code>sudo</code> 环境中需要保留的环境变量和路径。</p><p>当然你也可以用更简单粗暴的方式：直接将 <code>Defaults env_reset</code> 改成 <code>Defaults !env_reset</code> 来取消掉对 <code>PATH</code> 变量的重置，然后在 <code>.bashrc</code> 中最后添加 <code>alias sudo='sudo env PATH=$PATH'</code>。这样 <code>sudo</code> 执行命令时所搜寻的路径就是系统的 <code>PATH</code> 变量中的路径，如果你想添加其他变量方法也是类似。</p><ol start="3"><li>手动添加变量</li></ol><p>手动在脚本中设置所需的变量，在执行 <code>sudo</code> 脚本前先将所需要的变量写入到需要执行的脚本开头。</p><h3 id="参考文档">参考文档</h3><ol><li><p><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></p></li><li><p><a href="http://ghoulich.xninja.org/2017/05/09/how-to-find-env-variables-when-exec-sudo-commands/" target="_blank" rel="noopener">http://ghoulich.xninja.org/2017/05/09/how-to-find-env-variables-when-exec-sudo-commands/</a></p></li><li><p><a href="http://www.ibm.com/developerworks/cn/aix/library/au-sudo/index.html" target="_blank" rel="noopener">http://www.ibm.com/developerworks/cn/aix/library/au-sudo/index.html</a></p></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;如何解决-sudo-命令找不到环境变量的问题&quot;&gt;如何解决 sudo 命令找不到环境变量的问题&lt;/h3&gt;
&lt;p&gt;在通过 &lt;code&gt;sudo&lt;/code&gt; 运行命令时，系统会默认重置环境变量为安全的环境变量，也就是说，先前设置的变量都会失效，只有少数配置文件中指定的环境变量能够保存下来。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo&lt;/code&gt; 的配置文件是 &lt;code&gt;/etc/sudoers&lt;/code&gt;，需要 &lt;code&gt;root&lt;/code&gt; 权限才能读取，运行以下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo sed &amp;#39;&amp;#x2F;^#&amp;#x2F;d;&amp;#x2F;^$&amp;#x2F;d&amp;#39; &amp;#x2F;etc&amp;#x2F;sudoers&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;sudo&lt;/code&gt; 的配置如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ghoulich.xninja.org/wp-content/uploads/sites/2/2017/05/image-01_sudo-conf.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;sudo 配置文件&lt;/p&gt;
&lt;p&gt;请注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第 3 行的 &lt;code&gt;Defaults env_reset&lt;/code&gt; 表示默认会重置环境变量，因此自定义的变量会在 &lt;code&gt;sudo&lt;/code&gt; 环境中失效，也就不会获取正确的变量值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第 4 行至第 8 行的 &lt;code&gt;env_keep&lt;/code&gt; 配置项，用于保留部分环境变量不被重置，需要保留的变量就写入双引号之中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第 9 行的 &lt;code&gt;secure_path&lt;/code&gt; 配置项，其中包含的路径将被当做 &lt;code&gt;sudo&lt;/code&gt; 环境的 &lt;code&gt;PATH&lt;/code&gt; 变量使用，如果在 &lt;code&gt;sudo&lt;/code&gt; 环境无法找到某些命令，那么可以将这些命令的路径加入该配置项之中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="sudo" scheme="https://www.hi-linux.com/tags/sudo/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你解决 Chrome、IE 等浏览器无法正常访问 Kubernetes Dashboard 的问题</title>
    <link href="https://www.hi-linux.com/posts/13787.html"/>
    <id>https://www.hi-linux.com/posts/13787.html</id>
    <published>2020-06-13T01:00:00.000Z</published>
    <updated>2020-06-13T12:06:20.411Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>一般情况下，正常安装部署完 <code>Kubernetes Dashboard</code> 后，通过大多数主流浏览器（<code>Chrome</code>、<code>IE</code>、<code>Safari</code>）是不能正常访问的，唯有 <code>Firefox</code> 才能解忧。</p><p><img src="https://www.hi-linux.com/img/linux/Kubernetes-Dashboard-1.png" alt=""></p><p>使用火狐浏览器打开后，会有一个安全风险提示。</p><p><img src="https://www.hi-linux.com/img/linux/Kubernetes-Dashboard-2.png" alt=""></p><p>接受安全风险后，还是可以正常访问的。</p><p><img src="https://www.hi-linux.com/img/linux/Kubernetes-Dashboard-3.png" alt=""></p><p>该问题是由于部署 <code>Kubernetes Dashboard</code> 时默认生成的证书有问题导致的。在这篇文章中，我们就来教你如何快速优雅的解决它。</p><p>既然是该书问题，那解决办法当然是生成一个新的有效证书替换掉过期的即可。</p><a id="more"></a><h3 id="通过生成新的证书永久解决">通过生成新的证书永久解决</h3><p>下面是生成 <code>Kubernetes Dashboard</code> 域名证书的几种常用方法，你可以根据自身实际情况选用任何一种就行。</p><ul><li><p>通过 <code>https://freessl.cn</code> 网站，在线生成免费 1 年的证书</p></li><li><p>通过 <code>Let’s Encrypt</code> 生成 <code>90</code> 天免费证书</p></li><li><p>通过 <code>Cert-Manager</code> 服务来生成和管理证书</p></li><li><p>通过 <code>IP</code> 直接自签一个证书</p></li></ul><p>几种方式的原理都是一样的，我们这里使用自签证书的方法来进行演示。</p><ol><li>通过自签方式生成证书</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个用于自签证书的目录</span><br><span class="line">$ mkdir kubernetes-dashboard-key &amp;&amp; cd kubernetes-dashboard-key</span><br><span class="line"></span><br><span class="line"># 生成证书请求的key</span><br><span class="line">$ openssl genrsa -out dashboard.key 2048</span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">....................................+++</span><br><span class="line">.......................................................................+++</span><br><span class="line"></span><br><span class="line"># 生成证书请求</span><br><span class="line">$ openssl req -days 3650 -new -out dashboard.csr -key dashboard.key -subj &#39;&#x2F;CN&#x3D;192.168.100.100&#39;</span><br><span class="line"></span><br><span class="line"># 生成自签证书</span><br><span class="line">$ openssl x509 -req -in dashboard.csr -signkey dashboard.key -out dashboard.crt</span><br><span class="line">Signature ok</span><br><span class="line">subject&#x3D;&#x2F;CN&#x3D;192.168.100.100</span><br><span class="line">Getting Private key</span><br></pre></td></tr></table></figure><ol start="2"><li>使用新证书来创建一个与 Kubernetes Dashboard 部署文件中同名的 Secret</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 查找 Kubernetes 中原有证书的 Secret</span><br><span class="line">$ kubectl get secret kubernetes-dashboard-certs -n kubernetes-dashboard</span><br><span class="line">NAME                         TYPE     DATA   AGE</span><br><span class="line">kubernetes-dashboard-certs   Opaque   0      65d</span><br><span class="line"></span><br><span class="line"># 查看 Kubernetes 中原有的证书 Secret 的内容 （此步骤非必须）</span><br><span class="line">$ kubectl get  secret kubernetes-dashboard-certs -n kubernetes-dashboard -o yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    kubectl.kubernetes.io&#x2F;last-applied-configuration: |</span><br><span class="line">      &#123;&quot;apiVersion&quot;:&quot;v1&quot;,&quot;kind&quot;:&quot;Secret&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&#125;,&quot;labels&quot;:&#123;&quot;k8s-app&quot;:&quot;kubernetes-dashboard&quot;&#125;,&quot;name&quot;:&quot;kubernetes-dashboard-certs&quot;,&quot;namespace&quot;:&quot;kubernetes-dashboard&quot;&#125;,&quot;type&quot;:&quot;Opaque&quot;&#125;</span><br><span class="line">  creationTimestamp: &quot;2020-03-24T17:42:42Z&quot;</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard-certs</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">  resourceVersion: &quot;20913&quot;</span><br><span class="line">  selfLink: &#x2F;api&#x2F;v1&#x2F;namespaces&#x2F;kubernetes-dashboard&#x2F;secrets&#x2F;kubernetes-dashboard-certs</span><br><span class="line">  uid: 329888d4-aa59-4c32-84d8-b88ef2ebfa32</span><br><span class="line">type: Opaque</span><br><span class="line"></span><br><span class="line"># 删除 Kubernetes 中原有的证书 Secret</span><br><span class="line">$ kubectl delete secret kubernetes-dashboard-certs -n kubernetes-dashboard</span><br><span class="line">secret &quot;kubernetes-dashboard-certs&quot; deleted</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 使用新证书创建一个同名的 Secret</span><br><span class="line">$ kubectl create secret generic kubernetes-dashboard-certs --from-file&#x3D;dashboard.key --from-file&#x3D;dashboard.crt -n kubernetes-dashboard</span><br><span class="line">secret&#x2F;kubernetes-dashboard-certs created</span><br></pre></td></tr></table></figure><blockquote><p>注意：新版的 Dashboard 的 namespace 已经是 kubernetes-dashboard 。</p></blockquote><ol start="3"><li>查找当前正在运行的 Kubernetes-Dashboard 的 Pod</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -n kubernetes-dashboard</span><br><span class="line">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">dashboard-metrics-scraper-7b8b58dc8b-nw7l7   1&#x2F;1     Running   3          64d</span><br><span class="line">kubernetes-dashboard-5f5f847d57-88ssx        1&#x2F;1     Running   3          64d</span><br></pre></td></tr></table></figure><ol start="4"><li>删除现有的 Kubernetes-Dashboard 的 Pod</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl delete po kubernetes-dashboard-5f5f847d57-88ssx -n kubernetes-dashboard</span><br><span class="line">pod &quot;kubernetes-dashboard-5f5f847d57-88ssx&quot; deleted</span><br><span class="line"></span><br><span class="line">$ kubectl delete po dashboard-metrics-scraper-7b8b58dc8b-nw7l7 -n kubernetes-dashboard</span><br><span class="line">pod &quot;dashboard-metrics-scraper-7b8b58dc8b-nw7l7&quot; deleted</span><br></pre></td></tr></table></figure><p>如果 <code>Pod</code> 比较多的时候，你还可以使用以下这条命令批量删除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -n kubernetes-dashboard | grep -v NAME | awk &#39;&#123;print &quot;kubectl delete po &quot; $1 &quot; -n kubernetes-dashboard&quot;&#125;&#39; | sh</span><br></pre></td></tr></table></figure><p>删除完成后，新的 <code>Kubernetes-Dashboard Pod</code> 会自动启动起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -n kubernetes-dashboard</span><br><span class="line">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">dashboard-metrics-scraper-7b8b58dc8b-w9zzh   1&#x2F;1     Running   0          35s</span><br><span class="line">kubernetes-dashboard-5f5f847d57-4q76w        1&#x2F;1     Running   0          53s</span><br></pre></td></tr></table></figure><p>这时，再次刷新 <code>Chrome</code> 浏览器的 <code>Dashboard</code> 页面后，先点高级：</p><p><img src="https://www.hi-linux.com/img/linux/Kubernetes-Dashboard-4.png" alt=""></p><p>然后点击继续前往，页面就可以正常显示了。</p><p><img src="https://www.hi-linux.com/img/linux/Kubernetes-Dashboard-5.png" alt=""></p><p><img src="https://www.hi-linux.com/img/linux/Kubernetes-Dashboard-6.png" alt=""></p><p><img src="https://www.hi-linux.com/img/linux/Kubernetes-Dashboard-7.png" alt=""></p><h3 id="临时解决方案">临时解决方案</h3><p>如果你只是想临时使用 <code>Chrome</code> 访问下 <code>Kubernetes-Dashboard</code> 或者你没有权限更换 <code>Kubernetes-Dashboard</code> 的证书，你也可以在 <code>Chrome</code> 启动时加上 <code>--ignore-certificate-errors</code> 和 <code>--ignore-urlfetcher-cert-requests</code> 参数来解决该问题。</p><ol><li>Windows 用户</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot; --ignore-certificate-errors</span><br></pre></td></tr></table></figure><ol start="2"><li>Mac 用户</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;Applications&#x2F;Google\ Chrome.app&#x2F;Contents&#x2F;MacOS&#x2F;Google\ Chrome --ignore-certificate-errors --ignore-urlfetcher-cert-requests &amp;&gt; &#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure><h1 id="参考文档">参考文档</h1><ol><li><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></li><li><a href="https://blog.51cto.com/10616534/2430512" target="_blank" rel="noopener">https://blog.51cto.com/10616534/2430512</a></li><li><a href="https://www.jianshu.com/p/8021285cc37d" target="_blank" rel="noopener">https://www.jianshu.com/p/8021285cc37d</a></li><li><a href="https://stackoverflow.com/questions/26388405/chrome-disable-ssl-checking-for-sites" target="_blank" rel="noopener">https://stackoverflow.com/questions/26388405/chrome-disable-ssl-checking-for-sites</a></li><li><a href="https://my.oschina.net/u/4407987/blog/3319315" target="_blank" rel="noopener">https://my.oschina.net/u/4407987/blog/3319315</a></li><li><a href="https://zhangguanzhang.github.io/2019/02/12/dashboard/" target="_blank" rel="noopener">https://zhangguanzhang.github.io/2019/02/12/dashboard/</a></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般情况下，正常安装部署完 &lt;code&gt;Kubernetes Dashboard&lt;/code&gt; 后，通过大多数主流浏览器（&lt;code&gt;Chrome&lt;/code&gt;、&lt;code&gt;IE&lt;/code&gt;、&lt;code&gt;Safari&lt;/code&gt;）是不能正常访问的，唯有 &lt;code&gt;Firefox&lt;/code&gt; 才能解忧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/Kubernetes-Dashboard-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用火狐浏览器打开后，会有一个安全风险提示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/Kubernetes-Dashboard-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;接受安全风险后，还是可以正常访问的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/Kubernetes-Dashboard-3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;该问题是由于部署 &lt;code&gt;Kubernetes Dashboard&lt;/code&gt; 时默认生成的证书有问题导致的。在这篇文章中，我们就来教你如何快速优雅的解决它。&lt;/p&gt;
&lt;p&gt;既然是该书问题，那解决办法当然是生成一个新的有效证书替换掉过期的即可。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/categories/kubernetes/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你定制一个专属的个性化终端登陆界面</title>
    <link href="https://www.hi-linux.com/posts/51306.html"/>
    <id>https://www.hi-linux.com/posts/51306.html</id>
    <published>2020-05-28T01:00:00.000Z</published>
    <updated>2020-05-28T07:30:10.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>在我们登入 macOS 的终端后，终端往往会弹出一段欢迎信息，显示登录主机、主机供应商提示等信息。但每次看到的都是同样的信息难免有些厌倦。</p><p>通过修改 Motd 文件，我们可以给 SSH 加点料，让它更加好看和有趣。</p><p>默认提示</p><p><img src="https://cdn.sspai.com/2020/03/04/119ed2f44f8c779e52e5d0b61f0572b0.png" alt=""></p><h2 id="原理">原理</h2><blockquote><p>在类 Unix 系统中，/etc/motd 是一个包含「今日消息（Message of the day）」的文件。比起电子邮件，使用 Motd 给所有用户发送消息显得更有效率。其它操作系统中也可能有这一功能，比如 Multics 中的 Motd 信息分段。/etc/motd 的内容会在用户成功登录后由 Unix 登录命令显示，整个过程发生在 Shell 登录之前。较新的类 Unix 系统可以生成动态消息。Ｍotd 也被运用在其它领域，比如 IRC 服务器、半条命系列游戏等。</p><p>来源：维基百科</p></blockquote><p>Linux 系统通过 /etc/issue、/etc/issue.net、/etc/motd 以及 /run/motd.dynamic 来显示本地或者是远程登录后的提示信息，这个提示信息通常用于向用户展示系统版本、硬件参数等信息。其中 /etc/issue、/etc/issue.net 通常在未登录终端前显示，/etc/motd、/run/motd.dynamic 则是在成功登录终端后显示。</p><p>此外还有 /etc/profile 与 /etc/profile.d/，在登录后会运行其中的脚本。</p><a id="more"></a><h2 id="哪里-get-到好康的提示信息">哪里 Get 到好康的提示信息？</h2><h3 id="asciiworld">ASCiiWorld</h3><p>在 AsciiWorld 中提供了现成的图案，左侧可按照分类来搜寻自己需要的字符画。不过 ASCiiWorld 历史悠久，上面的字符画稍显陈旧，不太符合我的审美，哈哈哈。</p><p><img src="https://cdn.sspai.com/2020/03/04/57a737ad43d131f259820d9b410d886b.png" alt=""></p><p>ASCiiWorld</p><p>网站链接：<a href="http://www.asciiworld.com/" target="_blank" rel="noopener">http://www.asciiworld.com/</a></p><h3 id="通过图片转换">通过图片转换</h3><p>V 友 Kokodayo 基于 Img2Motd 开发了网页版的 图片转 Linux Shell 彩色文本。试了一下还挺好玩的亚子，不过对图片和终端的要求有点高。图片的长宽尽量控制在 100 * 100 以内，同时尽量避免使用过于复杂的图案。</p><p><img src="https://cdn.sspai.com/2020/03/04/7eb2b4325eed153625ce2cb027fae6b8.png" alt=""></p><p>Bakaya-Motd</p><p>网站链接：<a href="https://motd.bakaya.ro/" target="_blank" rel="noopener">https://motd.bakaya.ro/</a></p><h3 id="文字特效">文字特效</h3><p>Patorjk 可以根据自己输入的文字，并选择对应的字体来生成字符画，字体种类比较丰富（老板：每天给我换 150 种，但遗憾的是生成语言仅支持英文，如果有中文生成需要的，可以考虑使用 ASCii 字符画生成器来实现。</p><p><img src="https://cdn.sspai.com/2020/03/04/aac68b477cef72eea48c0534e2b954b9.png" alt=""></p><p>Patorjk</p><p>网站链接：<a href="http://patorjk.com/software/taag/" target="_blank" rel="noopener">http://patorjk.com/software/taag/</a></p><h3 id="neofetch">Neofetch</h3><p>当然，除了静态的字符画，我们还可以选择使用一些工具来动态显示欢迎信息。</p><p>Neofetch 是一款用于显示系统信息的脚本，同类的工具还有 ScreenFetch 和 Linux_Logo。Neofetch 除了可以显示 ASCii 字符画，还可以通过 w3m-img 等运行库在终端中显示全彩图片（不过我还没折腾出来，没搞懂是终端的原因还是其它什么原因。</p><p><img src="https://cdn.sspai.com/2020/03/04/083f03f3d42afafec9aace46d31351b3.png" alt=""></p><p>Neofetch</p><blockquote><p>项目地址：<a href="https://github.com/dylanaraps/neofetch/" target="_blank" rel="noopener">https://github.com/dylanaraps/neofetch/</a></p></blockquote><ol><li>安装方法</li></ol><ul><li>Debian / Ubuntu</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ apt update &amp;&amp; apt upgrade -y</span><br><span class="line">$ apt install neofetch -y</span><br></pre></td></tr></table></figure><ul><li>CentOS / Fedora / RHEL</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ yum update &amp;&amp; yum upgrade -y</span><br><span class="line">$ yum install dnf-plugins-core -y</span><br><span class="line">$ dnf copr enable konimex&#x2F;neofetch</span><br><span class="line">$ dnf install neofetch</span><br></pre></td></tr></table></figure><ul><li>macOS</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install neofetch</span><br></pre></td></tr></table></figure><p>更多 Neofetch 的玩法可以参考 Neofetch-Wiki，比如说通过 w3m-img 展示全彩图片、显示桌面截图、修改显示信息的类型、显示主机的扩展信息等等，在此不做过多阐述。</p><ol start="2"><li>更改方法</li></ol><ul><li><p>静态 Motd：如果是从图片转换的，那么将新 Motd 更名为 motd 上传至 /etc 目录中，重新登录终端即可生效。</p></li><li><p>动态 Motd：在 Ubuntu 16.04 （其它系统同理）后，启用了动态 Motd，此时我们需要将生成的 motd 文件写入至 /etc/update-motd.d/30-banner 中的对应位置。</p></li><li><p>Neofetch：在 /etc/profile.d/ 创建一个名为 <a href="http://neofetch.sh" target="_blank" rel="noopener">neofetch.sh</a> 的脚本，填入以下内容，保存后重新登入 SSH 即可生效。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#&#x2F;bin&#x2F;sh</span><br><span class="line">neofetch</span><br></pre></td></tr></table></figure><p>最终效果</p><p><img src="https://cdn.sspai.com/2020/03/04/dac33bf6a775a51c33826f95d30f153e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt=""></p><p>Patorjk</p><p><img src="https://cdn.sspai.com/2020/03/04/ae6a16a19a582d1e3cedfe06b0afff0b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt=""></p><p>Neofetch</p><p><img src="https://cdn.sspai.com/2020/03/04/ae6a16a19a582d1e3cedfe06b0afff0b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt=""></p><p>Neofetch in macOS</p><h2 id="结语">结语</h2><p>有人也许会认为修改 Motd 纯属是「徒增功耗、方向错了」，但我个人觉得，除了能够让你的终端更加有趣，还能够在你登录终端前显示主机的重要信息，避免在生产环境中「rm -rf /*」。</p><p>如果你有更多有趣、新奇的玩法，不妨在讨论区中和大家一起分享。喜欢这篇文章的话，不要忘记点赞、分享和关注哦。</p><h3 id="参考链接">参考链接</h3><ul><li><p>Linux 公社：bash的登录与欢迎信息: /etc/issue,/etc/motd</p></li><li><p>旷世的忧伤：Linux 服务器维护简易指南</p></li><li><p>Kokodayo：在 Linux Shell 的登录欢迎语里……放“图片”！</p></li></ul><blockquote><p>本文转载自：「鸟之言语」，原文：<a href="https://tinyurl.com/qqczh4n%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/qqczh4n，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我们登入 macOS 的终端后，终端往往会弹出一段欢迎信息，显示登录主机、主机供应商提示等信息。但每次看到的都是同样的信息难免有些厌倦。&lt;/p&gt;
&lt;p&gt;通过修改 Motd 文件，我们可以给 SSH 加点料，让它更加好看和有趣。&lt;/p&gt;
&lt;p&gt;默认提示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sspai.com/2020/03/04/119ed2f44f8c779e52e5d0b61f0572b0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;原理&quot;&gt;原理&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在类 Unix 系统中，/etc/motd 是一个包含「今日消息（Message of the day）」的文件。比起电子邮件，使用 Motd 给所有用户发送消息显得更有效率。其它操作系统中也可能有这一功能，比如 Multics 中的 Motd 信息分段。/etc/motd 的内容会在用户成功登录后由 Unix 登录命令显示，整个过程发生在 Shell 登录之前。较新的类 Unix 系统可以生成动态消息。Ｍotd 也被运用在其它领域，比如 IRC 服务器、半条命系列游戏等。&lt;/p&gt;
&lt;p&gt;来源：维基百科&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Linux 系统通过 /etc/issue、/etc/issue.net、/etc/motd 以及 /run/motd.dynamic 来显示本地或者是远程登录后的提示信息，这个提示信息通常用于向用户展示系统版本、硬件参数等信息。其中 /etc/issue、/etc/issue.net 通常在未登录终端前显示，/etc/motd、/run/motd.dynamic 则是在成功登录终端后显示。&lt;/p&gt;
&lt;p&gt;此外还有 /etc/profile 与 /etc/profile.d/，在登录后会运行其中的脚本。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="工具" scheme="https://www.hi-linux.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>推荐一款可在线访问任意 Pod 的神器 Podtnl（无需暴露服务）</title>
    <link href="https://www.hi-linux.com/posts/57908.html"/>
    <id>https://www.hi-linux.com/posts/57908.html</id>
    <published>2020-05-26T01:00:00.000Z</published>
    <updated>2020-05-26T05:49:20.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><code>Podtnl</code> 是一个不通过暴露 <code>Kubernetes Service</code> 服务也可以在线访问 <code>Pod</code> 的一个功能强大的 <code>CLI</code> 工具。</p><blockquote><p>项目地址：<a href="https://github.com/narendranathreddythota/podtnl" target="_blank" rel="noopener">https://github.com/narendranathreddythota/podtnl</a></p></blockquote><p><code>Podtnl</code> 使用了两个主要的概念：端口转发和隧道。<code>Podtnl</code> 使用非常简单，特别是在应用开发阶段非常有用，完全不用担心有没有创建 <code>Ingress</code>、<code>LoadBalancer</code> 等资源。</p><p><img src="https://www.hi-linux.com/img/linux/tunnel.png" alt=""></p><h3 id="podtnl-安装">Podtnl 安装</h3><p>直接下载 <code>GitHub</code> 仓库上 <code>Release</code> 的二进制文件，开箱即用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;github.com&#x2F;narendranathreddythota&#x2F;podtnl&#x2F;releases&#x2F;download&#x2F;1.0&#x2F;podtnl</span><br><span class="line">$ chmod +x podtnl</span><br><span class="line">$ mv podtnl &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure><p>如果你使用 <code>macOS</code>，你还可以使用 <code>Homebrew</code> 进行安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew tap narendranathreddythota&#x2F;podtnl</span><br><span class="line">$ brew install podtnl</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="podtnl-使用">Podtnl 使用</h3><p>要使用 <code>Podtnl</code> ，你需要先提供一个隧道。目前 <code>Podtnl</code> 只支持 <code>Ngrok</code> 作为隧道提供商，所以需要提前安装配置好 <code>Ngrok</code>。你可以通过地址 <code>https://dashboard.ngrok.com/get-started/setup</code> 进行配置。</p><p>当 <code>Podtnl</code> 和 <code>Ngrok</code> 都配置好过后，即可使用 <code>Podtnl</code>。 <code>Podtnl</code> 可以使用的一些命令如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Available Flage</span><br><span class="line">  version        : Output Podtnl Version</span><br><span class="line">  provider       : Input Tunnel Provider</span><br><span class="line">  providerPath   : Input Tunnel Provider Path</span><br><span class="line">  podname        : Input Pod Name</span><br><span class="line">  protocol       : Input Type of Protocol</span><br><span class="line">  namespace      : Input Namespace</span><br><span class="line">  podport        : Input Pod Port</span><br><span class="line">  auth           : Need Authentication ? Applicable for HTTP</span><br></pre></td></tr></table></figure><p>比如：当前 <code>Kubernetes</code> 集群中在 <code>kube-ops</code> 命名空间下面有如下一个 <code>Pod</code>，容器暴露 <code>8080</code> 端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -n kube-ops</span><br><span class="line">NAME                                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">devops-name-devops-demo-7cf5fcc5c6-j76h5         1&#x2F;1     Running   0          3d14h</span><br></pre></td></tr></table></figure><p>我们就可以按照如下所示的命令来直接暴露该 <code>Pod</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ podtnl -provider ngrok -podname devops-name-devops-demo-7cf5fcc5c6-j76h5 -podport 8080 -namespace kube-ops</span><br><span class="line">[INFO] ...Tunnel provider ngrok</span><br><span class="line">[INFO] NGROK is Ready</span><br><span class="line">[INFO] Username: hBIHNsBB3G3OFQ8vj7lm8WXC17EybR59</span><br><span class="line">[INFO] Password: fRJrZs3mtvTSWLKpFa2VcxVjCw5RexbVHnxirWqPqL44K47Q4VMetM4McwFZBJFm</span><br><span class="line">Forwarding from 127.0.0.1:8080 -&gt; 8080</span><br><span class="line">Forwarding from [::1]:8080 -&gt; 8080</span><br><span class="line">[INFO] mytunnel is created and Live: -&gt; https:&#x2F;&#x2F;c13f78fe.ngrok.io</span><br></pre></td></tr></table></figure><p>然后我们可以使用上面生成的地址 <code>https://c13f78fe.ngrok.io</code> 来直接访问该 <code>Pod</code>。默认会使用 <code>Basic Auth</code> 认证方式，使用上面生成的 <code>Username</code> 和 <code>Password</code> 即可认证。</p><p>如果 <code>Pod</code> 是 <code>TCP</code> 服务需要直接暴露，则需添加 <code>protocol</code> 参数指定即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ podtnl -provider ngrok -podname orderer1-7cb4b7565-nv95k -podport 7050 -protocol tcp</span><br><span class="line"></span><br><span class="line">Expected Output:</span><br><span class="line">[INFO] ...Tunnel provider ngrok</span><br><span class="line">[INFO] NGROK is Ready</span><br><span class="line">[INFO] mytunnel is created and Live: -&gt; tcp:&#x2F;&#x2F;0.tcp.ngrok.io:10467</span><br><span class="line"></span><br><span class="line">^C[WARN] Shutting down all open tunnels..</span><br><span class="line">[DBUG] Closing tunnel in tcp:&#x2F;&#x2F;0.tcp.ngrok.io:10467</span><br></pre></td></tr></table></figure><p>更多好用的玩法，你可以去 「<a href="https://github.com/narendranathreddythota/podtnl" target="_blank" rel="noopener">Podtnl 官网</a>」进行探索哟！</p><blockquote><p>本文转载自：「k8s 技术圈」，原文：<a href="https://tinyurl.com/y6urwkgt%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/y6urwkgt，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <code>editor@hi-linux.com</code> 。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Podtnl&lt;/code&gt; 是一个不通过暴露 &lt;code&gt;Kubernetes Service&lt;/code&gt; 服务也可以在线访问 &lt;code&gt;Pod&lt;/code&gt; 的一个功能强大的 &lt;code&gt;CLI&lt;/code&gt; 工具。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/narendranathreddythota/podtnl&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/narendranathreddythota/podtnl&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Podtnl&lt;/code&gt; 使用了两个主要的概念：端口转发和隧道。&lt;code&gt;Podtnl&lt;/code&gt; 使用非常简单，特别是在应用开发阶段非常有用，完全不用担心有没有创建 &lt;code&gt;Ingress&lt;/code&gt;、&lt;code&gt;LoadBalancer&lt;/code&gt; 等资源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/tunnel.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Podtnl-安装&quot;&gt;Podtnl 安装&lt;/h3&gt;
&lt;p&gt;直接下载 &lt;code&gt;GitHub&lt;/code&gt; 仓库上 &lt;code&gt;Release&lt;/code&gt; 的二进制文件，开箱即用。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ wget https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;narendranathreddythota&amp;#x2F;podtnl&amp;#x2F;releases&amp;#x2F;download&amp;#x2F;1.0&amp;#x2F;podtnl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ chmod +x podtnl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mv podtnl &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;bin&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你使用 &lt;code&gt;macOS&lt;/code&gt;，你还可以使用 &lt;code&gt;Homebrew&lt;/code&gt; 进行安装。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ brew tap narendranathreddythota&amp;#x2F;podtnl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ brew install podtnl&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/categories/kubernetes/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
  </entry>
  
</feed>
