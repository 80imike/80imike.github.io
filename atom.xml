<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi Linux</title>
  <subtitle>种一棵树最好的时间是十年前，其次是现在。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.hi-linux.com/"/>
  <updated>2017-01-22T10:13:02.042Z</updated>
  <id>http://www.hi-linux.com/</id>
  
  <author>
    <name>Mike</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用SSH的用户配置文件Config管理SSH会话</title>
    <link href="http://www.hi-linux.com/posts/14346.html"/>
    <id>http://www.hi-linux.com/posts/14346.html</id>
    <published>2017-01-18T01:00:00.000Z</published>
    <updated>2017-01-22T10:13:02.042Z</updated>
    
    <content type="html"><![CDATA[<p>通常利用 SSH 连接远程服务器，一般都要输入以下类似命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh user@hostname -p port</div></pre></td></tr></table></figure>
<p>如果拥有多个 SSH 账号，在终端里直接 SSH 登陆要记住每个 SSH 账号的参数是件不容易的事，而且比较浪费精力和时间。</p>
<p>还好 SSH 提供一种优雅且灵活的方式来解决这个问题，就是利用 SSH 的用户配置文件Config管理 SSH 会话。</p>
<a id="more"></a>
<h3 id="使用SSH配置文件"><a href="#使用SSH配置文件" class="headerlink" title="使用SSH配置文件"></a>使用SSH配置文件</h3><p>SSH 程序可以从以下途径获取配置参数：</p>
<blockquote>
<p>用户配置文件 (~/.ssh/config)<br>系统配置文件 (/etc/ssh/ssh_config)</p>
</blockquote>
<p>配置文件可分为多个配置区段，每个配置区段使用”Host”来区分。我们可以在命令行中输入不同的Host来加载不同的配置段。</p>
<p><strong>配置项</strong></p>
<p>下面先介绍一些常用的SSH配置项</p>
<ul>
<li>Host 别名</li>
<li>HostName 主机名</li>
<li>Port 端口</li>
<li>User 用户名</li>
<li>IdentityFile 密钥文件的路径</li>
<li>IdentitiesOnly 只接受SSH key 登录</li>
<li>PreferredAuthentications 强制使用Public Key验证</li>
</ul>
<p>Host</p>
<p>Host配置项标识了一个配置区段。</p>
<p>SSH配置项参数值可以使用通配符：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">'*'</span> 代表 0～n 个非空白字符。</div><div class="line"><span class="string">'?'</span> 代表一个非空白字符。</div><div class="line"><span class="string">'!'</span> 表示例外通配。</div></pre></td></tr></table></figure>
<p>我们可以在系统配置文件中看到一个匹配所有 host 的默认配置区段：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/ssh/ssh_config | grep &apos;^Host&apos;</div><div class="line">Host *</div></pre></td></tr></table></figure>
<p>这里有一些默认配置项，我们可以在用户配置文件中覆盖这些默认配置。</p>
<p>GlobalKnownHostsFile</p>
<p>指定一个或多个全局认证主机缓存文件，用来缓存通过认证的远程主机的密钥，多个文件用空格分隔。默认缓存文件为：<code>/etc/ssh/ssh_known_hosts</code>, <code>/etc/ssh/ssh_known_hosts2</code>。</p>
<p>HostName</p>
<p>指定远程主机名，可以直接使用数字IP地址。如果主机名中包含 ‘%h’ ，则实际使用时会被命令行中的主机名替换。</p>
<p>IdentityFile</p>
<p>指定密钥认证使用的私钥文件路径。默认为<code>~/.ssh/id_dsa</code>, <code>~/.ssh/id_ecdsa</code>, <code>~/.ssh/id_ed25519</code> 或 <code>~/.ssh/id_rsa</code> 中的一个。文件名称可以使用以下转义符：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">'%d'</span> 本地用户目录</div><div class="line"><span class="string">'%u'</span> 本地用户名称</div><div class="line"><span class="string">'%l'</span> 本地主机名</div><div class="line"><span class="string">'%h'</span> 远程主机名</div><div class="line"><span class="string">'%r'</span> 远程用户名</div></pre></td></tr></table></figure>
<p>可以指定多个密钥文件，在连接的过程中会依次尝试这些密钥文件。</p>
<p>Port</p>
<p>指定远程主机端口号，默认为22。</p>
<p>User</p>
<p>指定登录用户名。</p>
<p>UserKnownHostsFile</p>
<p>指定一个或多个用户认证主机缓存文件，用来缓存通过认证的远程主机的密钥，多个文件用空格分隔。默认缓存文件为： <code>~/.ssh/known_hosts</code>, <code>~/.ssh/known_hosts2</code>。</p>
<p>StrictHostKeyChecking</p>
<p>SSH客户端的StrictHostKeyChecking配置指令，<code>StrictHostKeyChecking=no</code>时可以实现当第一次连接服务器时自动接受新的公钥。不再有任何警告出现了。</p>
<p>还有更多参数的介绍，可以通过<code>man ssh_config</code>查看用户手册。</p>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><ul>
<li>使用指定别名登录到www.hi-linux.com这台主机。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Host www</div><div class="line">    HostName www.hi-linux.com</div><div class="line">    Port 22</div><div class="line">    User root</div><div class="line">    IdentityFile  ~/.ssh/id_rsa</div><div class="line">    IdentitiesOnly yes</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh www</div></pre></td></tr></table></figure>
<ul>
<li>不同主机使用同一私钥进行登陆。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Host github.com git.coding.net</div><div class="line">    HostName %h</div><div class="line">    Port 22</div><div class="line">    User git</div><div class="line">    IdentityFile  ~/.ssh/id_rsa_blog</div><div class="line">    IdentitiesOnly yes</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@git.coding.net</div><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://t.cn/RMmO8I9" target="_blank" rel="external">http://t.cn/RMmO8I9</a><br><a href="http://t.cn/RfXzmZw" target="_blank" rel="external">http://t.cn/RfXzmZw</a><br><a href="http://t.cn/RMmWP95" target="_blank" rel="external">http://t.cn/RMmWP95</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常利用 SSH 连接远程服务器，一般都要输入以下类似命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ ssh user@hostname -p port&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果拥有多个 SSH 账号，在终端里直接 SSH 登陆要记住每个 SSH 账号的参数是件不容易的事，而且比较浪费精力和时间。&lt;/p&gt;
&lt;p&gt;还好 SSH 提供一种优雅且灵活的方式来解决这个问题，就是利用 SSH 的用户配置文件Config管理 SSH 会话。&lt;/p&gt;
    
    </summary>
    
      <category term="SSH" scheme="http://www.hi-linux.com/categories/SSH/"/>
    
    
      <category term="Linux" scheme="http://www.hi-linux.com/tags/Linux/"/>
    
      <category term="SSH" scheme="http://www.hi-linux.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>开启Google BBR算法提升网络速度</title>
    <link href="http://www.hi-linux.com/posts/64279.html"/>
    <id>http://www.hi-linux.com/posts/64279.html</id>
    <published>2016-12-21T01:00:00.000Z</published>
    <updated>2017-01-22T10:13:02.042Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是BBR"><a href="#什么是BBR" class="headerlink" title="什么是BBR"></a>什么是BBR</h3><p>TCP BBR是谷歌出品的TCP拥塞控制算法，BBR目的是要尽量跑满带宽，并且尽量不要有排队的情况。BBR可以起到单边加速TCP连接的效果。替代锐速再合适不过，毕竟免费。</p>
<p>Google提交到Linux主线并发表在ACM queue期刊上的TCP-BBR拥塞控制算法。继承了Google“先在生产环境上部署，再开源和发论文”的研究传统。TCP-BBR已经再YouTube服务器和Google跨数据中心的内部广域网(B4)上部署。由此可见出该算法的前途。</p>
<p>TCP-BBR的目标就是最大化利用网络上瓶颈链路的带宽。一条网络链路就像一条水管，要想最大化利用这条水管，最好的办法就是给这跟水管灌满水。</p>
<p>BBR解决了两个问题：</p>
<ol>
<li>再有一定丢包率的网络链路上充分利用带宽。非常适合高延迟，高带宽的网络链路。</li>
<li>降低网络链路上的buffer占用率，从而降低延迟。非常适合慢速接入网络的用户。</li>
</ol>
<p>项目地址:<a href="https://github.com/google/bbr" target="_blank" rel="external">https://github.com/google/bbr</a></p>
<a id="more"></a>
<h3 id="安装BBR"><a href="#安装BBR" class="headerlink" title="安装BBR"></a>安装BBR</h3><p>BBR是内嵌在Linux内核中的，目前Linux Kernel 4.9已加入了该算法，所以安装新版本内核开启BBR即可享用。</p>
<ul>
<li>Debian/Ubuntu</li>
</ul>
<p>下面简单讲述如何在Debian/Ubuntu 64bit系统中升级kernel开启TCP BBR拥塞控制算法。</p>
<p><strong>下载最新内核</strong></p>
<p>最新内核查看这里：<a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/" target="_blank" rel="external">http://kernel.ubuntu.com/~kernel-ppa/mainline/</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~;mkdir linux49; <span class="built_in">cd</span> linux49</div><div class="line">$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9/linux-headers-4.9.0-040900-generic_4.9.0-040900.201612111631_amd64.deb</div><div class="line">$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9/linux-image-4.9.0-040900-generic_4.9.0-040900.201612111631_amd64.deb</div><div class="line">$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9/linux-headers-4.9.0-040900_4.9.0-040900.201612111631_all.deb</div></pre></td></tr></table></figure>
<p><strong>开始安装</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ dpkg -i *.deb</div></pre></td></tr></table></figure>
<p>以上用于64位系统，其它可以自行下载Index of /~kernel-ppa/mainline/v4.9 对应版本。</p>
<p><strong>删除其余内核(非必需)</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ dpkg <span class="_">-l</span>|grep linux-image</div><div class="line">$ apt-get remove linux-image-[Tab补全] <span class="comment">#删旧内核，在这里，就是把第一个3.13的删掉</span></div></pre></td></tr></table></figure>
<p><strong>更新grub系统引导文件并重启</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ update-grub</div></pre></td></tr></table></figure>
<p><strong>重启系统并查看内核</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ reboot</div><div class="line">$ uname <span class="_">-a</span></div></pre></td></tr></table></figure>
<ul>
<li>Centos/RHEL</li>
</ul>
<p>通过使用ELRepo源的方式在CentOS中安装最新版kernel。</p>
<p><strong>CentOS 6</strong></p>
<p><strong>下载内核并安装</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</div><div class="line">$ rpm -Uvh http://www.elrepo.org/elrepo-release-6-6.el6.elrepo.noarch.rpm</div><div class="line">$ yum --enablerepo=elrepo-kernel install kernel-ml -y</div></pre></td></tr></table></figure>
<p><strong>查看内核是否安装成功</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rpm -qa | grep kernel</div></pre></td></tr></table></figure>
<p>更新grub系统引导文件并重启</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sed -i <span class="string">'s:default=.*:default=0:g'</span> /etc/grub.conf</div><div class="line">$ reboot</div></pre></td></tr></table></figure>
<p><strong>CentOS 7</strong></p>
<p><strong>下载内核并安装</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</div><div class="line">$ rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</div><div class="line">$ yum --enablerepo=elrepo-kernel install kernel-ml  kernel-ml-devel -y</div></pre></td></tr></table></figure>
<p><strong>查看内核是否安装成功</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rpm -qa | grep kernel</div></pre></td></tr></table></figure>
<p><strong>更新grub系统引导文件并重启</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ egrep ^menuentry /etc/grub2.cfg | cut <span class="_">-f</span> 2 <span class="_">-d</span> \<span class="string">' #删除其余内核(非必需)</span></div><div class="line">$ grub2-set-default 0  #default 0表示第一个内核设置为默认运行, 选择最新内核就对了</div><div class="line">$ reboot</div></pre></td></tr></table></figure>
<p><strong>Google TCP BBR一键安装脚本</strong></p>
<ul>
<li>适用于Centos6 32位和64位</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget --no-check-certificate https://github.com/52fancy/GooGle-BBR/raw/master/BBR.sh &amp;&amp; sh BBR.sh</div></pre></td></tr></table></figure>
<ul>
<li>适用于Centos 6/7  仅适用64位）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget -O- http://soft.wellphp.com/scripts/install_bbr_centos.sh | bash</div></pre></td></tr></table></figure>
<h3 id="开启BBR"><a href="#开启BBR" class="headerlink" title="开启BBR"></a>开启BBR</h3><p>安装内核后从刚安装的内核启动，然后执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="string">"net.core.default_qdisc=fq"</span> &gt;&gt; /etc/sysctl.conf</div><div class="line">$ <span class="built_in">echo</span> <span class="string">"net.ipv4.tcp_congestion_control=bbr"</span> &gt;&gt; /etc/sysctl.conf</div></pre></td></tr></table></figure>
<p>保存生效</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sysctl -p</div></pre></td></tr></table></figure>
<p>验证是否安装成功</p>
<p>执行以下命令，如果结果中有bbr则证明你的内核已开启bbr。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sysctl net.ipv4.tcp_available_congestion_control</div><div class="line">net.ipv4.tcp_available_congestion_control = bbr cubic reno</div><div class="line"></div><div class="line">$ lsmod | grep bbr</div><div class="line">tcp_bbr                20480  0</div></pre></td></tr></table></figure>
<p>开启BBR后效果图</p>
<p><img src="http://o75o1rrhq.bkt.clouddn.com/wp-content/uploads/2016/12/reno_cubic_bbr-1024x520.png" alt=""></p>
<h3 id="关闭bbr"><a href="#关闭bbr" class="headerlink" title="关闭bbr"></a>关闭bbr</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sed -i <span class="string">'/net\.core\.default_qdisc=fq/d'</span> /etc/sysctl.conf</div><div class="line">$ sed -i <span class="string">'/net\.ipv4\.tcp_congestion_control=bbr/d'</span> /etc/sysctl.conf</div><div class="line">$ sysctl -p</div></pre></td></tr></table></figure>
<p>执行完上面的代码，使用<code>reboot</code>重启后才能关闭bbr，重启后再用下面的查看bbr状态代码，查看是否关闭了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ lsmod | grep bbr</div></pre></td></tr></table></figure>
<p>如果结果中没有bbr, 则证明你的内核已关闭bbr</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="https://zhuanlan.zhihu.com/p/24418274" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/24418274</a><br><a href="http://blog.flydust.space/tcp-bbr/" target="_blank" rel="external">http://blog.flydust.space/tcp-bbr/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是BBR&quot;&gt;&lt;a href=&quot;#什么是BBR&quot; class=&quot;headerlink&quot; title=&quot;什么是BBR&quot;&gt;&lt;/a&gt;什么是BBR&lt;/h3&gt;&lt;p&gt;TCP BBR是谷歌出品的TCP拥塞控制算法，BBR目的是要尽量跑满带宽，并且尽量不要有排队的情况。BBR可以起到单边加速TCP连接的效果。替代锐速再合适不过，毕竟免费。&lt;/p&gt;
&lt;p&gt;Google提交到Linux主线并发表在ACM queue期刊上的TCP-BBR拥塞控制算法。继承了Google“先在生产环境上部署，再开源和发论文”的研究传统。TCP-BBR已经再YouTube服务器和Google跨数据中心的内部广域网(B4)上部署。由此可见出该算法的前途。&lt;/p&gt;
&lt;p&gt;TCP-BBR的目标就是最大化利用网络上瓶颈链路的带宽。一条网络链路就像一条水管，要想最大化利用这条水管，最好的办法就是给这跟水管灌满水。&lt;/p&gt;
&lt;p&gt;BBR解决了两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;再有一定丢包率的网络链路上充分利用带宽。非常适合高延迟，高带宽的网络链路。&lt;/li&gt;
&lt;li&gt;降低网络链路上的buffer占用率，从而降低延迟。非常适合慢速接入网络的用户。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;项目地址:&lt;a href=&quot;https://github.com/google/bbr&quot;&gt;https://github.com/google/bbr&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Google" scheme="http://www.hi-linux.com/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker Registry搭建Docker私有仓库</title>
    <link href="http://www.hi-linux.com/posts/13369.html"/>
    <id>http://www.hi-linux.com/posts/13369.html</id>
    <published>2016-11-28T01:00:00.000Z</published>
    <updated>2017-01-22T10:13:02.042Z</updated>
    
    <content type="html"><![CDATA[<p>有时候使用 Docker Hub 这样的公共仓库可能不方便，并且公司的私有镜像为了业务安全，也不会push到docker hub上，用户可以创建一个本地仓库供私人使用。类似于git 和maven一样，同时节省服务器下载和上传镜像带宽。</p>
<h3 id="什么是Docker-Registry"><a href="#什么是Docker-Registry" class="headerlink" title="什么是Docker Registry"></a>什么是Docker Registry</h3><p>Docker Registry由三个部分组成：index，registry，registry client。<br>可以把Index认为是负责登录、负责认证、负责存储镜像信息和负责对外显示的外部实现，而registry则是负责存储镜像的内部实现，而Registry Client则是docker客户端。</p>
<h3 id="安装Docker-Registry"><a href="#安装Docker-Registry" class="headerlink" title="安装Docker Registry"></a>安装Docker Registry</h3><p>Docker版本需要1.6以上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker --version</div><div class="line">Docker version 1.12.3, build 6b644ec</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>在本地运行registry（本机ip：192.168.3.79）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run <span class="_">-d</span> -v /opt/docker-registry:/var/lib/registry -p 5000:5000 --restart=always --name registry registry</div></pre></td></tr></table></figure>
<p>Registry服务默认会将上传的镜像保存在容器的/var/lib/registry，我们将主机的/opt/docker-registry目录挂载到该目录，即可实现将镜像保存到主机的/opt/docker-registry/目录了。</p>
<p>如果本地没有下载过docker-registry，则首次会pull registry 运行时会映射路径和端口，以后就可以从/opt/docker-registry下找到私有仓库，这里查看下我本机的镜像</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">mysql               latest              <span class="built_in">cd</span>88b71c6c8c        12 days ago         383.4 MB</div><div class="line">debian              latest              73e72bf822ca        13 days ago         123 MB</div><div class="line">registry            latest              c9bd19d022f6        4 weeks ago         33.3 MB</div><div class="line">nginx               latest              a5311a310510        5 weeks ago         181.5 MB</div></pre></td></tr></table></figure>
<p>从上面信息可以分别看出</p>
<ul>
<li>来自于哪个仓库，比如 debian</li>
<li>镜像的标记，比如 latest 最后一个版本</li>
<li>它的 ID 号（唯一）</li>
<li>创建时间</li>
<li>镜像大小</li>
</ul>
<p>可以看到registry容器已经启动</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ docker ps <span class="_">-a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                  PORTS                    NAMES</div><div class="line">131155da6e75        registry            <span class="string">"/entrypoint.sh /etc/"</span>   5 minutes ago       Up 5 minutes            0.0.0.0:5000-&gt;5000/tcp   registry</div></pre></td></tr></table></figure>
<p>访问私有仓库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl 127.0.0.1:5000/v2/_catalog</div><div class="line">&#123;<span class="string">"repositories"</span>:[]&#125;</div></pre></td></tr></table></figure>
<p>因为我们还没有像私有容器提交镜像，所以这里返回空，下面我们提交一个镜像试试，上面可以看到我本地有一个registry的镜像</p>
<h3 id="PUSH镜像"><a href="#PUSH镜像" class="headerlink" title="PUSH镜像"></a>PUSH镜像</h3><p>设置标签到本地的私有镜像</p>
<p>命令格式为</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker tag IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ docker tag debian 127.0.0.1:5000/debian</div><div class="line">$ docker images</div><div class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">127.0.0.1:5000/debian       latest              73e72bf822ca        13 days ago         123 MB</div><div class="line">debian                      latest              73e72bf822ca        13 days ago         123 MB</div><div class="line">registry                    latest              c9bd19d022f6        4 weeks ago         33.3 MB</div><div class="line">nginx                       latest              a5311a310510        5 weeks ago         181.5 MB</div></pre></td></tr></table></figure>
<p>镜像的 ID 唯一标识了镜像，注意到 debian 和 127.0.0.1:5000/debian具有相同的镜像 ID，说明它们实际上是同一镜像。</p>
<p>然后我们将这个镜像push到私有镜像库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ docker push 127.0.0.1:5000/debian</div><div class="line">The push refers to a repository [127.0.0.1:5000/debian]</div><div class="line">fe4c16cbf7a4: Pushed</div><div class="line">latest: digest: sha256:c1ce85a0f7126a3b5cbf7c57676b01b37c755b9ff9e2f39ca88181c02b985724 size: 529</div></pre></td></tr></table></figure>
<p>然后在看下私有仓库中有没有镜像</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl 127.0.0.1:5000/v2/_catalog</div><div class="line">&#123;<span class="string">"repositories"</span>:[<span class="string">"debian"</span>]&#125;</div></pre></td></tr></table></figure>
<p>可以看到一个叫debian的镜像存在了，其他服务器就可以来下载这个镜像使用了。</p>
<h3 id="从其它服务器上面拉取镜像"><a href="#从其它服务器上面拉取镜像" class="headerlink" title="从其它服务器上面拉取镜像"></a>从其它服务器上面拉取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ docker pull 192.168.3.79:5000/debian</div><div class="line"></div><div class="line">$ docker images</div><div class="line">REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">192.168.3.79:5000/debian   latest              73e72bf822ca        13 days ago         123 MB</div></pre></td></tr></table></figure>
<p>可能存在的问题</p>
<p>出现无法从私有仓库pull镜像或无法push到私有仓库的问题，类似如下报错。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ docker pull 192.168.3.79:5000/debian</div><div class="line">Using default tag: latest</div><div class="line">Error response from daemon: Get https://192.168.3.79:5000/v1/_ping: http: server gave HTTP response to HTTPS client</div></pre></td></tr></table></figure>
<p>这是因为我们启动的registry服务不是安全可信赖的。这是我们需要修改docker的配置文件/etc/default/docker，添加下面的内容，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/default/docker</div><div class="line">DOCKER_OPTS=<span class="string">"--insecure-registry 182.168.3.79:5000"</span></div></pre></td></tr></table></figure>
<p>然后重启docker后台进程，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo service docker restart</div></pre></td></tr></table></figure>
<p>然后再PULL即可。</p>
<h3 id="其它技巧"><a href="#其它技巧" class="headerlink" title="其它技巧"></a>其它技巧</h3><ul>
<li>如果本地有很多镜像想批量上传怎么办，可以用这个脚本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/yeasy/docker_practice/raw/master/_local/push_images.sh</div><div class="line">$ chmod a+x push_images.sh</div><div class="line">$ dos2unix push_images.sh  <span class="comment">#这个脚本换行有点问题，需要先转换成Linux下的换行。</span></div><div class="line">$ ./push_images.sh ubuntu:latest centos:centos7</div></pre></td></tr></table></figure>
<ul>
<li>将本地更新后的容器，提交到私有仓库</li>
</ul>
<p>记录容器ID</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker ps</div></pre></td></tr></table></figure>
<p>将容器更新提交到镜像：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker commit -m <span class="string">"Add vim"</span>  69e873e0c48e 127.0.0.1:5000/ubuntu</div></pre></td></tr></table></figure>
<p>Push到私有仓库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker push 127.0.0.1:5000/ubuntu</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://www.jianshu.com/p/58700f2b0730" target="_blank" rel="external">http://www.jianshu.com/p/58700f2b0730</a><br><a href="http://www.cnblogs.com/lienhua34/p/4922130.html" target="_blank" rel="external">http://www.cnblogs.com/lienhua34/p/4922130.html</a><br><a href="http://t.cn/RLtyuWd" target="_blank" rel="external">http://t.cn/RLtyuWd</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候使用 Docker Hub 这样的公共仓库可能不方便，并且公司的私有镜像为了业务安全，也不会push到docker hub上，用户可以创建一个本地仓库供私人使用。类似于git 和maven一样，同时节省服务器下载和上传镜像带宽。&lt;/p&gt;
&lt;h3 id=&quot;什么是Docker-Registry&quot;&gt;&lt;a href=&quot;#什么是Docker-Registry&quot; class=&quot;headerlink&quot; title=&quot;什么是Docker Registry&quot;&gt;&lt;/a&gt;什么是Docker Registry&lt;/h3&gt;&lt;p&gt;Docker Registry由三个部分组成：index，registry，registry client。&lt;br&gt;可以把Index认为是负责登录、负责认证、负责存储镜像信息和负责对外显示的外部实现，而registry则是负责存储镜像的内部实现，而Registry Client则是docker客户端。&lt;/p&gt;
&lt;h3 id=&quot;安装Docker-Registry&quot;&gt;&lt;a href=&quot;#安装Docker-Registry&quot; class=&quot;headerlink&quot; title=&quot;安装Docker Registry&quot;&gt;&lt;/a&gt;安装Docker Registry&lt;/h3&gt;&lt;p&gt;Docker版本需要1.6以上&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ docker --version&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Docker version 1.12.3, build 6b644ec&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.hi-linux.com/categories/Docker/"/>
    
    
      <category term="Linux" scheme="http://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="http://www.hi-linux.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Nginx/Apache下禁止指定目录运行PHP脚本</title>
    <link href="http://www.hi-linux.com/posts/42933.html"/>
    <id>http://www.hi-linux.com/posts/42933.html</id>
    <published>2016-09-22T01:00:00.000Z</published>
    <updated>2017-01-22T10:13:02.042Z</updated>
    
    <content type="html"><![CDATA[<p>网站程序的上传目录通常是不需要PHP执行解释权限，通过限制目录的PHP执行权限可以提网站的安全性,减少被攻击的机率。</p>
<p>下面和大家一起分享下如何在Apache和Nginx禁止上传目录里PHP的执行权限。</p>
<ul>
<li>Apache下禁止指定目录运行PHP脚本</li>
</ul>
<p>在虚拟主机配置文件中增加php_flag engine off指令即可，配置如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Directory ~ <span class="string">"/website/uploads"</span>&gt;</div><div class="line">  Options FollowSymLinks</div><div class="line">  AllowOverride None</div><div class="line">  Order allow,deny</div><div class="line">  Allow from all </div><div class="line">  php_flag engine off</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>Nginx下禁止指定目录运行PHP脚本</li>
</ul>
<p>Nginx更简单,直接通过location条件匹配定位后进行权限禁止。</p>
<p>在server配置段中增加如下的配置</p>
<p>如果是单个目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">location ~* ^/uploads/.*\.(php|php5)$</div><div class="line">&#123;</div><div class="line">  deny all;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果是多个目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">location ~* ^/(attachments|uploads)/.*\.(php|php5)$</div><div class="line">&#123;</div><div class="line">  deny all;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意:这段配置文件一定要放在下面配置的前面才可以生效的。</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">location ~ \.php$ &#123;</div><div class="line">fastcgi_pass   127.0.0.1:9000;</div><div class="line">fastcgi_index  index.php;</div><div class="line">fastcgi_param  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</div><div class="line">include        fastcgi_params;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后给一个完整的配置示例</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">location ~ /mm/(data|uploads|templets)/*.(php)$ &#123;</div><div class="line">  deny all;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">location ~ .php$ &#123;</div><div class="line">  try_files <span class="variable">$uri</span> /404.html;</div><div class="line">  fastcgi_pass   127.0.0.1:9000;</div><div class="line">  fastcgi_index  index.php;</div><div class="line">  fastcgi_param  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</div><div class="line">  include        fastcgi_params;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置完后记得重启Nginx生效。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网站程序的上传目录通常是不需要PHP执行解释权限，通过限制目录的PHP执行权限可以提网站的安全性,减少被攻击的机率。&lt;/p&gt;
&lt;p&gt;下面和大家一起分享下如何在Apache和Nginx禁止上传目录里PHP的执行权限。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apache下禁止指定目录运行PHP脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在虚拟主机配置文件中增加php_flag engine off指令即可，配置如下&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;Directory ~ &lt;span class=&quot;string&quot;&gt;&quot;/website/uploads&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Options FollowSymLinks&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  AllowOverride None&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Order allow,deny&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Allow from all &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  php_flag engine off&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/Directory&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://www.hi-linux.com/categories/Nginx/"/>
    
    
      <category term="Linux" scheme="http://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Nginx" scheme="http://www.hi-linux.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx通过CORS实现跨域</title>
    <link href="http://www.hi-linux.com/posts/60405.html"/>
    <id>http://www.hi-linux.com/posts/60405.html</id>
    <published>2016-08-31T01:00:00.000Z</published>
    <updated>2017-01-22T10:13:02.042Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是CORS"><a href="#什么是CORS" class="headerlink" title="什么是CORS"></a>什么是CORS</h3><p>CORS是一个W3C标准，全称是跨域资源共享(Cross-origin resource sharing)。它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p>
<p>当前几乎所有的浏览器(Internet Explorer 8+， Firefox 3.5+， Safari 4+和 Chrome 3+)都可通过名为跨域资源共享(Cross-Origin Resource Sharing)的协议支持AJAX跨域调用。</p>
<p>Chrome,Firefox,Opera,Safari都使用的是XMLHttpRequest2对象，IE使用XDomainRequest。</p>
<p>简单来说就是跨域的目标服务器要返回一系列的Headers，通过这些Headers来控制是否同意跨域。跨域资源共享(CORS)也是未来的跨域问题的标准解决方案。</p>
<a id="more"></a>
<p>CORS提供如下Headers，Request包和Response包中都有一部分。</p>
<p><strong>HTTP Response Header</strong></p>
<ul>
<li>Access-Control-Allow-Origin</li>
<li>Access-Control-Allow-Credentials</li>
<li>Access-Control-Allow-Methods</li>
<li>Access-Control-Allow-Headers</li>
<li>Access-Control-Expose-Headers</li>
<li>Access-Control-Max-Age</li>
</ul>
<p><strong>HTTP Request Header</strong></p>
<ul>
<li>Access-Control-Request-Method</li>
<li>Access-Control-Request-Headers</li>
</ul>
<p>其中最敏感的就是Access-Control-Allow-Origin这个Header, 它是W3C标准里用来检查该跨域请求是否可以被通过。(Access Control Check)。如果需要跨域，解决方法就是在资源的头中加入Access-Control-Allow-Origin 指定你授权的域。 </p>
<h3 id="启用CORS请求"><a href="#启用CORS请求" class="headerlink" title="启用CORS请求"></a>启用CORS请求</h3><p>假设您的应用已经在example.com上了，而您想要从www.example2.com提取数据。一般情况下，如果您尝试进行这种类型的AJAX调用，请求将会失败，而浏览器将会出现源不匹配的错误。利用CORS后只需www.example2.com 服务端添加一个HTTP Response头，就可以允许来自example.com的请求。</p>
<p>将Access-Control-Allow-Origin添加到某网站下或整个域中的单个资源</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Origin: http://example.com</div><div class="line">Access-Control-Allow-Credentials: true (可选)</div></pre></td></tr></table></figure>
<p>将允许任何域向您提交请求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Origin: *</div><div class="line">Access-Control-Allow-Credentials: true (可选)</div></pre></td></tr></table></figure>
<h3 id="提交跨域请求"><a href="#提交跨域请求" class="headerlink" title="提交跨域请求"></a>提交跨域请求</h3><p>如果服务器端已启用了CORS，那么提交跨域请求就和普通的XMLHttpRequest请求没什么区别。例如现在example.com可以向www.example2.com提交请求。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var xhr = new XMLHttpRequest();</div><div class="line">// xhr.withCredentials = true; //如果需要Cookie等</div><div class="line">xhr.open(&apos;GET&apos;, &apos;http://www.example2.com/hello.json&apos;);</div><div class="line">xhr.onload = function(e) &#123;</div><div class="line">  var data = JSON.parse(this.response);</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line">xhr.send();</div></pre></td></tr></table></figure>
<h3 id="服务端Nginx配置"><a href="#服务端Nginx配置" class="headerlink" title="服务端Nginx配置"></a>服务端Nginx配置</h3><p>要实现CORS跨域，服务端需要下图中这样一个流程</p>
<p><img src="http://www.hi-linux.com/img/linux/cors_server_flowchart.png" alt=""></p>
<ul>
<li>对于简单请求，如GET，只需要在HTTP Response后添加Access-Control-Allow-Origin。</li>
<li>对于非简单请求，比如POST、PUT、DELETE等，浏览器会分两次应答。第一次preflight（method: OPTIONS），主要验证来源是否合法，并返回允许的Header等。第二次才是真正的HTTP应答。所以服务器必须处理OPTIONS应答。</li>
</ul>
<p>流程如下</p>
<ul>
<li>首先查看http头部有无origin字段；</li>
<li>如果没有，或者不允许，直接当成普通请求处理，结束；</li>
<li>如果有并且是允许的，那么再看是否是preflight(method=OPTIONS)；</li>
<li>如果是preflight，就返回Allow-Headers、Allow-Methods等，内容为空；</li>
<li>如果不是preflight，就返回Allow-Origin、Allow-Credentials等，并返回正常内容。</li>
</ul>
<p>用伪代码表示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">location /pub/(.+) &#123;</div><div class="line">    if ($http_origin ~ &lt;允许的域（正则匹配）&gt;) &#123;</div><div class="line">        add_header &apos;Access-Control-Allow-Origin&apos; &quot;$http_origin&quot;;</div><div class="line">        add_header &apos;Access-Control-Allow-Credentials&apos; &quot;true&quot;;</div><div class="line">        if ($request_method = &quot;OPTIONS&quot;) &#123;</div><div class="line">            add_header &apos;Access-Control-Max-Age&apos; 86400;</div><div class="line">            add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS, DELETE&apos;;</div><div class="line">            add_header &apos;Access-Control-Allow-Headers&apos; &apos;reqid, nid, host, x-real-ip, x-forwarded-ip, event-type, event-id, accept, content-type&apos;;</div><div class="line">            add_header &apos;Content-Length&apos; 0;</div><div class="line">            add_header &apos;Content-Type&apos; &apos;text/plain, charset=utf-8&apos;;</div><div class="line">            return 204;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    # 正常nginx配置</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Nginx配置实例"><a href="#Nginx配置实例" class="headerlink" title="Nginx配置实例"></a>Nginx配置实例</h4><h5 id="实例一：允许example-com的应用在www-example2-com上跨域提取数据"><a href="#实例一：允许example-com的应用在www-example2-com上跨域提取数据" class="headerlink" title="实例一：允许example.com的应用在www.example2.com上跨域提取数据"></a>实例一：允许example.com的应用在www.example2.com上跨域提取数据</h5><p>在nginx.conf里找到server项,并在里面添加如下配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">location /&#123;</div><div class="line"></div><div class="line">add_header &apos;Access-Control-Allow-Origin&apos; &apos;http://example.com&apos;;</div><div class="line">add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</div><div class="line">add_header &apos;Access-Control-Allow-Headers&apos; &apos;Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,X-Requested-With&apos;;</div><div class="line">add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET,POST,OPTIONS&apos;;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果需要允许来自任何域的访问，可以这样配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">add_header Access-Control-Allow-Origin *;</div></pre></td></tr></table></figure>
<p>注释如下</p>
<blockquote>
<p>第一条指令：授权从example.com的请求(必需)<br>第二条指令：当该标志为真时，响应于该请求是否可以被暴露(可选)<br>第三条指令：允许脚本访问的返回头(可选)<br>第四条指令：指定请求的方法，可以是GET, POST, OPTIONS, PUT, DELETE等(可选)</p>
</blockquote>
<p>重启Nginx</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ service nginx reload</div></pre></td></tr></table></figure>
<p>测试跨域请求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -I -X OPTIONS -H &quot;Origin: http://example.com&quot; http://www.example2.com</div></pre></td></tr></table></figure>
<p>成功时，响应头是如下所示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Server: nginx</div><div class="line">Access-Control-Allow-Origin: example.com</div></pre></td></tr></table></figure>
<h5 id="实例二：Nginx允许多个域名跨域访问"><a href="#实例二：Nginx允许多个域名跨域访问" class="headerlink" title="实例二：Nginx允许多个域名跨域访问"></a>实例二：Nginx允许多个域名跨域访问</h5><p>由于Access-Control-Allow-Origin参数只允许配置单个域名或者<code>*</code>，当我们需要允许多个域名跨域访问时可以用以下几种方法来实现。</p>
<ul>
<li>方法一</li>
</ul>
<p>如需要允许用户请求来自www.example.com、m.example.com、wap.example.com访问www.example2.com域名时，返回头Access-Control-Allow-Origin，具体配置如下</p>
<p>在nginx.conf里面,找到server项,并在里面添加如下配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">map $http_origin $corsHost &#123;</div><div class="line">    default 0;</div><div class="line">    &quot;~http://www.example.com&quot; http://www.example.com;</div><div class="line">    &quot;~http://m.example.com&quot; http://m.example.com;</div><div class="line">    &quot;~http://wap.example.com&quot; http://wap.example.com;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server</div><div class="line">&#123;</div><div class="line">    listen 80;</div><div class="line">    server_name www.example2.com;</div><div class="line">    root /usr/share/nginx/html;</div><div class="line">    location /</div><div class="line">    &#123;</div><div class="line">        add_header Access-Control-Allow-Origin $corsHost;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>方法二</li>
</ul>
<p>如需要允许用户请求来自localhost、www.example.com或m.example.com的请求访问xxx.example2.com域名时，返回头Access-Control-Allow-Origin，具体配置如下</p>
<p>在Nginx配置文件中xxx.example2.com域名的location /下配置以下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">set $cors &apos;&apos;;</div><div class="line">if ($http_origin ~* &apos;https?://(localhost|www\.example\.com|m\.example\.com)&apos;) &#123;</div><div class="line">        set $cors &apos;true&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">if ($cors = &apos;true&apos;) &#123;</div><div class="line">        add_header &apos;Access-Control-Allow-Origin&apos; &quot;$http_origin&quot;;</div><div class="line">        add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</div><div class="line">        add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, PUT, DELETE, OPTIONS&apos;;</div><div class="line">        add_header &apos;Access-Control-Allow-Headers&apos; &apos;Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Mx-ReqToken,X-Requested-With&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">if ($request_method = &apos;OPTIONS&apos;) &#123;</div><div class="line">        return 204;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>方法三</li>
</ul>
<p>如需要允许用户请求来自*.example.com访问xxx.example2.com域名时，返回头Access-Control-Allow-Origin，具体配置如下</p>
<p>在Nginx配置文件中xxx.example2.com域名的location /下配置以下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">if ( $http_origin ~ http://(.*).example.com)&#123;</div><div class="line">         set $allow_url $http_origin;</div><div class="line">    &#125;</div><div class="line">    #CORS(Cross Orign Resource-Sharing)跨域控制配置</div><div class="line">    #是否允许请求带有验证信息</div><div class="line">    add_header Access-Control-Allow-Credentials true;</div><div class="line">    #允许跨域访问的域名,可以是一个域的列表，也可以是通配符*</div><div class="line">    add_header Access-Control-Allow-Origin $allow_url;</div><div class="line">    #允许脚本访问的返回头</div><div class="line">    add_header Access-Control-Allow-Headers &apos;x-requested-with,content-type,Cache-Control,Pragma,Date,x-timestamp&apos;;</div><div class="line">    #允许使用的请求方法，以逗号隔开</div><div class="line">    add_header Access-Control-Allow-Methods &apos;POST,GET,OPTIONS,PUT,DELETE&apos;;</div><div class="line">    #允许自定义的头部，以逗号隔开,大小写不敏感</div><div class="line">    add_header Access-Control-Expose-Headers &apos;WWW-Authenticate,Server-Authorization&apos;;</div><div class="line">    #P3P支持跨域cookie操作</div><div class="line">    add_header P3P &apos;policyref=&quot;/w3c/p3p.xml&quot;, CP=&quot;NOI DSP PSAa OUR BUS IND ONL UNI COM NAV INT LOC&quot;&apos;;</div></pre></td></tr></table></figure>
<ul>
<li>方法四</li>
</ul>
<p>如需要允许用户请求来自xxx1.example.com或xxx1.example1.com访问xxx.example2.com域名时，返回头Access-Control-Allow-Origin，具体配置如下</p>
<p>在Nginx配置文件中xxx.example2.com域名的location /下配置以下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line"></div><div class="line">    if ( $http_origin ~ .*.(example|example1).com ) &#123;</div><div class="line">    add_header Access-Control-Allow-Origin $http_origin;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="实例三：Nginx跨域配置并支持DELETE-PUT请求"><a href="#实例三：Nginx跨域配置并支持DELETE-PUT请求" class="headerlink" title="实例三：Nginx跨域配置并支持DELETE,PUT请求"></a>实例三：Nginx跨域配置并支持DELETE,PUT请求</h5><p>默认Access-Control-Allow-Origin开启跨域请求只支持GET、HEAD、POST、OPTIONS请求，使用DELETE发起跨域请求时，浏览器出于安全考虑会先发起OPTIONS请求，服务器端接收到的请求方式就变成了OPTIONS，所以引起了服务器的405 Method Not Allowed。</p>
<p>解决方法</p>
<p>首先要对OPTIONS请求进行处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if ($request_method = &apos;OPTIONS&apos;) &#123; </div><div class="line">    add_header Access-Control-Allow-Origin *; </div><div class="line">    add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;</div><div class="line">    #其他头部信息配置，省略...</div><div class="line">    return 204; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当请求方式为OPTIONS时设置Allow的响应头，重新处理这次请求。这样发出请求时第一次是OPTIONS请求，第二次才是DELETE请求。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 完整配置参考</div><div class="line"># 将配置文件的放到对应的server &#123;&#125;里</div><div class="line"></div><div class="line">add_header Access-Control-Allow-Origin *;</div><div class="line"></div><div class="line">location / &#123;</div><div class="line">    if ($request_method = &apos;OPTIONS&apos;) &#123; </div><div class="line">        add_header Access-Control-Allow-Origin *; </div><div class="line">        add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;</div><div class="line">        return 204; </div><div class="line">    &#125;</div><div class="line">    index index.php;</div><div class="line">    try_files $uri @rewriteapp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="实例四：更多配置示例"><a href="#实例四：更多配置示例" class="headerlink" title="实例四：更多配置示例"></a>实例四：更多配置示例</h5><ul>
<li>示例一</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">The following Nginx configuration enables CORS, with support for preflight requests.</div><div class="line"></div><div class="line">#</div><div class="line"># Wide-open CORS config for nginx</div><div class="line">#</div><div class="line">location / &#123;</div><div class="line">     if ($request_method = &apos;OPTIONS&apos;) &#123;</div><div class="line">        add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</div><div class="line">        add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</div><div class="line">        #</div><div class="line">        # Custom headers and headers various browsers *should* be OK with but aren&apos;t</div><div class="line">        #</div><div class="line">        add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</div><div class="line">        #</div><div class="line">        # Tell client that this pre-flight info is valid for 20 days</div><div class="line">        #</div><div class="line">        add_header &apos;Access-Control-Max-Age&apos; 1728000;</div><div class="line">        add_header &apos;Content-Type&apos; &apos;text/plain charset=UTF-8&apos;;</div><div class="line">        add_header &apos;Content-Length&apos; 0;</div><div class="line">        return 204;</div><div class="line">     &#125;</div><div class="line">     if ($request_method = &apos;POST&apos;) &#123;</div><div class="line">        add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</div><div class="line">        add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</div><div class="line">        add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</div><div class="line">     &#125;</div><div class="line">     if ($request_method = &apos;GET&apos;) &#123;</div><div class="line">        add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</div><div class="line">        add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</div><div class="line">        add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>示例二</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">if ($request_method = &apos;OPTIONS&apos;) &#123;  </div><div class="line">    add_header &apos;Access-Control-Allow-Origin&apos; &apos;https://docs.domain.com&apos;;  </div><div class="line">    add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;  </div><div class="line">    add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, PUT, DELETE, PATCH, OPTIONS&apos;;  </div><div class="line">    add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,token&apos;;  </div><div class="line">    return 204;</div><div class="line">&#125;</div><div class="line">if ($request_method = &apos;POST&apos;) &#123;  </div><div class="line">    add_header &apos;Access-Control-Allow-Origin&apos; &apos;https://docs.domain.com&apos;;  </div><div class="line">    add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;  </div><div class="line">    add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, PUT, DELETE, PATCH, OPTIONS&apos;;  </div><div class="line">    add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,token&apos;;  </div><div class="line">&#125;  </div><div class="line">if ($request_method = &apos;GET&apos;) &#123;  </div><div class="line">    add_header &apos;Access-Control-Allow-Origin&apos; &apos;https://docs.domain.com&apos;;  </div><div class="line">    add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;  </div><div class="line">    add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, PUT, DELETE, PATCH, OPTIONS&apos;;  </div><div class="line">    add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,token&apos;;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="其它技巧"><a href="#其它技巧" class="headerlink" title="其它技巧"></a>其它技巧</h3><h4 id="Apache中启用CORS"><a href="#Apache中启用CORS" class="headerlink" title="Apache中启用CORS"></a>Apache中启用CORS</h4><p>在httpd配置或.htaccess文件中添加如下语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SetEnvIf Origin &quot;^(.*\.example\.com)$&quot; ORIGIN_SUB_DOMAIN=$1  </div><div class="line">Header set Access-Control-Allow-Origin &quot;%&#123;ORIGIN_SUB_DOMAIN&#125;e&quot; env=ORIGIN_SUB_DOMAIN</div></pre></td></tr></table></figure>
<h4 id="PHP中启用CORS"><a href="#PHP中启用CORS" class="headerlink" title="PHP中启用CORS"></a>PHP中启用CORS</h4><p>通过在服务端设置Access-Control-Allow-Origin响应头</p>
<ul>
<li>允许所有来源访问</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">header(&quot;Access-Control-Allow-Origin: *&quot;);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<ul>
<li>允许来自特定源的访问</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">header(&apos;Access-Control-Allow-Origin: &apos;.$_SERVER[&apos;HTTP_ORIGIN&apos;]);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<ul>
<li>配置多个访问源</li>
</ul>
<p>由于浏览器实现只支持了单个origin、*、null，如果要配置多个访问源，可以在代码中处理如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$allowed_origins   = array(  </div><div class="line">                            &quot;http://www.example.com&quot;   ,  </div><div class="line">                            &quot;http://app.example.com&quot;  ,  </div><div class="line">                            &quot;http://cms.example.com&quot;  ,  </div><div class="line">                          );  </div><div class="line">if (in_array($_SERVER[&apos;HTTP_ORIGIN&apos;], $allowed_origins))&#123;    </div><div class="line">    @header(&quot;Access-Control-Allow-Origin: &quot; . $_SERVER[&apos;HTTP_ORIGIN&apos;]);  </div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h4 id="HTML中启用CORS"><a href="#HTML中启用CORS" class="headerlink" title="HTML中启用CORS"></a>HTML中启用CORS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;Access-Control-Allow-Origin&quot; content=&quot;*&quot;&gt;</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://blog.csdn.net/oyzl68/article/details/18741057" target="_blank" rel="external">http://blog.csdn.net/oyzl68/article/details/18741057</a><br><a href="http://www.webyang.net/Html/web/article_135.html" target="_blank" rel="external">http://www.webyang.net/Html/web/article_135.html</a><br><a href="http://www.ttlsa.com/nginx/how-to-allow-cross-domain-ajax-requests-on-nginx/" target="_blank" rel="external">http://www.ttlsa.com/nginx/how-to-allow-cross-domain-ajax-requests-on-nginx/</a><br><a href="http://www.voidcn.com/blog/lvnian/article/p-5978475.html" target="_blank" rel="external">http://www.voidcn.com/blog/lvnian/article/p-5978475.html</a><br><a href="http://to-u.xyz/2016/06/30/nginx-cors/" target="_blank" rel="external">http://to-u.xyz/2016/06/30/nginx-cors/</a><br><a href="http://coderq.github.io/2016/05/13/cross-domain/" target="_blank" rel="external">http://coderq.github.io/2016/05/13/cross-domain/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是CORS&quot;&gt;&lt;a href=&quot;#什么是CORS&quot; class=&quot;headerlink&quot; title=&quot;什么是CORS&quot;&gt;&lt;/a&gt;什么是CORS&lt;/h3&gt;&lt;p&gt;CORS是一个W3C标准，全称是跨域资源共享(Cross-origin resource sharing)。它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。&lt;/p&gt;
&lt;p&gt;当前几乎所有的浏览器(Internet Explorer 8+， Firefox 3.5+， Safari 4+和 Chrome 3+)都可通过名为跨域资源共享(Cross-Origin Resource Sharing)的协议支持AJAX跨域调用。&lt;/p&gt;
&lt;p&gt;Chrome,Firefox,Opera,Safari都使用的是XMLHttpRequest2对象，IE使用XDomainRequest。&lt;/p&gt;
&lt;p&gt;简单来说就是跨域的目标服务器要返回一系列的Headers，通过这些Headers来控制是否同意跨域。跨域资源共享(CORS)也是未来的跨域问题的标准解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://www.hi-linux.com/categories/Nginx/"/>
    
    
      <category term="Linux" scheme="http://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Nginx" scheme="http://www.hi-linux.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>用Nginx反向代理机制解决前端跨域问题</title>
    <link href="http://www.hi-linux.com/posts/41743.html"/>
    <id>http://www.hi-linux.com/posts/41743.html</id>
    <published>2016-08-24T01:00:00.000Z</published>
    <updated>2017-01-22T10:13:02.042Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h3><p>跨域请求针对浏览器的同源策略(Same-Origin Policy)而言，指一个网站主动请求另外一个网站的资源(图片、javascript、视频等)。</p>
<p>同源策略要求网站只能有限制的访问外部网站的资源，不合法的请求会被拦截。网站的源由协议、域名、端口三部分组成，有一部分不同就被视为不同源，两个不同的域名即便指向同一个ip地址也是跨域的。网站通过AJAX(发送XMLHttpRequest到其他网站)请求资源是典型的跨域请求，需要外部网站许可才能访问。</p>
<p>同源策略的目的是防止黑客做一些做奸犯科的勾当。比如，一个银行的一个应用允许用户上传网页，如果没有同源策略黑客可以编写一个登陆表单提交到自己的服务器上，得到一个看上去相当高大上的页面。黑客把这个页面通过邮件等发给用户，用户误认为这是某银行的主网页进行登陆，就会泄露自己的用户数据。而因为浏览器的同源策略，黑客无法收到表单数据。</p>
<a id="more"></a>
<p>更直观的跨域情况见下表</p>
<p><img src="http://www.hi-linux.com/img/linux/nginx_sop.png" alt=""></p>
<h3 id="跨域常见解决方案"><a href="#跨域常见解决方案" class="headerlink" title="跨域常见解决方案"></a>跨域常见解决方案</h3><p>跨域解决方案有多种，大多是利用JS Hack。</p>
<ul>
<li>document.domain+iframe的设置</li>
<li>动态创建script</li>
<li>利用iframe和location.hash</li>
<li>window.name实现的跨域数据传输</li>
<li>使用HTML5 postMessage</li>
<li>利用flash</li>
<li>Jquery JSONP</li>
<li>跨域资源共享(CORS)</li>
<li>Nginx反向代理</li>
</ul>
<h3 id="Nginx反向代理实现跨域"><a href="#Nginx反向代理实现跨域" class="headerlink" title="Nginx反向代理实现跨域"></a>Nginx反向代理实现跨域</h3><p>本文介绍的是通过Nginx反向代理解决跨域，这也是最简单实现跨域的方法。只需要修改Nginx的配置即可解决跨域问题，支持所有浏览器，支持Session，不需要修改任何代码，并且不会影响服务器性能。</p>
<p>我们只需要配置Nginx，在一个服务器上配置多个前缀来转发http/https请求到多个真实的服务器即可。这样这个服务器上所有URL都是相同的域名、协议和端口。因此，对于浏览器来说这些URL都是同源的，没有跨域限制。而实际上这些URL实际上由物理服务器提供服务。这些服务器内的JavaScript可以跨域调用所有这些服务器上的URL。</p>
<p>简单说，Nginx服务器欺骗了浏览器，让它认为这是同源调用，从而解决了浏览器的跨域问题。</p>
<p>下面给出一个Nginx支持跨域的例子，进行具体说明。</p>
<blockquote>
<p>服务器A(<code>域名:www.hi-linux.com</code>)中有一个页面，想请求服务器B(<code>域名:www.imike.me</code>)中的api地址(<code>http://www.imike.me/api</code>)获取数据。</p>
</blockquote>
<ul>
<li>Nginx配置</li>
</ul>
<p><strong>修改配置文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line"></div><div class="line">    listen 80;</div><div class="line">    server_name www.hi-linux.com;</div><div class="line">    root /var/www/html;</div><div class="line">    autoindex off;</div><div class="line">    index index.html index.htm index.php;</div><div class="line"></div><div class="line">    # 将www.hi-linux.com/api的所有请求反向代理到www.imike.me</div><div class="line">	</div><div class="line">    location ~ ^/api/ &#123;</div><div class="line">        proxy_pass http://www.imike.me;</div><div class="line">        proxy_redirect          off; </div><div class="line">        proxy_set_header        X-Real-IP       $remote_addr; </div><div class="line">        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for; </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ~ /\.ht &#123;</div><div class="line">       deny  all;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>重启Nginx</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/nginx restart</div></pre></td></tr></table></figure>
<ul>
<li>修改JS代码中的地址</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function getID()&#123; </div><div class="line">		jQuery.get(&quot;http://www.hi-linux.com/api/GetData?id=1”, </div><div class="line">		  function (data, textStatus)&#123; </div><div class="line">            this; // 在这里this指向的是Ajax请求的选项配置信息 </div><div class="line">            if(textStatus==&quot;success&quot;)&#123; </div><div class="line">            jQuery(&quot;#CountNum&quot;).html(data); </div><div class="line">            &#125; </div><div class="line">          &#125;);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试</li>
</ul>
<p>访问<code>http://www.hi-linux.com/api/</code>下的URL都会被代理到<code>http://www.imike.me/api/</code>下。</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://www.jbxue.com/article/2187.html" target="_blank" rel="external">http://www.jbxue.com/article/2187.html</a><br><a href="http://blog.jobbole.com/101318/" target="_blank" rel="external">http://blog.jobbole.com/101318/</a><br><a href="http://seanlook.com/2015/05/17/nginx-location-rewrite/" target="_blank" rel="external">http://seanlook.com/2015/05/17/nginx-location-rewrite/</a><br><a href="http://jooben.blog.51cto.com/253727/438335" target="_blank" rel="external">http://jooben.blog.51cto.com/253727/438335</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是跨域&quot;&gt;&lt;a href=&quot;#什么是跨域&quot; class=&quot;headerlink&quot; title=&quot;什么是跨域&quot;&gt;&lt;/a&gt;什么是跨域&lt;/h3&gt;&lt;p&gt;跨域请求针对浏览器的同源策略(Same-Origin Policy)而言，指一个网站主动请求另外一个网站的资源(图片、javascript、视频等)。&lt;/p&gt;
&lt;p&gt;同源策略要求网站只能有限制的访问外部网站的资源，不合法的请求会被拦截。网站的源由协议、域名、端口三部分组成，有一部分不同就被视为不同源，两个不同的域名即便指向同一个ip地址也是跨域的。网站通过AJAX(发送XMLHttpRequest到其他网站)请求资源是典型的跨域请求，需要外部网站许可才能访问。&lt;/p&gt;
&lt;p&gt;同源策略的目的是防止黑客做一些做奸犯科的勾当。比如，一个银行的一个应用允许用户上传网页，如果没有同源策略黑客可以编写一个登陆表单提交到自己的服务器上，得到一个看上去相当高大上的页面。黑客把这个页面通过邮件等发给用户，用户误认为这是某银行的主网页进行登陆，就会泄露自己的用户数据。而因为浏览器的同源策略，黑客无法收到表单数据。&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://www.hi-linux.com/categories/Nginx/"/>
    
    
      <category term="Linux" scheme="http://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Nginx" scheme="http://www.hi-linux.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>利用Dnsmasq部署DHCP服务</title>
    <link href="http://www.hi-linux.com/posts/17088.html"/>
    <id>http://www.hi-linux.com/posts/17088.html</id>
    <published>2016-08-01T01:00:00.000Z</published>
    <updated>2017-01-22T10:13:02.042Z</updated>
    
    <content type="html"><![CDATA[<p>DNSmasq是一个小巧且方便地用于配置DNS和DHCP的工具，适用于小型网络。它提供了DNS功能和可选择的DHCP功能可以取代dhcpd(DHCPD服务配置)和Bind等服务。DNSmasq配置起来更简单，更适用于虚拟化和大数据环境的部署。</p>
<p>在[<a href="http://hi-linux.com/2016/07/29/%E5%88%A9%E7%94%A8Dnsmasq%E9%83%A8%E7%BD%B2DNS%E6%9C%8D%E5%8A%A1/" target="_blank" rel="external">利用Dnsmasq部署DNS服务</a>]一文中介绍了如何用DNSmasq进行DNS服务。这一篇文章主要介绍用DNSmasq部署DHCP服务。DNSmasq所提供的DHCP服务也是和dhcpd十分相近的。如同共动态地址分配，可以通过MAC地址预先指定静态的IP地址给特定的主机等等。</p>
<a id="more"></a>
<p>使用DNSmasq提供DHCP服务也是相当简单的事情。配置文件<code>/etc/dnsmasq.conf</code>中的注释已经给出了非常详细的解释，其中一些关键的配置如下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/dnsmasq.conf</div><div class="line"></div><div class="line"># 服务监听的网络接口地址</div><div class="line"># If you want dnsmasq to listen for DHCP and DNS requests only on</div><div class="line"># specified interfaces (and the loopback) give the name of the</div><div class="line"># interface (eg eth0) here.</div><div class="line"># Repeat the line for more than one interface.</div><div class="line">#interface=</div><div class="line"># Or you can specify which interface _not_ to listen on</div><div class="line">#except-interface=</div><div class="line"># Or which to listen on by address (remember to include 127.0.0.1 if</div><div class="line"># you use this.)</div><div class="line">listen-address=192.168.1.132,127.0.0.1</div><div class="line"></div><div class="line"># dhcp动态分配的地址范围,自动分配50-150ip段，有效期48小时</div><div class="line"># Uncomment this to enable the integrated DHCP server, you need</div><div class="line"># to supply the range of addresses available for lease and optionally a lease time</div><div class="line">dhcp-range=192.168.1.50,192.168.1.150,48h</div><div class="line"></div><div class="line"># dhcp服务的静态绑定</div><div class="line"># dhcp-host的配置方式有很多种，这里使用的是：[client端MAC地址] + [分配的IP]+ [主机名]</div><div class="line"># Always set the name and ipaddr of the host with hardware address</div><div class="line"># dhcp-host=00:0C:29:5E:F2:6F,192.168.1.201</div><div class="line"># dhcp-host=00:0C:29:5E:F2:6F,192.168.1.201,infinite	无限租期</div><div class="line">dhcp-host=00:0C:29:5E:F2:6F,192.168.1.201,os02</div><div class="line">dhcp-host=00:0C:29:15:63:CF,192.168.1.202,os03</div><div class="line"></div><div class="line"># dhcp服务的其它几种绑定方式</div><div class="line"></div><div class="line"># Always allocate the host with ethernet address 11:22:33:44:55:66</div><div class="line"># The IP address 192.168.0.60</div><div class="line"># 绑定网卡地址对应ip地址，用的是host的方式，类似在hosts文件写一个host name 对应一个ip，所以这个不是arp绑定，要区分。</div><div class="line"># dhcp-host=11:22:33:44:55:66,192.168.1.60</div><div class="line"></div><div class="line"># Always set the name of the host with hardware address</div><div class="line"># 11:22:33:44:55:66 to be &quot;fred&quot;</div><div class="line"># 绑定mac地址对应一个host name ，我个人觉得绑定mac对应ip就足够了，绑定对应名字比较少见</div><div class="line"># dhcp-host=11:22:33:44:55:66,fred</div><div class="line"></div><div class="line"># Always give the host with ethernet address 11:22:33:44:55:66</div><div class="line"># the name fred and IP address 192.168.0.60 and lease time 45 minutes</div><div class="line"># 这个是组合版，绑定某个mac对应fred名字，然后加上一个ip分配，并设置租约，这个只能说是灵活配置的参考，没啥实际意义</div><div class="line"># dhcp-host=11:22:33:44:55:66,fred,192.168.0.60,45m</div><div class="line"></div><div class="line"># Give a host with ethernet address 11:22:33:44:55:66 or</div><div class="line"># 12:34:56:78:90:12 the IP address 192.168.0.60. Dnsmasq will assume</div><div class="line"># that these two ethernet interfaces will never be in use at the same</div><div class="line"># time, and give the IP address to the second, even if it is already</div><div class="line"># in use by the first. Useful for laptops with wired and wireless</div><div class="line"># addresses.</div><div class="line"># 绑定一个ip对应多mac地址，用途场景存在于实验室和无线网络，我想只是为了让2块网卡用同一个ip这样单纯而纯洁的需求而已[不常用]</div><div class="line"># dhcp-host=11:22:33:44:55:66,12:34:56:78:90:12,192.168.0.60</div><div class="line"></div><div class="line"># Give the machine which says its name is &quot;bert&quot; IP address</div><div class="line"># 192.168.0.70 and an infinite lease</div><div class="line"># 绑定名字对应ip，并且给了一个新参数，无限租约</div><div class="line"># dhcp-host=bert,192.168.0.70,infinite</div><div class="line"></div><div class="line"># Always give the host with client identifier 01:02:02:04</div><div class="line"># the IP address 192.168.0.60</div><div class="line"># 给予一个特殊标识符对应ip，用途不明</div><div class="line"># dhcp-host=id:01:02:02:04,192.168.0.60</div><div class="line"></div><div class="line"># Always give the host with client identifier &quot;marjorie&quot;</div><div class="line"># the IP address 192.168.0.60</div><div class="line"># 跟上一条类似，只是标识符还支持普通字符字串</div><div class="line"># dhcp-host=id:marjorie,192.168.0.60</div><div class="line"></div><div class="line"># 通过/etc/hosts来分配对应的hostname</div><div class="line"># Enable the address given for &quot;judge&quot; in /etc/hosts</div><div class="line"># to be given to a machine presenting the name &quot;judge&quot; when</div><div class="line"># it asks for a DHCP lease.</div><div class="line"># dhcp-host=judge</div><div class="line"></div><div class="line"># 忽略下面MAC地址的DHCP请求,不分配ip</div><div class="line"># Never offer DHCP service to a machine whose ethernet</div><div class="line"># address is 11:22:33:44:55:66</div><div class="line">#dhcp-host=11:22:33:44:55:66,ignore</div><div class="line"></div><div class="line"># If this line is uncommented, dnsmasq will read /etc/ethers and act</div><div class="line"># on the ethernet-address/IP pairs found there just as if they had</div><div class="line"># been given as --dhcp-host options. Useful if you keep</div><div class="line"># MAC-address/host mappings there for other purposes.</div><div class="line"># 使用额外的文件代替主配置文件来处理dhcp-host的匹配，这个主要为了方便管理，将所有需要用到的dhcp-host配置都放进/etc/ethers</div><div class="line"></div><div class="line"># 设置默认租期</div><div class="line"># Set the limit on DHCP leases, the default is 150</div><div class="line">#dhcp-lease-max=150</div><div class="line"></div><div class="line"># 租期保存在下面文件</div><div class="line"># The DHCP server needs somewhere on disk to keep its lease database.</div><div class="line"># This defaults to a sane location, but if you want to change it, use</div><div class="line"># the line below.</div><div class="line">#dhcp-leasefile=/var/lib/dnsmasq/dnsmasq.leases</div><div class="line"></div><div class="line"># Set this (and domain: see below) if you want to have a domain</div><div class="line"># automatically added to simple names in a hosts-file.</div><div class="line"># 自动给hosts的域名增加一个简单的名字，搭配下面的domain用的[不常用]</div><div class="line">expand-hosts</div><div class="line"></div><div class="line"># dhcp所在的域</div><div class="line"># Set the domain for dnsmasq. this is optional, but if it is set, it</div><div class="line"># does the following things.</div><div class="line"># 1) Allows DHCP hosts to have fully qualified domain names, as long</div><div class="line">#     as the domain part matches this setting.</div><div class="line"># 2) Sets the &quot;domain&quot; DHCP option thereby potentially setting the</div><div class="line">#    domain of all systems configured by DHCP</div><div class="line"># 3) Provides the domain part for &quot;expand-hosts&quot;</div><div class="line">domain=hi-linux.com</div><div class="line"></div><div class="line"># 设置默认路由出口</div><div class="line"># dhcp-option遵循RFC 2132（Options and BOOTP Vendor Extensions),可以通过dnsmasq --help dhcp来查看具体的配置</div><div class="line"># 很多高级的配置，如iSCSI连接配置等同样可以由RFC 2132定义的dhcp-option中给出。</div><div class="line"># option 3为default route</div><div class="line"># Override the default route supplied by dnsmasq, which assumes the</div><div class="line"># router is the same machine as the one running dnsmasq.</div><div class="line">dhcp-option=3,192.168.1.1</div><div class="line"></div><div class="line"># 设置NTP Server.这是使用option name而非选项名来进行设置</div><div class="line"># Set the NTP time server addresses to 192.168.0.4 and 10.10.0.5</div><div class="line">#dhcp-option=option:ntp-server,192.168.0.4,10.10.0.5</div></pre></td></tr></table></figure>
<p><em>注意:当为某一MAC地址同时静态分配主机名和IP时，如果写到两条dhcp-host选项里(如下所示)，则只会生效后面的一条。正确的选项写法(如上配置)。</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dhcp-host=00:0C:29:5E:F2:6F,192.168.1.201</div><div class="line">dhcp-host=00:0C:29:5E:F2:6F,os02</div></pre></td></tr></table></figure>
<p><strong>下面在客户端进行测试</strong></p>
<ul>
<li>重新启动dnsmasq服务(server的IP为192.168.1.132)</li>
</ul>
<p>由于之前测试中客户端网卡已经申请了DHCP租期。所以这里需要修改租期文件，让客户端重新获得IP和hostname。</p>
<p>DNSmasq服务的租期信息存储在<code>/var/lib/dnsmasq/dnsmasq.leases</code>这个文件。如果这个租约需要被更快地移除，您可以停止DNSmasq服务，从dnsmasq.leases文件中移除这个租约，然后再启动这个服务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ /etc/init.d/dnsmasq stop</div><div class="line">$ vim /var/lib/dnsmasq/dnsmasq.leases</div><div class="line"># 删除对应的租约信息</div><div class="line">1400240493 00:0c:29:5e:f2:6f 192.168.1.143 os02 *</div><div class="line">1400240498 00:0c:29:15:63:cf 192.168.1.52 os01 *</div><div class="line">$ /etc/init.d/dnsmasq restart</div></pre></td></tr></table></figure>
<ul>
<li>确保网络接口配置使用dhcp方式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/sysconfig/network-scripts/ifcfg-eth1</div><div class="line">DEVICE=&quot;eth1&quot;</div><div class="line">BOOTPROTO=dhcp</div><div class="line">IPV6INIT=no</div><div class="line">NM_CONTROLLED=no</div><div class="line">ONBOOT=&quot;yes&quot;</div><div class="line">TYPE=&quot;Ethernet&quot;</div></pre></td></tr></table></figure>
<ul>
<li>重启网络服务</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ service network restart</div><div class="line">Shutting down interface eth0:                              [  OK  ]</div><div class="line">Shutting down loopback interface:                          [  OK  ]</div><div class="line">Bringing up loopback interface:                            [  OK  ]</div><div class="line">Bringing up interface eth0:  </div><div class="line">Determining IP information for eth1... done.               [  OK  ]</div></pre></td></tr></table></figure>
<ul>
<li>检查IP地址                                                           </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ ifconfig</div><div class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:15:63:CF  </div><div class="line">          inet addr:192.168.1.202  Bcast:192.168.1.255  Mask:255.255.255.0</div><div class="line">          inet6 addr: fe80::20c:29ff:fe15:63d9/64 Scope:Link</div><div class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</div><div class="line">          RX packets:251 errors:0 dropped:0 overruns:0 frame:0</div><div class="line">          TX packets:43 errors:0 dropped:0 overruns:0 carrier:0</div><div class="line">          collisions:0 txqueuelen:1000 </div><div class="line">          RX bytes:36077 (35.2 KiB)  TX bytes:4598 (4.4 KiB)</div><div class="line">......</div></pre></td></tr></table></figure>
<ul>
<li>检查默认路由</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ route -n</div><div class="line">Kernel IP routing table</div><div class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</div><div class="line">192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 eth1</div><div class="line">169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth1</div><div class="line">0.0.0.0         192.168.1.1     0.0.0.0         UG    0      0        0 eth1</div></pre></td></tr></table></figure>
<p><strong>参考文档</strong></p>
<p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://debugo.com/dnsmasq/" target="_blank" rel="external">http://debugo.com/dnsmasq/</a><br><a href="http://hzcsky.blog.51cto.com/1560073/476324" target="_blank" rel="external">http://hzcsky.blog.51cto.com/1560073/476324</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DNSmasq是一个小巧且方便地用于配置DNS和DHCP的工具，适用于小型网络。它提供了DNS功能和可选择的DHCP功能可以取代dhcpd(DHCPD服务配置)和Bind等服务。DNSmasq配置起来更简单，更适用于虚拟化和大数据环境的部署。&lt;/p&gt;
&lt;p&gt;在[&lt;a href=&quot;http://hi-linux.com/2016/07/29/%E5%88%A9%E7%94%A8Dnsmasq%E9%83%A8%E7%BD%B2DNS%E6%9C%8D%E5%8A%A1/&quot;&gt;利用Dnsmasq部署DNS服务&lt;/a&gt;]一文中介绍了如何用DNSmasq进行DNS服务。这一篇文章主要介绍用DNSmasq部署DHCP服务。DNSmasq所提供的DHCP服务也是和dhcpd十分相近的。如同共动态地址分配，可以通过MAC地址预先指定静态的IP地址给特定的主机等等。&lt;/p&gt;
    
    </summary>
    
      <category term="DHCP" scheme="http://www.hi-linux.com/categories/DHCP/"/>
    
    
      <category term="Linux" scheme="http://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Dnsmasq" scheme="http://www.hi-linux.com/tags/Dnsmasq/"/>
    
  </entry>
  
  <entry>
    <title>利用Dnsmasq部署DNS服务</title>
    <link href="http://www.hi-linux.com/posts/30947.html"/>
    <id>http://www.hi-linux.com/posts/30947.html</id>
    <published>2016-07-29T01:00:00.000Z</published>
    <updated>2017-01-22T10:13:02.042Z</updated>
    
    <content type="html"><![CDATA[<p>Dnsmasq提供DNS缓存和DHCP服务、Tftp服务功能。作为域名解析服务器(DNS)，Dnsmasq可以通过缓存DNS请求来提高对访问过的网址的连接速度。作为DHCP服务器，Dnsmasq可以为局域网电脑提供内网ip地址和路由。DNS和DHCP两个功能可以同时或分别单独实现。Dnsmasq轻量且易配置，适用于个人用户或少于50台主机的网络。此外它还自带了一个PXE服务器。</p>
<p><strong>Dnsmasq工作原理</strong></p>
<p>当接受到一个DNS请求时，Dnsmasq首先会查找<code>/etc/hosts</code>这个文件，然后查找<code>/etc/resolv.con</code>f中定义的外部DNS。所以说Dnsmasq是一个很不错的外部DNS中继。</p>
<p>配置Dnsmasq为DNS缓存服务器，同时在<code>/etc/hosts</code>文件中加入本地内网解析，这样一来每当内网机器查询时就会优先查询hosts文件，这就等于将<code>/etc/hosts</code>共享给全内网机器使用，从而解决内网机器互相识别的问题。相比逐台机器编辑hosts文件或者添加Bind DNS记录，仅编辑一个hosts文件，这简直太容易了。</p>
<a id="more"></a>
<h3 id="安装Dnsmasq"><a href="#安装Dnsmasq" class="headerlink" title="安装Dnsmasq"></a>安装Dnsmasq</h3><ul>
<li>Ubuntu/Debian</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apt-get install dnsmasq</div></pre></td></tr></table></figure>
<ul>
<li>Centos/RHEL</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install dnsmasq</div></pre></td></tr></table></figure>
<h3 id="配置Dnsmasq"><a href="#配置Dnsmasq" class="headerlink" title="配置Dnsmasq"></a>配置Dnsmasq</h3><p>Dnsmasq处理DNS设置与BIND等其他DNS服务有所不同。所有的配置都在一个文件中完成<code>/etc/dnsmasq.conf</code>。默认情况下dnsmasq.conf中只开启了最后include项，可以在<code>/etc/dnsmasq.d</code>中自己写任意名字的配置文件。</p>
<h4 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h4><p>Dnsmasq配置文件是<code>/etc/dnsmasq.conf</code>，下面对Dnsmasq中和DNS相关的配置项进行说明。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line">用指定的端口代替默认的DNS 53端口，如果设置为0，则完全禁止DNS功能，只使用dhcp服务</div><div class="line">port=5353</div><div class="line"></div><div class="line">以下两个参数告诉Dnsmasq过滤一些查询：1.哪些公共DNS没有回答 2.哪些root根域不可达。</div><div class="line"></div><div class="line">从不转发格式错误的域名</div><div class="line">#domain-needed</div><div class="line"></div><div class="line">从不转发不在路由地址中的域名</div><div class="line">#bogus-priv</div><div class="line"></div><div class="line">resolv-file配置Dnsmasq额外的向流的DNS服务器，如果不开启就使用linux主机默认的/etc/resolv.conf里的nameserver，通过下面的选项指定其他文件。</div><div class="line">resolv-file=/etc/dnsmasq.d/upstream_dns.conf</div><div class="line"></div><div class="line">默认情况下Dnsmasq会发送查询到它的任何上游DNS服务器上，如果取消注释，则Dnsmasq则会严格按照/etc/resolv.conf中的DNS Server顺序进行查询。</div><div class="line">#strict-order</div><div class="line"></div><div class="line">以下两个参数控制是否通过/etc/resolv.conf确定上游服务器，是否检测/etc/resolv.conf的变化，则取消注释。 </div><div class="line"></div><div class="line">如果你不想Dnsmasq读取/etc/resolv.conf文件或者其他文件，获得它的servers</div><div class="line"># If you don&apos;t want dnsmasq to read /etc/resolv.conf or any other</div><div class="line"># file, getting its servers from this file instead (see below), then</div><div class="line"># uncomment this.</div><div class="line">#no-resolv</div><div class="line"></div><div class="line">如果你不允许Dnsmasq通过轮询/etc/resolv.conf或者其他文件来获取配置的改变，则取消注释。 </div><div class="line">#no-poll</div><div class="line"></div><div class="line">增加一个name server，一般用于内网域名</div><div class="line">#server=/localnet/192.168.0.1</div><div class="line"></div><div class="line">设置一个反向解析，所有192.168.3.0/24的地址都到10.1.2.3去解析</div><div class="line">#server=/3.168.192.in-addr.arpa/10.1.2.3</div><div class="line"></div><div class="line">增加一个本地域名，会在/etc/hosts中进行查询</div><div class="line">#local=/localnet/</div><div class="line"></div><div class="line">增加一个域名，强制解析到你指定的地址上</div><div class="line">#address=/double-click.net/127.0.0.1</div><div class="line"></div><div class="line">同上，还支持ipv6</div><div class="line">#address=/www.thekelleys.org.uk/fe80::20d:60ff:fe36:f83</div><div class="line"></div><div class="line">增加查询yahoo google和它们的子域名到vpn、search查找</div><div class="line"># Add the IPs of all queries to yahoo.com, google.com, and their</div><div class="line"># subdomains to the vpn and search ipsets:</div><div class="line">#ipset=/yahoo.com/google.com/vpn,search</div><div class="line"></div><div class="line">你还可以控制Dnsmasq和Server之间的查询从哪个网卡出去</div><div class="line"># server=10.1.2.3@eth1</div><div class="line"></div><div class="line">指定源地址携带10.1.2.3地址和192.168.1.1的55端口进行通讯</div><div class="line"># and this sets the source (ie local) address used to talk to</div><div class="line"># 10.1.2.3 to 192.168.1.1 port 55 (there must be a interface with that</div><div class="line"># IP on the machine, obviously).</div><div class="line"># server=10.1.2.3@192.168.1.1#55</div><div class="line"></div><div class="line">改变Dnsmasq默认的uid和gid</div><div class="line">#user=</div><div class="line">#group=</div><div class="line"></div><div class="line">如果你想Dnsmasq监听某个端口为dhcp、dns提供服务</div><div class="line">#interface=</div><div class="line"></div><div class="line">你还可以指定哪个端口你不想监听</div><div class="line">#except-interface=</div><div class="line"></div><div class="line">设置想监听的地址，如果你本机要使用写上127.0.0.1。</div><div class="line">#listen-address=</div><div class="line"></div><div class="line"></div><div class="line">如果你想在某个端口只提供dns服务，则可以进行配置禁止dhcp服务</div><div class="line">#no-dhcp-interface=</div><div class="line"></div><div class="line"># On systems which support it, dnsmasq binds the wildcard address,</div><div class="line"># even when it is listening on only some interfaces. It then discards</div><div class="line"># requests that it shouldn&apos;t reply to. This has the advantage of</div><div class="line"># working even when interfaces come and go and change address. If you</div><div class="line"># want dnsmasq to really bind only the interfaces it is listening on,</div><div class="line"># uncomment this option. About the only time you may need this is when</div><div class="line"># running another nameserver on the same machine.</div><div class="line">#bind-interfaces</div><div class="line"></div><div class="line">如果你不想使用/etc/hosts，则取消下面的注释</div><div class="line">#no-hosts</div><div class="line"></div><div class="line">如果你项读取其他类似/etc/hosts文件，则进行配置</div><div class="line">addn-hosts=/etc/banner_add_hosts</div><div class="line"></div><div class="line">自动的给hosts中的name增加一个域名</div><div class="line">#expand-hosts</div><div class="line"></div><div class="line">给dhcp服务赋予一个域名</div><div class="line">#domain=thekelleys.org.uk</div><div class="line"></div><div class="line">给dhcp的一个子域赋予一个不同的域名</div><div class="line">#domain=wireless.thekelleys.org.uk,192.168.2.0/24</div><div class="line"></div><div class="line">同上，不过子域是一个范围</div><div class="line">#domain=reserved.thekelleys.org.uk,192.68.3.100,192.168.3.200</div><div class="line"></div><div class="line">dhcp分发ip的范围，以及每个ip的租约时间</div><div class="line">#dhcp-range=192.168.0.50,192.168.0.150,12h</div><div class="line"></div><div class="line">同上，不过给出了掩码</div><div class="line">#dhcp-range=192.168.0.50,192.168.0.150,255.255.255.0,12h</div><div class="line"></div><div class="line">自动加载conf-dir目录下的配置文件</div><div class="line">conf-dir=/etc/dnsmasq.d</div><div class="line">  </div><div class="line">设置dns缓存大小,默认为150条</div><div class="line">cache-size=150</div></pre></td></tr></table></figure>
<h4 id="配置实例"><a href="#配置实例" class="headerlink" title="配置实例"></a>配置实例</h4><h5 id="配置上游服务器地址"><a href="#配置上游服务器地址" class="headerlink" title="配置上游服务器地址"></a>配置上游服务器地址</h5><p>resolv-file配置Dnsmasq额外的上游的DNS服务器，如果不开启就使用Linux主机默认的<code>/etc/resolv.conf</code>里的nameserver。</p>
<ul>
<li>通过下面的选项指定其他文件来管理上游的DNS服务器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/dnsmasq.conf</div><div class="line"></div><div class="line">resolv-file=/etc/resolv.dnsmasq.conf</div></pre></td></tr></table></figure>
<ul>
<li>在指定文件中增加转发DNS的地址</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/resolv.dnsmasq.conf</div><div class="line"></div><div class="line">nameserver 8.8.8.8</div><div class="line">nameserver 8.8.4.4</div></pre></td></tr></table></figure>
<h5 id="本地启用Dnsmasq解析"><a href="#本地启用Dnsmasq解析" class="headerlink" title="本地启用Dnsmasq解析"></a>本地启用Dnsmasq解析</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/resolv.conf</div><div class="line"></div><div class="line">nameserver 127.0.0.1</div></pre></td></tr></table></figure>
<h5 id="添加解析记录"><a href="#添加解析记录" class="headerlink" title="添加解析记录"></a>添加解析记录</h5><ul>
<li>使用系统默认hosts</li>
</ul>
<p>编辑hosts文件,简单列举一下格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/hosts</div><div class="line"></div><div class="line">127.0.0.1  localhost </div><div class="line">192.168.101.107   web01.mike.com web01</div><div class="line">192.168.101.107   web02.mike.com web02</div></pre></td></tr></table></figure>
<p>hosts文件的强大之处还在于能够劫持解析，譬如mirror.centos.org是CentOS仓库所在，几乎是机器正常必访问一个域名，我将它解析成一个内网地址，搭建一个内网镜像站，不仅内网机器也可以及时得到安全更新，每月还可以节省很多流量。</p>
<ul>
<li>使用自定义hosts文件</li>
</ul>
<p>修改配置，增加自定义hosts文件位置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/dnsmasq.conf</div><div class="line"></div><div class="line">addn-hosts=/etc/dnsmasq.hosts</div></pre></td></tr></table></figure>
<p>在/etc/dnsmasq.hosts文件中添加DNS记录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/dnsmasq.hosts</div><div class="line"></div><div class="line">192.168.101.107   web01.mike.com    web01 </div><div class="line">192.168.101.107   web02.mike.com    web02</div></pre></td></tr></table></figure>
<ul>
<li>使用自定义conf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/dnsmasq.d/address.conf</div><div class="line"></div><div class="line"># 指定dnsmasq默认查询的上游服务器，此处以Google Public DNS为例。</div><div class="line">server=8.8.8.8</div><div class="line">server=8.8.4.4</div><div class="line"></div><div class="line"># 把所有.cn的域名全部通过114.114.114.114这台国内DNS服务器来解析</div><div class="line">server=/cn/114.114.114.114</div><div class="line"></div><div class="line"># 给*.apple.com和taobao.com使用专用的DNS</div><div class="line">server=/taobao.com/223.5.5.5</div><div class="line">server=/.apple.com/223.5.5.5</div><div class="line"></div><div class="line"># 把www.hi-linux.com解析到特定的IP</div><div class="line">address=/www.hi-linux.com/192.168.101.107</div><div class="line"></div><div class="line">在这里hi-linux.com相当于*.mike.com泛解析</div><div class="line">address=/hi-linux.com/192.168.101.107</div></pre></td></tr></table></figure>
<p>注：也可以直接添加到/etc/dnsmasq.conf中,不过/etc/dnsmasq.d/*.conf的优先级大于/etc/dnsmasq.conf。</p>
<h3 id="修改iptables配置"><a href="#修改iptables配置" class="headerlink" title="修改iptables配置"></a>修改iptables配置</h3><ul>
<li>允许本机的53端口可对外访问</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ iptables -A INPUT -p udp -m udp --dport 53 -j ACCEPT</div><div class="line">$ iptables -A INPUT -p tcp -m tcp --dport 53 -j ACCEPT</div></pre></td></tr></table></figure>
<ul>
<li>转发DNS请求</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 开启流量转发功能</div><div class="line">$ echo &apos;1&apos; &gt; /proc/sys/net/ipv4/ip_forward</div><div class="line">$ echo &apos;1&apos; &gt; /proc/sys/net/ipv6/ip_forward   # IPv6 用户选用</div><div class="line"></div><div class="line"># 添加流量转发规则，将外部到53的端口的请求映射到Dnsmasq服务器的53端口</div><div class="line">$ iptables -t nat -A PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 53</div><div class="line">$ iptables -t nat -A PREROUTING -p tcp --dport 53 -j REDIRECT --to-ports 53</div><div class="line"></div><div class="line"># 如果要限制只允许内网的请求，方法如下</div><div class="line">$ iptables -t nat -A PREROUTING -i eth1 -p upd --dport 53 -j REDIRECT --to-port 53</div></pre></td></tr></table></figure>
<ul>
<li>保存规则并重启</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ service iptables save</div><div class="line">$ service iptables restart</div></pre></td></tr></table></figure>
<h3 id="测试Dnsmasq"><a href="#测试Dnsmasq" class="headerlink" title="测试Dnsmasq"></a>测试Dnsmasq</h3><ul>
<li>启动Dnsmasq</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ service dnsmasq start</div></pre></td></tr></table></figure>
<ul>
<li>测试Dnsmasq</li>
</ul>
<p>将其他机器的DNS换成dnsmasq所在的IP即可，就这么容易。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ dig @192.168.101.104 www.hi-linux.com</div></pre></td></tr></table></figure>
<h3 id="一些Dnsmasq技巧"><a href="#一些Dnsmasq技巧" class="headerlink" title="一些Dnsmasq技巧"></a>一些Dnsmasq技巧</h3><h4 id="Dnsmasq性能优化"><a href="#Dnsmasq性能优化" class="headerlink" title="Dnsmasq性能优化"></a>Dnsmasq性能优化</h4><p>我们都知道Bind不配合数据库的情况下，经常需要重新载入并读取配置文件，这是造成性能低下的原因。根据这点教训，我们可以考虑不读取<code>/etc/hosts</code>文件。而是另外指定一个在共享内存里的文件，比如<code>/dev/shm/dnsrecord.txt</code> ，这样就不费劲了，又由于内存的非持久性，重启就消失，可以定期同步硬盘上的某个内容到内存文件中。</p>
<p>具体实现步骤</p>
<ul>
<li>配置dnsmasq</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/dnsmasq.conf</div><div class="line"> </div><div class="line">no-hosts </div><div class="line">addn-hosts=/dev/shm/dnsrecord.txt</div></pre></td></tr></table></figure>
<ul>
<li>解决同步问题</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 开机启动</div><div class="line">$ echo &quot;cat /etc/hosts &gt; /dev/shm/dnsrecord.txt&quot; &gt;&gt;/etc/rc.local </div><div class="line"></div><div class="line"># 定时同步内容</div><div class="line">$ crontab -e </div><div class="line">*/10 * * * * cat /etc/hosts &gt; /dev/shm/dnsrecord.txt</div></pre></td></tr></table></figure>
<h4 id="Dnsmasq选择最快的上游DNS服务器"><a href="#Dnsmasq选择最快的上游DNS服务器" class="headerlink" title="Dnsmasq选择最快的上游DNS服务器"></a>Dnsmasq选择最快的上游DNS服务器</h4><p>经常会有这样的情景，Dnsmasq服务器配了一堆上游服务器，转发本地的dns请求，缺省是Dnsmasq事实上是只挑了一个上游dns服务器来查询并转发结果，这样如果选错服务器的话会导致DNS响应变慢。</p>
<p>解决方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/dnsmasq.conf</div><div class="line"></div><div class="line">all-servers  </div><div class="line">server=8.8.8.8  </div><div class="line">server=219.141.136.10</div></pre></td></tr></table></figure>
<p>all-servers表示对以下设置的所有server发起查询，选择回应最快的一条作为查询结果返回。<br>上面我们设置了两个dns server，8.8.8.8(谷歌dns)和219.141.136.10(移动的dns)，会同时查询这两个服务器，询问dns地址谁返回快就采用谁的结果。</p>
<h4 id="dnsmasq-china-list项目"><a href="#dnsmasq-china-list项目" class="headerlink" title="dnsmasq-china-list项目"></a>dnsmasq-china-list项目</h4><p>dnsmasq-china-list项目维护了一张国内常用但是通过国外DNS会解析错误的网站域名的列表，保证List中的国内域名全部走国内DNS服务器解析。</p>
<p>项目地址: <a href="https://github.com/felixonmars/dnsmasq-china-list" target="_blank" rel="external">https://github.com/felixonmars/dnsmasq-china-list</a></p>
<p>dnsmasq-china-list使用</p>
<ul>
<li>取消dnsmasq.conf里conf-dir=/etc/dnsmasq.d这一行的注释</li>
<li>获取项目文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/felixonmars/dnsmasq-china-list.git</div></pre></td></tr></table></figure>
<ul>
<li>将accelerated-domains.china.conf, bogus-nxdomain.china.conf,google.china.conf(可选)放到/etc/dnsmasq.d/目录下(如目录不存在则建立一个)。</li>
<li>将<code>dnsmasq-update-china-list</code>放到<code>/usr/bin/</code>，这是一个批量修改DNS服务器的工具(可选)。</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://purplegrape.blog.51cto.com/1330104/1083354" target="_blank" rel="external">http://purplegrape.blog.51cto.com/1330104/1083354</a><br><a href="https://i-meto.com/archives/iptables_PREROUTING.html" target="_blank" rel="external">https://i-meto.com/archives/iptables_PREROUTING.html</a><br><a href="http://blog.itphp.org/archives/225" target="_blank" rel="external">http://blog.itphp.org/archives/225</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Dnsmasq提供DNS缓存和DHCP服务、Tftp服务功能。作为域名解析服务器(DNS)，Dnsmasq可以通过缓存DNS请求来提高对访问过的网址的连接速度。作为DHCP服务器，Dnsmasq可以为局域网电脑提供内网ip地址和路由。DNS和DHCP两个功能可以同时或分别单独实现。Dnsmasq轻量且易配置，适用于个人用户或少于50台主机的网络。此外它还自带了一个PXE服务器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dnsmasq工作原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当接受到一个DNS请求时，Dnsmasq首先会查找&lt;code&gt;/etc/hosts&lt;/code&gt;这个文件，然后查找&lt;code&gt;/etc/resolv.con&lt;/code&gt;f中定义的外部DNS。所以说Dnsmasq是一个很不错的外部DNS中继。&lt;/p&gt;
&lt;p&gt;配置Dnsmasq为DNS缓存服务器，同时在&lt;code&gt;/etc/hosts&lt;/code&gt;文件中加入本地内网解析，这样一来每当内网机器查询时就会优先查询hosts文件，这就等于将&lt;code&gt;/etc/hosts&lt;/code&gt;共享给全内网机器使用，从而解决内网机器互相识别的问题。相比逐台机器编辑hosts文件或者添加Bind DNS记录，仅编辑一个hosts文件，这简直太容易了。&lt;/p&gt;
    
    </summary>
    
      <category term="DNS" scheme="http://www.hi-linux.com/categories/DNS/"/>
    
    
      <category term="Linux" scheme="http://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Dnsmasq" scheme="http://www.hi-linux.com/tags/Dnsmasq/"/>
    
  </entry>
  
  <entry>
    <title>VSftpd安装和配置FTP虚拟用户实践</title>
    <link href="http://www.hi-linux.com/posts/12477.html"/>
    <id>http://www.hi-linux.com/posts/12477.html</id>
    <published>2016-07-25T01:00:00.000Z</published>
    <updated>2017-01-22T10:13:02.042Z</updated>
    
    <content type="html"><![CDATA[<p>VSftpd英文全称(Very Secure File Transfer Protocol Deamon)，正如VSftpd官方宣传中所说<code>Probably the most secure and fastest FTP server for UNIX-like systems</code>。我相信这是大多数人选择VSftpd来搭建Linux的FTP服务器的原因，当然ProFTPD用的人应该也不在少数。本文将以清晰直观的方式介绍安装VSftpd以及配置FTP虚拟用户的过程，希望对大家有帮助。</p>
<h3 id="安装VSftpd及相关组件"><a href="#安装VSftpd及相关组件" class="headerlink" title="安装VSftpd及相关组件"></a>安装VSftpd及相关组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum -y install vsftpd* pam* db4* ftp</div></pre></td></tr></table></figure>
<h3 id="修改FTP相关帐户"><a href="#修改FTP相关帐户" class="headerlink" title="修改FTP相关帐户"></a>修改FTP相关帐户</h3><ul>
<li>VSftpd服务的宿主用户</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ useradd vsftpd -s /sbin/nologin</div></pre></td></tr></table></figure>
<p>默认的VSftpd的服务宿主用户是root，但是这不符合安全性的需要。这里建立名字为vsftpd的用户，用他来作为支持VSftpd的服务宿主用户。由于该用户仅用来支持VSftpd服务用，因此没有许可他登陆系统的必要，并设定他为不能登陆系统的用户。</p>
<a id="more"></a>
<ul>
<li>VSftpd的虚拟宿主用户</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ useradd virtual -d /home/ftpdata/ -s /sbin/nologin</div><div class="line">$ chown -R virtual:virtual /home/ftpdata/</div></pre></td></tr></table></figure>
<p>VSftpd的虚拟用户并不是系统用户，也就是说这些FTP的用户在系统中是不存在的。他们的总体权限其实是集中寄托在一个在系统中的某一个用户身上的，所谓VSftpd的虚拟宿主用户，就是这样一个支持着所有虚拟用户的宿主用户。由于他支撑了FTP的所有虚拟的用户，那么他本身的权限将会影响着这些虚拟的用户，因此出于安全性的考虑，也要非常注意对该用户的权限的控制，该用户也绝对没有登陆系统的必要，这里也设定他为不能登陆系统的用户。</p>
<h3 id="vsftpd-conf基本配置"><a href="#vsftpd-conf基本配置" class="headerlink" title="vsftpd.conf基本配置"></a>vsftpd.conf基本配置</h3><ul>
<li>一些基本配置选项说明</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div></pre></td><td class="code"><pre><div class="line">anonymous_enable=YES|NO </div><div class="line">控制是否允许匿名用户登录，YES允许，NO不允许，默认值为YES。 </div><div class="line"></div><div class="line">ftp_username= username</div><div class="line">匿名用户所使用的系统用户名。默认下，此参数在配置文件中不出现，值为ftp</div><div class="line"></div><div class="line">no_anon_password=YES|NO </div><div class="line">控制匿名用户登入时是否需要密码，YES不需要，NO需要。默认值为NO。 </div><div class="line"></div><div class="line">anon_root=path</div><div class="line">设定匿名用户的根目录，即匿名用户登入后，被定位到此目录下。主配置文件中默认无此项，默认值为/var/ftp/。 </div><div class="line"></div><div class="line">anon_world_readable_only=YES|NO</div><div class="line">控制是否只允许匿名用户下载可阅读文档。YES，只允许匿名用户下载可阅读的文件。NO，允许匿名用户浏览整个服务器的文件系统。默认值为YES。 </div><div class="line"></div><div class="line">anon_upload_enable=YES|NO </div><div class="line">控制是否允许匿名用户上传文件，YES允许，NO不允许，默认是不设值，即为NO。除了这个参数外，匿名用户要能上传文件，还需要两个条件：一，write_enable参数为YES;二，在文件系统上，FTP匿名用户对某个目录有写权限。 </div><div class="line">anon_mkdir_write_enable=YES|NO </div><div class="line">控制是否允许匿名用户创建新目录，YES允许，NO不允许，默认是不设值，即为NO。当然在文件系统上，FTP匿名用户必需对新目录的上层目录拥有写权限。 </div><div class="line"></div><div class="line">anon_other_write_enable=YES|NO </div><div class="line">控制匿名用户是否拥有除了上传和新建目录之外的其他权限，如删除、更名等。YES拥有，NO不拥有，默认值为NO。 </div><div class="line"></div><div class="line">chown_uploads=YES|NO </div><div class="line">是否修改匿名用户所上传文件的所有权。YES，匿名用户所上传的文件的所有权将改为另外一个不同的用户所有，用户由chown_username参数指定。此选项默认值为NO。 </div><div class="line"></div><div class="line">chown_username=whoever</div><div class="line">指定拥有匿名用户上传文件所有权的用户</div><div class="line"></div><div class="line">local_enable=YES|NO </div><div class="line">控制vsftpd所在的系统的用户是否可以登录vsftpd。默认值为YES。 </div><div class="line"></div><div class="line">local_root= </div><div class="line">定义所有本地用户的根目录。当本地用户登入时，将被更换到此目录下。默认值为无。 </div><div class="line"></div><div class="line">user_config_dir= </div><div class="line">定义用户个人配置文件所在的目录。用户的个人配置文件为该目录下的同名文件</div><div class="line"></div><div class="line">chroot_list_enable=YES|NO </div><div class="line">锁定某些用户在自家目录中。即当这些用户登录后，不可以转到系统的其他目录，只能在自家目录(及其子目录)下。具体的用户在chroot_list_file参数所指定的文件中列出。默认值为NO。 </div><div class="line"></div><div class="line">chroot_list_file=/etc/vsftpd/chroot_list </div><div class="line">指出被锁定在自家目录中的用户的列表文件。文件格式为一行一用户。通常该文件是/etc/vsftpd/chroot_list。此选项默认不设置。 </div><div class="line"></div><div class="line">chroot_local_users=YES|NO </div><div class="line">将本地用户锁定在自家目录中。当此项被激活时，chroot_list_enable和chroot_local_users参数的作用将发生变化，chroot_list_file所指定文件中的用户将不被锁定在自家目录。本参数被激活后，可能带来安全上的冲突，特别是当用户拥有上传、shell访问等权限时。因此，只有在确实了解的情况下，才可以打开此参数。默认值为NO。 </div><div class="line"></div><div class="line">passwd_chroot_enable =YES|NO</div><div class="line">当此选项激活时，与chroot_local_user选项配合，chroot()容器的位置可以在每个用户的基础上指定。每个用户的容器来源于/etc/passwd中每个用户的自家目录字段。默认值为NO。</div><div class="line"></div><div class="line">listen_address=ip address </div><div class="line">定义了在主机的哪个IP地址上监听FTP请求</div><div class="line"></div><div class="line">listen_port=port_value  </div><div class="line">指定FTP服务器监听的端口号(控制端口)，默认值为21。此选项在standalone模式下生效</div><div class="line"></div><div class="line">port_enable=YES|NO</div><div class="line">指定数据连接时模式，默认值为YES（PORT模式，NO为PASV模式）</div><div class="line"></div><div class="line">connect_from_port_20=YES|NO</div><div class="line">控制以PORT模式进行数据传输时是否使用20端口(ftp-data）</div><div class="line"></div><div class="line">ftp_data_port=port number </div><div class="line">设定ftp数据传输端口(ftp-data)值。默认值为20。此参数用于PORT FTP模式。 </div><div class="line"></div><div class="line">pasv_enable=YES|NO</div><div class="line">YES，允许数据传输时使用PASV模式。NO，不允许使用PASV模式。默认值为YES。</div><div class="line"></div><div class="line">pasv_min_port=port number</div><div class="line">pasv_max_port=port number</div><div class="line">设定在PASV模式下，建立数据传输所可以使用port范围的下界和上界，0 表    示任意。默认值为0。把端口范围设在比较高的一段范围内，比如50000-60000，将有助于安全性的提高</div><div class="line"></div><div class="line">pasv_address= ip address</div><div class="line">此选项为一个数字IP地址，作为PASV命令的响应。默认值为none，即地址是从呼入的连接套接字(incoming connectd socket)中获取。</div><div class="line"></div><div class="line">ascii_upload_enable=YES|NO</div><div class="line">控制是否允许使用ascii模式上传文件，YES允许，NO不允许，默认为NO </div><div class="line"></div><div class="line">ascii_download_enable=YES|NO</div><div class="line">控制是否允许使用ascii模式下载文件，YES允许，NO不允许，默认为NO。</div><div class="line"></div><div class="line">idle_session_timeout= numerical value</div><div class="line">空闲用户会话的超时时间，若是超出这时间没有数据的传送或是指令的输入，则会强迫断线。单位为秒，默认值为300。</div><div class="line"></div><div class="line">data_connection_timeout= numerical value</div><div class="line">空闲的数据连接的超时时间。默认值为300 秒。</div><div class="line"></div><div class="line">accept_timeout=numerical value </div><div class="line">接受建立联机的超时设定，单位为秒。默认值为60。</div><div class="line"></div><div class="line">connect_timeout=numerical value</div><div class="line">响应PORT方式的数据联机的超时设定，单位为秒。默认值为60</div><div class="line"></div><div class="line">max_clients=numerical value </div><div class="line">此参数在VSFTPD使用单独(standalone)模式下有效。此参数定义了FTP服务器最大的并发连接数，当超过此连接数时，服务器拒绝客户端连接。默认值为0，表示不限最大连接数。</div><div class="line"></div><div class="line">max_per_ip=numerical value </div><div class="line">此参数在VSFTPD使用单独(standalone)模式下有效。此参数定义每个IP地址最大的并发连接数目。超过这个数目将会拒绝连接。此选项的设置将影响到象网际快车这类的多进程下载软件。默认值为0，表示不限制。 </div><div class="line"></div><div class="line">anon_max_rate=value </div><div class="line">设定匿名用户的最大数据传输速度value，以Bytes/s为单位。默认无。 </div><div class="line"></div><div class="line">local_max_rate=value </div><div class="line">设定用户的最大数据传输速度value，以Bytes/s为单位。默认无。</div><div class="line"></div><div class="line">write_enable=YES</div><div class="line">设定允许进行写操作(上传、删除)，默认为YES，可选值【yes,no】</div><div class="line"></div><div class="line">local_umask=022</div><div class="line">设定权限掩码，默认022，对应的文件上传权限644、目录权限755</div><div class="line"></div><div class="line">dirmessage_enable=YES</div><div class="line">设定开启目录标语功能</div><div class="line"></div><div class="line">xferlog_enable=YES</div><div class="line">设定开启日志记录功能</div><div class="line"></div><div class="line">xferlog_file=/var/log/ftp/vsftpd.log</div><div class="line">设置日志目录</div><div class="line"></div><div class="line">xferlog_std_format=YES</div><div class="line">设定日志使用标准的记录格式</div><div class="line"></div><div class="line">nopriv_user=vsftpd</div><div class="line">设定支撑Vsftpd服务的宿主用户为手动建立的Vsftpd用户。注意，一旦做出更改宿主用户后，必须注意一起与该服务相关的读写文件的读写赋权问题。比如日志文件就必须给与该用户写入权限等。</div><div class="line"></div><div class="line">async_abor_enable=YES</div><div class="line">设定支持异步传输功能。</div><div class="line"></div><div class="line">ftpd_banner=This Vsftp server supports virtual users ^_^</div><div class="line">设定Vsftpd的登陆标语。</div><div class="line"></div><div class="line">deny_email_enable=YES</div><div class="line">可将某些特殊的 email address 抵挡住。如果以anonymous 登录服务器时，会要求输入密码，也就是您的email address, 如果很讨厌某些email address ，就可以使用此设定来取消他的登录权限，但必须与下面的设置项配合</div><div class="line"></div><div class="line">banned_email_file=/etc/vsftpd/banned_emails</div><div class="line">当上面的 deny_email_enable=YES 时，可以利用这个设定项来规定那个email address 不可登录vsftpd 服务器，此文件需用户自己创建，一行一个email address 即可！</div><div class="line"></div><div class="line">ls_recurse_enable=YES</div><div class="line">是否允许递归查询 ， 大型站点的 FTP 服务器启用此项可以方便远程用户查询</div><div class="line"></div><div class="line">chroot_local_user=YES</div><div class="line"></div><div class="line">listen=YES</div><div class="line">如果设置为 YES ， 则 vsftpd 将以独立模式运行，由vsftpd 自己监听和处理连接请求</div><div class="line"></div><div class="line">listen_ipv6=YES</div><div class="line">设定是否支持IPV6</div><div class="line"></div><div class="line">pam_service_name=vsftpd</div><div class="line">设置 PAM 外挂模块提供的认证服务所使用的配置文件名 ，即/etc/pam.d/vsftpd 文件，此文件中file=/etc/vsftpd/ftpusers 字段，说明了PAM 模块能抵挡的帐号内容来自文件/etc/vsftpd/ftpusers 中</div><div class="line"></div><div class="line">userlist_enable=YES/NO</div><div class="line">此选项默认值为NO , 此时ftpusers 文件中的用户禁止登录FTP 服务器；若此项设为YES ，则 user_list 文件中的用户允许登录 FTP 服务器，而如果同时设置了 userlist_deny=YES ，则 user_list 文件中的用户将不允许登录FTP 服务器，甚至连输入密码提示信息都没有，直接被FTP 服务器拒绝</div><div class="line"></div><div class="line">userlist_deny=YES/NO</div><div class="line">此项默认为YES ，设置是否阻扯user_list 文件中的用户登录FTP 服务器</div><div class="line"></div><div class="line">tcp_wrappers=YES</div><div class="line">表明服务器使用 tcp_wrappers 作为主机访问控制方式，tcp_wrappers 可以实现linux 系统中网络服务的基于主机地址的访问控制，在/etc 目录中的hosts.allow 和hosts.deny 两个文件用于设置tcp_wrappers 的访问控制，前者设置允许访问记录，后者设置拒绝访问记录。例如想限制某些主机对FTP 服务器192.168.57.2 的匿名访问，编缉/etc/hosts.allow 文件，如在下面增加两行命令：vsftpd:192.168.57.1:DENY 和vsftpd:192.168.57.9:DENY 表明限制IP 为192.168.57.1/192.168.57.9 主机访问IP 为192.168.57.2 的FTP 服务器，此时FTP 服务器虽可以PING 通，但无法连接</div></pre></td></tr></table></figure>
<ul>
<li>关于userlist_enable、userlist_deny的设置，ftpusers和user_list文件的区别</li>
</ul>
<blockquote>
<p>ftpusers：禁止user_list列表中的用户访问FTP<br>userlist_enable=YES，userlist_deny=YES，禁止user_list列表中的用户访FTP<br>userlist_enable=YES，userlist_deny=NO，只允许user_list列表中的用户FTP。<br>userlist_enable=NO，userlist_deny=YES，因设定userlist_enable=NO，忽略user_list文件，user_list不启作用<br>userlist_enable=NO，userlist_deny=NO，因设定userlist_enable=NO，忽略user_list文件，user_list不启作用<br>ftpusers禁止的优先级更高。假设ftpusers禁止woodie用户访问，userlist允许woodie用户访问，则在运行时，用户woodie不能访问ftp。</p>
</blockquote>
<ul>
<li>配置范例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/vsftpd/vsftpd.conf</div><div class="line"></div><div class="line"></div><div class="line"># Example config file /etc/vsftpd/vsftpd.conf</div><div class="line">#</div><div class="line"># The default compiled in settings are fairly paranoid. This sample file</div><div class="line"># loosens things up a bit, to make the ftp daemon more usable.</div><div class="line"># Please see vsftpd.conf.5 for all compiled in defaults.</div><div class="line">#</div><div class="line"># READ THIS: This example file is NOT an exhaustive list of vsftpd options.</div><div class="line"># Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd&apos;s</div><div class="line"># capabilities.</div><div class="line">#</div><div class="line"># Allow anonymous FTP? (Beware - allowed by default if you comment this out).</div><div class="line">anonymous_enable=NO</div><div class="line">#</div><div class="line"># Uncomment this to allow local users to log in.</div><div class="line">local_enable=YES</div><div class="line">#</div><div class="line"># Uncomment this to enable any form of FTP write command.</div><div class="line">write_enable=YES</div><div class="line">#</div><div class="line"># Default umask for local users is 077. You may wish to change this to 022,</div><div class="line"># if your users expect that (022 is used by most other ftpd&apos;s)</div><div class="line">local_umask=022</div><div class="line">#</div><div class="line"># Uncomment this to allow the anonymous FTP user to upload files. This only</div><div class="line"># has an effect if the above global write enable is activated. Also, you will</div><div class="line"># obviously need to create a directory writable by the FTP user.</div><div class="line">#anon_upload_enable=YES</div><div class="line">#</div><div class="line"># Uncomment this if you want the anonymous FTP user to be able to create</div><div class="line"># new directories.</div><div class="line">#anon_mkdir_write_enable=YES</div><div class="line">#</div><div class="line"># Activate directory messages - messages given to remote users when they</div><div class="line"># go into a certain directory.</div><div class="line">dirmessage_enable=YES</div><div class="line">#</div><div class="line"># The target log file can be vsftpd_log_file or xferlog_file.</div><div class="line"># This depends on setting xferlog_std_format parameter</div><div class="line">xferlog_enable=YES</div><div class="line">#</div><div class="line"># Make sure PORT transfer connections originate from port 20 (ftp-data).</div><div class="line">connect_from_port_20=YES</div><div class="line">#</div><div class="line"># If you want, you can arrange for uploaded anonymous files to be owned by</div><div class="line"># a different user. Note! Using &quot;root&quot; for uploaded files is not</div><div class="line"># recommended!</div><div class="line">#chown_uploads=YES</div><div class="line">#chown_username=whoever</div><div class="line">#</div><div class="line"># The name of log file when xferlog_enable=YES and xferlog_std_format=YES</div><div class="line"># WARNING - changing this filename affects /etc/logrotate.d/vsftpd.log</div><div class="line">#xferlog_file=/var/log/xferlog</div><div class="line">#</div><div class="line"># Switches between logging into vsftpd_log_file and xferlog_file files.</div><div class="line"># NO writes to vsftpd_log_file, YES to xferlog_file</div><div class="line">xferlog_std_format=YES</div><div class="line">#</div><div class="line"># You may change the default value for timing out an idle session.</div><div class="line">#idle_session_timeout=600</div><div class="line">#</div><div class="line"># You may change the default value for timing out a data connection.</div><div class="line">#data_connection_timeout=120</div><div class="line">#</div><div class="line"># It is recommended that you define on your system a unique user which the</div><div class="line"># ftp server can use as a totally isolated and unprivileged user.</div><div class="line">#nopriv_user=ftpsecure</div><div class="line">#</div><div class="line"># Enable this and the server will recognise asynchronous ABOR requests. Not</div><div class="line"># recommended for security (the code is non-trivial). Not enabling it,</div><div class="line"># however, may confuse older FTP clients.</div><div class="line">#async_abor_enable=YES</div><div class="line">#</div><div class="line"># By default the server will pretend to allow ASCII mode but in fact ignore</div><div class="line"># the request. Turn on the below options to have the server actually do ASCII</div><div class="line"># mangling on files when in ASCII mode.</div><div class="line"># Beware that on some FTP servers, ASCII support allows a denial of service</div><div class="line"># attack (DoS) via the command &quot;SIZE /big/file&quot; in ASCII mode. vsftpd</div><div class="line"># predicted this attack and has always been safe, reporting the size of the</div><div class="line"># raw file.</div><div class="line"># ASCII mangling is a horrible feature of the protocol.</div><div class="line">#ascii_upload_enable=YES</div><div class="line">#ascii_download_enable=YES</div><div class="line">#</div><div class="line"># You may fully customise the login banner string:</div><div class="line">#ftpd_banner=Welcome to blah FTP service.</div><div class="line">#</div><div class="line"># You may specify a file of disallowed anonymous e-mail addresses. Apparently</div><div class="line"># useful for combatting certain DoS attacks.</div><div class="line">#deny_email_enable=YES</div><div class="line"># (default follows)</div><div class="line">#banned_email_file=/etc/vsftpd/banned_emails</div><div class="line">#</div><div class="line"># You may specify an explicit list of local users to chroot() to their home</div><div class="line"># directory. If chroot_local_user is YES, then this list becomes a list of</div><div class="line"># users to NOT chroot().</div><div class="line">#chroot_list_enable=YES</div><div class="line"># (default follows)</div><div class="line">#chroot_list_file=/etc/vsftpd/chroot_list</div><div class="line">#</div><div class="line"># You may activate the &quot;-R&quot; option to the builtin ls. This is disabled by</div><div class="line"># default to avoid remote users being able to cause excessive I/O on large</div><div class="line"># sites. However, some broken FTP clients such as &quot;ncftp&quot; and &quot;mirror&quot; assume</div><div class="line"># the presence of the &quot;-R&quot; option, so there is a strong case for enabling it.</div><div class="line">#ls_recurse_enable=YES</div><div class="line">#</div><div class="line"># When &quot;listen&quot; directive is enabled, vsftpd runs in standalone mode and</div><div class="line"># listens on IPv4 sockets. This directive cannot be used in conjunction</div><div class="line"># with the listen_ipv6 directive.</div><div class="line">listen=YES</div><div class="line">#listen_port=56880</div><div class="line">pasv_min_port=30000</div><div class="line">pasv_max_port=35000</div><div class="line"></div><div class="line">#</div><div class="line"># This directive enables listening on IPv6 sockets. To listen on IPv4 and IPv6</div><div class="line"># sockets, you must run two copies of vsftpd whith two configuration files.</div><div class="line"># Make sure, that one of the listen options is commented !!</div><div class="line">#listen_ipv6=YES</div><div class="line"></div><div class="line">pam_service_name=vsftpd.vu</div><div class="line">#pam_service_name=vsftpd</div><div class="line">userlist_enable=YES</div><div class="line">tcp_wrappers=YES</div><div class="line"></div><div class="line">chroot_local_user=YES</div><div class="line">guest_enable=YES</div><div class="line">guest_username=virtual</div><div class="line"></div><div class="line">virtual_use_local_privs=YES</div><div class="line">#reverse_lookup_enable=NO</div><div class="line">user_config_dir=/etc/vsftpd/vsftpd_user_conf</div></pre></td></tr></table></figure>
<h3 id="生成vsftpd虚拟用户数据库文件"><a href="#生成vsftpd虚拟用户数据库文件" class="headerlink" title="生成vsftpd虚拟用户数据库文件"></a>生成vsftpd虚拟用户数据库文件</h3><ul>
<li>建立虚拟用户名单文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/vsftpd/ftpuser.txt</div><div class="line"></div><div class="line">ftpupload</div><div class="line">12345678</div></pre></td></tr></table></figure>
<p>格式很简单：”一行用户名，一行密码！”。</p>
<ul>
<li>生成虚拟用户数据文件</li>
</ul>
<blockquote>
<p>db_load命令可以将用户文本信息文件转换为db数据库并使用hash加密。</p>
<p>选项-T允许应用程序能够将文本文件转译载入进数据库。由于我们之后是将虚拟用户的信息以文件方式存储在文件里的，为了让Vsftpd这个应用程序能够通过文本来载入用户数据，必须要使用这个选项。</p>
<p>指定了选项-T，那么一定要追加子选项-t ; 子选项-t，追加在在-T选项后，用来指定转译载入的数据库类型。hash就是使用hash码加密。</p>
<p>-f参数后面接包含用户名和密码的文本文件，文件的内容是:奇数行用户名、偶数行密码；</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ db_load -T -t hash -f /etc/vsftpd/ftpuser.txt /etc/vsftpd/vsftpd_login.db</div><div class="line">$ chmod 600 /etc/vsftpd/vsftpd_login.db</div></pre></td></tr></table></figure>
<ul>
<li>特别注意</li>
</ul>
<blockquote>
<p>如果要删除掉一个虚拟用户，先在ftpuser.txt中删除用户对应的用户名和密码，然后删除vsftpd_login.db,重新运行<code>db_load -T -t hash -f /etc/vsftpd/ftpuser.txt /etc/vsftpd/vsftpd_login.db</code></p>
<p>如果更改密码，更改文件内容后还需重新运行db_load就可以，并重启ftp服务使其生效。</p>
<p>如果要改变用户的其它配置，只需修改用户的配置文件。</p>
</blockquote>
<h3 id="配置PAM验证文件"><a href="#配置PAM验证文件" class="headerlink" title="配置PAM验证文件"></a>配置PAM验证文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/pam.d/vsftpd.vu</div></pre></td></tr></table></figure>
<p>将以下内容加入到文件最前面(在后面加入无效)</p>
<ul>
<li>32位系统</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">auth required /lib/security/pam_userdb.so db=/etc/vsftpd/vsftpd_login</div><div class="line">account required /lib/security/pam_userdb.so db=/etc/vsftpd/vsftpd_login</div></pre></td></tr></table></figure>
<ul>
<li>64位系统</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">auth required /lib64/security/pam_userdb.so db=/etc/vsftpd/vsftpd_login</div><div class="line">account required /lib64/security/pam_userdb.so db=/etc/vsftpd/vsftpd_login</div></pre></td></tr></table></figure>
<p>上一步建立的数据库vsftpd_login在此处被使用，建立的虚拟用户将采用PAM进行验证，这是通过<code>/etc/vsftpd/vsftpd.conf</code>文件中的语句<code>pam_service_name=vsftpd.vu</code>来启用的。</p>
<h3 id="VSftpd虚拟用户的独立配置"><a href="#VSftpd虚拟用户的独立配置" class="headerlink" title="VSftpd虚拟用户的独立配置"></a>VSftpd虚拟用户的独立配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p /etc/vsftpd/vsftpd_user_conf</div><div class="line">$ vim /etc/vsftpd/vsftpd_user_conf/ftpupload</div><div class="line"></div><div class="line">anon_world_readable_only=NO</div><div class="line">write_enable=YES</div><div class="line">anon_upload_enable=YES</div><div class="line">anon_mkdir_write_enable=YES</div><div class="line">anon_other_write_enable=YES</div><div class="line">local_root=/home/ftpdata/</div></pre></td></tr></table></figure>
<h3 id="VSftpd服务器之间的站点对传"><a href="#VSftpd服务器之间的站点对传" class="headerlink" title="VSftpd服务器之间的站点对传"></a>VSftpd服务器之间的站点对传</h3><p>有时候可能需要开启VSftpd服务器之间的站点对传功能，只需在主配置文件<code>/etc/vsftpd/vsftpd.conf</code>里加入如下参数即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pasv_promiscuous=YES</div><div class="line">port_promiscuous=YES</div></pre></td></tr></table></figure>
<p>说明</p>
<blockquote>
<p>port_promiscuous=YES|NO<br>默认值为NO。为YES时，取消PORT安全检查。该检查确保外出的数据只能连接到客户端上。小心打开此选项。</p>
<p>pasv_promiscuous=YES|NO<br>默认值为NO。为YES时，将关闭PASV模式的安全检查。该检查确保数据连接和控制连接是来自同一个IP地址。小心打开此选项。此选项唯一合理的用法是存在于由安全隧道方案构成的组织中。</p>
</blockquote>
<p>由于取消了数据包的安全检查，允许数据流向非客户端，所以站点对传成功。</p>
<p>配置修改完成后，重启vsftpd服务生效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /etc/init.d/vsftpd restart</div></pre></td></tr></table></figure>
<h3 id="VSftpd的一些配置技巧"><a href="#VSftpd的一些配置技巧" class="headerlink" title="VSftpd的一些配置技巧"></a>VSftpd的一些配置技巧</h3><ul>
<li>配置VSftpd服务器的日志功能</li>
</ul>
<p>VSftpd与log有关的选项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">vsftpd_log_file</div><div class="line">xferlog_enable</div><div class="line">xferlog_std_format</div><div class="line">xferlog_file</div><div class="line">dual_log_enable</div><div class="line">syslog_enable</div><div class="line">log_ftp_protocol</div><div class="line">no_log_lock</div></pre></td></tr></table></figure>
<p>这里主要要到下面几个参数控制</p>
<blockquote>
<p>log_ftp_protocol<br>如果启用, 假若选项xferlog_std_format没有启用, 所有的FTP请求和应答都会被记录。 此选项将对调试很有用。<br>默认: YES</p>
<p>dual_log_enable<br>如果启用, 将生成两个相似的日志文件, 默认在/var/log/xferlog和/var/log/vsftpd.log目录下。 前者是wu-ftpd类型的传输日志, 可以用于标准工具分析。 后者是vsftpd自己类型的日志。</p>
<p>xferlog_enable<br>如果启用, 将会维护一个日志文件, 用于详细记录上载和下载. 默认情况下, 这个日志文件是/var/log/vsftpd.log。 但是也可以通过配置文件中的vsftpd_log_file选项来指定。<br>默认: NO(但是在示例设置中启用了这个选项)</p>
<p>xferlog_std_format<br>如果启用, 传输日志文件将以标准xferlog的格式书写, 如同wu-ftpd一样. 这可以用于重新使用传输统计生成器. 然而, 默认格式更注重可读性。 此格式的日志文件默认为/var/log/xferlog, 但是您也可以通过xferlog_file选项来设定。<br>默认: NO</p>
<p>xferlog_file<br>xferlog 日志文件所在位置，默认为/var/log/xferlog。</p>
<p>vsftpd_log_file<br>指定VSFTPd日志文件位置，默认为/var/log/vsftpd.log，xferlog_enable的默认值为no(VSFTPd提供的配置文件模版将其值改为了yes)，dual_log_enable的默认值也为no，就是说默认情况下VSFTPd是不记录日志的。我们也可以将日志信息写入系统日志/var/log/messages中，使用如下参数：syslog_enable=yes/no</p>
</blockquote>
<p>配置VSftpd传输日志</p>
<p>将xferlog_file前面的#号对掉，也就是把VSftpd的Log功能打开，这样我们就能在/var/log目录下查看xferlog。这是VSftpd日志功能，这对于我们来说是极为重要的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">##################log settings###################</div><div class="line"># Activate logging of uploads/downloads.</div><div class="line">xferlog_enable=YES</div><div class="line">#</div><div class="line"># You may override where the log file goes if you like. The default is shown</div><div class="line"># below.</div><div class="line">xferlog_file=/var/log/xferlog</div><div class="line">#</div><div class="line">#log in two files /var/log/xferlog and /var/log/vsftpd.log</div><div class="line">dual_log_enable=YES</div><div class="line">vsftpd_log_file=/var/log/vsftpd.log</div><div class="line">#log time setting</div><div class="line">use_localtime=YES</div><div class="line">#</div><div class="line">###################end of log####################</div></pre></td></tr></table></figure>
<ul>
<li>配置VSftpd限制同一个IP地址的同时连接数量</li>
</ul>
<p>VSftpd对同一个IP地址的同时连接数量默认是没有限制的。在VSftpd中的max_per_ip选项是0，代表没有限制。</p>
<p>如果你想限制同一个IP地址的同时连接数量，你需要修改<code>/etc/vsftpd/vsftpd.conf</code>文件。以下是一个例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">pam_service_name=vsftpd</div><div class="line">userlist_enable=YES</div><div class="line">#enable for standalone mode</div><div class="line">listen=YES</div><div class="line">tcp_wrappers=YES</div><div class="line">max_per_ip=2</div></pre></td></tr></table></figure>
<p>在这个例子中，每一个主机最多只能有两个连接。修改vsftpd.conf之后，你需要重启VSftpd来让它生效。</p>
<p>一旦达到最大连接数，同一个主机下对这个FTP服务器的其他连接会出现以下的错误信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">421 There are too many connections from your internet address.</div></pre></td></tr></table></figure>
<ul>
<li>VSftpd与TCP_wrapper结合限制用户的IP地址登录</li>
</ul>
<p>通过<code>/etc/hosts.allow</code>定义允许的来源地址，<code>/etc/hosts.deny</code>定义拒绝的来源地址。</p>
<p>配置示例</p>
<p>/etc/hosts.allow</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#</div><div class="line"># hosts.allow This file describes the names of the hosts which are</div><div class="line"># allowed to use the local INET services, as decided</div><div class="line"># by the ‘/usr/sbin/tcpd’ server.</div><div class="line">#</div><div class="line">vsftpd: 123.103.47.0/255.255.255.0 218.240.63.0/255.255.255.0 59.46.172.0/255.255.255.0 10.0.0.0/255.0.0.0 60.2.80.0/255.255.255.0 218.249.230.0/255.255.255.0 160.10.0.0/255.255.0.0 218.246.69.0/255.255.255.0 125.35.3.0/255.255.255.0 : allow</div></pre></td></tr></table></figure>
<p>/etc/hosts.deny</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#</div><div class="line"># hosts.deny This file describes the names of the hosts which are</div><div class="line"># *not* allowed to use the local INET services, as decided</div><div class="line"># by the ‘/usr/sbin/tcpd’ server.</div><div class="line">#</div><div class="line"># The portmap line is redundant, but it is left to remind you that</div><div class="line"># the new secure portmap uses hosts.deny and hosts.allow. In particular</div><div class="line"># you should know that NFS uses portmap!</div><div class="line">vsftpd : ALL : DENY</div></pre></td></tr></table></figure>
<p>将tcp_wrappers=yes添加至<code>/etc/vsftpd/vsftpd.conf</code>中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/vsftpd/vsftpd.conf</div><div class="line">tcp_wrappers=YES</div></pre></td></tr></table></figure>
<p>重新启动VSftpd</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ service vsftpd restart</div><div class="line">Shutting down vsftpd: OK ]</div><div class="line">Starting vsftpd for vsftpd: OK ]</div></pre></td></tr></table></figure>
<h3 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h3><p>如果配置中出现问题，请从以下几方面检查</p>
<ul>
<li>文件权限和文件属主问题</li>
<li>防火墙iptables没开放相关的端口</li>
<li>SELinux导致的权限问题，建议先关闭SELinux再配置VSftp，之后再开启到permissive模式。或者运行这条命令：<code>setsebool -P ftp_home_dir=1</code> 。</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://www.ha97.com/4113.html" target="_blank" rel="external">http://www.ha97.com/4113.html</a><br><a href="http://www.cnblogs.com/sztsian/archive/2011/08/23/2204102.html" target="_blank" rel="external">http://www.cnblogs.com/sztsian/archive/2011/08/23/2204102.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VSftpd英文全称(Very Secure File Transfer Protocol Deamon)，正如VSftpd官方宣传中所说&lt;code&gt;Probably the most secure and fastest FTP server for UNIX-like systems&lt;/code&gt;。我相信这是大多数人选择VSftpd来搭建Linux的FTP服务器的原因，当然ProFTPD用的人应该也不在少数。本文将以清晰直观的方式介绍安装VSftpd以及配置FTP虚拟用户的过程，希望对大家有帮助。&lt;/p&gt;
&lt;h3 id=&quot;安装VSftpd及相关组件&quot;&gt;&lt;a href=&quot;#安装VSftpd及相关组件&quot; class=&quot;headerlink&quot; title=&quot;安装VSftpd及相关组件&quot;&gt;&lt;/a&gt;安装VSftpd及相关组件&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ yum -y install vsftpd* pam* db4* ftp&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;修改FTP相关帐户&quot;&gt;&lt;a href=&quot;#修改FTP相关帐户&quot; class=&quot;headerlink&quot; title=&quot;修改FTP相关帐户&quot;&gt;&lt;/a&gt;修改FTP相关帐户&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;VSftpd服务的宿主用户&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ useradd vsftpd -s /sbin/nologin&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认的VSftpd的服务宿主用户是root，但是这不符合安全性的需要。这里建立名字为vsftpd的用户，用他来作为支持VSftpd的服务宿主用户。由于该用户仅用来支持VSftpd服务用，因此没有许可他登陆系统的必要，并设定他为不能登陆系统的用户。&lt;/p&gt;
    
    </summary>
    
      <category term="VSftpd" scheme="http://www.hi-linux.com/categories/VSftpd/"/>
    
    
      <category term="Linux" scheme="http://www.hi-linux.com/tags/Linux/"/>
    
      <category term="VSftpd" scheme="http://www.hi-linux.com/tags/VSftpd/"/>
    
  </entry>
  
  <entry>
    <title>使用Mosh来优化SSH连接</title>
    <link href="http://www.hi-linux.com/posts/23118.html"/>
    <id>http://www.hi-linux.com/posts/23118.html</id>
    <published>2016-07-19T01:00:01.000Z</published>
    <updated>2017-01-22T10:13:02.042Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是Mosh"><a href="#什么是Mosh" class="headerlink" title="什么是Mosh"></a>什么是Mosh</h3><p>Mosh表示移动Shell(Mobile Shell)，是一个用于从客户端跨互联网连接远程服务器的命令行工具。它能用于SSH连接，但是比Secure Shell功能更多。它是一个类似于SSH而带有更多功能的应用。程序最初由Keith Winstein 编写，用于类Unix的操作系统中，发布于GNU GPL V3协议下。</p>
<p>Mosh最大的特点是基于UDP方式传输，支持在服务端创建一个临时的Key供客户端一次性连接，退出后失效；也支持通过SSH的配置进行认证，但数据传输本身还是自身的UDP方式。</p>
<a id="more"></a>
<p>另外，Mosh还有两个我觉得非常有用的功能</p>
<ul>
<li>会话的中断不会导致当前正在前端执行的命令中断，相当于你所有的操作都是在screen命令中一样在后台执行。</li>
<li>会话在中断过后，不会立刻退出，而是启用一个计时器，当网络恢复后会自动重新连接，同时会延续之前的会话，不会重新开启一个。</li>
</ul>
<h4 id="Mosh的功能"><a href="#Mosh的功能" class="headerlink" title="Mosh的功能"></a>Mosh的功能</h4><ul>
<li>它是一个支持漫游的远程终端程序</li>
<li>在所有主流的类 Unix 版本中可用，如 Linux、FreeBSD、Solaris、Mac OS X和Android</li>
<li>支持不稳定连接</li>
<li>支持智能的本地回显</li>
<li>支持用户输入的行编辑</li>
<li>响应式设计及在 wifi、3G、长距离连接下的鲁棒性</li>
<li>在IP改变后保持连接。它使用UDP代替TCP(在SSH中使用)，当连接被重置或者获得新的IP后TCP会超时，但是UDP仍然保持连接</li>
<li>在很长的时候之后恢复会话时仍然保持连接</li>
<li>没有网络延迟。立即显示用户输入和删除而没有延迟</li>
<li>像SSH那样支持一些旧的方式登录</li>
<li>包丢失处理机制</li>
</ul>
<h3 id="Mosh安装配置"><a href="#Mosh安装配置" class="headerlink" title="Mosh安装配置"></a>Mosh安装配置</h3><p>Mosh需要同时在服务器端与客户端上安装，这是一件非常简单的事情。</p>
<h4 id="Linux中安装Mosh"><a href="#Linux中安装Mosh" class="headerlink" title="Linux中安装Mosh"></a>Linux中安装Mosh</h4><ul>
<li>在Debian、Ubuntu 和Mint 类似的系统中，你可以很容易地用apt-get包管理器安装。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ apt-get update</div><div class="line">$ apt-get install mosh</div></pre></td></tr></table></figure>
<ul>
<li>在基于RHEL/CentOS/Fedora的系统中，要使用yum包管理器安装mosh，你需要打开第三方的EPEL。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ yum update</div><div class="line">$ yum install mosh</div></pre></td></tr></table></figure>
<ul>
<li>在Fedora 22+的版本中，你需要使用dnf包管理器来安装Mosh。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ dnf install mosh</div></pre></td></tr></table></figure>
<h4 id="MAC中安装Mosh"><a href="#MAC中安装Mosh" class="headerlink" title="MAC中安装Mosh"></a>MAC中安装Mosh</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ brew install mosh</div><div class="line">$ brew install --HEAD mosh #安装git最新版本</div></pre></td></tr></table></figure>
<p><strong>注：目前Mosh的最新版本是1.2.4，这个版本有一个小问题就是不会汇报鼠标事件，如果你在远程的VIM或者tmux等支持鼠标事件的程序中喜欢用滚轮或者触摸屏滚动屏幕的话，可能会有点不习惯。如果不能忍可以自己编译安装Git里的最新版本的Mosh。</strong></p>
<h4 id="检查Mosh的版本"><a href="#检查Mosh的版本" class="headerlink" title="检查Mosh的版本"></a>检查Mosh的版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ mosh --version</div><div class="line">mosh 1.2.4</div><div class="line">Copyright 2012 Keith Winstein &lt;mosh-devel@mit.edu&gt;</div><div class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.</div><div class="line">This is free software: you are free to change and redistribute it.</div><div class="line">There is NO WARRANTY, to the extent permitted by law.</div></pre></td></tr></table></figure>
<p>你可以输入exit来退出Mosh会话。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ exit</div></pre></td></tr></table></figure>
<h3 id="Mosh参数说明"><a href="#Mosh参数说明" class="headerlink" title="Mosh参数说明"></a>Mosh参数说明</h3><p>Mosh支持很多选项，你可以用下面的方法看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">$ mosh --help</div><div class="line">Usage: /usr/bin/mosh [options] [--] [user@]host [command...]</div><div class="line">        --client=PATH        mosh client on local machine</div><div class="line">                                (default: &quot;mosh-client&quot;)</div><div class="line">        --server=COMMAND     mosh server on remote machine</div><div class="line">                                (default: &quot;mosh-server&quot;)</div><div class="line"></div><div class="line">        --predict=adaptive      local echo for slower links [default]</div><div class="line">-a      --predict=always        use local echo even on fast links</div><div class="line">-n      --predict=never         never use local echo</div><div class="line">        --predict=experimental  aggressively echo even when incorrect</div><div class="line"></div><div class="line">-p PORT[:PORT2]</div><div class="line">        --port=PORT[:PORT2]  server-side UDP port or range</div><div class="line"></div><div class="line">        --ssh=COMMAND        ssh command to run when setting up session</div><div class="line">                                (example: &quot;ssh -p 2222&quot;)</div><div class="line">                                (default: &quot;ssh&quot;)</div><div class="line"></div><div class="line">        --no-init            do not send terminal initialization string</div><div class="line"></div><div class="line">        --help               this message</div><div class="line">        --version            version and copyright information</div><div class="line"></div><div class="line">Please report bugs to mosh-devel@mit.edu.</div><div class="line">Mosh home page: http://mosh.mit.edu</div></pre></td></tr></table></figure>
<h3 id="Mosh远程连接"><a href="#Mosh远程连接" class="headerlink" title="Mosh远程连接"></a>Mosh远程连接</h3><p>Mosh使用的UDP协议连接的，使用的端口是从60000到61000，如果开启了防火墙服务器上就需要打开相应的UDP端口。一个Mosh连接就会打开一个UDP端口，比如建立两个连接就是60001、60002，以此类推。</p>
<p>假设Mosh使用60001 UDP端口，则在服务器上运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ iptables -I INPUT -p udp --dport 60001 -j ACCEPT</div></pre></td></tr></table></figure>
<p>这样就在服务器上打开60001这个UDP端口。当然，最好是把上一条命令写入服务器iptables的规则中，这样不必要每次都手动打开这个端口。</p>
<h3 id="Mosh的使用"><a href="#Mosh的使用" class="headerlink" title="Mosh的使用"></a>Mosh的使用</h3><ul>
<li>使用Mosh登录远程Linux服务器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mosh USERNAME@IP</div></pre></td></tr></table></figure>
<ul>
<li>指定开启的端口</li>
</ul>
<p>客户端进行连接时指定端口并开启端口，默认端口从60001开始开启。接下来就是从客户端连接，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 如果原来连接服务器是采用密码的方式登录，会提示输入密码，如果ssh已经做好了密钥认证，则可以直接连接</div><div class="line">$ mosh -p 60001 用户名@ip地址</div></pre></td></tr></table></figure>
<p><strong>注：p参数用于指定UDP端口。</strong></p>
<ul>
<li>采用SSH配置进行认证</li>
</ul>
<p>假如你的SSH连接设置公钥/私钥连接，比如<code>ssh hi-linux</code>即可直接连接服务器而无需输入密码，则mosh命令也可以以<code>mosh hi-linux</code>的形式连接，基本上，可以把它当作ssh命令的替换，只不过SSH开的是TCP口，Mosh开的是UDP口。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ mosh mike@hi-linux.com</div><div class="line">$ exit</div><div class="line">logout</div><div class="line">[mosh is exiting.]</div></pre></td></tr></table></figure>
<ul>
<li>指定服务端SSH开启的端口</li>
</ul>
<p>假设服务端开始的端口是2222</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mosh --ssh=&quot;ssh -p 2222&quot; 用户@服务器IP</div></pre></td></tr></table></figure>
<ul>
<li>如果私钥不在默认的目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mosh --ssh=&quot;~/bin/ssh -i ./identity&quot;  用户@服务器IP</div></pre></td></tr></table></figure>
<ul>
<li>如果服务端修改过SSH的端口，或需要指定单独的SSHKEY，可以通过<code>--ssh</code>参数的方式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mosh --ssh=&quot;ssh -i /home/dong.guo/.ssh/oozie -p 2222&quot;</div></pre></td></tr></table></figure>
<ul>
<li>采用临时Key的方式进行一次性认证</li>
</ul>
<p>先需要在服务端创建Key，然后客户端通过这个Key进行登录，该Key会在会话结束十分钟后自动失效。</p>
<p>创建一个临时的Key和端口供Client登录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ mosh-server</div><div class="line"></div><div class="line">MOSH CONNECT 60001 hNpGrd5rzRrfP47LQEizJw</div><div class="line">mosh-server (mosh 1.2.4)</div><div class="line">Copyright 2012 Keith Winstein &lt;mosh-devel@mit.edu&gt;</div><div class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.</div><div class="line">This is free software: you are free to change and redistribute it.</div><div class="line">There is NO WARRANTY, to the extent permitted by law.</div><div class="line">[mosh-server detached, pid = 27290]</div></pre></td></tr></table></figure>
<p>定义好MOSH_KEY的值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ export MOSH_KEY=hNpGrd5rzRrfP47LQEizJw</div></pre></td></tr></table></figure>
<p>使用临时Key进行登陆</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ mosh-client 192.168.92.128 60001</div><div class="line">$ exit</div><div class="line">logout</div><div class="line">[mosh is exiting.]</div></pre></td></tr></table></figure>
<p><strong>注：mosh-client后面只能跟服务器具体的IP地址和临时端口，不支持主机名或域名方式</strong></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Mosh是一款在大多数linux发行版的仓库中可以下载的一款小工具。虽然它有一些差异尤其是安全问题和额外的需求，它的功能，比如漫游后保持连接是一个加分点。我的建议是任何一个使用SSH的Linux用户都应该试试这个程序，Mosh值得一试。</p>
<p><strong>Mosh的优缺点</strong></p>
<ul>
<li>Mosh有额外的需求，比如需要允许UDP 直接连接，这在SSH不需要。</li>
<li>动态分配的端口范围是60000-61000。第一个打开的端口是分配好的。每个连接都需要一个端口。</li>
<li>默认的端口分配是一个严重的安全问题，尤其是在生产环境中。</li>
<li>支持IPv6连接，但是不支持IPv6漫游。</li>
<li>不支持回滚。</li>
<li>不支持X11转发。</li>
<li>不支持ssh-agent转发。</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="https://mosh.mit.edu/" target="_blank" rel="external">https://mosh.mit.edu/</a><br><a href="http://heylinux.com/archives/2955.html" target="_blank" rel="external">http://heylinux.com/archives/2955.html</a><br><a href="http://blog.szrf215.com/p/4b16d7c218db" target="_blank" rel="external">http://blog.szrf215.com/p/4b16d7c218db</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是Mosh&quot;&gt;&lt;a href=&quot;#什么是Mosh&quot; class=&quot;headerlink&quot; title=&quot;什么是Mosh&quot;&gt;&lt;/a&gt;什么是Mosh&lt;/h3&gt;&lt;p&gt;Mosh表示移动Shell(Mobile Shell)，是一个用于从客户端跨互联网连接远程服务器的命令行工具。它能用于SSH连接，但是比Secure Shell功能更多。它是一个类似于SSH而带有更多功能的应用。程序最初由Keith Winstein 编写，用于类Unix的操作系统中，发布于GNU GPL V3协议下。&lt;/p&gt;
&lt;p&gt;Mosh最大的特点是基于UDP方式传输，支持在服务端创建一个临时的Key供客户端一次性连接，退出后失效；也支持通过SSH的配置进行认证，但数据传输本身还是自身的UDP方式。&lt;/p&gt;
    
    </summary>
    
      <category term="SSH" scheme="http://www.hi-linux.com/categories/SSH/"/>
    
    
      <category term="Linux" scheme="http://www.hi-linux.com/tags/Linux/"/>
    
      <category term="SSH" scheme="http://www.hi-linux.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>Apache/Nginx通过UserAgent屏蔽蜘蛛和采集</title>
    <link href="http://www.hi-linux.com/posts/5492.html"/>
    <id>http://www.hi-linux.com/posts/5492.html</id>
    <published>2016-07-19T01:00:00.000Z</published>
    <updated>2017-01-22T10:13:02.038Z</updated>
    
    <content type="html"><![CDATA[<p>正规的搜索引擎的蜘蛛爬行我们的网站对于网站来说是有利的，但垃圾爬虫我们就需要屏蔽掉它们的访问，因为它们有的是人为来采集我们网站内容的，有的是SEO以及其他工具索引我们的网站数据建库进行分析的。它们不仅对网站内容不利，而且对于网站服务器也是一种负担。</p>
<p>即便bot支持,但实际情况是robots.txt 根本无法阻止那些垃圾蜘蛛的，好在垃圾爬虫基本上还是有一定特征的，比如可以根据UA分析。即可使用少量代码屏蔽掉。不过，如果UA伪造或UA变化等其他情况，可使用crontab对日志里面IP频率进行分析和屏蔽了。</p>
<h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><ul>
<li>通过修改.htaccess文件</li>
</ul>
<p>修改网站目录下.htaccess文件，添加如下代码即可(二种代码任选其一)。</p>
<p><strong>方法一</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RewriteEngine On</div><div class="line">RewriteCond %&#123;HTTP_USER_AGENT&#125; (^$|FeedDemon|Indy Library|Alexa Toolbar|AskTbFXTV|AhrefsBot|CrawlDaddy|CoolpadWebkit|Java|Feedly|UniversalFeedParser|ApacheBench|Microsoft URL Control|Swiftbot|ZmEu|oBot|jaunty|Python-urllib|lightDeckReports Bot|YYSpider|DigExt|HttpClient|MJ12bot|heritrix|EasouSpider|Ezooms) [NC]</div><div class="line">RewriteRule ^(.*)$ - [F]</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>方法二 </strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SetEnvIfNoCase ^User-Agent$ .*(FeedDemon|Indy Library|Alexa Toolbar|AskTbFXTV|AhrefsBot|CrawlDaddy|CoolpadWebkit|Java|Feedly|UniversalFeedParser|ApacheBench|Microsoft URL Control|Swiftbot|ZmEu|oBot|jaunty|Python-urllib|lightDeckReports Bot|YYSpider|DigExt|HttpClient|MJ12bot|heritrix|EasouSpider|Ezooms) BADBOT</div><div class="line">Order Allow,Deny</div><div class="line">Allow from all</div><div class="line">Deny from env=BADBOT</div></pre></td></tr></table></figure>
<ul>
<li>通过修改httpd.conf配置文件</li>
</ul>
<p>找到如下类似位置，根据以下代码新增/修改，然后重启Apache即可。</p>
<p><strong>方法一</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">DocumentRoot /var/www/html</div><div class="line">&lt;Directory &quot;/var/www/html&quot;&gt;</div><div class="line">SetEnvIfNoCase User-Agent &quot;.*(FeedDemon|Indy Library|Alexa Toolbar|AskTbFXTV|AhrefsBot|CrawlDaddy|CoolpadWebkit|Java|Feedly|UniversalFeedParser|ApacheBench|Microsoft URL Control|Swiftbot|ZmEu|oBot|jaunty|Python-urllib|lightDeckReports Bot|YYSpider|DigExt|HttpClient|MJ12bot|heritrix|EasouSpider|Ezooms)&quot; BADBOT</div><div class="line">        Order allow,deny</div><div class="line">        Allow from all</div><div class="line">        Deny from env=BADBOT</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure>
<p><strong>方法二</strong></p>
<p>根据UA,REFERER禁止爬虫，[G]返回410页面，[F]返回403页面。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;IfModule mod_rewrite.c&gt;</div><div class="line"> RewriteCond %&#123;HTTP_USER_AGENT&#125; (wget|curl|AhrefsBot|DotBot|MJ12bot|httrack|Findxbot|BLEXBot|WinHttpRequest|Go\s1.1\spackage\shttp|megaindex|BIDUBrowser|FunWebProducts|MSIE\s5|Add\sCatalog|SeznamBot|KomodiaBot|aiHitBot|MojeekBot|PhantomJS|SiteSucker|HTTrack|MegaIndex|BLEXBot|LinkpadBot|Findxbot|SEOkicks|OpenLinkProfiler|PhantomJS|Xenu|007ac9|sistrix|spbot|SiteExplorer|wotbox|ZumBot|ltx71|memoryBot|WBSearchBot|DomainAppender|Python|Aboundex|-crawler|WinHttpRequest|NerdyBot|ZmEu|xovibot) [NC,OR]</div><div class="line"> RewriteCond %&#123;HTTP_USER_AGENT&#125; ^$ [NC,OR] </div><div class="line"> RewriteCond %&#123;HTTP_USER_AGENT&#125; ^-$ [NC,OR]</div><div class="line"> RewriteCond %&#123;HTTP_REFERER&#125; .ru/$ [NC,OR]</div><div class="line"> RewriteCond %&#123;HTTP_REFERER&#125; (example.com) [NC]</div><div class="line"> RewriteRule .* - [G]</div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>
<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>进入到Nginx配置目录下(默认为/etc/nginx/conf.d目录)，将如下代码保存为agent_deny.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ cd /etc/nginx/conf.d</div><div class="line">$ vi agent_deny.conf</div><div class="line"></div><div class="line"></div><div class="line">#禁止Scrapy等工具的抓取</div><div class="line">if ($http_user_agent ~* (Scrapy|Curl|HttpClient)) &#123;</div><div class="line">     return 403;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#禁止指定UA及UA为空的访问</div><div class="line">if ($http_user_agent ~* &quot;WinHttp|WebZIP|FetchURL|node-superagent|java/|FeedDemon|Jullo|JikeSpider|Indy Library|Alexa Toolbar|AskTbFXTV|AhrefsBot|CrawlDaddy|Java|Feedly|Apache-HttpAsyncClient|UniversalFeedParser|ApacheBench|Microsoft URL Control|Swiftbot|ZmEu|oBot|jaunty|Python-urllib|lightDeckReports Bot|YYSpider|DigExt|HttpClient|MJ12bot|heritrix|EasouSpider|Ezooms|BOT/0.1|YandexBot|FlightDeckReports|Linguee Bot|^$&quot; ) &#123;</div><div class="line">     return 403;             </div><div class="line">&#125;</div><div class="line"></div><div class="line">#禁止非GET|HEAD|POST方式的抓取</div><div class="line">if ($request_method !~ ^(GET|HEAD|POST)$) &#123;</div><div class="line">    return 403;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，在网站相关配置中的server段插入如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include agent_deny.conf;</div></pre></td></tr></table></figure>
<p>保存后，执行如下命令，平滑重启nginx即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/nginx reload</div></pre></td></tr></table></figure>
<p>注：这里介绍的是通过判断UserAgent的方法进行限制，Nginx还可以通过<code>ngx_http_limit_conn_module</code>和<code>ngx_http_limit_req_module</code>模块来进行访问限制，在以后的文档中会进行这种方法的介绍。</p>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p>将如下方法放到贴到网站入口文件index.php中的第一个<code>&lt;?php</code>之后即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//获取UA信息</div><div class="line">$ua = $_SERVER[&apos;HTTP_USER_AGENT&apos;];</div><div class="line">//将恶意USER_AGENT存入数组</div><div class="line">$now_ua = array(&apos;FeedDemon &apos;,&apos;BOT/0.1 (BOT for JCE)&apos;,&apos;CrawlDaddy &apos;,&apos;Java&apos;,&apos;Feedly&apos;,&apos;UniversalFeedParser&apos;,&apos;ApacheBench&apos;,&apos;Swiftbot&apos;,&apos;ZmEu&apos;,&apos;Indy Library&apos;,&apos;oBot&apos;,&apos;jaunty&apos;,&apos;YandexBot&apos;,&apos;AhrefsBot&apos;,&apos;MJ12bot&apos;,&apos;WinHttp&apos;,&apos;EasouSpider&apos;,&apos;HttpClient&apos;,&apos;Microsoft URL Control&apos;,&apos;YYSpider&apos;,&apos;jaunty&apos;,&apos;Python-urllib&apos;,&apos;lightDeckReports Bot&apos;);</div><div class="line">//禁止空USER_AGENT，dedecms等主流采集程序都是空USER_AGENT，部分sql注入工具也是空USER_AGENT</div><div class="line">if(!$ua) &#123;</div><div class="line">header(&quot;Content-type: text/html; charset=utf-8&quot;);</div><div class="line">wp_die(&apos;请勿采集本站，因为采集的站长木有小JJ！&apos;);</div><div class="line">&#125;else&#123;</div><div class="line">    foreach($now_ua as $value )</div><div class="line">//判断是否是数组中存在的UA</div><div class="line">    if(eregi($value,$ua)) &#123;</div><div class="line">    header(&quot;Content-type: text/html; charset=utf-8&quot;);</div><div class="line">    wp_die(&apos;请勿采集本站，因为采集的站长木有小JJ！&apos;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="附录：UA收集"><a href="#附录：UA收集" class="headerlink" title="附录：UA收集"></a>附录：UA收集</h3><h4 id="常见搜索引擎爬虫的User-Agent"><a href="#常见搜索引擎爬虫的User-Agent" class="headerlink" title="常见搜索引擎爬虫的User-Agent"></a>常见搜索引擎爬虫的User-Agent</h4><p>百度爬虫</p>
<ul>
<li>Baiduspider+(+<a href="http://www.baidu.com/search/spider.htm”" target="_blank" rel="external">http://www.baidu.com/search/spider.htm”</a>)</li>
</ul>
<p>Google爬虫</p>
<ul>
<li>Mozilla/5.0 (compatible; Googlebot/2.1; +<a href="http://www.google.com/bot.html" target="_blank" rel="external">http://www.google.com/bot.html</a>)</li>
<li>Googlebot/2.1 (+<a href="http://www.googlebot.com/bot.html" target="_blank" rel="external">http://www.googlebot.com/bot.html</a>)</li>
<li>Googlebot/2.1 (+<a href="http://www.google.com/bot.html" target="_blank" rel="external">http://www.google.com/bot.html</a>)</li>
</ul>
<p>雅虎爬虫(分别是雅虎中国和美国总部的爬虫)</p>
<ul>
<li>Mozilla/5.0 (compatible; Yahoo! Slurp China; <a href="http://misc.yahoo.com.cn/help.html”" target="_blank" rel="external">http://misc.yahoo.com.cn/help.html”</a>)</li>
<li>Mozilla/5.0 (compatible; Yahoo! Slurp; <a href="http://help.yahoo.com/help/us/ysearch/slurp”" target="_blank" rel="external">http://help.yahoo.com/help/us/ysearch/slurp”</a>)</li>
</ul>
<p>新浪爱问爬虫</p>
<ul>
<li>iaskspider/2.0(+<a href="http://iask.com/help/help_index.html”" target="_blank" rel="external">http://iask.com/help/help_index.html”</a>)</li>
<li>Mozilla/5.0 (compatible; iaskspider/1.0; MSIE 6.0)</li>
</ul>
<p>搜狗爬虫</p>
<ul>
<li>Sogou web spider/3.0(+<a href="http://www.sogou.com/docs/help/webmasters.htm#07″" target="_blank" rel="external">http://www.sogou.com/docs/help/webmasters.htm#07″</a>)</li>
<li>Sogou Push Spider/3.0(+<a href="http://www.sogou.com/docs/help/webmasters.htm#07″" target="_blank" rel="external">http://www.sogou.com/docs/help/webmasters.htm#07″</a>)</li>
</ul>
<p>网易爬虫</p>
<ul>
<li>Mozilla/5.0 (compatible; YodaoBot/1.0; <a href="http://www.yodao.com/help/webmaster/spider/”" target="_blank" rel="external">http://www.yodao.com/help/webmaster/spider/”</a>; )</li>
</ul>
<p>MSN爬虫</p>
<ul>
<li>msnbot/1.0 (+<a href="http://search.msn.com/msnbot.htm”" target="_blank" rel="external">http://search.msn.com/msnbot.htm”</a>)</li>
</ul>
<h4 id="网络上常见的垃圾UA列表"><a href="#网络上常见的垃圾UA列表" class="headerlink" title="网络上常见的垃圾UA列表"></a>网络上常见的垃圾UA列表</h4><p>内容采集</p>
<ul>
<li>FeedDemon                </li>
<li>Java                  内容采集</li>
<li>Jullo                 内容采集</li>
<li>Feedly                内容采集</li>
<li>UniversalFeedParser   内容采集</li>
</ul>
<p>SQL注入</p>
<ul>
<li>BOT/0.1 (BOT for JCE) </li>
<li>CrawlDaddy      </li>
</ul>
<p>无用爬虫      </p>
<ul>
<li>EasouSpider           </li>
<li>Swiftbot              </li>
<li>YandexBot             </li>
<li>AhrefsBot             </li>
<li>jikeSpider            </li>
<li>MJ12bot               </li>
<li>YYSpider              </li>
<li>oBot                  </li>
</ul>
<p>CC攻击器</p>
<ul>
<li>ApacheBench           </li>
<li>WinHttp               </li>
</ul>
<p>TCP攻击</p>
<ul>
<li>HttpClient            </li>
</ul>
<p>扫描</p>
<ul>
<li>Microsoft URL Control </li>
<li>ZmEu phpmyadmin       </li>
<li>jaunty                </li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://zhangge.net/4458.html" target="_blank" rel="external">http://zhangge.net/4458.html</a><br><a href="https://seonoco.com/apache-nginx-shielded-spider-and-collection" target="_blank" rel="external">https://seonoco.com/apache-nginx-shielded-spider-and-collection</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正规的搜索引擎的蜘蛛爬行我们的网站对于网站来说是有利的，但垃圾爬虫我们就需要屏蔽掉它们的访问，因为它们有的是人为来采集我们网站内容的，有的是SEO以及其他工具索引我们的网站数据建库进行分析的。它们不仅对网站内容不利，而且对于网站服务器也是一种负担。&lt;/p&gt;
&lt;p&gt;即便bot支持,但实际情况是robots.txt 根本无法阻止那些垃圾蜘蛛的，好在垃圾爬虫基本上还是有一定特征的，比如可以根据UA分析。即可使用少量代码屏蔽掉。不过，如果UA伪造或UA变化等其他情况，可使用crontab对日志里面IP频率进行分析和屏蔽了。&lt;/p&gt;
&lt;h3 id=&quot;Apache&quot;&gt;&lt;a href=&quot;#Apache&quot; class=&quot;headerlink&quot; title=&quot;Apache&quot;&gt;&lt;/a&gt;Apache&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;通过修改.htaccess文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改网站目录下.htaccess文件，添加如下代码即可(二种代码任选其一)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法一&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;RewriteEngine On&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RewriteCond %&amp;#123;HTTP_USER_AGENT&amp;#125; (^$|FeedDemon|Indy Library|Alexa Toolbar|AskTbFXTV|AhrefsBot|CrawlDaddy|CoolpadWebkit|Java|Feedly|UniversalFeedParser|ApacheBench|Microsoft URL Control|Swiftbot|ZmEu|oBot|jaunty|Python-urllib|lightDeckReports Bot|YYSpider|DigExt|HttpClient|MJ12bot|heritrix|EasouSpider|Ezooms) [NC]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RewriteRule ^(.*)$ - [F]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://www.hi-linux.com/categories/Nginx/"/>
    
    
      <category term="Linux" scheme="http://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Nginx" scheme="http://www.hi-linux.com/tags/Nginx/"/>
    
      <category term="Apache" scheme="http://www.hi-linux.com/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 5.6密码强度审计插件使用说明</title>
    <link href="http://www.hi-linux.com/posts/49609.html"/>
    <id>http://www.hi-linux.com/posts/49609.html</id>
    <published>2016-06-30T01:00:00.000Z</published>
    <updated>2017-01-22T10:13:02.038Z</updated>
    
    <content type="html"><![CDATA[<p>相信很多人在日常工作中，都会遇到设置用户、密码之类的问题。很多人使用Keepass来生成和保存密码；但是很多人为了易于记忆，会选择相对简答的密码，这样在安全性方面，会存在非常严重的安全隐患。</p>
<p>在MySQL 5.6对密码的强度进行了加强，推出了<code>Password Validation Plugin</code>插件。可支持用户设置密码时强制使用强密码的要求。</p>
<p>所需MySQL版本：MySQL 5.6.6以上版本</p>
<a id="more"></a>
<h3 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h3><h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><h5 id="插件启用"><a href="#插件启用" class="headerlink" title="插件启用"></a>插件启用</h5><p>插件对应的库对象文件需在配置选项<code>plugin_dir</code>指定的目录中。可使用<code>--plugin-load=validate_password.so</code>，在Server启动时载入插件，或者将<code>plugin-load=validate_password.so</code>写入配置文件。也可以通过如下语句在Server运行时载入插件(会注册进mysql.plugins表)</p>
<ul>
<li>运行时载入插件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; INSTALL PLUGIN validate_password SONAME &apos;validate_password.so&apos;;</div></pre></td></tr></table></figure>
<ul>
<li>在配置文件中添加</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line"></div><div class="line">plugin-load=validate_password.so</div><div class="line">validate_password_policy=2</div><div class="line">validate-password=FORCE_PLUS_PERMANENT</div></pre></td></tr></table></figure>
<h5 id="插件关闭"><a href="#插件关闭" class="headerlink" title="插件关闭"></a>插件关闭</h5><p>关闭插件很简单，在MySQL配置文件(Centos系统下是<code>/etc/my.conf</code>)里面<code>[mysqld]</code>选项下面添加下面一条语句即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line"></div><div class="line">validate_password=off</div></pre></td></tr></table></figure>
<p>记得配置后要重启MySQL,在Shell下面运行下面两条语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ service mysqld stop</div><div class="line">$ service mysqld start</div></pre></td></tr></table></figure>
<h5 id="验证插件"><a href="#验证插件" class="headerlink" title="验证插件"></a>验证插件</h5><p>通过命令<code>SHOW PLUGINS</code>进行观察，应该观察到插件已启用。</p>
<p><img src="http://www.hi-linux.com/img/linux/pvp.png" alt=""></p>
<h4 id="测试插件"><a href="#测试插件" class="headerlink" title="测试插件"></a>测试插件</h4><ul>
<li>设置简单的密码，则MySQL数据库会报类似如下的错误</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SET PASSWORD = PASSWORD(&apos;abc&apos;);</div><div class="line">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</div></pre></td></tr></table></figure>
<ul>
<li>设置复杂密码，则可以成功修改。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SET PASSWORD = &apos;*0D3CED9BEC10A777AEC23CCC353A8C08A633045E&apos;;</div><div class="line">Query OK, 0 rows affected (0.01 sec)</div></pre></td></tr></table></figure>
<h3 id="插件相关说明"><a href="#插件相关说明" class="headerlink" title="插件相关说明"></a>插件相关说明</h3><ul>
<li>相关选项</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">validate-password=ON/OFF/FORCE/FORCE_PLUS_PERMANENT: 决定是否使用该插件(及强制/永久强制使用)。</div><div class="line">validate_password_dictionary_file：插件用于验证密码强度的字典文件路径。</div><div class="line">validate_password_length：密码最小长度。</div><div class="line">validate_password_mixed_case_count：密码至少要包含的小写字母个数和大写字母个数。</div><div class="line">validate_password_number_count：密码至少要包含的数字个数。</div><div class="line">validate_password_policy：密码强度检查等级，0/LOW、1/MEDIUM、2/STRONG。</div><div class="line">validate_password_special_char_count：密码至少要包含的特殊字符数。</div></pre></td></tr></table></figure>
<ul>
<li>关于<code>validate_password_policy</code>密码强度检查等级</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">0/LOW：只检查长度。</div><div class="line">1/MEDIUM：检查长度、数字、大小写、特殊字符。</div><div class="line">2/STRONG：检查长度、数字、大小写、特殊字符字典文件。</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://blog.csdn.net/zyz511919766/article/details/12752741" target="_blank" rel="external">http://blog.csdn.net/zyz511919766/article/details/12752741</a><br><a href="http://www.xuchanggang.cn/archives/1033.html" target="_blank" rel="external">http://www.xuchanggang.cn/archives/1033.html</a><br><a href="http://www.07net01.com/storage_networking/2016/01/1212625.html" target="_blank" rel="external">http://www.07net01.com/storage_networking/2016/01/1212625.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信很多人在日常工作中，都会遇到设置用户、密码之类的问题。很多人使用Keepass来生成和保存密码；但是很多人为了易于记忆，会选择相对简答的密码，这样在安全性方面，会存在非常严重的安全隐患。&lt;/p&gt;
&lt;p&gt;在MySQL 5.6对密码的强度进行了加强，推出了&lt;code&gt;Password Validation Plugin&lt;/code&gt;插件。可支持用户设置密码时强制使用强密码的要求。&lt;/p&gt;
&lt;p&gt;所需MySQL版本：MySQL 5.6.6以上版本&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://www.hi-linux.com/categories/MySQL/"/>
    
    
      <category term="Linux" scheme="http://www.hi-linux.com/tags/Linux/"/>
    
      <category term="MySQL" scheme="http://www.hi-linux.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Linux下开启缓存服务NSCD</title>
    <link href="http://www.hi-linux.com/posts/9461.html"/>
    <id>http://www.hi-linux.com/posts/9461.html</id>
    <published>2016-06-29T01:00:00.000Z</published>
    <updated>2017-01-22T10:13:02.038Z</updated>
    
    <content type="html"><![CDATA[<p>NSCD(Name Service Cache Daemon)是服务缓存守护进程，它为NIS和LDAP等服务提供更快的验证。不管是什么系统，缓存是一项非常重要的技术[或机制]，缓存的主旨就是提高客户端访问速度。</p>
<h3 id="NSCD安装"><a href="#NSCD安装" class="headerlink" title="NSCD安装"></a>NSCD安装</h3><ul>
<li>RHEL/CentOS</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum -y install nscd</div></pre></td></tr></table></figure>
<ul>
<li>Debian/Ubuntu</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apt-get install nscd</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="NSCD命令选项"><a href="#NSCD命令选项" class="headerlink" title="NSCD命令选项"></a>NSCD命令选项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ nscd  --help</div><div class="line">用法： nscd [选项...]</div><div class="line">Name Service Cache Daemon.</div><div class="line"></div><div class="line">  -d, --debug                Do not fork and display messages on the current</div><div class="line">                             tty</div><div class="line">  -f, --config-file=名称     从NAME中读取配置数据</div><div class="line">  -g, --statistics           Print current configuration statistics</div><div class="line">  -i, --invalidate=TABLE     Invalidate the specified cache</div><div class="line">  -K, --shutdown             关闭服务器</div><div class="line">  -t, --nthreads=NUMBER      启动 NUMBER 个线程</div><div class="line">  -?, --help                 给出该系统求助列表</div><div class="line">      --usage                给出简要的用法信息</div><div class="line">  -V, --version              打印程序版本号</div><div class="line"></div><div class="line">长选项的强制或可选参数对对应的短选项也是强制或可选的。</div><div class="line"></div><div class="line">For bug reporting instructions, please see:</div><div class="line">&lt;http://www.gnu.org/software/libc/bugs.html&gt;.</div></pre></td></tr></table></figure>
<h3 id="NSCD配置文件"><a href="#NSCD配置文件" class="headerlink" title="NSCD配置文件"></a>NSCD配置文件</h3><p>NSCD配置文件为<code>/etc/nscd.conf</code>，NSCD程序在启动的时候会读取<code>/etc/nscd.conf</code>文件，每一行指定一个属性和对应的值，或者指定一个服务和对应的值，#表示注释。有效的服务设定是：passwd, group, hosts, services, or netgroup五个。</p>
<p>NSCD配置文件相关参数解释</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">#设置日志文件</div><div class="line">logfile debug-file-name</div><div class="line"></div><div class="line">#设置debug记录的级别，默认是0</div><div class="line">debug-level value</div><div class="line"></div><div class="line">#程序启动时，等待进去请求的处理线程数，至少5个</div><div class="line">threads number</div><div class="line"></div><div class="line">#最大线程数，默认32</div><div class="line">max-threads number</div><div class="line"></div><div class="line">#nscd程序以哪个用户运行,如果设置了该选项，nscd将作为该用户运行，而不是作为root。如果每个用户都使用一个单独的缓存(-S参数)，将忽略该选项。</div><div class="line">server-user user</div><div class="line"></div><div class="line">#哪个用户可以请求统计用户</div><div class="line">stat-user user</div><div class="line"></div><div class="line">#在一个缓存项被删除之前允许使用的次数，默认是5</div><div class="line">reload-count unlimited | number</div><div class="line"></div><div class="line">#是否启用偏执模式，启用会导致nscd周期性重启，默认是no</div><div class="line">paranoia &lt;yes|no&gt;</div><div class="line"></div><div class="line">#如果启用偏执模式，设置的定期重启nscd的时间间隔，默认是3600秒</div><div class="line">restart-interval time</div><div class="line"></div><div class="line">#开启或者关闭服务缓存，默认是no</div><div class="line">enable-cache service &lt;yes|no&gt;</div><div class="line"></div><div class="line">#为成功请求的元素设置缓存TTL，单位是秒，值越大缓存命中率越高，降低平均响应时间，但会增加缓存的一致性问题</div><div class="line">positive-time-to-live service value</div><div class="line"></div><div class="line">#为失败查询元素设置缓存TTL，单位是秒，应保持小值，减小缓存一致性问题</div><div class="line">negative-time-to-live service value</div><div class="line"></div><div class="line">#内部的散列表大小，value应该保持一个素数以达到优化效果。默认值是211</div><div class="line">suggested-size service value</div><div class="line"></div><div class="line">#启用或者禁用检查文件是否属于指定的服务，这些文件是/etc/passwd、/etc/group、/etc/hosts、/etc/services、/etc/netgroup等</div><div class="line">check-files service &lt;yes|no&gt;</div><div class="line"></div><div class="line">#设置缓存在服务器重启后，仍旧能提供缓存服务，在使用偏执模式时有用，默认是no</div><div class="line">persistent service &lt;yes|no&gt;</div><div class="line"></div><div class="line">#为客户端共享nscd数据库在内存中做的映射，使客户端可以直接搜索，而不用每次都查询守护进行，默认是no</div><div class="line">shared service &lt;yes|no&gt;</div><div class="line"></div><div class="line">#该数据库的最大大小，单位是bytes，默认是33554432</div><div class="line">max-db-size service bytes</div><div class="line"></div><div class="line">#此选项仅使用于passwd和group服务</div><div class="line">auto-propagate service &lt;yes|no&gt;</div></pre></td></tr></table></figure>
<h3 id="NSCD使用实例"><a href="#NSCD使用实例" class="headerlink" title="NSCD使用实例"></a>NSCD使用实例</h3><h4 id="使用NSCD对DNS进行缓存"><a href="#使用NSCD对DNS进行缓存" class="headerlink" title="使用NSCD对DNS进行缓存"></a>使用NSCD对DNS进行缓存</h4><p><strong>DNS缓存在服务器上的作用</strong></p>
<p>在需要通过域名与外界进行数据交互的时候,dns缓存就派上用场了,它可以减少域名解析的时间,提高效率。例如以下情况</p>
<ul>
<li>使用爬虫采集网络上的页面数据,</li>
<li>使用auth2.0协议从其他平台(如微博或QQ)获取用户数据,</li>
<li>使用第三方支付接口,</li>
<li>使用短信通道下发短信等.</li>
</ul>
<p><strong>开启NSCD DNS缓存服务的优点和缺点</strong></p>
<ul>
<li>优点</li>
</ul>
<ol>
<li>本地缓存DNS解析信息，提供解析速度。</li>
<li>DNS服务挂了也没有问题，在缓存服务时间范围内，解析依旧正常。</li>
</ol>
<ul>
<li>缺点</li>
</ul>
<ol>
<li>DNS解析信息会滞后，如域名解析更改需要手动刷新缓存，NSCD不适合做实时的切换的应用，目前对于依赖DNS切换的服务，建议不要开启DNS缓存。DNS Cache作为普通的DNS解析Cache那是没问题的，如果你使用RDS云服务器，也不建议使用DNS缓存服务。</li>
</ol>
<p><strong>配置DNS缓存</strong></p>
<p>通过编辑<code>/etc/nscd.conf</code>文件，在其中增加如下一行可以开启本地DNS Cache</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">enable-cache hosts yes #这个服务除了dns缓存之外还可以缓存passwd,group,servers</div></pre></td></tr></table></figure>
<p>完整配置如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/nscd.conf</div><div class="line"></div><div class="line">logfile                 /var/log/nscd.log</div><div class="line">threads                 5</div><div class="line">max-threads             32</div><div class="line">server-user             nscd</div><div class="line">debug-level             0</div><div class="line">paranoia                no</div><div class="line">enable-cache            hosts           yes</div><div class="line">enable-cache            passwd          no</div><div class="line">enable-cache            group           no</div><div class="line">positive-time-to-live   hosts           60</div><div class="line">negative-time-to-live   hosts           20</div><div class="line">suggested-size          hosts           211</div><div class="line">check-files             hosts           yes</div><div class="line">persistent              hosts           yes</div><div class="line">shared                  hosts           yes</div><div class="line">max-db-size             hosts           33554432</div></pre></td></tr></table></figure>
<ul>
<li>启动NSCD进程</li>
</ul>
<p>默认该服务在Redhat或Centos下是关闭的，可以通过以下指令开启</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ service nscd start</div></pre></td></tr></table></figure>
<p>加入自启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chkconfig nscd on</div></pre></td></tr></table></figure>
<p>查看进程，如下所示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ps aux | grep nscd</div><div class="line">nscd       1284  0.1  0.3 708056  1580 ?        Ssl  23:37   0:00 /usr/sbin/nscd</div></pre></td></tr></table></figure>
<p>说明已经正常运行了。</p>
<ul>
<li>NSCD服务查看和清除</li>
</ul>
<p>NSCD缓存DB文件在<code>/var/db/nscd</code>下。可以通过<code>nscd -g</code>查看统计的信息，这里列出部分：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">$ nscd -g</div><div class="line"></div><div class="line">nscd 配置：</div><div class="line"></div><div class="line">              0  服务器调试级别</div><div class="line">             4s  server runtime</div><div class="line">              5  current number of threads</div><div class="line">             32  maximum number of threads</div><div class="line">              0  number of times clients had to wait</div><div class="line">             no  paranoia mode enabled</div><div class="line">           3600  restart internal</div><div class="line">              5  reload count</div><div class="line"></div><div class="line">... 省略输出信息若干 ...</div><div class="line"></div><div class="line">hosts cache:</div><div class="line"></div><div class="line">            yes  cache is enabled</div><div class="line">            yes  cache is persistent</div><div class="line">            yes  cache is shared</div><div class="line">            211  suggested size</div><div class="line">         216064  total data pool size</div><div class="line">              0  used data pool size</div><div class="line">             60  seconds time to live for positive entries</div><div class="line">             20  seconds time to live for negative entries</div><div class="line">              0  cache hits on positive entries</div><div class="line">              0  cache hits on negative entries</div><div class="line">              0  cache misses on positive entries</div><div class="line">              0  cache misses on negative entries</div><div class="line">              0% cache hit rate</div><div class="line">              0  current number of cached values</div><div class="line">              0  maximum number of cached values</div><div class="line">              0  maximum chain length searched</div><div class="line">              0  number of delays on rdlock</div><div class="line">              0  number of delays on wrlock</div><div class="line">              0  memory allocations failed</div><div class="line">            yes  check /etc/hosts for changes</div><div class="line"></div><div class="line">... 省略输出信息若干 ...</div></pre></td></tr></table></figure>
<ul>
<li>清除指定类型缓存</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ nscd -i passwd</div><div class="line">$ nscd -i group</div><div class="line">$ nscd -i hosts</div></pre></td></tr></table></figure>
<p>除了上面的方法，重启NSCD服务同样可以达到清理Cache的目的。</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://my.oschina.net/guol/blog/700569" target="_blank" rel="external">http://my.oschina.net/guol/blog/700569</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NSCD(Name Service Cache Daemon)是服务缓存守护进程，它为NIS和LDAP等服务提供更快的验证。不管是什么系统，缓存是一项非常重要的技术[或机制]，缓存的主旨就是提高客户端访问速度。&lt;/p&gt;
&lt;h3 id=&quot;NSCD安装&quot;&gt;&lt;a href=&quot;#NSCD安装&quot; class=&quot;headerlink&quot; title=&quot;NSCD安装&quot;&gt;&lt;/a&gt;NSCD安装&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;RHEL/CentOS&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ yum -y install nscd&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Debian/Ubuntu&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ apt-get install nscd&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://www.hi-linux.com/tags/Linux/"/>
    
      <category term="NSCD" scheme="http://www.hi-linux.com/tags/NSCD/"/>
    
  </entry>
  
  <entry>
    <title>在Nginx使用Lua扩展功能</title>
    <link href="http://www.hi-linux.com/posts/24.html"/>
    <id>http://www.hi-linux.com/posts/24.html</id>
    <published>2016-06-28T01:00:00.000Z</published>
    <updated>2017-01-22T10:13:02.042Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是LUA"><a href="#什么是LUA" class="headerlink" title="什么是LUA"></a>什么是LUA</h3><p>Lua从一开始就是作为一门方便嵌入(其它应用程序)并可扩展的轻量级脚本语言来设计的，因此她一直遵从着简单、小巧、可移植、快速的原则，官方实现完全采用ANSI C编写，能以C程序库的形式嵌入到宿主程序中。</p>
<p>Lua脚本是一个很轻量级的脚本，也是号称性能最高的脚本，用在很多需要性能的地方，比如：游戏脚本，Nginx，Wireshark的脚本。</p>
<a id="more"></a>
<h3 id="什么是Nginx-Lua-Module"><a href="#什么是Nginx-Lua-Module" class="headerlink" title="什么是Nginx_Lua_Module"></a>什么是Nginx_Lua_Module</h3><p><code>Nginx_Lua_Module</code>是由淘宝的工程师清无(王晓哲)和春来(章亦春)所开发的Nginx第三方模块,它能将Lua语言嵌入到Nginx配置中,从而使用Lua就极大增强了Nginx的能力。</p>
<h3 id="编译Nginx并加载Lua"><a href="#编译Nginx并加载Lua" class="headerlink" title="编译Nginx并加载Lua"></a>编译Nginx并加载Lua</h3><h4 id="安装基础编译环境"><a href="#安装基础编译环境" class="headerlink" title="安装基础编译环境"></a>安装基础编译环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum -y groupinstall &apos;Development Tools&apos;</div></pre></td></tr></table></figure>
<h4 id="下载相关软件源码包"><a href="#下载相关软件源码包" class="headerlink" title="下载相关软件源码包"></a>下载相关软件源码包</h4><p>下载当前最新的Nginx、Luajit和Ngx_devel_kit(NDK)，以及Lua-nginx-module源码包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cd /usr/local/src</div><div class="line">$ wget http://nginx.org/download/nginx-1.10.1.tar.gz</div><div class="line">$ wget http://luajit.org/download/LuaJIT-2.0.4.tar.gz</div><div class="line">$ wget https://github.com/simpl/ngx_devel_kit/archive/v0.3.0.tar.gz</div><div class="line">$ wget https://github.com/openresty/lua-nginx-module/archive/v0.10.5.tar.gz</div></pre></td></tr></table></figure>
<h4 id="创建Nginx运行的普通用户"><a href="#创建Nginx运行的普通用户" class="headerlink" title="创建Nginx运行的普通用户"></a>创建Nginx运行的普通用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ useradd -s /sbin/nologin -M nginx</div></pre></td></tr></table></figure>
<h4 id="安装LuaJIT"><a href="#安装LuaJIT" class="headerlink" title="安装LuaJIT"></a>安装LuaJIT</h4><p>Luajit是Lua即时编译器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ tar zxvf LuaJIT-2.0.4.tar.gz</div><div class="line">$ cd LuaJIT-2.0.4</div><div class="line">$ make &amp;&amp; make install</div></pre></td></tr></table></figure>
<h4 id="安装Nginx并加载模块"><a href="#安装Nginx并加载模块" class="headerlink" title="安装Nginx并加载模块"></a>安装Nginx并加载模块</h4><p>让Nginx支持Lua有两种方法：一是使用Luajit即时编译器，二是使用Lua编译器。推荐使用Luajit，因为效率高。其中Ngx_devel_kit的作用有2个：一是开发用的，二是可以在错误日志中记录Nginx处理阶段信息(rewrite phase,access phase,content phase)，需要将错误日志级别调高，调试时可以设置成Debug。</p>
<ul>
<li>解压Nginx、NDK和Lua-Nginx-Module源码包</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ tar zxvf nginx-1.10.1.tar.gz</div><div class="line">$ tar zxvf v0.3.0.tar.gz</div><div class="line">$ tar zxvf v0.10.5.tar.gz</div></pre></td></tr></table></figure>
<ul>
<li>安装依赖包</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum -y install openssl openssl-devel pcre pcre-devel</div></pre></td></tr></table></figure>
<ul>
<li>编译安装Nginx</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cd nginx-1.10.1</div><div class="line">$ export LUAJIT_LIB=/usr/local/lib</div><div class="line">$ export LUAJIT_INC=/usr/local/include/luajit-2.0</div><div class="line">$ ./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-file-aio --with-http_dav_module --add-module=../ngx_devel_kit-0.3.0/ --add-module=../lua-nginx-module-0.10.5/</div><div class="line">$ make &amp;&amp; make install</div></pre></td></tr></table></figure>
<ul>
<li>创建软连接</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ln -s /usr/local/lib/libluajit-5.1.so.2 /lib64/libluajit-5.1.so.2</div></pre></td></tr></table></figure>
<ul>
<li>如果不创建会出现类似以下错误</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ nginx -t</div><div class="line">/usr/local/nginx/sbin/nginx: error while loading shared libraries: libluajit-5.1.so.2: cannot open shared object file: No such file or directory</div></pre></td></tr></table></figure>
<h4 id="测试是否支持LUA"><a href="#测试是否支持LUA" class="headerlink" title="测试是否支持LUA"></a>测试是否支持LUA</h4><ul>
<li>修改nginx.conf文件，增加如下配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ vim /usr/local/nginx/conf/nginx.conf</div><div class="line"></div><div class="line">        location /hello &#123;</div><div class="line">        default_type &apos;text/plain&apos;;</div><div class="line">        content_by_lua &apos;ngx.say(&quot;hello,lua&quot;)&apos;;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<ul>
<li>配置完成后，类似如下这样</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  localhost;</div><div class="line"></div><div class="line">    #charset koi8-r;</div><div class="line"></div><div class="line">    #access_log  logs/host.access.log  main;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        root   html;</div><div class="line">        index  index.html index.htm;</div><div class="line">    &#125;</div><div class="line">		</div><div class="line">    location /hello &#123;</div><div class="line">    default_type &apos;text/plain&apos;;</div><div class="line">    content_by_lua &apos;ngx.say(&quot;hello,lua&quot;)&apos;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    #error_page  404              /404.html;</div><div class="line"></div><div class="line">    # redirect server error pages to the static page /50x.html</div><div class="line">    #</div><div class="line">    error_page   500 502 503 504  /50x.html;</div><div class="line">    location = /50x.html &#123;</div><div class="line">        root   html;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>检查配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ /usr/local/nginx/sbin/nginx  -t</div><div class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</div><div class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</div></pre></td></tr></table></figure>
<ul>
<li>启动Nginx</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /usr/local/nginx/sbin/nginx</div></pre></td></tr></table></figure>
<p>用浏览器访问<code>http://IP/hello</code>，页面输出<code>hello,lua</code>表示已正确支持LUA。</p>
<h3 id="创建启动脚本"><a href="#创建启动脚本" class="headerlink" title="创建启动脚本"></a>创建启动脚本</h3><p>使用命令行直接运行Nginx较为麻烦，因此使用脚本来控制Nginx的启动、关闭、重载更加合理一些。</p>
<ul>
<li>适用于CentOS 6/CentOS 5</li>
</ul>
<p><a href="https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/" target="_blank" rel="external">Nginx Wiki</a>网站已经有这个脚本(CentOS)，拿来稍做修改即可使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/init.d/nginx</div><div class="line"></div><div class="line">#!/bin/sh</div><div class="line">#</div><div class="line"># nginx - this script starts and stops the nginx daemon</div><div class="line">#</div><div class="line"># chkconfig:   - 85 15</div><div class="line"># description:  NGINX is an HTTP(S) server, HTTP(S) reverse \</div><div class="line">#               proxy and IMAP/POP3 proxy server</div><div class="line"># processname: nginx</div><div class="line"># config:      /usr/local/nginx/conf/nginx.conf</div><div class="line"># config:      /etc/sysconfig/nginx</div><div class="line"># pidfile:     /var/run/nginx.pid</div><div class="line"></div><div class="line"># Source function library.</div><div class="line">. /etc/rc.d/init.d/functions</div><div class="line"></div><div class="line"># Source networking configuration.</div><div class="line">. /etc/sysconfig/network</div><div class="line"></div><div class="line"># Check that networking is up.</div><div class="line">[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;&amp; exit 0</div><div class="line"></div><div class="line">nginx=&quot;/usr/local/nginx/sbin/nginx&quot;</div><div class="line">prog=$(basename $nginx)</div><div class="line"></div><div class="line">NGINX_CONF_FILE=&quot;/usr/local/nginx/conf/nginx.conf&quot;</div><div class="line"></div><div class="line">[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx</div><div class="line"></div><div class="line">lockfile=/var/lock/subsys/nginx</div><div class="line"></div><div class="line">make_dirs() &#123;</div><div class="line">   # make required directories</div><div class="line">   user=`$nginx -V 2&gt;&amp;1 | grep &quot;configure arguments:&quot; | sed &apos;s/[^*]*--user=\([^ ]*\).*/\1/g&apos; -`</div><div class="line">   if [ -z &quot;`grep $user /etc/passwd`&quot; ]; then</div><div class="line">       useradd -M -s /bin/nologin $user</div><div class="line">   fi</div><div class="line">   options=`$nginx -V 2&gt;&amp;1 | grep &apos;configure arguments:&apos;`</div><div class="line">   for opt in $options; do</div><div class="line">       if [ `echo $opt | grep &apos;.*-temp-path&apos;` ]; then</div><div class="line">           value=`echo $opt | cut -d &quot;=&quot; -f 2`</div><div class="line">           if [ ! -d &quot;$value&quot; ]; then</div><div class="line">               # echo &quot;creating&quot; $value</div><div class="line">               mkdir -p $value &amp;&amp; chown -R $user $value</div><div class="line">           fi</div><div class="line">       fi</div><div class="line">   done</div><div class="line">&#125;</div><div class="line"></div><div class="line">start() &#123;</div><div class="line">    [ -x $nginx ] || exit 5</div><div class="line">    [ -f $NGINX_CONF_FILE ] || exit 6</div><div class="line">    make_dirs</div><div class="line">    echo -n $&quot;Starting $prog: &quot;</div><div class="line">    daemon $nginx -c $NGINX_CONF_FILE</div><div class="line">    retval=$?</div><div class="line">    echo</div><div class="line">    [ $retval -eq 0 ] &amp;&amp; touch $lockfile</div><div class="line">    return $retval</div><div class="line">&#125;</div><div class="line"></div><div class="line">stop() &#123;</div><div class="line">    echo -n $&quot;Stopping $prog: &quot;</div><div class="line">    killproc $prog -QUIT</div><div class="line">    retval=$?</div><div class="line">    echo</div><div class="line">    [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile</div><div class="line">    return $retval</div><div class="line">&#125;</div><div class="line"></div><div class="line">restart() &#123;</div><div class="line">    configtest || return $?</div><div class="line">    stop</div><div class="line">    sleep 1</div><div class="line">    start</div><div class="line">&#125;</div><div class="line"></div><div class="line">reload() &#123;</div><div class="line">    configtest || return $?</div><div class="line">    echo -n $&quot;Reloading $prog: &quot;</div><div class="line">    killproc $nginx -HUP</div><div class="line">    RETVAL=$?</div><div class="line">    echo</div><div class="line">&#125;</div><div class="line"></div><div class="line">force_reload() &#123;</div><div class="line">    restart</div><div class="line">&#125;</div><div class="line"></div><div class="line">configtest() &#123;</div><div class="line">  $nginx -t -c $NGINX_CONF_FILE</div><div class="line">&#125;</div><div class="line"></div><div class="line">rh_status() &#123;</div><div class="line">    status $prog</div><div class="line">&#125;</div><div class="line"></div><div class="line">rh_status_q() &#123;</div><div class="line">    rh_status &gt;/dev/null 2&gt;&amp;1</div><div class="line">&#125;</div><div class="line"></div><div class="line">case &quot;$1&quot; in</div><div class="line">    start)</div><div class="line">        rh_status_q &amp;&amp; exit 0</div><div class="line">        $1</div><div class="line">        ;;</div><div class="line">    stop)</div><div class="line">        rh_status_q || exit 0</div><div class="line">        $1</div><div class="line">        ;;</div><div class="line">    restart|configtest)</div><div class="line">        $1</div><div class="line">        ;;</div><div class="line">    reload)</div><div class="line">        rh_status_q || exit 7</div><div class="line">        $1</div><div class="line">        ;;</div><div class="line">    force-reload)</div><div class="line">        force_reload</div><div class="line">        ;;</div><div class="line">    status)</div><div class="line">        rh_status</div><div class="line">        ;;</div><div class="line">    condrestart|try-restart)</div><div class="line">        rh_status_q || exit 0</div><div class="line">            ;;</div><div class="line">    *)</div><div class="line">        echo $&quot;Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;&quot;</div><div class="line">        exit 2</div><div class="line">esac</div></pre></td></tr></table></figure>
<p><strong>增加执行权限</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chmod +x /etc/init.d/nginx</div></pre></td></tr></table></figure>
<p><strong>使用下面的指令来控制Nginx</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 启动Nginx</div><div class="line">$ /etc/init.d/nginx start</div><div class="line"></div><div class="line"># 重启Nginx</div><div class="line">$ /etc/init.d/nginx restart</div><div class="line"></div><div class="line"># 停止Nginx</div><div class="line">$ /etc/init.d/nginx stop</div><div class="line"></div><div class="line"># 重新加载Nginx配置文件</div><div class="line">$ /etc/init.d/nginx reload</div></pre></td></tr></table></figure>
<ul>
<li>适用于Centos 7 </li>
</ul>
<p>由于Centos 7采用了Systemd管理服务进程，故管理的方法与Centos 6之前不太一样。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$ vim /usr/lib/systemd/system/nginx.service</div><div class="line"></div><div class="line"># 输入下面内容，并保存。</div><div class="line"></div><div class="line">[Unit]</div><div class="line">Description=nginx - high performance web server</div><div class="line">Documentation=http://nginx.org/en/docs/</div><div class="line">After=network.target remote-fs.target nss-lookup.target</div><div class="line">  </div><div class="line">[Service]</div><div class="line">Type=forking</div><div class="line">PIDFile=/usr/local/nginx/logs/nginx.pid</div><div class="line">ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf</div><div class="line">ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</div><div class="line">ExecReload=/bin/kill -s HUP $MAINPID</div><div class="line">ExecStop=/bin/kill -s QUIT $MAINPID</div><div class="line">PrivateTmp=true</div><div class="line">  </div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure>
<p><strong>注意下面参数的路径，根据实际情况修改。</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">PIDFile=/usr/local/nginx/logs/nginx.pid</div><div class="line">ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf</div><div class="line">ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure>
<p><strong>修改权限</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chmod +x /usr/lib/systemd/system/nginx.service</div></pre></td></tr></table></figure>
<p><strong>使用下面的指令来控制Nginx</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"># 启动Nginx</div><div class="line">$ systemctl start nginx.service</div><div class="line"></div><div class="line"># 重启Nginx</div><div class="line">$ systemctl restart nginx.service</div><div class="line"></div><div class="line"># 停止Nginx</div><div class="line">$ systemctl stop nginx.service</div><div class="line"></div><div class="line"># 重新加载Nginx配置文件</div><div class="line">$ systemctl reload nginx.service</div><div class="line"></div><div class="line"># 开机运行Nginx</div><div class="line">$ systemctl enable nginx.service</div><div class="line"></div><div class="line"># 取消开机运行Nginx</div><div class="line">$ systemctl disable nginx.service </div><div class="line"></div><div class="line"># 查询Nginx是否开机启动</div><div class="line">$ systemctl is-enabled nginx.service</div><div class="line"></div><div class="line"># 查询Nginx运行状态</div><div class="line">$ systemctl status nginx.service</div><div class="line"></div><div class="line"># 显示Nginx日志</div><div class="line">$ journalctl -f -u nginx.service</div><div class="line"></div><div class="line"># 显示启动失败的服务</div><div class="line">$ systemctl --failed</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://my.oschina.net/liucao/blog/470344" target="_blank" rel="external">http://my.oschina.net/liucao/blog/470344</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是LUA&quot;&gt;&lt;a href=&quot;#什么是LUA&quot; class=&quot;headerlink&quot; title=&quot;什么是LUA&quot;&gt;&lt;/a&gt;什么是LUA&lt;/h3&gt;&lt;p&gt;Lua从一开始就是作为一门方便嵌入(其它应用程序)并可扩展的轻量级脚本语言来设计的，因此她一直遵从着简单、小巧、可移植、快速的原则，官方实现完全采用ANSI C编写，能以C程序库的形式嵌入到宿主程序中。&lt;/p&gt;
&lt;p&gt;Lua脚本是一个很轻量级的脚本，也是号称性能最高的脚本，用在很多需要性能的地方，比如：游戏脚本，Nginx，Wireshark的脚本。&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://www.hi-linux.com/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://www.hi-linux.com/tags/Nginx/"/>
    
      <category term="Lua" scheme="http://www.hi-linux.com/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>如何解决Firefox&amp;Chrome下无法访问特定端口</title>
    <link href="http://www.hi-linux.com/posts/21003.html"/>
    <id>http://www.hi-linux.com/posts/21003.html</id>
    <published>2016-06-27T01:00:01.000Z</published>
    <updated>2017-01-22T10:13:02.042Z</updated>
    
    <content type="html"><![CDATA[<p>在做测试、调试时我们会给Web服务器(如Tomcat、Nginx)等设置一些特殊的访问端口，比如<code>87,6666,556,6667</code>等。</p>
<p>如果用Chorme访问就会报类似错误，如下所示： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">错误312(net：：ERR_UNSAFE_PORT)</div></pre></td></tr></table></figure>
<p>如果用Firefox访问就会报类似错误，如下所示： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">此地址访问受限，此地址使用了一个通常用于网络浏览以外目的的端口。出于安全原因，Firefox 取消了该请求。</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>如果一定要使用上述端口，可使用以下的方法解决：</p>
<ul>
<li>Firefox</li>
</ul>
<p>在Firefox地址栏输入<code>about:config</code>，然后在右键新建一个字符串键<code>network.security.ports.banned.override</code>，值就是将需访问网站的端口号即可。如有多个就半角逗号隔开，例：<code>87,6666,556,6667</code>。在能保证安全的前提下，还简化成这样写<code>0-65535</code>。这样就可以浏览任意端口的网站了。</p>
<ul>
<li>Google Chrome</li>
</ul>
<p>右键单击Chrome快捷方式&gt;&gt;选择属性&gt;&gt;在”目标”对应文本框中添加如下参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--explicitly-allowed-ports=xxx (xxx为目标端口号)</div></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot; --explicitly-allowed-ports=87,6666,556,6667</div></pre></td></tr></table></figure>
<p>Chrome默认支持的端口有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">HTTP: 80, 81, 1025-65535</div><div class="line">HTTPS: 443, 563, 8443 </div><div class="line">FTP: 21</div></pre></td></tr></table></figure>
<ul>
<li>附录</li>
</ul>
<p>Google Chrome 默认非安全端口列表，虽然以上方法可以解决问题，但建议尽量避免以下端口：</p>
<blockquote>
<p>  1,    // tcpmux<br>  7,    // echo<br>  9,    // discard<br>  11,   // systat<br>  13,   // daytime<br>  15,   // netstat<br>  17,   // qotd<br>  19,   // chargen<br>  20,   // ftp data<br>  21,   // ftp access<br>  22,   // ssh<br>  23,   // telnet<br>  25,   // smtp<br>  37,   // time<br>  42,   // name<br>  43,   // nicname<br>  53,   // domain<br>  77,   // priv-rjs<br>  79,   // finger<br>  87,   // ttylink<br>  95,   // supdup<br>  101,  // hostriame<br>  102,  // iso-tsap<br>  103,  // gppitnp<br>  104,  // acr-nema<br>  109,  // pop2<br>  110,  // pop3<br>  111,  // sunrpc<br>  113,  // auth<br>  115,  // sftp<br>  117,  // uucp-path<br>  119,  // nntp<br>  123,  // NTP<br>  135,  // loc-srv /epmap<br>  139,  // netbios<br>  143,  // imap2<br>  179,  // BGP<br>  389,  // ldap<br>  465,  // smtp+ssl<br>  512,  // print / exec<br>  513,  // login<br>  514,  // shell<br>  515,  // printer<br>  526,  // tempo<br>  530,  // courier<br>  531,  // chat<br>  532,  // netnews<br>  540,  // uucp<br>  556,  // remotefs<br>  563,  // nntp+ssl<br>  587,  // stmp+ssl<br>  601,  // Reliable Syslog Service<br>  636,  // ldap+ssl<br>  993,  // ldap+ssl<br>  995,  // pop3+ssl<br>  2049, // nfs<br>  3659, // apple-sasl / PasswordServer<br>  4045, // lockd<br>  6000, // X11<br>  6665, // Alternate IRC [Apple addition]<br>  6666, // Alternate IRC [Apple addition]<br>  6667, // Standard IRC [Apple addition]<br>  6668, // Alternate IRC [Apple addition]<br>  6669, // Alternate IRC [Apple addition]</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做测试、调试时我们会给Web服务器(如Tomcat、Nginx)等设置一些特殊的访问端口，比如&lt;code&gt;87,6666,556,6667&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;如果用Chorme访问就会报类似错误，如下所示： &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;错误312(net：：ERR_UNSAFE_PORT)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果用Firefox访问就会报类似错误，如下所示： &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;此地址访问受限，此地址使用了一个通常用于网络浏览以外目的的端口。出于安全原因，Firefox 取消了该请求。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技巧" scheme="http://www.hi-linux.com/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Chrome" scheme="http://www.hi-linux.com/tags/Chrome/"/>
    
      <category term="Firefox" scheme="http://www.hi-linux.com/tags/Firefox/"/>
    
  </entry>
  
  <entry>
    <title>Linux压力测试软件Stress使用指南</title>
    <link href="http://www.hi-linux.com/posts/59095.html"/>
    <id>http://www.hi-linux.com/posts/59095.html</id>
    <published>2016-06-27T01:00:00.000Z</published>
    <updated>2017-01-22T10:13:02.038Z</updated>
    
    <content type="html"><![CDATA[<p>为了测试服务器的负载情况，给大家推荐Stress这个压力测试工具。Stress是一个Posix系统下生成Cpu/Menory/IO/Disk负载的工具。 </p>
<p>项目址址: <a href="http://weather.ou.edu/~apw/projects/stress/" target="_blank" rel="external">http://weather.ou.edu/~apw/projects/stress/</a></p>
<a id="more"></a>
<h3 id="Stress安装"><a href="#Stress安装" class="headerlink" title="Stress安装"></a>Stress安装</h3><p>CentOS 7</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 启用三方源</div><div class="line">$ rpm  -ivh http://apt.sw.be/redhat/el7/en/x86_64/rpmforge/RPMS/rpmforge-release-0.5.3-1.el7.rf.x86_64.rpm</div><div class="line"></div><div class="line"># 安装Stress</div><div class="line">$ yum install stress</div></pre></td></tr></table></figure>
<p>CentOS 6</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 启用三方源</div><div class="line">$ yum install epel-release</div><div class="line"></div><div class="line"># 安装Stress</div><div class="line">$ yum install stress</div></pre></td></tr></table></figure>
<h3 id="Stress参数说明"><a href="#Stress参数说明" class="headerlink" title="Stress参数说明"></a>Stress参数说明</h3><ul>
<li>Stress使用语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Usage: stress [OPTION [ARG]] ...</div><div class="line"> -?, --help         show this help statement</div><div class="line">     --version      show version statement</div><div class="line"> -v, --verbose      be verbose</div><div class="line"> -q, --quiet        be quiet</div><div class="line"> -n, --dry-run      show what would have been done</div><div class="line"> -t, --timeout N    timeout after N seconds</div><div class="line">     --backoff N    wait factor of N microseconds before work starts</div><div class="line"> -c, --cpu N        spawn N workers spinning on sqrt()</div><div class="line"> -i, --io N         spawn N workers spinning on sync()</div><div class="line"> -m, --vm N         spawn N workers spinning on malloc()/free()</div><div class="line">     --vm-bytes B   malloc B bytes per vm worker (default is 256MB)</div><div class="line">     --vm-stride B  touch a byte every B bytes (default is 4096)</div><div class="line">     --vm-hang N    sleep N secs before free (default is none, 0 is inf)</div><div class="line">     --vm-keep      redirty memory instead of freeing and reallocating</div><div class="line"> -d, --hdd N        spawn N workers spinning on write()/unlink()</div><div class="line">     --hdd-bytes B  write B bytes per hdd worker (default is 1GB)</div><div class="line">     --hdd-noclean  do not unlink files created by hdd workers</div><div class="line"></div><div class="line">Example: stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 10s</div></pre></td></tr></table></figure>
<ul>
<li>Stress参数说明</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">-? 显示帮助信息</div><div class="line">-v 显示版本号</div><div class="line">-q 不显示运行信息</div><div class="line">-n，--dry-run 显示已经完成的指令执行情况</div><div class="line">-t --timeout N 指定运行N秒后停止</div><div class="line">   --backoff N 等待N微妙后开始运行</div><div class="line">-c --cpu 产生n个进程 每个进程都反复不停的计算随机数的平方根</div><div class="line">-i --io  产生n个进程 每个进程反复调用sync()，sync()用于将内存上的内容写到硬盘上</div><div class="line">-m --vm n 产生n个进程,每个进程不断调用内存分配malloc和内存释放free函数</div><div class="line">   --vm-bytes B 指定malloc时内存的字节数 (默认256MB)</div><div class="line">   --vm-hang N 指示每个消耗内存的进程在分配到内存后转入休眠状态，与正常的无限分配和释放内存的处理相反，这有利于模拟只有少量内存的机器</div><div class="line">-d --hadd n 产生n个执行write和unlink函数的进程</div><div class="line">   --hadd-bytes B 指定写的字节数，默认是1GB</div><div class="line">   --hadd-noclean 不要将写入随机ASCII数据的文件Unlink</div><div class="line">   </div><div class="line">时间单位可以为秒s，分m，小时h，天d，年y，文件大小单位可以为K，M，G</div></pre></td></tr></table></figure>
<h3 id="Stress使用实例"><a href="#Stress使用实例" class="headerlink" title="Stress使用实例"></a>Stress使用实例</h3><ul>
<li>产生13个cpu进程4个io进程1分钟后停止运行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ stress -c 13 -i 4 --verbose --timeout 1m</div></pre></td></tr></table></figure>
<ul>
<li>产生3个cpu进程、3个io进程、2个10M的malloc()/free()进程，并且vm进程中malloc的字节不释放</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ stress --cpu 3 --io 3 --vm 2 --vm-bytes 10000000 --vm-keep --verbose</div></pre></td></tr></table></figure>
<ul>
<li>测试硬盘，通过mkstemp()生成800K大小的文件写入硬盘，对CPU、内存的使用要求很低</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ stress -d 1 --hdd-noclean --hdd-bytes 800k</div></pre></td></tr></table></figure>
<ul>
<li>产生13个进程，每个进程都反复不停的计算由rand ()产生随机数的平方根</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ stress -c 13</div></pre></td></tr></table></figure>
<ul>
<li>产生1024个进程，仅显示出错信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ stress --quiet --cpu 1k</div></pre></td></tr></table></figure>
<ul>
<li>产生4个进程，每个进程反复调用sync()，sync()用于将内存上的内容写到硬盘上</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ stress -i 4</div></pre></td></tr></table></figure>
<ul>
<li>向磁盘中写入固定大小的文件，这个文件通过调用mkstemp()产生并保存在当前目录下，默认是文件产生后就被执行unlink(清除)操作，但是可以使用<code>--hdd-bytes</code>选项将产生的文件全部保存在当前目录下，这会将你的磁盘空间逐步耗尽</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 生成小文件</div><div class="line">$ stress -d 1 --hdd-noclean --hdd-bytes 13</div><div class="line"></div><div class="line"># 生成大文件</div><div class="line">$ stress -d 1 --hdd-noclean --hdd-bytes 3G</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://my.oschina.net/guol/blog/700571" target="_blank" rel="external">http://my.oschina.net/guol/blog/700571</a><br><a href="http://www.cnblogs.com/javaee6/p/4642744.html" target="_blank" rel="external">http://www.cnblogs.com/javaee6/p/4642744.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了测试服务器的负载情况，给大家推荐Stress这个压力测试工具。Stress是一个Posix系统下生成Cpu/Menory/IO/Disk负载的工具。 &lt;/p&gt;
&lt;p&gt;项目址址: &lt;a href=&quot;http://weather.ou.edu/~apw/projects/stress/&quot;&gt;http://weather.ou.edu/~apw/projects/stress/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Stress" scheme="http://www.hi-linux.com/tags/Stress/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令行下交互式HTTP客户端--HTTP Prompt</title>
    <link href="http://www.hi-linux.com/posts/57570.html"/>
    <id>http://www.hi-linux.com/posts/57570.html</id>
    <published>2016-06-20T01:00:00.000Z</published>
    <updated>2017-01-22T10:13:02.038Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP Prompt是一个交互式的命令行HTTP客户端，支持自动完成、语法高亮，基于HTTPie和prompt_toolkit构建。HTTP Prompt相对于其它命令行的HTTP客户端(如HTTPie、Curl等)使用上更加直观方便。如对HTTPie有兴趣，可参考之前写的[<a href="http://www.hi-linux.com/2016/05/12/%E5%A6%82%E4%BD%95%E7%94%A8httpie%E6%9B%B4%E9%AB%98%E6%95%88%E7%9A%84%E8%B0%83%E8%AF%95%E6%8E%A5%E5%8F%A3/">如何用httpie更高效的调试接口</a>] 一文。</p>
<p>项目地址: <a href="https://github.com/eliangcs/http-prompt" target="_blank" rel="external">https://github.com/eliangcs/http-prompt</a></p>
<a id="more"></a>
<p>先展示一下HTTP Prompt官方给出的效果图。</p>
<p><img src="http://www.hi-linux.com/img/linux/http-prompt.gif" alt=""></p>
<p>有没有觉得很酷！</p>
<h3 id="HTTP-Prompt安装"><a href="#HTTP-Prompt安装" class="headerlink" title="HTTP Prompt安装"></a>HTTP Prompt安装</h3><p>通过Python包管理工具安装</p>
<p>Root用户</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install http-prompt</div></pre></td></tr></table></figure>
<p>非Root用户</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo pip install http-prompt</div></pre></td></tr></table></figure>
<p>注：需要Root权限，否则会报权限错误。这种方式会安装到全系统中，所有用户都可使用。</p>
<p>使用<code>--user</code>选项可只安装到你的用户目录中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install --user http-prompt</div></pre></td></tr></table></figure>
<p>升级 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install -U http-prompt</div></pre></td></tr></table></figure>
<h3 id="HTTP-Prompt配置"><a href="#HTTP-Prompt配置" class="headerlink" title="HTTP Prompt配置"></a>HTTP Prompt配置</h3><p>HTTP Prompt首次运行时会建立一个用户配置文件。配置文件默认放在<code>~/.config/http-prompt/config.py</code>(Linux)或<code>~/AppData/Local/http-prompt/config.py</code>(Windows)。</p>
<p>config.py提供<code>command_style</code>、<code>output_style</code>、<code>pager</code>三个选项可对输出的样式进行控制。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ cat ~/.config/http-prompt/config.py</div><div class="line"></div><div class="line"># Highlighting style for prompt commands. Available values:</div><div class="line"># algol, algol_nu, autumn, borland, bw, colorful, default, emacs, friendly,</div><div class="line"># fruity, igor, lovelace, manni, monokai, murphy, native, paraiso-dark,</div><div class="line"># paraiso-light, pastie, perldoc, rrt, solarized, tango, trac, vim, vs, xcode.</div><div class="line"># See gallery at http://eliangcs.github.io/http-prompt/style-gallery.html</div><div class="line">command_style = &apos;solarized&apos;</div><div class="line"></div><div class="line"># Highlighting style for HTTPie&apos;s output. Available values are the same as</div><div class="line"># command_style. Set this to None to use HTTPie&apos;s default style, which you</div><div class="line"># can refer to https://github.com/jkbrzt/httpie#default_options</div><div class="line">output_style = None</div><div class="line"></div><div class="line"># The tool used to paginate output. Available values: &apos;less&apos; and &apos;more&apos;.</div><div class="line"># Note that &apos;more&apos; does not support ANSI colors.</div><div class="line">pager = &apos;less&apos;</div></pre></td></tr></table></figure>
<h3 id="HTTP-Prompt使用"><a href="#HTTP-Prompt使用" class="headerlink" title="HTTP Prompt使用"></a>HTTP Prompt使用</h3><p>开始一个会话，执行如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 访问一个URL</div><div class="line">$ http-prompt http://httpbin.org</div><div class="line"></div><div class="line"># 如访问URL需身份验证，可通过指定相应参数。</div><div class="line">$ http-prompt localhost:8000/api --auth user:pass username=somebody</div></pre></td></tr></table></figure>
<p>进入一个会话后，你可执行以下命令。</p>
<p>使用cd命令改变URL地址:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 切换到一个相对地址</div><div class="line">&gt; cd api/v1</div><div class="line"></div><div class="line"># 切换到一个绝对地址</div><div class="line">&gt; cd http://localhost/api</div></pre></td></tr></table></figure>
<p>要添加headers、查询字符串，使用的语法与HTTPie类似。如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; Content-Type:application/json username=john</div><div class="line">&gt; &apos;name=John Doe&apos; apikey==abc</div><div class="line">&gt; Authorization:&quot;Bearer auth_token&quot;</div></pre></td></tr></table></figure>
<p>还可以添加HTTPie选项，如以下这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; --form --auth user:pass</div><div class="line">&gt; --verify=no username=jane</div></pre></td></tr></table></figure>
<p>通过HTTPie生成提交预览：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; httpie post</div><div class="line">http --auth user:pass --form POST http://httpbin.org/api apikey==abc username=john</div></pre></td></tr></table></figure>
<p>您可以通过命令httpie提供选项和参数暂时覆盖请求参数，该覆盖不会影响以后的请求。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 没有初始参数</div><div class="line">&gt; httpie</div><div class="line">http http://localhost</div><div class="line"></div><div class="line"># 临时覆盖请求参数</div><div class="line">&gt; httpie /api/something page==2 --json</div><div class="line">http --json http://localhost/api/something page==2</div><div class="line"></div><div class="line"># 当前状态并不受影响</div><div class="line">&gt; httpie</div><div class="line">http http://localhost</div></pre></td></tr></table></figure>
<p>要实际发送请求, 使用以下HTTP方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; get</div><div class="line">&gt; post</div><div class="line">&gt; put</div><div class="line">&gt; patch</div><div class="line">&gt; delete</div><div class="line">&gt; head</div></pre></td></tr></table></figure>
<p>以上的HTTP方法也支持暂时覆盖所有选项和参数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 没有初始参数</div><div class="line"></div><div class="line">&gt; httpie</div><div class="line">http http://localhost</div><div class="line"></div><div class="line"># 发送一个包含参数的请求</div><div class="line">&gt; post /api/v1 --form name=jane</div><div class="line"></div><div class="line"># 当前状态并不受影响</div><div class="line">&gt; httpie</div><div class="line">http http://localhost</div></pre></td></tr></table></figure>
<p>删除现有的header、参数、或HTTPie选项:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; rm -h Content-Type</div><div class="line">&gt; rm -q apikey</div><div class="line">&gt; rm -b username</div><div class="line">&gt; rm -o --auth</div></pre></td></tr></table></figure>
<p>删除当前会话中所有参数和选项:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; rm *</div></pre></td></tr></table></figure>
<p>离开当前会话:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; exit</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="https://github.com/eliangcs/http-prompt" target="_blank" rel="external">https://github.com/eliangcs/http-prompt</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTP Prompt是一个交互式的命令行HTTP客户端，支持自动完成、语法高亮，基于HTTPie和prompt_toolkit构建。HTTP Prompt相对于其它命令行的HTTP客户端(如HTTPie、Curl等)使用上更加直观方便。如对HTTPie有兴趣，可参考之前写的[&lt;a href=&quot;http://www.hi-linux.com/2016/05/12/%E5%A6%82%E4%BD%95%E7%94%A8httpie%E6%9B%B4%E9%AB%98%E6%95%88%E7%9A%84%E8%B0%83%E8%AF%95%E6%8E%A5%E5%8F%A3/&quot;&gt;如何用httpie更高效的调试接口&lt;/a&gt;] 一文。&lt;/p&gt;
&lt;p&gt;项目地址: &lt;a href=&quot;https://github.com/eliangcs/http-prompt&quot;&gt;https://github.com/eliangcs/http-prompt&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://www.hi-linux.com/tags/Linux/"/>
    
      <category term="HTTP Prompt" scheme="http://www.hi-linux.com/tags/HTTP-Prompt/"/>
    
  </entry>
  
  <entry>
    <title>详解Linux初始化过程-init系统</title>
    <link href="http://www.hi-linux.com/posts/45475.html"/>
    <id>http://www.hi-linux.com/posts/45475.html</id>
    <published>2016-06-02T01:00:00.000Z</published>
    <updated>2017-01-22T10:13:02.046Z</updated>
    
    <content type="html"><![CDATA[<p>使用官方推荐的Omnibus package方式部署gitlab-ce后，发现默认所有对应服务都是开机启动的,由于想关闭gitlab-ce开机启动。把常用的<code>/etc/init.d</code>、<code>/etc/rc.local</code>都找了个遍都没发现相关启动脚本。</p>
<p>最后搜索整个etc目录发现了<code>/etc/init/gitlab-runsvdir.conf</code>这个文件，看看它的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ cat  /etc/init/gitlab-runsvdir.conf</div><div class="line"></div><div class="line">start on runlevel [2345]</div><div class="line">stop on shutdown</div><div class="line">respawn</div><div class="line">post-stop script</div><div class="line">   # To avoid stomping on runsv&apos;s owned by a different runsvdir</div><div class="line">   # process, kill any runsv process that has been orphaned, and is</div><div class="line">   # now owned by init (process 1).</div><div class="line">   pkill -HUP -P 1 runsv$</div><div class="line">end script</div><div class="line">exec /opt/gitlab/embedded/bin/runsvdir-start</div></pre></td></tr></table></figure>
<p>这下水落石出了，gitlab-ce开机启动是从这里进行的。</p>
<p>注：CentOS6开始转用Upstart代替以往的init.d/rcX.d的线性启动方式。(gitlab-ce使用了Upstart方式管理开机启动)</p>
<a id="more"></a>
<p>解决这个问题的过程中，发现了以下两篇好文分享给大家！</p>
<p>Linux初始化过程(init系统): <a href="http://monklof.com/post/14/" target="_blank" rel="external">http://monklof.com/post/14/</a><br>理解Upstart: <a href="http://www.mike.org.cn/articles/understand-upstart/" target="_blank" rel="external">http://www.mike.org.cn/articles/understand-upstart/</a></p>
<p>以下是主要部分内容的节选</p>
<p><strong>Linux初始化过程(init系统)</strong></p>
<p>这篇文章的目的是希望能从一个全局和细节的角度去介绍Linux系统的初始化启动过程。</p>
<p>主要从三个方面尝试介绍和总结一下这方面的知识：</p>
<ol>
<li>系统初始化过程简介</li>
<li>init系统启动具体过程</li>
<li>工具介绍</li>
</ol>
<p><strong>init系统简介</strong></p>
<p>操作系统启动过程中，linux内核加载完成之后，内核初始化的最后一步就是运行 init 程序。init程序负责在系统启动时运行一些服务程序或脚本，来让一些重要和必要的服务开机就能运行起来。系统基本服务程序如network, crond, iptables等和用户安装服务程序如mysqld, nginx等，都是通过init系统来完成开机启动过程。</p>
<p>linux世界中init系统有许多种类，不同的发行版采用了不同的实现。大多数Linux发行版的init系统是和System V相兼容的，被称为”System V init(sysvinit)”，这是人们最熟悉的init系统。早期Ubuntu也是使用的sysvinit，但是Ubuntu从6.10开始，开始用 Upstart 替换sysvinit，成为Ubuntu新一代init系统。现在也有一些linux发行版如Fedora、Debian也开始或者计划采用 systemd 来作为init系统。</p>
<p>(System V 是Unix众多版本中的一个分支，于1983年首次发布)</p>
<p>在2014年Debian项目决定在未来的版本中使用systemd后，马克·沙特尔沃思(Mark Richard Shuttleworth)宣布Ubuntu将开始计划将自身迁移到systemd，以保持与上游一致。但是到目前为止(ubuntu 14.10)，ubuntu的默认的init系统还是Upstart，Upstart也兼容sysvinit，所以本文主要介绍”System V init”和Upstart这两种init系统。</p>
<p>(Mark Richard，南非，是Canonical公司的老板，Ubuntu这个分支也是他创立的，这个人还自费两千万美元乘坐宇宙飞船在太空中翱翔了10天。)</p>
<p><strong>System V init</strong></p>
<p>Ubuntu下，init系统程序位于/sbin/init ，大多数Linux发行版的init程序都位于目录/sbin/或者/bin/之下。</p>
<p>先介绍sysvinit中的一个概念： 运行级别(Run Level) 。它是一个数字，代表系统现在处于什么样的运行模式中，sysvinit根据运行级别来判断需要启动哪些服务。常有的运行级别有：</p>
<p><img src="http://www.hi-linux.com/img/linux/runlevel.jpg" alt=""></p>
<p>另外，介绍两个重要的文件/目录：</p>
<ul>
<li>/etc/inittab中存放了系统启动时的默认运行级别，假设为N。</li>
<li>/etc/rcN.d/目录之下的程序就是对应N运行级别下的程序，系统进入运行级别N时，会按序依次运行该目录下相应程序完成初始化过程。</li>
</ul>
<p>(注：这些文件在Ubuntu中应该是只有6.10之前的版本有，6.10之后init系统换成了Upstart)</p>
<p>sysvinit在启动时，就会读取/etc/inittab文件，获得默认的运行级别(假设为N)，然后依次启动/etc/rcN.d/中的相应程序，完成开机的初始化过程。</p>
<p>由于很多程序是需要放在多个运行级别下运行的，所以为了避免冗余，/etc/rcN.d/目录之下放的其实是真正启动程序的软连接，真正的启动程序一般存放于/etc/init.d/之下。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ ls -lh /etc/rc3.d/</div><div class="line">total 0</div><div class="line">lrwxrwxrwx  1 root root 16 Apr 19  2013 K02puppet -&gt; ../init.d/puppet</div><div class="line">lrwxrwxrwx  1 root root 14 Mar 25  2014 K10cups -&gt; ../init.d/cups</div><div class="line">lrwxrwxrwx. 1 root root 19 Apr 19  2013 K10saslauthd -&gt; ../init.d/saslauthd</div><div class="line">lrwxrwxrwx  1 root root 18 Mar 25  2014 K15svnserve -&gt; ../init.d/svnserve</div><div class="line">lrwxrwxrwx  1 root root 16 Dec 12 10:25 K36mysqld -&gt; ../init.d/mysqld</div><div class="line">lrwxrwxrwx. 1 root root 20 Apr 19  2013 K50netconsole -&gt; ../init.d/netconsole</div><div class="line">lrwxrwxrwx. 1 root root 21 Apr 19  2013 K87restorecond -&gt; ../init.d/restorecond</div><div class="line">lrwxrwxrwx  1 root root 15 Mar 25  2014 K89rdisc -&gt; ../init.d/rdisc</div><div class="line">lrwxrwxrwx  1 root root 19 Mar 25  2014 K92ip6tables -&gt; ../init.d/ip6tables</div><div class="line">lrwxrwxrwx  1 root root 18 Mar 25  2014 K92iptables -&gt; ../init.d/iptables</div><div class="line">lrwxrwxrwx  1 root root 17 Jun 16  2014 S01sysstat -&gt; ../init.d/sysstat</div><div class="line">lrwxrwxrwx  1 root root 17 Mar 25  2014 S10network -&gt; ../init.d/network</div><div class="line">lrwxrwxrwx. 1 root root 16 Apr 19  2013 S11auditd -&gt; ../init.d/auditd</div><div class="line">lrwxrwxrwx. 1 root root 21 Apr 19  2013 S11portreserve -&gt; ../init.d/portreserve</div><div class="line">lrwxrwxrwx  1 root root 17 Mar 25  2014 S12rsyslog -&gt; ../init.d/rsyslog</div><div class="line">lrwxrwxrwx  1 root root 14 Dec 12 10:25 S13sssd -&gt; ../init.d/sssd</div></pre></td></tr></table></figure>
<p>你可能觉得这些程序(软连接)的命名方式有点奇怪，是的，它很奇怪，但是sysvinit就是用程序的文件名来存储程序的一些简单控制信息。程序文件名的格式为： S/K + NN + NAME。系统进入默认运行级别时，init会杀掉所有以K开头的程序，启动以S开头的程序，按照NN的大小，从低到高开始启动/停止程序。NAME则是程序的名字，也是启动之后进程的名字。Sysvinit通过这种命名，来达到控制启动顺序的目的。</p>
<p>我的机器默认的运行级别是3(Multi-User mode)，所以开机启动的时候会启动或停止 /etc/rc3.d/目录下面的程序。根据前面的规则，进入该运行级别时，这些进程如果在运行的话，会被依次关闭：puppet -&gt; cups/saslauthd -&gt; svnserve等。这些程序会被依次启动：sysstat -&gt; network -&gt; auditd等。</p>
<p>值得特别注意的是其中的/etc/rc.local程序，这是一个可执行shell脚本，不仅仅在运行级别3(Multi-User mode)下有，在级别2(Multi-User mode without networking)和级别5(GUI mode)都会有。所以只要机器正常开机，这个脚本就会自动运行。一般情况下该脚本内容为空，如果你需要将一些程序加入开机自启的话，就将程序命令增加到这个脚本中就可以了。</p>
<p>以上就是sysvinit的初始化过程。</p>
<p>其实上面是一个抽象和简化版的初始过程，更加本质的初始过程是这样的(可跳过)：</p>
<ol>
<li>/etc/inittab文件真正的作用是：描述哪些程序在系统正常启动的时候需要运行。</li>
<li>/sbin/init其实只做一件事情：读取/etc/inittab，按配置启动其中的程序。启动/etc/rcN.d/中的程序，并不是/sbin/init做的事情，而是在/etc/inittab中的配置的程序/etc/rc.d/rc(有些系统位于”/etc/rc”)来完成这个过程。</li>
<li>典型的/etc/inittab的配置是这样的：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"># Level to run in</div><div class="line">id:2:initdefault:</div><div class="line"></div><div class="line"># Boot-time system configuration/initialization script.</div><div class="line">si::sysinit:/etc/rc.sysinit</div><div class="line"></div><div class="line"># What to do in single-user mode.</div><div class="line">~:S:wait:/sbin/sulogin</div><div class="line"></div><div class="line"># /etc/init.d executes the S and K scripts upon change</div><div class="line"># of runlevel.</div><div class="line">#</div><div class="line"># Runlevel 0 is halt.</div><div class="line"># Runlevel 1 is single-user.</div><div class="line"># Runlevels 2-5 are multi-user.</div><div class="line"># Runlevel 6 is reboot.</div><div class="line"></div><div class="line">l0:0:wait:/etc/rc 0</div><div class="line">l1:1:wait:/etc/rc 1</div><div class="line">l2:2:wait:/etc/rc 2</div><div class="line">l3:3:wait:/etc/rc 3</div><div class="line">l4:4:wait:/etc/rc 4</div><div class="line">l5:5:wait:/etc/rc 5</div><div class="line">l6:6:wait:/etc/rc 6</div><div class="line"></div><div class="line"># What to do at the &quot;3 finger salute&quot;.</div><div class="line">ca::ctrlaltdel:/sbin/shutdown -t3 -r now</div><div class="line"></div><div class="line"># Runlevel 2,3: getty on virtual consoles</div><div class="line"># Runlevel   3: mgetty on terminal (ttyS0) and modem (ttyS1)</div><div class="line">1:23:respawn:/sbin/mingetty tty1</div><div class="line">2:23:respawn:/sbin/mingetty tty2</div><div class="line">3:23:respawn:/sbin/mingetty tty3</div><div class="line">4:23:respawn:/sbin/mingetty tty4</div><div class="line">S0:3:respawn:/sbin/agetty ttyS0 9600 vt100-nav</div><div class="line">S1:3:respawn:/sbin/mgetty -x0 -D ttyS1</div></pre></td></tr></table></figure>
<p>其中这几行的作用就是：在系统进入N运行级别时，执行命令 “/etc/rc.d/rc N”：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">l0:0:wait:/etc/rc 0</div><div class="line">l1:1:wait:/etc/rc 1</div><div class="line">l2:2:wait:/etc/rc 2</div><div class="line">l3:3:wait:/etc/rc 3</div><div class="line">l4:4:wait:/etc/rc 4</div><div class="line">l5:5:wait:/etc/rc 5</div><div class="line">l6:6:wait:/etc/rc 6</div></pre></td></tr></table></figure>
<p>rc 这个程序按照文件命名，按序启动或停止 /etc/rcN.d/ 目录下相应的程序。所以，真正操作/etc/rcN.d/目录下程序的启动和停止的其实是rc，并不是init程序。但是我们任然可以把这个过程归结于”system v init”系统的功能。</p>
<p>关于inittab的详细介绍可以看<a href="http://unixhelp.ed.ac.uk/CGI/man-cgi?inittab+5" target="_blank" rel="external">这里</a></p>
<p><strong>开机自启服务程序编写</strong></p>
<p>将一个编好的服务程序(作为守护进程存在，提供服务，比如nginx/sshd)，作为固定服务加入系统中的话，在sysvinit中这样做就好了：</p>
<ol>
<li>将服务脚本置于/etc/init.d/中。</li>
<li>在相关运行级别创建启动软连接，例如，开机自启的话，在/etc/rc2.d/、/etc/rc3.d/、/etc/rc5.d/中创建启动服务脚本的软连接(命名S开头)。</li>
<li>(optional)如果有需要的话，在相关运行级别创建停止服务软连接。</li>
</ol>
<p>举例来说，假设是你编写了一个nginx的服务，现在要将其添加进系统启动服务中：</p>
<p>1.将服务程序置于/etc/init.d/nginx</p>
<p>2.在/etc/rc2.d/、/etc/rc3.d/、/etc/rc5.d/中创建启动软连接：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># ln -s /etc/init.d/nginx /etc/rc2.d/S20nginx</div><div class="line"># ln -s /etc/init.d/nginx /etc/rc3.d/S20nginx</div><div class="line"># ln -s /etc/init.d/nginx /etc/rc5.d/S20nginx</div></pre></td></tr></table></figure>
<p>3.在/etc/rc0.d/，/etc/rc1.d/，/etc/rc6.d/中，创建停止服务软连接：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># ln -s /etc/init.d/nginx /etc/rc0.d/K20nginx</div><div class="line"># ln -s /etc/init.d/nginx /etc/rc1.d/K20nginx</div><div class="line"># ln -s /etc/init.d/nginx /etc/rc6.d/K20nginx</div></pre></td></tr></table></figure>
<p>这样，当系统启动的时候，就会启动nginx，而关机、重启的时候，会stop nginx。</p>
<p><strong>小结</strong></p>
<p>sysvinit初始化启动过程比较明朗：开机时按序启动/etc/rcN.d/中的以”S”开头的程序。/etc/rcN.d/中的程序大多真正存放于/etc/init.d/目录之下。</p>
<p><strong>Upstart</strong></p>
<p>可以看到在sysvinit中，服务是按照顺序来执行的，这很影响效率。另一方面，sysvinit中，服务是预设的，不能实时启动(比如在系统被挂载了一个磁盘的时候自动启动)。而Upstart可以解决这些问题。它是基于事件机制的，可以按需启动服务，性能和很多其他方面都比sysvinit强，所以upstart被后来的Ubuntu等linux发行版采用。</p>
<p>在Upstart中，程序执行单位被称作作业(Job)，所有的init作业都必须放置于目录/etc/init/之下，使用Upstart自己的配置文件来描述Job内容。Upstart启动时，从 /etc/init/ 目录中读取各个Job的配置文件，获取所有Job。然后发出Startup信号，所有监听这个信号的作业会被执行。在作业执行过程中，作业本身也可以自己发出信号，其他监听这个信号的服务接着就会被启动执行。Upstart通过这样的方式来达到异步和实时控制作业的启动执行。</p>
<p>比如在我的博客服务器中(精简)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ ls -lh /etc/init/</div><div class="line">total 356K</div><div class="line">(...)</div><div class="line">-rw-r--r-- 1 root root  297 Feb  9  2013 cron.conf</div><div class="line">-rw-r--r-- 1 root root  489 Nov 11  2013 dbus.conf</div><div class="line">-rw-r--r-- 1 root root  273 Nov 19  2010 dmesg.conf</div><div class="line">-rw-r--r-- 1 root root 1.4K Apr 11  2014 failsafe.conf</div><div class="line">-rw-r--r-- 1 root root  267 Apr 11  2014 flush-early-job-log.conf</div><div class="line">-rw-r--r-- 1 root root 1.3K Mar 14  2012 friendly-recovery.conf</div><div class="line">-rw-r--r-- 1 root root  284 Jul 23  2013 hostname.conf</div><div class="line">-rw-r--r-- 1 root root  557 Apr 16  2014 hwclock.conf</div><div class="line">(...)</div><div class="line">-rw-r--r-- 1 root root 1.8K Feb 19  2014 mysql.conf</div><div class="line">-rw-r--r-- 1 root root 2.5K Mar 20  2014 networking.conf</div><div class="line">-rw-r--r-- 1 root root  534 Feb 16  2014 passwd.conf</div><div class="line">(...)</div><div class="line">-rw-r--r-- 1 root root  661 Apr 11  2014 rc.conf</div><div class="line">(...)</div><div class="line">-rw-r--r-- 1 root root 1.6K Apr 11  2014 rc-sysinit.conf</div></pre></td></tr></table></figure>
<p>这些”*.conf”都是作业配置文件，在这个文件中指出作业什么start，什么时候stop，主进程是什么等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">xxxx:/etc/init$ ls | xargs grep &quot;startup&quot;</div><div class="line">friendly-recovery.conf:emits startup</div><div class="line">friendly-recovery.conf:    initctl emit startup</div><div class="line">hostname.conf:# This task is run on startup to set the system hostname from /etc/hostname,</div><div class="line">hostname.conf:start on startup</div><div class="line">kmod.conf:start on (startup</div><div class="line">mountall.conf:start on startup</div><div class="line">plymouth-ready.conf:start on startup or started plymouth-splash</div><div class="line">plymouth-upstart-bridge.conf:start on (startup</div><div class="line">udev-fallback-graphics.conf:# We only want this job to happen once per boot, hence &apos;startup and ...&apos;.</div><div class="line">udev-fallback-graphics.conf:start on (startup and </div><div class="line">udev-finish.conf:start on (startup</div><div class="line">udevmonitor.conf:start on (startup</div><div class="line">udevtrigger.conf:start on (startup</div></pre></td></tr></table></figure>
<p>作业hostname、kmod、mountall等都会监听startup信号(start on EVENT这个指令表示在EVENT发生时启动该程序)。Startup收集作业配置信息完成后，会发出”startup”信号，这些作业就会被执行了。</p>
<p>你可能想，那其他程序怎么办？</p>
<p>其他程序会监听这些程序发射的事件信号，当该事件发生时，那些程序也会被执行。比如mountall这个job就会发射”filesystem”这些类似的基础事件信号，这个代表着文件系统已经就绪了，很多其他作业(比如networking)都是监听这个信号，这样一级一级传递，启动程序就会被按照事件发生顺序一级一级的启动执行了。</p>
<p><strong>兼容sysvinit</strong></p>
<p>最开始我们说到Upstart是兼容sysvinit的，怎么做到的？</p>
<p>在/etc/init/下有两个重要的作业： 作业<code>rc-sysinit</code>和<code>作业 rc</code></p>
<p>我们看一下这两个文件内容：</p>
<p><strong>作业rc-sysinit配置:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">XXXX:/etc/init$ cat rc-sysinit.conf </div><div class="line"># rc-sysinit - System V initialisation compatibility</div><div class="line">#</div><div class="line"># This task runs the old System V-style system initialisation scripts,</div><div class="line"># and enters the default runlevel when finished.</div><div class="line"></div><div class="line">description    &quot;System V initialisation compatibility&quot;</div><div class="line">author        &quot;Scott James Remnant &lt;scott@netsplit.com&gt;&quot;</div><div class="line"></div><div class="line">start on (filesystem and static-network-up) or failsafe-boot</div><div class="line">stop on runlevel</div><div class="line"></div><div class="line"># Default runlevel, this may be overriden on the kernel command-line</div><div class="line"># or by faking an old /etc/inittab entry</div><div class="line">env DEFAULT_RUNLEVEL=2</div><div class="line"></div><div class="line">emits runlevel</div><div class="line"></div><div class="line"># There can be no previous runlevel here, but there might be old</div><div class="line"># information in /var/run/utmp that we pick up, and we don&apos;t want</div><div class="line"># that.</div><div class="line">#</div><div class="line"># These override that</div><div class="line">env RUNLEVEL=</div><div class="line">env PREVLEVEL=</div><div class="line"></div><div class="line">console output</div><div class="line">env INIT_VERBOSE</div><div class="line"></div><div class="line">task</div><div class="line"></div><div class="line">script</div><div class="line">    # Check for default runlevel in /etc/inittab</div><div class="line">    if [ -r /etc/inittab ]</div><div class="line">    then</div><div class="line">    eval &quot;$(sed -nre &apos;s/^[^#][^:]*:([0-6sS]):initdefault:.*/DEFAULT_RUNLEVEL=&quot;\1&quot;;/p&apos; /etc/inittab || true)&quot;</div><div class="line">    fi</div><div class="line"></div><div class="line">    # Check kernel command-line for typical arguments</div><div class="line">    for ARG in $(cat /proc/cmdline)</div><div class="line">    do</div><div class="line">    case &quot;$&#123;ARG&#125;&quot; in</div><div class="line">    -b|emergency)</div><div class="line">        # Emergency shell</div><div class="line">        [ -n &quot;$&#123;FROM_SINGLE_USER_MODE&#125;&quot; ] || sulogin</div><div class="line">        ;;</div><div class="line">    [0123456sS])</div><div class="line">        # Override runlevel</div><div class="line">        DEFAULT_RUNLEVEL=&quot;$&#123;ARG&#125;&quot;</div><div class="line">        ;;</div><div class="line">    -s|single)</div><div class="line">        # Single user mode</div><div class="line">        [ -n &quot;$&#123;FROM_SINGLE_USER_MODE&#125;&quot; ] || DEFAULT_RUNLEVEL=S</div><div class="line">        ;;</div><div class="line">    esac</div><div class="line">    done</div><div class="line"></div><div class="line">    # Run the system initialisation scripts</div><div class="line">    [ -n &quot;$&#123;FROM_SINGLE_USER_MODE&#125;&quot; ] || /etc/init.d/rcS</div><div class="line"></div><div class="line">    # Switch into the default runlevel</div><div class="line">    telinit &quot;$&#123;DEFAULT_RUNLEVEL&#125;&quot;</div><div class="line">end script</div></pre></td></tr></table></figure>
<p><strong>作业rc的配置：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">XXXX:/etc/init$ cat rc.conf </div><div class="line"># rc - System V runlevel compatibility</div><div class="line">#</div><div class="line"># This task runs the old System V-style rc script when changing between</div><div class="line"># runlevels.</div><div class="line"></div><div class="line">description    &quot;System V runlevel compatibility&quot;</div><div class="line">author        &quot;Scott James Remnant &lt;scott@netsplit.com&gt;&quot;</div><div class="line"></div><div class="line">emits deconfiguring-networking</div><div class="line">emits unmounted-remote-filesystems</div><div class="line"></div><div class="line">start on runlevel [0123456]</div><div class="line">stop on runlevel [!$RUNLEVEL]</div><div class="line"></div><div class="line">export RUNLEVEL</div><div class="line">export PREVLEVEL</div><div class="line"></div><div class="line">console output</div><div class="line">env INIT_VERBOSE</div><div class="line"></div><div class="line">task</div><div class="line"></div><div class="line">script</div><div class="line">if [ &quot;$RUNLEVEL&quot; = &quot;0&quot; -o &quot;$RUNLEVEL&quot; = &quot;1&quot; -o &quot;$RUNLEVEL&quot; = &quot;6&quot; ]; then</div><div class="line">    status plymouth-shutdown 2&gt;/dev/null &gt;/dev/null &amp;&amp; start wait-for-state WAITER=rc WAIT_FOR=plymouth-shutdown || :</div><div class="line">fi</div><div class="line">/etc/init.d/rc $RUNLEVEL</div><div class="line">end script</div></pre></td></tr></table></figure>
<p>你不必看懂每个具体配置细节，只要知道这三个配置指令就可以了：</p>
<ol>
<li>start on EVENT： 在EVENT发生的时候启动该作业</li>
<li>stop on EVENT： 在EVENT发生的时候停止改作业</li>
<li>script … end script： 作业运行主程序脚本内容</li>
</ol>
<p>所以根据以上配置，Upstart兼容sysvinit的过程是这样的：</p>
<ol>
<li>作业rc-sysinit在收到 “(filesystem and static-network-up) or failsafe-boot” 的信号之后由Upstart启动。一切正常的话，rc-sysinit通过telinit完成运行级别信号的发送。</li>
<li>作业rc在收到运行级别信号之后，由Upstart启动。然后rc通过运行/etc/init.d/rc $RUNLEVEL这个命令， 来完成/etc/rcN.d/下相应程序的启动。</li>
</ol>
<p>这样，就完成了兼容sysvinit的过程。</p>
<p>所以，在Upstart之下，你可以有2种方式添加系统服务程序：</p>
<ul>
<li>按照System V 规则编写服务，并置于相应位置。</li>
<li>编写Upstart作业配置文件，置于 /etc/init/ 目录之下。</li>
</ul>
<p><strong>常用工具说明</strong><br>这里介绍一下我们常用的service命令到底怎么回事。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service SCRIPT COMMAND [OPTIONS]</div></pre></td></tr></table></figure>
<p>这个命令的作用是： 运行一个sysvinit 程序或Upstart作业！，所以其是一个既支持Upstart作业，又支持sysvinit程序的命令。运行时，service首先从/etc/init.d/中去找SCRIPT，如果没找着再去/etc/init/目录下去找同名作业配置文件。然后运行这些程序/作业。</p>
<p>需要注意的是，service命令和/etc/rcN.d/这个目录没有任何关系。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">service nginx start # 启动nginx服务</div><div class="line">service nginx stop  # 停止nginx服务</div><div class="line">service nginx restart # 重启nginx服务</div></pre></td></tr></table></figure>
<p>在运行时，COMMAND 和 OPTTIONS都会被完整的传递给SCRIPT。故service nginx start其实最终执行的命令是/etc/init.d/nginx start，”start”这个操作，并不是由service来完成，service仅仅是起到一个寻找脚本位置的作用而已！</p>
<p><strong>总结</strong></p>
<p>三个目录 =&gt;</p>
<ul>
<li>/etc/rcN.d/ 是System V init系统启动时查找的服务程序目录。</li>
<li>/etc/init.d/ 目录是System V init系统真正的服务程序所在地。</li>
<li>/etc/init/ 是Upstart系统寻找作业配置文件的地方。</li>
</ul>
<p>两个文件 =&gt;</p>
<ul>
<li>/etc/inittab 是System V init系统的配置文件，其中有设置默认的运行级别。</li>
<li>/etc/rc.local 是一个用户常用来添加系统启动脚本的地方。</li>
</ul>
<p>一个命令 =&gt;</p>
<ul>
<li>service 是用来操作System V init脚本或Upstart作业的命令接口。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用官方推荐的Omnibus package方式部署gitlab-ce后，发现默认所有对应服务都是开机启动的,由于想关闭gitlab-ce开机启动。把常用的&lt;code&gt;/etc/init.d&lt;/code&gt;、&lt;code&gt;/etc/rc.local&lt;/code&gt;都找了个遍都没发现相关启动脚本。&lt;/p&gt;
&lt;p&gt;最后搜索整个etc目录发现了&lt;code&gt;/etc/init/gitlab-runsvdir.conf&lt;/code&gt;这个文件，看看它的内容：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ cat  /etc/init/gitlab-runsvdir.conf&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;start on runlevel [2345]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;stop on shutdown&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;respawn&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;post-stop script&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   # To avoid stomping on runsv&amp;apos;s owned by a different runsvdir&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   # process, kill any runsv process that has been orphaned, and is&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   # now owned by init (process 1).&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   pkill -HUP -P 1 runsv$&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;end script&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;exec /opt/gitlab/embedded/bin/runsvdir-start&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这下水落石出了，gitlab-ce开机启动是从这里进行的。&lt;/p&gt;
&lt;p&gt;注：CentOS6开始转用Upstart代替以往的init.d/rcX.d的线性启动方式。(gitlab-ce使用了Upstart方式管理开机启动)&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://www.hi-linux.com/tags/Linux/"/>
    
      <category term="技巧" scheme="http://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>CentOS下使用MyTop实时监控MySQL</title>
    <link href="http://www.hi-linux.com/posts/26991.html"/>
    <id>http://www.hi-linux.com/posts/26991.html</id>
    <published>2016-06-01T01:00:00.000Z</published>
    <updated>2017-01-22T10:13:02.038Z</updated>
    
    <content type="html"><![CDATA[<p>MyTop是一个类似Linux下的<code>top</code>命令风格的MySQL监控工具，MyTop采用Perl开发。MyTop可以监控MySQL当前的连接用户和正在执行的命令。</p>
<p>MyTop的项目页面为：<a href="http://jeremy.zawodny.com/mysql/mytop/" target="_blank" rel="external">http://jeremy.zawodny.com/mysql/mytop/</a></p>
<a id="more"></a>
<h3 id="MyTop安装"><a href="#MyTop安装" class="headerlink" title="MyTop安装"></a>MyTop安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum -y install mytop #epel源</div></pre></td></tr></table></figure>
<h3 id="MyTop命令参数"><a href="#MyTop命令参数" class="headerlink" title="MyTop命令参数"></a>MyTop命令参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ man mytop</div><div class="line"></div><div class="line">-u / --user &lt;USERNAME&gt;：指定 username，预设是 root</div><div class="line">-p / --pass / --password &lt;PASSWORD&gt;：指定password，预设是none</div><div class="line">-h / --host &lt;HOSTNAME[:PORT]&gt;：指定 MySQL server的hostname，预设是localhost</div><div class="line">-P / --port &lt;PORT&gt;：指定连接 MySQL server的port，预设是3306</div><div class="line">-s / --delay &lt;SECONDS&gt;：更新的秒数，预设是5秒</div><div class="line">-d / --db / --database &lt;DATABASE&gt;：指定连接的资料库，预设是test</div><div class="line">-b / --batch / --batchmode：指定为 batch mode，每次更新不会清除旧的显示结果，会将更新资料显示上最上方，预设是unset</div><div class="line">-S / --socket &lt;PATH_TO_SOCKET&gt;：指定使用MySQL socket直接连线，而不使用TCP/IP连线，预设是none(当mytop和MySQL在同一台时才能使用)</div><div class="line">--header or -noheader：是否要显示表头，预设是header</div><div class="line">--color or --nocolor：是否要使用颜色，预设是color</div><div class="line">-i / -idle or -noidle：idle 的thread是否要出现在清单上，预设是idle</div></pre></td></tr></table></figure>
<p>注意: 因<code>.mytop</code>内有MySQL server的密码，请注意档案权限。</p>
<h3 id="MyTop的使用"><a href="#MyTop的使用" class="headerlink" title="MyTop的使用"></a>MyTop的使用</h3><ul>
<li>命令行运行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mytop -uroot -pmysql -d wordpress -h 127.0.0.1</div></pre></td></tr></table></figure>
<ul>
<li>通过配置文件运行</li>
</ul>
<p>MyTop配置文件在<code>~/.mytop</code>,也可在<code>~/.my.cnf</code>文件中配置用户名和密码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ vim ~/.mytop</div><div class="line"></div><div class="line">user=root</div><div class="line">pass=mysql</div><div class="line">host=localhost</div><div class="line">db=wordpress</div><div class="line">delay=5</div><div class="line">port=3306</div><div class="line">socket=/var/lib/mysql//mysql.sock</div><div class="line">batchmode=0</div><div class="line">header=1</div><div class="line">color=1</div><div class="line">idle=1</div></pre></td></tr></table></figure>
<p>注意:socket设置和my.cnf里的路径一样，一般MyTop和Mysql在同一台机器。</p>
<ul>
<li>MyTop远端监控</li>
</ul>
<p>若将MyTop装在另一台机器上时，需要设定MySQL Server上的权限才能远端监控</p>
<p>在MySQL Server上新增一个帐号，并给它Process的权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ mysql -u root -p</div><div class="line">mysql&gt; grant process on *.* to &lt;REMOTE_USERNAME&gt;@&lt;REMOTE_IP&gt; identified by &apos;&lt;PASSWORD&gt;&apos;;</div><div class="line">mysql&gt; flush privileges;</div><div class="line">mysql&gt; exit</div></pre></td></tr></table></figure>
<p>在安装MyTop的机器上，用参数指定或修改配置文件的设定。</p>
<p>参数指定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mytop -u &lt;REMOTE_USERNAME&gt; -p &lt;PASSWORD&gt; -h &lt;MYSQL_SERVER_IP&gt;</div></pre></td></tr></table></figure>
<p>修改配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ vim ~/.mytop</div><div class="line"></div><div class="line">user=&lt;REMOTE_USERNAME&gt;</div><div class="line">pass=&lt;PASSWORD&gt;</div><div class="line">host=&lt;MYSQL_SERVER_IP&gt;</div></pre></td></tr></table></figure>
<ul>
<li>MyTop快捷键</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s：设定更新时间 </div><div class="line">p：暂停画面更新</div><div class="line">q：离开</div><div class="line">u：只看某个使用者的thread</div><div class="line">o：反转排列顺序</div></pre></td></tr></table></figure>
<ul>
<li>监控画面参数解释</li>
</ul>
<p>Mytop和Linux下面的top命令展现的结果类似，下面展示了每个线程的当前的状态并且是动态变化。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ mytop -uroot -pmysql -d wordpress -h 127.0.0.1</div><div class="line"></div><div class="line">MySQL on 127.0.0.1 (5.6.29-log)                                                  up 0+05:44:42 [16:51:31]</div><div class="line"> Queries: 654.0  qps:    0 Slow:     0.0         Se/In/Up/De(%):    00/00/00/00 </div><div class="line">             qps now:    0 Slow qps: 0.0  Threads:    1 (   1/   0) 00/00/00/00 </div><div class="line"> Key Efficiency: 100.0%  Bps in/out:   0.8/160.4   Now in/out:   9.7/ 2.0k</div><div class="line"></div><div class="line">      Id      User         Host/IP         DB      Time    Cmd Query or State                                                                                                                                                                                                </div><div class="line">       --      ----         -------         --      ----    --- ----------                                                                                                                                                                                                    </div><div class="line">        8      root       localhost  wordpress         0  Query show full processlist</div></pre></td></tr></table></figure>
<ul>
<li>第一行显示了主机名称，还有至今MySQL的运行时间(以<code>days hour:minutes:seconds</code>为格式)。</li>
<li>第二、三行的显示了Qps:每秒请求书、Slow:慢查询的数量、Se/In/Up/De(%)：读写比例。</li>
<li>第四行的Key Efficiency就是Myisam的键值缓存区使用比例(缓存命中率)，Bps:目前网络进出流量。</li>
<li>最下方的区域就是目前链接到数据库的各个线程，你可以按<code>k</code>杀死一个线程，或者按<code>f</code>了解特定线程的信息。</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://jeremy.zawodny.com/mysql/mytop/mytop.html" target="_blank" rel="external">http://jeremy.zawodny.com/mysql/mytop/mytop.html</a><br><a href="http://dwchaoyue.blog.51cto.com/2826417/1636023" target="_blank" rel="external">http://dwchaoyue.blog.51cto.com/2826417/1636023</a><br><a href="http://www.21andy.com/new/20100927/1970.html" target="_blank" rel="external">http://www.21andy.com/new/20100927/1970.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MyTop是一个类似Linux下的&lt;code&gt;top&lt;/code&gt;命令风格的MySQL监控工具，MyTop采用Perl开发。MyTop可以监控MySQL当前的连接用户和正在执行的命令。&lt;/p&gt;
&lt;p&gt;MyTop的项目页面为：&lt;a href=&quot;http://jeremy.zawodny.com/mysql/mytop/&quot;&gt;http://jeremy.zawodny.com/mysql/mytop/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://www.hi-linux.com/categories/MySQL/"/>
    
    
      <category term="MyTop" scheme="http://www.hi-linux.com/tags/MyTop/"/>
    
      <category term="MySQL" scheme="http://www.hi-linux.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Linux下查看进程IO工具iopp</title>
    <link href="http://www.hi-linux.com/posts/41926.html"/>
    <id>http://www.hi-linux.com/posts/41926.html</id>
    <published>2016-05-31T01:00:00.000Z</published>
    <updated>2017-01-22T10:13:02.038Z</updated>
    
    <content type="html"><![CDATA[<p>Linux下的IO检测工具最常用的是<code>iostat</code>，不过<code>iostat</code>只能查看到总的IO情况。如果要细看具体那一个程序点用的IO较高，可以使用<code>iotop</code> 。不过<code>iotop</code>对内核版本和Python版本有要求，虽然目前主流的CentOS和Ubuntu版本上都适用。不过考虑到其无法适用的场景，推荐个可以查看程序IO使用情况的工具<code>iopp</code>作为替代方案。</p>
<p>iopp目前有两个版本的，一个是C语言的，一个是C++的。两个版本各有所长，本文将分别介绍两个版本iopp的安装和使用。</p>
<h3 id="iopp-C语言版本"><a href="#iopp-C语言版本" class="headerlink" title="iopp C语言版本"></a>iopp C语言版本</h3><p><code>iopp</code>是一个基于C语言开发的工具，它的作者是Mark Wong，代码仅有532行，非常简洁。</p>
<a id="more"></a>
<p>iopp的项目地址：<a href="https://github.com/markwkm/iopp" target="_blank" rel="external">https://github.com/markwkm/iopp</a></p>
<h4 id="安装iopp"><a href="#安装iopp" class="headerlink" title="安装iopp"></a>安装iopp</h4><p><strong>安装编译工具</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install cmake</div></pre></td></tr></table></figure>
<p><strong>编译安装iopp</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/markwkm/iopp.git</div><div class="line">$ cd iopp</div><div class="line">$ cmake CMakeLists.txt</div><div class="line">$ make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>如需指定安装位置，可按如下方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 指定安装的目标路径到/usr/bin下</div><div class="line">$ make install DESTDIR=/usr</div></pre></td></tr></table></figure>
<p>注：默认安装目录位置为<code>/bin/iopp</code></p>
<h4 id="使用iopp"><a href="#使用iopp" class="headerlink" title="使用iopp"></a>使用iopp</h4><p><strong>iopp语法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ iopp --help</div><div class="line">usage: iopp -h|--help</div><div class="line">usage: iopp [-ci] [-k|-m] [delay [count]]</div><div class="line">            -c, --command display full command line       #显示完整命令行</div><div class="line">            -h, --help display help                       #显示帮助信息</div><div class="line">            -i, --idle hides idle processes               #隐藏空闲进程</div><div class="line">            -k, --kilobytes display data in kilobytes     #以KB为单位显示数据</div><div class="line">            -m, --megabytes display data in megabytes     #以MB为单位显示数据</div><div class="line">            -u, --human-readable display data in kilo-, mega-, or giga-bytes #以方便读的方式显示数据</div></pre></td></tr></table></figure>
<p><strong>列出进程并隐藏I/O空闲的进程</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$ iopp -i -k -c 1</div><div class="line">  pid    rchar    wchar    syscr    syscw      rkb      wkb     cwkb command</div><div class="line">  pid    rchar    wchar    syscr    syscw      rkb      wkb     cwkb command</div><div class="line"> 9311       31        0        0        0        0        0        0 iopp</div><div class="line">  pid    rchar    wchar    syscr    syscw      rkb      wkb     cwkb command</div><div class="line"> 9311       31        0        0        0        0        0        0 iopp</div><div class="line">  pid    rchar    wchar    syscr    syscw      rkb      wkb     cwkb command</div><div class="line"> 9311       31        0        0        0        0        0        0 iopp</div><div class="line">  pid    rchar    wchar    syscr    syscw      rkb      wkb     cwkb command</div><div class="line"> 9311       31        0        0        0        0        0        0 iopp</div><div class="line">  pid    rchar    wchar    syscr    syscw      rkb      wkb     cwkb command</div><div class="line"> 9311       31        0        0        0        0        0        0 iopp</div><div class="line">  pid    rchar    wchar    syscr    syscw      rkb      wkb     cwkb command</div><div class="line"> 9311       31        0        0        0        0        0        0 iopp</div><div class="line">  pid    rchar    wchar    syscr    syscw      rkb      wkb     cwkb command</div><div class="line">  395        0        0        0        0        0        4        0 jbd2/dm-0-8</div><div class="line"> 1229        0        1        0        0        0        8        0 auditd</div><div class="line"> 1251        0        0        0        0        0        4        0 /sbin/rsyslogd</div><div class="line"> 1498      110        0        0        0        0        4        0 crond</div><div class="line"> 9311       31        0        0        0        0        0        0 iopp</div></pre></td></tr></table></figure>
<p>iopp输出的结果也比较清晰易懂，简单解释下</p>
<blockquote>
<p>pid 进程ID<br>rchar 将要从磁盘读取的字节数<br>wchar 已经写入或应该要写入磁盘的字节数<br>syscr 读I/O次数<br>syscw 写I/O次数<br>rbytes 真正从磁盘读取的字节数<br>wbytes 真正写入到磁盘的字节数<br>cwbytes 因为清空页面缓存而导致没有发生操作的字节数<br>command 执行的命令</p>
</blockquote>
<h3 id="iopp-C-语言版本"><a href="#iopp-C-语言版本" class="headerlink" title="iopp C++语言版本"></a>iopp C++语言版本</h3><p>iopp的实现原理非常简单，无非是遍历/proc/pid/io文件，读取出结果后，再通过进一步计算得出。大部分时候，我们只关注参数rbytes和wbytes两部分，基于此需求就产生了一个基于c++优化的iopp。</p>
<p>项目地址：<a href="https://github.com/hackerforward/iopp" target="_blank" rel="external">https://github.com/hackerforward/iopp</a></p>
<h4 id="安装iopp-1"><a href="#安装iopp-1" class="headerlink" title="安装iopp"></a>安装iopp</h4><p><strong>安装编译工具</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install make</div></pre></td></tr></table></figure>
<p><strong>编译安装iopp</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/hackerforward/iopp  </div><div class="line">$ cd iopp</div><div class="line">$ make</div></pre></td></tr></table></figure>
<p>编译完成后，在当前目录生成一个iopp二进制文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls</div><div class="line">curControl.h  iopp  iopp.cc  makefile  README.md</div></pre></td></tr></table></figure>
<h4 id="使用iopp-1"><a href="#使用iopp-1" class="headerlink" title="使用iopp"></a>使用iopp</h4><p>C++版iopp使用起来简单粗暴，直接运行就可以了，如下</p>
<p><img src="http://hi-linux.com/img/linux/iopp-cpp.jpg" alt=""></p>
<p>输出结果是时时刷新的。</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com/" target="_blank" rel="external">http://www.google.com/</a><br><a href="https://github.com/hackerforward/iopp" target="_blank" rel="external">https://github.com/hackerforward/iopp</a><br><a href="https://github.com/markwkm/iopp" target="_blank" rel="external">https://github.com/markwkm/iopp</a><br><a href="http://imysql.com/2014/10/12/using-iopp-instead-of-iotop.shtml" target="_blank" rel="external">http://imysql.com/2014/10/12/using-iopp-instead-of-iotop.shtml</a><br><a href="http://www.361way.com/linux-iopp/3583.html" target="_blank" rel="external">http://www.361way.com/linux-iopp/3583.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux下的IO检测工具最常用的是&lt;code&gt;iostat&lt;/code&gt;，不过&lt;code&gt;iostat&lt;/code&gt;只能查看到总的IO情况。如果要细看具体那一个程序点用的IO较高，可以使用&lt;code&gt;iotop&lt;/code&gt; 。不过&lt;code&gt;iotop&lt;/code&gt;对内核版本和Python版本有要求，虽然目前主流的CentOS和Ubuntu版本上都适用。不过考虑到其无法适用的场景，推荐个可以查看程序IO使用情况的工具&lt;code&gt;iopp&lt;/code&gt;作为替代方案。&lt;/p&gt;
&lt;p&gt;iopp目前有两个版本的，一个是C语言的，一个是C++的。两个版本各有所长，本文将分别介绍两个版本iopp的安装和使用。&lt;/p&gt;
&lt;h3 id=&quot;iopp-C语言版本&quot;&gt;&lt;a href=&quot;#iopp-C语言版本&quot; class=&quot;headerlink&quot; title=&quot;iopp C语言版本&quot;&gt;&lt;/a&gt;iopp C语言版本&lt;/h3&gt;&lt;p&gt;&lt;code&gt;iopp&lt;/code&gt;是一个基于C语言开发的工具，它的作者是Mark Wong，代码仅有532行，非常简洁。&lt;/p&gt;
    
    </summary>
    
      <category term="iopp" scheme="http://www.hi-linux.com/categories/iopp/"/>
    
    
      <category term="Linux" scheme="http://www.hi-linux.com/tags/Linux/"/>
    
      <category term="iopp" scheme="http://www.hi-linux.com/tags/iopp/"/>
    
  </entry>
  
</feed>
