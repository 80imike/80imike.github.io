<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>运维之美</title>
  
  <subtitle>种一棵树最好的时间是十年前，其次是现在。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.hi-linux.com/"/>
  <updated>2020-12-02T05:05:10.911Z</updated>
  <id>https://www.hi-linux.com/</id>
  
  <author>
    <name>Mike</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>推荐一款实时查看 Docker 容器日志的神器 Dozzie</title>
    <link href="https://www.hi-linux.com/posts/40902.html"/>
    <id>https://www.hi-linux.com/posts/40902.html</id>
    <published>2020-12-02T01:00:00.000Z</published>
    <updated>2020-12-02T05:05:10.911Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>介绍一款使用了几个月的开源小工具，Dozzle。它是一款轻量、简单的容器日志查看工具。</p><p>项目地址：<a href="https://dozzle.dev/" target="_blank" rel="noopener">https://dozzle.dev/</a></p><p>本篇将简单介绍如何使用它，包括如何快速从源码构建它。</p><h2 id="写在前面">写在前面</h2><p>这款工具相比较一些重量级的工具，比如 ELK 系列而言，实在是太轻量了，容器版本不过 10MB 左右大小。</p><p>主要原因是，它不存储和处理日志，仅仅提供实时查看功能，类似我们日常使用 ps、top 一样，使用它可以减少我们在服务器上低效执行 docker logs 或者 docker-compose logs 等类似命令的执行。</p><p><img src="https://www.hi-linux.com/img/linux/dozzle1.png" alt=""></p><p>先来聊聊一般情况下，怎么用这个小工具。</p><a id="more"></a><h2 id="一般场景">一般场景</h2><p>一般场景下，启动它，提供一个我们可以访问的端口，和其他多数优秀的开源项目一样简单，只需要一条简单的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name dozzle -d --volume&#x3D;&#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock:ro -p 8888:8080 amir20&#x2F;dozzle:latest</span><br></pre></td></tr></table></figure><p>这里和官方文档不同的是，在挂载 docker.sock 的时候，因为我们并不需要去操作该文件，所以建议加上 ro 只读的限制，避免出现一些我们不希望出现的意外情况，尤其是使用 latest 版本的时候。当然，实际使用中还是建议锁定镜像版本，并认真审查项目相关源码。</p><p>当然，考虑到可维护性，我们可以把它写成 compose 配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  dozzle:</span><br><span class="line">    container_name: dozzle</span><br><span class="line">    image: amir20&#x2F;dozzle:latest</span><br><span class="line">    volumes:</span><br><span class="line">      - &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock:ro</span><br><span class="line">    ports:</span><br><span class="line">      - 8888:8080</span><br></pre></td></tr></table></figure><p>将上面的内容保存为 docker-compose.yml ，使用 docker-compose up 启动程序；或者前文提到的 docker run 命令之后，我们便可以通过浏览器访问 localhost:8888 来查看当前相同机器（容器网卡）内的容器的实时日志，以及已停止容器的历史运行日志了。</p><p>因为容器的盛行，许多时候我们需要同时查阅多个服务的日志状态，Dozzle 支持“分屏”查看，还是很方便的。</p><p><img src="https://www.hi-linux.com/img/linux/dozzle2.png" alt=""></p><p>当然，还有常用的关键词搜索过滤、文本高亮。</p><p><img src="https://www.hi-linux.com/img/linux/dozzle3.png" alt=""></p><h2 id="如何从源码构建应用">如何从源码构建应用</h2><p>实际使用过程中，我们可能需要定制代码，来实现一些特别的需求，作者很贴心的提供了多阶段构建脚本，不过估计不少同样身处国内的同学会因为网络客观原因无法顺利构建，这里记录一下如何简单快速的完成应用构建。</p><p>首先是获取源代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;amir20&#x2F;dozzle.git --depth&#x3D;1 --branch&#x3D;master</span><br></pre></td></tr></table></figure><p>使用 --depth 和 --branch 可以有效减少获取代码时的传输量，从而提高你的代码下载速度。</p><p>接着是针对原始的 Dockerfile 进行调整，让 Alpine 、Node 、Go 的相关依赖、软件获取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">diff --git a&#x2F;Dockerfile b&#x2F;Dockerfile</span><br><span class="line">index 9bce54e..eda3672 100644</span><br><span class="line">--- a&#x2F;Dockerfile</span><br><span class="line">+++ b&#x2F;Dockerfile</span><br><span class="line">@@ -1,5 +1,15 @@</span><br><span class="line"> # Build assets</span><br><span class="line">-FROM node:current-alpine as node</span><br><span class="line">+FROM node:14.15.0-alpine as node</span><br><span class="line">+</span><br><span class="line">+ENV LANG en_US.UTF-8</span><br><span class="line">+ENV LANGUAGE en_US.UTF-8</span><br><span class="line">+ENV LC_ALL&#x3D;en_US.UTF-8</span><br><span class="line">+</span><br><span class="line">+RUN echo &#39;&#39; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories &amp;&amp; \</span><br><span class="line">+    VER&#x3D;$(awk -F&#x3D; &#39;$1&#x3D;&#x3D;&quot;VERSION_ID&quot; &#123; print $2 ;&#125;&#39; &#x2F;etc&#x2F;os-release | cut -d . -f 1,2) &amp;&amp; \</span><br><span class="line">+    echo &quot;https:&#x2F;&#x2F;mirror.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v$&#123;VER&#125;&#x2F;main&quot;         &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories &amp;&amp; \</span><br><span class="line">+    echo &quot;https:&#x2F;&#x2F;mirror.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v$&#123;VER&#125;&#x2F;community&quot;    &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories &amp;&amp; \</span><br><span class="line">+    echo &quot;Asia&#x2F;Shanghai&quot; &gt; &#x2F;etc&#x2F;timezone</span><br><span class="line"> </span><br><span class="line"> RUN apk add --no-cache git openssh python make g++ util-linux</span><br><span class="line"> </span><br><span class="line">@@ -7,6 +17,7 @@ WORKDIR &#x2F;build</span><br><span class="line"> </span><br><span class="line"> # Install dependencies</span><br><span class="line"> COPY package*.json yarn.lock .&#x2F;</span><br><span class="line">+RUN yarn config set registry https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;</span><br><span class="line"> RUN yarn install --network-timeout 1000000</span><br><span class="line"> </span><br><span class="line"> # Copy config files</span><br><span class="line">@@ -20,6 +31,19 @@ RUN yarn build</span><br><span class="line"> </span><br><span class="line"> FROM golang:1.15-alpine AS builder</span><br><span class="line"> </span><br><span class="line">+ENV LANG en_US.UTF-8</span><br><span class="line">+ENV LANGUAGE en_US.UTF-8</span><br><span class="line">+ENV LC_ALL&#x3D;en_US.UTF-8</span><br><span class="line">+</span><br><span class="line">+RUN echo &#39;&#39; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories &amp;&amp; \</span><br><span class="line">+    VER&#x3D;$(awk -F&#x3D; &#39;$1&#x3D;&#x3D;&quot;VERSION_ID&quot; &#123; print $2 ;&#125;&#39; &#x2F;etc&#x2F;os-release | cut -d . -f 1,2) &amp;&amp; \</span><br><span class="line">+    echo &quot;https:&#x2F;&#x2F;mirror.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v$&#123;VER&#125;&#x2F;main&quot;         &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories &amp;&amp; \</span><br><span class="line">+    echo &quot;https:&#x2F;&#x2F;mirror.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v$&#123;VER&#125;&#x2F;community&quot;    &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories &amp;&amp; \</span><br><span class="line">+    echo &quot;Asia&#x2F;Shanghai&quot; &gt; &#x2F;etc&#x2F;timezone</span><br><span class="line">+</span><br><span class="line">+RUN go env -w GO111MODULE&#x3D;on  &amp;&amp; \</span><br><span class="line">+    go env -w GOPROXY&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;goproxy&#x2F;,direct</span><br><span class="line">+</span><br><span class="line"> RUN apk add --no-cache git ca-certificates</span><br><span class="line"> RUN mkdir &#x2F;dozzle</span><br></pre></td></tr></table></figure><p>上面是我一般会做的镜像“加速”构建调整，执行下面的构建命令，稍等片刻，便能获得属于你的 Dozzle。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t dozzle:custom --build-arg TAG&#x3D;custom .</span><br></pre></td></tr></table></figure><p><img src="https://www.hi-linux.com/img/linux/dozzle4.png" alt=""></p><h2 id="最后">最后</h2><p>希望本篇内容能解救不停登录服务器查看日志，或者耐着性子等云平台日志中心日志刷新的你。</p><blockquote><p>本文转载自：「苏洋博客」，原文：<a href="https://tinyurl.com/y5bsr5zq%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/y5bsr5zq，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍一款使用了几个月的开源小工具，Dozzle。它是一款轻量、简单的容器日志查看工具。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://dozzle.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://dozzle.dev/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本篇将简单介绍如何使用它，包括如何快速从源码构建它。&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;这款工具相比较一些重量级的工具，比如 ELK 系列而言，实在是太轻量了，容器版本不过 10MB 左右大小。&lt;/p&gt;
&lt;p&gt;主要原因是，它不存储和处理日志，仅仅提供实时查看功能，类似我们日常使用 ps、top 一样，使用它可以减少我们在服务器上低效执行 docker logs 或者 docker-compose logs 等类似命令的执行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/dozzle1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;先来聊聊一般情况下，怎么用这个小工具。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.hi-linux.com/categories/docker/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
      <category term="Dozzie" scheme="https://www.hi-linux.com/tags/Dozzie/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Docker 中使用 Docker</title>
    <link href="https://www.hi-linux.com/posts/16745.html"/>
    <id>https://www.hi-linux.com/posts/16745.html</id>
    <published>2020-11-30T01:00:00.000Z</published>
    <updated>2020-11-30T07:19:06.488Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2 id="1-典型适用场景">1. 典型适用场景</h2><p>在 CI 中，通常会有一个 CI Engine 负责解析流程，控制整个构建过程，而将真正的构建交给 Agent 去完成。例如，Jenkins 、GitLab 均是如此。</p><p>如下图, 连接 CI Engine 的 Agent, 种类很多。这是为了满足不同项目对构建环境的要求。</p><p><img src="https://www.hi-linux.com/img/linux/dind01.png" alt=""></p><p>同时 Agent 是动态的，构建时才需要，构建完成时即销毁。CI 非常适合实践容器、Serverless 等技术，因此在生产过程中 Agent 经常是容器化的。</p><p>那么问题就来了？如果 CI Engine 也是容器化的，在容器中如何使用 Agent 容器去构建呢？如果 Agent 已经是容器化的，那么在 Agent 上如何构建镜像呢？这就是本篇将给出的回答，如何在 Docker 中使用 Docker。</p><a id="more"></a><h2 id="2-两种使用模式">2. 两种使用模式</h2><p>我们需要知道 Docker 以 C/S 模式工作，主要分为两个部分，Docker CLI 和 Docker Daemon 。Docker CLI ，也就是客户端，提供给用户命令行操作 Docker，例如 docker create/images/ps 等。Docker Damon ，也就是守护进程，负责接受用户指令，维护容器的生命周期。</p><h3 id="21-docker-in-docker">2.1 Docker in Docker</h3><p>Docker in Docker ，以下简称 DinD 。</p><p><img src="https://www.hi-linux.com/img/linux/dind02.png" alt=""></p><p>如上图，可以在 Container 中直接运行一个 Docker Daemon ，然后使用 Container 中的 Docker CLI 工具操作容器。</p><p>这种方式下，容器中的 Docker Daemon 完全独立于外部，具有良好的隔离特性。看起来，Container 类似一个 VM ，但 DinD 的作者自己也不是很推荐。</p><p>主要原因还是安全问题。DinD 需要以特权模式启动，这种嵌套会带来潜在的安全风险。</p><p>这种方式下，响应命令的容器嵌套于使用 docker 命令的容器。</p><h3 id="22-docker-outside-of-docker">2.2 Docker outside of Docker</h3><p>Docker outside of Docker ，以下简称 DooD 。</p><p><img src="https://www.hi-linux.com/img/linux/dind03.png" alt=""></p><p>如上图，Docker 以 C/S 模式工作，使用时用户关注的是 C 端，而生命周期的管理在 S 端。</p><p>因此，只需要将 Container 的外部 Docker Daemon 服务挂载到 Container 。让 Container 误以为本地运行了 Docker Daemon，使用 Docker CLI 命令操作时，外部的 Docker Daemon 会响应请求。</p><p>这种方式下，响应命令的容器与使用 docker 命令的容器处于同一层级。</p><h2 id="3-docker-环境下的演示">3. Docker 环境下的演示</h2><h3 id="31-dind">3.1 DinD</h3><ul><li>运行 DinD 容器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --privileged -e DOCKER_TLS_CERTDIR&#x3D;&quot;&quot; -d --name dockerd  docker:dind</span><br><span class="line">d6414f2ff0076c42de19a8a1fe122481c1a72b3bd45fd490dbe1c427414b4139</span><br></pre></td></tr></table></figure><ul><li>运行带 CLI 的容器链接 DinD 容器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm -it --link dockerd:docker docker:latest sh</span><br></pre></td></tr></table></figure><ul><li>在 DinD 容器中，拉取镜像</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 拉取镜像</span><br><span class="line">$ docker pull shaowenchen&#x2F;devops-java-sample</span><br><span class="line"></span><br><span class="line"># 查看镜像</span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY                       TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">shaowenchen&#x2F;devops-java-sample   latest              fa4651c24a18        6 weeks ago         122MB</span><br></pre></td></tr></table></figure><p>使用起来和一个独立的 Docker Daemon 环境一样。</p><ul><li>查看外部是否受影响</li></ul><p>键入 exit 退出容器，通过主机上的 Docker Daemon</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker images |grep fa4651c24a18</span><br></pre></td></tr></table></figure><p>符合预期。DinD 使用的是独立的 Docker Daemon，对外部的实例没有直接影响。</p><h3 id="32-dood">3.2 DooD</h3><ul><li>运行一个容器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm -it -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock alpine sh</span><br></pre></td></tr></table></figure><ul><li>安装 curl</li></ul><p>这里为了避免安装 Docker CLI ，直接使用 curl 调用 Docker Daemon 的 API。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apk update &amp;&amp; apk add curl</span><br></pre></td></tr></table></figure><ul><li>拉取镜像</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl -XPOST --unix-socket &#x2F;var&#x2F;run&#x2F;docker.sock http:&#x2F;&#x2F;localhost&#x2F;images&#x2F;create?fromImage&#x3D;shaowenchen&#x2F;docker-robotframework&amp;tag&#x3D;latest</span><br><span class="line">...</span><br><span class="line">&#123;&quot;status&quot;:&quot;Status: Downloaded newer image for shaowenchen&#x2F;docker-robotframework&quot;&#125;</span><br></pre></td></tr></table></figure><ul><li>查看拉取的镜像</li></ul><p>键入 exit 退出容器，通过主机上的 Docker Daemon</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker images |grep robotframework</span><br><span class="line">shaowenchen&#x2F;docker-robotframework                              latest                         d99cfa7ee716        12 months ago       1.5GB</span><br></pre></td></tr></table></figure><p>符合预期。DooD 方式直接使用的外部 Docker Daemon。</p><h2 id="4-kubernetes-环境下的演示">4. Kubernetes 环境下的演示</h2><h3 id="41-dind">4.1 DinD</h3><ul><li>创建一个 dind.yaml 文件，内容如下:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: dind</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: dind</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: dind</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: dockerd</span><br><span class="line">          image: &#39;docker:dind&#39;</span><br><span class="line">          env:</span><br><span class="line">            - name: DOCKER_TLS_CERTDIR</span><br><span class="line">              value: &quot;&quot;</span><br><span class="line">          securityContext:</span><br><span class="line">            privileged: true</span><br><span class="line">        - name: docker-cli</span><br><span class="line">          image: &#39;docker:latest&#39;</span><br><span class="line">          env:</span><br><span class="line">          - name: DOCKER_HOST</span><br><span class="line">            value: 127.0.0.1</span><br><span class="line">          command: [&quot;&#x2F;bin&#x2F;sh&quot;]</span><br><span class="line">          args: [&quot;-c&quot;, &quot;sleep 86400;&quot;]</span><br></pre></td></tr></table></figure><ul><li>创建 Deployment</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f dind.yaml</span><br></pre></td></tr></table></figure><ul><li>查看创建的 Pod 名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod |grep dind</span><br><span class="line">dind-5446ffbc8d-68q28   2&#x2F;2     Running       0          12s</span><br></pre></td></tr></table></figure><ul><li>进入 Pod</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl exec -it dind-5446ffbc8d-68q28  -c docker-cli sh</span><br></pre></td></tr></table></figure><ul><li>测试是否使用独立的 Docker Daemon</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull nginx</span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx               latest              daee903b4e43        3 days ago          133MB</span><br></pre></td></tr></table></figure><p>符合预期，这里仅显示了刚拉取的 Nginx 的镜像，完全独立于主机的 Docker Daemon。</p><h3 id="42-dood">4.2 DooD</h3><ul><li>创建一个 dood.yaml 文件，内容如下:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: dood</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: dood</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: dood</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - image: docker:latest</span><br><span class="line">          name: docker-cli</span><br><span class="line">          securityContext:</span><br><span class="line">            privileged: false</span><br><span class="line">          command: [&quot;&#x2F;bin&#x2F;sh&quot;]</span><br><span class="line">          args: [&quot;-c&quot;, &quot;sleep 86400;&quot;]</span><br><span class="line">          volumeMounts:</span><br><span class="line">          - mountPath: &#x2F;var&#x2F;run&#x2F;docker.sock</span><br><span class="line">            name: volume-docker</span><br><span class="line">      volumes:</span><br><span class="line">        - hostPath:</span><br><span class="line">            path: &#x2F;var&#x2F;run&#x2F;docker.sock</span><br><span class="line">            type: &quot;&quot;</span><br><span class="line">          name: volume-docker</span><br></pre></td></tr></table></figure><ul><li>创建 Deployment</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f dood.yaml</span><br></pre></td></tr></table></figure><ul><li>查看创建的 Pod 名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod  |grep dood</span><br><span class="line">dood-667d8bcfc6-d5fzf   1&#x2F;1     Running   0          15s</span><br></pre></td></tr></table></figure><ul><li>进入 Pod</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl exec -it dood-667d8bcfc6-d5fzf  -c docker-cli sh</span><br></pre></td></tr></table></figure><ul><li>测试是否使用的是主机的 Docker Daemon</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker images |wc</span><br><span class="line">69       482      8509</span><br></pre></td></tr></table></figure><p>符合预期，这里 Docker 命令使用的就是外部的 Docker Daemon。</p><h2 id="5-参考">5. 参考</h2><ol><li><a href="https://medium.com/better-programming/about-var-run-docker-sock-3bfd276e12fd" target="_blank" rel="noopener">https://medium.com/better-programming/about-var-run-docker-sock-3bfd276e12fd</a></li><li><a href="https://github.com/jpetazzo/dind" target="_blank" rel="noopener">https://github.com/jpetazzo/dind</a></li></ol><blockquote><p>本文转载自：「陈少文的博客」，原文：<a href="https://tinyurl.com/y2sbcrau%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/y2sbcrau，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-典型适用场景&quot;&gt;1. 典型适用场景&lt;/h2&gt;
&lt;p&gt;在 CI 中，通常会有一个 CI Engine 负责解析流程，控制整个构建过程，而将真正的构建交给 Agent 去完成。例如，Jenkins 、GitLab 均是如此。&lt;/p&gt;
&lt;p&gt;如下图, 连接 CI Engine 的 Agent, 种类很多。这是为了满足不同项目对构建环境的要求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/dind01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;同时 Agent 是动态的，构建时才需要，构建完成时即销毁。CI 非常适合实践容器、Serverless 等技术，因此在生产过程中 Agent 经常是容器化的。&lt;/p&gt;
&lt;p&gt;那么问题就来了？如果 CI Engine 也是容器化的，在容器中如何使用 Agent 容器去构建呢？如果 Agent 已经是容器化的，那么在 Agent 上如何构建镜像呢？这就是本篇将给出的回答，如何在 Docker 中使用 Docker。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.hi-linux.com/categories/docker/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>一文搞懂 Redis 的三种集群方案</title>
    <link href="https://www.hi-linux.com/posts/34936.html"/>
    <id>https://www.hi-linux.com/posts/34936.html</id>
    <published>2020-11-23T01:00:00.000Z</published>
    <updated>2020-11-23T02:21:11.461Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>在开发测试环境中，我们一般搭建Redis的单实例来应对开发测试需求，但是在生产环境，如果对可用性、可靠性要求较高，则需要引入Redis的集群方案。虽然现在各大云平台有提供缓存服务可以直接使用，但了解一下其背后的实现与原理总还是有些必要（比如面试）， 本文就一起来学习一下Redis的几种集群方案。</p><p>Redis支持三种集群方案</p><ul><li>主从复制模式</li><li>Sentinel（哨兵）模式</li><li>Cluster模式</li></ul><h2 id="主从复制模式">主从复制模式</h2><h3 id="1-基本原理">1. 基本原理</h3><p>主从复制模式中包含一个主数据库实例（master）与一个或多个从数据库实例（slave），如下图</p><p><img src="https://www.hi-linux.com/img/linux/redis-cluster01.png" alt=""></p><p>客户端可对主数据库进行读写操作，对从数据库进行读操作，主数据库写入的数据会实时自动同步给从数据库。</p><p>具体工作机制为：</p><ol><li>slave启动后，向master发送SYNC命令，master接收到SYNC命令后通过bgsave保存快照（即上文所介绍的RDB持久化），并使用缓冲区记录保存快照这段时间内执行的写命令</li><li>master将保存的快照文件发送给slave，并继续记录执行的写命令</li><li>slave接收到快照文件后，加载快照文件，载入数据</li><li>master快照发送完后开始向slave发送缓冲区的写命令，slave接收命令并执行，完成复制初始化</li><li>此后master每次执行一个写命令都会同步发送给slave，保持master与slave之间数据的一致性</li></ol><a id="more"></a><h3 id="2-部署示例">2. 部署示例</h3><p>本示例基于Redis 5.0.3版。</p><p>redis.conf的主要配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">###网络相关###</span><br><span class="line"># bind 127.0.0.1 # 绑定监听的网卡IP，注释掉或配置成0.0.0.0可使任意IP均可访问</span><br><span class="line">protected-mode no # 关闭保护模式，使用密码访问</span><br><span class="line">port 6379  # 设置监听端口，建议生产环境均使用自定义端口</span><br><span class="line">timeout 30 # 客户端连接空闲多久后断开连接，单位秒，0表示禁用</span><br><span class="line"></span><br><span class="line">###通用配置###</span><br><span class="line">daemonize yes # 在后台运行</span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis_6379.pid  # pid进程文件名</span><br><span class="line">logfile &#x2F;usr&#x2F;local&#x2F;redis&#x2F;logs&#x2F;redis.log # 日志文件的位置</span><br><span class="line"></span><br><span class="line">###RDB持久化配置###</span><br><span class="line">save 900 1 # 900s内至少一次写操作则执行bgsave进行RDB持久化</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000 </span><br><span class="line"># 如果禁用RDB持久化，可在这里添加 save &quot;&quot;</span><br><span class="line">rdbcompression yes #是否对RDB文件进行压缩，建议设置为no，以（磁盘）空间换（CPU）时间</span><br><span class="line">dbfilename dump.rdb # RDB文件名称</span><br><span class="line">dir &#x2F;usr&#x2F;local&#x2F;redis&#x2F;datas # RDB文件保存路径，AOF文件也保存在这里</span><br><span class="line"></span><br><span class="line">###AOF配置###</span><br><span class="line">appendonly yes # 默认值是no，表示不使用AOF增量持久化的方式，使用RDB全量持久化的方式</span><br><span class="line">appendfsync everysec # 可选值 always， everysec，no，建议设置为everysec</span><br><span class="line"></span><br><span class="line">###设置密码###</span><br><span class="line">requirepass 123456 # 设置复杂一点的密码</span><br></pre></td></tr></table></figure><p>部署主从复制模式只需稍微调整slave的配置，在redis.conf中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">replicaof 127.0.0.1 6379 # master的ip，port</span><br><span class="line">masterauth 123456 # master的密码</span><br><span class="line">replica-serve-stale-data no # 如果slave无法与master同步，设置成slave不可读，方便监控脚本发现问题</span><br></pre></td></tr></table></figure><p>本示例在单台服务器上配置master端口6379，两个slave端口分别为7001,7002，启动master，再启动两个slave</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-1 master-slave]# redis-server master.conf</span><br><span class="line">[root@dev-server-1 master-slave]# redis-server slave1.conf</span><br><span class="line">[root@dev-server-1 master-slave]# redis-server slave2.conf</span><br></pre></td></tr></table></figure><p>进入master数据库，写入一个数据，再进入一个slave数据库，立即便可访问刚才写入master数据库的数据。如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-1 master-slave]# redis-cli </span><br><span class="line">127.0.0.1:6379&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set site blog.jboost.cn</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get site</span><br><span class="line">&quot;blog.jboost.cn&quot;</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip&#x3D;127.0.0.1,port&#x3D;7001,state&#x3D;online,offset&#x3D;13364738,lag&#x3D;1</span><br><span class="line">slave1:ip&#x3D;127.0.0.1,port&#x3D;7002,state&#x3D;online,offset&#x3D;13364738,lag&#x3D;0</span><br><span class="line">...</span><br><span class="line">127.0.0.1:6379&gt; exit</span><br><span class="line"></span><br><span class="line">[root@dev-server-1 master-slave]# redis-cli -p 7001</span><br><span class="line">127.0.0.1:7001&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7001&gt; get site</span><br><span class="line">&quot;blog.jboost.cn&quot;</span><br></pre></td></tr></table></figure><p>执行info replication命令可以查看连接该数据库的其它库的信息，如上可看到有两个slave连接到master</p><h3 id="3-主从复制的优缺点">3. 主从复制的优缺点</h3><p>优点：</p><ol><li>master能自动将数据同步到slave，可以进行读写分离，分担master的读压力</li><li>master、slave之间的同步是以非阻塞的方式进行的，同步期间，客户端仍然可以提交查询或更新请求</li></ol><p>缺点：</p><ol><li>不具备自动容错与恢复功能，master或slave的宕机都可能导致客户端请求失败，需要等待机器重启或手动切换客户端IP才能恢复</li><li>master宕机，如果宕机前数据没有同步完，则切换IP后会存在数据不一致的问题</li><li>难以支持在线扩容，Redis的容量受限于单机配置</li></ol><h2 id="sentinel哨兵模式">Sentinel（哨兵）模式</h2><h3 id="1-基本原理">1. 基本原理</h3><p>哨兵模式基于主从复制模式，只是引入了哨兵来监控与自动处理故障。如图</p><p><img src="https://www.hi-linux.com/img/linux/redis-cluster02.png" alt=""></p><p>哨兵顾名思义，就是来为Redis集群站哨的，一旦发现问题能做出相应的应对处理。其功能包括</p><ol><li>监控master、slave是否正常运行</li><li>当master出现故障时，能自动将一个slave转换为master（大哥挂了，选一个小弟上位）</li><li>多个哨兵可以监控同一个Redis，哨兵之间也会自动监控</li></ol><p>哨兵模式的具体工作机制：</p><p>在配置文件中通过 sentinel monitor <master-name> <ip> <redis-port> <quorum> 来定位master的IP、端口，一个哨兵可以监控多个master数据库，只需要提供多个该配置项即可。哨兵启动后，会与要监控的master建立两条连接：</quorum></redis-port></ip></master-name></p><ol><li>一条连接用来订阅master的_sentinel_:hello频道与获取其他监控该master的哨兵节点信息</li><li>另一条连接定期向master发送INFO等命令获取master本身的信息</li></ol><p>与master建立连接后，哨兵会执行三个操作：</p><ol><li>定期（一般10s一次，当master被标记为主观下线时，改为1s一次）向master和slave发送INFO命令</li><li>定期向master和slave的_sentinel_:hello频道发送自己的信息</li><li>定期（1s一次）向master、slave和其他哨兵发送PING命令</li></ol><p>发送INFO命令可以获取当前数据库的相关信息从而实现新节点的自动发现。所以说哨兵只需要配置master数据库信息就可以自动发现其slave信息。获取到slave信息后，哨兵也会与slave建立两条连接执行监控。通过INFO命令，哨兵可以获取主从数据库的最新信息，并进行相应的操作，比如角色变更等。</p><p>接下来哨兵向主从数据库的sentinel:hello频道发送信息与同样监控这些数据库的哨兵共享自己的信息，发送内容为哨兵的ip端口、运行id、配置版本、master名字、master的ip端口还有master的配置版本。这些信息有以下用处：</p><ol><li>其他哨兵可以通过该信息判断发送者是否是新发现的哨兵，如果是的话会创建一个到该哨兵的连接用于发送PING命令。</li><li>其他哨兵通过该信息可以判断master的版本，如果该版本高于直接记录的版本，将会更新</li><li>当实现了自动发现slave和其他哨兵节点后，哨兵就可以通过定期发送PING命令定时监控这些数据库和节点有没有停止服务。</li></ol><p>如果被PING的数据库或者节点超时（通过 sentinel down-after-milliseconds master-name milliseconds 配置）未回复，哨兵认为其主观下线（sdown，s就是Subjectively —— 主观地）。如果下线的是master，哨兵会向其它哨兵发送命令询问它们是否也认为该master主观下线，如果达到一定数目（即配置文件中的quorum）投票，哨兵会认为该master已经客观下线（odown，o就是Objectively —— 客观地），并选举领头的哨兵节点对主从系统发起故障恢复。若没有足够的sentinel进程同意master下线，master的客观下线状态会被移除，若master重新向sentinel进程发送的PING命令返回有效回复，master的主观下线状态就会被移除</p><p>哨兵认为master客观下线后，故障恢复的操作需要由选举的领头哨兵来执行，选举采用Raft算法：</p><ol><li>发现master下线的哨兵节点（我们称他为A）向每个哨兵发送命令，要求对方选自己为领头哨兵</li><li>如果目标哨兵节点没有选过其他人，则会同意选举A为领头哨兵</li><li>如果有超过一半的哨兵同意选举A为领头，则A当选</li><li>如果有多个哨兵节点同时参选领头，此时有可能存在一轮投票无竞选者胜出，此时每个参选的节点等待一个随机时间后再次发起参选请求，进行下一轮投票竞选，直至选举出领头哨兵</li></ol><p>选出领头哨兵后，领头者开始对系统进行故障恢复，从出现故障的master的从数据库中挑选一个来当选新的master,选择规则如下：</p><ol><li>所有在线的slave中选择优先级最高的，优先级可以通过slave-priority配置</li><li>如果有多个最高优先级的slave，则选取复制偏移量最大（即复制越完整）的当选</li><li>如果以上条件都一样，选取id最小的slave</li></ol><p>挑选出需要继任的slave后，领头哨兵向该数据库发送命令使其升格为master，然后再向其他slave发送命令接受新的master，最后更新数据。将已经停止的旧的master更新为新的master的从数据库，使其恢复服务后以slave的身份继续运行。</p><h3 id="2-部署演示">2. 部署演示</h3><p>本示例基于Redis 5.0.3版。</p><p>哨兵模式基于前文的主从复制模式。哨兵的配置文件为sentinel.conf，在文件中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1 # mymaster定义一个master数据库的名称，后面是master的ip， port，1表示至少需要一个Sentinel进程同意才能将master判断为失效，如果不满足这个条件，则自动故障转移（failover）不会执行</span><br><span class="line">sentinel auth-pass mymaster 123456 # master的密码</span><br><span class="line">sentinel down-after-milliseconds mymaster 5000 # 5s未回复PING，则认为master主观下线，默认为30s</span><br><span class="line">sentinel parallel-syncs mymaster 2  # 指定在执行故障转移时，最多可以有多少个slave实例在同步新的master实例，在slave实例较多的情况下这个数字越小，同步的时间越长，完成故障转移所需的时间就越长</span><br><span class="line">sentinel failover-timeout mymaster 300000 # 如果在该时间（ms）内未能完成故障转移操作，则认为故障转移失败，生产环境需要根据数据量设置该值</span><br></pre></td></tr></table></figure><blockquote><p>一个哨兵可以监控多个master数据库，只需按上述配置添加多套</p></blockquote><p>分别以26379,36379,46379端口启动三个sentinel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-1 sentinel]# redis-server sentinel1.conf --sentinel</span><br><span class="line">[root@dev-server-1 sentinel]# redis-server sentinel2.conf --sentinel</span><br><span class="line">[root@dev-server-1 sentinel]# redis-server sentinel3.conf --sentinel</span><br></pre></td></tr></table></figure><p>也可以使用redis-sentinel sentinel1.conf 命令启动。此时集群包含一个master、两个slave、三个sentinel，如图，</p><p><img src="https://www.hi-linux.com/img/linux/redis-cluster03.png" alt=""></p><p>我们来模拟master挂掉的场景，执行 kill -9 3017 将master进程干掉，进入slave中执行 info replication查看，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-1 sentinel]# redis-cli -p 7001</span><br><span class="line">127.0.0.1:7001&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7001&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:7002</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:1</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line"># 省略</span><br><span class="line">127.0.0.1:7001&gt; exit</span><br><span class="line">[root@dev-server-1 sentinel]# redis-cli -p 7002</span><br><span class="line">127.0.0.1:7002&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7002&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip&#x3D;127.0.0.1,port&#x3D;7001,state&#x3D;online,offset&#x3D;13642721,lag&#x3D;1</span><br><span class="line"># 省略</span><br></pre></td></tr></table></figure><p>可以看到slave 7002已经成功上位晋升为master（role：master），接收一个slave 7001的连接。此时查看slave2.conf配置文件，发现replicaof的配置已经被移除了，slave1.conf的配置文件里replicaof 127.0.0.1 6379 被改为 replicaof 127.0.0.1 7002。重新启动master，也可以看到master.conf配置文件中添加了replicaof 127.0.0.1 7002的配置项，可见大哥（master）下位后，再出来混就只能当当小弟（slave）了，三十年河东三十年河西。</p><h3 id="3-哨兵模式的优缺点">3. 哨兵模式的优缺点</h3><p>优点：</p><ol><li>哨兵模式基于主从复制模式，所以主从复制模式有的优点，哨兵模式也有</li><li>哨兵模式下，master挂掉可以自动进行切换，系统可用性更高</li></ol><p>缺点：</p><ol><li>同样也继承了主从模式难以在线扩容的缺点，Redis的容量受限于单机配置</li><li>需要额外的资源来启动sentinel进程，实现相对复杂一点，同时slave节点作为备份节点不提供服务</li></ol><h2 id="cluster模式">Cluster模式</h2><h3 id="1-基本原理">1. 基本原理</h3><p>哨兵模式解决了主从复制不能自动故障转移，达不到高可用的问题，但还是存在难以在线扩容，Redis容量受限于单机配置的问题。Cluster模式实现了Redis的分布式存储，即每台节点存储不同的内容，来解决在线扩容的问题。如图</p><p><img src="https://www.hi-linux.com/img/linux/redis-cluster04.png" alt=""></p><p>Cluster采用无中心结构,它的特点如下：</p><ol><li>所有的redis节点彼此互联(PING-PONG机制),内部使用二进制协议优化传输速度和带宽</li><li>节点的fail是通过集群中超过半数的节点检测失效时才生效</li><li>客户端与redis节点直连,不需要中间代理层.客户端不需要连接集群所有节点,连接集群中任何一个可用节点即可</li></ol><p>Cluster模式的具体工作机制：</p><ol><li>在Redis的每个节点上，都有一个插槽（slot），取值范围为0-16383</li><li>当我们存取key的时候，Redis会根据CRC16的算法得出一个结果，然后把结果对16384求余数，这样每个key都会对应一个编号在0-16383之间的哈希槽，通过这个值，去找到对应的插槽所对应的节点，然后直接自动跳转到这个对应的节点上进行存取操作</li><li>为了保证高可用，Cluster模式也引入主从复制模式，一个主节点对应一个或者多个从节点，当主节点宕机的时候，就会启用从节点</li><li>当其它主节点ping一个主节点A时，如果半数以上的主节点与A通信超时，那么认为主节点A宕机了。如果主节点A和它的从节点都宕机了，那么该集群就无法再提供服务了</li></ol><p>Cluster模式集群节点最小配置6个节点(3主3从，因为需要半数以上)，其中主节点提供读写操作，从节点作为备用节点，不提供请求，只作为故障转移使用。</p><h3 id="2-部署演示">2. 部署演示</h3><p>本示例基于Redis 5.0.3版。</p><p>Cluster模式的部署比较简单，首先在redis.conf中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">port 7100 # 本示例6个节点端口分别为7100,7200,7300,7400,7500,7600 </span><br><span class="line">daemonize yes # r后台运行 </span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis_7100.pid # pidfile文件对应7100,7200,7300,7400,7500,7600 </span><br><span class="line">cluster-enabled yes # 开启集群模式 </span><br><span class="line">masterauth passw0rd # 如果设置了密码，需要指定master密码</span><br><span class="line">cluster-config-file nodes_7100.conf # 集群的配置文件，同样对应7100,7200等六个节点</span><br><span class="line">cluster-node-timeout 15000 # 请求超时 默认15秒，可自行设置</span><br></pre></td></tr></table></figure><p>分别以端口7100,7200,7300,7400,7500,7600 启动六个实例(如果是每个服务器一个实例则配置可一样)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-1 cluster]# redis-server redis_7100.conf</span><br><span class="line">[root@dev-server-1 cluster]# redis-server redis_7200.conf</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然后通过命令将这个6个实例组成一个3主节点3从节点的集群，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster create --cluster-replicas 1 127.0.0.1:7100 127.0.0.1:7200 127.0.0.1:7300 127.0.0.1:7400 127.0.0.1:7500 127.0.0.1:7600 -a passw0rd</span><br></pre></td></tr></table></figure><p>执行结果如图</p><p><img src="https://www.hi-linux.com/img/linux/redis-cluster05.png" alt=""></p><p>可以看到 7100， 7200， 7300 作为3个主节点，分配的slot分别为 0-5460， 5461-10922， 10923-16383， 7600作为7100的slave， 7500作为7300的slave，7400作为7200的slave。</p><p>我们连接7100设置一个值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-1 cluster]# redis-cli -p 7100 -c -a passw0rd</span><br><span class="line">Warning: Using a password with &#39;-a&#39; or &#39;-u&#39; option on the command line interface may not be safe.</span><br><span class="line">127.0.0.1:7100&gt; set site blog.jboost.cn</span><br><span class="line">-&gt; Redirected to slot [9421] located at 127.0.0.1:7200</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7200&gt; get site</span><br><span class="line">&quot;blog.jboost.cn&quot;</span><br><span class="line">127.0.0.1:7200&gt;</span><br></pre></td></tr></table></figure><p>注意添加 -c 参数表示以集群模式，否则报 (error) MOVED 9421 127.0.0.1:7200 错误， 以 -a 参数指定密码，否则报(error) NOAUTH Authentication required错误。</p><p>从上面命令看到key为site算出的slot为9421，落在7200节点上，所以有Redirected to slot [9421] located at 127.0.0.1:7200，集群会自动进行跳转。因此客户端可以连接任何一个节点来进行数据的存取。</p><p>通过cluster nodes可查看集群的节点信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:7200&gt; cluster nodes</span><br><span class="line">eb28aaf090ed1b6b05033335e3d90a202b422d6c 127.0.0.1:7500@17500 slave c1047de2a1b5d5fa4666d554376ca8960895a955 0 1584165266071 5 connected</span><br><span class="line">4cc0463878ae00e5dcf0b36c4345182e021932bc 127.0.0.1:7400@17400 slave 5544aa5ff20f14c4c3665476de6e537d76316b4a 0 1584165267074 4 connected</span><br><span class="line">dbbb6420d64db22f35a9b6fa460b0878c172a2fb 127.0.0.1:7100@17100 master - 0 1584165266000 1 connected 0-5460</span><br><span class="line">d4b434f5829e73e7e779147e905eea6247ffa5a2 127.0.0.1:7600@17600 slave dbbb6420d64db22f35a9b6fa460b0878c172a2fb 0 1584165265000 6 connected</span><br><span class="line">5544aa5ff20f14c4c3665476de6e537d76316b4a 127.0.0.1:7200@17200 myself,master - 0 1584165267000 2 connected 5461-10922</span><br><span class="line">c1047de2a1b5d5fa4666d554376ca8960895a955 127.0.0.1:7300@17300 master - 0 1584165268076 3 connected 10923-16383</span><br></pre></td></tr></table></figure><p>我们将7200通过 kill -9 pid杀死进程来验证集群的高可用，重新进入集群执行cluster nodes可以看到7200 fail了，但是7400成了master，重新启动7200，可以看到此时7200已经变成了slave。</p><h3 id="3-cluster模式的优缺点">3. Cluster模式的优缺点</h3><p>优点：</p><ol><li>无中心架构，数据按照slot分布在多个节点。</li><li>集群中的每个节点都是平等的关系，每个节点都保存各自的数据和整个集群的状态。每个节点都和其他所有节点连接，而且这些连接保持活跃，这样就保证了我们只需要连接集群中的任意一个节点，就可以获取到其他节点的数据。</li><li>可线性扩展到1000多个节点，节点可动态添加或删除</li><li>能够实现自动故障转移，节点之间通过gossip协议交换状态信息，用投票机制完成slave到master的角色转换</li></ol><p>缺点：</p><ol><li>客户端实现复杂，驱动要求实现Smart Client，缓存slots mapping信息并及时更新，提高了开发难度。目前仅JedisCluster相对成熟，异常处理还不完善，比如常见的“max redirect exception”</li><li>节点会因为某些原因发生阻塞（阻塞时间大于 cluster-node-timeout）被判断下线，这种failover是没有必要的</li><li>数据通过异步复制，不保证数据的强一致性</li><li>slave充当“冷备”，不能缓解读压力</li><li>批量操作限制，目前只支持具有相同slot值的key执行批量操作，对mset、mget、sunion等操作支持不友好</li><li>key事务操作支持有线，只支持多key在同一节点的事务操作，多key分布不同节点时无法使用事务功能</li><li>不支持多数据库空间，单机redis可以支持16个db，集群模式下只能使用一个，即db 0</li></ol><p>Redis Cluster模式不建议使用pipeline和multi-keys操作，减少max redirect产生的场景。</p><h2 id="总结">总结</h2><p>本文介绍了Redis集群方案的三种模式，其中主从复制模式能实现读写分离，但是不能自动故障转移；哨兵模式基于主从复制模式，能实现自动故障转移，达到高可用，但与主从复制模式一样，不能在线扩容，容量受限于单机的配置；Cluster模式通过无中心化架构，实现分布式存储，可进行线性扩展，也能高可用，但对于像批量操作、事务操作等的支持性不够好。三种模式各有优缺点，可根据实际场景进行选择。</p><h2 id="参考">参考：</h2><ol><li><a href="https://blog.csdn.net/q649381130/article/details/79931791" target="_blank" rel="noopener">https://blog.csdn.net/q649381130/article/details/79931791</a></li><li><a href="https://www.cnblogs.com/51life/p/10233340.html" target="_blank" rel="noopener">https://www.cnblogs.com/51life/p/10233340.html</a></li><li><a href="https://www.cnblogs.com/chensuqian/p/10538365.html" target="_blank" rel="noopener">https://www.cnblogs.com/chensuqian/p/10538365.html</a></li><li><a href="https://stor.51cto.com/art/201910/604653.htm" target="_blank" rel="noopener">https://stor.51cto.com/art/201910/604653.htm</a></li></ol><blockquote><p>本文转载自：「半路雨歌」，原文：<a href="https://tinyurl.com/y5a6t3md%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/y5a6t3md，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发测试环境中，我们一般搭建Redis的单实例来应对开发测试需求，但是在生产环境，如果对可用性、可靠性要求较高，则需要引入Redis的集群方案。虽然现在各大云平台有提供缓存服务可以直接使用，但了解一下其背后的实现与原理总还是有些必要（比如面试）， 本文就一起来学习一下Redis的几种集群方案。&lt;/p&gt;
&lt;p&gt;Redis支持三种集群方案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主从复制模式&lt;/li&gt;
&lt;li&gt;Sentinel（哨兵）模式&lt;/li&gt;
&lt;li&gt;Cluster模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;主从复制模式&quot;&gt;主从复制模式&lt;/h2&gt;
&lt;h3 id=&quot;1-基本原理&quot;&gt;1. 基本原理&lt;/h3&gt;
&lt;p&gt;主从复制模式中包含一个主数据库实例（master）与一个或多个从数据库实例（slave），如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/redis-cluster01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;客户端可对主数据库进行读写操作，对从数据库进行读操作，主数据库写入的数据会实时自动同步给从数据库。&lt;/p&gt;
&lt;p&gt;具体工作机制为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;slave启动后，向master发送SYNC命令，master接收到SYNC命令后通过bgsave保存快照（即上文所介绍的RDB持久化），并使用缓冲区记录保存快照这段时间内执行的写命令&lt;/li&gt;
&lt;li&gt;master将保存的快照文件发送给slave，并继续记录执行的写命令&lt;/li&gt;
&lt;li&gt;slave接收到快照文件后，加载快照文件，载入数据&lt;/li&gt;
&lt;li&gt;master快照发送完后开始向slave发送缓冲区的写命令，slave接收命令并执行，完成复制初始化&lt;/li&gt;
&lt;li&gt;此后master每次执行一个写命令都会同步发送给slave，保持master与slave之间数据的一致性&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="https://www.hi-linux.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://www.hi-linux.com/tags/Redis/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>两款超好用的 Kubernetes 实时日志查看工具</title>
    <link href="https://www.hi-linux.com/posts/14566.html"/>
    <id>https://www.hi-linux.com/posts/14566.html</id>
    <published>2020-11-09T01:00:00.000Z</published>
    <updated>2020-11-09T05:23:07.782Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>通常情况下，<code>Kubernetes</code> 环境下的应用日志都需要通过日志系统来进行收集，比如：<code>Filebeat</code> + <code>ElasticSearch</code> + <code>Kibana</code> 的组合来实现。虽然这一组合的功能相当强大，但是在一些比较简陋的测试集群中，或者不具备浏览器条件的自动化/控制台环境下，自动合并多个 <code>Pod</code> 中的日志进行集中的查看，对处理问题和调试故障还是很有大帮助的。</p><p>今天，我们就给大家介绍两款超好用的多容器实时日志查看工具 <code>Stern</code> 和 <code>Kubetail</code>。</p><h2 id="stern">Stern</h2><p><code>Kubectl</code> 本身的 <code>Log</code> 命令是不支持同时查看多个 <code>Pod</code> 容器中的日志，<code>Stern</code> 很好的解决了这个问题, 它除了可以同时 <code>tail</code> 多个容器的日志之外, 还支持以下一些强大的功能:</p><ul><li>允许使用正则表达式来选择需要 tail 的 PodName</li><li>自定义不同 Pod 的日志输出的颜色</li><li>自动添加符合规则的新创建 Pod 并进行 tail</li><li>…</li></ul><blockquote><p>项目地址： <a href="https://github.com/wercker/stern" target="_blank" rel="noopener">https://github.com/wercker/stern</a></p></blockquote><a id="more"></a><h3 id="安装-stern">安装 Stern</h3><p><code>Stern</code> 使用 <code>Go</code> 语言开发，安装非常简单，开箱即用。你只需下载对应平台相关的二进制预编译安装包，就可以使用了。</p><p>以 <code>Linux</code> 平台为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;github.com&#x2F;wercker&#x2F;stern&#x2F;releases&#x2F;download&#x2F;1.11.0&#x2F;stern_linux_amd64</span><br><span class="line">$ chmod +x stern_linux_amd64</span><br><span class="line">$ mv stern_linux_amd64 &#x2F;usr&#x2F;local&#x2F;bin</span><br></pre></td></tr></table></figure><p>如果你使用的是 <code>macOS</code>，可以直接 <code>Homebrew</code> 进行安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install stern</span><br></pre></td></tr></table></figure><h3 id="使用-stern">使用 Stern</h3><p><code>Stern</code> 支持的功能很多，用法也很丰富。下面我们来看几个比较常用的例子：</p><ol><li>实时查看当前 Namespace 中所有 Pod 中所有容器的日志</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ stern  .</span><br></pre></td></tr></table></figure><ol start="2"><li>实时查看 Pod 中指定容器的日志</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ stern envvars --container gateway</span><br></pre></td></tr></table></figure><ol start="3"><li>实时查看指定命名空间中除指定容器外的所有容器的日志</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ stern -n staging --exclude-container istio-proxy .</span><br></pre></td></tr></table></figure><ol start="4"><li>实时查看指定时间范围内容器的日志，下面的例子表示是 15 分钟内</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ stern auth -t --since 15m</span><br></pre></td></tr></table></figure><ol start="5"><li>实时查看指定命名空间中容器的日志</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ stern kubernetes-dashboard --namespace kube-system</span><br></pre></td></tr></table></figure><ol start="6"><li>实时查看所有命名空间中符合指定标签容器的日志</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ stern --all-namespaces -l run&#x3D;nginx</span><br></pre></td></tr></table></figure><p>更多用法，可参考「<a href="https://github.com/wercker/stern" target="_blank" rel="noopener">Stern 官方文档</a>」。</p><h2 id="kubetail">Kubetail</h2><p><code>Kubetail</code> 是一个 <code>Shell</code> 脚本，它可以将多个 <code>Pod</code> 的日志合并到一起，并支持彩色输出。</p><blockquote><p>项目地址：<a href="https://github.com/johanhaleby/kubetail" target="_blank" rel="noopener">https://github.com/johanhaleby/kubetail</a></p></blockquote><h3 id="安装-kubetail">安装 Kubetail</h3><p>由于 <code>Kubetail</code> 只是一个 <code>Shell</code> 脚本，直接下载后便可使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;johanhaleby&#x2F;kubetail&#x2F;master&#x2F;kubetail</span><br><span class="line">$ chmod +x kubetail</span><br><span class="line">$ cp kubetail &#x2F;usr&#x2F;local&#x2F;bin</span><br></pre></td></tr></table></figure><p>如果你使用的是 <code>macOS</code>，也可以直接 <code>Homebrew</code> 进行安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew tap johanhaleby&#x2F;kubetail &amp;&amp; brew install kubetail</span><br></pre></td></tr></table></figure><p><code>Kubetail</code> 还支持各种 <code>SHELL</code> 管理框架，比如：<code>Oh-my-zsh</code>、<code>Antigen</code> 等，具体安装方法可参考「<a href="https://github.com/johanhaleby/kubetail" target="_blank" rel="noopener">官方安装文档</a>」。</p><h3 id="使用-kubetail">使用 Kubetail</h3><p><code>Kubetail</code> 使用也是非常简单的，基本语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubetail &lt;search term&gt; [-h] [-c] [-n] [-t] [-l] [-d] [-p] [-s] [-b] [-k] [-v] [-r] [-i]</span><br></pre></td></tr></table></figure><p>一些常用参数的解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-c：指定多容器 Pod 中的容器名称</span><br><span class="line">-t：指定 Kubeconfig 文件中的 Context</span><br><span class="line">-l：标签过滤器，使用 -l 参数之后，会忽略 Pod 名称</span><br><span class="line">-n：指定命名空间</span><br><span class="line">-s：指定返回一个相对时间之后的日志，例如 5s，2m 或者 3h，缺省是 10s</span><br><span class="line">-b：是否使用 line-buffered，缺省为 false</span><br><span class="line">-k：指定输出内容的具体着色部分，pod：只给 pod 名称上色，line：整行上色（缺省），false：不上色</span><br></pre></td></tr></table></figure><p>一些使用实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubetail my-pod-v1</span><br><span class="line">$ kubetail my-pod-v1 -c my-container</span><br><span class="line">$ kubetail my-pod-v1 -t int1-context -c my-container</span><br><span class="line">$ kubetail &#39;(service|consumer|thing)&#39; -e regex</span><br><span class="line">$ kubetail -l service&#x3D;my-service</span><br><span class="line">$ kubetail --selector service&#x3D;my-service --since 10m</span><br><span class="line">$ kubetail --tail 1</span><br></pre></td></tr></table></figure><p>至此，两种超实用的多容器实时日志查看工具就介绍完了。如果你还有更好的类似工具推荐，欢迎留言讨论哟！</p><h2 id="参考文档">参考文档</h2><ol><li><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></li><li><a href="https://zhuanlan.zhihu.com/p/60987559" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/60987559</a></li><li><a href="https://blog.fleeto.us/post/introducing-kubetail/" target="_blank" rel="noopener">https://blog.fleeto.us/post/introducing-kubetail/</a></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常情况下，&lt;code&gt;Kubernetes&lt;/code&gt; 环境下的应用日志都需要通过日志系统来进行收集，比如：&lt;code&gt;Filebeat&lt;/code&gt; + &lt;code&gt;ElasticSearch&lt;/code&gt; + &lt;code&gt;Kibana&lt;/code&gt; 的组合来实现。虽然这一组合的功能相当强大，但是在一些比较简陋的测试集群中，或者不具备浏览器条件的自动化/控制台环境下，自动合并多个 &lt;code&gt;Pod&lt;/code&gt; 中的日志进行集中的查看，对处理问题和调试故障还是很有大帮助的。&lt;/p&gt;
&lt;p&gt;今天，我们就给大家介绍两款超好用的多容器实时日志查看工具 &lt;code&gt;Stern&lt;/code&gt; 和 &lt;code&gt;Kubetail&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Stern&quot;&gt;Stern&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Kubectl&lt;/code&gt; 本身的 &lt;code&gt;Log&lt;/code&gt; 命令是不支持同时查看多个 &lt;code&gt;Pod&lt;/code&gt; 容器中的日志，&lt;code&gt;Stern&lt;/code&gt; 很好的解决了这个问题, 它除了可以同时 &lt;code&gt;tail&lt;/code&gt; 多个容器的日志之外, 还支持以下一些强大的功能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许使用正则表达式来选择需要 tail 的 PodName&lt;/li&gt;
&lt;li&gt;自定义不同 Pod 的日志输出的颜色&lt;/li&gt;
&lt;li&gt;自动添加符合规则的新创建 Pod 并进行 tail&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;项目地址： &lt;a href=&quot;https://github.com/wercker/stern&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/wercker/stern&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/categories/kubernetes/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>巧用 Docker 快速部署 GPU 的基础环境</title>
    <link href="https://www.hi-linux.com/posts/15874.html"/>
    <id>https://www.hi-linux.com/posts/15874.html</id>
    <published>2020-10-30T01:00:00.000Z</published>
    <updated>2020-11-04T09:40:30.792Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>在 Linux 服务器上使用 GPU 跑深度学习的模型很正常不过。如果我们想用 Docker 实现同样的需求，就需要做些额外的工作。本质上就是我们要在容器里能看到并且使用宿主机上的显卡。 在这篇文章里我们就介绍一下 Docker 使用 GPU 的环境搭建。</p><h2 id="nvidia-驱动">Nvidia 驱动</h2><p>某些命令以 Ubuntu 作为示例。 首先宿主机上必现安装 Nvidia 驱动。</p><p>这里推荐从 Nvidia 官网下载脚本安装，安装和卸载都比较方便并且适用于任何 Linux 发行版，包括 CentOS，Ubuntu 等。 NVIDIA Telsa GPU 的 Linux 驱动在安装过程中需要编译 kernel module，系统需提前安装 gcc 和编译 Linux Kernel Module 所依赖的包，例如 <code>kernel-devel-$(uname -r)</code> 等。</p><h3 id="安装-gcc-和-kernel-dev">安装 gcc 和 kernel-dev</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install gcc kernel-dev -y</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="安装-nvidia-驱动">安装 Nvidia 驱动</h3><ol><li><p>访问 <a href="https://www.nvidia.com/Download/Find.aspx" target="_blank" rel="noopener">https://www.nvidia.com/Download/Find.aspx</a></p></li><li><p>选择对应操作系统和安装包，并单击 [SEARCH] 搜寻驱动，选择要下载的驱动版本</p></li></ol><p><img src="https://www.hi-linux.com/img/linux/nvdriver.png" alt=""></p><ol start="3"><li>在宿主机上下载并执行对应版本安装脚本</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;www.nvidia.com&#x2F;content&#x2F;DriverDownload-March2009&#x2F;confirmation.php?url&#x3D;&#x2F;tesla&#x2F;450.80.02&#x2F;NVIDIA-Linux-x86_64-450.80.02.run&amp;lang&#x3D;us&amp;type&#x3D;Tesla</span><br><span class="line">$ chmod +x NVIDIA-Linux-x86_64-450.80.02.run &amp;&amp; .&#x2F;NVIDIA-Linux-x86_64-450.80.02.run</span><br></pre></td></tr></table></figure><ol start="4"><li>验证</li></ol><p>使用 <code>nvidia-smi</code> 命令验证是否安装成功，如果输出类似下图则驱动安装成功。</p><p><img src="https://www.hi-linux.com/img/linux/nvsmi.png" alt=""></p><h2 id="cuda-驱动">CUDA 驱动</h2><p>CUDA（Compute Unified Device Architecture）是显卡厂商 NVIDIA 推出的运算平台。<code>CUDA™</code>是一种由 NVIDIA 推出的通用并行计算架构，该架构使 GPU 能够解决复杂的计算问题。它包含了 CUDA 指令集架构（ISA）以及 GPU 内部的并行计算引擎。 这里安装的方式和显卡驱动安装类似。</p><ol><li>访问官网下载对应版本安装包，<a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-toolkit-archive</a></li></ol><p><img src="https://www.hi-linux.com/img/linux/cudadirver.png" alt=""></p><ol start="2"><li>配置环境变量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo &#39;export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda&#x2F;bin:$PATH&#39; | sudo tee &#x2F;etc&#x2F;profile.d&#x2F;cuda.sh </span><br><span class="line">$ source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><h2 id="nvidia-docker2">nvidia-docker2</h2><p>Docker 的安装这里就不展开了，具体查看官方文档非常详细。</p><p>这里我们就直接介绍安装 nvidia-docker2.</p><p>既然叫 nvidia-docker2 就有 nvidia-docker1 就是它的 1.0 版本目前已经废弃了，所以注意不要装错。</p><p>这里先简单说一下 nvidia-docker2 的原理，nvidia-docker2 的依赖由下几部分组成.</p><ul><li>libnvidia-container</li><li>nvidia-container-toolkit</li><li>nvidia-container-runtime</li></ul><p><img src="https://www.hi-linux.com/img/linux/nvidia-docker-arch.png" alt=""></p><p>nvidia-container-runtime 是在 runc 基础上多实现了 nvidia-container-runime-hook (现在叫 nvidia-container-toolkit)，该 hook 是在容器启动后（Namespace已创建完成），容器自定义命令(Entrypoint)启动前执行。当检测到 NVIDIA_VISIBLE_DEVICES 环境变量时，会调用 libnvidia-container 挂载 GPU Device 和 CUDA Driver。如果没有检测到 NVIDIA_VISIBLE_DEVICES 就会执行默认的 runc。</p><p>下面分两步安装</p><ol><li>设置 repository 和 GPG key</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ distribution&#x3D;$(. &#x2F;etc&#x2F;os-release;echo $ID$VERSION_ID)</span><br><span class="line">$ curl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-docker&#x2F;gpgkey | sudo apt-key add -</span><br><span class="line">$ curl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-docker&#x2F;$distribution&#x2F;nvidia-docker.list | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;nvidia-docker.list</span><br></pre></td></tr></table></figure><ol start="2"><li>安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install -y nvidia-docker2</span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure><ol start="3"><li>验证</li></ol><p>执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm --gpus all nvidia&#x2F;cuda:10.2-base nvidia-smi</span><br></pre></td></tr></table></figure><p>如果输出跟直接在宿主机上执行 <code>nvidia-smi</code> 一致则说明安装成功。 如果跑的深度学习模型使用的是 tensorflow 可以在容器里执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">tf.contrib.eager.num_gpus()</span><br></pre></td></tr></table></figure><p>如果输出了宿主机上的 Nvidia 显卡数量，则模型能使用到显卡加速。 如果使用的是 pytorch 可以在容器里执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">torch.cuda.is_available()</span><br></pre></td></tr></table></figure><p>如果输出 True 证明环境也成功了，可以使用显卡。</p><ol start="4"><li>使用示例</li></ol><ul><li>使用所有显卡</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm --gpus all nvidia&#x2F;cuda nvidia-smi </span><br><span class="line">$ docker run --rm --runtime&#x3D;nvidia -e NVIDIA_VISIBLE_DEVICES&#x3D;all nvidia&#x2F;cuda nvidia-smi</span><br></pre></td></tr></table></figure><ul><li>指明使用哪几张卡</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --gpus &#39;&quot;device&#x3D;1,2&quot;&#39; nvidia&#x2F;cuda nvidia-smi </span><br><span class="line">$ docker run --rm --runtime&#x3D;nvidia -e NVIDIA_VISIBLE_DEVICES&#x3D;1,2 nvidia&#x2F;cuda nvidia-smi</span><br></pre></td></tr></table></figure><p>到这里在 Docker 下使用 Nvidia 显卡加速计算的基础环境搭建就介绍完了。后续我们可以继续研究一下 K8S 下调度 GPU 的实现。</p><blockquote><p>本文转载自：「lxkaka」，原文：<a href="https://lxkaka.wang/docker-nvidia/%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://lxkaka.wang/docker-nvidia/，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Linux 服务器上使用 GPU 跑深度学习的模型很正常不过。如果我们想用 Docker 实现同样的需求，就需要做些额外的工作。本质上就是我们要在容器里能看到并且使用宿主机上的显卡。 在这篇文章里我们就介绍一下 Docker 使用 GPU 的环境搭建。&lt;/p&gt;
&lt;h2 id=&quot;Nvidia-驱动&quot;&gt;Nvidia 驱动&lt;/h2&gt;
&lt;p&gt;某些命令以 Ubuntu 作为示例。 首先宿主机上必现安装 Nvidia 驱动。&lt;/p&gt;
&lt;p&gt;这里推荐从 Nvidia 官网下载脚本安装，安装和卸载都比较方便并且适用于任何 Linux 发行版，包括 CentOS，Ubuntu 等。 NVIDIA Telsa GPU 的 Linux 驱动在安装过程中需要编译 kernel module，系统需提前安装 gcc 和编译 Linux Kernel Module 所依赖的包，例如 &lt;code&gt;kernel-devel-$(uname -r)&lt;/code&gt; 等。&lt;/p&gt;
&lt;h3 id=&quot;安装-gcc-和-kernel-dev&quot;&gt;安装 gcc 和 kernel-dev&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt install gcc kernel-dev -y&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.hi-linux.com/categories/docker/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
      <category term="GPU" scheme="https://www.hi-linux.com/tags/GPU/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Kubernetes 集群中集成 Kata</title>
    <link href="https://www.hi-linux.com/posts/10148.html"/>
    <id>https://www.hi-linux.com/posts/10148.html</id>
    <published>2020-10-20T01:00:00.000Z</published>
    <updated>2020-10-20T09:25:25.014Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2 id="1-kata-解决什么问题">1. Kata 解决什么问题</h2><p>安全性和隔离性是 Kata Container 显著区别于 Docker Container 的地方。</p><p>Kata Container 来源于 Intel Clear Containers 和 Hyper runV 项目的合并。Intel Clear Containers 借助 Intel VT-x 技术使用轻量级虚拟机提供容器，解决安全性问题，同时性能优异。而 Hyper runV 对标的是 Docker 的 runc ，提供容器的运行时，遵循 OCI runtime 规范。</p><h2 id="2-kubernetes-中的-kata">2. Kubernetes 中的 Kata</h2><h3 id="21-oci-和-cri-o">2.1 OCI 和 CRI-O</h3><p>OCI 标准是为了避免容器标准被 Docker 独家挟持而出现的。</p><p>CRI 标准将 Kubelet 与运行时解耦，实现 CRI 标准的容器管理程序都可以用于 Pod 创建。</p><p>CRI-O 插件同时实现了 CRI 和 OCI 标准，可以用于替换 Containerd 直接与 runV 等 OCI runtime 对接。</p><p>如下图：</p><p><img src="https://www.hi-linux.com/img/linux/k8s-kata01.jpg" alt=""></p><h3 id="22-kata-与-containerd">2.2 Kata 与 Containerd</h3><p>为了兼容 OCI 标准，Docker 将管理运行时的功能从 Docker Daemon 中剥离出来，形成了 Containerd 。在运行容器时，可以不用 Docker 的 runc ，而替换为 kata-runtime 。</p><p><img src="https://www.hi-linux.com/img/linux/k8s-kata02.jpg" alt=""></p><h3 id="23-kata-与-kuberntes-的集成">2.3 Kata 与 Kuberntes 的集成</h3><p>如下图，Kata 主要替换的是 OCI runtime 层，其他部分与基于 Docker runc 的 Kubernetes 并无差异。同时，基于 kata-runtime 的 Pod 和基于 runc 的 Pod 可以共存于集群之中。</p><p><img src="https://www.hi-linux.com/img/linux/k8s-kata03.jpg" alt=""></p><p>目前的主要问题是，Kata 不支持 host 网络。而 Kubernetes 中，etcd、nodelocaldns、kube-apiserver、kube-scheduler、metrics-server、node-exporter、kube-proxy、calico、kube-controller-manager 等，也就是 Static Pod 和 Daemonset 都会使用 host 网络。所以在安装部署时，依然使用 runc 作为默认的运行时，而将 kata-runtime 作为可选的运行时给特定的负载使用。</p><a id="more"></a><h2 id="3-kubernetes-集群集成-kata">3. Kubernetes 集群集成 Kata</h2><h3 id="31-安装-kubernetes-集群">3.1 安装 Kubernetes 集群</h3><p>使用 Kubeadm 安装集群非常方便，可以参考之前的文档 使用 Kubeadm 安装 Kubernetes 集群 。</p><p>也可以直接参考官方文档，<code>https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/</code> 。</p><p>由于，Kata 需要硬件虚拟化支持，IaaS 厂商一般没有开启相关的功能。我使用的是物理机，只能使用国内的网络。下面的脚本，可以用来提前下载相关镜像。</p><ul><li>查询镜像列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ kubeadm config images list</span><br><span class="line"></span><br><span class="line">k8s.gcr.io&#x2F;kube-apiserver:v1.17.9</span><br><span class="line">k8s.gcr.io&#x2F;kube-controller-manager:v1.17.9</span><br><span class="line">k8s.gcr.io&#x2F;kube-scheduler:v1.17.9</span><br><span class="line">k8s.gcr.io&#x2F;kube-proxy:v1.17.9</span><br><span class="line">k8s.gcr.io&#x2F;pause:3.1</span><br><span class="line">k8s.gcr.io&#x2F;etcd:v3.3.12</span><br><span class="line">k8s.gcr.io&#x2F;coredns:1.6.9</span><br></pre></td></tr></table></figure><ul><li>下载镜像</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">images&#x3D;(</span><br><span class="line">  kube-apiserver:v1.17.9</span><br><span class="line">  kube-controller-manager:v1.17.9</span><br><span class="line">  kube-scheduler:v1.17.9</span><br><span class="line">  kube-proxy:v1.17.9</span><br><span class="line">  pause:3.1</span><br><span class="line">  etcd:v3.3.12</span><br><span class="line">  coredns:1.6.9</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">    docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;$imageName</span><br><span class="line">    docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;$imageName k8s.gcr.io&#x2F;$imageName</span><br><span class="line">    docker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;$imageName</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ul><li>查看安装的 Kubernetes 版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl version</span><br><span class="line"></span><br><span class="line">Client Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;17&quot;, GitVersion:&quot;v1.17.9&quot;, GitCommit:&quot;4fb7ed12476d57b8437ada90b4f93b17ffaeed99&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2020-07-15T16:18:16Z&quot;, GoVersion:&quot;go1.13.9&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux&#x2F;amd64&quot;&#125;</span><br><span class="line">Server Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;17&quot;, GitVersion:&quot;v1.17.9&quot;, GitCommit:&quot;4fb7ed12476d57b8437ada90b4f93b17ffaeed99&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2020-07-15T16:10:45Z&quot;, GoVersion:&quot;go1.13.9&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux&#x2F;amd64&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="32-安装-kata-命令行工具">3.2 安装 Kata 命令行工具</h3><p>以 CentOS 操作系统为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ source &#x2F;etc&#x2F;os-release</span><br><span class="line">$ yum -y install yum-utils</span><br><span class="line">$ ARCH&#x3D;$(arch)</span><br><span class="line">$ BRANCH&#x3D;&quot;$&#123;BRANCH:-master&#125;&quot;</span><br><span class="line">$ yum-config-manager --add-repo &quot;http:&#x2F;&#x2F;download.opensuse.org&#x2F;repositories&#x2F;home:&#x2F;katacontainers:&#x2F;releases:&#x2F;$&#123;ARCH&#125;:&#x2F;$&#123;BRANCH&#125;&#x2F;CentOS_$&#123;VERSION_ID&#125;&#x2F;home:katacontainers:releases:$&#123;ARCH&#125;:$&#123;BRANCH&#125;.repo&quot;</span><br><span class="line">$ yum -y install kata-runtime kata-proxy kata-shim</span><br></pre></td></tr></table></figure><h3 id="33-检测硬件是否支持-kata">3.3 检测硬件是否支持 Kata</h3><p>Kata 对硬件的要求需要满足以下任意条件：</p><ul><li>Intel VT-x technology.</li><li>ARM Hyp mode (virtualization extension).</li><li>IBM Power Systems.</li><li>IBM Z mainframes.</li></ul><p>安装完 kata-runtime 之后，执行检测命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kata-runtime kata-check</span><br><span class="line"></span><br><span class="line">System is capable of running Kata Containers</span><br><span class="line">System can currently create Kata Containers</span><br></pre></td></tr></table></figure><p>这里的输出表示，运行环境支持 Kata Containers 。</p><h3 id="34-配置并测试-docker">3.4 配置并测试 Docker</h3><ul><li>配置 kata-runtime 参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br></pre></td></tr></table></figure><p>新增如下内容，默认依然使用 runc，但是通过指定 runtime 参数可以使用 Kata 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;runtimes&quot;: &#123;</span><br><span class="line">    &quot;kata-runtime&quot;: &#123;</span><br><span class="line">      &quot;path&quot;: &quot;&#x2F;usr&#x2F;bin&#x2F;kata-runtime&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启 Docker 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart docker</span><br></pre></td></tr></table></figure><p>测试 Kata 是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --runtime&#x3D;kata-runtime  busybox uname -a</span><br><span class="line"></span><br><span class="line">Linux 249a23f53475 5.4.60-65.1.container #1 SMP Thu Jan 1 00:00:00 UTC 1970 x86_64 GNU&#x2F;Linux</span><br><span class="line"></span><br><span class="line">$  docker run busybox uname -a</span><br><span class="line"></span><br><span class="line">Linux b4812ed8990c 3.10.0-1127.el7.x86_64 #1 SMP Tue Mar 31 23:36:51 UTC 2020 x86_64 GNU&#x2F;Linux</span><br></pre></td></tr></table></figure><p>kata-runtime 容器使用的内核版本与宿主机不同，这就说明 kata-runtime 配置成功了。</p><h3 id="35-配置-kubelet">3.5 配置 Kubelet</h3><ul><li>新增配置文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p  &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;kubelet.service.d&#x2F;</span><br><span class="line">$ cat &lt;&lt; EOF | sudo tee  &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;kubelet.service.d&#x2F;0-containerd.conf</span><br><span class="line">[Service]                                                 </span><br><span class="line">Environment&#x3D;&quot;KUBELET_EXTRA_ARGS&#x3D;--container-runtime&#x3D;remote --runtime-request-timeout&#x3D;15m --container-runtime-endpoint&#x3D;unix:&#x2F;&#x2F;&#x2F;run&#x2F;containerd&#x2F;containerd.sock&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>重启生效</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart kubelet</span><br></pre></td></tr></table></figure><p>这里使用的是 containerd 。如果使用 CRI-O ，配置会不一样。</p><h3 id="36-给-kubernetes-提供-kata-runtime">3.6 给 Kubernetes 提供 kata-runtime</h3><p>通过直接创建 Container 可以使用 kata-runtime 。但在集群中，我们该如何告诉 Kubernetes 哪些负载需要使用 kata-runtime 呢？根据不同的版本，Kata 提供了不同的方式。</p><p>首先都需要生成 containerd 配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ containerd config default &gt; &#x2F;etc&#x2F;containerd&#x2F;config.toml</span><br></pre></td></tr></table></figure><ul><li>RuntimeClass 的方式</li></ul><p>这种方式对相关组件版本有要求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Kata Containers v1.5.0 or above (including 1.5.0-rc)</span><br><span class="line">Containerd v1.2.0 or above</span><br><span class="line">Kubernetes v1.12.0 or above</span><br></pre></td></tr></table></figure><p>在 config.toml 配置文件中，增加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[plugins.cri.containerd]</span><br><span class="line">  no_pivot &#x3D; false</span><br><span class="line">[plugins.cri.containerd.runtimes]</span><br><span class="line">  [plugins.cri.containerd.runtimes.runc]</span><br><span class="line">     runtime_type &#x3D; &quot;io.containerd.runc.v1&quot;</span><br><span class="line">     [plugins.cri.containerd.runtimes.runc.options]</span><br><span class="line">       NoPivotRoot &#x3D; false</span><br><span class="line">       NoNewKeyring &#x3D; false</span><br><span class="line">       ShimCgroup &#x3D; &quot;&quot;</span><br><span class="line">       IoUid &#x3D; 0</span><br><span class="line">       IoGid &#x3D; 0</span><br><span class="line">       BinaryName &#x3D; &quot;runc&quot;</span><br><span class="line">       Root &#x3D; &quot;&quot;</span><br><span class="line">       CriuPath &#x3D; &quot;&quot;</span><br><span class="line">       SystemdCgroup &#x3D; false</span><br><span class="line">  [plugins.cri.containerd.runtimes.kata]</span><br><span class="line">     runtime_type &#x3D; &quot;io.containerd.kata.v2&quot;</span><br><span class="line">  [plugins.cri.containerd.runtimes.katacli]</span><br><span class="line">     runtime_type &#x3D; &quot;io.containerd.runc.v1&quot;</span><br><span class="line">     [plugins.cri.containerd.runtimes.katacli.options]</span><br><span class="line">       NoPivotRoot &#x3D; false</span><br><span class="line">       NoNewKeyring &#x3D; false</span><br><span class="line">       ShimCgroup &#x3D; &quot;&quot;</span><br><span class="line">       IoUid &#x3D; 0</span><br><span class="line">       IoGid &#x3D; 0</span><br><span class="line">       BinaryName &#x3D; &quot;&#x2F;usr&#x2F;bin&#x2F;kata-runtime&quot;</span><br><span class="line">       Root &#x3D; &quot;&quot;</span><br><span class="line">       CriuPath &#x3D; &quot;&quot;</span><br><span class="line">       SystemdCgroup &#x3D; false</span><br></pre></td></tr></table></figure><p>这里 [plugins.cri.containerd.runtimes.kata] 中的 kata 将被作为 RuntimeClass handler 关键字。</p><ul><li>使用 untrusted_workload_runtime 的方式</li></ul><p>对于不符合上述版本要求的环境，可以使用之前的方式。</p><p>在配置文件中新增如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[plugins.cri.containerd.untrusted_workload_runtime]</span><br><span class="line">  runtime_type &#x3D; &quot;io.containerd.runtime.v1.linux&quot;</span><br><span class="line">  runtime_engine &#x3D; &quot;&#x2F;usr&#x2F;bin&#x2F;kata-runtime&quot;</span><br></pre></td></tr></table></figure><p>最后，都需要重启 containerd。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ containerd systemctl daemon-reload</span><br><span class="line">$ systemctl restart containerd</span><br></pre></td></tr></table></figure><h2 id="4-使用-kata-runtime">4. 使用 kata-runtime</h2><h3 id="41-runtimeclass-方式">4.1 RuntimeClass 方式</h3><ul><li>创建 RuntimeClass</li></ul><p>kata-runtime.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kind: RuntimeClass</span><br><span class="line">apiVersion: node.k8s.io&#x2F;v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: kata-containers</span><br><span class="line">handler: kata</span><br></pre></td></tr></table></figure><p>也可以为 runc 创建 RuntimeClass</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get runtimeclass</span><br><span class="line"></span><br><span class="line">NAME              CREATED AT</span><br><span class="line">kata-containers   2020-08-30</span><br></pre></td></tr></table></figure><p>创建负载 kata-pod.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: kata-nginx</span><br><span class="line">spec:</span><br><span class="line">  runtimeClassName: kata-containers</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx</span><br><span class="line">    image: nginx</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 80</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f kata-pod.yaml</span><br></pre></td></tr></table></figure><p>查看负载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  kata-runtime list</span><br></pre></td></tr></table></figure><h3 id="42-untrusted_workload_runtime-的方式">4.2 untrusted_workload_runtime 的方式</h3><p>untrusted_workload_runtime 使用 annotations 告诉 Kubernetes 集群哪些负载需要使用 kata-runtime。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">annotations:</span><br><span class="line">  io.kubernetes.cri.untrusted-workload: &quot;true&quot;</span><br><span class="line">下面是一个示例 kata-pod-untrusted.yaml</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: kata-nginx-untrusted</span><br><span class="line">  annotations:</span><br><span class="line">    io.kubernetes.cri.untrusted-workload: &quot;true&quot;</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx</span><br><span class="line">    image: nginx</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 80</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f kata-pod-untrusted.yaml</span><br></pre></td></tr></table></figure><h2 id="5-参考">5. 参考</h2><ol><li><a href="https://github.com/kata-containers/documentation/blob/master/install/centos-installation-guide.md" target="_blank" rel="noopener">https://github.com/kata-containers/documentation/blob/master/install/centos-installation-guide.md</a></li><li><a href="https://ustack.io/2019-11-21-container%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5%E6%A2%B3%E7%90%86.html" target="_blank" rel="noopener">https://ustack.io/2019-11-21-container相关概念梳理.html</a></li><li><a href="https://github.com/kata-containers/documentation/blob/master/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md" target="_blank" rel="noopener">https://github.com/kata-containers/documentation/blob/master/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md</a></li><li><a href="https://github.com/kubernetes/kubernetes/issues/73189" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/issues/73189</a></li><li><a href="https://blog.zufardhiyaulhaq.com/kubernetes-with-cri-containerd-and-kata-containers/" target="_blank" rel="noopener">https://blog.zufardhiyaulhaq.com/kubernetes-with-cri-containerd-and-kata-containers/</a></li></ol><blockquote><p>本文转载自：「陈少文的博客」，原文：<a href="https://tinyurl.com/y3b6b8zf%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/y3b6b8zf，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Kata-解决什么问题&quot;&gt;1. Kata 解决什么问题&lt;/h2&gt;
&lt;p&gt;安全性和隔离性是 Kata Container 显著区别于 Docker Container 的地方。&lt;/p&gt;
&lt;p&gt;Kata Container 来源于 Intel Clear Containers 和 Hyper runV 项目的合并。Intel Clear Containers 借助 Intel VT-x 技术使用轻量级虚拟机提供容器，解决安全性问题，同时性能优异。而 Hyper runV 对标的是 Docker 的 runc ，提供容器的运行时，遵循 OCI runtime 规范。&lt;/p&gt;
&lt;h2 id=&quot;2-Kubernetes-中的-Kata&quot;&gt;2. Kubernetes 中的 Kata&lt;/h2&gt;
&lt;h3 id=&quot;2-1-OCI-和-CRI-O&quot;&gt;2.1 OCI 和 CRI-O&lt;/h3&gt;
&lt;p&gt;OCI 标准是为了避免容器标准被 Docker 独家挟持而出现的。&lt;/p&gt;
&lt;p&gt;CRI 标准将 Kubelet 与运行时解耦，实现 CRI 标准的容器管理程序都可以用于 Pod 创建。&lt;/p&gt;
&lt;p&gt;CRI-O 插件同时实现了 CRI 和 OCI 标准，可以用于替换 Containerd 直接与 runV 等 OCI runtime 对接。&lt;/p&gt;
&lt;p&gt;如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/k8s-kata01.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-2-Kata-与-Containerd&quot;&gt;2.2 Kata 与 Containerd&lt;/h3&gt;
&lt;p&gt;为了兼容 OCI 标准，Docker 将管理运行时的功能从 Docker Daemon 中剥离出来，形成了 Containerd 。在运行容器时，可以不用 Docker 的 runc ，而替换为 kata-runtime 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/k8s-kata02.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-3-Kata-与-Kuberntes-的集成&quot;&gt;2.3 Kata 与 Kuberntes 的集成&lt;/h3&gt;
&lt;p&gt;如下图，Kata 主要替换的是 OCI runtime 层，其他部分与基于 Docker runc 的 Kubernetes 并无差异。同时，基于 kata-runtime 的 Pod 和基于 runc 的 Pod 可以共存于集群之中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/k8s-kata03.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;目前的主要问题是，Kata 不支持 host 网络。而 Kubernetes 中，etcd、nodelocaldns、kube-apiserver、kube-scheduler、metrics-server、node-exporter、kube-proxy、calico、kube-controller-manager 等，也就是 Static Pod 和 Daemonset 都会使用 host 网络。所以在安装部署时，依然使用 runc 作为默认的运行时，而将 kata-runtime 作为可选的运行时给特定的负载使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/categories/kubernetes/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>巧用 Nsenter 调取宿主机工具调试容器内程序</title>
    <link href="https://www.hi-linux.com/posts/54659.html"/>
    <id>https://www.hi-linux.com/posts/54659.html</id>
    <published>2020-10-14T01:00:00.000Z</published>
    <updated>2020-10-14T01:39:45.411Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>nsenter 是一个可以用来进入到目标程序所在 Namespace 中运行命令的工具，一般常用于在宿主机上调试容器中运行的程序。</p><h2 id="nsenter-安装">nsenter 安装</h2><p>nsenter 位于 util-linux 包中，一般常用的 Linux 发行版都已经默认安装。如果你的系统没有安装，可以使用以下命令进行安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install util-linux</span><br></pre></td></tr></table></figure><h2 id="nsenter-用途">nsenter 用途</h2><p>一个比较典型的用途就是进入容器的网络命名空间。通常容器为了轻量级，大多都是不包含较为基础网络管理调试工具，比如：ip、ping、telnet、ss、tcpdump 等命令，给调试容器内网络带来相当大的困扰。</p><p>nsenter 命令可以很方便的进入指定容器的网络命名空间，使用宿主机的命令调试容器网络。</p><p>除此以外，nsenter 还可以进入 mnt、uts、ipc、pid、user 等命名空间，以及指定根目录和工作目录。</p><a id="more"></a><h2 id="nsenter-用法">nsenter 用法</h2><p>首先看下 nsenter 命令的语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ nsenter [options] [program [arguments]]</span><br><span class="line"></span><br><span class="line">options:</span><br><span class="line"></span><br><span class="line">-a, --all enter all namespaces of the target process by the default &#x2F;proc&#x2F;[pid]&#x2F;ns&#x2F;* namespace paths.</span><br><span class="line">-m, --mount[&#x3D;&lt;file&gt;]：进入 mount 命令空间。如果指定了 file，则进入 file 的命名空间</span><br><span class="line">-u, --uts[&#x3D;&lt;file&gt;]：进入 UTS 命名空间。如果指定了 file，则进入 file 的命名空间</span><br><span class="line">-i, --ipc[&#x3D;&lt;file&gt;]：进入 System V IPC 命名空间。如果指定了 file，则进入 file 的命名空间</span><br><span class="line">-n, --net[&#x3D;&lt;file&gt;]：进入 net 命名空间。如果指定了 file，则进入 file 的命名空间</span><br><span class="line">-p, --pid[&#x3D;&lt;file&gt;：进入 pid 命名空间。如果指定了 file，则进入 file 的命名空间</span><br><span class="line">-U, --user[&#x3D;&lt;file&gt;：进入 user 命名空间。如果指定了 file，则进入 file 的命名空间</span><br><span class="line">-t, --target &lt;pid&gt; # 指定被进入命名空间的目标进程的 pid</span><br><span class="line">-G, --setgid gid：设置运行程序的 GID</span><br><span class="line">-S, --setuid uid：设置运行程序的 UID</span><br><span class="line">-r, --root[&#x3D;directory]：设置根目录</span><br><span class="line">-w, --wd[&#x3D;directory]：设置工作目录</span><br></pre></td></tr></table></figure><p>如果没有给出 program，则默认执行 <code>$SHELL</code>。最常用的参数组合是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 有的版本不一定有 -a 这个参数</span><br><span class="line">$ nsenter -a -t &lt;pid&gt; &lt;command&gt;</span><br><span class="line">$ nsenter -m -u -i -n -p -t &lt;pid&gt; &lt;command&gt;</span><br></pre></td></tr></table></figure><h2 id="nsenter-使用实例">nsenter 使用实例</h2><ol><li>进入 docker 容器的 namespace 中运行指定程序</li></ol><p>使用 nsenter 进入 docker 容器的 namespace 是非常简单的，通常你只需要以下两步：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 获取相应的 Dokcer 容器的 PID</span><br><span class="line">$ PID&#x3D;$(docker inspect --format &#123;&#123;.State.Pid&#125;&#125; &lt;container_name_or_ID&gt;)</span><br><span class="line"># 使用相应参数进入程序所在的不同 NameSpace</span><br><span class="line">$ nsenter -m -u -i -n -p -t $PID &lt;command&gt;</span><br></pre></td></tr></table></figure><p>下面我们来看几个实例:</p><ul><li>进入指定程序所在的所有命名空间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm --name test -d busybox  sleep 10000</span><br><span class="line">8115009baccc53a2a5f6dfff642e0d8ab1dfb95dde473d14fb9a06ce4e89364c</span><br><span class="line"></span><br><span class="line">$ docker ps |grep busybox</span><br><span class="line">8115009baccc        busybox             &quot;sleep 10000&quot;            9 seconds ago       Up 8 seconds                            test</span><br><span class="line"></span><br><span class="line">$ PID&#x3D;$(docker inspect --format &#123;&#123;.State.Pid&#125;&#125; 8115009baccc)</span><br><span class="line"></span><br><span class="line">$ nsenter -m -u -i -n -p -t $PID ps aux</span><br><span class="line">PID   USER     TIME  COMMAND</span><br><span class="line">    1 root      0:00 sleep 10000</span><br><span class="line">    7 root      0:00 ps aux</span><br><span class="line"></span><br><span class="line">$ nsenter -m -u -i -n -p -t $PID hostname</span><br><span class="line">8115009baccc</span><br></pre></td></tr></table></figure><ul><li>进入指定程序所在的网络命名空间</li></ul><p>运行一个 Nginx 容器，查看该容器的 Pid：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect -f &#123;&#123;.State.Pid&#125;&#125; nginx</span><br><span class="line">5645</span><br></pre></td></tr></table></figure><p>然后，使用 nsenter 命令进入该容器的网络命令空间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ nsenter -n -t5645</span><br><span class="line">$ ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1&#x2F;8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">18: eth0@if19: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link&#x2F;ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.2&#x2F;16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><ol start="2"><li>进入 Kubernetes 容器的 namespace 中运行指定程序</li></ol><p>如果是在 Kubernetes 中，在得到容器 Pid 之前，你还需先获取容器的 ID，可以使用如下命令获取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod nginx -n web -o yaml|grep containerID</span><br><span class="line">  - containerID: docker:&#x2F;&#x2F;cf0873782d587dbca6aa32f49605229da3748600a9926e85b36916141597ec85</span><br></pre></td></tr></table></figure><p>或者更为精确地获取 containerID：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod nginx -n web -o template --template&#x3D;&#39;&#123;&#123;range .status.containerStatuses&#125;&#125;&#123;&#123;.containerID&#125;&#125;&#123;&#123;end&#125;&#125;&#39;</span><br><span class="line">docker:&#x2F;&#x2F;cf0873782d587dbca6aa32f49605229da3748600a9926e85b36916141597ec85</span><br></pre></td></tr></table></figure><p>其它的步骤就和前面进入 Docker 容器的命名空间类似了。</p><h2 id="参考文档">参考文档</h2><ol><li><a href="https://www.googgle.com" target="_blank" rel="noopener">https://www.googgle.com</a></li><li><a href="https://staight.github.io/2019/09/23/nsenter%E5%91%BD%E4%BB%A4%E7%AE%80%E4%BB%8B/" target="_blank" rel="noopener">https://staight.github.io/2019/09/23/nsenter命令简介/</a></li><li><a href="https://mozillazg.com/2020/04/nsenter-usage.html" target="_blank" rel="noopener">https://mozillazg.com/2020/04/nsenter-usage.html</a></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nsenter 是一个可以用来进入到目标程序所在 Namespace 中运行命令的工具，一般常用于在宿主机上调试容器中运行的程序。&lt;/p&gt;
&lt;h2 id=&quot;nsenter-安装&quot;&gt;nsenter 安装&lt;/h2&gt;
&lt;p&gt;nsenter 位于 util-linux 包中，一般常用的 Linux 发行版都已经默认安装。如果你的系统没有安装，可以使用以下命令进行安装：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ yum install util-linux&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;nsenter-用途&quot;&gt;nsenter 用途&lt;/h2&gt;
&lt;p&gt;一个比较典型的用途就是进入容器的网络命名空间。通常容器为了轻量级，大多都是不包含较为基础网络管理调试工具，比如：ip、ping、telnet、ss、tcpdump 等命令，给调试容器内网络带来相当大的困扰。&lt;/p&gt;
&lt;p&gt;nsenter 命令可以很方便的进入指定容器的网络命名空间，使用宿主机的命令调试容器网络。&lt;/p&gt;
&lt;p&gt;除此以外，nsenter 还可以进入 mnt、uts、ipc、pid、user 等命名空间，以及指定根目录和工作目录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.hi-linux.com/categories/docker/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>几种常用 Python 包管理工具配置国内 PyPI 镜像源的方法</title>
    <link href="https://www.hi-linux.com/posts/18238.html"/>
    <id>https://www.hi-linux.com/posts/18238.html</id>
    <published>2020-09-21T01:00:00.000Z</published>
    <updated>2020-09-21T08:55:38.352Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>不论是使用 <code>pip</code>，还是 <code>Pipenv</code>、<code>Poetry</code> 等工具，安装 <code>Python</code> 包的时候会默认从官方的 <code>PyPI</code> 源下载文件，速度比较慢。国内的一些公司和机构提供了 <code>PyPI</code> 镜像源（<code>mirror source</code>），你可以设置让这些工具从国内的镜像源安装 <code>Python</code> 包，以便提高下载速度。</p><p>官方 <code>PyPI</code> 源的 URL 为 <code>https://pypi.org/simple</code> （旧的 <code>URL</code> 为 <code>https://pypi.python.org/simple</code> ），下面我们将以豆瓣提供的镜像源为例（<code>URL</code> 为 <code>https://pypi.doubanio.com/simple/</code>），介绍不同工具更改 <code>PyPI</code> 镜像源的方法。</p><h2 id="pip">pip</h2><p>临时设置可以通过 <code>-i</code> 选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install -i https:&#x2F;&#x2F;pypi.doubanio.com&#x2F;simple&#x2F; flask</span><br></pre></td></tr></table></figure><p>全局设置有不同的层级和文件位置，以用户全局（per-user）为例，在 <code>Linux</code> &amp; <code>macOS</code> 中，配置需要写到 <code>~/.pip/pip.conf</code> 文件中；<code>Windows</code> 中，配置文件位置为 <code>%HOMEPATH%\pip\pip.ini</code>，<code>%HOMEPATH%</code> 即你的用户文件夹，一般为 “<code>\Users\&lt;你的用户名&gt;</code>”，具体值可以使用 <code>echo %HOMEPATH%</code> 命令查看。</p><p>通常你需要手动创建对应的目录和文件，然后写入下面的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;pypi.doubanio.com&#x2F;simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host &#x3D; pypi.doubanio.com</span><br></pre></td></tr></table></figure><blockquote><p>附注：按照 <code>pip</code> 文档，上面的配置文件位置是旧（legacy）的配置方式，但是因为比较方便设置，这里沿用了。新的建议是 Linux &amp; macOS 放到 <code>$HOME/.config/pip/pip.conf</code>，Windows 则放到 <code>%APPDATA%\pip\pip.ini</code>。具体可以访问 <code>pip</code> 文档配置部分查看。</p></blockquote><a id="more"></a><h2 id="pipenv">Pipenv</h2><p>类似 <code>pip</code> 的 <code>-i （–index-url</code> 选项，你可以使用 <code>–pypi-mirror</code> 临时设置镜像源地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install --pypi-mirror https:&#x2F;&#x2F;pypi.doubanio.com&#x2F;simple flask</span><br></pre></td></tr></table></figure><p>如果想对项目全局（per-project）设置，可以修改 <code>Pipfile</code> 中 [[source]] 小节：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[[source]]</span><br><span class="line">url &#x3D; &quot;https:&#x2F;&#x2F;pypi.doubanio.com&#x2F;simple&quot;</span><br><span class="line">verify_ssl &#x3D; true</span><br><span class="line">name &#x3D; &quot;douban&quot;</span><br></pre></td></tr></table></figure><p>另外一种方式是使用环境变量 <code>PIPENV_PYPI_MIRROR</code> 设置（<code>Windows</code> 系统使用 <code>set</code> 命令）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ export PIPENV_PYPI_MIRROR&#x3D;https:&#x2F;&#x2F;pypi.doubanio.com&#x2F;simple</span><br></pre></td></tr></table></figure><p>你可以通过把这个环境变量的设置语句写入到终端的配置文件里实现 “永久” 设置，<code>Linux</code> &amp; <code>macOS</code> 可参考这里，<code>Windows</code> 可参考这里。</p><h2 id="poetry-flit">Poetry / Flit</h2><p>因为 <code>Poetry</code>，<code>Flit</code> 这些工具遵循 <code>PEP 518</code> 创建了一个 <code>pyproject.toml</code> 文件来替代 <code>setup.py</code>、<code>Pipfile</code> 等配置文件，所以我们可以在这个文件里更改 <code>PyPI</code> 源。</p><p>使用 <code>Poetry</code> 时，在 <code>pyproject.toml</code> 末尾添加下面的内容来设置自定义镜像源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[tool.poetry.source]]</span><br><span class="line">name &#x3D; &quot;douban&quot;</span><br><span class="line">url &#x3D; &quot;https:&#x2F;&#x2F;pypi.doubanio.com&#x2F;simple&#x2F;&quot;</span><br></pre></td></tr></table></figure><p>目前暂时没有其他方式，未来或许会为 <code>poetry add</code> 命令添加一个相关的设置选项。</p><p>同样的，<code>Flit</code> 大概要添加下面这些内容（未测试）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[tool.flit.source]]</span><br><span class="line">name &#x3D; &quot;douban&quot;</span><br><span class="line">url &#x3D; &quot;https:&#x2F;&#x2F;pypi.doubanio.com&#x2F;simple&#x2F;&quot;</span><br></pre></td></tr></table></figure><h1 id="常用的国内-pypi-镜像列表">常用的国内 PyPI 镜像列表</h1><ul><li>豆瓣 <a href="https://pypi.doubanio.com/simple/" target="_blank" rel="noopener">https://pypi.doubanio.com/simple/</a></li><li>网易 <a href="https://mirrors.163.com/pypi/simple/" target="_blank" rel="noopener">https://mirrors.163.com/pypi/simple/</a></li><li>阿里云 <a href="https://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">https://mirrors.aliyun.com/pypi/simple/</a></li><li>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a></li></ul><p>顺便提一下，使用镜像源需要注意一个问题：包的版本可能不会及时更新，遇到这种情况可以通过临时换回官方源解决。</p><blockquote><p>本文转载自：「李辉的博客」，原文：<a href="https://tinyurl.com/y5xfwxuu%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/y5xfwxuu，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不论是使用 &lt;code&gt;pip&lt;/code&gt;，还是 &lt;code&gt;Pipenv&lt;/code&gt;、&lt;code&gt;Poetry&lt;/code&gt; 等工具，安装 &lt;code&gt;Python&lt;/code&gt; 包的时候会默认从官方的 &lt;code&gt;PyPI&lt;/code&gt; 源下载文件，速度比较慢。国内的一些公司和机构提供了 &lt;code&gt;PyPI&lt;/code&gt; 镜像源（&lt;code&gt;mirror source&lt;/code&gt;），你可以设置让这些工具从国内的镜像源安装 &lt;code&gt;Python&lt;/code&gt; 包，以便提高下载速度。&lt;/p&gt;
&lt;p&gt;官方 &lt;code&gt;PyPI&lt;/code&gt; 源的 URL 为 &lt;code&gt;https://pypi.org/simple&lt;/code&gt; （旧的 &lt;code&gt;URL&lt;/code&gt; 为 &lt;code&gt;https://pypi.python.org/simple&lt;/code&gt; ），下面我们将以豆瓣提供的镜像源为例（&lt;code&gt;URL&lt;/code&gt; 为 &lt;code&gt;https://pypi.doubanio.com/simple/&lt;/code&gt;），介绍不同工具更改 &lt;code&gt;PyPI&lt;/code&gt; 镜像源的方法。&lt;/p&gt;
&lt;h2 id=&quot;pip&quot;&gt;pip&lt;/h2&gt;
&lt;p&gt;临时设置可以通过 &lt;code&gt;-i&lt;/code&gt; 选项：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pip install -i https:&amp;#x2F;&amp;#x2F;pypi.doubanio.com&amp;#x2F;simple&amp;#x2F; flask&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;全局设置有不同的层级和文件位置，以用户全局（per-user）为例，在 &lt;code&gt;Linux&lt;/code&gt; &amp;amp; &lt;code&gt;macOS&lt;/code&gt; 中，配置需要写到 &lt;code&gt;~/.pip/pip.conf&lt;/code&gt; 文件中；&lt;code&gt;Windows&lt;/code&gt; 中，配置文件位置为 &lt;code&gt;%HOMEPATH%\pip\pip.ini&lt;/code&gt;，&lt;code&gt;%HOMEPATH%&lt;/code&gt; 即你的用户文件夹，一般为 “&lt;code&gt;\Users\&amp;lt;你的用户名&amp;gt;&lt;/code&gt;”，具体值可以使用 &lt;code&gt;echo %HOMEPATH%&lt;/code&gt; 命令查看。&lt;/p&gt;
&lt;p&gt;通常你需要手动创建对应的目录和文件，然后写入下面的内容：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[global]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index-url &amp;#x3D; https:&amp;#x2F;&amp;#x2F;pypi.doubanio.com&amp;#x2F;simple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[install]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trusted-host &amp;#x3D; pypi.doubanio.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;附注：按照 &lt;code&gt;pip&lt;/code&gt; 文档，上面的配置文件位置是旧（legacy）的配置方式，但是因为比较方便设置，这里沿用了。新的建议是 Linux &amp;amp; macOS 放到 &lt;code&gt;$HOME/.config/pip/pip.conf&lt;/code&gt;，Windows 则放到 &lt;code&gt;%APPDATA%\pip\pip.ini&lt;/code&gt;。具体可以访问 &lt;code&gt;pip&lt;/code&gt; 文档配置部分查看。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.hi-linux.com/categories/Python/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Python" scheme="https://www.hi-linux.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>10 个冷门但又非常实用的 Docker 使用技巧</title>
    <link href="https://www.hi-linux.com/posts/48369.html"/>
    <id>https://www.hi-linux.com/posts/48369.html</id>
    <published>2020-09-15T01:00:00.000Z</published>
    <updated>2020-09-15T04:35:21.450Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>在平时的工作中，docker 接触得很多，除了经常使用的 <code>docker run</code> ，<code>docker stop</code> 等命令，<code>docker</code> 还有很多十分有用但是却不经常使用的命令，下面就来总结一下：</p><h2 id="1-docker-top">1. docker top</h2><p>这个命令是用来查看一个容器里面的进程信息的，比如你想查看一个 <code>nginx</code> 容器里面有几个 <code>nginx</code> 进程的时候，就可以这么做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker top 3b307a09d20d</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                805                 787                 0                   Jul13               ?                   00:00:00            nginx: master process nginx -g daemon off;</span><br><span class="line">systemd+            941                 805                 0                   Jul13               ?                   00:03:18            nginx: worker process</span><br></pre></td></tr></table></figure><h2 id="2-docker-load-ampamp-docker-save">2. docker load &amp;&amp; docker save</h2><p>我一般使用这两个命令去下载打包 <code>Kubernetes</code> 的镜像，因为你知道的国内的网速并不像国外那么快。</p><p><code>docker save</code> 可以把一个镜像保存到 <code>tar</code> 文件中，你可以这么做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker save registry:2.7.1 &gt;registry-2.7.1.tar</span><br></pre></td></tr></table></figure><p>同时 <code>docker load</code> 可以把镜像从 <code>tar</code> 文件导入到 <code>docker</code> 中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker load &lt; registry-2.7.1.tar</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="3-docker-search">3. docker search</h2><p>这个命令可以帮助你在命令行中方便的搜索 <code>DockerHub</code> 中的镜像，比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker search nginx</span><br><span class="line">NAME                               DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">nginx                              Official build of Nginx.                        13519               [OK]</span><br><span class="line">jwilder&#x2F;nginx-proxy                Automated Nginx reverse proxy for docker con…   1846                                    [OK]</span><br><span class="line">richarvey&#x2F;nginx-php-fpm            Container running Nginx + PHP-FPM capable of…   780                                     [OK]</span><br><span class="line">linuxserver&#x2F;nginx                  An Nginx container, brought to you by LinuxS…   123</span><br><span class="line">bitnami&#x2F;nginx                      Bitnami nginx Docker Image                      87                                      [OK]</span><br><span class="line">tiangolo&#x2F;nginx-rtmp                Docker image with Nginx using the nginx-rtmp…   85                                      [OK]</span><br><span class="line">jc21&#x2F;nginx-proxy-manager           Docker container for managing Nginx proxy ho…   73</span><br><span class="line">alfg&#x2F;nginx-rtmp                    NGINX, nginx-rtmp-module and FFmpeg from sou…   71                                      [OK]</span><br><span class="line">nginxdemos&#x2F;hello                   NGINX webserver that serves a simple page co…   57                                      [OK]</span><br><span class="line">jlesage&#x2F;nginx-proxy-manager        Docker container for Nginx Proxy Manager        53                                      [OK]</span><br><span class="line">nginx&#x2F;nginx-ingress                NGINX Ingress Controller for Kubernetes         37</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>当然这个功能在国内可能不会特别好用，因为…</p><h2 id="4-docker-events">4. docker events</h2><p>这个命令可以帮助你实时获取 <code>docker</code> 的各种事件信息，比如创建了一个容器什么的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker events</span><br><span class="line">2020-07-28T21:28:46.000403018+08:00 image load sha256:432bf69f0427b52cad10897342eaf23521b7d973566354118e9a59c4d31b5fae (name&#x3D;sha256:432bf69f0427b52cad10897342eaf23521b7d973566354118e9a59c4d31b5fae)</span><br></pre></td></tr></table></figure><h2 id="5-docker-update">5. docker update</h2><p>当你 <code>docker run</code> 了之后却发现里面有一些参数并不是你想要的状态比如你设置的 <code>nginx</code> 容器 <code>cpu</code> 或者内存太小，这个时候你就可以使用 <code>docker update</code> 去修改这些参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker update nginx --cpus 2</span><br></pre></td></tr></table></figure><h2 id="6-docker-history">6. docker history</h2><p>当你修改了一个镜像，但是忘记了每一层的修改命令，或者你想查看一个镜像是怎么构建的时候就可以使用这个命令，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker history  traefik:v2.1.6</span><br><span class="line">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span><br><span class="line">5212a87ddaba        5 months ago        &#x2F;bin&#x2F;sh -c #(nop)  LABEL org.opencontainers.…   0B</span><br><span class="line">&lt;missing&gt;           5 months ago        &#x2F;bin&#x2F;sh -c #(nop)  CMD [&quot;traefik&quot;]              0B</span><br><span class="line">&lt;missing&gt;           5 months ago        &#x2F;bin&#x2F;sh -c #(nop)  ENTRYPOINT [&quot;&#x2F;entrypoint.…   0B</span><br><span class="line">&lt;missing&gt;           5 months ago        &#x2F;bin&#x2F;sh -c #(nop)  EXPOSE 80                    0B</span><br><span class="line">&lt;missing&gt;           5 months ago        &#x2F;bin&#x2F;sh -c #(nop) COPY file:59a219a1fb7a9dc8…   419B</span><br><span class="line">&lt;missing&gt;           5 months ago        &#x2F;bin&#x2F;sh -c set -ex;  apkArch&#x3D;&quot;$(apk --print-…   52.9MB</span><br><span class="line">&lt;missing&gt;           5 months ago        &#x2F;bin&#x2F;sh -c apk --no-cache add ca-certificate…   1.85MB</span><br><span class="line">&lt;missing&gt;           6 months ago        &#x2F;bin&#x2F;sh -c #(nop)  CMD [&quot;&#x2F;bin&#x2F;sh&quot;]              0B</span><br><span class="line">&lt;missing&gt;           6 months ago        &#x2F;bin&#x2F;sh -c #(nop) ADD file:a1906f14a4e217a49…   4.81MB</span><br></pre></td></tr></table></figure><h2 id="7-docker-wait">7. docker wait</h2><p>这个命令可以查看容器的退出状态，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker wait 7f7f0522a7d0</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>这样你就可以知道这个容器是正常退出的还是异常退出的了。</p><h2 id="8-docker-pause-ampamp-docker-unpause">8. docker pause &amp;&amp; docker unpause</h2><p>当你运行了一个容器但是想要暂停它运行的时候，你就可以使用这个命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker pause 7f7f0522a7d0</span><br></pre></td></tr></table></figure><h2 id="9-docker-diff">9. docker diff</h2><p>当你运行了一个容器，但是你不知道容器里修改了哪一些文件的时候可以使用这个命令，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker diff 38c59255bf6e</span><br><span class="line">C &#x2F;etc</span><br><span class="line">A &#x2F;etc&#x2F;localtime</span><br><span class="line">C &#x2F;var</span><br><span class="line">C &#x2F;var&#x2F;lib</span><br><span class="line">A &#x2F;var&#x2F;lib&#x2F;registry</span><br></pre></td></tr></table></figure><h2 id="10-docker-stats">10. docker stats</h2><p>这个是 <code>docker</code> 内置的监控命令，当你想要查看当前主机下所有容器占用内存和 <code>cpu</code> 的情况的时候就可以使用这个命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker stats</span><br><span class="line"></span><br><span class="line">CONTAINER ID        NAME                           CPU %               MEM USAGE &#x2F; LIMIT     MEM %               NET I&#x2F;O             BLOCK I&#x2F;O           PIDS</span><br><span class="line">1c5ade04e7f9        redis                          0.08%               17.53MiB &#x2F; 47.01GiB   0.04%               10.9GB &#x2F; 37GB       0B &#x2F; 0B             4</span><br><span class="line">afe6d4ebe409        kafka-exporter                 0.09%               16.91MiB &#x2F; 47.01GiB   0.04%               1.97GB &#x2F; 1.53GB     752MB &#x2F; 0B          23</span><br><span class="line">f0c7c01a9c34        kafka-docker_zookeeper         0.01%               308.8MiB &#x2F; 47.01GiB   0.64%               20.2MB &#x2F; 12.2MB     971MB &#x2F; 3.29MB      28</span><br><span class="line">da8c5008955f        kafka-docker_kafka-manager     0.08%               393.2MiB &#x2F; 47.01GiB   0.82%               1.56MB &#x2F; 2.61MB     1.14GB &#x2F; 0B         60</span><br><span class="line">c8d51c583c49        kafka-docker_kafka             1.63%               1.256GiB &#x2F; 47.01GiB   2.67%               30.4GB &#x2F; 48.9GB     22.3GB &#x2F; 5.77GB     85</span><br><span class="line">......</span><br></pre></td></tr></table></figure><blockquote><p>本文转载自：「Bboysoul’s Blog」，原文：<a href="http://suo.im/6n2lLa%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">http://suo.im/6n2lLa，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在平时的工作中，docker 接触得很多，除了经常使用的 &lt;code&gt;docker run&lt;/code&gt; ，&lt;code&gt;docker stop&lt;/code&gt; 等命令，&lt;code&gt;docker&lt;/code&gt; 还有很多十分有用但是却不经常使用的命令，下面就来总结一下：&lt;/p&gt;
&lt;h2 id=&quot;1-docker-top&quot;&gt;1. docker top&lt;/h2&gt;
&lt;p&gt;这个命令是用来查看一个容器里面的进程信息的，比如你想查看一个 &lt;code&gt;nginx&lt;/code&gt; 容器里面有几个 &lt;code&gt;nginx&lt;/code&gt; 进程的时候，就可以这么做：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~ docker top 3b307a09d20d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root                805                 787                 0                   Jul13               ?                   00:00:00            nginx: master process nginx -g daemon off;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemd+            941                 805                 0                   Jul13               ?                   00:03:18            nginx: worker process&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-docker-load-docker-save&quot;&gt;2. docker load &amp;amp;&amp;amp; docker save&lt;/h2&gt;
&lt;p&gt;我一般使用这两个命令去下载打包 &lt;code&gt;Kubernetes&lt;/code&gt; 的镜像，因为你知道的国内的网速并不像国外那么快。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker save&lt;/code&gt; 可以把一个镜像保存到 &lt;code&gt;tar&lt;/code&gt; 文件中，你可以这么做：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~ docker save registry:2.7.1 &amp;gt;registry-2.7.1.tar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同时 &lt;code&gt;docker load&lt;/code&gt; 可以把镜像从 &lt;code&gt;tar&lt;/code&gt; 文件导入到 &lt;code&gt;docker&lt;/code&gt; 中&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~ docker load &amp;lt; registry-2.7.1.tar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.hi-linux.com/categories/docker/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 镜像仓库服务 Ghcr 快速上手教程</title>
    <link href="https://www.hi-linux.com/posts/29574.html"/>
    <id>https://www.hi-linux.com/posts/29574.html</id>
    <published>2020-09-08T01:00:00.000Z</published>
    <updated>2020-09-08T05:11:21.225Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2 id="github-container-registry">Github Container Registry</h2><p>9 月 1 日，<code>GitHub</code> 宣布 <code>Github Container Registry</code> 开始公测，测试期间提供免费、无限容量的 <code>Docker</code> 镜像仓库服务。</p><p>再也不用担心，<code>docker.io</code> 一言不合清理镜像了。真好真香！</p><p><code>GitHub</code> 正在以托管代码仓库为切入点，逐步覆盖整个研发工具链，打造一站式 <code>DevOps</code> 平台。项目管理有 <code>Issues</code> 、<code>Projects</code>，包管理有 <code>Packages</code>，<code>CI</code> 有 <code>Actions</code>，知识管理有 <code>Wiki</code> ，覆盖面越来越广。</p><p>接下来应该就是 <code>CD</code> 部分了，提供容器托管服务是个不错的选择。@GitHub</p><h2 id="推送第一个镜像">推送第一个镜像</h2><p>下面我们来试试推送一个镜像。</p><ol><li>创建登陆 Token</li></ol><p>直接使用 <code>GitHub</code> 的账户密码推送镜像会提示错误:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unauthorized: Your token has not been granted the required scopes to execute this query. The &#39;id&#39; field requires one of the following scopes: [&#39;read:packages&#39;], but your token has only been granted the: [&#39;&#39;] scopes. Please modify your token&#39;s scopes at: https:&#x2F;&#x2F;github.com&#x2F;settings&#x2F;tokens.</span><br></pre></td></tr></table></figure><p><code>Github Container registry</code> 需要使用 <code>https://github.com/settings/tokens/new</code> 页面创建的 <code>Token</code> 作为密码才可以推送镜像。</p><p>打开上面的链接，勾选 <code>write:packages</code> 和 <code>read:packages</code> ，<code>repo</code> 会自动选中，创建 <code>Token</code>。</p><p><img src="https://www.hi-linux.com/img/linux/ghcr1.png" alt=""></p><p><img src="https://www.hi-linux.com/img/linux/ghcr2.png" alt=""></p><p>下面以 <code>XXX</code> 代指这里的 <code>Token</code> 值。</p><ol start="2"><li>镜像推送</li></ol><ul><li>登陆</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;XXX&quot; | docker login ghcr.io -u shaowenchen --password-stdin</span><br><span class="line"></span><br><span class="line">WARNING! Your password will be stored unencrypted in &#x2F;root&#x2F;.docker&#x2F;config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;commandline&#x2F;login&#x2F;#credentials-store</span><br></pre></td></tr></table></figure><ul><li>新建 Tag</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看镜像列表</span><br><span class="line">$ docker images</span><br><span class="line">mysql     8.0.11      5dbe5b6313e1        2 years ago         445MB</span><br><span class="line"></span><br><span class="line"># 新建 Tag</span><br><span class="line">$ docker tag 5dbe5b6313e1 ghcr.io&#x2F;shaowenchen&#x2F;mysql</span><br></pre></td></tr></table></figure><ul><li>推送</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker push ghcr.io&#x2F;shaowenchen&#x2F;mysql</span><br><span class="line"></span><br><span class="line">The push refers to repository [ghcr.io&#x2F;shaowenchen&#x2F;mysql]</span><br><span class="line">ae2d2cded00e: ...</span><br><span class="line">latest: digest: sha256:d98a807f255bd60cd7807af6a11f94cd2456a2908a12adb3737088473c1625a2 size: 2828</span><br></pre></td></tr></table></figure><p>这样就完成了镜像的推送。但是镜像并不是每个人都可以 <code>pull</code> ，下面接着来看下镜像的可见性管理。</p><ol start="3"><li>可见性管理</li></ol><p>推送完成镜像之后，在个人的主页 <code>packages</code> 标签页下面，可以看到镜像列表。</p><p><img src="https://www.hi-linux.com/img/linux/ghcr3.png" alt=""></p><p>默认推送的镜像是 <code>Private</code> ，只有授权的账户才可以 <code>pull</code> 。而 <code>Public</code> 镜像可以匿名 <code>pull</code> ，没有限制。</p><ul><li>Private</li></ul><p><img src="https://www.hi-linux.com/img/linux/ghcr4.png" alt=""></p><p><img src="https://www.hi-linux.com/img/linux/ghcr5.png" alt=""></p><p>在 <code>Private</code> 镜像的 <code>Packages settings</code> 页面，可以将 <code>Private</code> 镜像改为 <code>Public</code> ，还可以进行授权的管理 <code>Manage Access</code>。</p><ul><li>Public</li></ul><p><img src="https://www.hi-linux.com/img/linux/ghcr6.png" alt=""></p><p><img src="https://www.hi-linux.com/img/linux/ghcr7.png" alt=""></p><p>需要注意的是在 <code>Public</code> 镜像的 <code>Packages settings</code> 页面，无法修改镜像的可见性，只能删除镜像。</p><h2 id="与-dockerpkggithubcom-的区别">与 <a href="http://docker.pkg.github.com" target="_blank" rel="noopener">docker.pkg.github.com</a> 的区别</h2><p><code>ghcr.io</code> 与 <code>docker.pkg.github.com</code> 类似，都是提供镜像仓库服务，使用一样的鉴权方式。但是也有些不同：</p><ol><li>维度不同</li></ol><p><code>ghcr.io</code> 针对的是账户维度，是以账户为基本对象提供的服务。而 <code>docker.pkg.github.com</code> 针对的是仓库维度，是以仓库为基本对象提供的服务。</p><ol start="2"><li>管理粒度不同</li></ol><p><img src="https://www.hi-linux.com/img/linux/ghcr8.png" alt=""></p><p><code>docker.pkg.github.com</code> 中的镜像不允许直接删除，只能通过删除仓库的方式，关联删除镜像。</p><p>而在 <code>ghcr.io</code> 中，可以直接完全管理镜像。</p><ol start="3"><li>镜像格式不同</li></ol><p>对比一下两者的镜像格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker.pkg.github.com&#x2F;OWNER&#x2F;REPOSITORY&#x2F;IMAGE-NAME</span><br><span class="line">ghcr.io&#x2F;OWNER&#x2F;IMAGE-NAME</span><br></pre></td></tr></table></figure><p><code>docker.pkg.github.com</code> 镜像格式形如 <code>docker.pkg.github.com/shaowenchen/pipeline-test/mysql</code> ，在名字中会带上仓库名。而 <code>ghcr.io</code> 提供的 <code>ghcr.io/shaowenchen/mysql</code> 与其他镜像仓库的命名规范更加一致。</p><h2 id="参考">参考</h2><ol><li><a href="https://docs.github.com/en/packages/using-github-packages-with-your-projects-ecosystem/configuring-docker-for-use-with-github-packages/" target="_blank" rel="noopener">https://docs.github.com/en/packages/using-github-packages-with-your-projects-ecosystem/configuring-docker-for-use-with-github-packages/</a></li><li><a href="https://github.blog/2020-09-01-introducing-github-container-registry/" target="_blank" rel="noopener">https://github.blog/2020-09-01-introducing-github-container-registry/</a></li></ol><blockquote><p>本文转载自：「陈少文的博客」，原文：<a href="http://suo.im/5MiEVF%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">http://suo.im/5MiEVF，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;div id=&quot;vip-container&quot;&gt;&lt;h2 id=&quot;github-container-registry&quot;&gt;Github Container Registry&lt;/h2&gt;
&lt;p&gt;9 月 1 日，&lt;code&gt;GitHub&lt;/code&gt; 宣布 &lt;code&gt;Github
        
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.hi-linux.com/categories/docker/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
      <category term="GitHub" scheme="https://www.hi-linux.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Nali：一个离线查询 IP 地理信息和 CDN 提供商的终端利器</title>
    <link href="https://www.hi-linux.com/posts/13783.html"/>
    <id>https://www.hi-linux.com/posts/13783.html</id>
    <published>2020-09-07T01:00:00.000Z</published>
    <updated>2020-09-07T08:31:55.161Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2 id="什么是-nali">什么是 Nali</h2><p><code>dig</code>、<code>nslookup</code>、<code>traceroute</code> 等都是非常实用的网络调试工具，<code>Nali</code> 是一个可以自动解析这些工具 <code>stdout</code> 中的 <code>IP</code> 并附上所属 <code>ISP</code> 和地理信息，对这些已是瑞士军刀般的工具可谓如虎添翼。</p><p><code>Nali</code> 取自中文「哪里」。<code>Nali</code> 一开始是数年前由 <code>surfchen</code> 用 <code>C</code> 和 <code>Perl</code> 写成的小工具（<code>C</code> 用于解析纯真 <code>IP</code> 数据库，<code>Perl</code> 用于解析 stdout），如今已经失传。</p><p>今天给大家介绍两款基于 <code>GO</code> 语言和 <code>Nodejs</code> 开发的，且具有更多高级功能的新一代  <code>Nali</code>。</p><a id="more"></a><h2 id="nali-cli">Nali CLI</h2><p><code>Nali CLI</code> 采用 <code>Nodejs</code> 开发，在安装之前，你的环境必须已经具备 <code>Nodejs</code> 环境。</p><p><strong>项目地址：</strong></p><ul><li>GitHub: <a href="https://github.com/sukkaw/nali-cli" target="_blank" rel="noopener">https://github.com/sukkaw/nali-cli</a></li><li>官网：<a href="https://nali.skk.moe/" target="_blank" rel="noopener">https://nali.skk.moe/</a></li></ul><h3 id="安装">安装</h3><p>对于环境中有 <code>Node.js</code> 的，可以直接通过 <code>NPM</code> 和 <code>Yarn</code> 安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># NPM</span><br><span class="line">$ npm i nali-cli -g</span><br><span class="line"># Yarn</span><br><span class="line">$ yarn global add nali-cli</span><br></pre></td></tr></table></figure><p><code>Nali CLI</code> 也有预编译好的供 <code>macOS x64</code> 和 <code>Linux x64</code> 的二进制文件，可以在 <code>GitHub Repo</code> 中的 <a href="https://github.com/SukkaW/nali-cli/tree/master/bin" target="_blank" rel="noopener">bin</a> 目录中下载。</p><p>首次运行 <code>Nali CLI</code> 时会自动下载所需的 <code>qqwry.dat</code> 到 <code>$HOME/.config/nali-cli/</code> 目录下。</p><h3 id="常用命令行语法">常用命令行语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ nali --help</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Usage: nali &lt;command&gt; [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -v, --version  版本信息</span><br><span class="line">  -h, --help     output usage information</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  parse          解析 stdin 或参数中的 IP 信息 (默认)</span><br><span class="line">  update         更新 IP 库</span><br><span class="line">  help [cmd]     display help for [cmd]</span><br><span class="line"></span><br><span class="line">$ nali update --help       </span><br><span class="line">Usage: update [options]</span><br><span class="line"></span><br><span class="line">更新 IP 库 (qqwry.dat)</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -r, --remote  获取最新 IP 库版本信息</span><br><span class="line">  -f, --force   强制更新 IP 库</span><br><span class="line">  -y, --yes     直接更新 IP 库</span><br><span class="line">  -h, --help    output usage information</span><br></pre></td></tr></table></figure><h3 id="使用">使用</h3><p><code>Nali CLI</code> 支持从传入的参数中解析 <code>IP</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ nali 11.4.5.14</span><br><span class="line">11.4.5.14 [美国 俄亥俄州哥伦布市 DoD 网络信息中心]</span><br><span class="line"></span><br><span class="line">$ nali Cloudflare 1.0.0.1 1.1.1.1</span><br><span class="line">Cloudflare 1.1.1.1 [美国 APNIC&amp;CloudFlare 公共 DNS 服务器] 1.0.0.1 [美国 APNIC&amp;CloudFlare 公共 DNS 服务器]</span><br><span class="line"></span><br><span class="line">$ nali 114.514.191.9 114.5.1.4</span><br><span class="line">114.514.191.8 114.5.1.4 [印度尼西亚]</span><br></pre></td></tr></table></figure><p>除此以外，<code>Nali CLI</code> 内置了以下几个常用工具：</p><ul><li>nali-dig</li><li>nali-nslookup</li><li>nali-ping</li><li>nali-tracepath</li><li>nali-traceroute</li></ul><blockquote><p>注意，上述工具只是 Wrapper，使用时仍然需要安装原始程序。比如要使用 nali-dig 和 nali-nslookup 需要先安装 Bind (dnsutils)。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ nali-nslookup nali.skk.moe 1.1.1.1</span><br><span class="line">Server:         1.1.1.1 [美国 APNIC&amp;CloudFlare 公共 DNS 服务器]</span><br><span class="line">Address:        1.1.1.1 [美国 APNIC&amp;CloudFlare 公共 DNS 服务器]#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:   nali.skk.moe</span><br><span class="line">Address: 104.18.100.28 [美国 CloudFlare 公司 CDN 节点]</span><br><span class="line">Name:   nali.skk.moe</span><br><span class="line">Address: 104.18.101.28 [美国 CloudFlare 公司 CDN 节点]</span><br><span class="line">Name:   nali.skk.moe</span><br><span class="line">Address: 2606:4700::6812:641c</span><br><span class="line">Name:   nali.skk.moe</span><br><span class="line">Address: 2606:4700::6812:651c</span><br></pre></td></tr></table></figure><p><code>Nali CLI</code> 还支持从外部的 <code>stdin</code> 中解析和查询 <code>IP</code> 信息，因此像 <code>mtr</code> 这类未被 <code>Nali CLI</code> 包装的工具也可以使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 这里以 dig 为例</span><br><span class="line"></span><br><span class="line">$ dig nali.skk.moe @1.1.1.1 +short | nali</span><br><span class="line">104.18.100.28 [美国 CloudFlare 公司 CDN 节点]</span><br><span class="line">104.18.101.28 [美国 CloudFlare 公司 CDN 节点]</span><br></pre></td></tr></table></figure><p>对于 <code>mtr</code> 等，还可以自行创建 <code>nali-mtr</code> 文件并添加到 <code>PATH</code> 中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line"></span><br><span class="line">mtr $@ 2&gt;&amp;1 | nali</span><br></pre></td></tr></table></figure><p>也可以直接在 <code>.bashrc</code> 或 <code>.zshrc</code> 中注册 <code>nali-mtr</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nali-mtr() &#123;</span><br><span class="line">  mtr $@ 2&gt;&amp;1 | nali</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Nali CLI</code> 也可以更新 <code>qqwry.dat</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nali upadte</span><br></pre></td></tr></table></figure><h2 id="nali-go-版本">Nali （Go 版本）</h2><p><code>Nali</code> （Go 版本）是在 <code>Sukka</code> 的 <code>Nodejs</code> 版本上进行改良的，它在原有功能的基础上增加了对 <code>IPv6</code> 的支持，并且增加了 <code>Geoip2</code> 数据库。</p><p><strong>项目地址：</strong></p><ul><li>GitHub: <a href="https://github.com/zu1k/nali" target="_blank" rel="noopener">https://github.com/zu1k/nali</a></li></ul><h3 id="支持的功能">支持的功能</h3><ul><li>纯真 IPv4 离线数据库</li><li>ZX IPv6 离线数据库</li><li>Geoip2 城市数据库 (可选)</li><li>IPIP 数据库 (可选)</li><li>CDN 服务提供商查询</li><li>支持管道处理</li><li>支持交互式查询</li><li>同时支持 IPv4 和 IPv6</li><li>查询完全离线</li><li>全平台支持</li></ul><h3 id="安装">安装</h3><ol><li>从源码安装</li></ol><p><code>Nali</code> 需要预先安装 <code>Go</code>. 安装后可以从源码安装软件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get -u -v github.com&#x2F;zu1k&#x2F;nali</span><br></pre></td></tr></table></figure><ol start="2"><li>下载预编译的可执行程序（推荐）</li></ol><p>直接从项目的 <a href="https://github.com/zu1k/nali/releases" target="_blank" rel="noopener">Release</a> 页面下载预编译好的可执行程序，你只需要选择适合你系统和硬件架构的版本下载，解压后直接运行即可。</p><h3 id="常用命令语法">常用命令语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ nali --help</span><br><span class="line">Usage:</span><br><span class="line">  nali [flags]</span><br><span class="line">  nali [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  cdn         Query cdn service provider</span><br><span class="line">  help        Help about any command</span><br><span class="line">  parse       Query IP information</span><br><span class="line">  update      update chunzhen ip database</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help     help for nali</span><br><span class="line">  -t, --toggle   Help message for toggle</span><br><span class="line"></span><br><span class="line">Use &quot;nali [command] --help&quot; for more information about a command.</span><br></pre></td></tr></table></figure><h3 id="使用">使用</h3><p>第一次使用时会需要点时间，因为要下载纯真和 <code>CDN</code> 相关数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ nali                                                         </span><br><span class="line">2020&#x2F;08&#x2F;20 17:37:14 文件不存在，尝试从网络获取最新纯真 IP 库</span><br><span class="line">2020&#x2F;08&#x2F;20 17:37:32 已将最新的 纯真IP库 保存到本地: &#x2F;Users&#x2F;Mike&#x2F;.nali&#x2F;qqwry.dat</span><br><span class="line">2020&#x2F;08&#x2F;20 17:37:32 文件不存在，尝试从网络获取最新ZX IPv6数据库</span><br><span class="line">2020&#x2F;08&#x2F;20 17:37:33 已将最新的 ZX IPv6数据库 保存到本地: &#x2F;Users&#x2F;Mike&#x2F;.nali&#x2F;ipv6wry.db</span><br><span class="line">2020&#x2F;08&#x2F;20 17:37:33 文件不存在，尝试从网络获取最新CDN数据库</span><br><span class="line">2020&#x2F;08&#x2F;20 17:37:34 已将最新的 CDN数据库 保存到本地: &#x2F;Users&#x2F;Mike&#x2F;.nali&#x2F;cdn.json</span><br></pre></td></tr></table></figure><ol><li>查询一个 IP 的地理信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ nali 1.2.3.4</span><br><span class="line">1.2.3.4 [澳大利亚 APNIC Debogon-prefix网络]</span><br><span class="line"></span><br><span class="line"># 或者使用管道</span><br><span class="line">$ echo IP 6.6.6.6 | nali</span><br><span class="line">IP 6.6.6.6 [美国 亚利桑那州华楚卡堡市美国国防部网络中心]</span><br></pre></td></tr></table></figure><ol start="2"><li>同时查询多个IP的地理信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ nali 1.2.3.4 4.3.2.1 123.23.3.0</span><br><span class="line">1.2.3.4 [澳大利亚 APNIC Debogon-prefix网络]</span><br><span class="line">4.3.2.1 [美国 新泽西州纽瓦克市Level3Communications]</span><br><span class="line">123.23.3.0 [越南 越南邮电集团公司]</span><br></pre></td></tr></table></figure><ol start="3"><li>交互式查询</li></ol><p>使用 <code>exit</code> 或 <code>quit</code> 退出查询。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ nali</span><br><span class="line">123.23.23.23</span><br><span class="line">123.23.23.23 [越南 越南邮电集团公司]</span><br><span class="line">1.0.0.1</span><br><span class="line">1.0.0.1 [美国 APNIC&amp;CloudFlare公共DNS服务器]</span><br><span class="line">8.8.8.8</span><br><span class="line">8.8.8.8 [美国 加利福尼亚州圣克拉拉县山景市谷歌公司DNS服务器]</span><br><span class="line">quit</span><br></pre></td></tr></table></figure><ol start="4"><li>与 dig 命令配合使用</li></ol><p>需要你系统中已经安装好 <code>dig</code> 程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ dig nali.lgf.im +short | nali</span><br><span class="line">104.28.2.115 [美国 CloudFlare公司CDN节点]</span><br><span class="line">104.28.3.115 [美国 CloudFlare公司CDN节点]</span><br><span class="line">172.67.135.48 [美国 CloudFlare节点]</span><br></pre></td></tr></table></figure><ol start="5"><li>与 nslookup 命令配合使用</li></ol><p>需要你系统中已经安装好 <code>nslookup</code> 程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ nslookup nali.lgf.im 8.8.8.8 | nali</span><br><span class="line">Server:         8.8.8.8 [美国 加利福尼亚州圣克拉拉县山景市谷歌公司DNS服务器]</span><br><span class="line">Address:        8.8.8.8 [美国 加利福尼亚州圣克拉拉县山景市谷歌公司DNS服务器]#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:   nali.lgf.im</span><br><span class="line">Address: 104.28.3.115 [美国 CloudFlare公司CDN节点]</span><br><span class="line">Name:   nali.lgf.im</span><br><span class="line">Address: 104.28.2.115 [美国 CloudFlare公司CDN节点]</span><br><span class="line">Name:   nali.lgf.im</span><br><span class="line">Address: 172.67.135.48 [美国 CloudFlare节点]</span><br></pre></td></tr></table></figure><ol start="6"><li>与任意程序配合使用</li></ol><p>因为 <code>nali</code> 支持管道处理，所以可以和任意程序配合使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash abc.sh | nali</span><br></pre></td></tr></table></figure><p><code>Nali</code> 将在 <code>IP</code> 后面插入 <code>IP</code> 地理信息，<code>CDN</code> 域名后面插入 <code>CDN</code> 服务提供商信息。</p><ol start="7"><li>支持 IPv6</li></ol><p>和 <code>IPv4</code> 用法完全相同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ nslookup google.com | nali</span><br><span class="line">Server:         127.0.0.53 [局域网 IP]</span><br><span class="line">Address:        127.0.0.53 [局域网 IP]#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:   google.com</span><br><span class="line">Address: 216.58.211.110 [美国 Google全球边缘网络]</span><br><span class="line">Name:   google.com</span><br><span class="line">Address: 2a00:1450:400e:809::200e [荷兰Amsterdam Google Inc. 服务器网段]</span><br></pre></td></tr></table></figure><ol start="8"><li>查询 CDN 服务提供商</li></ol><p>因为 <code>CDN</code> 服务通常使用 <code>CNAME</code> 的域名解析方式，所以推荐与 <code>nslookup</code> 或者 <code>dig</code> 配合使用，在已经知道 <code>CNAME</code> 后可单独使用。</p><ul><li>只查询 CDN 服务提供商</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ nslookup www.gov.cn | nali cdn</span><br><span class="line">Server:         127.0.0.53</span><br><span class="line">Address:        127.0.0.53#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">www.gov.cn      canonical name &#x3D; www.gov.cn.bsgslb.cn [白山云 CDN].</span><br><span class="line">www.gov.cn.bsgslb.cn [白山云 CDN]       canonical name &#x3D; zgovweb.v.bsgslb.cn [白山云 CDN].</span><br><span class="line">Name:   zgovweb.v.bsgslb.cn [白山云 CDN]</span><br><span class="line">Address: 185.232.56.148</span><br><span class="line">Name:   zgovweb.v.bsgslb.cn [白山云 CDN]</span><br><span class="line">Address: 185.232.56.147</span><br><span class="line">Name:   zgovweb.v.bsgslb.cn [白山云 CDN]</span><br><span class="line">Address: 2001:428:6402:21b::6</span><br><span class="line">Name:   zgovweb.v.bsgslb.cn [白山云 CDN]</span><br><span class="line">Address: 2001:428:6402:21b::5</span><br></pre></td></tr></table></figure><ul><li>查询所有信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ nslookup www.gov.cn | nali</span><br><span class="line">Server:         127.0.0.53 [局域网 IP]</span><br><span class="line">Address:        127.0.0.53 [局域网 IP]#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">www.gov.cn      canonical name &#x3D; www.gov.cn.bsgslb.cn [白山云 CDN].</span><br><span class="line">www.gov.cn.bsgslb.cn [白山云 CDN]       canonical name &#x3D; zgovweb.v.bsgslb.cn [白山云 CDN].</span><br><span class="line">Name:   zgovweb.v.bsgslb.cn [白山云 CDN]</span><br><span class="line">Address: 103.104.170.25 [新加坡 ]</span><br><span class="line">Name:   zgovweb.v.bsgslb.cn [白山云 CDN]</span><br><span class="line">Address: 2001:428:6402:21b::5 [美国Louisiana州Monroe Qwest Communications Company, LLC (CenturyLink)]</span><br><span class="line">Name:   zgovweb.v.bsgslb.cn [白山云 CDN]</span><br><span class="line">Address: 2001:428:6402:21b::6 [美国Louisiana州Monroe Qwest Communications Company, LLC (CenturyLink)]</span><br></pre></td></tr></table></figure><ul><li>单独使用</li></ul><p>需要提前查询到 <code>CNAME</code> 域名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nali cdn cdn.somecdncname.com</span><br></pre></td></tr></table></figure><h3 id="一些使用技巧">一些使用技巧</h3><ol><li>更新纯真数据库</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nali update</span><br><span class="line">2020&#x2F;07&#x2F;17 12:53:46 正在下载最新纯真 IP 库...</span><br><span class="line">2020&#x2F;07&#x2F;17 12:54:05 已将最新的纯真 IP 库保存到本地 &#x2F;root&#x2F;.nali&#x2F;qqwry.dat</span><br></pre></td></tr></table></figure><ol start="2"><li>使用自定义 IP 库</li></ol><p>使用自定义 <code>IP</code> 库前，你需要设置环境变量：<code>NALI_DB</code>。目前支持的变量内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Geoip2 [&#39;geoip&#39;, &#39;geoip2&#39;, &#39;geo&#39;]</span><br><span class="line">Chunzhen [&#39;chunzhen&#39;, &#39;qqip&#39;, &#39;qqwry&#39;]</span><br></pre></td></tr></table></figure><p>使用三方 <code>IP</code> 库，需要手动提前下载相应的 <code>IP</code> 数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Windows 平台</span><br><span class="line">## 使用geoip数据库</span><br><span class="line">set NALI_DB&#x3D;geoip</span><br><span class="line"></span><br><span class="line">## 使用ipip数据库</span><br><span class="line">set NALI_DB&#x3D;ipip</span><br><span class="line"></span><br><span class="line"># Linux平台</span><br><span class="line"></span><br><span class="line">## 使用geoip数据库</span><br><span class="line">export NALI_DB&#x3D;geoip</span><br><span class="line"></span><br><span class="line">## 使用ipip数据库</span><br><span class="line">export NALI_DB&#x3D;ipip</span><br></pre></td></tr></table></figure><h2 id="参考文档">参考文档</h2><ol><li><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></li><li><a href="https://blog.skk.moe/post/nali-cli/" target="_blank" rel="noopener">https://blog.skk.moe/post/nali-cli/</a></li><li><a href="https://juejin.im/post/6854573212865560584" target="_blank" rel="noopener">https://juejin.im/post/6854573212865560584</a></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-Nali&quot;&gt;什么是 Nali&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;dig&lt;/code&gt;、&lt;code&gt;nslookup&lt;/code&gt;、&lt;code&gt;traceroute&lt;/code&gt; 等都是非常实用的网络调试工具，&lt;code&gt;Nali&lt;/code&gt; 是一个可以自动解析这些工具 &lt;code&gt;stdout&lt;/code&gt; 中的 &lt;code&gt;IP&lt;/code&gt; 并附上所属 &lt;code&gt;ISP&lt;/code&gt; 和地理信息，对这些已是瑞士军刀般的工具可谓如虎添翼。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nali&lt;/code&gt; 取自中文「哪里」。&lt;code&gt;Nali&lt;/code&gt; 一开始是数年前由 &lt;code&gt;surfchen&lt;/code&gt; 用 &lt;code&gt;C&lt;/code&gt; 和 &lt;code&gt;Perl&lt;/code&gt; 写成的小工具（&lt;code&gt;C&lt;/code&gt; 用于解析纯真 &lt;code&gt;IP&lt;/code&gt; 数据库，&lt;code&gt;Perl&lt;/code&gt; 用于解析 stdout），如今已经失传。&lt;/p&gt;
&lt;p&gt;今天给大家介绍两款基于 &lt;code&gt;GO&lt;/code&gt; 语言和 &lt;code&gt;Nodejs&lt;/code&gt; 开发的，且具有更多高级功能的新一代  &lt;code&gt;Nali&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Nali" scheme="https://www.hi-linux.com/tags/Nali/"/>
    
  </entry>
  
  <entry>
    <title>分享两个冷门但又超实用的 VIM 使用技巧</title>
    <link href="https://www.hi-linux.com/posts/613.html"/>
    <id>https://www.hi-linux.com/posts/613.html</id>
    <published>2020-08-31T01:00:00.000Z</published>
    <updated>2020-08-31T01:42:14.359Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>最近在使用 <code>VIM</code> 时遇到两个新的问题，觉得还很挺有价值的。现在将处理方法总结后，分享给大家。</p><h2 id="vim-中-deletebackspace键不能向左删除">VIM 中 delete（backspace）键不能向左删除</h2><p>MacOS 下打开 <code>vim</code> 编辑文本，进入插入模式，要删除编辑之前的保存过的几个字符，按下 <code>delete</code> 键删除它们，万万没想到呀！只听到 &quot;duang duang duang”，竟然无效！</p><p>有一点先明确一下，在 <code>Mac</code> 的键盘中没有 <code>backspace</code> 键，有个键叫 <code>delete</code>，其实相当于 <code>Window</code> 下的 <code>backspace</code> 键，编辑文本时按下都具有向左删除字符的功能。</p><p><strong>问题的原因</strong></p><p>网上搜索得知，出现开头说的令人恼火的问题的原因是：</p><blockquote><p>VIM 使用了 compatible 模式，或者把 backspace 变量设置为空。其实 compatible 模式是 VIM 为了兼容 VI 而出现的配置，它的作用是使 VIM 的操作行为和规范和 VI 一致，而这种模式下 backspace 配置是空的。即意味着 backspace 无法删除 indent ， end of line ， start 这三种字符。</p></blockquote><p>在默认状态下，delete（backspace）按下只会删除本次插入模式下插入的文本，这跟 backspace 的模式设置有关，其模式可以设置为以下三种模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 same as “:set backspace&#x3D;” (Vi compatible)</span><br><span class="line">1 same as “:set backspace&#x3D;indent,eol”</span><br><span class="line">2 same as “:set backspace&#x3D;indent,eol,start”</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>问题的解决</strong></p><p>知道原因后，就好解决了，我们只需要将 <code>backspace</code> 的模式设置成 <code>2</code> 就可以了。</p><p>编辑 <code>~/.vimrc</code> 文件并添加以下内容并保存，下次进入 <code>VIM</code> 就可以在插入模式下任意使用 <code>delete</code>（<code>backspace</code>）键了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot; 解决插入模式下 delete&#x2F;backspce 键失效问题</span><br><span class="line">set backspace&#x3D;2</span><br></pre></td></tr></table></figure><h2 id="使用-vim-airline-美化你的状态栏">使用 vim-airline 美化你的状态栏</h2><p>之前一直使用 <code>Powerline</code> 进行状态栏美化，系统升级到 macOS 10.15.5 后突然发现不能正常使用了。</p><p>使用 Google 搜索解决问题无果后，发现了另一款更轻量且功能强大的状态栏美化神器 <code>vim-airline</code>。</p><blockquote><p>vim-airline 是一个在 VIM 中显示更友好的状态栏的插件，可以让你工作更开心哟！</p></blockquote><p>项目地址：<a href="https://github.com/vim-airline/vim-airline" target="_blank" rel="noopener">https://github.com/vim-airline/vim-airline</a></p><p>先看下效果，是不是很漂亮呢！</p><p><img src="https://www.hi-linux.com/img/linux/vim-airline.gif" alt=""></p><p><strong>安装 vim-airline</strong></p><p><code>vim-airline</code> 的使用也很简单，你只需直接下载 <code>vim-airline</code> 插件并放到 <code>VIM</code> 的安装目录下的插件目录即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;vim-airline&#x2F;vim-airline.git</span><br><span class="line">$ cp vim-airline&#x2F;plugin&#x2F;airline.vim ~&#x2F;.vim&#x2F;plugin&#x2F;</span><br><span class="line">$ ls ~&#x2F;.vim&#x2F;plugin</span><br><span class="line">airline-themes.vim airline.vim</span><br></pre></td></tr></table></figure><p>当然你也可以直接使用多种 <code>VIM</code> 插件管理器来安装 <code>vim-airline</code> 插件，比如：</p><table><thead><tr><th>Plugin Manager</th><th>Install with…</th></tr></thead><tbody><tr><td>[Pathogen]</td><td><code>git clone https://github.com/vim-airline/vim-airline ~/.vim/bundle/vim-airline</code><br>Remember to run <code>:Helptags</code> to generate help tags</td></tr><tr><td>[NeoBundle]</td><td><code>NeoBundle 'vim-airline/vim-airline'</code></td></tr><tr><td>[Vundle]</td><td><code>Plugin 'vim-airline/vim-airline'</code></td></tr><tr><td>[Plug]</td><td><code>Plug 'vim-airline/vim-airline'</code></td></tr><tr><td>[VAM]</td><td><code>call vam#ActivateAddons([ 'vim-airline' ])</code></td></tr><tr><td>[Dein]</td><td><code>call dein#add('vim-airline/vim-airline')</code></td></tr><tr><td>[minpac]</td><td><code>call minpac#add('vim-airline/vim-airline')</code></td></tr><tr><td>pack feature (native Vim 8 package feature)</td><td><code>git clone https://github.com/vim-airline/vim-airline ~/.vim/pack/dist/start/vim-airline</code><br>Remember to run <code>:helptags ~/.vim/pack/dist/start/vim-airline/doc</code> to generate help tags</td></tr></tbody></table><p><strong>配置 vim-airline</strong></p><p><code>vim-airline</code> 安装完成后，基本上就完全可以使用了。如果你需要定制一些个性化的需求，也可以通过 <code>.vimrc</code> 文件进行配置。下面是我的配置，你可以参考下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">if !exists(&#39;g:airline_symbols&#39;)</span><br><span class="line">let g:airline_symbols &#x3D; &#123;&#125;</span><br><span class="line">endif</span><br><span class="line">let g:airline_left_sep &#x3D; &#39;▶&#39;</span><br><span class="line">let g:airline_left_alt_sep &#x3D; &#39;❯&#39;</span><br><span class="line">let g:airline_right_sep &#x3D; &#39;◀&#39;</span><br><span class="line">let g:airline_right_alt_sep &#x3D; &#39;❮&#39;</span><br><span class="line">let g:airline_symbols.linenr &#x3D; &#39;¶&#39;</span><br><span class="line">let g:airline_symbols.branch &#x3D; &#39;⎇&#39;</span><br><span class="line"></span><br><span class="line">&quot; 是否打开tabline</span><br><span class="line">let g:airline#extensions#tabline#enabled &#x3D; 1</span><br><span class="line">let g:airline_theme&#x3D;&#39;powerlineish&#39;</span><br><span class="line"></span><br><span class="line">set laststatus&#x3D;2</span><br><span class="line">set encoding&#x3D;utf-8</span><br><span class="line">set t_Co&#x3D;256</span><br><span class="line">set fillchars+&#x3D;stl:\ ,stlnc:\</span><br><span class="line">set term&#x3D;xterm-256color</span><br><span class="line">set termencoding&#x3D;utf-8</span><br><span class="line">set nocompatible</span><br><span class="line">set number</span><br><span class="line">syntax enable</span><br><span class="line">set backspace&#x3D;2</span><br></pre></td></tr></table></figure><p><code>vim-airline</code> 除了自带的样式外，你还可以通过官方主题仓库 <code>vim-airline-themes</code> 项目找到更多漂亮又好用的主题哟！</p><p>项目地址： <a href="https://github.com/vim-airline/vim-airline-themes" target="_blank" rel="noopener">https://github.com/vim-airline/vim-airline-themes</a></p><p><img src="https://www.hi-linux.com/img/linux/vim-airline-theme.png" alt=""></p><p>最后，如果你还有什么好玩又实用的技巧，欢迎大家留言分享哟！</p><h2 id="参考文档">参考文档</h2><ol><li><p><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></p></li><li><p><a href="https://www.smslit.top/2016/11/27/vim-backspace-invalid/" target="_blank" rel="noopener">https://www.smslit.top/2016/11/27/vim-backspace-invalid/</a></p></li><li><p><a href="http://cenalulu.github.io/linux/why-my-backspace-not-work-in-vim/" target="_blank" rel="noopener">http://cenalulu.github.io/linux/why-my-backspace-not-work-in-vim/</a></p></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在使用 &lt;code&gt;VIM&lt;/code&gt; 时遇到两个新的问题，觉得还很挺有价值的。现在将处理方法总结后，分享给大家。&lt;/p&gt;
&lt;h2 id=&quot;VIM-中-delete（backspace）键不能向左删除&quot;&gt;VIM 中 delete（backspace）键不能向左删除&lt;/h2&gt;
&lt;p&gt;MacOS 下打开 &lt;code&gt;vim&lt;/code&gt; 编辑文本，进入插入模式，要删除编辑之前的保存过的几个字符，按下 &lt;code&gt;delete&lt;/code&gt; 键删除它们，万万没想到呀！只听到 &amp;quot;duang duang duang”，竟然无效！&lt;/p&gt;
&lt;p&gt;有一点先明确一下，在 &lt;code&gt;Mac&lt;/code&gt; 的键盘中没有 &lt;code&gt;backspace&lt;/code&gt; 键，有个键叫 &lt;code&gt;delete&lt;/code&gt;，其实相当于 &lt;code&gt;Window&lt;/code&gt; 下的 &lt;code&gt;backspace&lt;/code&gt; 键，编辑文本时按下都具有向左删除字符的功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题的原因&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网上搜索得知，出现开头说的令人恼火的问题的原因是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VIM 使用了 compatible 模式，或者把 backspace 变量设置为空。其实 compatible 模式是 VIM 为了兼容 VI 而出现的配置，它的作用是使 VIM 的操作行为和规范和 VI 一致，而这种模式下 backspace 配置是空的。即意味着 backspace 无法删除 indent ， end of line ， start 这三种字符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在默认状态下，delete（backspace）按下只会删除本次插入模式下插入的文本，这跟 backspace 的模式设置有关，其模式可以设置为以下三种模式：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0 same as “:set backspace&amp;#x3D;” (Vi compatible)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 same as “:set backspace&amp;#x3D;indent,eol”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 same as “:set backspace&amp;#x3D;indent,eol,start”&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="VIM" scheme="https://www.hi-linux.com/categories/VIM/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="VIM" scheme="https://www.hi-linux.com/tags/VIM/"/>
    
  </entry>
  
  <entry>
    <title>新一代 Python 项目环境与依赖管理工具 Pipenv 入门教程</title>
    <link href="https://www.hi-linux.com/posts/2536.html"/>
    <id>https://www.hi-linux.com/posts/2536.html</id>
    <published>2020-08-24T01:00:00.000Z</published>
    <updated>2020-08-24T04:49:56.214Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>Python 开发中一般会使用 <code>Virtualenv</code>、<code>Pip</code> 管理项目运行环境与依赖。在创建一个新项目时先使用 <code>Virtualenv</code> 创建一个虚拟运行环境，然后使用 <code>Pip</code> 安装依赖，最后使用 <code>pip freeze &gt; requirements.txt</code> 记录项目依赖。这个过程中会遇到一些问题：</p><ul><li>版本信息没有保存</li><li>升级依赖包时需要先查看requirements.txt</li><li>开发环境与生产环境依赖区分</li></ul><p>解决上述问题最直接的做法就是生成多个 <code>requirements.txt</code> ，比如：<code>requirements-dev.txt</code>、<code>requirements-prod.txt</code> 并记录好依赖版本信息，或者选择 <code>Pipenv: Python Dev Workflow for Humans</code> 。</p><p>从名字可以很直观的看出 <code>pipenv = pip + virtualenv</code>。</p><a id="more"></a><h2 id="在开发中使用-pipenv">在开发中使用 pipenv</h2><p>在项目开发过程中使用 <code>pipenv</code> 体验基本与 <code>pip</code> 一致，而且由于 <code>pipenv</code> 也会同时管理虚拟环境，体验上流程更顺滑。<code>pipenv</code> 使用 <code>Pipfile</code> 与 <code>Pipfile.lock</code> 来管理依赖，<code>Pipfile.lock</code> 会根据安装的依赖包记录 hash 校验值与版本信息。</p><h3 id="创建虚拟环境">创建虚拟环境</h3><p>在新建项目目录下可以通过以下三种方式创建虚拟环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv --python 3.6</span><br><span class="line">$ pipenv --python &#x2F;path&#x2F;to&#x2F;python</span><br><span class="line">$ pipenv install requests --python 3.6</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果没有使用 <code>--python</code> 参数指定 Python 版本则会使用默认的 Python 版本创建，如果想指定默认 Python 版本可以通过环境变量 <code>PIPENV_DEFAULT_PYTHON_VERSION</code> 配置，可以设置为 Python 版本号：3.6.8 或 Python 解释器程序路径。</p></blockquote><p>如果需要虚拟运行环境目录指定在项目目录下创建，有两种方式可以实现：</p><ul><li>执行 pipenv 前先创建 .venv 目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir .venv &amp;&amp; pipenv install requests --python 3.6</span><br></pre></td></tr></table></figure><ul><li>配置 PIPENV_VENV_IN_PROJECT 环境变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ export PIPENV_VENV_IN_PROJECT&#x3D;1</span><br></pre></td></tr></table></figure><p>如果想自定义这个目录则需要通过 WORKON_HOME 环境变量来配置。</p><ol><li>从现有项目创建虚拟环境</li></ol><p>对于现有项目，可以区分为三种情况：</p><ul><li>没有使用 pipenv</li></ul><p>使用 <code>pipenv install -r path/to/requirements.txt --python 3.6</code> 来安装依赖。</p><ul><li>有使用意向，但需要兼容旧方式</li></ul><p>通过 <code>pipenv lock -r &gt; requirements.txt</code> 生成与 pip 相同格式的依赖管理文件。</p><ul><li>已经在使用</li></ul><p>根据需要可以使用 <code>pipenv install</code> 或 <code>pipenv sync</code>。两者都会根据 <code>Pipfile</code> 中的 <code>Python</code> 版本创建虚拟环境，使用指定的 <code>PyPI</code> 源，区别是 <code>pipenv install</code> 会根据 <code>Pipfile</code> 中的版本信息安装依赖包，并重新生成 <code>Pipfile.lock</code>；而 <code>pipenv sync</code> 会根据 <code>Pipfile.lock</code> 中的版本信息安装依赖包。</p><p>也就是 <code>pipenv install</code> 安装的依赖包版本可能被更新，具体的机制在依赖包管理中进一步说明。</p><h3 id="激活虚拟环境">激活虚拟环境</h3><p>可以先激活虚拟环境，再来运行 <code>Python</code> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv shell</span><br></pre></td></tr></table></figure><p>或者直接运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv run python main.py</span><br></pre></td></tr></table></figure><p>在项目根目录下有 <code>.env</code> 环境配置文件时，激活虚拟环境同时会加载 <code>.env</code> 文件中的环境变量配置，如果不想使用这个功能可以通过配置 <code>PIPENV_DONT_LOAD_ENV</code> 变量来关闭它。</p><h3 id="依赖包管理">依赖包管理</h3><p><code>pipenv</code> 安装包的使用方式与 <code>pip</code>基本一致，直接在项目目录下执行 <code>pipenv install request</code> 会安装到虚拟环境目录下，没有虚拟环境则会创建后安装。</p><ol><li>安装包</li></ol><p>没有指定版本信息时，<code>Pipfile</code> 中不会注明版本，如果在新目录中使用 <code>pipenv install</code> 直接安装依赖包的最新版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install requests</span><br></pre></td></tr></table></figure><p>以下方式会指定为 <code>1.2</code> 或以上版本，但不会大于等于 <code>2.0</code>，使用 <code>pipenv install</code> 安装依赖时，如果新版本在 <code>1.2</code> 到 <code>2.0</code> 之间（不包含 <code>2.0</code> 版本）就会更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install “requests~&#x3D;1.2”</span><br></pre></td></tr></table></figure><p>更多的版本指定方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install &quot;requests&gt;&#x3D;1.4&quot;   # 版本号大于或等于 1.4.0</span><br><span class="line">$ pipenv install &quot;requests&lt;&#x3D;2.13&quot;  # 版本号小于或等于 2.13.0</span><br><span class="line">$ pipenv install &quot;requests&gt;2.19&quot;   # 版本号大于 2.19.0</span><br></pre></td></tr></table></figure><p>如果仅仅在开发 环境下使用这个包，可以添加 <code>--dev</code> 参数安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install ipython --dev</span><br></pre></td></tr></table></figure><ol start="2"><li>更新包</li></ol><ul><li>查看有更新的包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv update --outdated</span><br></pre></td></tr></table></figure><ul><li>更新所有依赖包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv update</span><br></pre></td></tr></table></figure><ul><li>更新指定依赖包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv update request</span><br></pre></td></tr></table></figure><p>注意：升级依赖包的版本时受到 <code>Pipfile</code> 中版本信息限制，如果想安装超出限制的版本，则需要执行 <code>pipenv install &lt;pkg&gt;</code> 安装。</p><ol start="3"><li>卸载包</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv uninstall requests</span><br></pre></td></tr></table></figure><p>查看依赖关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv graph</span><br></pre></td></tr></table></figure><p>安装或卸载依赖包之后，<code>pipenv</code> 都会更新 <code>pipfile</code> 与 <code>pipfile.lock</code></p><h3 id="配置-pypi-镜像源">配置 PyPI 镜像源</h3><p>通常会使用 <code>pip.conf</code> 或者 <code>--index-url</code> 参数来配置 <code>PyPI</code> 镜像源，pipenv 中有多种配置方式：</p><ul><li>使用环境变量 PIPENV_PYPI_MIRROR 配置。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ export PIPENV_PYPI_MIRROR&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br></pre></td></tr></table></figure><ul><li>使用项目中的 pipfile 文件配置。</li></ul><p>通过项目 <code>pipfile</code> 文件中的 <code>[[source]]</code> 节也可以配置安装源，并且只对该项目生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[[source]]</span><br><span class="line">name &#x3D; &quot;pypi&quot;</span><br><span class="line">url &#x3D; &quot;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;&quot;</span><br><span class="line">verify_ssl &#x3D; true</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="配合-pyenv-使用">配合 pyenv 使用</h3><p><code>Linux</code> 和 <code>macOS</code> 下可以安装 <code>pyenv</code> 配合使用，在使用 <code>pipenv</code> 时如果指定的 <code>Python</code> 版本没有安装，就会调用 <code>pyenv</code> 进行编译安装。</p><p>首先请参考 <code>pyenv: Common build problems - Prerequisites</code> 安装好编译依赖。</p><p>官方文档链接：<a href="https://github.com/pyenv/pyenv/wiki/Common-build-problems#prerequisites" target="_blank" rel="noopener">https://github.com/pyenv/pyenv/wiki/Common-build-problems#prerequisites</a></p><p>然后根据 <code>Simple Python Version Management: pyenv - Installation</code> 安装好 <code>pyenv</code>。</p><p>官方文档链接：<a href="https://github.com/pyenv/pyenv#installation" target="_blank" rel="noopener">https://github.com/pyenv/pyenv#installation</a></p><blockquote><p>注意：Windows 用户请手动下载 Python 安装包安装，通过 <code>pipenv --python X:\Python\...\python.exe</code> 指定 Python 版本，如果想编译安装请自行解决。</p></blockquote><ol><li>配置 pyenv</li></ol><p>可以根据需要配置源码缓存与编译临时文件路径，解决因为网络问题无法下载源码包，或者 <code>/tmp</code> 分区空间不足造成编译安装失败。</p><ul><li>源码包缓存</li></ul><p>添加缓存目录，然后将源码包存放到缓存目录，并且编译失败时不会重新下载源码包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p $(pyenv root)&#x2F;cache</span><br></pre></td></tr></table></figure><ul><li>临时文件目录</li></ul><p>默认使用系统临时文件路径 <code>/tmp</code>，指定其他路径为临时文件目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ~&#x2F;tmp</span><br><span class="line">$ export TMPDIR&#x3D;&quot;$HOME&#x2F;tmp&quot;</span><br></pre></td></tr></table></figure><ul><li>有些第三方包工具比如 PyInstaller 需要 CPython 以 --enable-shared 参数编译</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ env PYTHON_CONFIGURE_OPTS&#x3D;&quot;--enable-shared&quot; pyenv install 3.6.8</span><br></pre></td></tr></table></figure><h2 id="在部署时使用-pipenv">在部署时使用 pipenv</h2><p>为了保证部署时安装的依赖版本与发布一致，使用 <code>pipenv install</code> 需要加上 <code>--deploy</code> 参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install --deploy</span><br></pre></td></tr></table></figure><p>如果不使用虚拟环境，还需要加上 <code>--system</code> 参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pipenv install --deploy --system</span><br></pre></td></tr></table></figure><h3 id="在-docker-中使用-pipenv">在 Docker 中使用 pipenv</h3><p>这里给一个 <code>Dockerfile</code> 作为参考。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.6.8</span><br><span class="line"></span><br><span class="line">ENV PIP_INDEX_URL https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line">RUN pip3 install pipenv --no-cache-dir</span><br><span class="line"></span><br><span class="line">RUN set -ex &amp;&amp; mkdir &#x2F;app</span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line"></span><br><span class="line">COPY Pipfile Pipfile</span><br><span class="line">COPY Pipfile.lock Pipfile.lock</span><br><span class="line">RUN set -ex &amp;&amp; pipenv install --deploy --system</span><br><span class="line"></span><br><span class="line">COPY . &#x2F;app</span><br><span class="line">EXPOSE 8888</span><br><span class="line">CMD [&quot;python3&quot;, &quot;main.py&quot;]</span><br></pre></td></tr></table></figure><p>也可以先构建一个 <code>Base Image</code> ，然后在构建应用镜像时使用，假设构建的 <code>Base Image tag</code> 为 <code>tomczhen/python-pipenv-base:3.6.8</code>。</p><ul><li>Base Image Dockerfile</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.6.8</span><br><span class="line"></span><br><span class="line">ENV PIP_INDEX_URL https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line">RUN pip3 install pipenv --no-cache-dir</span><br><span class="line"></span><br><span class="line">RUN set -ex &amp;&amp; mkdir &#x2F;app</span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line"></span><br><span class="line">ONBUILD COPY [&quot;Pipfile&quot;,&quot;Pipfile.lock&quot;,&quot;.&#x2F;&quot;]</span><br><span class="line">ONBUILD RUN set -ex &amp;&amp; pipenv install --deploy --system</span><br></pre></td></tr></table></figure><ul><li>Python Application Image Dockerfile</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM tomczhen&#x2F;python-pipenv-base:3.6.8</span><br><span class="line"></span><br><span class="line">COPY . &#x2F;app</span><br><span class="line">EXPOSE 8888</span><br><span class="line">CMD [&quot;python3&quot;, &quot;main.py&quot;]</span><br></pre></td></tr></table></figure><h2 id="pipenv-的缺点">pipenv 的缺点</h2><p>当然，<code>pipenv</code> 也有缺点存在。</p><h3 id="lock-耗时">lock 耗时</h3><p>Lock updating is very slow · Issue #1914 · pypa/pipenv</p><p>这是一个代价问题。</p><p>由于需要根据依赖关系以及文件 <code>hash</code> 来生成 <code>Pipfile.lock</code>，所以短时间内看这个问题应该是无法解决的。需要在 <code>pipenv</code> 带来的依赖管理功能与速度上做一个权衡取舍。</p><p>目前的办法是在安装依赖时使用 <code>pipenv install --skip-lock</code> 来跳过生成/更新 <code>Pipfile.lock</code>,然后在需要时执行 <code>pipenv lock</code> 来生成/更新 <code>Pipfile.lock</code>。</p><h3 id="跨平台问题">跨平台问题</h3><p>严格来说这并不算是 <code>pipenv</code> 的问题。</p><p>部分包在跨平台时的依赖不同，比如 <code>PyInstaller</code> 可以在多个平台使用，但仅在 <code>Windows</code> 上才依赖 <code>pywin32</code> 包，由于 <code>Pipfile.lock</code> 是根据安装的包生成的，在之前的 <code>pipenv</code> 版本中会造成跨平台时安装依赖失败（当前新版本中没有问题）。</p><p>根据 <code>Problem with Pipfile and system specific packages · Issue #1575 · pypa/pipenv</code> 中的讨论看，即便 <code>pywin32</code> 修复了问题也只能在新版本中解决，因此如果有跨平台需求还需要先确定是否正常。</p><blockquote><p>本文转载自：「Tom CzHen’s Blog」，原文：<a href="https://tinyurl.com/y6bw3wsx%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/y6bw3wsx，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 开发中一般会使用 &lt;code&gt;Virtualenv&lt;/code&gt;、&lt;code&gt;Pip&lt;/code&gt; 管理项目运行环境与依赖。在创建一个新项目时先使用 &lt;code&gt;Virtualenv&lt;/code&gt; 创建一个虚拟运行环境，然后使用 &lt;code&gt;Pip&lt;/code&gt; 安装依赖，最后使用 &lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; 记录项目依赖。这个过程中会遇到一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;版本信息没有保存&lt;/li&gt;
&lt;li&gt;升级依赖包时需要先查看requirements.txt&lt;/li&gt;
&lt;li&gt;开发环境与生产环境依赖区分&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决上述问题最直接的做法就是生成多个 &lt;code&gt;requirements.txt&lt;/code&gt; ，比如：&lt;code&gt;requirements-dev.txt&lt;/code&gt;、&lt;code&gt;requirements-prod.txt&lt;/code&gt; 并记录好依赖版本信息，或者选择 &lt;code&gt;Pipenv: Python Dev Workflow for Humans&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;从名字可以很直观的看出 &lt;code&gt;pipenv = pip + virtualenv&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.hi-linux.com/categories/Python/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Python" scheme="https://www.hi-linux.com/tags/Python/"/>
    
      <category term="Pipenv" scheme="https://www.hi-linux.com/tags/Pipenv/"/>
    
  </entry>
  
  <entry>
    <title>推荐一款自动更新 Docker 镜像与容器的神器 Watchtower</title>
    <link href="https://www.hi-linux.com/posts/49978.html"/>
    <id>https://www.hi-linux.com/posts/49978.html</id>
    <published>2020-08-17T01:00:00.000Z</published>
    <updated>2020-08-17T02:57:03.184Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2 id="前言">前言</h2><p><code>Docker</code> 容器的部署有一种在手机上装 <code>App</code> 的感觉，但 <code>Docker</code> 容器并不会像手机 <code>App</code> 那样会自动更新，而如果我们需要更新容器一般需要以下四个步骤：</p><ul><li>停止容器：<code>docker stop &lt;CONTAINER&gt;</code></li><li>删除容器：<code>docker rm &lt;CONTAINER&gt;</code></li><li>更新镜像：<code>docker pull &lt;IMAGE&gt;</code></li><li>启动容器：<code>docker run &lt;ARG&gt; ... &lt;IMAGE&gt;</code></li></ul><p>停止容器这个步骤可以在删除容器时使用 <code>-f</code> 参数来代替，即使这样还是需要三个步骤。如果部署了大量的容器需要更新使用这种传统的方式工作量是巨大的。</p><p><code>Watchtower</code> 是一个可以实现自动化更新 <code>Docker</code> 基础镜像与容器的实用工具。它监视正在运行的容器以及相关的镜像，当检测到 <code>reg­istry</code> 中的镜像与本地的镜像有差异时，它会拉取最新镜像并使用最初部署时相同的参数重新启动相应的容器，一切好像什么都没发生过，就像更新手机上的 <code>App</code> 一样。</p><a id="more"></a><h2 id="快速开始">快速开始</h2><p><code>Watch­tower</code> 本身被打包为 <code>Docker</code> 镜像，因此可以像运行任何其他容器一样运行它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">    containrrr&#x2F;watchtower</span><br></pre></td></tr></table></figure><p>然后所有容器都会自动更新，也包括 Watch­tower 本身。</p><h2 id="选项参数">选项参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm containrrr&#x2F;watchtower -h</span><br><span class="line"></span><br><span class="line">Watchtower automatically updates running Docker containers whenever a new image is released.</span><br><span class="line">More information available at https:&#x2F;&#x2F;github.com&#x2F;containrrr&#x2F;watchtower&#x2F;.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  watchtower [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -a, --api-version string                          api version to use by docker client (default &quot;1.24&quot;)</span><br><span class="line">  -c, --cleanup                                     remove previously used images after updating</span><br><span class="line">  -d, --debug                                       enable debug mode with verbose logging</span><br><span class="line">      --enable-lifecycle-hooks                      Enable the execution of commands triggered by pre- and post-update lifecycle hooks</span><br><span class="line">  -h, --help                                        help for watchtower</span><br><span class="line">  -H, --host string                                 daemon socket to connect to (default &quot;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock&quot;)</span><br><span class="line">  -S, --include-stopped                             Will also include created and exited containers</span><br><span class="line">  -i, --interval int                                poll interval (in seconds) (default 300)</span><br><span class="line">  -e, --label-enable                                watch containers where the com.centurylinklabs.watchtower.enable label is true</span><br><span class="line">  -m, --monitor-only                                Will only monitor for new images, not update the containers</span><br><span class="line">      --no-pull                                     do not pull any new images</span><br><span class="line">      --no-restart                                  do not restart any containers</span><br><span class="line">      --notification-email-delay int                Delay before sending notifications, expressed in seconds</span><br><span class="line">      --notification-email-from string              Address to send notification emails from</span><br><span class="line">      --notification-email-server string            SMTP server to send notification emails through</span><br><span class="line">      --notification-email-server-password string   SMTP server password for sending notifications</span><br><span class="line">      --notification-email-server-port int          SMTP server port to send notification emails through (default 25)</span><br><span class="line">      --notification-email-server-tls-skip-verify</span><br><span class="line">                                                    Controls whether watchtower verifies the SMTP server&#39;s certificate chain and host name.</span><br><span class="line">                                                    Should only be used for testing.</span><br><span class="line"></span><br><span class="line">      --notification-email-server-user string       SMTP server user for sending notifications</span><br><span class="line">      --notification-email-subjecttag string        Subject prefix tag for notifications via mail</span><br><span class="line">      --notification-email-to string                Address to send notification emails to</span><br><span class="line">      --notification-gotify-token string            The Gotify Application required to query the Gotify API</span><br><span class="line">      --notification-gotify-url string              The Gotify URL to send notifications to</span><br><span class="line">      --notification-msteams-data                   The MSTeams notifier will try to extract log entry fields as MSTeams message facts</span><br><span class="line">      --notification-msteams-hook string            The MSTeams WebHook URL to send notifications to</span><br><span class="line">      --notification-slack-channel string           A string which overrides the webhook&#39;s default channel. Example: #my-custom-channel</span><br><span class="line">      --notification-slack-hook-url string          The Slack Hook URL to send notifications to</span><br><span class="line">      --notification-slack-icon-emoji string        An emoji code string to use in place of the default icon</span><br><span class="line">      --notification-slack-icon-url string          An icon image URL string to use in place of the default icon</span><br><span class="line">      --notification-slack-identifier string        A string which will be used to identify the messages coming from this watchtower instance (default &quot;watchtower&quot;)</span><br><span class="line">  -n, --notifications strings                        notification types to send (valid: email, slack, msteams, gotify)</span><br><span class="line">      --notifications-level string                  The log level used for sending notifications. Possible values: panic, fatal, error, warn, info or debug (default &quot;info&quot;)</span><br><span class="line">      --remove-volumes                              remove attached volumes before updating</span><br><span class="line">      --revive-stopped                              Will also start stopped containers that were updated, if include-stopped is active</span><br><span class="line">  -R, --run-once                                    Run once now and exit</span><br><span class="line">  -s, --schedule string                             the cron expression which defines when to update</span><br><span class="line">  -t, --stop-timeout duration                       timeout before a container is forcefully stopped (default 10s)</span><br><span class="line">  -v, --tlsverify                                   use TLS and verify the remote</span><br></pre></td></tr></table></figure><h2 id="自动清除旧镜像">自动清除旧镜像</h2><p>官方给出的默认启动命令在长期使用后会堆积非常多的标签为 <code>none</code> 的旧镜像，如果放任不管会占用大量的磁盘空间。要避免这种情况可以加入 <code>--cleanup</code> 选项，这样每次更新都会把旧的镜像清理掉。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">    containrrr&#x2F;watchtower \</span><br><span class="line">    --cleanup</span><br></pre></td></tr></table></figure><p><code>--cleanup</code> 选项可以简写为 <code>-c</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">    containrrr&#x2F;watchtower -c</span><br></pre></td></tr></table></figure><h2 id="选择性自动更新">选择性自动更新</h2><p>某些容器可能需要稳定的运行，经常更新或重启可能会造成一些问题，这时我们可以使用一些选项参数来选择与控制容器的更新。</p><ol><li>容器更新列表</li></ol><p>假设我们只想更新 <code>nginx</code>、<code>redis</code> 这两个容器，我们可以把容器名称追加到启动命令的最后面，就像下面这个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">    containrrr&#x2F;watchtower -c \</span><br><span class="line">    nginx redis</span><br></pre></td></tr></table></figure><p>博主觉得把需要更新的容器名称写在启动命令中不利于管理，于是想了个更好的方法，建立一个更新列表文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~&#x2F;.watchtower.list</span><br><span class="line">aria2-pro</span><br><span class="line">unlockmusic</span><br><span class="line">mtg</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>通过变量的方式去调用这个列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">    containrrr&#x2F;watchtower -c \</span><br><span class="line">    $(cat ~&#x2F;.watchtower.list)</span><br></pre></td></tr></table></figure><p>这样只需要调整列表后删除 <code>Watch­tower</code> 容器并重新执行上面的命令重新启动 <code>Watch­tower</code> 即可。</p><ol start="2"><li>设置单个容器自动更新特征</li></ol><p>给容器添加 <code>com.centurylinklabs.watchtower.enable</code> 这个 <code>LA­BEL</code> 并设置它的值为 <code>false</code>，或者在启动命令中加入 <code>--label com.centurylinklabs.watchtower.enable=false</code> 参数可以排除相应的容器。下面这个例子是博主的 <code>openwrt-mini</code> 镜像的容器启动命令，<code>Watch­tower</code> 将永远忽略它的更新，即使它包含在自动更新列表中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name openwrt-mini \</span><br><span class="line">    --restart always \</span><br><span class="line">    --network openwrt \</span><br><span class="line">    --privileged \</span><br><span class="line">    --label com.centurylinklabs.watchtower.enable&#x3D;false \</span><br><span class="line">    p3terx&#x2F;openwrt-mini \</span><br><span class="line">    &#x2F;sbin&#x2F;init</span><br></pre></td></tr></table></figure><p>当容器启动命令中加入 <code>--label com.centurylinklabs.watchtower.enable=true</code> 参数，并且给 <code>Watch­tower</code> 加上 <code>--label-enable</code> 选项时，<code>Watch­tower</code> 将只更新这些包含此参数的容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">    containrrr&#x2F;watchtower -c \</span><br><span class="line">    --label-enable</span><br></pre></td></tr></table></figure><p><code>--label-enable</code> 可以简写为 <code>-e</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">    containrrr&#x2F;watchtower -ce</span><br></pre></td></tr></table></figure><p>因为需要在容器启动时进行设置，且设置后就无法直接更改，只能重建容器，所以这种方式的灵活性不如更新列表法。尤其是在设置 <code>com.centurylinklabs.watchtower.enable=false</code> 参数后容器将永远被 Watch­tower 忽略，也包括后面将要提到的手动更新方式，所以一般不推荐这样做，除非你愿意手动重建的原生方式更新。</p><h2 id="设置自动更新检查频率">设置自动更新检查频率</h2><p>默认情况下 <code>Watch­tower</code> 每 <code>5</code> 分钟会轮询一次，如果你觉得这个频率太高了可以使用如下选项来控制更新检查的频率，但二者只能选择其一。</p><p><code>--interval</code>, <code>-i</code> - 设置更新检测时间间隔，单位为秒。比如每隔 <code>1</code> 个小时检查一次更新：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">    containrrr&#x2F;watchtower -c \</span><br><span class="line">    --interval 3600</span><br></pre></td></tr></table></figure><p><code>--schedule</code>, <code>-s</code> - 设置定时检测更新时间。格式为 <code>6</code> 字段 <code>Cron</code> 表达式，而非传统的 <code>5</code> 字段，即第一位是秒。比如每天凌晨 <code>2</code> 点检查一次更新：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">    containrrr&#x2F;watchtower -c \</span><br><span class="line">    --schedule &quot;0 0 2 * * *&quot;</span><br></pre></td></tr></table></figure><h2 id="手动更新">手动更新</h2><p>前面的使用方式都是让 <code>Watch­tower</code> 以 <code>detached</code>（后台）模式在运行并自动更新容器，而 <code>Watch­tower</code> 也支持以 <code>foreground</code>（前台）模式来使用，即运行一次退出并删掉容器，来实现手动更新容器。这对于偶尔更新一次那些不在自动更新列表中的容器非常有用。</p><p>对于 <code>foreground</code> 模式，需要加上 <code>--run-once</code> 这个专用的选项。下面的例子 <code>Docker</code> 会运行一次 <code>Watch­tower</code> 并检查 <code>aria2-pro</code> 容器的基础镜像更新，最后删掉本次运行创建的 <code>Watch­tower</code> 容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm \</span><br><span class="line">    -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">    containrrr&#x2F;watchtower -c \</span><br><span class="line">    --run-once \</span><br><span class="line">    aria2-pro</span><br></pre></td></tr></table></figure><p><code>--run-once</code> 可以简写为 <code>-R</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm \</span><br><span class="line">    -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">    containrrr&#x2F;watchtower -cR \</span><br><span class="line">    aria2-pro</span><br></pre></td></tr></table></figure><p>需要注意的是当这个容器设置过 <code>com.centurylinklabs.watchtower.enable=false</code> 参数时不会更新。</p><h2 id="尾巴">尾巴</h2><p>以上是博主在使用 <code>Watch­tower</code> 中总结的一些使用方式和方法，当然它还有一些其它的功能与使用方式，比如电子邮件通知、监视私人注册表的镜像、更新远程主机上的容器等，这些对于一般用户来说可能很少会用到，所以这里就不赘述了，感兴趣的小伙伴可以去研究 <code>Watchtower</code> 官方文档。</p><blockquote><p>本文转载自：「P3TERX ZONE」，原文：<a href="https://tinyurl.com/y9e4pslr%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/y9e4pslr，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt; 容器的部署有一种在手机上装 &lt;code&gt;App&lt;/code&gt; 的感觉，但 &lt;code&gt;Docker&lt;/code&gt; 容器并不会像手机 &lt;code&gt;App&lt;/code&gt; 那样会自动更新，而如果我们需要更新容器一般需要以下四个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;停止容器：&lt;code&gt;docker stop &amp;lt;CONTAINER&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除容器：&lt;code&gt;docker rm &amp;lt;CONTAINER&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;更新镜像：&lt;code&gt;docker pull &amp;lt;IMAGE&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动容器：&lt;code&gt;docker run &amp;lt;ARG&amp;gt; ... &amp;lt;IMAGE&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;停止容器这个步骤可以在删除容器时使用 &lt;code&gt;-f&lt;/code&gt; 参数来代替，即使这样还是需要三个步骤。如果部署了大量的容器需要更新使用这种传统的方式工作量是巨大的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Watchtower&lt;/code&gt; 是一个可以实现自动化更新 &lt;code&gt;Docker&lt;/code&gt; 基础镜像与容器的实用工具。它监视正在运行的容器以及相关的镜像，当检测到 &lt;code&gt;reg­istry&lt;/code&gt; 中的镜像与本地的镜像有差异时，它会拉取最新镜像并使用最初部署时相同的参数重新启动相应的容器，一切好像什么都没发生过，就像更新手机上的 &lt;code&gt;App&lt;/code&gt; 一样。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.hi-linux.com/categories/docker/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://www.hi-linux.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 实用小妙招系列：巧用程序进程 PID、容器名称获取其对应的 Pod 名称或 PID</title>
    <link href="https://www.hi-linux.com/posts/1620.html"/>
    <id>https://www.hi-linux.com/posts/1620.html</id>
    <published>2020-08-13T01:00:00.000Z</published>
    <updated>2020-08-13T03:29:27.807Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>在管理 Kubernetes 集群的过程中，我们经常会遇到这样一种情况：在某台节点上发现某个进程资源占用量很高，却又不知道是哪个容器里的进程。有没有办法可以根据 PID 快速找到 Pod 名称呢？</p><p>假设现在有一个 Prometheus 进程的 PID 是 14338：</p><p><img src="https://www.hi-linux.com/img/linux/k8s-pid.png" alt=""></p><p>为了进一步挖掘信息，有两种思路，一种是挖掘 PID 对应的容器的信息，另一种是挖掘 PID 对应的 Pod 的信息。</p><h2 id="1-container-id">1. Container ID</h2><p>要获取容器的 ID，可以查看 PID 对应的 cgroup 信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;proc&#x2F;14338&#x2F;cgroup</span><br><span class="line"></span><br><span class="line">11:blkio:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">10:cpuset:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">9:freezer:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">8:hugetlb:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">7:perf_event:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">6:cpuacct,cpu:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">5:pids:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">4:devices:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">3:net_prio,net_cls:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">2:memory:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">1:name&#x3D;systemd:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br></pre></td></tr></table></figure><p>可以看到该进程对应的容器 ID 为 d6f24b62…，可以再优化一下上面的命令，直接获取容器 ID：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ CID&#x3D;$(cat &#x2F;proc&#x2F;14338&#x2F;cgroup | awk -F &#39;&#x2F;&#39; &#39;&#123;print $5&#125;&#39;)</span><br><span class="line">$ echo $&#123;CID:0:8&#125;</span><br><span class="line">d6f24b62</span><br></pre></td></tr></table></figure><a id="more"></a><p>最后一步根据容器 ID 获取 Pod 名称，如果你的容器运行时是 containerd 或 crio，可以使用 crictl 来获取容器信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 使用 Go template 或 jq 都能获取 Pod 名称，看个人喜好。</span><br><span class="line"></span><br><span class="line"># Go Template</span><br><span class="line">$ crictl inspect -o go-template --template&#x3D;&#39;&#123;&#123;index .status.labels &quot;io.kubernetes.pod.name&quot;&#125;&#125;&#39; d6f24b62</span><br><span class="line">prometheus-k8s-0</span><br><span class="line"></span><br><span class="line"># jq</span><br><span class="line">$ crictl inspect d6f24b62|jq &#39;.status.labels[&quot;io.kubernetes.pod.name&quot;]&#39;</span><br><span class="line">&quot;prometheus-k8s-0&quot;</span><br></pre></td></tr></table></figure><p>如果你的容器运行时是 Docker，可以使用命令行工具 docker 来获取，方法和上面类似。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect d6f24b62 | jq &#39;.[0].Config.Labels.&quot;io.kubernetes.pod.name&quot;&#39;</span><br><span class="line">&quot;prometheus-k8s-0&quot;</span><br></pre></td></tr></table></figure><p>一种特殊情况的处理，上面的方法适用于大多数场景。但有可能你的 <code>cat /proc/14338/cgroup</code> 输出的结果是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;proc&#x2F;14338&#x2F;cgroup</span><br><span class="line"></span><br><span class="line">11:blkio:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;docker-d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">10:cpuset:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;docker-d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">9:freezer:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;docker-d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>这时你就需要将上面取容器 ID 的方法稍做修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;proc&#x2F;d6f24b62&#x2F;cgroup | awk -F &#39;&#x2F;&#39; &#39;&#123;print $5&#125;&#39;|sed &#39;s&#x2F;docker-&#x2F;&#x2F;g&#39;</span><br><span class="line">11:blkio:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">10:cpuset:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br><span class="line">9:freezer:&#x2F;kubepods&#x2F;burstable&#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c</span><br></pre></td></tr></table></figure><h2 id="2-pod-uid">2. Pod UID</h2><p>下面来看看第二种方法，先根据 PID 直接获取 Pod UID：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;proc&#x2F;14338&#x2F;mountinfo | grep &quot;etc-hosts&quot; | awk -F &#x2F; &#123;&#39;print $6&#39;&#125;</span><br><span class="line">8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1</span><br></pre></td></tr></table></figure><p>然后根据 Pod UID 获取 Pod 名称：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ crictl ps -o json | jq  &#39;.[][].labels | select (.[&quot;io.kubernetes.pod.uid&quot;] &#x3D;&#x3D; &quot;8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&quot;) | .[&quot;io.kubernetes.pod.name&quot;]&#39;|uniq</span><br><span class="line">&quot;prometheus-k8s-0&quot;</span><br></pre></td></tr></table></figure><h2 id="3-整合">3. 整合</h2><p>方法是有了，怎么才能将所有的步骤合并成一个步骤，一步到位获取 Pod 名称呢？可以在 ~/.bashrc 中添加一个 shell 函数，选择上面的方法 1，并使用 go template 来格式化（你也可以使用上面提到的其他方法，但需要安装 jq）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">podinfo() &#123;</span><br><span class="line">  CID&#x3D;$(cat &#x2F;proc&#x2F;$1&#x2F;cgroup | awk -F &#39;&#x2F;&#39; &#39;&#123;print $5&#125;&#39;)</span><br><span class="line">  CID&#x3D;$(echo $&#123;CID:0:8&#125;)</span><br><span class="line">  crictl inspect -o go-template --template&#x3D;&#39;&#123;&#123;index .status.labels &quot;io.kubernetes.pod.name&quot;&#125;&#125;&#39; $CID</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行下面的命令使修改立即生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure><p>然后就可以使用该函数来获取 Pod 名称啦：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ podinfo 14338</span><br><span class="line">prometheus-k8s-0</span><br></pre></td></tr></table></figure><h2 id="4-举一反三">4. 举一反三</h2><p>这个思路也可以用来解决其他问题，大家要学会举一反三，我举个例子。Kubernetes 中的很多组件都是通过 HTTPS 协议来暴露指标，比如 kubelet，那么如何使用 API 来访问这些指标呢？</p><p>先选取一个容器，比如 prometheus，找到它的 PID：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef|grep &quot;&#x2F;bin&#x2F;prometheus&quot;</span><br><span class="line"></span><br><span class="line">1000     14338 14246  4 7月10 ?       04:29:02 &#x2F;bin&#x2F;prometheus --web.console.templates&#x3D;&#x2F;etc&#x2F;prometheus&#x2F;consoles --web.console.libraries&#x3D;&#x2F;etc&#x2F;prometheus&#x2F;console_libraries --config.file&#x3D;&#x2F;etc&#x2F;prometheus&#x2F;config_out&#x2F;prometheus.env.yaml --storage.tsdb.path&#x3D;&#x2F;prometheus --storage.tsdb.retention.time&#x3D;24h --web.enable-lifecycle --storage.tsdb.no-lockfile --web.route-prefix&#x3D;&#x2F;</span><br><span class="line">1000     14402 14246  0 7月10 ?       00:00:10 &#x2F;bin&#x2F;prometheus-config-reloader --log-format&#x3D;logfmt --reload-url&#x3D;http:&#x2F;&#x2F;localhost:9090&#x2F;-&#x2F;reload --config-file&#x3D;&#x2F;etc&#x2F;prometheus&#x2F;config&#x2F;prometheus.yaml.gz --config-envsubst-file&#x3D;&#x2F;etc&#x2F;prometheus&#x2F;config_out&#x2F;prometheus.env.yaml</span><br><span class="line">root     15956   555  0 18:19 pts&#x2F;0    00:00:00 grep --color&#x3D;auto &#x2F;bin&#x2F;prometheus</span><br></pre></td></tr></table></figure><p>根据 PID 找到 Pod UID：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;proc&#x2F;14338&#x2F;mountinfo | grep &quot;etc-hosts&quot; | awk -F &#x2F; &#123;&#39;print $6&#39;&#125;</span><br><span class="line">8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1</span><br></pre></td></tr></table></figure><p>根据 Pod UID 找到 Service Account 的 token 挂载目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ll &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;pods&#x2F;8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;volumes&#x2F;kubernetes.io~secret&#x2F;prometheus-k8s-token-p7bgb&#x2F;</span><br><span class="line"></span><br><span class="line">总用量 0</span><br><span class="line">lrwxrwxrwx 1 root root 13 7月  10 21:24 ca.crt -&gt; ..data&#x2F;ca.crt</span><br><span class="line">lrwxrwxrwx 1 root root 16 7月  10 21:24 namespace -&gt; ..data&#x2F;namespace</span><br><span class="line">lrwxrwxrwx 1 root root 12 7月  10 21:24 token -&gt; ..data&#x2F;token</span><br></pre></td></tr></table></figure><p>获取 token 信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ export TOKEN&#x3D;$(cat &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;pods&#x2F;8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;volumes&#x2F;kubernetes.io~secret&#x2F;prometheus-k8s-token-p7bgb&#x2F;token)</span><br></pre></td></tr></table></figure><p>通过 curl 直接访问指标：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s -H &quot;Authorization: Bearer $TOKEN&quot; --cacert &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;pods&#x2F;8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&#x2F;volumes&#x2F;kubernetes.io~secret&#x2F;prometheus-k8s-token-p7bgb&#x2F;ca.crt --insecure https:&#x2F;&#x2F;127.0.0.1:10250&#x2F;metrics&#x2F;cadvisor</span><br></pre></td></tr></table></figure><p>当然，如果你能找到集群管理员的证书、密钥和 CA 证书，也可以直接使用它们来访问，我就不展开说了。</p><h2 id="延伸阅读">延伸阅读</h2><p>上面的神技是不是很好用呢？一步步执行，你肯定觉得还是有点麻烦。最后在给大家提供两个另一位大神 YP 写的 Shell 脚本,使用它可以帮助你快速找到 Pid 和 Pod 的对应关系，助你定位问题哟！</p><h3 id="根据-pid-获取-k8s-pod-名称">根据 Pid 获取 K8s Pod 名称</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 通过 Pid 获取 Pod 名称</span><br><span class="line">$ .&#x2F;pod_name_info.sh Pid</span><br></pre></td></tr></table></figure><blockquote><p>注：该 Shell 脚本需要服务器上安装 jq 命令，因为脚本依赖 jq 来处理 json 格式。</p></blockquote><h3 id="根据-pod-名称获取-pid">根据 Pod 名称获取 Pid</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 通过 Pod名称 获取 Pid</span><br><span class="line">$ .&#x2F;pod_pid_info.sh Pod名称</span><br></pre></td></tr></table></figure><p>这么棒的神技，难道你不想掌握吗？欲下载此脚本，只需在公众号对话框内回复 「<code>k8s-pid-podname</code>」，即可获取下载地址。</p><h2 id="参考文档">参考文档</h2><ol><li><a href="https://mp.weixin.qq.com/s/77v46oIraV22acC8eYqC5A" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/77v46oIraV22acC8eYqC5A</a></li><li><a href="https://mp.weixin.qq.com/s/HF5rzr5fULiMWq1NPe780g" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/HF5rzr5fULiMWq1NPe780g</a></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在管理 Kubernetes 集群的过程中，我们经常会遇到这样一种情况：在某台节点上发现某个进程资源占用量很高，却又不知道是哪个容器里的进程。有没有办法可以根据 PID 快速找到 Pod 名称呢？&lt;/p&gt;
&lt;p&gt;假设现在有一个 Prometheus 进程的 PID 是 14338：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/k8s-pid.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;为了进一步挖掘信息，有两种思路，一种是挖掘 PID 对应的容器的信息，另一种是挖掘 PID 对应的 Pod 的信息。&lt;/p&gt;
&lt;h2 id=&quot;1-Container-ID&quot;&gt;1. Container ID&lt;/h2&gt;
&lt;p&gt;要获取容器的 ID，可以查看 PID 对应的 cgroup 信息：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cat &amp;#x2F;proc&amp;#x2F;14338&amp;#x2F;cgroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11:blkio:&amp;#x2F;kubepods&amp;#x2F;burstable&amp;#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&amp;#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10:cpuset:&amp;#x2F;kubepods&amp;#x2F;burstable&amp;#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&amp;#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9:freezer:&amp;#x2F;kubepods&amp;#x2F;burstable&amp;#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&amp;#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8:hugetlb:&amp;#x2F;kubepods&amp;#x2F;burstable&amp;#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&amp;#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7:perf_event:&amp;#x2F;kubepods&amp;#x2F;burstable&amp;#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&amp;#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6:cpuacct,cpu:&amp;#x2F;kubepods&amp;#x2F;burstable&amp;#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&amp;#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5:pids:&amp;#x2F;kubepods&amp;#x2F;burstable&amp;#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&amp;#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4:devices:&amp;#x2F;kubepods&amp;#x2F;burstable&amp;#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&amp;#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3:net_prio,net_cls:&amp;#x2F;kubepods&amp;#x2F;burstable&amp;#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&amp;#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2:memory:&amp;#x2F;kubepods&amp;#x2F;burstable&amp;#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&amp;#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1:name&amp;#x3D;systemd:&amp;#x2F;kubepods&amp;#x2F;burstable&amp;#x2F;pod8e018a8e-4aaa-4ac6-986a-1a5133a4bcf1&amp;#x2F;d6f24b62ea28e9e67f7bc06f98de083cc49454f353389cd396f5d3ac6448f19c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到该进程对应的容器 ID 为 d6f24b62…，可以再优化一下上面的命令，直接获取容器 ID：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ CID&amp;#x3D;$(cat &amp;#x2F;proc&amp;#x2F;14338&amp;#x2F;cgroup | awk -F &amp;#39;&amp;#x2F;&amp;#39; &amp;#39;&amp;#123;print $5&amp;#125;&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ echo $&amp;#123;CID:0:8&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d6f24b62&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/categories/kubernetes/"/>
    
    
      <category term="技巧" scheme="https://www.hi-linux.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>推荐一款强大的 Shell 历史命令管理神器 HSTR</title>
    <link href="https://www.hi-linux.com/posts/14499.html"/>
    <id>https://www.hi-linux.com/posts/14499.html</id>
    <published>2020-08-10T01:00:00.000Z</published>
    <updated>2020-08-10T04:48:26.591Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><code>HSTR</code> 是一款可以轻松查看、导航和搜索历史命令的小工具，它支持 <code>Bash</code> 和 <code>Zsh</code>。</p><blockquote><p>项目地址：<a href="https://github.com/dvorka/hstr" target="_blank" rel="noopener">https://github.com/dvorka/hstr</a></p></blockquote><p>话不多说，先看效果图。看完后，你就明白它的神奇之处了。</p><p><img src="https://www.hi-linux.com/img/linux/hstr-v2.gif" alt=""></p><h2 id="安装">安装</h2><p><code>HSTR</code> 提供了基本上全部主流平台上的安装包，安装非常简单。下面我们就来看一些常用的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Centos （需安装 EPEL 源）</span><br><span class="line">$ yum install  --disablerepo&#x3D;\* --enablerepo&#x3D;epel hstr</span><br><span class="line"></span><br><span class="line"># Ubuntu</span><br><span class="line">$ sudo add-apt-repository ppa:ultradvorka&#x2F;ppa &amp;&amp; sudo apt-get update &amp;&amp; sudo apt-get install hstr  </span><br><span class="line"></span><br><span class="line"># macOS</span><br><span class="line">$ brew install hstr</span><br></pre></td></tr></table></figure><p>如果你不是使用的上面的平台，你还可以参考「<a href="https://github.com/dvorka/hstr/blob/master/INSTALLATION.md" target="_blank" rel="noopener">官方安装文档</a> 」 查看其它平台的安装方法。</p><a id="more"></a><h2 id="使用-hstr">使用 HSTR</h2><p><code>HSTR</code> 安装完成后，你可以直接运行 <code>hstr</code> 命令使用它。 当然，如果每次都通过命令行调用，这看上去显得非常的不酷。</p><p>我们可以通过下面的方法给 <code>HSTR</code> 配置一个快捷键，方便日常调用。默认配置的快捷键是：<code>Ctrl+r</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># bash</span><br><span class="line">$ hstr --show-configuration &gt;&gt; ~&#x2F;.bashrc</span><br><span class="line">$ source ~&#x2F;.bashrc</span><br><span class="line"></span><br><span class="line"># zsh</span><br><span class="line">$ hstr --show-configuration &gt;&gt; ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure><p><code>HSTR</code> 默认生成的配置基本上能满足大多数应用场景。<code>HSTR</code> 可定制的参数也是很丰富的，比如：是否支持按正则方式匹配、默认显示收藏的命令等。如果你需要定制更多的个性化配置可参考「<a href="https://github.com/dvorka/hstr/blob/master/CONFIGURATION.md" target="_blank" rel="noopener">官方配置文档</a> 」 。</p><p><code>HSTR</code> 默认还为我们配置一个好用的别名：<code>hh</code>，你也可以随时通过它来运行 <code>HSTR</code>。更多好用好玩的功能，就等大家去官网探索吧！</p><h2 id="参考文档">参考文档</h2><ol><li><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></li><li><a href="https://github.com/dvorka/hstr" target="_blank" rel="noopener">https://github.com/dvorka/hstr</a></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;HSTR&lt;/code&gt; 是一款可以轻松查看、导航和搜索历史命令的小工具，它支持 &lt;code&gt;Bash&lt;/code&gt; 和 &lt;code&gt;Zsh&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/dvorka/hstr&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/dvorka/hstr&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;话不多说，先看效果图。看完后，你就明白它的神奇之处了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/hstr-v2.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;HSTR&lt;/code&gt; 提供了基本上全部主流平台上的安装包，安装非常简单。下面我们就来看一些常用的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Centos （需安装 EPEL 源）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yum install  --disablerepo&amp;#x3D;\* --enablerepo&amp;#x3D;epel hstr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo add-apt-repository ppa:ultradvorka&amp;#x2F;ppa &amp;amp;&amp;amp; sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install hstr  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# macOS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ brew install hstr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你不是使用的上面的平台，你还可以参考「&lt;a href=&quot;https://github.com/dvorka/hstr/blob/master/INSTALLATION.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方安装文档&lt;/a&gt; 」 查看其它平台的安装方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Shell" scheme="https://www.hi-linux.com/tags/Shell/"/>
    
      <category term="HSTR" scheme="https://www.hi-linux.com/tags/HSTR/"/>
    
  </entry>
  
  <entry>
    <title>微软开源基于 Envoy 的服务网格 Open Service Mesh</title>
    <link href="https://www.hi-linux.com/posts/27903.html"/>
    <id>https://www.hi-linux.com/posts/27903.html</id>
    <published>2020-08-07T01:00:00.000Z</published>
    <updated>2020-08-10T04:48:26.592Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><code>Open Service Mesh（OSM）</code> 是一个轻量级的、可扩展的、云原生的服务网格，它允许用户对高度动态的微服务环境进行统一管理、安全保护，并获得开箱即用的可观察性功能。</p><ul><li>官网地址 <a href="https://openservicemesh.io" target="_blank" rel="noopener">https://openservicemesh.io</a>，</li><li>开源仓库地址：<a href="https://github.com/openservicemesh/osm" target="_blank" rel="noopener">https://github.com/openservicemesh/osm</a></li></ul><p><img src="https://www.hi-linux.com/img/linux/Open-Service-Mesh-01.png" alt=""></p><p>微软今天宣布推出一个新的基于 <code>Envoy</code> 代理的 <code>Open Service Mesh</code>。<code>Open Service Mesh</code> 意在成为 <code>Service Mesh Interface（SMI）</code> 规范的参考实现，这是 <code>Kubernetes</code> 上 <code>Service Mesh</code> 的标准接口，得到了这个生态系统中大多数玩家的支持。</p><p>微软公司计划将 <code>Open Service Mesh</code> 捐赠给云原生计算基金会（<code>CNCF</code>），以确保它由社区主导，并具有开放的治理。</p><a id="more"></a><p>微软 Azure Compute 合作伙伴管理总监（同时也是 CNCF 董事会成员）Gabe Monroy 说：</p><blockquote><p>“SMI 真的引起了人们的共鸣，因此我们真的认为在生态系统中存在着 SMI 的参考实现空间，其中 Mesh 技术首先是实现 SMI API，并为客户提供最佳的 SMI 体验，”</p></blockquote><p><img src="https://www.hi-linux.com/img/linux/Open-Service-Mesh-02.gif" alt=""></p><p>他还补充说，因为 <code>SMI</code> 提供了最低共同点的 <code>API</code> 设计，所以 <code>Open Service Mesh</code> 让用户在需要一些更高级的功能时，可以 “保送” 到原始的 <code>Envoy</code>。Monroy 指出，这种 “没有断层” 的设计，是 <code>Open Service Mesh</code> 背后的核心理念。</p><p>至于它的功能集，<code>SMI</code> 处理了所有你期望的标准服务 <code>Mesh</code> 功能，包括使用 <code>mTLS</code> 确保服务之间的通信安全，管理访问控制策略，服务监控等。</p><p><img src="https://www.hi-linux.com/img/linux/Open-Service-Mesh-03.gif" alt=""></p><p>不过目前市场上还有很多其他的服务网格技术。那么微软为什么要推出这个呢？</p><p>“我们的客户一直告诉我们的是，今天的解决方案，<code>Istio</code> 就是一个很好的例子，非常复杂。” 他说。“这不仅仅是我说的。我们在 <code>AKS</code> 支持队列中看到了客户的数据，他们正在尝试使用这些东西 —— 他们就在这里挣扎。这就是难以使用的技术，难以大规模构建的技术。所以外面的解决方案都有一些不尽如人意的地方，我们真的觉得一些重量较轻、更注重 <code>SMI</code> 的东西，才是当前涉足这项技术的客户的最佳选择。”</p><p>Monroy 还指出，<code>Open Service Mesh</code> 可以与 <code>Linkerd</code> 等其他解决方案并驾齐驱。</p><p>很多专家预计谷歌也会将其 <code>Istio</code> 服务网格捐赠给 <code>CNCF</code>。但是这并没有实现。“这很有趣。很多人都非常关注治理方面的问题。” 他说。“我认为，当人们过度关注这一点时，你就会忽视客户是如何使用这项技术的。而事实是，客户今天使用 <code>Istio</code> 的日子并不好过。我想即使是那些深陷该社区的人也会承认这一点，这也是我们目前没有兴趣为该生态系统做出贡献的真正原因。”</p><p>英文原文地址：<a href="https://techcrunch.com/2020/08/05/microsoft-launches-open-service-mesh/" target="_blank" rel="noopener">https://techcrunch.com/2020/08/05/microsoft-launches-open-service-mesh/</a></p><blockquote><p>本文转载自：「ServiceMesher」，原文：<a href="https://mp.weixin.qq.com/s/-v-wo3Wl_qfnw3KfpdAzKA%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/-v-wo3Wl_qfnw3KfpdAzKA，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Open Service Mesh（OSM）&lt;/code&gt; 是一个轻量级的、可扩展的、云原生的服务网格，它允许用户对高度动态的微服务环境进行统一管理、安全保护，并获得开箱即用的可观察性功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官网地址 &lt;a href=&quot;https://openservicemesh.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://openservicemesh.io&lt;/a&gt;，&lt;/li&gt;
&lt;li&gt;开源仓库地址：&lt;a href=&quot;https://github.com/openservicemesh/osm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/openservicemesh/osm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/Open-Service-Mesh-01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;微软今天宣布推出一个新的基于 &lt;code&gt;Envoy&lt;/code&gt; 代理的 &lt;code&gt;Open Service Mesh&lt;/code&gt;。&lt;code&gt;Open Service Mesh&lt;/code&gt; 意在成为 &lt;code&gt;Service Mesh Interface（SMI）&lt;/code&gt; 规范的参考实现，这是 &lt;code&gt;Kubernetes&lt;/code&gt; 上 &lt;code&gt;Service Mesh&lt;/code&gt; 的标准接口，得到了这个生态系统中大多数玩家的支持。&lt;/p&gt;
&lt;p&gt;微软公司计划将 &lt;code&gt;Open Service Mesh&lt;/code&gt; 捐赠给云原生计算基金会（&lt;code&gt;CNCF&lt;/code&gt;），以确保它由社区主导，并具有开放的治理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ServiceMesh" scheme="https://www.hi-linux.com/categories/ServiceMesh/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
      <category term="ServiceMesh" scheme="https://www.hi-linux.com/tags/ServiceMesh/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 高性能网络组件 Calico 入门教程</title>
    <link href="https://www.hi-linux.com/posts/38692.html"/>
    <id>https://www.hi-linux.com/posts/38692.html</id>
    <published>2020-08-06T01:00:00.000Z</published>
    <updated>2020-08-06T06:43:16.897Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2 id="1-calico概述">1、Calico概述</h2><p>Calico 是 Kubernetes 生态系统中另一种流行的网络选择。虽然 Flannel 被公认为是最简单的选择，但 Calico 以其性能、灵活性而闻名。Calico 的功能更为全面，不仅提供主机和pod之间的网络连接，还涉及网络安全和管理。Calico CNI插件在 CNI 框架内封装了Calico的功能。</p><p>Calico 是一个基于BGP的纯三层的网络方案，与 OpenStack、Kubernetes、AWS、GCE 等云平台都能够良好地集成。Calico 在每个计算节点都利用 Linux Kernel 实现了一个高效的虚拟路由器 vRouter 来负责数据转发。每个 vRouter 都通过 BGP1 协议把在本节点上运行的容器的路由信息向整个 Calico 网络广播，并自动设置到达其他节点的路由转发规则。Calico 保证所有容器之间的数据流量都是通过IP路由的方式完成互联互通的。Calico 节点组网时可以直接利用数据中心的网络结构（ L2 或者 L3），不需要额外的 NAT、隧道或者 Overlay Network，没有额外的封包解包，能够节约 CPU 运算，提高网络效率。</p><p><img src="https://www.hi-linux.com/img/linux/k8s-calico-1.png" alt=""></p><p>Calico 在小规模集群中可以直接互联，在大规模集群中可以通过额外的 BGP route reflector 来完成。</p><p><img src="https://www.hi-linux.com/img/linux/k8s-calico-2.png" alt=""></p><p>此外，Calico 基于 Iptables 还提供了丰富的网络策略，实现了 Kubernetes 的 Network Policy 策略，提供容器间网络可达性限制的功能。</p><a id="more"></a><h2 id="2-calico-架构及-bgp-实现">2、Calico 架构及 BGP 实现</h2><p>BGP 是互联网上一个核心的去中心化自治路由协议，它通过维护IP路由表或“前缀”表来实现自治系统AS之间的可达性，属于矢量路由协议。不过，考虑到并非所有的网络都能支持 BGP，以及 Calico 控制平面的设计要求物理网络必须是二层网络，以确保 vRouter 间均直接可达，路由不能够将物理设备当作下一跳等原因，为了支持三层网络，Calico 还推出了 IP-in-IP 叠加的模型，它也使用 Overlay 的方式来传输数据。IPIP 的包头非常小，而且也是内置在内核中，因此理论上它的速度要比 VxLAN 快一点 ，但安全性更差。Calico 3.x 的默认配置使用的是IPIP类型的传输方案而非 BGP。</p><p>Calico 的系统架构如图所示：</p><p><img src="https://www.hi-linux.com/img/linux/k8s-calico-3.png" alt=""></p><p>Calico 主要由 Felix、Orchestrator Plugin、etcd、BIRD 和 BGP Router Reflector 等组件组成。</p><ul><li>Felix: Calico Agent，运行于每个节点。</li><li>Orchestrator Plugi：编排系统（如 Kubernetes 、 OpenStack 等）以将 Calico 整合进系统中的插件，例如 Kubernetes 的 CNI。</li><li>etcd：持久存储Calico数据的存储管理系统。</li><li>BIRD：用于分发路由信息的BGP客户端。</li><li>BGP Route Reflector: BGP 路由反射器，可选组件，用于较大规模的网络场景。</li></ul><h2 id="3-calico部署">3、Calico部署</h2><p>在 Kubernetes 中部署 Calico 的主要步骤如下:</p><ul><li><p>修改 Kubernetes 服务的启动参数，并重启服务</p><ul><li>设置 Master 上 kube-apiserver 服务的启动参数：–allowprivileged=true（因为 calico-node 需要以特权模式运行在各 Node 上）。</li><li>设置各 Node 上 kubelet 服务的启动参数：–networkplugin=cni（使用 CNI 网络插件）</li></ul></li><li><p>创建 Calico 服务，主要包括 calico-node 和 calico policy controller。需要创建的资源对象如下</p><ul><li>创建 ConfigMap calico-config，包含 Calico 所需的配置参数</li><li>创建 Secret calico-etcd-secrets，用于使用 TLS 方式连接 etcd。</li><li>在每个 Node 上都运行 calico/node 容器，部署为 DaemonSet</li><li>在每个 Node 上都安装 Calico（由 install-cni 容器完成）</li><li>部署一个名为 calico/kube-policy-controller 的 Deployment，以对接 Kubernetes 集群中为 Pod 设置的 Network Policy</li></ul></li></ul><p>具体部署的步骤如下：</p><p>下载 yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># curl https:&#x2F;&#x2F;docs.projectcalico.org&#x2F;v3.11&#x2F;manifests&#x2F;calico-etcd.yaml -o calico-etcd.yaml</span><br></pre></td></tr></table></figure><p>下载完后修改配置项</p><ul><li>配置连接 etcd 地址，如果使用 https，还需要配置证书。（ConfigMap，Secret）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># cat &#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;ca.pem | base64 -w 0</span><br><span class="line">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURlakNDQW1LZ0F3SUJBZ0lVRHQrZ21iYnhzWmoxRGNrbGl3K240MkI5YW5Nd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1F6RUxNQWtHQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFXcHBibWN4RURBT0JnTlZCQWNUQjBKbAphV3BwYm1jeEVEQU9CZ05WQkFNVEIyVjBZMlFnUTBFd0hoY05NVGt4TWpBeE1UQXdNREF3V2hjTk1qUXhNVEk1Ck1UQXdNREF3V2pCRE1Rc3dDUVlEVlFRR0V3SkRUakVRTUE0R0ExVUVDQk1IUW1WcGFtbHVaekVRTUE0R0ExVUUKQnhNSFFtVnBhbWx1WnpFUU1BNEdBMVVFQXhNSFpYUmpaQ0JEUVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRApnZ0VQQURDQ0FRb0NnZ0VCQUtEaGFsNHFaVG5DUE0ra3hvN3pYT2ZRZEFheGo2R3JVSWFwOGd4MTR4dFhRcnhrCmR0ZmVvUXh0UG5EbDdVdG1ZUkUza2xlYXdDOVhxM0hPZ3J1YkRuQ2ZMRnJZV05DUjFkeG1KZkNFdXU0YmZKeE4KVHNETVF1aUlxcnZ2aVN3QnQ3ZHUzczVTbEJUc2NOV0Y4TWNBMkNLTkVRbzR2Snp5RFZXRTlGTm1kdC8wOEV3UwpmZVNPRmpRV3BWWnprQW1Fc0VRaldtYUVHZjcyUXZvbmRNM2Raejl5M2x0UTgrWnJxOGdaZHRBeWpXQmdrZHB1ClVXZ2NaUTBZWmQ2Q2p4YWUwVzBqVkt5RER4bGlSQ3pLcUFiaUNucW9XYW1DVDR3RUdNU2o0Q0JiYTkwVXc3cTgKajVyekFIVVdMK0dnM2dzdndQcXFnL2JmMTR2TzQ2clRkR1g0Q2hzQ0F3RUFBYU5tTUdRd0RnWURWUjBQQVFILwpCQVFEQWdFR01CSUdBMVVkRXdFQi93UUlNQVlCQWY4Q0FRSXdIUVlEVlIwT0JCWUVGRFJTakhxMm0wVWVFM0JmCks2bDZJUUpPU2Vzck1COEdBMVVkSXdRWU1CYUFGRFJTakhxMm0wVWVFM0JmSzZsNklRSk9TZXNyTUEwR0NTcUcKU0liM0RRRUJDd1VBQTRJQkFRQUsyZXhBY2VhUndIRU9rQXkxbUsyWlhad1Q1ZC9jRXFFMmZCTmROTXpFeFJSbApnZDV0aGwvYlBKWHRSeWt0aEFUdVB2dzBjWVFPM1gwK09QUGJkOHl6dzRsZk5Ka1FBaUlvRUJUZEQvZWdmODFPCmxZOCtrRFhxZ1FZdFZLQm9HSGt5K2xRNEw4UUdOVEdaeWIvU3J5N0g3VXVDcTN0UmhzR2E4WGQ2YTNIeHJKYUsKTWZna1ZsNDA0bW83QXlWUHl0eHMrNmpLWCtJSmd3a2dHcG9DOXA2cDMyZDI1Q0NJelEweDRiZCtqejQzNXY1VApvRldBUmcySGdiTTR0aHdhRm1VRDcrbHdqVHpMczMreFN3Tys0S3Bmc2tScTR5dEEydUdNRDRqUTd0bnpoNi8wCkhQRkx6N0FGazRHRXoxaTNmMEtVTThEUlhwS0JKUXZNYzk4a3IrK24KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo&#x3D;</span><br><span class="line"></span><br><span class="line"># cat &#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;server-key.pem | base64 -w 0        </span><br><span class="line">LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdUZJdlNWNndHTTROZURqZktSWDgzWEVTWHhDVERvSVdpcFVJQmVTL3JnTHBFek10Cmk3enp6SjRyUGplbElJZ2ZRdVJHMHdJVXNzN3FDOVhpa3JGcEdnNXp5d2dMNmREZE9KNkUxcUIrUWprbk85ZzgKalRaenc3cWwxSitVOExNZ0k3TWNCU2VtWVo0TUFSTmd6Z09xd2x2WkVBMnUvNFh5azdBdUJYWFgrUTI2SitLVApYVEJ4MnBHOXoxdnVmU0xzMG52YzdKY2gxT2lLZ2R2UHBqSktPQjNMTm83ZnJXMWlaenprTExWSjlEV3U1NFdMCk4rVE5GZWZCK1lBTTdlSHVHTjdHSTJKdW1YL3hKczc3dnQzRjF2VStYSitzVTZ3cmRGMStULzVyamNUN1dDdmgKbkZVWlBxTk9NWUZTWUdlOVBIY1l0Y1Y1MENnUVV2NUx2OTE1elFJREFRQUJBb0lCQUY1YkRBUG1LZ1Y0cmVLRwpVbzhJeDNwZ29NUHppeVJaS2NybGdjYnFrOGt6aWpjZThzamZBSHNWMlJNdmp5TjVLMitseGkvTWwrWDFFRkRnCnUreldUdlJjdzZBQ3pYNXpRbHZ5b2hQdzh0Rlp5cURURUNSRjVMc2t1REdCUTlCNEVoTFVaSnFxOG54MFdMYlEKUWJVVW9YeC9ZajNhazJRUklOM0R5YnRYMlNpUHBPN1hVMmFiVkNzYkZBWW1uN2lweW16M25WWFRseDJuVk1sZQpmYzhXbERsd09pL3FJUThwZjNpRnowRDVoUGl5ZDY5eXp2b2ZrVk5CbCtodGFPbGdwdVNqSEFrNnhIcFpBUExTCkIxclVJaDk1RWozTUk5U3BuSnNWcUFFVHFSSmpYOHl3bFZYa2dvd3I2TXJuTnVXelRZUnlSNDY5UFVmKzhaSzQKUjE1WTdvMENnWUVBM21HdjErSmRuSkVrL1R4M2ZaMkFmOWJIazJ1dE5FemxUakN5YlZtYkxKamx0M1pjSG96UgphZVR2azJSQ0Q4VDU0NU9EWmIzS3Zxdzg2TXkxQW9lWmpqV3pTR1VIVHZJYTRDQ3lMenBXaVNaQkRHSE9KbDBtCk9nbnRRclFPK0UwZjNXOHZtbkp0NGoySGxMWHByL1R6Zk12R05lTWVkSUlIMC8xZXV0WkJjNnNDZ1lFQTFDK0gKaDVtQ0pnbllNcm5zK3dZZ2lWVTJFdjZmRUc2VGl2QU5XUUlldVpHcDRoclZISXc0UTV3SHhZNWgrNE15bXFORAprMmVDYU15RjFxb1NCS1hOckFZS3RtWCtxR3ltaVBpWlRJWEltZlppcENocWl3dm1udjMxbWE1Njk2NkZ6SjdaCjJTLzZkTGtweWI2OTUxRTl5azRBOEYzNVdQRlY4M01DanJ1bjBHY0NnWUFoOFVFWXIybGdZMXNFOS95NUJKZy8KYXZYdFQyc1JaNGM4WnZ4azZsOWY4RHBueFQ0TVA2d2JBS0Y4bXJubWxFY2I4RUVHLzIvNXFHcG5rZzh5d3FXeQphZ25pUytGUXNHMWZ0ajNjTFloVnlLdjNDdHFmU21weVExK2VaY00vTE81bkt2aFdGNDhrRUFZb3NaZG9qdmUzCkhaYzBWR1VxblVvNmxocW1ZOXQ3bndLQmdGbFFVRm9Sa2FqMVI5M0NTVEE0bWdWMHFyaEFHVEJQZXlkbWVCZloKUHBtWjZNcFZ4UktwS3gyNlZjTWdkYm5xdGFoRnhMSU5SZVZiQVpNa0wwVnBqVE0xcjlpckFoQmUrNUo0SWY4Rgo2VFIxYzN2cHp6OE1HVjBmUlB3Vlo0bE9HdC9RbFo1SUJjS1FGampuWXdRMVBDOGx1bHR6RXZ3UFNjQ1p6cC9KCitZOU5Bb0dBVkpybjl4QmZhYWF5T3BlMHFTTjNGVzRlaEZyaTFaRUYvVHZqS3lnMnJGUng3VDRhY1dNWWdSK20KL2RsYU9CRFN6bjNheVVXNlBwSnN1UTBFanpIajFNSVFtV3JOQXNGSVJiN0Z6YzdhaVQzMFZmNFFYUmMwQUloLwpXNHk0OW5wNWNDWUZ5SXRSWEhXMUk5bkZPSjViQjF2b1pYTWNMK1dyMVZVa2FuVlIvNEE9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line"># cat &#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;server.pem | base64 -w 0</span><br><span class="line">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURyekNDQXBlZ0F3SUJBZ0lVZUFZTHdLMkxVdnE0V2ZiSG92cTlzVS8rWlJ3d0RRWUpLb1pJaHZjTkFRRUwKQlFBd1F6RUxNQWtHQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFXcHBibWN4RURBT0JnTlZCQWNUQjBKbAphV3BwYm1jeEVEQU9CZ05WQkFNVEIyVjBZMlFnUTBFd0hoY05NVGt4TWpBeE1UQXdNREF3V2hjTk1qa3hNVEk0Ck1UQXdNREF3V2pCQU1Rc3dDUVlEVlFRR0V3SkRUakVRTUE0R0ExVUVDQk1IUW1WcFNtbHVaekVRTUE0R0ExVUUKQnhNSFFtVnBTbWx1WnpFTk1Bc0dBMVVFQXhNRVpYUmpaRENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUApBRENDQVFvQ2dnRUJBTGhTTDBsZXNCak9EWGc0M3lrVi9OMXhFbDhRa3c2Q0ZvcVZDQVhrdjY0QzZSTXpMWXU4Cjg4eWVLejQzcFNDSUgwTGtSdE1DRkxMTzZndlY0cEt4YVJvT2M4c0lDK25RM1RpZWhOYWdma0k1Snp2WVBJMDIKYzhPNnBkU2ZsUEN6SUNPekhBVW5wbUdlREFFVFlNNERxc0piMlJBTnJ2K0Y4cE93TGdWMTEva051aWZpazEwdwpjZHFSdmM5YjduMGk3Tko3M095WElkVG9pb0hiejZZeVNqZ2R5emFPMzYxdFltYzg1Q3kxU2ZRMXJ1ZUZpemZrCnpSWG53Zm1BRE8zaDdoamV4aU5pYnBsLzhTYk8rNzdkeGRiMVBseWZyRk9zSzNSZGZrLythNDNFKzFncjRaeFYKR1Q2alRqR0JVbUJudlR4M0dMWEZlZEFvRUZMK1M3L2RlYzBDQXdFQUFhT0JuVENCbWpBT0JnTlZIUThCQWY4RQpCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDCk1BQXdIUVlEVlIwT0JCWUVGTHNKb2pPRUZGcGVEdEhFSTBZOEZIUjQvV0c4TUI4R0ExVWRJd1FZTUJhQUZEUlMKakhxMm0wVWVFM0JmSzZsNklRSk9TZXNyTUJzR0ExVWRFUVFVTUJLSEJNQ29BajJIQk1Db0FqNkhCTUNvQWo4dwpEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQzVOSlh6QTQvTStFRjFHNXBsc2luSC9sTjlWWDlqK1FHdU0wRWZrCjhmQnh3bmV1ZzNBM2l4OGxXQkhZTCtCZ0VySWNsc21ZVXpJWFJXd0h4ZklKV2x1Ukx5NEk3OHB4bDBaVTZWUTYKalFiQVI2YzhrK0FhbGxBTUJUTkphY3lTWkV4MVp2c3BVTUJUU0l3bmk5RFFDUDJIQStDNG5mdHEwMGRvckQwcgp5OXVDZ3dnSDFrOG42TkdSZ0lJbVl6dFlZZmZHbEQ3R3lybEM1N0plSkFFbElUaElEMks1Y090M2dUb2JiNk5oCk9pSWpNWVAwYzRKL1FTTHNMNjZZRTh5YnhvZ2M2L3JTYzBIblladkNZbXc5MFZxY05oU3hkT2liaWtPUy9SdDAKZHVRSnU3cmdkM3pldys3Y05CaTIwTFZrbzc3dDNRZWRZK0c3dUxVZ21qNWJudkU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K</span><br></pre></td></tr></table></figure><p>将上述 Base64 加密的字符串修改至文件中声明：ca.pem 对应 etcd-ca、server-key.pem 对应 etcd-key、server.pem 对应 etcd-cert；修改 etcd 证书的位置；修改 etcd 的连接地址(与 api-server 中配置 /opt/kubernetes/cfg/kube-apiserver.conf 中相同)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># vim calico-etcd.yaml</span><br><span class="line">...</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">type: Opaque</span><br><span class="line">metadata:</span><br><span class="line">  name: calico-etcd-secrets</span><br><span class="line">  namespace: kube-system</span><br><span class="line">data:</span><br><span class="line">  # Populate the following with etcd TLS configuration if desired, but leave blank if</span><br><span class="line">  # not using TLS for etcd.</span><br><span class="line">  # The keys below should be uncommented and the values populated with the base64</span><br><span class="line">  # encoded contents of each file that would be associated with the TLS data.</span><br><span class="line">  # Example command for encoding a file contents: cat &lt;file&gt; | base64 -w 0</span><br><span class="line">  etcd-key: 填写上面的加密字符串</span><br><span class="line">  etcd-cert: 填写上面的加密字符串</span><br><span class="line">  etcd-ca: 填写上面的加密字符串</span><br><span class="line">...</span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: calico-config</span><br><span class="line">  namespace: kube-system</span><br><span class="line">data:</span><br><span class="line">  # Configure this with the location of your etcd cluster.</span><br><span class="line">  etcd_endpoints: &quot;https:&#x2F;&#x2F;192.168.2.61:2379,https:&#x2F;&#x2F;192.168.2.62:2379,https:&#x2F;&#x2F;192.168.2.63:2379&quot;</span><br><span class="line">  # If you&#39;re using TLS enabled etcd uncomment the following.</span><br><span class="line">  # You must also populate the Secret below with these files.</span><br><span class="line">  etcd_ca: &quot;&#x2F;calico-secrets&#x2F;etcd-ca&quot;</span><br><span class="line">  etcd_cert: &quot;&#x2F;calico-secrets&#x2F;etcd-cert&quot;</span><br><span class="line">  etcd_key: &quot;&#x2F;calico-secrets&#x2F;etcd-key&quot;</span><br></pre></td></tr></table></figure><p>根据实际网络规划修改 Pod CIDR（CALICO_IPV4POOL_CIDR）,与 controller-manager 配置 /opt/kubernetes/cfg/kube-controller-manager.conf 中相同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># vim calico-etcd.yaml</span><br><span class="line">...</span><br><span class="line">320             - name: CALICO_IPV4POOL_CIDR</span><br><span class="line">321               value: &quot;10.244.0.0&#x2F;16&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>选择工作模式（CALICO_IPV4POOL_IPIP），支持 BGP，IPIP，此处先关闭 IPIP 模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># vim calico-etcd.yaml</span><br><span class="line">...</span><br><span class="line">309             - name: CALICO_IPV4POOL_IPIP</span><br><span class="line">310               value: &quot;Never&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>修改完后应用清单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f calico-etcd.yaml </span><br><span class="line">secret&#x2F;calico-etcd-secrets created</span><br><span class="line">configmap&#x2F;calico-config created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io&#x2F;calico-kube-controllers created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io&#x2F;calico-kube-controllers created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io&#x2F;calico-node created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io&#x2F;calico-node created</span><br><span class="line">daemonset.apps&#x2F;calico-node created</span><br><span class="line">serviceaccount&#x2F;calico-node created</span><br><span class="line">deployment.apps&#x2F;calico-kube-controllers created</span><br><span class="line">serviceaccount&#x2F;calico-kube-controllers created</span><br><span class="line"># kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure><p>如果事先部署了 Fannel 网络组件，需要先卸载和删除 Flannel，在每个节点均需要操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># kubectl delete -f kube-flannel.yaml</span><br><span class="line"># ip link delete cni0</span><br><span class="line"># ip link delete flannel.1</span><br><span class="line"># ip route </span><br><span class="line">default via 192.168.2.2 dev eth0 </span><br><span class="line">10.244.1.0&#x2F;24 via 192.168.2.63 dev eth0 </span><br><span class="line">10.244.2.0&#x2F;24 via 192.168.2.62 dev eth0 </span><br><span class="line">169.254.0.0&#x2F;16 dev eth0 scope link metric 1002 </span><br><span class="line">172.17.0.0&#x2F;16 dev docker0 proto kernel scope link src 172.17.0.1 </span><br><span class="line">192.168.2.0&#x2F;24 dev eth0 proto kernel scope link src 192.168.2.61 </span><br><span class="line"># ip route del 10.244.1.0&#x2F;24 via 192.168.2.63 dev eth0 </span><br><span class="line"># ip route del 10.244.2.0&#x2F;24 via 192.168.2.62 dev eth0</span><br><span class="line"># ip route </span><br><span class="line">default via 192.168.2.2 dev eth0 </span><br><span class="line">169.254.0.0&#x2F;16 dev eth0 scope link metric 1002 </span><br><span class="line">172.17.0.0&#x2F;16 dev docker0 proto kernel scope link src 172.17.0.1 </span><br><span class="line">192.168.2.0&#x2F;24 dev eth0 proto kernel scope link src 192.168.2.61</span><br></pre></td></tr></table></figure><h2 id="4-calico-管理工具">4、Calico 管理工具</h2><p>下载工具：<a href="https://github.com/projectcalico/calicoctl/releases" target="_blank" rel="noopener">https://github.com/projectcalico/calicoctl/releases</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># wget -O &#x2F;usr&#x2F;local&#x2F;bin&#x2F;calicoctl https:&#x2F;&#x2F;github.com&#x2F;projectcalico&#x2F;calicoctl&#x2F;releases&#x2F;download&#x2F;v3.11.1&#x2F;calicoctl</span><br><span class="line"># chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;calicoctl</span><br></pre></td></tr></table></figure><p>使用 calicoctl 查看服务状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># .&#x2F;calicoctl node status</span><br><span class="line">Calico process is running.</span><br><span class="line"></span><br><span class="line">IPv4 BGP status</span><br><span class="line">+--------------+-------------------+-------+----------+-------------+</span><br><span class="line">| PEER ADDRESS |     PEER TYPE     | STATE |  SINCE   |    INFO     |</span><br><span class="line">+--------------+-------------------+-------+----------+-------------+</span><br><span class="line">| 192.168.2.62 | node-to-node mesh | up    | 02:58:05 | Established |</span><br><span class="line">| 192.168.2.63 | node-to-node mesh | up    | 03:08:46 | Established |</span><br><span class="line">+--------------+-------------------+-------+----------+-------------+</span><br><span class="line"></span><br><span class="line">IPv6 BGP status</span><br><span class="line">No IPv6 peers found.</span><br></pre></td></tr></table></figure><p>实际上，使用 calicoctl 查看 Node 状态就是调用系统查看的，与 netstat 效果一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># netstat -antp|grep bird  </span><br><span class="line">tcp        0      0 0.0.0.0:179             0.0.0.0:*               LISTEN      62709&#x2F;bird          </span><br><span class="line">tcp        0      0 192.168.2.61:179        192.168.2.63:58963      ESTABLISHED 62709&#x2F;bird          </span><br><span class="line">tcp        0      0 192.168.2.61:179        192.168.2.62:37390      ESTABLISHED 62709&#x2F;bird</span><br></pre></td></tr></table></figure><p>想要查看更多的信息，需要指定配置查看 etcd 中的数据</p><p>创建配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># mkdir &#x2F;etc&#x2F;calico</span><br><span class="line"># vim &#x2F;etc&#x2F;calico&#x2F;calicoctl.cfg  </span><br><span class="line">apiVersion: projectcalico.org&#x2F;v3</span><br><span class="line">kind: CalicoAPIConfig</span><br><span class="line">metadata:</span><br><span class="line">spec:</span><br><span class="line">  datastoreType: &quot;etcdv3&quot;</span><br><span class="line">  etcdEndpoints: &quot;https:&#x2F;&#x2F;192.168.2.61:2379,https:&#x2F;&#x2F;192.168.2.62:2379,https:&#x2F;&#x2F;192.168.2.63:2379&quot;</span><br><span class="line">  etcdKeyFile: &quot;&#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;server-key.pem&quot;</span><br><span class="line">  etcdCertFile: &quot;&#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;server.pem&quot;</span><br><span class="line">  etcdCACertFile: &quot;&#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;ca.pem&quot;</span><br></pre></td></tr></table></figure><p>查看数据等操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># calicoctl get node</span><br><span class="line">NAME            </span><br><span class="line">k8s-master-01   </span><br><span class="line">k8s-node-01     </span><br><span class="line">k8s-node-02</span><br></pre></td></tr></table></figure><p>查看 IPAM 的 IP 地址池：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># .&#x2F;calicoctl get ippool</span><br><span class="line">NAME                  CIDR            SELECTOR   </span><br><span class="line">default-ipv4-ippool   10.244.0.0&#x2F;16   all()      </span><br><span class="line"></span><br><span class="line"># .&#x2F;calicoctl get ippool -o wide</span><br><span class="line">NAME                  CIDR            NAT    IPIPMODE   VXLANMODE   DISABLED   SELECTOR   </span><br><span class="line">default-ipv4-ippool   10.244.0.0&#x2F;16   true   Never      Never       false      all()</span><br></pre></td></tr></table></figure><h2 id="5-calico-bgp-模式">5、Calico BGP 模式</h2><p><img src="https://www.hi-linux.com/img/linux/k8s-calico-4.png" alt=""></p><p>Pod 1 访问 Pod 2 大致流程如下：</p><ul><li>数据包从容器 1 出到达 Veth Pair 另一端（宿主机上，以 cali 前缀开头）；</li><li>宿主机根据路由规则，将数据包转发给下一跳（网关）；</li><li>到达 Node 2，根据路由规则将数据包转发给 cali 设备，从而到达容器 2。</li></ul><p>路由表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># node1</span><br><span class="line">10.244.36.65 dev cali4f18ce2c9a1 scope link </span><br><span class="line">10.244.169.128&#x2F;26 via 192.168.31.63 dev ens33 proto bird </span><br><span class="line">10.244.235.192&#x2F;26 via 192.168.31.61 dev ens33 proto bird </span><br><span class="line"></span><br><span class="line"># node2</span><br><span class="line">10.244.169.129 dev calia4d5b2258bb scope link </span><br><span class="line">10.244.36.64&#x2F;26 via 192.168.31.62 dev ens33 proto bird</span><br><span class="line">10.244.235.192&#x2F;26 via 192.168.31.61 dev ens33 proto bird</span><br></pre></td></tr></table></figure><p>其中，这里最核心的 “下一跳” 路由规则，就是由 Calico 的 Felix 进程负责维护的。这些路由规则信息，则是通过 BGP Client 也就是 BIRD 组件，使用 BGP 协议传输而来的。</p><p>不难发现，Calico 项目实际上将集群里的所有节点，都当作是边界路由器来处理，它们一起组成了一个全连通的网络，互相之间通过 BGP 协议交换路由规则。这些节点，我们称为 BGP Peer。</p><p>Calico 相关文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># ls &#x2F;opt&#x2F;cni&#x2F;bin&#x2F;calico-ipam </span><br><span class="line">&#x2F;opt&#x2F;cni&#x2F;bin&#x2F;calico-ipam</span><br><span class="line"># cat &#x2F;etc&#x2F;cni&#x2F;net.d&#x2F;</span><br><span class="line">10-calico.conflist  calico-kubeconfig    calico-tls&#x2F;          </span><br><span class="line"># cat &#x2F;etc&#x2F;cni&#x2F;net.d&#x2F;10-calico.conflist </span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;k8s-pod-network&quot;,</span><br><span class="line">  &quot;cniVersion&quot;: &quot;0.3.1&quot;,</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;type&quot;: &quot;calico&quot;,</span><br><span class="line">      &quot;log_level&quot;: &quot;info&quot;,</span><br><span class="line">      &quot;etcd_endpoints&quot;: &quot;https:&#x2F;&#x2F;192.168.2.61:2379,https:&#x2F;&#x2F;192.168.2.62:2379,https:&#x2F;&#x2F;192.168.2.63:2379&quot;,</span><br><span class="line">      &quot;etcd_key_file&quot;: &quot;&#x2F;etc&#x2F;cni&#x2F;net.d&#x2F;calico-tls&#x2F;etcd-key&quot;,</span><br><span class="line">      &quot;etcd_cert_file&quot;: &quot;&#x2F;etc&#x2F;cni&#x2F;net.d&#x2F;calico-tls&#x2F;etcd-cert&quot;,</span><br><span class="line">      &quot;etcd_ca_cert_file&quot;: &quot;&#x2F;etc&#x2F;cni&#x2F;net.d&#x2F;calico-tls&#x2F;etcd-ca&quot;,</span><br><span class="line">      &quot;mtu&quot;: 1440,</span><br><span class="line">      &quot;ipam&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;calico-ipam&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;policy&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;k8s&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;kubernetes&quot;: &#123;</span><br><span class="line">          &quot;kubeconfig&quot;: &quot;&#x2F;etc&#x2F;cni&#x2F;net.d&#x2F;calico-kubeconfig&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;type&quot;: &quot;portmap&quot;,</span><br><span class="line">      &quot;snat&quot;: true,</span><br><span class="line">      &quot;capabilities&quot;: &#123;&quot;portMappings&quot;: true&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-calico-route-reflector-模式rr">6、Calico Route Reflector 模式（RR）</h2><p>Calico 维护的网络在默认是（Node-to-Node Mesh）全互联模式，Calico 集群中的节点之间都会相互建立连接，用于路由交换。但是随着集群规模的扩大，Mesh 模式将形成一个巨大服务网格，连接数成倍增加。</p><p>这时就需要使用 Route Reflector（路由器反射）模式解决这个问题。</p><p>确定一个或多个 Calico 节点充当路由反射器（一般配置两个以上），让其他节点从这个 RR 节点获取路由信息。</p><p>具体步骤如下：</p><ol><li>关闭 node-to-node BGP 网格</li></ol><p>默认 node to node 模式最好在 100 个节点以下</p><p>添加 default BGP 配置，调整 nodeToNodeMeshEnabled 和 asNumber：bgp.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># cat &lt;&lt; EOF | calicoctl create -f -</span><br><span class="line">apiVersion: projectcalico.org&#x2F;v3</span><br><span class="line">kind: BGPConfiguration</span><br><span class="line">metadata:</span><br><span class="line">  name: default</span><br><span class="line">spec:</span><br><span class="line">  logSeverityScreen: Info</span><br><span class="line">  nodeToNodeMeshEnabled: false  </span><br><span class="line">  asNumber: 63400</span><br><span class="line">EOF</span><br><span class="line"># calicoctl apply -f bgp.yaml  # 一旦执行，集群会立即断网</span><br><span class="line">Successfully applied 1 &#39;BGPConfiguration&#39; resource(s)</span><br><span class="line"># calicoctl get bgpconfig</span><br><span class="line">NAME      LOGSEVERITY   MESHENABLED   ASNUMBER   </span><br><span class="line">default   Info          false         63400</span><br><span class="line"># calicoctl node status</span><br><span class="line">Calico process is running.</span><br><span class="line"></span><br><span class="line">IPv4 BGP status</span><br><span class="line">No IPv4 peers found.</span><br><span class="line"></span><br><span class="line">IPv6 BGP status</span><br><span class="line">No IPv6 peers found.</span><br></pre></td></tr></table></figure><p>ASN 号可以通过获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># calicoctl get nodes --output&#x3D;wide  </span><br><span class="line">NAME            ASN       IPV4              IPV6   </span><br><span class="line">k8s-master-01   (63400)   192.168.2.61&#x2F;24          </span><br><span class="line">k8s-node-01     (63400)   192.168.2.62&#x2F;24          </span><br><span class="line">k8s-node-02     (63400)   192.168.2.63&#x2F;24</span><br></pre></td></tr></table></figure><ol start="2"><li>配置指定节点充当路由反射器</li></ol><p>为方便让 BGPPeer 轻松选择节点，通过标签选择器匹配。</p><p>给路由器反射器节点打标签：</p><p>增加第二个路由反射器时，给新的 node 打标签并配置成反射器节点即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kubectl label node k8s-node-02 route-reflector&#x3D;true</span><br><span class="line">node&#x2F;k8s-node-02 labeled</span><br></pre></td></tr></table></figure><p>然后配置路由器反射器节点 routeReflectorClusterID：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># calicoctl get nodes k8s-node-02 -o yaml&gt; node.yaml</span><br><span class="line"># vim node.yaml</span><br><span class="line">apiVersion: projectcalico.org&#x2F;v3</span><br><span class="line">kind: Node</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    projectcalico.org&#x2F;kube-labels: &#39;&#123;&quot;beta.kubernetes.io&#x2F;arch&quot;:&quot;amd64&quot;,&quot;beta.kubernetes.io&#x2F;os&quot;:&quot;linux&quot;,&quot;kubernetes.io&#x2F;arch&quot;:&quot;amd64&quot;,&quot;kubernetes.io&#x2F;hostname&quot;:&quot;k8s-node2&quot;,&quot;kubernetes.io&#x2F;os&quot;:&quot;linux&quot;&#125;&#39;</span><br><span class="line">  creationTimestamp: null</span><br><span class="line">  labels:</span><br><span class="line">    beta.kubernetes.io&#x2F;arch: amd64</span><br><span class="line">    beta.kubernetes.io&#x2F;os: linux</span><br><span class="line">    kubernetes.io&#x2F;arch: amd64</span><br><span class="line">    kubernetes.io&#x2F;hostname: k8s-node2</span><br><span class="line">    kubernetes.io&#x2F;os: linux</span><br><span class="line">  name: k8s-node2</span><br><span class="line">spec:</span><br><span class="line">  bgp:</span><br><span class="line">    ipv4Address: 192.168.31.63&#x2F;24</span><br><span class="line">    routeReflectorClusterID: 244.0.0.1   # 增加集群ID</span><br><span class="line">  orchRefs:</span><br><span class="line">  - nodeName: k8s-node2</span><br><span class="line">    orchestrator: k8s</span><br><span class="line"># .&#x2F;calicoctl apply -f node.yaml </span><br><span class="line">Successfully applied 1 &#39;Node&#39; resource(s)</span><br></pre></td></tr></table></figure><p>现在，很容易使用标签选择器将路由反射器节点与其他非路由反射器节点配置为对等。表示所有节点都连接路由反射器节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># vim peer-with-route-reflectors.yaml</span><br><span class="line">apiVersion: projectcalico.org&#x2F;v3</span><br><span class="line">kind: BGPPeer</span><br><span class="line">metadata:</span><br><span class="line">  name: peer-with-route-reflectors</span><br><span class="line">spec:</span><br><span class="line">  nodeSelector: all()</span><br><span class="line">  peerSelector: route-reflector &#x3D;&#x3D; &#39;true&#39;</span><br><span class="line"># calicoctl apply -f peer-with-route-reflectors.yaml</span><br><span class="line">Successfully applied 1 &#39;BGPPeer&#39; resource(s)</span><br><span class="line"># calicoctl get bgppeer</span><br><span class="line">NAME                         PEERIP   NODE    ASN   </span><br><span class="line">peer-with-route-reflectors            all()   0</span><br></pre></td></tr></table></figure><p>查看节点的BGP连接状态，只有本节点与路由反射器节点的连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># calicoctl node status                             </span><br><span class="line">Calico process is running.</span><br><span class="line"></span><br><span class="line">IPv4 BGP status</span><br><span class="line">+--------------+---------------+-------+----------+-------------+</span><br><span class="line">| PEER ADDRESS |   PEER TYPE   | STATE |  SINCE   |    INFO     |</span><br><span class="line">+--------------+---------------+-------+----------+-------------+</span><br><span class="line">| 192.168.2.63 | node specific | up    | 04:17:14 | Established |</span><br><span class="line">+--------------+---------------+-------+----------+-------------+</span><br><span class="line"></span><br><span class="line">IPv6 BGP status</span><br><span class="line">No IPv6 peers found.</span><br></pre></td></tr></table></figure><h2 id="7-calico-ipip-模式">7、Calico IPIP 模式</h2><p>Flannel host-gw 模式最主要的限制，就是要求集群宿主机之间是二层连通的。而这个限制对于 Calico 来说，也同样存在。</p><p>修改为 IPIP 模式：</p><p>也可以直接在部署 Calico 的时候直接修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># calicoctl get ipPool -o yaml &gt; ipip.yaml</span><br><span class="line"># vi ipip.yaml</span><br><span class="line">apiVersion: projectcalico.org&#x2F;v3</span><br><span class="line">kind: IPPool</span><br><span class="line">metadata:</span><br><span class="line">  name: default-ipv4-ippool</span><br><span class="line">spec:</span><br><span class="line">  blockSize: 26</span><br><span class="line">  cidr: 10.244.0.0&#x2F;16</span><br><span class="line">  ipipMode: Always  # 启动ipip模式</span><br><span class="line">  natOutgoing: true</span><br><span class="line"></span><br><span class="line"># calicoctl apply -f ipip.yaml</span><br><span class="line"># calicoctl get ippool -o wide</span><br><span class="line">NAME                  CIDR            NAT    IPIPMODE   VXLANMODE   DISABLED   SELECTOR   </span><br><span class="line">default-ipv4-ippool   10.244.0.0&#x2F;16   true   Always     Never       false      all()</span><br><span class="line"># ip route # 会增加tunl0网卡</span><br><span class="line">default via 192.168.2.2 dev eth0 </span><br><span class="line">10.244.44.192&#x2F;26 via 192.168.2.63 dev tunl0 proto bird onlink </span><br><span class="line">blackhole 10.244.151.128&#x2F;26 proto bird </span><br><span class="line">10.244.154.192&#x2F;26 via 192.168.2.62 dev tunl0 proto bird onlink </span><br><span class="line">169.254.0.0&#x2F;16 dev eth0 scope link metric 1002 </span><br><span class="line">172.17.0.0&#x2F;16 dev docker0 proto kernel scope link src 172.17.0.1 </span><br><span class="line">192.168.2.0&#x2F;24 dev eth0 proto kernel scope link src 192.168.2.61</span><br></pre></td></tr></table></figure><p>IPIP 示意图：</p><p><img src="https://www.hi-linux.com/img/linux/k8s-calico-5.png" alt=""></p><p>Pod 1 访问 Pod 2 大致流程如下：</p><ul><li>数据包从容器1 出到达 Veth Pair 另一端（宿主机上，以 cali 前缀开头）；</li><li>进入 IP 隧道设备（ tunl0 ），由 Linux 内核 IPIP 驱动封装在宿主机网络的 IP 包中（新的 IP 包目的地之是原 IP 包的下一跳地址，即 192.168.31.63 ），这样，就成了 Node1 到 Node2 的数据包；</li><li>数据包经过路由器三层转发到 Node2；</li><li>Node2 收到数据包后，网络协议栈会使用 IPIP 驱动进行解包，从中拿到原始 IP 包；</li><li>然后根据路由规则，根据路由规则将数据包转发给 Cali 设备，从而到达容器 2。</li></ul><p>路由表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># node1</span><br><span class="line">10.244.36.65 dev cali4f18ce2c9a1 scope link </span><br><span class="line">10.244.169.128&#x2F;26 via 192.168.31.63 dev tunl0 proto bird onlink </span><br><span class="line"># node2</span><br><span class="line">10.244.169.129 dev calia4d5b2258bb scope link </span><br><span class="line">10.244.36.64&#x2F;26 via 192.168.31.62 dev tunl0 proto bird onlink</span><br></pre></td></tr></table></figure><p>不难看到，当 Calico 使用 IPIP 模式的时候，集群的网络性能会因为额外的封包和解包工作而下降。所以建议你将所有宿主机节点放在一个子网里，避免使用 IPIP。</p><h2 id="8-calico-网络策略">8、Calico 网络策略</h2><p>部署完成 Calico 后，就可以实现 K8s 中的网络策略 NetworkPolicy，对于网络策略在前面的文章使用 Flannel+ Canal 实现 K8s 的 NetworkPolicy 有详细描述，这里不再赘述。😊</p><blockquote><p>本文转载自：「山山仙人博客」，原文：<a href="https://tinyurl.com/y2hlh7ks%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/y2hlh7ks，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、Calico概述&quot;&gt;1、Calico概述&lt;/h2&gt;
&lt;p&gt;Calico 是 Kubernetes 生态系统中另一种流行的网络选择。虽然 Flannel 被公认为是最简单的选择，但 Calico 以其性能、灵活性而闻名。Calico 的功能更为全面，不仅提供主机和pod之间的网络连接，还涉及网络安全和管理。Calico CNI插件在 CNI 框架内封装了Calico的功能。&lt;/p&gt;
&lt;p&gt;Calico 是一个基于BGP的纯三层的网络方案，与 OpenStack、Kubernetes、AWS、GCE 等云平台都能够良好地集成。Calico 在每个计算节点都利用 Linux Kernel 实现了一个高效的虚拟路由器 vRouter 来负责数据转发。每个 vRouter 都通过 BGP1 协议把在本节点上运行的容器的路由信息向整个 Calico 网络广播，并自动设置到达其他节点的路由转发规则。Calico 保证所有容器之间的数据流量都是通过IP路由的方式完成互联互通的。Calico 节点组网时可以直接利用数据中心的网络结构（ L2 或者 L3），不需要额外的 NAT、隧道或者 Overlay Network，没有额外的封包解包，能够节约 CPU 运算，提高网络效率。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/k8s-calico-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Calico 在小规模集群中可以直接互联，在大规模集群中可以通过额外的 BGP route reflector 来完成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/k8s-calico-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;此外，Calico 基于 Iptables 还提供了丰富的网络策略，实现了 Kubernetes 的 Network Policy 策略，提供容器间网络可达性限制的功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Calico" scheme="https://www.hi-linux.com/categories/Calico/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
      <category term="Calico" scheme="https://www.hi-linux.com/tags/Calico/"/>
    
  </entry>
  
  <entry>
    <title>巧用 Nginx 快速实现 HTTPS 双向认证</title>
    <link href="https://www.hi-linux.com/posts/38492.html"/>
    <id>https://www.hi-linux.com/posts/38492.html</id>
    <published>2020-08-03T01:00:00.000Z</published>
    <updated>2020-08-03T02:28:16.331Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>研究 <code>HTTPS</code> 的双向认证实现与原理，踩了不少坑，终于整个流程都跑通了，现在总结出一篇文档来，把一些心得，特别是容易踩坑的地方记录下来。</p><h2 id="1原理">1.原理</h2><p>双向认证，顾名思义，客户端和服务器端都需要验证对方的身份，在建立 <code>HTTPS</code> 连接的过程中，握手的流程比单向认证多了几步。单向认证的过程，客户端从服务器端下载服务器端公钥证书进行验证，然后建立安全通信通道。双向通信流程，客户端除了需要从服务器端下载服务器的公钥证书进行验证外，还需要把客户端的公钥证书上传到服务器端给服务器端进行验证，等双方都认证通过了，才开始建立安全通信通道进行数据传输。</p><h3 id="11-单向认证流程">1.1 单向认证流程</h3><p>单向认证流程中，服务器端保存着公钥证书和私钥两个文件，整个握手过程如下：</p><p><img src="https://www.hi-linux.com/img/linux/nginx-ssl-01.png" alt=""></p><ol><li>客户端发起建立 HTTPS 连接请求，将 SSL 协议版本的信息发送给服务器端；</li><li>服务器端将本机的公钥证书（server.crt）发送给客户端；</li><li>客户端读取公钥证书 (server.crt)，取出了服务端公钥；</li><li>客户端生成一个随机数（密钥 R），用刚才得到的服务器公钥去加密这个随机数形成密文，发送给服务端；</li><li>服务端用自己的私钥 (server.key) 去解密这个密文，得到了密钥 R</li><li>服务端和客户端在后续通讯过程中就使用这个密钥R进行通信了。</li></ol><h3 id="12-双向认证流程">1.2 双向认证流程</h3><p><img src="https://www.hi-linux.com/img/linux/nginx-ssl-02.png" alt=""></p><ol><li>客户端发起建立 HTTPS 连接请求，将 SSL 协议版本的信息发送给服务端；</li><li>服务器端将本机的公钥证书 (server.crt) 发送给客户端；</li><li>客户端读取公钥证书 (server.crt)，取出了服务端公钥；</li><li>客户端将客户端公钥证书 (client.crt) 发送给服务器端；</li><li>服务器端解密客户端公钥证书，拿到客户端公钥；</li><li>客户端发送自己支持的加密方案给服务器端；</li><li>服务器端根据自己和客户端的能力，选择一个双方都能接受的加密方案，使用客户端的公钥加密后发送给客户端；</li><li>客户端使用自己的私钥解密加密方案，生成一个随机数 R，使用服务器公钥加密后传给服务器端；</li><li>服务端用自己的私钥去解密这个密文，得到了密钥 R</li><li>服务端和客户端在后续通讯过程中就使用这个密钥R进行通信了。</li></ol><a id="more"></a><h2 id="2-证书生成">2. 证书生成</h2><p>从上一章内容中，我们可以总结出来，如果要把整个双向认证的流程跑通，最终需要五个证书文件：</p><ul><li>服务器端公钥证书：server.crt</li><li>服务器端私钥文件：server.key</li><li>客户端公钥证书：client.crt</li><li>客户端私钥文件：client.key</li><li>客户端集成证书（包括公钥和私钥，用于浏览器访问场景）：client.p12</li></ul><p>生成这一些列证书之前，我们需要先生成一个 <code>CA</code> 根证书，然后由这个 <code>CA</code> 根证书颁发服务器公钥证书和客户端公钥证书。</p><p><img src="https://www.hi-linux.com/img/linux/nginx-ssl-03.png" alt=""></p><p>我们可以全程使用 <code>Openssl</code> 来生成一些列的自签名证书，自签名证书没有通过证书机构的认证，很多浏览器会认为不安全，但我们用来实验是足够的。需要在本机安装了 <code>Openssl</code> 后才能继续本章的实验。</p><h3 id="21-生成自签名根证书">2.1 生成自签名根证书</h3><ol><li>创建根证书私钥：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl genrsa -out root.key 1024</span><br></pre></td></tr></table></figure><ol start="2"><li>创建根证书请求文件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ openssl req -new -out root.csr -key root.key</span><br><span class="line"></span><br><span class="line">后续参数请自行填写，下面是一个例子：</span><br><span class="line"></span><br><span class="line">Country Name (2 letter code) [XX]:cn</span><br><span class="line">State or Province Name (full name) []:bj</span><br><span class="line">Locality Name (eg, city) [Default City]:bj</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:alibaba</span><br><span class="line">Organizational Unit Name (eg, section) []:test</span><br><span class="line">Common Name (eg, your name or your servers hostname) []:www.yourdomain.com</span><br><span class="line">Email Address []:a.alibaba.com</span><br><span class="line">A challenge password []:</span><br><span class="line">An optional company name []:</span><br></pre></td></tr></table></figure><ol start="3"><li>创建根证书：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl x509 -req -in root.csr -out root.crt -signkey root.key -CAcreateserial -days 3650</span><br></pre></td></tr></table></figure><p>在创建证书请求文件的时候需要注意三点，下面生成服务器请求文件和客户端请求文件均要注意这三点：</p><ul><li>Common Name 填写证书对应的服务域名；</li><li>所有字段的填写，根证书、服务器端证书、客户端证书需保持一致</li><li>最后的密码可以直接回车跳过。</li></ul><p>经过上面三个命令行，我们最终可以得到一个签名有效期为 10 年的根证书 root.crt，后面我们可以用这个根证书去颁发服务器证书和客户端证书。</p><h3 id="22-生成自签名服务器端证书">2.2 生成自签名服务器端证书</h3><ol><li>生成服务器端证书私钥：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl genrsa -out server.key 1024</span><br></pre></td></tr></table></figure><ol start="2"><li>生成服务器证书请求文件，过程和注意事项参考根证书，本节不详述：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl req -new -out server.csr -key server.key</span><br></pre></td></tr></table></figure><ol start="3"><li>生成服务器端公钥证书</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl x509 -req -in server.csr -out server.crt -signkey server.key -CA root.crt -CAkey root.key -CAcreateserial -days 3650</span><br></pre></td></tr></table></figure><p>经过上面的三个命令，我们得到：</p><ul><li>server.key：服务器端的秘钥文件</li><li>server.crt：有效期十年的服务器端公钥证书，使用根证书和服务器端私钥文件一起生成</li></ul><h3 id="23-生成自签名客户端证书">2.3 生成自签名客户端证书</h3><ol><li>生成客户端证书秘钥：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl genrsa -out client.key 1024</span><br></pre></td></tr></table></figure><ol start="2"><li>生成客户端证书请求文件，过程和注意事项参考根证书，本节不详述：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl req -new -out client.csr -key client.key</span><br></pre></td></tr></table></figure><ol start="3"><li>生客户端证书</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl x509 -req -in client.csr -out client.crt -signkey client.key -CA root.crt -CAkey root.key -CAcreateserial -days 3650</span><br></pre></td></tr></table></figure><ol start="4"><li>生客户端 P12 格式证书</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl pkcs12 -export -clcerts -in client.crt -inkey client.key -out client.p12</span><br></pre></td></tr></table></figure><p>经过上面的三个命令，我们得到：</p><ul><li>client.key：客户端的私钥文件</li><li>client.crt：有效期十年的客户端证书，使用根证书和客户端私钥一起生成</li><li>client.p12：客户端 p12 格式，这个证书文件包含客户端的公钥和私钥，主要用来给浏览器访问使用</li></ul><h2 id="3nginx-配置">3.Nginx 配置</h2><p>有了上面的一些列证书，我们可以在 <code>Nginx</code> 服务器上配置双向认证的 <code>HTTPS</code> 服务了，具体配置方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        server_name  www.yourdomain.com;</span><br><span class="line">        ssl                  on;  </span><br><span class="line">        ssl_certificate      &#x2F;data&#x2F;sslKey&#x2F;server.crt;  #server公钥证书</span><br><span class="line">        ssl_certificate_key  &#x2F;data&#x2F;sslKey&#x2F;server.key;  #server私钥</span><br><span class="line">        ssl_client_certificate &#x2F;data&#x2F;sslKey&#x2F;client.crt;  #客户端公钥证书</span><br><span class="line">        ssl_verify_client on;  #开启客户端证书验证  </span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>具体就是将服务器端的两个证书文件 (server.crt/server.key) 和客户端的公钥证书文件 (client.crt) 的路径配置到 <code>Nginx</code> 的 <code>server</code> 节点配置中，并且把 <code>ssl_verify_client</code> 这个参数设置为 <code>on</code>。</p><p>有一点需要注意的就是，如果客户端证书不是由根证书直接颁发的，配置中还需要加一个配置：<code>ssl_verify_depth 1</code> ;</p><p>配置完成后，执行 <code>nginx -s reload</code> 重新加载下就生效了。</p><h2 id="4curl-调用">4.curl 调用</h2><p>使用 <code>curl</code> 加上证书路径，可以直接测试 <code>Nginx</code> 的 <code>HTTPS</code> 双向认证是否配置成功。</p><ol><li>带证书的成功调用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># --cert指定客户端公钥证书的路径</span><br><span class="line"># --key指定客户端私钥文件的路径</span><br><span class="line"># -k不校验证书的合法性，因为我们用的是自签名证书，所以需要加这个参数</span><br><span class="line"># 可以使用 -v 来观察具体的 SSL 握手过程</span><br><span class="line"></span><br><span class="line">$ curl --cert .&#x2F;client.crt --key .&#x2F;client.key https:&#x2F;&#x2F;integration-fred2.fredhuang.com -k -v</span><br><span class="line">* Rebuilt URL to: https:&#x2F;&#x2F;integration-fred2.fredhuang.com&#x2F;</span><br><span class="line">*   Trying 47.91.39.145...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to integration-fred2.fredhuang.com (47.91.39.145) port 443 (#0)</span><br><span class="line">* ALPN, offering h2</span><br><span class="line">* ALPN, offering http&#x2F;1.1</span><br><span class="line">* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH</span><br><span class="line">* successfully set certificate verify locations:</span><br><span class="line">*   CAfile: &#x2F;etc&#x2F;ssl&#x2F;cert.pem</span><br><span class="line">  CApath: none</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Client hello (1):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Server hello (2):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Certificate (11):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Server key exchange (12):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Request CERT (13):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Server finished (14):</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Certificate (11):</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, CERT verify (15):</span><br><span class="line">* TLSv1.2 (OUT), TLS change cipher, Client hello (1):</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Finished (20):</span><br><span class="line">* TLSv1.2 (IN), TLS change cipher, Client hello (1):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Finished (20):</span><br><span class="line">* SSL connection using TLSv1.2 &#x2F; ECDHE-RSA-AES128-GCM-SHA256</span><br><span class="line">* ALPN, server accepted to use h2</span><br><span class="line">* Server certificate:</span><br><span class="line">*  subject: C&#x3D;CN; ST&#x3D;BeiJing; L&#x3D;BeiJing; O&#x3D;Alibaba; OU&#x3D;Test; CN&#x3D;integration-fred2.fredhuang.com; emailAddress&#x3D;a@alibaba.com</span><br><span class="line">*  start date: Oct 30 06:43:19 2019 GMT</span><br><span class="line">*  expire date: Oct 27 06:43:19 2029 GMT</span><br><span class="line">*  issuer: C&#x3D;CN; ST&#x3D;BeiJing; L&#x3D;BeiJing; O&#x3D;Alibaba; OU&#x3D;Test; CN&#x3D;integration-fred2.fredhuang.com; emailAddress&#x3D;a@alibaba.com</span><br><span class="line">*  SSL certificate verify result: self signed certificate (18), continuing anyway.</span><br><span class="line">* Using HTTP2, server supports multi-use</span><br><span class="line">* Connection state changed (HTTP&#x2F;2 confirmed)</span><br><span class="line">* Copying HTTP&#x2F;2 data in stream buffer to connection buffer after upgrade: len&#x3D;0</span><br><span class="line">* Using Stream ID: 1 (easy handle 0x7f8ae1809a00)</span><br><span class="line">&gt; GET &#x2F; HTTP&#x2F;2</span><br><span class="line">&gt; Host: integration-fred2.fredhuang.com</span><br><span class="line">&gt; User-Agent: curl&#x2F;7.54.0</span><br><span class="line">&gt; Accept: *&#x2F;*</span><br><span class="line">&gt;</span><br><span class="line">* Connection state changed (MAX_CONCURRENT_STREAMS updated)!</span><br><span class="line">&lt; HTTP&#x2F;2 200</span><br><span class="line">&lt; server: Tengine</span><br><span class="line">&lt; date: Fri, 01 Nov 2019 11:16:39 GMT</span><br><span class="line">&lt; content-type: text&#x2F;plain;charset&#x3D;UTF-8</span><br><span class="line">&lt; content-length: 0</span><br></pre></td></tr></table></figure><ol start="2"><li>不带证书的失败调用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">$ curl  https:&#x2F;&#x2F;integration-fred2.fredhuang.com -k -v</span><br><span class="line">* Rebuilt URL to: https:&#x2F;&#x2F;integration-fred2.fredhuang.com&#x2F;</span><br><span class="line">*   Trying 47.91.39.145...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to integration-fred2.fredhuang.com (47.91.39.145) port 443 (#0)</span><br><span class="line">* ALPN, offering h2</span><br><span class="line">* ALPN, offering http&#x2F;1.1</span><br><span class="line">* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH</span><br><span class="line">* successfully set certificate verify locations:</span><br><span class="line">*   CAfile: &#x2F;etc&#x2F;ssl&#x2F;cert.pem</span><br><span class="line">  CApath: none</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Client hello (1):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Server hello (2):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Certificate (11):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Server key exchange (12):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Request CERT (13):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Server finished (14):</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Certificate (11):</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):</span><br><span class="line">* TLSv1.2 (OUT), TLS change cipher, Client hello (1):</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Finished (20):</span><br><span class="line">* TLSv1.2 (IN), TLS change cipher, Client hello (1):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Finished (20):</span><br><span class="line">* SSL connection using TLSv1.2 &#x2F; ECDHE-RSA-AES128-GCM-SHA256</span><br><span class="line">* ALPN, server accepted to use h2</span><br><span class="line">* Server certificate:</span><br><span class="line">*  subject: C&#x3D;CN; ST&#x3D;BeiJing; L&#x3D;BeiJing; O&#x3D;Alibaba; OU&#x3D;Test; CN&#x3D;integration-fred2.fredhuang.com; emailAddress&#x3D;a@alibaba.com</span><br><span class="line">*  start date: Oct 30 06:43:19 2019 GMT</span><br><span class="line">*  expire date: Oct 27 06:43:19 2029 GMT</span><br><span class="line">*  issuer: C&#x3D;CN; ST&#x3D;BeiJing; L&#x3D;BeiJing; O&#x3D;Alibaba; OU&#x3D;Test; CN&#x3D;integration-fred2.fredhuang.com; emailAddress&#x3D;a@alibaba.com</span><br><span class="line">*  SSL certificate verify result: self signed certificate (18), continuing anyway.</span><br><span class="line">* Using HTTP2, server supports multi-use</span><br><span class="line">* Connection state changed (HTTP&#x2F;2 confirmed)</span><br><span class="line">* Copying HTTP&#x2F;2 data in stream buffer to connection buffer after upgrade: len&#x3D;0</span><br><span class="line">* Using Stream ID: 1 (easy handle 0x7fcc52805e00)</span><br><span class="line">&gt; GET &#x2F; HTTP&#x2F;2</span><br><span class="line">&gt; Host: integration-fred2.fredhuang.com</span><br><span class="line">&gt; User-Agent: curl&#x2F;7.54.0</span><br><span class="line">&gt; Accept: *&#x2F;*</span><br><span class="line">&gt;</span><br><span class="line">* Connection state changed (MAX_CONCURRENT_STREAMS updated)!</span><br><span class="line">&lt; HTTP&#x2F;2 400</span><br><span class="line">&lt; server: Tengine</span><br><span class="line">&lt; date: Fri, 01 Nov 2019 11:25:28 GMT</span><br><span class="line">&lt; content-type: text&#x2F;html</span><br><span class="line">&lt; content-length: 685</span><br><span class="line">&lt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;IETF&#x2F;&#x2F;DTD HTML 2.0&#x2F;&#x2F;EN&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;400 No required SSL certificate was sent&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;400 Bad Request&lt;&#x2F;h1&gt;&lt;&#x2F;center&gt;</span><br><span class="line">&lt;center&gt;No required SSL certificate was sent&lt;&#x2F;center&gt;</span><br><span class="line"> Sorry for the inconvenience.&lt;br&#x2F;&gt;</span><br><span class="line">Please report this message and include the following information to us.&lt;br&#x2F;&gt;</span><br><span class="line">Thank you very much!&lt;&#x2F;p&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;URL:&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;https:&#x2F;&#x2F;integration-fred2.fredhuang.com:444&#x2F;&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;Server:&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;cag-access-tengine011192099198.au49&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;Date:&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;2019&#x2F;11&#x2F;01 19:25:28&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line">&lt;hr&#x2F;&gt;Powered by Tengine&lt;hr&gt;&lt;center&gt;tengine&lt;&#x2F;center&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="5java-调用">5.Java 调用</h2><p>由于使用的是自签名证书，使用 <code>ApacheHttpClient</code> 去调用的话，需要将服务器证书加入可信任证书库中，才能成功调用，也可以在代码中简单忽略证书。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd $JAVA_HOME</span><br><span class="line">$ sudo .&#x2F;bin&#x2F;keytool -import -alias ttt -keystore cacerts -file &#x2F;Users&#x2F;fred&#x2F;temp&#x2F;cert5&#x2F;server.crt</span><br></pre></td></tr></table></figure><p>将服务器端公钥证书设置为可信证书后，使用以下代码可以直接发起带客户端证书的 <code>HTTPS</code> 请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.http.HttpEntity;</span><br><span class="line">import org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line">import org.apache.http.client.methods.HttpGet;</span><br><span class="line">import org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class="line">import org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line">import org.apache.http.impl.client.HttpClients;</span><br><span class="line">import org.apache.http.ssl.SSLContexts;</span><br><span class="line">import org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line">import javax.net.ssl.SSLContext;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.security.KeyStore;</span><br><span class="line"></span><br><span class="line">public class HttpClientWithClientCert &#123;</span><br><span class="line"></span><br><span class="line">    private final static String PFX_PATH &#x3D; &quot;&#x2F;Users&#x2F;fred&#x2F;temp&#x2F;cert5&#x2F;client.p12&quot;;    &#x2F;&#x2F;客户端证书路径</span><br><span class="line">    private final static String PFX_PWD &#x3D; &quot;123456&quot;;    &#x2F;&#x2F;客户端证书密码</span><br><span class="line"></span><br><span class="line">    public static String sslRequestGet(String url) throws Exception &#123;</span><br><span class="line">        KeyStore keyStore &#x3D; KeyStore.getInstance(&quot;PKCS12&quot;);</span><br><span class="line">        InputStream instream &#x3D; new FileInputStream(new File(PFX_PATH));</span><br><span class="line">        try &#123;</span><br><span class="line">            keyStore.load(instream, PFX_PWD.toCharArray());</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            instream.close();</span><br><span class="line">        &#125;</span><br><span class="line">        SSLContext sslcontext &#x3D; SSLContexts.custom().loadKeyMaterial(keyStore, PFX_PWD.toCharArray()).build();</span><br><span class="line">        SSLConnectionSocketFactory sslsf &#x3D; new SSLConnectionSocketFactory(sslcontext</span><br><span class="line">                , new String[] &#123; &quot;TLSv1&quot; &#125;    &#x2F;&#x2F; supportedProtocols ,这里可以按需要设置</span><br><span class="line">                , null    &#x2F;&#x2F; supportedCipherSuites</span><br><span class="line">                , SSLConnectionSocketFactory.getDefaultHostnameVerifier());</span><br><span class="line"></span><br><span class="line">        CloseableHttpClient httpclient &#x3D; HttpClients.custom().setSSLSocketFactory(sslsf).build();</span><br><span class="line">        try &#123;</span><br><span class="line">            HttpGet httpget &#x3D; new HttpGet(url);</span><br><span class="line">            &#x2F;&#x2F;httpget.addHeader(&quot;host&quot;, &quot;integration-fred2.fredhuang.com&quot;);&#x2F;&#x2F; 设置一些heander等</span><br><span class="line">            CloseableHttpResponse response &#x3D; httpclient.execute(httpget);</span><br><span class="line">            try &#123;</span><br><span class="line">                HttpEntity entity &#x3D; response.getEntity();</span><br><span class="line">                String jsonStr &#x3D; EntityUtils.toString(response.getEntity(), &quot;UTF-8&quot;);&#x2F;&#x2F;返回结果</span><br><span class="line">                EntityUtils.consume(entity);</span><br><span class="line">                return jsonStr;</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            httpclient.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        System.out.println(System.getProperty(&quot;java.home&quot;));</span><br><span class="line">        System.out.println(sslRequestGet(&quot;https:&#x2F;&#x2F;integration-fred2.fredhuang.com&#x2F;test&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-存疑">6. 存疑</h2><p>网上很多文章都描述到 <code>Nginx</code> 配置中的客户端证书（<code>ssl_client_certificate</code>）可以配置根证书 root.crt，然后就可以适配所有这个根证书办法的客户端公钥证书了。我试了，使用 root.crt 作为 <code>ssl_client_certificate</code> 的值，然后使用 client.crt 来访问，发现不行，<code>Nginx</code> 会报这个错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;400 The SSL certificate error&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;400 Bad Request&lt;&#x2F;h1&gt;&lt;&#x2F;center&gt;</span><br><span class="line">&lt;center&gt;The SSL certificate error&lt;&#x2F;center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx&#x2F;1.17.5&lt;&#x2F;center&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>这个特性原作者一直没有配置成功 (我也没配置成功)，有可能是配置有问题，也有可能是网上文章不靠谱，写错了。</p><blockquote><p>本文转载自：「阿里云开发者社区」，原文：<a href="https://tinyurl.com/yaamh7vf%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/yaamh7vf，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote><h2 id="扩展阅读-本文核心">扩展阅读 (本文核心)</h2><p>在原文基础上，我在分享一个你在大多数网站和搜索引擎中都找不到的很实用的小技巧，说得这么神秘到底是什么呢？</p><p>那就是使用受信证书进行双向认证，网上大多数文章介绍的实现 <code>HTTPS</code> 双向认证的文章都是使用 <code>CA</code> 自签的方式进行。虽然这能实现目的，但方法不太优雅。</p><p>在 <code>SSL</code> 证书全面普及的当下，你其实很有必要申请一个受信证书来进行 <code>HTTPS</code> 双向认证。这样看上去不但更权威，而且实现上也更便捷一些。</p><h3 id="使用受信证书进行双向认证">使用受信证书进行双向认证</h3><p>要使用受信证书进行认证的前提条件：当然是你必须有一个权威 CA 机构给你签发的证书。</p><ul><li>如果你是土豪，随便购买一个就行了。</li><li>如果你囊中羞涩，也不要紧，可以去申请一个免费的 <code>SSL</code> 证书。目前 <code>Let's Encrypt</code>、<code>阿里云</code> 都可以申请，具体方法就不在这展开了，你可以直接在公众号上搜索相关文章。</li><li>为了便于管理和多场景使用，建议直接申请通配证书。</li></ul><p>证书准备完成后，接下来当然是直接使用它。因为是受信证书，上面所有的证书自签操作都不需要了，你只需直接配置 <code>Nginx</code> 就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">                listen       443 ssl;</span><br><span class="line">                access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;accesse.log  main;</span><br><span class="line">                server_name  ci.hi-linux.com;</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">                ssl_certificate      &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;hi-linux.com&#x2F;hi-linux.com.pem;</span><br><span class="line">                ssl_certificate_key  &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;hi-linux.com&#x2F;hi-linux.com.key;</span><br><span class="line">                ssl_client_certificate &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;hi-linux.com&#x2F;hi-linux.com.pem;</span><br><span class="line"></span><br><span class="line">                ssl_verify_depth 3;</span><br><span class="line">                ssl_session_timeout  5m;</span><br><span class="line">                ssl_verify_client on;</span><br><span class="line"></span><br><span class="line">                ssl_protocols  SSLv2 SSLv3 TLSv1;</span><br><span class="line">                ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</span><br><span class="line">                ssl_prefer_server_ciphers   on;</span><br><span class="line"></span><br><span class="line">                location &#x2F; &#123;</span><br><span class="line">                        proxy_pass   http:&#x2F;&#x2F;ci&#x2F;;</span><br><span class="line">                        proxy_set_header Host $host:$server_port;</span><br><span class="line">                        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">                        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>ssl_certificate</code> 指定的是证书，<code>ssl_certificate_key</code> 指定是证书对应的私钥，请自行将对应证书文件放到配置文件中指定的目录中。</p></blockquote><p>以上配置段和上面的自签证书大同小异，主要需注意的有 <code>ssl_client_certificate</code> 和 <code>ssl_verify_depth</code> 这两个参数。</p><ul><li><code>ssl_client_certificate</code> 主要用于指定客户端所使用的证书，这里可以直接使用受信证书机构签发的证书文件。</li><li><code>ssl_verify_depth</code>  这个参数是使用受信证书能成功进行客户端验证的关键，注意它的值是 <code>3</code>。</li></ul><p>因为当 <code>ssl_verify_depth</code> 设置为 <code>1</code>（ <code>Nginx</code> 的默认值）的时候，服务端只会接受直接被 <code>CA</code> 签发的客户端证书或自签名的证书。也就是说，直接尝试使用中级 <code>CA</code> 来验证客户端是无法通过的，<code>OpenSSL</code> 会自动的去找中级 <code>CA</code> 的签发者并一层层验证上去，直到找到根证书。</p><p>所以，就算将中级 <code>CA</code> 和根 <code>CA</code> 都放在信任证书列表中，由于最终 <code>ssl_verify_depth</code> 为 <code>2</code> 的缘故，验证还是通不过的。</p><p>因此，在实际使用的时候，需要注意以下两点：</p><ul><li>CA 文件中必须同时存在 中级 <code>CA</code> 和根 <code>CA</code>，必须构成完整证书链，不能少任何一个；</li><li>默认的验证深度 <code>ssl_verify_depth</code> 是 1，中级 <code>CA</code> 签发的客户端证书一律无法通过认证，需要增大该值，所以我们上面配置中 <code>ssl_verify_depth</code> 值为 <code>3</code> 。</li></ul><p>为了客户端方便导入，你同样还是需要将证书文件转换成 P12 格式。当然你还可以在转换的过程中给证书加个密码，以保证证书的安全。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl pkcs12 -export -clcerts -in hi-linux.com.pem -inkey hi-linux.com.key -out hi-linux.com-client.p12</span><br></pre></td></tr></table></figure><p>至此，<code>HTTPS</code> 双向证书的实现就讲完了，如果你还有什么更好的补充，欢迎大家积极留言交流哟！</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;研究 &lt;code&gt;HTTPS&lt;/code&gt; 的双向认证实现与原理，踩了不少坑，终于整个流程都跑通了，现在总结出一篇文档来，把一些心得，特别是容易踩坑的地方记录下来。&lt;/p&gt;
&lt;h2 id=&quot;1-原理&quot;&gt;1.原理&lt;/h2&gt;
&lt;p&gt;双向认证，顾名思义，客户端和服务器端都需要验证对方的身份，在建立 &lt;code&gt;HTTPS&lt;/code&gt; 连接的过程中，握手的流程比单向认证多了几步。单向认证的过程，客户端从服务器端下载服务器端公钥证书进行验证，然后建立安全通信通道。双向通信流程，客户端除了需要从服务器端下载服务器的公钥证书进行验证外，还需要把客户端的公钥证书上传到服务器端给服务器端进行验证，等双方都认证通过了，才开始建立安全通信通道进行数据传输。&lt;/p&gt;
&lt;h3 id=&quot;1-1-单向认证流程&quot;&gt;1.1 单向认证流程&lt;/h3&gt;
&lt;p&gt;单向认证流程中，服务器端保存着公钥证书和私钥两个文件，整个握手过程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/nginx-ssl-01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发起建立 HTTPS 连接请求，将 SSL 协议版本的信息发送给服务器端；&lt;/li&gt;
&lt;li&gt;服务器端将本机的公钥证书（server.crt）发送给客户端；&lt;/li&gt;
&lt;li&gt;客户端读取公钥证书 (server.crt)，取出了服务端公钥；&lt;/li&gt;
&lt;li&gt;客户端生成一个随机数（密钥 R），用刚才得到的服务器公钥去加密这个随机数形成密文，发送给服务端；&lt;/li&gt;
&lt;li&gt;服务端用自己的私钥 (server.key) 去解密这个密文，得到了密钥 R&lt;/li&gt;
&lt;li&gt;服务端和客户端在后续通讯过程中就使用这个密钥R进行通信了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;1-2-双向认证流程&quot;&gt;1.2 双向认证流程&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hi-linux.com/img/linux/nginx-ssl-02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发起建立 HTTPS 连接请求，将 SSL 协议版本的信息发送给服务端；&lt;/li&gt;
&lt;li&gt;服务器端将本机的公钥证书 (server.crt) 发送给客户端；&lt;/li&gt;
&lt;li&gt;客户端读取公钥证书 (server.crt)，取出了服务端公钥；&lt;/li&gt;
&lt;li&gt;客户端将客户端公钥证书 (client.crt) 发送给服务器端；&lt;/li&gt;
&lt;li&gt;服务器端解密客户端公钥证书，拿到客户端公钥；&lt;/li&gt;
&lt;li&gt;客户端发送自己支持的加密方案给服务器端；&lt;/li&gt;
&lt;li&gt;服务器端根据自己和客户端的能力，选择一个双方都能接受的加密方案，使用客户端的公钥加密后发送给客户端；&lt;/li&gt;
&lt;li&gt;客户端使用自己的私钥解密加密方案，生成一个随机数 R，使用服务器公钥加密后传给服务器端；&lt;/li&gt;
&lt;li&gt;服务端用自己的私钥去解密这个密文，得到了密钥 R&lt;/li&gt;
&lt;li&gt;服务端和客户端在后续通讯过程中就使用这个密钥R进行通信了。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="https://www.hi-linux.com/categories/nginx/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Nginx" scheme="https://www.hi-linux.com/tags/Nginx/"/>
    
      <category term="HTTPS" scheme="https://www.hi-linux.com/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>两个助你高效编写 Kubernetes YAML 文件的神技</title>
    <link href="https://www.hi-linux.com/posts/52035.html"/>
    <id>https://www.hi-linux.com/posts/52035.html</id>
    <published>2020-07-30T01:00:00.000Z</published>
    <updated>2020-07-30T04:49:05.917Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>我们在编写 <code>Kubernetes</code> 资源清单的时候可能会经常会忘记要创建的资源名称，即使知道了可能也不记得该资源对象有哪些属性可以使用了，特别是对于那些名称很长的资源或者属性，即使死记硬背下来隔一段时间又会忘记了。</p><p>比如现在我们要创建一个 <code>validating</code> 的 <code>admission webhook</code>，我们就需要定义一个 <code>ValidatingWebhookConfiguration</code> 的资源对象，但是可能我们不记得它的全名了。这个时候我们可以使用 <code>kubectl api-resources</code> 命令来找到我们需要的 <code>API</code> 资源。找到了正确的资源名称之后，就需要了解如何编写正确的 <code>YAML</code> 资源清单文件了，但是 <code>Kubernetes</code> 中资源对象实在是太多了，而且每一个资源对象中配置属性也是非常多的，我们不可能都能完全记住，这个时候我们也可以借助 <code>kubectl explain</code> 命令来找到完整的结构，这对于我们编写 <code>YAML</code> 资源清单文件非常有帮助。</p><h2 id="kubectl-api-resources-命令">kubectl api-resources 命令</h2><p><code>kubectl api-resources</code> 命令可以打印所有已经注册的 <code>API</code> 资源，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ Kubectl api-resources</span><br><span class="line">NAME                              SHORTNAMES                                   APIGROUP                       NAMESPACED   KIND</span><br><span class="line">bindings                                                                                                      true         Binding</span><br><span class="line">componentstatuses                 cs                                                                          false        ComponentStatus</span><br><span class="line">configmaps                        cm                                                                          true         ConfigMap</span><br><span class="line">endpoints                         ep                                                                          true         Endpoints</span><br><span class="line">events                            ev                                                                          true         Event</span><br><span class="line">limitranges                       limits                                                                      true         LimitRange</span><br><span class="line">namespaces                        ns                                                                          false        Namespace</span><br><span class="line">nodes                             no                                                                          false        Node</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>其中也会包含上面提到的 <code>ValidatingWebhookConfiguration</code> 资源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mutatingwebhookconfigurations                                                  admissionregistration.k8s.io   false        MutatingWebhookConfiguration</span><br><span class="line">validatingwebhookconfigurations                                                admissionregistration.k8s.io   false        ValidatingWebhookConfiguration</span><br><span class="line">customresourcedefinitions         crd,crds                                     apiextensions.k8s.io           false        CustomResourceDefinition</span><br><span class="line">apiservices                                                                    apiregistration.k8s.io         false        APIService</span><br></pre></td></tr></table></figure><p>由于 <code>Kubernetes</code> 中已经注册的资源对象非常多，所以如果我们知道我们要查找的资源名称包含一些关键词的话，可以用 <code>grep</code> 来过滤:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl api-resources |grep validating</span><br><span class="line">validatingwebhookconfigurations                                                admissionregistration.k8s.io   false        ValidatingWebhookConfiguration</span><br></pre></td></tr></table></figure><p>这样就可以更精确的搜索到需要使用的资源名称了，比如我们这里就是 <code>ValidatingWebhookConfiguration</code> ，现在知道了资源对象的名称，然后可以使用 <code>kubectl explain</code> 命令来查找资源对象的属性。</p><a id="more"></a><h2 id="kubectl-explain-命令">kubectl explain 命令</h2><p><code>kubectl explain</code> 命令可以将资源对象的详细属性都展示出来，比如我们现在不知道如何去编写 <code>ValidatingWebhookConfiguration</code> ，这个时候我们可以通过命令 <code>kubectl explain ValidatingWebhookConfiguration</code> 来获取详细的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl explain ValidatingWebhookConfiguration</span><br><span class="line">KIND:     ValidatingWebhookConfiguration</span><br><span class="line">VERSION:  admissionregistration.k8s.io&#x2F;v1</span><br><span class="line"></span><br><span class="line">DESCRIPTION:</span><br><span class="line">     ValidatingWebhookConfiguration describes the configuration of and admission</span><br><span class="line">     webhook that accept or reject and object without changing it.</span><br><span class="line"></span><br><span class="line">FIELDS:</span><br><span class="line">   apiVersion  &lt;string&gt;</span><br><span class="line">     APIVersion defines the versioned schema of this representation of an</span><br><span class="line">     object. Servers should convert recognized schemas to the latest internal</span><br><span class="line">     value, and may reject unrecognized values. More info:</span><br><span class="line">     https:&#x2F;&#x2F;git.k8s.io&#x2F;community&#x2F;contributors&#x2F;devel&#x2F;sig-architecture&#x2F;api-conventions.md#resources</span><br><span class="line"></span><br><span class="line">   kind  &lt;string&gt;</span><br><span class="line">     Kind is a string value representing the REST resource this object</span><br><span class="line">     represents. Servers may infer this from the endpoint the client submits</span><br><span class="line">     requests to. Cannot be updated. In CamelCase. More info:</span><br><span class="line">     https:&#x2F;&#x2F;git.k8s.io&#x2F;community&#x2F;contributors&#x2F;devel&#x2F;sig-architecture&#x2F;api-conventions.md#types-kinds</span><br><span class="line"></span><br><span class="line">   metadata  &lt;Object&gt;</span><br><span class="line">     Standard object metadata; More info:</span><br><span class="line">     https:&#x2F;&#x2F;git.k8s.io&#x2F;community&#x2F;contributors&#x2F;devel&#x2F;sig-architecture&#x2F;api-conventions.md#metadata.</span><br><span class="line"></span><br><span class="line">   webhooks  &lt;[]Object&gt;</span><br><span class="line">     Webhooks is a list of webhooks and the affected resources and operations.</span><br></pre></td></tr></table></figure><p>这个命令会输出顶层的属性，我们只需要明白 <code>&lt;string&gt;</code> 表示字符串，<code>&lt;Object&gt;</code> 表示对象, <code>[]</code> 表示数组即可，对象在 <code>YAML</code> 文件中就需要缩进，数组就需要通过添加一个破折号来表示一个 <code>Item</code>，对于对象和对象数组我们不知道里面有什么属性的，我们还可以继续在后面查看，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl explain ValidatingWebhookConfiguration.metadata</span><br><span class="line">KIND:     ValidatingWebhookConfiguration</span><br><span class="line">VERSION:  admissionregistration.k8s.io&#x2F;v1</span><br><span class="line"></span><br><span class="line">RESOURCE: metadata &lt;Object&gt;</span><br><span class="line"></span><br><span class="line">DESCRIPTION:</span><br><span class="line">     Standard object metadata; More info:</span><br><span class="line">     https:&#x2F;&#x2F;git.k8s.io&#x2F;community&#x2F;contributors&#x2F;devel&#x2F;sig-architecture&#x2F;api-conventions.md#metadata.</span><br><span class="line"></span><br><span class="line">     ObjectMeta is metadata that all persisted resources must have, which</span><br><span class="line">     includes all objects users must create.</span><br><span class="line"></span><br><span class="line">FIELDS:</span><br><span class="line">   annotations  &lt;map[string]string&gt;</span><br><span class="line">     Annotations is an unstructured key value map stored with a resource that</span><br><span class="line">     may be set by external tools to store and retrieve arbitrary metadata. They</span><br><span class="line">     are not queryable and should be preserved when modifying objects. More</span><br><span class="line">     info: http:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;user-guide&#x2F;annotations</span><br><span class="line"></span><br><span class="line">   ......</span><br></pre></td></tr></table></figure><p>上面输出的属性就是属于 <code>metadata</code> 这个 <code>key</code> 下面对应的对象了，有的时候如果觉得这样一层一层的去查看比较麻烦，我们还可以传入一个 <code>--recursive</code> 参数来获取所有的属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl explain validatingwebhookconfiguration --recursive</span><br><span class="line">KIND:     ValidatingWebhookConfiguration</span><br><span class="line">VERSION:  admissionregistration.k8s.io&#x2F;v1</span><br><span class="line"></span><br><span class="line">DESCRIPTION:</span><br><span class="line">     ValidatingWebhookConfiguration describes the configuration of and admission</span><br><span class="line">     webhook that accept or reject and object without changing it.</span><br><span class="line"></span><br><span class="line">FIELDS:</span><br><span class="line">   apiVersion  &lt;string&gt;</span><br><span class="line">   kind  &lt;string&gt;</span><br><span class="line">   metadata  &lt;Object&gt;</span><br><span class="line">      annotations  &lt;map[string]string&gt;</span><br><span class="line">      clusterName  &lt;string&gt;</span><br><span class="line">      creationTimestamp  &lt;string&gt;</span><br><span class="line">      deletionGracePeriodSeconds  &lt;integer&gt;</span><br><span class="line">      deletionTimestamp  &lt;string&gt;</span><br><span class="line">      finalizers  &lt;[]string&gt;</span><br><span class="line">      generateName  &lt;string&gt;</span><br><span class="line">      generation  &lt;integer&gt;</span><br><span class="line">      labels  &lt;map[string]string&gt;</span><br><span class="line">      managedFields  &lt;[]Object&gt;</span><br><span class="line">         apiVersion  &lt;string&gt;</span><br><span class="line">         fieldsType  &lt;string&gt;</span><br><span class="line">         fieldsV1  &lt;map[string]&gt;</span><br><span class="line">         manager  &lt;string&gt;</span><br><span class="line">         operation  &lt;string&gt;</span><br><span class="line">         time  &lt;string&gt;</span><br><span class="line">      name  &lt;string&gt;</span><br><span class="line">      namespace  &lt;string&gt;</span><br><span class="line">      ownerReferences  &lt;[]Object&gt;</span><br><span class="line">         apiVersion  &lt;string&gt;</span><br><span class="line">         blockOwnerDeletion  &lt;boolean&gt;</span><br><span class="line">         controller  &lt;boolean&gt;</span><br><span class="line">         kind  &lt;string&gt;</span><br><span class="line">         name  &lt;string&gt;</span><br><span class="line">         uid  &lt;string&gt;</span><br><span class="line">      resourceVersion  &lt;string&gt;</span><br><span class="line">      selfLink  &lt;string&gt;</span><br><span class="line">      uid  &lt;string&gt;</span><br><span class="line">   webhooks  &lt;[]Object&gt;</span><br><span class="line">      admissionReviewVersions  &lt;[]string&gt;</span><br><span class="line">      clientConfig  &lt;Object&gt;</span><br><span class="line">         caBundle  &lt;string&gt;</span><br><span class="line">         service  &lt;Object&gt;</span><br><span class="line">            name  &lt;string&gt;</span><br><span class="line">            namespace  &lt;string&gt;</span><br><span class="line">            path  &lt;string&gt;</span><br><span class="line">            port  &lt;integer&gt;</span><br><span class="line">         url  &lt;string&gt;</span><br><span class="line">      failurePolicy  &lt;string&gt;</span><br><span class="line">      matchPolicy  &lt;string&gt;</span><br><span class="line">      name  &lt;string&gt;</span><br><span class="line">      namespaceSelector  &lt;Object&gt;</span><br><span class="line">         matchExpressions  &lt;[]Object&gt;</span><br><span class="line">            key  &lt;string&gt;</span><br><span class="line">            operator  &lt;string&gt;</span><br><span class="line">            values  &lt;[]string&gt;</span><br><span class="line">         matchLabels  &lt;map[string]string&gt;</span><br><span class="line">      objectSelector  &lt;Object&gt;</span><br><span class="line">         matchExpressions  &lt;[]Object&gt;</span><br><span class="line">            key  &lt;string&gt;</span><br><span class="line">            operator  &lt;string&gt;</span><br><span class="line">            values  &lt;[]string&gt;</span><br><span class="line">         matchLabels  &lt;map[string]string&gt;</span><br><span class="line">      rules  &lt;[]Object&gt;</span><br><span class="line">         apiGroups  &lt;[]string&gt;</span><br><span class="line">         apiVersions  &lt;[]string&gt;</span><br><span class="line">         operations  &lt;[]string&gt;</span><br><span class="line">         resources  &lt;[]string&gt;</span><br><span class="line">         scope  &lt;string&gt;</span><br><span class="line">      sideEffects  &lt;string&gt;</span><br><span class="line">      timeoutSeconds  &lt;integer&gt;</span><br></pre></td></tr></table></figure><p>这个命令就可以将资源对象的完整属性列出来，而且缩进格式和 <code>YAML</code> 文件基本上是一致的，这样对于我们去编写资源清单文件就更加友好了。</p><p>自从使用 <code>kubectl api-resources</code> 和 <code>kubectl explain</code> 这两个命令后，为我们编写资源清单文件节省了很多时间，工作效率大大提高了！</p><p>这么好的神技，你还不赶紧用起来吗？ 如果你还有更好的方法，欢迎大家积极留言讨论哟！</p><blockquote><p>本文转载自：「k8s技术圈」，原文：<a href="https://tinyurl.com/y4vvln2x%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E6%AC%A2%E8%BF%8E%E6%8A%95%E7%A8%BF%EF%BC%8C%E6%8A%95%E7%A8%BF%E9%82%AE%E7%AE%B1:" target="_blank" rel="noopener">https://tinyurl.com/y4vvln2x，版权归原作者所有。欢迎投稿，投稿邮箱:</a> <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "10135-1588830050631-449",        "name": "「奇妙的 Linux 世界」",        "qrcode": "https://www.hi-linux.com/img/wechat/mp_qrcode_12.jpg",        "keyword": "VIP"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在编写 &lt;code&gt;Kubernetes&lt;/code&gt; 资源清单的时候可能会经常会忘记要创建的资源名称，即使知道了可能也不记得该资源对象有哪些属性可以使用了，特别是对于那些名称很长的资源或者属性，即使死记硬背下来隔一段时间又会忘记了。&lt;/p&gt;
&lt;p&gt;比如现在我们要创建一个 &lt;code&gt;validating&lt;/code&gt; 的 &lt;code&gt;admission webhook&lt;/code&gt;，我们就需要定义一个 &lt;code&gt;ValidatingWebhookConfiguration&lt;/code&gt; 的资源对象，但是可能我们不记得它的全名了。这个时候我们可以使用 &lt;code&gt;kubectl api-resources&lt;/code&gt; 命令来找到我们需要的 &lt;code&gt;API&lt;/code&gt; 资源。找到了正确的资源名称之后，就需要了解如何编写正确的 &lt;code&gt;YAML&lt;/code&gt; 资源清单文件了，但是 &lt;code&gt;Kubernetes&lt;/code&gt; 中资源对象实在是太多了，而且每一个资源对象中配置属性也是非常多的，我们不可能都能完全记住，这个时候我们也可以借助 &lt;code&gt;kubectl explain&lt;/code&gt; 命令来找到完整的结构，这对于我们编写 &lt;code&gt;YAML&lt;/code&gt; 资源清单文件非常有帮助。&lt;/p&gt;
&lt;h2 id=&quot;kubectl-api-resources-命令&quot;&gt;kubectl api-resources 命令&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;kubectl api-resources&lt;/code&gt; 命令可以打印所有已经注册的 &lt;code&gt;API&lt;/code&gt; 资源，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ Kubectl api-resources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                              SHORTNAMES                                   APIGROUP                       NAMESPACED   KIND&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bindings                                                                                                      true         Binding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;componentstatuses                 cs                                                                          false        ComponentStatus&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;configmaps                        cm                                                                          true         ConfigMap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endpoints                         ep                                                                          true         Endpoints&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;events                            ev                                                                          true         Event&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;limitranges                       limits                                                                      true         LimitRange&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;namespaces                        ns                                                                          false        Namespace&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nodes                             no                                                                          false        Node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中也会包含上面提到的 &lt;code&gt;ValidatingWebhookConfiguration&lt;/code&gt; 资源：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mutatingwebhookconfigurations                                                  admissionregistration.k8s.io   false        MutatingWebhookConfiguration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;validatingwebhookconfigurations                                                admissionregistration.k8s.io   false        ValidatingWebhookConfiguration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;customresourcedefinitions         crd,crds                                     apiextensions.k8s.io           false        CustomResourceDefinition&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apiservices                                                                    apiregistration.k8s.io         false        APIService&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于 &lt;code&gt;Kubernetes&lt;/code&gt; 中已经注册的资源对象非常多，所以如果我们知道我们要查找的资源名称包含一些关键词的话，可以用 &lt;code&gt;grep&lt;/code&gt; 来过滤:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl api-resources |grep validating&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;validatingwebhookconfigurations                                                admissionregistration.k8s.io   false        ValidatingWebhookConfiguration&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样就可以更精确的搜索到需要使用的资源名称了，比如我们这里就是 &lt;code&gt;ValidatingWebhookConfiguration&lt;/code&gt; ，现在知道了资源对象的名称，然后可以使用 &lt;code&gt;kubectl explain&lt;/code&gt; 命令来查找资源对象的属性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/categories/kubernetes/"/>
    
    
      <category term="Linux" scheme="https://www.hi-linux.com/tags/Linux/"/>
    
      <category term="Kubernetes" scheme="https://www.hi-linux.com/tags/Kubernetes/"/>
    
      <category term="YAML" scheme="https://www.hi-linux.com/tags/YAML/"/>
    
  </entry>
  
</feed>
