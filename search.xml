<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[利用SSH的用户配置文件Config管理SSH会话]]></title>
      <url>http://www.hi-linux.com/posts/14346.html</url>
      <content type="html"><![CDATA[<p>通常利用 SSH 连接远程服务器，一般都要输入以下类似命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh user@hostname -p port</div></pre></td></tr></table></figure>
<p>如果拥有多个 SSH 账号，在终端里直接 SSH 登陆要记住每个 SSH 账号的参数是件不容易的事，而且比较浪费精力和时间。</p>
<p>还好 SSH 提供一种优雅且灵活的方式来解决这个问题，就是利用 SSH 的用户配置文件Config管理 SSH 会话。</p>
<a id="more"></a>
<h3 id="使用SSH配置文件"><a href="#使用SSH配置文件" class="headerlink" title="使用SSH配置文件"></a>使用SSH配置文件</h3><p>SSH 程序可以从以下途径获取配置参数：</p>
<blockquote>
<p>用户配置文件 (~/.ssh/config)<br>系统配置文件 (/etc/ssh/ssh_config)</p>
</blockquote>
<p>配置文件可分为多个配置区段，每个配置区段使用”Host”来区分。我们可以在命令行中输入不同的Host来加载不同的配置段。</p>
<p><strong>配置项</strong></p>
<p>下面先介绍一些常用的SSH配置项</p>
<ul>
<li>Host 别名</li>
<li>HostName 主机名</li>
<li>Port 端口</li>
<li>User 用户名</li>
<li>IdentityFile 密钥文件的路径</li>
<li>IdentitiesOnly 只接受SSH key 登录</li>
<li>PreferredAuthentications 强制使用Public Key验证</li>
</ul>
<p>Host</p>
<p>Host配置项标识了一个配置区段。</p>
<p>SSH配置项参数值可以使用通配符：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">'*'</span> 代表 0～n 个非空白字符。</div><div class="line"><span class="string">'?'</span> 代表一个非空白字符。</div><div class="line"><span class="string">'!'</span> 表示例外通配。</div></pre></td></tr></table></figure>
<p>我们可以在系统配置文件中看到一个匹配所有 host 的默认配置区段：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/ssh/ssh_config | grep &apos;^Host&apos;</div><div class="line">Host *</div></pre></td></tr></table></figure>
<p>这里有一些默认配置项，我们可以在用户配置文件中覆盖这些默认配置。</p>
<p>GlobalKnownHostsFile</p>
<p>指定一个或多个全局认证主机缓存文件，用来缓存通过认证的远程主机的密钥，多个文件用空格分隔。默认缓存文件为：<code>/etc/ssh/ssh_known_hosts</code>, <code>/etc/ssh/ssh_known_hosts2</code>。</p>
<p>HostName</p>
<p>指定远程主机名，可以直接使用数字IP地址。如果主机名中包含 ‘%h’ ，则实际使用时会被命令行中的主机名替换。</p>
<p>IdentityFile</p>
<p>指定密钥认证使用的私钥文件路径。默认为<code>~/.ssh/id_dsa</code>, <code>~/.ssh/id_ecdsa</code>, <code>~/.ssh/id_ed25519</code> 或 <code>~/.ssh/id_rsa</code> 中的一个。文件名称可以使用以下转义符：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">'%d'</span> 本地用户目录</div><div class="line"><span class="string">'%u'</span> 本地用户名称</div><div class="line"><span class="string">'%l'</span> 本地主机名</div><div class="line"><span class="string">'%h'</span> 远程主机名</div><div class="line"><span class="string">'%r'</span> 远程用户名</div></pre></td></tr></table></figure>
<p>可以指定多个密钥文件，在连接的过程中会依次尝试这些密钥文件。</p>
<p>Port</p>
<p>指定远程主机端口号，默认为22。</p>
<p>User</p>
<p>指定登录用户名。</p>
<p>UserKnownHostsFile</p>
<p>指定一个或多个用户认证主机缓存文件，用来缓存通过认证的远程主机的密钥，多个文件用空格分隔。默认缓存文件为： <code>~/.ssh/known_hosts</code>, <code>~/.ssh/known_hosts2</code>。</p>
<p>StrictHostKeyChecking</p>
<p>SSH客户端的StrictHostKeyChecking配置指令，<code>StrictHostKeyChecking=no</code>时可以实现当第一次连接服务器时自动接受新的公钥。不再有任何警告出现了。</p>
<p>还有更多参数的介绍，可以通过<code>man ssh_config</code>查看用户手册。</p>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><ul>
<li>使用指定别名登录到www.hi-linux.com这台主机。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Host www</div><div class="line">    HostName www.hi-linux.com</div><div class="line">    Port 22</div><div class="line">    User root</div><div class="line">    IdentityFile  ~/.ssh/id_rsa</div><div class="line">    IdentitiesOnly yes</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh www</div></pre></td></tr></table></figure>
<ul>
<li>不同主机使用同一私钥进行登陆。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Host github.com git.coding.net</div><div class="line">    HostName %h</div><div class="line">    Port 22</div><div class="line">    User git</div><div class="line">    IdentityFile  ~/.ssh/id_rsa_blog</div><div class="line">    IdentitiesOnly yes</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@git.coding.net</div><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://t.cn/RMmO8I9" target="_blank" rel="external">http://t.cn/RMmO8I9</a><br><a href="http://t.cn/RfXzmZw" target="_blank" rel="external">http://t.cn/RfXzmZw</a><br><a href="http://t.cn/RMmWP95" target="_blank" rel="external">http://t.cn/RMmWP95</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[开启Google BBR算法提升网络速度]]></title>
      <url>http://www.hi-linux.com/posts/64279.html</url>
      <content type="html"><![CDATA[<h3 id="什么是BBR"><a href="#什么是BBR" class="headerlink" title="什么是BBR"></a>什么是BBR</h3><p>TCP BBR是谷歌出品的TCP拥塞控制算法，BBR目的是要尽量跑满带宽，并且尽量不要有排队的情况。BBR可以起到单边加速TCP连接的效果。替代锐速再合适不过，毕竟免费。</p>
<p>Google提交到Linux主线并发表在ACM queue期刊上的TCP-BBR拥塞控制算法。继承了Google“先在生产环境上部署，再开源和发论文”的研究传统。TCP-BBR已经再YouTube服务器和Google跨数据中心的内部广域网(B4)上部署。由此可见出该算法的前途。</p>
<p>TCP-BBR的目标就是最大化利用网络上瓶颈链路的带宽。一条网络链路就像一条水管，要想最大化利用这条水管，最好的办法就是给这跟水管灌满水。</p>
<p>BBR解决了两个问题：</p>
<ol>
<li>再有一定丢包率的网络链路上充分利用带宽。非常适合高延迟，高带宽的网络链路。</li>
<li>降低网络链路上的buffer占用率，从而降低延迟。非常适合慢速接入网络的用户。</li>
</ol>
<p>项目地址:<a href="https://github.com/google/bbr" target="_blank" rel="external">https://github.com/google/bbr</a></p>
<a id="more"></a>
<h3 id="安装BBR"><a href="#安装BBR" class="headerlink" title="安装BBR"></a>安装BBR</h3><p>BBR是内嵌在Linux内核中的，目前Linux Kernel 4.9已加入了该算法，所以安装新版本内核开启BBR即可享用。</p>
<ul>
<li>Debian/Ubuntu</li>
</ul>
<p>下面简单讲述如何在Debian/Ubuntu 64bit系统中升级kernel开启TCP BBR拥塞控制算法。</p>
<p><strong>下载最新内核</strong></p>
<p>最新内核查看这里：<a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/" target="_blank" rel="external">http://kernel.ubuntu.com/~kernel-ppa/mainline/</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~;mkdir linux49; <span class="built_in">cd</span> linux49</div><div class="line">$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9/linux-headers-4.9.0-040900-generic_4.9.0-040900.201612111631_amd64.deb</div><div class="line">$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9/linux-image-4.9.0-040900-generic_4.9.0-040900.201612111631_amd64.deb</div><div class="line">$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9/linux-headers-4.9.0-040900_4.9.0-040900.201612111631_all.deb</div></pre></td></tr></table></figure>
<p><strong>开始安装</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ dpkg -i *.deb</div></pre></td></tr></table></figure>
<p>以上用于64位系统，其它可以自行下载Index of /~kernel-ppa/mainline/v4.9 对应版本。</p>
<p><strong>删除其余内核(非必需)</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ dpkg <span class="_">-l</span>|grep linux-image</div><div class="line">$ apt-get remove linux-image-[Tab补全] <span class="comment">#删旧内核，在这里，就是把第一个3.13的删掉</span></div></pre></td></tr></table></figure>
<p><strong>更新grub系统引导文件并重启</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ update-grub</div></pre></td></tr></table></figure>
<p><strong>重启系统并查看内核</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ reboot</div><div class="line">$ uname <span class="_">-a</span></div></pre></td></tr></table></figure>
<ul>
<li>Centos/RHEL</li>
</ul>
<p>通过使用ELRepo源的方式在CentOS中安装最新版kernel。</p>
<p><strong>CentOS 6</strong></p>
<p><strong>下载内核并安装</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</div><div class="line">$ rpm -Uvh http://www.elrepo.org/elrepo-release-6-6.el6.elrepo.noarch.rpm</div><div class="line">$ yum --enablerepo=elrepo-kernel install kernel-ml -y</div></pre></td></tr></table></figure>
<p><strong>查看内核是否安装成功</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rpm -qa | grep kernel</div></pre></td></tr></table></figure>
<p>更新grub系统引导文件并重启</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sed -i <span class="string">'s:default=.*:default=0:g'</span> /etc/grub.conf</div><div class="line">$ reboot</div></pre></td></tr></table></figure>
<p><strong>CentOS 7</strong></p>
<p><strong>下载内核并安装</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</div><div class="line">$ rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</div><div class="line">$ yum --enablerepo=elrepo-kernel install kernel-ml  kernel-ml-devel -y</div></pre></td></tr></table></figure>
<p><strong>查看内核是否安装成功</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rpm -qa | grep kernel</div></pre></td></tr></table></figure>
<p><strong>更新grub系统引导文件并重启</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ egrep ^menuentry /etc/grub2.cfg | cut <span class="_">-f</span> 2 <span class="_">-d</span> \<span class="string">' #删除其余内核(非必需)</span></div><div class="line">$ grub2-set-default 0  #default 0表示第一个内核设置为默认运行, 选择最新内核就对了</div><div class="line">$ reboot</div></pre></td></tr></table></figure>
<p><strong>Google TCP BBR一键安装脚本</strong></p>
<ul>
<li>适用于Centos6 32位和64位</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget --no-check-certificate https://github.com/52fancy/GooGle-BBR/raw/master/BBR.sh &amp;&amp; sh BBR.sh</div></pre></td></tr></table></figure>
<ul>
<li>适用于Centos 6/7  仅适用64位）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget -O- http://soft.wellphp.com/scripts/install_bbr_centos.sh | bash</div></pre></td></tr></table></figure>
<h3 id="开启BBR"><a href="#开启BBR" class="headerlink" title="开启BBR"></a>开启BBR</h3><p>安装内核后从刚安装的内核启动，然后执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="string">"net.core.default_qdisc=fq"</span> &gt;&gt; /etc/sysctl.conf</div><div class="line">$ <span class="built_in">echo</span> <span class="string">"net.ipv4.tcp_congestion_control=bbr"</span> &gt;&gt; /etc/sysctl.conf</div></pre></td></tr></table></figure>
<p>保存生效</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sysctl -p</div></pre></td></tr></table></figure>
<p>验证是否安装成功</p>
<p>执行以下命令，如果结果中有bbr则证明你的内核已开启bbr。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sysctl net.ipv4.tcp_available_congestion_control</div><div class="line">net.ipv4.tcp_available_congestion_control = bbr cubic reno</div><div class="line"></div><div class="line">$ lsmod | grep bbr</div><div class="line">tcp_bbr                20480  0</div></pre></td></tr></table></figure>
<p>开启BBR后效果图</p>
<p><img src="http://o75o1rrhq.bkt.clouddn.com/wp-content/uploads/2016/12/reno_cubic_bbr-1024x520.png" alt=""></p>
<h3 id="关闭bbr"><a href="#关闭bbr" class="headerlink" title="关闭bbr"></a>关闭bbr</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sed -i <span class="string">'/net\.core\.default_qdisc=fq/d'</span> /etc/sysctl.conf</div><div class="line">$ sed -i <span class="string">'/net\.ipv4\.tcp_congestion_control=bbr/d'</span> /etc/sysctl.conf</div><div class="line">$ sysctl -p</div></pre></td></tr></table></figure>
<p>执行完上面的代码，使用<code>reboot</code>重启后才能关闭bbr，重启后再用下面的查看bbr状态代码，查看是否关闭了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ lsmod | grep bbr</div></pre></td></tr></table></figure>
<p>如果结果中没有bbr, 则证明你的内核已关闭bbr</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="https://zhuanlan.zhihu.com/p/24418274" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/24418274</a><br><a href="http://blog.flydust.space/tcp-bbr/" target="_blank" rel="external">http://blog.flydust.space/tcp-bbr/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Docker Registry搭建Docker私有仓库]]></title>
      <url>http://www.hi-linux.com/posts/13369.html</url>
      <content type="html"><![CDATA[<p>有时候使用 Docker Hub 这样的公共仓库可能不方便，并且公司的私有镜像为了业务安全，也不会push到docker hub上，用户可以创建一个本地仓库供私人使用。类似于git 和maven一样，同时节省服务器下载和上传镜像带宽。</p>
<h3 id="什么是Docker-Registry"><a href="#什么是Docker-Registry" class="headerlink" title="什么是Docker Registry"></a>什么是Docker Registry</h3><p>Docker Registry由三个部分组成：index，registry，registry client。<br>可以把Index认为是负责登录、负责认证、负责存储镜像信息和负责对外显示的外部实现，而registry则是负责存储镜像的内部实现，而Registry Client则是docker客户端。</p>
<h3 id="安装Docker-Registry"><a href="#安装Docker-Registry" class="headerlink" title="安装Docker Registry"></a>安装Docker Registry</h3><p>Docker版本需要1.6以上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker --version</div><div class="line">Docker version 1.12.3, build 6b644ec</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>在本地运行registry（本机ip：192.168.3.79）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run <span class="_">-d</span> -v /opt/docker-registry:/var/lib/registry -p 5000:5000 --restart=always --name registry registry</div></pre></td></tr></table></figure>
<p>Registry服务默认会将上传的镜像保存在容器的/var/lib/registry，我们将主机的/opt/docker-registry目录挂载到该目录，即可实现将镜像保存到主机的/opt/docker-registry/目录了。</p>
<p>如果本地没有下载过docker-registry，则首次会pull registry 运行时会映射路径和端口，以后就可以从/opt/docker-registry下找到私有仓库，这里查看下我本机的镜像</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">mysql               latest              <span class="built_in">cd</span>88b71c6c8c        12 days ago         383.4 MB</div><div class="line">debian              latest              73e72bf822ca        13 days ago         123 MB</div><div class="line">registry            latest              c9bd19d022f6        4 weeks ago         33.3 MB</div><div class="line">nginx               latest              a5311a310510        5 weeks ago         181.5 MB</div></pre></td></tr></table></figure>
<p>从上面信息可以分别看出</p>
<ul>
<li>来自于哪个仓库，比如 debian</li>
<li>镜像的标记，比如 latest 最后一个版本</li>
<li>它的 ID 号（唯一）</li>
<li>创建时间</li>
<li>镜像大小</li>
</ul>
<p>可以看到registry容器已经启动</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ docker ps <span class="_">-a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                  PORTS                    NAMES</div><div class="line">131155da6e75        registry            <span class="string">"/entrypoint.sh /etc/"</span>   5 minutes ago       Up 5 minutes            0.0.0.0:5000-&gt;5000/tcp   registry</div></pre></td></tr></table></figure>
<p>访问私有仓库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl 127.0.0.1:5000/v2/_catalog</div><div class="line">&#123;<span class="string">"repositories"</span>:[]&#125;</div></pre></td></tr></table></figure>
<p>因为我们还没有像私有容器提交镜像，所以这里返回空，下面我们提交一个镜像试试，上面可以看到我本地有一个registry的镜像</p>
<h3 id="PUSH镜像"><a href="#PUSH镜像" class="headerlink" title="PUSH镜像"></a>PUSH镜像</h3><p>设置标签到本地的私有镜像</p>
<p>命令格式为</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker tag IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ docker tag debian 127.0.0.1:5000/debian</div><div class="line">$ docker images</div><div class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">127.0.0.1:5000/debian       latest              73e72bf822ca        13 days ago         123 MB</div><div class="line">debian                      latest              73e72bf822ca        13 days ago         123 MB</div><div class="line">registry                    latest              c9bd19d022f6        4 weeks ago         33.3 MB</div><div class="line">nginx                       latest              a5311a310510        5 weeks ago         181.5 MB</div></pre></td></tr></table></figure>
<p>镜像的 ID 唯一标识了镜像，注意到 debian 和 127.0.0.1:5000/debian具有相同的镜像 ID，说明它们实际上是同一镜像。</p>
<p>然后我们将这个镜像push到私有镜像库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ docker push 127.0.0.1:5000/debian</div><div class="line">The push refers to a repository [127.0.0.1:5000/debian]</div><div class="line">fe4c16cbf7a4: Pushed</div><div class="line">latest: digest: sha256:c1ce85a0f7126a3b5cbf7c57676b01b37c755b9ff9e2f39ca88181c02b985724 size: 529</div></pre></td></tr></table></figure>
<p>然后在看下私有仓库中有没有镜像</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl 127.0.0.1:5000/v2/_catalog</div><div class="line">&#123;<span class="string">"repositories"</span>:[<span class="string">"debian"</span>]&#125;</div></pre></td></tr></table></figure>
<p>可以看到一个叫debian的镜像存在了，其他服务器就可以来下载这个镜像使用了。</p>
<h3 id="从其它服务器上面拉取镜像"><a href="#从其它服务器上面拉取镜像" class="headerlink" title="从其它服务器上面拉取镜像"></a>从其它服务器上面拉取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ docker pull 192.168.3.79:5000/debian</div><div class="line"></div><div class="line">$ docker images</div><div class="line">REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">192.168.3.79:5000/debian   latest              73e72bf822ca        13 days ago         123 MB</div></pre></td></tr></table></figure>
<p>可能存在的问题</p>
<p>出现无法从私有仓库pull镜像或无法push到私有仓库的问题，类似如下报错。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ docker pull 192.168.3.79:5000/debian</div><div class="line">Using default tag: latest</div><div class="line">Error response from daemon: Get https://192.168.3.79:5000/v1/_ping: http: server gave HTTP response to HTTPS client</div></pre></td></tr></table></figure>
<p>这是因为我们启动的registry服务不是安全可信赖的。这是我们需要修改docker的配置文件/etc/default/docker，添加下面的内容，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/default/docker</div><div class="line">DOCKER_OPTS=<span class="string">"--insecure-registry 182.168.3.79:5000"</span></div></pre></td></tr></table></figure>
<p>然后重启docker后台进程，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo service docker restart</div></pre></td></tr></table></figure>
<p>然后再PULL即可。</p>
<h3 id="其它技巧"><a href="#其它技巧" class="headerlink" title="其它技巧"></a>其它技巧</h3><ul>
<li>如果本地有很多镜像想批量上传怎么办，可以用这个脚本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/yeasy/docker_practice/raw/master/_local/push_images.sh</div><div class="line">$ chmod a+x push_images.sh</div><div class="line">$ dos2unix push_images.sh  <span class="comment">#这个脚本换行有点问题，需要先转换成Linux下的换行。</span></div><div class="line">$ ./push_images.sh ubuntu:latest centos:centos7</div></pre></td></tr></table></figure>
<ul>
<li>将本地更新后的容器，提交到私有仓库</li>
</ul>
<p>记录容器ID</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker ps</div></pre></td></tr></table></figure>
<p>将容器更新提交到镜像：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker commit -m <span class="string">"Add vim"</span>  69e873e0c48e 127.0.0.1:5000/ubuntu</div></pre></td></tr></table></figure>
<p>Push到私有仓库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker push 127.0.0.1:5000/ubuntu</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://www.jianshu.com/p/58700f2b0730" target="_blank" rel="external">http://www.jianshu.com/p/58700f2b0730</a><br><a href="http://www.cnblogs.com/lienhua34/p/4922130.html" target="_blank" rel="external">http://www.cnblogs.com/lienhua34/p/4922130.html</a><br><a href="http://t.cn/RLtyuWd" target="_blank" rel="external">http://t.cn/RLtyuWd</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx/Apache下禁止指定目录运行PHP脚本]]></title>
      <url>http://www.hi-linux.com/posts/42933.html</url>
      <content type="html"><![CDATA[<p>网站程序的上传目录通常是不需要PHP执行解释权限，通过限制目录的PHP执行权限可以提网站的安全性,减少被攻击的机率。</p>
<p>下面和大家一起分享下如何在Apache和Nginx禁止上传目录里PHP的执行权限。</p>
<ul>
<li>Apache下禁止指定目录运行PHP脚本</li>
</ul>
<p>在虚拟主机配置文件中增加php_flag engine off指令即可，配置如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Directory ~ <span class="string">"/website/uploads"</span>&gt;</div><div class="line">  Options FollowSymLinks</div><div class="line">  AllowOverride None</div><div class="line">  Order allow,deny</div><div class="line">  Allow from all </div><div class="line">  php_flag engine off</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>Nginx下禁止指定目录运行PHP脚本</li>
</ul>
<p>Nginx更简单,直接通过location条件匹配定位后进行权限禁止。</p>
<p>在server配置段中增加如下的配置</p>
<p>如果是单个目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">location ~* ^/uploads/.*\.(php|php5)$</div><div class="line">&#123;</div><div class="line">  deny all;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果是多个目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">location ~* ^/(attachments|uploads)/.*\.(php|php5)$</div><div class="line">&#123;</div><div class="line">  deny all;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意:这段配置文件一定要放在下面配置的前面才可以生效的。</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">location ~ \.php$ &#123;</div><div class="line">fastcgi_pass   127.0.0.1:9000;</div><div class="line">fastcgi_index  index.php;</div><div class="line">fastcgi_param  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</div><div class="line">include        fastcgi_params;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后给一个完整的配置示例</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">location ~ /mm/(data|uploads|templets)/*.(php)$ &#123;</div><div class="line">  deny all;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">location ~ .php$ &#123;</div><div class="line">  try_files <span class="variable">$uri</span> /404.html;</div><div class="line">  fastcgi_pass   127.0.0.1:9000;</div><div class="line">  fastcgi_index  index.php;</div><div class="line">  fastcgi_param  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</div><div class="line">  include        fastcgi_params;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置完后记得重启Nginx生效。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx通过CORS实现跨域]]></title>
      <url>http://www.hi-linux.com/posts/60405.html</url>
      <content type="html"><![CDATA[<h3 id="什么是CORS"><a href="#什么是CORS" class="headerlink" title="什么是CORS"></a>什么是CORS</h3><p>CORS是一个W3C标准，全称是跨域资源共享(Cross-origin resource sharing)。它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p>
<p>当前几乎所有的浏览器(Internet Explorer 8+， Firefox 3.5+， Safari 4+和 Chrome 3+)都可通过名为跨域资源共享(Cross-Origin Resource Sharing)的协议支持AJAX跨域调用。</p>
<p>Chrome,Firefox,Opera,Safari都使用的是XMLHttpRequest2对象，IE使用XDomainRequest。</p>
<p>简单来说就是跨域的目标服务器要返回一系列的Headers，通过这些Headers来控制是否同意跨域。跨域资源共享(CORS)也是未来的跨域问题的标准解决方案。</p>
<a id="more"></a>
<p>CORS提供如下Headers，Request包和Response包中都有一部分。</p>
<p><strong>HTTP Response Header</strong></p>
<ul>
<li>Access-Control-Allow-Origin</li>
<li>Access-Control-Allow-Credentials</li>
<li>Access-Control-Allow-Methods</li>
<li>Access-Control-Allow-Headers</li>
<li>Access-Control-Expose-Headers</li>
<li>Access-Control-Max-Age</li>
</ul>
<p><strong>HTTP Request Header</strong></p>
<ul>
<li>Access-Control-Request-Method</li>
<li>Access-Control-Request-Headers</li>
</ul>
<p>其中最敏感的就是Access-Control-Allow-Origin这个Header, 它是W3C标准里用来检查该跨域请求是否可以被通过。(Access Control Check)。如果需要跨域，解决方法就是在资源的头中加入Access-Control-Allow-Origin 指定你授权的域。 </p>
<h3 id="启用CORS请求"><a href="#启用CORS请求" class="headerlink" title="启用CORS请求"></a>启用CORS请求</h3><p>假设您的应用已经在example.com上了，而您想要从www.example2.com提取数据。一般情况下，如果您尝试进行这种类型的AJAX调用，请求将会失败，而浏览器将会出现源不匹配的错误。利用CORS后只需www.example2.com 服务端添加一个HTTP Response头，就可以允许来自example.com的请求。</p>
<p>将Access-Control-Allow-Origin添加到某网站下或整个域中的单个资源</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Origin: http://example.com</div><div class="line">Access-Control-Allow-Credentials: true (可选)</div></pre></td></tr></table></figure>
<p>将允许任何域向您提交请求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Origin: *</div><div class="line">Access-Control-Allow-Credentials: true (可选)</div></pre></td></tr></table></figure>
<h3 id="提交跨域请求"><a href="#提交跨域请求" class="headerlink" title="提交跨域请求"></a>提交跨域请求</h3><p>如果服务器端已启用了CORS，那么提交跨域请求就和普通的XMLHttpRequest请求没什么区别。例如现在example.com可以向www.example2.com提交请求。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var xhr = new XMLHttpRequest();</div><div class="line">// xhr.withCredentials = true; //如果需要Cookie等</div><div class="line">xhr.open(&apos;GET&apos;, &apos;http://www.example2.com/hello.json&apos;);</div><div class="line">xhr.onload = function(e) &#123;</div><div class="line">  var data = JSON.parse(this.response);</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line">xhr.send();</div></pre></td></tr></table></figure>
<h3 id="服务端Nginx配置"><a href="#服务端Nginx配置" class="headerlink" title="服务端Nginx配置"></a>服务端Nginx配置</h3><p>要实现CORS跨域，服务端需要下图中这样一个流程</p>
<p><img src="http://www.hi-linux.com/img/linux/cors_server_flowchart.png" alt=""></p>
<ul>
<li>对于简单请求，如GET，只需要在HTTP Response后添加Access-Control-Allow-Origin。</li>
<li>对于非简单请求，比如POST、PUT、DELETE等，浏览器会分两次应答。第一次preflight（method: OPTIONS），主要验证来源是否合法，并返回允许的Header等。第二次才是真正的HTTP应答。所以服务器必须处理OPTIONS应答。</li>
</ul>
<p>流程如下</p>
<ul>
<li>首先查看http头部有无origin字段；</li>
<li>如果没有，或者不允许，直接当成普通请求处理，结束；</li>
<li>如果有并且是允许的，那么再看是否是preflight(method=OPTIONS)；</li>
<li>如果是preflight，就返回Allow-Headers、Allow-Methods等，内容为空；</li>
<li>如果不是preflight，就返回Allow-Origin、Allow-Credentials等，并返回正常内容。</li>
</ul>
<p>用伪代码表示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">location /pub/(.+) &#123;</div><div class="line">    if ($http_origin ~ &lt;允许的域（正则匹配）&gt;) &#123;</div><div class="line">        add_header &apos;Access-Control-Allow-Origin&apos; &quot;$http_origin&quot;;</div><div class="line">        add_header &apos;Access-Control-Allow-Credentials&apos; &quot;true&quot;;</div><div class="line">        if ($request_method = &quot;OPTIONS&quot;) &#123;</div><div class="line">            add_header &apos;Access-Control-Max-Age&apos; 86400;</div><div class="line">            add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS, DELETE&apos;;</div><div class="line">            add_header &apos;Access-Control-Allow-Headers&apos; &apos;reqid, nid, host, x-real-ip, x-forwarded-ip, event-type, event-id, accept, content-type&apos;;</div><div class="line">            add_header &apos;Content-Length&apos; 0;</div><div class="line">            add_header &apos;Content-Type&apos; &apos;text/plain, charset=utf-8&apos;;</div><div class="line">            return 204;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    # 正常nginx配置</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Nginx配置实例"><a href="#Nginx配置实例" class="headerlink" title="Nginx配置实例"></a>Nginx配置实例</h4><h5 id="实例一：允许example-com的应用在www-example2-com上跨域提取数据"><a href="#实例一：允许example-com的应用在www-example2-com上跨域提取数据" class="headerlink" title="实例一：允许example.com的应用在www.example2.com上跨域提取数据"></a>实例一：允许example.com的应用在www.example2.com上跨域提取数据</h5><p>在nginx.conf里找到server项,并在里面添加如下配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">location /&#123;</div><div class="line"></div><div class="line">add_header &apos;Access-Control-Allow-Origin&apos; &apos;http://example.com&apos;;</div><div class="line">add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</div><div class="line">add_header &apos;Access-Control-Allow-Headers&apos; &apos;Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,X-Requested-With&apos;;</div><div class="line">add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET,POST,OPTIONS&apos;;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果需要允许来自任何域的访问，可以这样配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">add_header Access-Control-Allow-Origin *;</div></pre></td></tr></table></figure>
<p>注释如下</p>
<blockquote>
<p>第一条指令：授权从example.com的请求(必需)<br>第二条指令：当该标志为真时，响应于该请求是否可以被暴露(可选)<br>第三条指令：允许脚本访问的返回头(可选)<br>第四条指令：指定请求的方法，可以是GET, POST, OPTIONS, PUT, DELETE等(可选)</p>
</blockquote>
<p>重启Nginx</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ service nginx reload</div></pre></td></tr></table></figure>
<p>测试跨域请求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -I -X OPTIONS -H &quot;Origin: http://example.com&quot; http://www.example2.com</div></pre></td></tr></table></figure>
<p>成功时，响应头是如下所示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Server: nginx</div><div class="line">Access-Control-Allow-Origin: example.com</div></pre></td></tr></table></figure>
<h5 id="实例二：Nginx允许多个域名跨域访问"><a href="#实例二：Nginx允许多个域名跨域访问" class="headerlink" title="实例二：Nginx允许多个域名跨域访问"></a>实例二：Nginx允许多个域名跨域访问</h5><p>由于Access-Control-Allow-Origin参数只允许配置单个域名或者<code>*</code>，当我们需要允许多个域名跨域访问时可以用以下几种方法来实现。</p>
<ul>
<li>方法一</li>
</ul>
<p>如需要允许用户请求来自www.example.com、m.example.com、wap.example.com访问www.example2.com域名时，返回头Access-Control-Allow-Origin，具体配置如下</p>
<p>在nginx.conf里面,找到server项,并在里面添加如下配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">map $http_origin $corsHost &#123;</div><div class="line">    default 0;</div><div class="line">    &quot;~http://www.example.com&quot; http://www.example.com;</div><div class="line">    &quot;~http://m.example.com&quot; http://m.example.com;</div><div class="line">    &quot;~http://wap.example.com&quot; http://wap.example.com;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server</div><div class="line">&#123;</div><div class="line">    listen 80;</div><div class="line">    server_name www.example2.com;</div><div class="line">    root /usr/share/nginx/html;</div><div class="line">    location /</div><div class="line">    &#123;</div><div class="line">        add_header Access-Control-Allow-Origin $corsHost;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>方法二</li>
</ul>
<p>如需要允许用户请求来自localhost、www.example.com或m.example.com的请求访问xxx.example2.com域名时，返回头Access-Control-Allow-Origin，具体配置如下</p>
<p>在Nginx配置文件中xxx.example2.com域名的location /下配置以下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">set $cors &apos;&apos;;</div><div class="line">if ($http_origin ~* &apos;https?://(localhost|www\.example\.com|m\.example\.com)&apos;) &#123;</div><div class="line">        set $cors &apos;true&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">if ($cors = &apos;true&apos;) &#123;</div><div class="line">        add_header &apos;Access-Control-Allow-Origin&apos; &quot;$http_origin&quot;;</div><div class="line">        add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</div><div class="line">        add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, PUT, DELETE, OPTIONS&apos;;</div><div class="line">        add_header &apos;Access-Control-Allow-Headers&apos; &apos;Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Mx-ReqToken,X-Requested-With&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">if ($request_method = &apos;OPTIONS&apos;) &#123;</div><div class="line">        return 204;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>方法三</li>
</ul>
<p>如需要允许用户请求来自*.example.com访问xxx.example2.com域名时，返回头Access-Control-Allow-Origin，具体配置如下</p>
<p>在Nginx配置文件中xxx.example2.com域名的location /下配置以下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">if ( $http_origin ~ http://(.*).example.com)&#123;</div><div class="line">         set $allow_url $http_origin;</div><div class="line">    &#125;</div><div class="line">    #CORS(Cross Orign Resource-Sharing)跨域控制配置</div><div class="line">    #是否允许请求带有验证信息</div><div class="line">    add_header Access-Control-Allow-Credentials true;</div><div class="line">    #允许跨域访问的域名,可以是一个域的列表，也可以是通配符*</div><div class="line">    add_header Access-Control-Allow-Origin $allow_url;</div><div class="line">    #允许脚本访问的返回头</div><div class="line">    add_header Access-Control-Allow-Headers &apos;x-requested-with,content-type,Cache-Control,Pragma,Date,x-timestamp&apos;;</div><div class="line">    #允许使用的请求方法，以逗号隔开</div><div class="line">    add_header Access-Control-Allow-Methods &apos;POST,GET,OPTIONS,PUT,DELETE&apos;;</div><div class="line">    #允许自定义的头部，以逗号隔开,大小写不敏感</div><div class="line">    add_header Access-Control-Expose-Headers &apos;WWW-Authenticate,Server-Authorization&apos;;</div><div class="line">    #P3P支持跨域cookie操作</div><div class="line">    add_header P3P &apos;policyref=&quot;/w3c/p3p.xml&quot;, CP=&quot;NOI DSP PSAa OUR BUS IND ONL UNI COM NAV INT LOC&quot;&apos;;</div></pre></td></tr></table></figure>
<ul>
<li>方法四</li>
</ul>
<p>如需要允许用户请求来自xxx1.example.com或xxx1.example1.com访问xxx.example2.com域名时，返回头Access-Control-Allow-Origin，具体配置如下</p>
<p>在Nginx配置文件中xxx.example2.com域名的location /下配置以下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line"></div><div class="line">    if ( $http_origin ~ .*.(example|example1).com ) &#123;</div><div class="line">    add_header Access-Control-Allow-Origin $http_origin;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="实例三：Nginx跨域配置并支持DELETE-PUT请求"><a href="#实例三：Nginx跨域配置并支持DELETE-PUT请求" class="headerlink" title="实例三：Nginx跨域配置并支持DELETE,PUT请求"></a>实例三：Nginx跨域配置并支持DELETE,PUT请求</h5><p>默认Access-Control-Allow-Origin开启跨域请求只支持GET、HEAD、POST、OPTIONS请求，使用DELETE发起跨域请求时，浏览器出于安全考虑会先发起OPTIONS请求，服务器端接收到的请求方式就变成了OPTIONS，所以引起了服务器的405 Method Not Allowed。</p>
<p>解决方法</p>
<p>首先要对OPTIONS请求进行处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if ($request_method = &apos;OPTIONS&apos;) &#123; </div><div class="line">    add_header Access-Control-Allow-Origin *; </div><div class="line">    add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;</div><div class="line">    #其他头部信息配置，省略...</div><div class="line">    return 204; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当请求方式为OPTIONS时设置Allow的响应头，重新处理这次请求。这样发出请求时第一次是OPTIONS请求，第二次才是DELETE请求。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 完整配置参考</div><div class="line"># 将配置文件的放到对应的server &#123;&#125;里</div><div class="line"></div><div class="line">add_header Access-Control-Allow-Origin *;</div><div class="line"></div><div class="line">location / &#123;</div><div class="line">    if ($request_method = &apos;OPTIONS&apos;) &#123; </div><div class="line">        add_header Access-Control-Allow-Origin *; </div><div class="line">        add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;</div><div class="line">        return 204; </div><div class="line">    &#125;</div><div class="line">    index index.php;</div><div class="line">    try_files $uri @rewriteapp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="实例四：更多配置示例"><a href="#实例四：更多配置示例" class="headerlink" title="实例四：更多配置示例"></a>实例四：更多配置示例</h5><ul>
<li>示例一</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">The following Nginx configuration enables CORS, with support for preflight requests.</div><div class="line"></div><div class="line">#</div><div class="line"># Wide-open CORS config for nginx</div><div class="line">#</div><div class="line">location / &#123;</div><div class="line">     if ($request_method = &apos;OPTIONS&apos;) &#123;</div><div class="line">        add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</div><div class="line">        add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</div><div class="line">        #</div><div class="line">        # Custom headers and headers various browsers *should* be OK with but aren&apos;t</div><div class="line">        #</div><div class="line">        add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</div><div class="line">        #</div><div class="line">        # Tell client that this pre-flight info is valid for 20 days</div><div class="line">        #</div><div class="line">        add_header &apos;Access-Control-Max-Age&apos; 1728000;</div><div class="line">        add_header &apos;Content-Type&apos; &apos;text/plain charset=UTF-8&apos;;</div><div class="line">        add_header &apos;Content-Length&apos; 0;</div><div class="line">        return 204;</div><div class="line">     &#125;</div><div class="line">     if ($request_method = &apos;POST&apos;) &#123;</div><div class="line">        add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</div><div class="line">        add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</div><div class="line">        add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</div><div class="line">     &#125;</div><div class="line">     if ($request_method = &apos;GET&apos;) &#123;</div><div class="line">        add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</div><div class="line">        add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</div><div class="line">        add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>示例二</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">if ($request_method = &apos;OPTIONS&apos;) &#123;  </div><div class="line">    add_header &apos;Access-Control-Allow-Origin&apos; &apos;https://docs.domain.com&apos;;  </div><div class="line">    add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;  </div><div class="line">    add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, PUT, DELETE, PATCH, OPTIONS&apos;;  </div><div class="line">    add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,token&apos;;  </div><div class="line">    return 204;</div><div class="line">&#125;</div><div class="line">if ($request_method = &apos;POST&apos;) &#123;  </div><div class="line">    add_header &apos;Access-Control-Allow-Origin&apos; &apos;https://docs.domain.com&apos;;  </div><div class="line">    add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;  </div><div class="line">    add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, PUT, DELETE, PATCH, OPTIONS&apos;;  </div><div class="line">    add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,token&apos;;  </div><div class="line">&#125;  </div><div class="line">if ($request_method = &apos;GET&apos;) &#123;  </div><div class="line">    add_header &apos;Access-Control-Allow-Origin&apos; &apos;https://docs.domain.com&apos;;  </div><div class="line">    add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;  </div><div class="line">    add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, PUT, DELETE, PATCH, OPTIONS&apos;;  </div><div class="line">    add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,token&apos;;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="其它技巧"><a href="#其它技巧" class="headerlink" title="其它技巧"></a>其它技巧</h3><h4 id="Apache中启用CORS"><a href="#Apache中启用CORS" class="headerlink" title="Apache中启用CORS"></a>Apache中启用CORS</h4><p>在httpd配置或.htaccess文件中添加如下语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SetEnvIf Origin &quot;^(.*\.example\.com)$&quot; ORIGIN_SUB_DOMAIN=$1  </div><div class="line">Header set Access-Control-Allow-Origin &quot;%&#123;ORIGIN_SUB_DOMAIN&#125;e&quot; env=ORIGIN_SUB_DOMAIN</div></pre></td></tr></table></figure>
<h4 id="PHP中启用CORS"><a href="#PHP中启用CORS" class="headerlink" title="PHP中启用CORS"></a>PHP中启用CORS</h4><p>通过在服务端设置Access-Control-Allow-Origin响应头</p>
<ul>
<li>允许所有来源访问</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">header(&quot;Access-Control-Allow-Origin: *&quot;);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<ul>
<li>允许来自特定源的访问</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">header(&apos;Access-Control-Allow-Origin: &apos;.$_SERVER[&apos;HTTP_ORIGIN&apos;]);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<ul>
<li>配置多个访问源</li>
</ul>
<p>由于浏览器实现只支持了单个origin、*、null，如果要配置多个访问源，可以在代码中处理如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$allowed_origins   = array(  </div><div class="line">                            &quot;http://www.example.com&quot;   ,  </div><div class="line">                            &quot;http://app.example.com&quot;  ,  </div><div class="line">                            &quot;http://cms.example.com&quot;  ,  </div><div class="line">                          );  </div><div class="line">if (in_array($_SERVER[&apos;HTTP_ORIGIN&apos;], $allowed_origins))&#123;    </div><div class="line">    @header(&quot;Access-Control-Allow-Origin: &quot; . $_SERVER[&apos;HTTP_ORIGIN&apos;]);  </div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h4 id="HTML中启用CORS"><a href="#HTML中启用CORS" class="headerlink" title="HTML中启用CORS"></a>HTML中启用CORS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;Access-Control-Allow-Origin&quot; content=&quot;*&quot;&gt;</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://blog.csdn.net/oyzl68/article/details/18741057" target="_blank" rel="external">http://blog.csdn.net/oyzl68/article/details/18741057</a><br><a href="http://www.webyang.net/Html/web/article_135.html" target="_blank" rel="external">http://www.webyang.net/Html/web/article_135.html</a><br><a href="http://www.ttlsa.com/nginx/how-to-allow-cross-domain-ajax-requests-on-nginx/" target="_blank" rel="external">http://www.ttlsa.com/nginx/how-to-allow-cross-domain-ajax-requests-on-nginx/</a><br><a href="http://www.voidcn.com/blog/lvnian/article/p-5978475.html" target="_blank" rel="external">http://www.voidcn.com/blog/lvnian/article/p-5978475.html</a><br><a href="http://to-u.xyz/2016/06/30/nginx-cors/" target="_blank" rel="external">http://to-u.xyz/2016/06/30/nginx-cors/</a><br><a href="http://coderq.github.io/2016/05/13/cross-domain/" target="_blank" rel="external">http://coderq.github.io/2016/05/13/cross-domain/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用Nginx反向代理机制解决前端跨域问题]]></title>
      <url>http://www.hi-linux.com/posts/41743.html</url>
      <content type="html"><![CDATA[<h3 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h3><p>跨域请求针对浏览器的同源策略(Same-Origin Policy)而言，指一个网站主动请求另外一个网站的资源(图片、javascript、视频等)。</p>
<p>同源策略要求网站只能有限制的访问外部网站的资源，不合法的请求会被拦截。网站的源由协议、域名、端口三部分组成，有一部分不同就被视为不同源，两个不同的域名即便指向同一个ip地址也是跨域的。网站通过AJAX(发送XMLHttpRequest到其他网站)请求资源是典型的跨域请求，需要外部网站许可才能访问。</p>
<p>同源策略的目的是防止黑客做一些做奸犯科的勾当。比如，一个银行的一个应用允许用户上传网页，如果没有同源策略黑客可以编写一个登陆表单提交到自己的服务器上，得到一个看上去相当高大上的页面。黑客把这个页面通过邮件等发给用户，用户误认为这是某银行的主网页进行登陆，就会泄露自己的用户数据。而因为浏览器的同源策略，黑客无法收到表单数据。</p>
<a id="more"></a>
<p>更直观的跨域情况见下表</p>
<p><img src="http://www.hi-linux.com/img/linux/nginx_sop.png" alt=""></p>
<h3 id="跨域常见解决方案"><a href="#跨域常见解决方案" class="headerlink" title="跨域常见解决方案"></a>跨域常见解决方案</h3><p>跨域解决方案有多种，大多是利用JS Hack。</p>
<ul>
<li>document.domain+iframe的设置</li>
<li>动态创建script</li>
<li>利用iframe和location.hash</li>
<li>window.name实现的跨域数据传输</li>
<li>使用HTML5 postMessage</li>
<li>利用flash</li>
<li>Jquery JSONP</li>
<li>跨域资源共享(CORS)</li>
<li>Nginx反向代理</li>
</ul>
<h3 id="Nginx反向代理实现跨域"><a href="#Nginx反向代理实现跨域" class="headerlink" title="Nginx反向代理实现跨域"></a>Nginx反向代理实现跨域</h3><p>本文介绍的是通过Nginx反向代理解决跨域，这也是最简单实现跨域的方法。只需要修改Nginx的配置即可解决跨域问题，支持所有浏览器，支持Session，不需要修改任何代码，并且不会影响服务器性能。</p>
<p>我们只需要配置Nginx，在一个服务器上配置多个前缀来转发http/https请求到多个真实的服务器即可。这样这个服务器上所有URL都是相同的域名、协议和端口。因此，对于浏览器来说这些URL都是同源的，没有跨域限制。而实际上这些URL实际上由物理服务器提供服务。这些服务器内的JavaScript可以跨域调用所有这些服务器上的URL。</p>
<p>简单说，Nginx服务器欺骗了浏览器，让它认为这是同源调用，从而解决了浏览器的跨域问题。</p>
<p>下面给出一个Nginx支持跨域的例子，进行具体说明。</p>
<blockquote>
<p>服务器A(<code>域名:www.hi-linux.com</code>)中有一个页面，想请求服务器B(<code>域名:www.imike.me</code>)中的api地址(<code>http://www.imike.me/api</code>)获取数据。</p>
</blockquote>
<ul>
<li>Nginx配置</li>
</ul>
<p><strong>修改配置文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line"></div><div class="line">    listen 80;</div><div class="line">    server_name www.hi-linux.com;</div><div class="line">    root /var/www/html;</div><div class="line">    autoindex off;</div><div class="line">    index index.html index.htm index.php;</div><div class="line"></div><div class="line">    # 将www.hi-linux.com/api的所有请求反向代理到www.imike.me</div><div class="line">	</div><div class="line">    location ~ ^/api/ &#123;</div><div class="line">        proxy_pass http://www.imike.me;</div><div class="line">        proxy_redirect          off; </div><div class="line">        proxy_set_header        X-Real-IP       $remote_addr; </div><div class="line">        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for; </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ~ /\.ht &#123;</div><div class="line">       deny  all;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>重启Nginx</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/nginx restart</div></pre></td></tr></table></figure>
<ul>
<li>修改JS代码中的地址</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function getID()&#123; </div><div class="line">		jQuery.get(&quot;http://www.hi-linux.com/api/GetData?id=1”, </div><div class="line">		  function (data, textStatus)&#123; </div><div class="line">            this; // 在这里this指向的是Ajax请求的选项配置信息 </div><div class="line">            if(textStatus==&quot;success&quot;)&#123; </div><div class="line">            jQuery(&quot;#CountNum&quot;).html(data); </div><div class="line">            &#125; </div><div class="line">          &#125;);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试</li>
</ul>
<p>访问<code>http://www.hi-linux.com/api/</code>下的URL都会被代理到<code>http://www.imike.me/api/</code>下。</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://www.jbxue.com/article/2187.html" target="_blank" rel="external">http://www.jbxue.com/article/2187.html</a><br><a href="http://blog.jobbole.com/101318/" target="_blank" rel="external">http://blog.jobbole.com/101318/</a><br><a href="http://seanlook.com/2015/05/17/nginx-location-rewrite/" target="_blank" rel="external">http://seanlook.com/2015/05/17/nginx-location-rewrite/</a><br><a href="http://jooben.blog.51cto.com/253727/438335" target="_blank" rel="external">http://jooben.blog.51cto.com/253727/438335</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[利用Dnsmasq部署DHCP服务]]></title>
      <url>http://www.hi-linux.com/posts/17088.html</url>
      <content type="html"><![CDATA[<p>DNSmasq是一个小巧且方便地用于配置DNS和DHCP的工具，适用于小型网络。它提供了DNS功能和可选择的DHCP功能可以取代dhcpd(DHCPD服务配置)和Bind等服务。DNSmasq配置起来更简单，更适用于虚拟化和大数据环境的部署。</p>
<p>在[<a href="http://hi-linux.com/2016/07/29/%E5%88%A9%E7%94%A8Dnsmasq%E9%83%A8%E7%BD%B2DNS%E6%9C%8D%E5%8A%A1/" target="_blank" rel="external">利用Dnsmasq部署DNS服务</a>]一文中介绍了如何用DNSmasq进行DNS服务。这一篇文章主要介绍用DNSmasq部署DHCP服务。DNSmasq所提供的DHCP服务也是和dhcpd十分相近的。如同共动态地址分配，可以通过MAC地址预先指定静态的IP地址给特定的主机等等。</p>
<a id="more"></a>
<p>使用DNSmasq提供DHCP服务也是相当简单的事情。配置文件<code>/etc/dnsmasq.conf</code>中的注释已经给出了非常详细的解释，其中一些关键的配置如下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/dnsmasq.conf</div><div class="line"></div><div class="line"># 服务监听的网络接口地址</div><div class="line"># If you want dnsmasq to listen for DHCP and DNS requests only on</div><div class="line"># specified interfaces (and the loopback) give the name of the</div><div class="line"># interface (eg eth0) here.</div><div class="line"># Repeat the line for more than one interface.</div><div class="line">#interface=</div><div class="line"># Or you can specify which interface _not_ to listen on</div><div class="line">#except-interface=</div><div class="line"># Or which to listen on by address (remember to include 127.0.0.1 if</div><div class="line"># you use this.)</div><div class="line">listen-address=192.168.1.132,127.0.0.1</div><div class="line"></div><div class="line"># dhcp动态分配的地址范围,自动分配50-150ip段，有效期48小时</div><div class="line"># Uncomment this to enable the integrated DHCP server, you need</div><div class="line"># to supply the range of addresses available for lease and optionally a lease time</div><div class="line">dhcp-range=192.168.1.50,192.168.1.150,48h</div><div class="line"></div><div class="line"># dhcp服务的静态绑定</div><div class="line"># dhcp-host的配置方式有很多种，这里使用的是：[client端MAC地址] + [分配的IP]+ [主机名]</div><div class="line"># Always set the name and ipaddr of the host with hardware address</div><div class="line"># dhcp-host=00:0C:29:5E:F2:6F,192.168.1.201</div><div class="line"># dhcp-host=00:0C:29:5E:F2:6F,192.168.1.201,infinite	无限租期</div><div class="line">dhcp-host=00:0C:29:5E:F2:6F,192.168.1.201,os02</div><div class="line">dhcp-host=00:0C:29:15:63:CF,192.168.1.202,os03</div><div class="line"></div><div class="line"># dhcp服务的其它几种绑定方式</div><div class="line"></div><div class="line"># Always allocate the host with ethernet address 11:22:33:44:55:66</div><div class="line"># The IP address 192.168.0.60</div><div class="line"># 绑定网卡地址对应ip地址，用的是host的方式，类似在hosts文件写一个host name 对应一个ip，所以这个不是arp绑定，要区分。</div><div class="line"># dhcp-host=11:22:33:44:55:66,192.168.1.60</div><div class="line"></div><div class="line"># Always set the name of the host with hardware address</div><div class="line"># 11:22:33:44:55:66 to be &quot;fred&quot;</div><div class="line"># 绑定mac地址对应一个host name ，我个人觉得绑定mac对应ip就足够了，绑定对应名字比较少见</div><div class="line"># dhcp-host=11:22:33:44:55:66,fred</div><div class="line"></div><div class="line"># Always give the host with ethernet address 11:22:33:44:55:66</div><div class="line"># the name fred and IP address 192.168.0.60 and lease time 45 minutes</div><div class="line"># 这个是组合版，绑定某个mac对应fred名字，然后加上一个ip分配，并设置租约，这个只能说是灵活配置的参考，没啥实际意义</div><div class="line"># dhcp-host=11:22:33:44:55:66,fred,192.168.0.60,45m</div><div class="line"></div><div class="line"># Give a host with ethernet address 11:22:33:44:55:66 or</div><div class="line"># 12:34:56:78:90:12 the IP address 192.168.0.60. Dnsmasq will assume</div><div class="line"># that these two ethernet interfaces will never be in use at the same</div><div class="line"># time, and give the IP address to the second, even if it is already</div><div class="line"># in use by the first. Useful for laptops with wired and wireless</div><div class="line"># addresses.</div><div class="line"># 绑定一个ip对应多mac地址，用途场景存在于实验室和无线网络，我想只是为了让2块网卡用同一个ip这样单纯而纯洁的需求而已[不常用]</div><div class="line"># dhcp-host=11:22:33:44:55:66,12:34:56:78:90:12,192.168.0.60</div><div class="line"></div><div class="line"># Give the machine which says its name is &quot;bert&quot; IP address</div><div class="line"># 192.168.0.70 and an infinite lease</div><div class="line"># 绑定名字对应ip，并且给了一个新参数，无限租约</div><div class="line"># dhcp-host=bert,192.168.0.70,infinite</div><div class="line"></div><div class="line"># Always give the host with client identifier 01:02:02:04</div><div class="line"># the IP address 192.168.0.60</div><div class="line"># 给予一个特殊标识符对应ip，用途不明</div><div class="line"># dhcp-host=id:01:02:02:04,192.168.0.60</div><div class="line"></div><div class="line"># Always give the host with client identifier &quot;marjorie&quot;</div><div class="line"># the IP address 192.168.0.60</div><div class="line"># 跟上一条类似，只是标识符还支持普通字符字串</div><div class="line"># dhcp-host=id:marjorie,192.168.0.60</div><div class="line"></div><div class="line"># 通过/etc/hosts来分配对应的hostname</div><div class="line"># Enable the address given for &quot;judge&quot; in /etc/hosts</div><div class="line"># to be given to a machine presenting the name &quot;judge&quot; when</div><div class="line"># it asks for a DHCP lease.</div><div class="line"># dhcp-host=judge</div><div class="line"></div><div class="line"># 忽略下面MAC地址的DHCP请求,不分配ip</div><div class="line"># Never offer DHCP service to a machine whose ethernet</div><div class="line"># address is 11:22:33:44:55:66</div><div class="line">#dhcp-host=11:22:33:44:55:66,ignore</div><div class="line"></div><div class="line"># If this line is uncommented, dnsmasq will read /etc/ethers and act</div><div class="line"># on the ethernet-address/IP pairs found there just as if they had</div><div class="line"># been given as --dhcp-host options. Useful if you keep</div><div class="line"># MAC-address/host mappings there for other purposes.</div><div class="line"># 使用额外的文件代替主配置文件来处理dhcp-host的匹配，这个主要为了方便管理，将所有需要用到的dhcp-host配置都放进/etc/ethers</div><div class="line"></div><div class="line"># 设置默认租期</div><div class="line"># Set the limit on DHCP leases, the default is 150</div><div class="line">#dhcp-lease-max=150</div><div class="line"></div><div class="line"># 租期保存在下面文件</div><div class="line"># The DHCP server needs somewhere on disk to keep its lease database.</div><div class="line"># This defaults to a sane location, but if you want to change it, use</div><div class="line"># the line below.</div><div class="line">#dhcp-leasefile=/var/lib/dnsmasq/dnsmasq.leases</div><div class="line"></div><div class="line"># Set this (and domain: see below) if you want to have a domain</div><div class="line"># automatically added to simple names in a hosts-file.</div><div class="line"># 自动给hosts的域名增加一个简单的名字，搭配下面的domain用的[不常用]</div><div class="line">expand-hosts</div><div class="line"></div><div class="line"># dhcp所在的域</div><div class="line"># Set the domain for dnsmasq. this is optional, but if it is set, it</div><div class="line"># does the following things.</div><div class="line"># 1) Allows DHCP hosts to have fully qualified domain names, as long</div><div class="line">#     as the domain part matches this setting.</div><div class="line"># 2) Sets the &quot;domain&quot; DHCP option thereby potentially setting the</div><div class="line">#    domain of all systems configured by DHCP</div><div class="line"># 3) Provides the domain part for &quot;expand-hosts&quot;</div><div class="line">domain=hi-linux.com</div><div class="line"></div><div class="line"># 设置默认路由出口</div><div class="line"># dhcp-option遵循RFC 2132（Options and BOOTP Vendor Extensions),可以通过dnsmasq --help dhcp来查看具体的配置</div><div class="line"># 很多高级的配置，如iSCSI连接配置等同样可以由RFC 2132定义的dhcp-option中给出。</div><div class="line"># option 3为default route</div><div class="line"># Override the default route supplied by dnsmasq, which assumes the</div><div class="line"># router is the same machine as the one running dnsmasq.</div><div class="line">dhcp-option=3,192.168.1.1</div><div class="line"></div><div class="line"># 设置NTP Server.这是使用option name而非选项名来进行设置</div><div class="line"># Set the NTP time server addresses to 192.168.0.4 and 10.10.0.5</div><div class="line">#dhcp-option=option:ntp-server,192.168.0.4,10.10.0.5</div></pre></td></tr></table></figure>
<p><em>注意:当为某一MAC地址同时静态分配主机名和IP时，如果写到两条dhcp-host选项里(如下所示)，则只会生效后面的一条。正确的选项写法(如上配置)。</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dhcp-host=00:0C:29:5E:F2:6F,192.168.1.201</div><div class="line">dhcp-host=00:0C:29:5E:F2:6F,os02</div></pre></td></tr></table></figure>
<p><strong>下面在客户端进行测试</strong></p>
<ul>
<li>重新启动dnsmasq服务(server的IP为192.168.1.132)</li>
</ul>
<p>由于之前测试中客户端网卡已经申请了DHCP租期。所以这里需要修改租期文件，让客户端重新获得IP和hostname。</p>
<p>DNSmasq服务的租期信息存储在<code>/var/lib/dnsmasq/dnsmasq.leases</code>这个文件。如果这个租约需要被更快地移除，您可以停止DNSmasq服务，从dnsmasq.leases文件中移除这个租约，然后再启动这个服务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ /etc/init.d/dnsmasq stop</div><div class="line">$ vim /var/lib/dnsmasq/dnsmasq.leases</div><div class="line"># 删除对应的租约信息</div><div class="line">1400240493 00:0c:29:5e:f2:6f 192.168.1.143 os02 *</div><div class="line">1400240498 00:0c:29:15:63:cf 192.168.1.52 os01 *</div><div class="line">$ /etc/init.d/dnsmasq restart</div></pre></td></tr></table></figure>
<ul>
<li>确保网络接口配置使用dhcp方式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/sysconfig/network-scripts/ifcfg-eth1</div><div class="line">DEVICE=&quot;eth1&quot;</div><div class="line">BOOTPROTO=dhcp</div><div class="line">IPV6INIT=no</div><div class="line">NM_CONTROLLED=no</div><div class="line">ONBOOT=&quot;yes&quot;</div><div class="line">TYPE=&quot;Ethernet&quot;</div></pre></td></tr></table></figure>
<ul>
<li>重启网络服务</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ service network restart</div><div class="line">Shutting down interface eth0:                              [  OK  ]</div><div class="line">Shutting down loopback interface:                          [  OK  ]</div><div class="line">Bringing up loopback interface:                            [  OK  ]</div><div class="line">Bringing up interface eth0:  </div><div class="line">Determining IP information for eth1... done.               [  OK  ]</div></pre></td></tr></table></figure>
<ul>
<li>检查IP地址                                                           </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ ifconfig</div><div class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:15:63:CF  </div><div class="line">          inet addr:192.168.1.202  Bcast:192.168.1.255  Mask:255.255.255.0</div><div class="line">          inet6 addr: fe80::20c:29ff:fe15:63d9/64 Scope:Link</div><div class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</div><div class="line">          RX packets:251 errors:0 dropped:0 overruns:0 frame:0</div><div class="line">          TX packets:43 errors:0 dropped:0 overruns:0 carrier:0</div><div class="line">          collisions:0 txqueuelen:1000 </div><div class="line">          RX bytes:36077 (35.2 KiB)  TX bytes:4598 (4.4 KiB)</div><div class="line">......</div></pre></td></tr></table></figure>
<ul>
<li>检查默认路由</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ route -n</div><div class="line">Kernel IP routing table</div><div class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</div><div class="line">192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 eth1</div><div class="line">169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth1</div><div class="line">0.0.0.0         192.168.1.1     0.0.0.0         UG    0      0        0 eth1</div></pre></td></tr></table></figure>
<p><strong>参考文档</strong></p>
<p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://debugo.com/dnsmasq/" target="_blank" rel="external">http://debugo.com/dnsmasq/</a><br><a href="http://hzcsky.blog.51cto.com/1560073/476324" target="_blank" rel="external">http://hzcsky.blog.51cto.com/1560073/476324</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[利用Dnsmasq部署DNS服务]]></title>
      <url>http://www.hi-linux.com/posts/30947.html</url>
      <content type="html"><![CDATA[<p>Dnsmasq提供DNS缓存和DHCP服务、Tftp服务功能。作为域名解析服务器(DNS)，Dnsmasq可以通过缓存DNS请求来提高对访问过的网址的连接速度。作为DHCP服务器，Dnsmasq可以为局域网电脑提供内网ip地址和路由。DNS和DHCP两个功能可以同时或分别单独实现。Dnsmasq轻量且易配置，适用于个人用户或少于50台主机的网络。此外它还自带了一个PXE服务器。</p>
<p><strong>Dnsmasq工作原理</strong></p>
<p>当接受到一个DNS请求时，Dnsmasq首先会查找<code>/etc/hosts</code>这个文件，然后查找<code>/etc/resolv.con</code>f中定义的外部DNS。所以说Dnsmasq是一个很不错的外部DNS中继。</p>
<p>配置Dnsmasq为DNS缓存服务器，同时在<code>/etc/hosts</code>文件中加入本地内网解析，这样一来每当内网机器查询时就会优先查询hosts文件，这就等于将<code>/etc/hosts</code>共享给全内网机器使用，从而解决内网机器互相识别的问题。相比逐台机器编辑hosts文件或者添加Bind DNS记录，仅编辑一个hosts文件，这简直太容易了。</p>
<a id="more"></a>
<h3 id="安装Dnsmasq"><a href="#安装Dnsmasq" class="headerlink" title="安装Dnsmasq"></a>安装Dnsmasq</h3><ul>
<li>Ubuntu/Debian</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apt-get install dnsmasq</div></pre></td></tr></table></figure>
<ul>
<li>Centos/RHEL</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install dnsmasq</div></pre></td></tr></table></figure>
<h3 id="配置Dnsmasq"><a href="#配置Dnsmasq" class="headerlink" title="配置Dnsmasq"></a>配置Dnsmasq</h3><p>Dnsmasq处理DNS设置与BIND等其他DNS服务有所不同。所有的配置都在一个文件中完成<code>/etc/dnsmasq.conf</code>。默认情况下dnsmasq.conf中只开启了最后include项，可以在<code>/etc/dnsmasq.d</code>中自己写任意名字的配置文件。</p>
<h4 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h4><p>Dnsmasq配置文件是<code>/etc/dnsmasq.conf</code>，下面对Dnsmasq中和DNS相关的配置项进行说明。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line">用指定的端口代替默认的DNS 53端口，如果设置为0，则完全禁止DNS功能，只使用dhcp服务</div><div class="line">port=5353</div><div class="line"></div><div class="line">以下两个参数告诉Dnsmasq过滤一些查询：1.哪些公共DNS没有回答 2.哪些root根域不可达。</div><div class="line"></div><div class="line">从不转发格式错误的域名</div><div class="line">#domain-needed</div><div class="line"></div><div class="line">从不转发不在路由地址中的域名</div><div class="line">#bogus-priv</div><div class="line"></div><div class="line">resolv-file配置Dnsmasq额外的向流的DNS服务器，如果不开启就使用linux主机默认的/etc/resolv.conf里的nameserver，通过下面的选项指定其他文件。</div><div class="line">resolv-file=/etc/dnsmasq.d/upstream_dns.conf</div><div class="line"></div><div class="line">默认情况下Dnsmasq会发送查询到它的任何上游DNS服务器上，如果取消注释，则Dnsmasq则会严格按照/etc/resolv.conf中的DNS Server顺序进行查询。</div><div class="line">#strict-order</div><div class="line"></div><div class="line">以下两个参数控制是否通过/etc/resolv.conf确定上游服务器，是否检测/etc/resolv.conf的变化，则取消注释。 </div><div class="line"></div><div class="line">如果你不想Dnsmasq读取/etc/resolv.conf文件或者其他文件，获得它的servers</div><div class="line"># If you don&apos;t want dnsmasq to read /etc/resolv.conf or any other</div><div class="line"># file, getting its servers from this file instead (see below), then</div><div class="line"># uncomment this.</div><div class="line">#no-resolv</div><div class="line"></div><div class="line">如果你不允许Dnsmasq通过轮询/etc/resolv.conf或者其他文件来获取配置的改变，则取消注释。 </div><div class="line">#no-poll</div><div class="line"></div><div class="line">增加一个name server，一般用于内网域名</div><div class="line">#server=/localnet/192.168.0.1</div><div class="line"></div><div class="line">设置一个反向解析，所有192.168.3.0/24的地址都到10.1.2.3去解析</div><div class="line">#server=/3.168.192.in-addr.arpa/10.1.2.3</div><div class="line"></div><div class="line">增加一个本地域名，会在/etc/hosts中进行查询</div><div class="line">#local=/localnet/</div><div class="line"></div><div class="line">增加一个域名，强制解析到你指定的地址上</div><div class="line">#address=/double-click.net/127.0.0.1</div><div class="line"></div><div class="line">同上，还支持ipv6</div><div class="line">#address=/www.thekelleys.org.uk/fe80::20d:60ff:fe36:f83</div><div class="line"></div><div class="line">增加查询yahoo google和它们的子域名到vpn、search查找</div><div class="line"># Add the IPs of all queries to yahoo.com, google.com, and their</div><div class="line"># subdomains to the vpn and search ipsets:</div><div class="line">#ipset=/yahoo.com/google.com/vpn,search</div><div class="line"></div><div class="line">你还可以控制Dnsmasq和Server之间的查询从哪个网卡出去</div><div class="line"># server=10.1.2.3@eth1</div><div class="line"></div><div class="line">指定源地址携带10.1.2.3地址和192.168.1.1的55端口进行通讯</div><div class="line"># and this sets the source (ie local) address used to talk to</div><div class="line"># 10.1.2.3 to 192.168.1.1 port 55 (there must be a interface with that</div><div class="line"># IP on the machine, obviously).</div><div class="line"># server=10.1.2.3@192.168.1.1#55</div><div class="line"></div><div class="line">改变Dnsmasq默认的uid和gid</div><div class="line">#user=</div><div class="line">#group=</div><div class="line"></div><div class="line">如果你想Dnsmasq监听某个端口为dhcp、dns提供服务</div><div class="line">#interface=</div><div class="line"></div><div class="line">你还可以指定哪个端口你不想监听</div><div class="line">#except-interface=</div><div class="line"></div><div class="line">设置想监听的地址，如果你本机要使用写上127.0.0.1。</div><div class="line">#listen-address=</div><div class="line"></div><div class="line"></div><div class="line">如果你想在某个端口只提供dns服务，则可以进行配置禁止dhcp服务</div><div class="line">#no-dhcp-interface=</div><div class="line"></div><div class="line"># On systems which support it, dnsmasq binds the wildcard address,</div><div class="line"># even when it is listening on only some interfaces. It then discards</div><div class="line"># requests that it shouldn&apos;t reply to. This has the advantage of</div><div class="line"># working even when interfaces come and go and change address. If you</div><div class="line"># want dnsmasq to really bind only the interfaces it is listening on,</div><div class="line"># uncomment this option. About the only time you may need this is when</div><div class="line"># running another nameserver on the same machine.</div><div class="line">#bind-interfaces</div><div class="line"></div><div class="line">如果你不想使用/etc/hosts，则取消下面的注释</div><div class="line">#no-hosts</div><div class="line"></div><div class="line">如果你项读取其他类似/etc/hosts文件，则进行配置</div><div class="line">addn-hosts=/etc/banner_add_hosts</div><div class="line"></div><div class="line">自动的给hosts中的name增加一个域名</div><div class="line">#expand-hosts</div><div class="line"></div><div class="line">给dhcp服务赋予一个域名</div><div class="line">#domain=thekelleys.org.uk</div><div class="line"></div><div class="line">给dhcp的一个子域赋予一个不同的域名</div><div class="line">#domain=wireless.thekelleys.org.uk,192.168.2.0/24</div><div class="line"></div><div class="line">同上，不过子域是一个范围</div><div class="line">#domain=reserved.thekelleys.org.uk,192.68.3.100,192.168.3.200</div><div class="line"></div><div class="line">dhcp分发ip的范围，以及每个ip的租约时间</div><div class="line">#dhcp-range=192.168.0.50,192.168.0.150,12h</div><div class="line"></div><div class="line">同上，不过给出了掩码</div><div class="line">#dhcp-range=192.168.0.50,192.168.0.150,255.255.255.0,12h</div><div class="line"></div><div class="line">自动加载conf-dir目录下的配置文件</div><div class="line">conf-dir=/etc/dnsmasq.d</div><div class="line">  </div><div class="line">设置dns缓存大小,默认为150条</div><div class="line">cache-size=150</div></pre></td></tr></table></figure>
<h4 id="配置实例"><a href="#配置实例" class="headerlink" title="配置实例"></a>配置实例</h4><h5 id="配置上游服务器地址"><a href="#配置上游服务器地址" class="headerlink" title="配置上游服务器地址"></a>配置上游服务器地址</h5><p>resolv-file配置Dnsmasq额外的上游的DNS服务器，如果不开启就使用Linux主机默认的<code>/etc/resolv.conf</code>里的nameserver。</p>
<ul>
<li>通过下面的选项指定其他文件来管理上游的DNS服务器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/dnsmasq.conf</div><div class="line"></div><div class="line">resolv-file=/etc/resolv.dnsmasq.conf</div></pre></td></tr></table></figure>
<ul>
<li>在指定文件中增加转发DNS的地址</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/resolv.dnsmasq.conf</div><div class="line"></div><div class="line">nameserver 8.8.8.8</div><div class="line">nameserver 8.8.4.4</div></pre></td></tr></table></figure>
<h5 id="本地启用Dnsmasq解析"><a href="#本地启用Dnsmasq解析" class="headerlink" title="本地启用Dnsmasq解析"></a>本地启用Dnsmasq解析</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/resolv.conf</div><div class="line"></div><div class="line">nameserver 127.0.0.1</div></pre></td></tr></table></figure>
<h5 id="添加解析记录"><a href="#添加解析记录" class="headerlink" title="添加解析记录"></a>添加解析记录</h5><ul>
<li>使用系统默认hosts</li>
</ul>
<p>编辑hosts文件,简单列举一下格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/hosts</div><div class="line"></div><div class="line">127.0.0.1  localhost </div><div class="line">192.168.101.107   web01.mike.com web01</div><div class="line">192.168.101.107   web02.mike.com web02</div></pre></td></tr></table></figure>
<p>hosts文件的强大之处还在于能够劫持解析，譬如mirror.centos.org是CentOS仓库所在，几乎是机器正常必访问一个域名，我将它解析成一个内网地址，搭建一个内网镜像站，不仅内网机器也可以及时得到安全更新，每月还可以节省很多流量。</p>
<ul>
<li>使用自定义hosts文件</li>
</ul>
<p>修改配置，增加自定义hosts文件位置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/dnsmasq.conf</div><div class="line"></div><div class="line">addn-hosts=/etc/dnsmasq.hosts</div></pre></td></tr></table></figure>
<p>在/etc/dnsmasq.hosts文件中添加DNS记录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/dnsmasq.hosts</div><div class="line"></div><div class="line">192.168.101.107   web01.mike.com    web01 </div><div class="line">192.168.101.107   web02.mike.com    web02</div></pre></td></tr></table></figure>
<ul>
<li>使用自定义conf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/dnsmasq.d/address.conf</div><div class="line"></div><div class="line"># 指定dnsmasq默认查询的上游服务器，此处以Google Public DNS为例。</div><div class="line">server=8.8.8.8</div><div class="line">server=8.8.4.4</div><div class="line"></div><div class="line"># 把所有.cn的域名全部通过114.114.114.114这台国内DNS服务器来解析</div><div class="line">server=/cn/114.114.114.114</div><div class="line"></div><div class="line"># 给*.apple.com和taobao.com使用专用的DNS</div><div class="line">server=/taobao.com/223.5.5.5</div><div class="line">server=/.apple.com/223.5.5.5</div><div class="line"></div><div class="line"># 把www.hi-linux.com解析到特定的IP</div><div class="line">address=/www.hi-linux.com/192.168.101.107</div><div class="line"></div><div class="line">在这里hi-linux.com相当于*.mike.com泛解析</div><div class="line">address=/hi-linux.com/192.168.101.107</div></pre></td></tr></table></figure>
<p>注：也可以直接添加到/etc/dnsmasq.conf中,不过/etc/dnsmasq.d/*.conf的优先级大于/etc/dnsmasq.conf。</p>
<h3 id="修改iptables配置"><a href="#修改iptables配置" class="headerlink" title="修改iptables配置"></a>修改iptables配置</h3><ul>
<li>允许本机的53端口可对外访问</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ iptables -A INPUT -p udp -m udp --dport 53 -j ACCEPT</div><div class="line">$ iptables -A INPUT -p tcp -m tcp --dport 53 -j ACCEPT</div></pre></td></tr></table></figure>
<ul>
<li>转发DNS请求</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 开启流量转发功能</div><div class="line">$ echo &apos;1&apos; &gt; /proc/sys/net/ipv4/ip_forward</div><div class="line">$ echo &apos;1&apos; &gt; /proc/sys/net/ipv6/ip_forward   # IPv6 用户选用</div><div class="line"></div><div class="line"># 添加流量转发规则，将外部到53的端口的请求映射到Dnsmasq服务器的53端口</div><div class="line">$ iptables -t nat -A PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 53</div><div class="line">$ iptables -t nat -A PREROUTING -p tcp --dport 53 -j REDIRECT --to-ports 53</div><div class="line"></div><div class="line"># 如果要限制只允许内网的请求，方法如下</div><div class="line">$ iptables -t nat -A PREROUTING -i eth1 -p upd --dport 53 -j REDIRECT --to-port 53</div></pre></td></tr></table></figure>
<ul>
<li>保存规则并重启</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ service iptables save</div><div class="line">$ service iptables restart</div></pre></td></tr></table></figure>
<h3 id="测试Dnsmasq"><a href="#测试Dnsmasq" class="headerlink" title="测试Dnsmasq"></a>测试Dnsmasq</h3><ul>
<li>启动Dnsmasq</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ service dnsmasq start</div></pre></td></tr></table></figure>
<ul>
<li>测试Dnsmasq</li>
</ul>
<p>将其他机器的DNS换成dnsmasq所在的IP即可，就这么容易。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ dig @192.168.101.104 www.hi-linux.com</div></pre></td></tr></table></figure>
<h3 id="一些Dnsmasq技巧"><a href="#一些Dnsmasq技巧" class="headerlink" title="一些Dnsmasq技巧"></a>一些Dnsmasq技巧</h3><h4 id="Dnsmasq性能优化"><a href="#Dnsmasq性能优化" class="headerlink" title="Dnsmasq性能优化"></a>Dnsmasq性能优化</h4><p>我们都知道Bind不配合数据库的情况下，经常需要重新载入并读取配置文件，这是造成性能低下的原因。根据这点教训，我们可以考虑不读取<code>/etc/hosts</code>文件。而是另外指定一个在共享内存里的文件，比如<code>/dev/shm/dnsrecord.txt</code> ，这样就不费劲了，又由于内存的非持久性，重启就消失，可以定期同步硬盘上的某个内容到内存文件中。</p>
<p>具体实现步骤</p>
<ul>
<li>配置dnsmasq</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/dnsmasq.conf</div><div class="line"> </div><div class="line">no-hosts </div><div class="line">addn-hosts=/dev/shm/dnsrecord.txt</div></pre></td></tr></table></figure>
<ul>
<li>解决同步问题</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 开机启动</div><div class="line">$ echo &quot;cat /etc/hosts &gt; /dev/shm/dnsrecord.txt&quot; &gt;&gt;/etc/rc.local </div><div class="line"></div><div class="line"># 定时同步内容</div><div class="line">$ crontab -e </div><div class="line">*/10 * * * * cat /etc/hosts &gt; /dev/shm/dnsrecord.txt</div></pre></td></tr></table></figure>
<h4 id="Dnsmasq选择最快的上游DNS服务器"><a href="#Dnsmasq选择最快的上游DNS服务器" class="headerlink" title="Dnsmasq选择最快的上游DNS服务器"></a>Dnsmasq选择最快的上游DNS服务器</h4><p>经常会有这样的情景，Dnsmasq服务器配了一堆上游服务器，转发本地的dns请求，缺省是Dnsmasq事实上是只挑了一个上游dns服务器来查询并转发结果，这样如果选错服务器的话会导致DNS响应变慢。</p>
<p>解决方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/dnsmasq.conf</div><div class="line"></div><div class="line">all-servers  </div><div class="line">server=8.8.8.8  </div><div class="line">server=219.141.136.10</div></pre></td></tr></table></figure>
<p>all-servers表示对以下设置的所有server发起查询，选择回应最快的一条作为查询结果返回。<br>上面我们设置了两个dns server，8.8.8.8(谷歌dns)和219.141.136.10(移动的dns)，会同时查询这两个服务器，询问dns地址谁返回快就采用谁的结果。</p>
<h4 id="dnsmasq-china-list项目"><a href="#dnsmasq-china-list项目" class="headerlink" title="dnsmasq-china-list项目"></a>dnsmasq-china-list项目</h4><p>dnsmasq-china-list项目维护了一张国内常用但是通过国外DNS会解析错误的网站域名的列表，保证List中的国内域名全部走国内DNS服务器解析。</p>
<p>项目地址: <a href="https://github.com/felixonmars/dnsmasq-china-list" target="_blank" rel="external">https://github.com/felixonmars/dnsmasq-china-list</a></p>
<p>dnsmasq-china-list使用</p>
<ul>
<li>取消dnsmasq.conf里conf-dir=/etc/dnsmasq.d这一行的注释</li>
<li>获取项目文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/felixonmars/dnsmasq-china-list.git</div></pre></td></tr></table></figure>
<ul>
<li>将accelerated-domains.china.conf, bogus-nxdomain.china.conf,google.china.conf(可选)放到/etc/dnsmasq.d/目录下(如目录不存在则建立一个)。</li>
<li>将<code>dnsmasq-update-china-list</code>放到<code>/usr/bin/</code>，这是一个批量修改DNS服务器的工具(可选)。</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://purplegrape.blog.51cto.com/1330104/1083354" target="_blank" rel="external">http://purplegrape.blog.51cto.com/1330104/1083354</a><br><a href="https://i-meto.com/archives/iptables_PREROUTING.html" target="_blank" rel="external">https://i-meto.com/archives/iptables_PREROUTING.html</a><br><a href="http://blog.itphp.org/archives/225" target="_blank" rel="external">http://blog.itphp.org/archives/225</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[VSftpd安装和配置FTP虚拟用户实践]]></title>
      <url>http://www.hi-linux.com/posts/12477.html</url>
      <content type="html"><![CDATA[<p>VSftpd英文全称(Very Secure File Transfer Protocol Deamon)，正如VSftpd官方宣传中所说<code>Probably the most secure and fastest FTP server for UNIX-like systems</code>。我相信这是大多数人选择VSftpd来搭建Linux的FTP服务器的原因，当然ProFTPD用的人应该也不在少数。本文将以清晰直观的方式介绍安装VSftpd以及配置FTP虚拟用户的过程，希望对大家有帮助。</p>
<h3 id="安装VSftpd及相关组件"><a href="#安装VSftpd及相关组件" class="headerlink" title="安装VSftpd及相关组件"></a>安装VSftpd及相关组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum -y install vsftpd* pam* db4* ftp</div></pre></td></tr></table></figure>
<h3 id="修改FTP相关帐户"><a href="#修改FTP相关帐户" class="headerlink" title="修改FTP相关帐户"></a>修改FTP相关帐户</h3><ul>
<li>VSftpd服务的宿主用户</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ useradd vsftpd -s /sbin/nologin</div></pre></td></tr></table></figure>
<p>默认的VSftpd的服务宿主用户是root，但是这不符合安全性的需要。这里建立名字为vsftpd的用户，用他来作为支持VSftpd的服务宿主用户。由于该用户仅用来支持VSftpd服务用，因此没有许可他登陆系统的必要，并设定他为不能登陆系统的用户。</p>
<a id="more"></a>
<ul>
<li>VSftpd的虚拟宿主用户</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ useradd virtual -d /home/ftpdata/ -s /sbin/nologin</div><div class="line">$ chown -R virtual:virtual /home/ftpdata/</div></pre></td></tr></table></figure>
<p>VSftpd的虚拟用户并不是系统用户，也就是说这些FTP的用户在系统中是不存在的。他们的总体权限其实是集中寄托在一个在系统中的某一个用户身上的，所谓VSftpd的虚拟宿主用户，就是这样一个支持着所有虚拟用户的宿主用户。由于他支撑了FTP的所有虚拟的用户，那么他本身的权限将会影响着这些虚拟的用户，因此出于安全性的考虑，也要非常注意对该用户的权限的控制，该用户也绝对没有登陆系统的必要，这里也设定他为不能登陆系统的用户。</p>
<h3 id="vsftpd-conf基本配置"><a href="#vsftpd-conf基本配置" class="headerlink" title="vsftpd.conf基本配置"></a>vsftpd.conf基本配置</h3><ul>
<li>一些基本配置选项说明</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div></pre></td><td class="code"><pre><div class="line">anonymous_enable=YES|NO </div><div class="line">控制是否允许匿名用户登录，YES允许，NO不允许，默认值为YES。 </div><div class="line"></div><div class="line">ftp_username= username</div><div class="line">匿名用户所使用的系统用户名。默认下，此参数在配置文件中不出现，值为ftp</div><div class="line"></div><div class="line">no_anon_password=YES|NO </div><div class="line">控制匿名用户登入时是否需要密码，YES不需要，NO需要。默认值为NO。 </div><div class="line"></div><div class="line">anon_root=path</div><div class="line">设定匿名用户的根目录，即匿名用户登入后，被定位到此目录下。主配置文件中默认无此项，默认值为/var/ftp/。 </div><div class="line"></div><div class="line">anon_world_readable_only=YES|NO</div><div class="line">控制是否只允许匿名用户下载可阅读文档。YES，只允许匿名用户下载可阅读的文件。NO，允许匿名用户浏览整个服务器的文件系统。默认值为YES。 </div><div class="line"></div><div class="line">anon_upload_enable=YES|NO </div><div class="line">控制是否允许匿名用户上传文件，YES允许，NO不允许，默认是不设值，即为NO。除了这个参数外，匿名用户要能上传文件，还需要两个条件：一，write_enable参数为YES;二，在文件系统上，FTP匿名用户对某个目录有写权限。 </div><div class="line">anon_mkdir_write_enable=YES|NO </div><div class="line">控制是否允许匿名用户创建新目录，YES允许，NO不允许，默认是不设值，即为NO。当然在文件系统上，FTP匿名用户必需对新目录的上层目录拥有写权限。 </div><div class="line"></div><div class="line">anon_other_write_enable=YES|NO </div><div class="line">控制匿名用户是否拥有除了上传和新建目录之外的其他权限，如删除、更名等。YES拥有，NO不拥有，默认值为NO。 </div><div class="line"></div><div class="line">chown_uploads=YES|NO </div><div class="line">是否修改匿名用户所上传文件的所有权。YES，匿名用户所上传的文件的所有权将改为另外一个不同的用户所有，用户由chown_username参数指定。此选项默认值为NO。 </div><div class="line"></div><div class="line">chown_username=whoever</div><div class="line">指定拥有匿名用户上传文件所有权的用户</div><div class="line"></div><div class="line">local_enable=YES|NO </div><div class="line">控制vsftpd所在的系统的用户是否可以登录vsftpd。默认值为YES。 </div><div class="line"></div><div class="line">local_root= </div><div class="line">定义所有本地用户的根目录。当本地用户登入时，将被更换到此目录下。默认值为无。 </div><div class="line"></div><div class="line">user_config_dir= </div><div class="line">定义用户个人配置文件所在的目录。用户的个人配置文件为该目录下的同名文件</div><div class="line"></div><div class="line">chroot_list_enable=YES|NO </div><div class="line">锁定某些用户在自家目录中。即当这些用户登录后，不可以转到系统的其他目录，只能在自家目录(及其子目录)下。具体的用户在chroot_list_file参数所指定的文件中列出。默认值为NO。 </div><div class="line"></div><div class="line">chroot_list_file=/etc/vsftpd/chroot_list </div><div class="line">指出被锁定在自家目录中的用户的列表文件。文件格式为一行一用户。通常该文件是/etc/vsftpd/chroot_list。此选项默认不设置。 </div><div class="line"></div><div class="line">chroot_local_users=YES|NO </div><div class="line">将本地用户锁定在自家目录中。当此项被激活时，chroot_list_enable和chroot_local_users参数的作用将发生变化，chroot_list_file所指定文件中的用户将不被锁定在自家目录。本参数被激活后，可能带来安全上的冲突，特别是当用户拥有上传、shell访问等权限时。因此，只有在确实了解的情况下，才可以打开此参数。默认值为NO。 </div><div class="line"></div><div class="line">passwd_chroot_enable =YES|NO</div><div class="line">当此选项激活时，与chroot_local_user选项配合，chroot()容器的位置可以在每个用户的基础上指定。每个用户的容器来源于/etc/passwd中每个用户的自家目录字段。默认值为NO。</div><div class="line"></div><div class="line">listen_address=ip address </div><div class="line">定义了在主机的哪个IP地址上监听FTP请求</div><div class="line"></div><div class="line">listen_port=port_value  </div><div class="line">指定FTP服务器监听的端口号(控制端口)，默认值为21。此选项在standalone模式下生效</div><div class="line"></div><div class="line">port_enable=YES|NO</div><div class="line">指定数据连接时模式，默认值为YES（PORT模式，NO为PASV模式）</div><div class="line"></div><div class="line">connect_from_port_20=YES|NO</div><div class="line">控制以PORT模式进行数据传输时是否使用20端口(ftp-data）</div><div class="line"></div><div class="line">ftp_data_port=port number </div><div class="line">设定ftp数据传输端口(ftp-data)值。默认值为20。此参数用于PORT FTP模式。 </div><div class="line"></div><div class="line">pasv_enable=YES|NO</div><div class="line">YES，允许数据传输时使用PASV模式。NO，不允许使用PASV模式。默认值为YES。</div><div class="line"></div><div class="line">pasv_min_port=port number</div><div class="line">pasv_max_port=port number</div><div class="line">设定在PASV模式下，建立数据传输所可以使用port范围的下界和上界，0 表    示任意。默认值为0。把端口范围设在比较高的一段范围内，比如50000-60000，将有助于安全性的提高</div><div class="line"></div><div class="line">pasv_address= ip address</div><div class="line">此选项为一个数字IP地址，作为PASV命令的响应。默认值为none，即地址是从呼入的连接套接字(incoming connectd socket)中获取。</div><div class="line"></div><div class="line">ascii_upload_enable=YES|NO</div><div class="line">控制是否允许使用ascii模式上传文件，YES允许，NO不允许，默认为NO </div><div class="line"></div><div class="line">ascii_download_enable=YES|NO</div><div class="line">控制是否允许使用ascii模式下载文件，YES允许，NO不允许，默认为NO。</div><div class="line"></div><div class="line">idle_session_timeout= numerical value</div><div class="line">空闲用户会话的超时时间，若是超出这时间没有数据的传送或是指令的输入，则会强迫断线。单位为秒，默认值为300。</div><div class="line"></div><div class="line">data_connection_timeout= numerical value</div><div class="line">空闲的数据连接的超时时间。默认值为300 秒。</div><div class="line"></div><div class="line">accept_timeout=numerical value </div><div class="line">接受建立联机的超时设定，单位为秒。默认值为60。</div><div class="line"></div><div class="line">connect_timeout=numerical value</div><div class="line">响应PORT方式的数据联机的超时设定，单位为秒。默认值为60</div><div class="line"></div><div class="line">max_clients=numerical value </div><div class="line">此参数在VSFTPD使用单独(standalone)模式下有效。此参数定义了FTP服务器最大的并发连接数，当超过此连接数时，服务器拒绝客户端连接。默认值为0，表示不限最大连接数。</div><div class="line"></div><div class="line">max_per_ip=numerical value </div><div class="line">此参数在VSFTPD使用单独(standalone)模式下有效。此参数定义每个IP地址最大的并发连接数目。超过这个数目将会拒绝连接。此选项的设置将影响到象网际快车这类的多进程下载软件。默认值为0，表示不限制。 </div><div class="line"></div><div class="line">anon_max_rate=value </div><div class="line">设定匿名用户的最大数据传输速度value，以Bytes/s为单位。默认无。 </div><div class="line"></div><div class="line">local_max_rate=value </div><div class="line">设定用户的最大数据传输速度value，以Bytes/s为单位。默认无。</div><div class="line"></div><div class="line">write_enable=YES</div><div class="line">设定允许进行写操作(上传、删除)，默认为YES，可选值【yes,no】</div><div class="line"></div><div class="line">local_umask=022</div><div class="line">设定权限掩码，默认022，对应的文件上传权限644、目录权限755</div><div class="line"></div><div class="line">dirmessage_enable=YES</div><div class="line">设定开启目录标语功能</div><div class="line"></div><div class="line">xferlog_enable=YES</div><div class="line">设定开启日志记录功能</div><div class="line"></div><div class="line">xferlog_file=/var/log/ftp/vsftpd.log</div><div class="line">设置日志目录</div><div class="line"></div><div class="line">xferlog_std_format=YES</div><div class="line">设定日志使用标准的记录格式</div><div class="line"></div><div class="line">nopriv_user=vsftpd</div><div class="line">设定支撑Vsftpd服务的宿主用户为手动建立的Vsftpd用户。注意，一旦做出更改宿主用户后，必须注意一起与该服务相关的读写文件的读写赋权问题。比如日志文件就必须给与该用户写入权限等。</div><div class="line"></div><div class="line">async_abor_enable=YES</div><div class="line">设定支持异步传输功能。</div><div class="line"></div><div class="line">ftpd_banner=This Vsftp server supports virtual users ^_^</div><div class="line">设定Vsftpd的登陆标语。</div><div class="line"></div><div class="line">deny_email_enable=YES</div><div class="line">可将某些特殊的 email address 抵挡住。如果以anonymous 登录服务器时，会要求输入密码，也就是您的email address, 如果很讨厌某些email address ，就可以使用此设定来取消他的登录权限，但必须与下面的设置项配合</div><div class="line"></div><div class="line">banned_email_file=/etc/vsftpd/banned_emails</div><div class="line">当上面的 deny_email_enable=YES 时，可以利用这个设定项来规定那个email address 不可登录vsftpd 服务器，此文件需用户自己创建，一行一个email address 即可！</div><div class="line"></div><div class="line">ls_recurse_enable=YES</div><div class="line">是否允许递归查询 ， 大型站点的 FTP 服务器启用此项可以方便远程用户查询</div><div class="line"></div><div class="line">chroot_local_user=YES</div><div class="line"></div><div class="line">listen=YES</div><div class="line">如果设置为 YES ， 则 vsftpd 将以独立模式运行，由vsftpd 自己监听和处理连接请求</div><div class="line"></div><div class="line">listen_ipv6=YES</div><div class="line">设定是否支持IPV6</div><div class="line"></div><div class="line">pam_service_name=vsftpd</div><div class="line">设置 PAM 外挂模块提供的认证服务所使用的配置文件名 ，即/etc/pam.d/vsftpd 文件，此文件中file=/etc/vsftpd/ftpusers 字段，说明了PAM 模块能抵挡的帐号内容来自文件/etc/vsftpd/ftpusers 中</div><div class="line"></div><div class="line">userlist_enable=YES/NO</div><div class="line">此选项默认值为NO , 此时ftpusers 文件中的用户禁止登录FTP 服务器；若此项设为YES ，则 user_list 文件中的用户允许登录 FTP 服务器，而如果同时设置了 userlist_deny=YES ，则 user_list 文件中的用户将不允许登录FTP 服务器，甚至连输入密码提示信息都没有，直接被FTP 服务器拒绝</div><div class="line"></div><div class="line">userlist_deny=YES/NO</div><div class="line">此项默认为YES ，设置是否阻扯user_list 文件中的用户登录FTP 服务器</div><div class="line"></div><div class="line">tcp_wrappers=YES</div><div class="line">表明服务器使用 tcp_wrappers 作为主机访问控制方式，tcp_wrappers 可以实现linux 系统中网络服务的基于主机地址的访问控制，在/etc 目录中的hosts.allow 和hosts.deny 两个文件用于设置tcp_wrappers 的访问控制，前者设置允许访问记录，后者设置拒绝访问记录。例如想限制某些主机对FTP 服务器192.168.57.2 的匿名访问，编缉/etc/hosts.allow 文件，如在下面增加两行命令：vsftpd:192.168.57.1:DENY 和vsftpd:192.168.57.9:DENY 表明限制IP 为192.168.57.1/192.168.57.9 主机访问IP 为192.168.57.2 的FTP 服务器，此时FTP 服务器虽可以PING 通，但无法连接</div></pre></td></tr></table></figure>
<ul>
<li>关于userlist_enable、userlist_deny的设置，ftpusers和user_list文件的区别</li>
</ul>
<blockquote>
<p>ftpusers：禁止user_list列表中的用户访问FTP<br>userlist_enable=YES，userlist_deny=YES，禁止user_list列表中的用户访FTP<br>userlist_enable=YES，userlist_deny=NO，只允许user_list列表中的用户FTP。<br>userlist_enable=NO，userlist_deny=YES，因设定userlist_enable=NO，忽略user_list文件，user_list不启作用<br>userlist_enable=NO，userlist_deny=NO，因设定userlist_enable=NO，忽略user_list文件，user_list不启作用<br>ftpusers禁止的优先级更高。假设ftpusers禁止woodie用户访问，userlist允许woodie用户访问，则在运行时，用户woodie不能访问ftp。</p>
</blockquote>
<ul>
<li>配置范例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/vsftpd/vsftpd.conf</div><div class="line"></div><div class="line"></div><div class="line"># Example config file /etc/vsftpd/vsftpd.conf</div><div class="line">#</div><div class="line"># The default compiled in settings are fairly paranoid. This sample file</div><div class="line"># loosens things up a bit, to make the ftp daemon more usable.</div><div class="line"># Please see vsftpd.conf.5 for all compiled in defaults.</div><div class="line">#</div><div class="line"># READ THIS: This example file is NOT an exhaustive list of vsftpd options.</div><div class="line"># Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd&apos;s</div><div class="line"># capabilities.</div><div class="line">#</div><div class="line"># Allow anonymous FTP? (Beware - allowed by default if you comment this out).</div><div class="line">anonymous_enable=NO</div><div class="line">#</div><div class="line"># Uncomment this to allow local users to log in.</div><div class="line">local_enable=YES</div><div class="line">#</div><div class="line"># Uncomment this to enable any form of FTP write command.</div><div class="line">write_enable=YES</div><div class="line">#</div><div class="line"># Default umask for local users is 077. You may wish to change this to 022,</div><div class="line"># if your users expect that (022 is used by most other ftpd&apos;s)</div><div class="line">local_umask=022</div><div class="line">#</div><div class="line"># Uncomment this to allow the anonymous FTP user to upload files. This only</div><div class="line"># has an effect if the above global write enable is activated. Also, you will</div><div class="line"># obviously need to create a directory writable by the FTP user.</div><div class="line">#anon_upload_enable=YES</div><div class="line">#</div><div class="line"># Uncomment this if you want the anonymous FTP user to be able to create</div><div class="line"># new directories.</div><div class="line">#anon_mkdir_write_enable=YES</div><div class="line">#</div><div class="line"># Activate directory messages - messages given to remote users when they</div><div class="line"># go into a certain directory.</div><div class="line">dirmessage_enable=YES</div><div class="line">#</div><div class="line"># The target log file can be vsftpd_log_file or xferlog_file.</div><div class="line"># This depends on setting xferlog_std_format parameter</div><div class="line">xferlog_enable=YES</div><div class="line">#</div><div class="line"># Make sure PORT transfer connections originate from port 20 (ftp-data).</div><div class="line">connect_from_port_20=YES</div><div class="line">#</div><div class="line"># If you want, you can arrange for uploaded anonymous files to be owned by</div><div class="line"># a different user. Note! Using &quot;root&quot; for uploaded files is not</div><div class="line"># recommended!</div><div class="line">#chown_uploads=YES</div><div class="line">#chown_username=whoever</div><div class="line">#</div><div class="line"># The name of log file when xferlog_enable=YES and xferlog_std_format=YES</div><div class="line"># WARNING - changing this filename affects /etc/logrotate.d/vsftpd.log</div><div class="line">#xferlog_file=/var/log/xferlog</div><div class="line">#</div><div class="line"># Switches between logging into vsftpd_log_file and xferlog_file files.</div><div class="line"># NO writes to vsftpd_log_file, YES to xferlog_file</div><div class="line">xferlog_std_format=YES</div><div class="line">#</div><div class="line"># You may change the default value for timing out an idle session.</div><div class="line">#idle_session_timeout=600</div><div class="line">#</div><div class="line"># You may change the default value for timing out a data connection.</div><div class="line">#data_connection_timeout=120</div><div class="line">#</div><div class="line"># It is recommended that you define on your system a unique user which the</div><div class="line"># ftp server can use as a totally isolated and unprivileged user.</div><div class="line">#nopriv_user=ftpsecure</div><div class="line">#</div><div class="line"># Enable this and the server will recognise asynchronous ABOR requests. Not</div><div class="line"># recommended for security (the code is non-trivial). Not enabling it,</div><div class="line"># however, may confuse older FTP clients.</div><div class="line">#async_abor_enable=YES</div><div class="line">#</div><div class="line"># By default the server will pretend to allow ASCII mode but in fact ignore</div><div class="line"># the request. Turn on the below options to have the server actually do ASCII</div><div class="line"># mangling on files when in ASCII mode.</div><div class="line"># Beware that on some FTP servers, ASCII support allows a denial of service</div><div class="line"># attack (DoS) via the command &quot;SIZE /big/file&quot; in ASCII mode. vsftpd</div><div class="line"># predicted this attack and has always been safe, reporting the size of the</div><div class="line"># raw file.</div><div class="line"># ASCII mangling is a horrible feature of the protocol.</div><div class="line">#ascii_upload_enable=YES</div><div class="line">#ascii_download_enable=YES</div><div class="line">#</div><div class="line"># You may fully customise the login banner string:</div><div class="line">#ftpd_banner=Welcome to blah FTP service.</div><div class="line">#</div><div class="line"># You may specify a file of disallowed anonymous e-mail addresses. Apparently</div><div class="line"># useful for combatting certain DoS attacks.</div><div class="line">#deny_email_enable=YES</div><div class="line"># (default follows)</div><div class="line">#banned_email_file=/etc/vsftpd/banned_emails</div><div class="line">#</div><div class="line"># You may specify an explicit list of local users to chroot() to their home</div><div class="line"># directory. If chroot_local_user is YES, then this list becomes a list of</div><div class="line"># users to NOT chroot().</div><div class="line">#chroot_list_enable=YES</div><div class="line"># (default follows)</div><div class="line">#chroot_list_file=/etc/vsftpd/chroot_list</div><div class="line">#</div><div class="line"># You may activate the &quot;-R&quot; option to the builtin ls. This is disabled by</div><div class="line"># default to avoid remote users being able to cause excessive I/O on large</div><div class="line"># sites. However, some broken FTP clients such as &quot;ncftp&quot; and &quot;mirror&quot; assume</div><div class="line"># the presence of the &quot;-R&quot; option, so there is a strong case for enabling it.</div><div class="line">#ls_recurse_enable=YES</div><div class="line">#</div><div class="line"># When &quot;listen&quot; directive is enabled, vsftpd runs in standalone mode and</div><div class="line"># listens on IPv4 sockets. This directive cannot be used in conjunction</div><div class="line"># with the listen_ipv6 directive.</div><div class="line">listen=YES</div><div class="line">#listen_port=56880</div><div class="line">pasv_min_port=30000</div><div class="line">pasv_max_port=35000</div><div class="line"></div><div class="line">#</div><div class="line"># This directive enables listening on IPv6 sockets. To listen on IPv4 and IPv6</div><div class="line"># sockets, you must run two copies of vsftpd whith two configuration files.</div><div class="line"># Make sure, that one of the listen options is commented !!</div><div class="line">#listen_ipv6=YES</div><div class="line"></div><div class="line">pam_service_name=vsftpd.vu</div><div class="line">#pam_service_name=vsftpd</div><div class="line">userlist_enable=YES</div><div class="line">tcp_wrappers=YES</div><div class="line"></div><div class="line">chroot_local_user=YES</div><div class="line">guest_enable=YES</div><div class="line">guest_username=virtual</div><div class="line"></div><div class="line">virtual_use_local_privs=YES</div><div class="line">#reverse_lookup_enable=NO</div><div class="line">user_config_dir=/etc/vsftpd/vsftpd_user_conf</div></pre></td></tr></table></figure>
<h3 id="生成vsftpd虚拟用户数据库文件"><a href="#生成vsftpd虚拟用户数据库文件" class="headerlink" title="生成vsftpd虚拟用户数据库文件"></a>生成vsftpd虚拟用户数据库文件</h3><ul>
<li>建立虚拟用户名单文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/vsftpd/ftpuser.txt</div><div class="line"></div><div class="line">ftpupload</div><div class="line">12345678</div></pre></td></tr></table></figure>
<p>格式很简单：”一行用户名，一行密码！”。</p>
<ul>
<li>生成虚拟用户数据文件</li>
</ul>
<blockquote>
<p>db_load命令可以将用户文本信息文件转换为db数据库并使用hash加密。</p>
<p>选项-T允许应用程序能够将文本文件转译载入进数据库。由于我们之后是将虚拟用户的信息以文件方式存储在文件里的，为了让Vsftpd这个应用程序能够通过文本来载入用户数据，必须要使用这个选项。</p>
<p>指定了选项-T，那么一定要追加子选项-t ; 子选项-t，追加在在-T选项后，用来指定转译载入的数据库类型。hash就是使用hash码加密。</p>
<p>-f参数后面接包含用户名和密码的文本文件，文件的内容是:奇数行用户名、偶数行密码；</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ db_load -T -t hash -f /etc/vsftpd/ftpuser.txt /etc/vsftpd/vsftpd_login.db</div><div class="line">$ chmod 600 /etc/vsftpd/vsftpd_login.db</div></pre></td></tr></table></figure>
<ul>
<li>特别注意</li>
</ul>
<blockquote>
<p>如果要删除掉一个虚拟用户，先在ftpuser.txt中删除用户对应的用户名和密码，然后删除vsftpd_login.db,重新运行<code>db_load -T -t hash -f /etc/vsftpd/ftpuser.txt /etc/vsftpd/vsftpd_login.db</code></p>
<p>如果更改密码，更改文件内容后还需重新运行db_load就可以，并重启ftp服务使其生效。</p>
<p>如果要改变用户的其它配置，只需修改用户的配置文件。</p>
</blockquote>
<h3 id="配置PAM验证文件"><a href="#配置PAM验证文件" class="headerlink" title="配置PAM验证文件"></a>配置PAM验证文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/pam.d/vsftpd.vu</div></pre></td></tr></table></figure>
<p>将以下内容加入到文件最前面(在后面加入无效)</p>
<ul>
<li>32位系统</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">auth required /lib/security/pam_userdb.so db=/etc/vsftpd/vsftpd_login</div><div class="line">account required /lib/security/pam_userdb.so db=/etc/vsftpd/vsftpd_login</div></pre></td></tr></table></figure>
<ul>
<li>64位系统</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">auth required /lib64/security/pam_userdb.so db=/etc/vsftpd/vsftpd_login</div><div class="line">account required /lib64/security/pam_userdb.so db=/etc/vsftpd/vsftpd_login</div></pre></td></tr></table></figure>
<p>上一步建立的数据库vsftpd_login在此处被使用，建立的虚拟用户将采用PAM进行验证，这是通过<code>/etc/vsftpd/vsftpd.conf</code>文件中的语句<code>pam_service_name=vsftpd.vu</code>来启用的。</p>
<h3 id="VSftpd虚拟用户的独立配置"><a href="#VSftpd虚拟用户的独立配置" class="headerlink" title="VSftpd虚拟用户的独立配置"></a>VSftpd虚拟用户的独立配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p /etc/vsftpd/vsftpd_user_conf</div><div class="line">$ vim /etc/vsftpd/vsftpd_user_conf/ftpupload</div><div class="line"></div><div class="line">anon_world_readable_only=NO</div><div class="line">write_enable=YES</div><div class="line">anon_upload_enable=YES</div><div class="line">anon_mkdir_write_enable=YES</div><div class="line">anon_other_write_enable=YES</div><div class="line">local_root=/home/ftpdata/</div></pre></td></tr></table></figure>
<h3 id="VSftpd服务器之间的站点对传"><a href="#VSftpd服务器之间的站点对传" class="headerlink" title="VSftpd服务器之间的站点对传"></a>VSftpd服务器之间的站点对传</h3><p>有时候可能需要开启VSftpd服务器之间的站点对传功能，只需在主配置文件<code>/etc/vsftpd/vsftpd.conf</code>里加入如下参数即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pasv_promiscuous=YES</div><div class="line">port_promiscuous=YES</div></pre></td></tr></table></figure>
<p>说明</p>
<blockquote>
<p>port_promiscuous=YES|NO<br>默认值为NO。为YES时，取消PORT安全检查。该检查确保外出的数据只能连接到客户端上。小心打开此选项。</p>
<p>pasv_promiscuous=YES|NO<br>默认值为NO。为YES时，将关闭PASV模式的安全检查。该检查确保数据连接和控制连接是来自同一个IP地址。小心打开此选项。此选项唯一合理的用法是存在于由安全隧道方案构成的组织中。</p>
</blockquote>
<p>由于取消了数据包的安全检查，允许数据流向非客户端，所以站点对传成功。</p>
<p>配置修改完成后，重启vsftpd服务生效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /etc/init.d/vsftpd restart</div></pre></td></tr></table></figure>
<h3 id="VSftpd的一些配置技巧"><a href="#VSftpd的一些配置技巧" class="headerlink" title="VSftpd的一些配置技巧"></a>VSftpd的一些配置技巧</h3><ul>
<li>配置VSftpd服务器的日志功能</li>
</ul>
<p>VSftpd与log有关的选项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">vsftpd_log_file</div><div class="line">xferlog_enable</div><div class="line">xferlog_std_format</div><div class="line">xferlog_file</div><div class="line">dual_log_enable</div><div class="line">syslog_enable</div><div class="line">log_ftp_protocol</div><div class="line">no_log_lock</div></pre></td></tr></table></figure>
<p>这里主要要到下面几个参数控制</p>
<blockquote>
<p>log_ftp_protocol<br>如果启用, 假若选项xferlog_std_format没有启用, 所有的FTP请求和应答都会被记录。 此选项将对调试很有用。<br>默认: YES</p>
<p>dual_log_enable<br>如果启用, 将生成两个相似的日志文件, 默认在/var/log/xferlog和/var/log/vsftpd.log目录下。 前者是wu-ftpd类型的传输日志, 可以用于标准工具分析。 后者是vsftpd自己类型的日志。</p>
<p>xferlog_enable<br>如果启用, 将会维护一个日志文件, 用于详细记录上载和下载. 默认情况下, 这个日志文件是/var/log/vsftpd.log。 但是也可以通过配置文件中的vsftpd_log_file选项来指定。<br>默认: NO(但是在示例设置中启用了这个选项)</p>
<p>xferlog_std_format<br>如果启用, 传输日志文件将以标准xferlog的格式书写, 如同wu-ftpd一样. 这可以用于重新使用传输统计生成器. 然而, 默认格式更注重可读性。 此格式的日志文件默认为/var/log/xferlog, 但是您也可以通过xferlog_file选项来设定。<br>默认: NO</p>
<p>xferlog_file<br>xferlog 日志文件所在位置，默认为/var/log/xferlog。</p>
<p>vsftpd_log_file<br>指定VSFTPd日志文件位置，默认为/var/log/vsftpd.log，xferlog_enable的默认值为no(VSFTPd提供的配置文件模版将其值改为了yes)，dual_log_enable的默认值也为no，就是说默认情况下VSFTPd是不记录日志的。我们也可以将日志信息写入系统日志/var/log/messages中，使用如下参数：syslog_enable=yes/no</p>
</blockquote>
<p>配置VSftpd传输日志</p>
<p>将xferlog_file前面的#号对掉，也就是把VSftpd的Log功能打开，这样我们就能在/var/log目录下查看xferlog。这是VSftpd日志功能，这对于我们来说是极为重要的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">##################log settings###################</div><div class="line"># Activate logging of uploads/downloads.</div><div class="line">xferlog_enable=YES</div><div class="line">#</div><div class="line"># You may override where the log file goes if you like. The default is shown</div><div class="line"># below.</div><div class="line">xferlog_file=/var/log/xferlog</div><div class="line">#</div><div class="line">#log in two files /var/log/xferlog and /var/log/vsftpd.log</div><div class="line">dual_log_enable=YES</div><div class="line">vsftpd_log_file=/var/log/vsftpd.log</div><div class="line">#log time setting</div><div class="line">use_localtime=YES</div><div class="line">#</div><div class="line">###################end of log####################</div></pre></td></tr></table></figure>
<ul>
<li>配置VSftpd限制同一个IP地址的同时连接数量</li>
</ul>
<p>VSftpd对同一个IP地址的同时连接数量默认是没有限制的。在VSftpd中的max_per_ip选项是0，代表没有限制。</p>
<p>如果你想限制同一个IP地址的同时连接数量，你需要修改<code>/etc/vsftpd/vsftpd.conf</code>文件。以下是一个例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">pam_service_name=vsftpd</div><div class="line">userlist_enable=YES</div><div class="line">#enable for standalone mode</div><div class="line">listen=YES</div><div class="line">tcp_wrappers=YES</div><div class="line">max_per_ip=2</div></pre></td></tr></table></figure>
<p>在这个例子中，每一个主机最多只能有两个连接。修改vsftpd.conf之后，你需要重启VSftpd来让它生效。</p>
<p>一旦达到最大连接数，同一个主机下对这个FTP服务器的其他连接会出现以下的错误信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">421 There are too many connections from your internet address.</div></pre></td></tr></table></figure>
<ul>
<li>VSftpd与TCP_wrapper结合限制用户的IP地址登录</li>
</ul>
<p>通过<code>/etc/hosts.allow</code>定义允许的来源地址，<code>/etc/hosts.deny</code>定义拒绝的来源地址。</p>
<p>配置示例</p>
<p>/etc/hosts.allow</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#</div><div class="line"># hosts.allow This file describes the names of the hosts which are</div><div class="line"># allowed to use the local INET services, as decided</div><div class="line"># by the ‘/usr/sbin/tcpd’ server.</div><div class="line">#</div><div class="line">vsftpd: 123.103.47.0/255.255.255.0 218.240.63.0/255.255.255.0 59.46.172.0/255.255.255.0 10.0.0.0/255.0.0.0 60.2.80.0/255.255.255.0 218.249.230.0/255.255.255.0 160.10.0.0/255.255.0.0 218.246.69.0/255.255.255.0 125.35.3.0/255.255.255.0 : allow</div></pre></td></tr></table></figure>
<p>/etc/hosts.deny</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#</div><div class="line"># hosts.deny This file describes the names of the hosts which are</div><div class="line"># *not* allowed to use the local INET services, as decided</div><div class="line"># by the ‘/usr/sbin/tcpd’ server.</div><div class="line">#</div><div class="line"># The portmap line is redundant, but it is left to remind you that</div><div class="line"># the new secure portmap uses hosts.deny and hosts.allow. In particular</div><div class="line"># you should know that NFS uses portmap!</div><div class="line">vsftpd : ALL : DENY</div></pre></td></tr></table></figure>
<p>将tcp_wrappers=yes添加至<code>/etc/vsftpd/vsftpd.conf</code>中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/vsftpd/vsftpd.conf</div><div class="line">tcp_wrappers=YES</div></pre></td></tr></table></figure>
<p>重新启动VSftpd</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ service vsftpd restart</div><div class="line">Shutting down vsftpd: OK ]</div><div class="line">Starting vsftpd for vsftpd: OK ]</div></pre></td></tr></table></figure>
<h3 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h3><p>如果配置中出现问题，请从以下几方面检查</p>
<ul>
<li>文件权限和文件属主问题</li>
<li>防火墙iptables没开放相关的端口</li>
<li>SELinux导致的权限问题，建议先关闭SELinux再配置VSftp，之后再开启到permissive模式。或者运行这条命令：<code>setsebool -P ftp_home_dir=1</code> 。</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://www.ha97.com/4113.html" target="_blank" rel="external">http://www.ha97.com/4113.html</a><br><a href="http://www.cnblogs.com/sztsian/archive/2011/08/23/2204102.html" target="_blank" rel="external">http://www.cnblogs.com/sztsian/archive/2011/08/23/2204102.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Mosh来优化SSH连接]]></title>
      <url>http://www.hi-linux.com/posts/23118.html</url>
      <content type="html"><![CDATA[<h3 id="什么是Mosh"><a href="#什么是Mosh" class="headerlink" title="什么是Mosh"></a>什么是Mosh</h3><p>Mosh表示移动Shell(Mobile Shell)，是一个用于从客户端跨互联网连接远程服务器的命令行工具。它能用于SSH连接，但是比Secure Shell功能更多。它是一个类似于SSH而带有更多功能的应用。程序最初由Keith Winstein 编写，用于类Unix的操作系统中，发布于GNU GPL V3协议下。</p>
<p>Mosh最大的特点是基于UDP方式传输，支持在服务端创建一个临时的Key供客户端一次性连接，退出后失效；也支持通过SSH的配置进行认证，但数据传输本身还是自身的UDP方式。</p>
<a id="more"></a>
<p>另外，Mosh还有两个我觉得非常有用的功能</p>
<ul>
<li>会话的中断不会导致当前正在前端执行的命令中断，相当于你所有的操作都是在screen命令中一样在后台执行。</li>
<li>会话在中断过后，不会立刻退出，而是启用一个计时器，当网络恢复后会自动重新连接，同时会延续之前的会话，不会重新开启一个。</li>
</ul>
<h4 id="Mosh的功能"><a href="#Mosh的功能" class="headerlink" title="Mosh的功能"></a>Mosh的功能</h4><ul>
<li>它是一个支持漫游的远程终端程序</li>
<li>在所有主流的类 Unix 版本中可用，如 Linux、FreeBSD、Solaris、Mac OS X和Android</li>
<li>支持不稳定连接</li>
<li>支持智能的本地回显</li>
<li>支持用户输入的行编辑</li>
<li>响应式设计及在 wifi、3G、长距离连接下的鲁棒性</li>
<li>在IP改变后保持连接。它使用UDP代替TCP(在SSH中使用)，当连接被重置或者获得新的IP后TCP会超时，但是UDP仍然保持连接</li>
<li>在很长的时候之后恢复会话时仍然保持连接</li>
<li>没有网络延迟。立即显示用户输入和删除而没有延迟</li>
<li>像SSH那样支持一些旧的方式登录</li>
<li>包丢失处理机制</li>
</ul>
<h3 id="Mosh安装配置"><a href="#Mosh安装配置" class="headerlink" title="Mosh安装配置"></a>Mosh安装配置</h3><p>Mosh需要同时在服务器端与客户端上安装，这是一件非常简单的事情。</p>
<h4 id="Linux中安装Mosh"><a href="#Linux中安装Mosh" class="headerlink" title="Linux中安装Mosh"></a>Linux中安装Mosh</h4><ul>
<li>在Debian、Ubuntu 和Mint 类似的系统中，你可以很容易地用apt-get包管理器安装。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ apt-get update</div><div class="line">$ apt-get install mosh</div></pre></td></tr></table></figure>
<ul>
<li>在基于RHEL/CentOS/Fedora的系统中，要使用yum包管理器安装mosh，你需要打开第三方的EPEL。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ yum update</div><div class="line">$ yum install mosh</div></pre></td></tr></table></figure>
<ul>
<li>在Fedora 22+的版本中，你需要使用dnf包管理器来安装Mosh。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ dnf install mosh</div></pre></td></tr></table></figure>
<h4 id="MAC中安装Mosh"><a href="#MAC中安装Mosh" class="headerlink" title="MAC中安装Mosh"></a>MAC中安装Mosh</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ brew install mosh</div><div class="line">$ brew install --HEAD mosh #安装git最新版本</div></pre></td></tr></table></figure>
<p><strong>注：目前Mosh的最新版本是1.2.4，这个版本有一个小问题就是不会汇报鼠标事件，如果你在远程的VIM或者tmux等支持鼠标事件的程序中喜欢用滚轮或者触摸屏滚动屏幕的话，可能会有点不习惯。如果不能忍可以自己编译安装Git里的最新版本的Mosh。</strong></p>
<h4 id="检查Mosh的版本"><a href="#检查Mosh的版本" class="headerlink" title="检查Mosh的版本"></a>检查Mosh的版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ mosh --version</div><div class="line">mosh 1.2.4</div><div class="line">Copyright 2012 Keith Winstein &lt;mosh-devel@mit.edu&gt;</div><div class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.</div><div class="line">This is free software: you are free to change and redistribute it.</div><div class="line">There is NO WARRANTY, to the extent permitted by law.</div></pre></td></tr></table></figure>
<p>你可以输入exit来退出Mosh会话。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ exit</div></pre></td></tr></table></figure>
<h3 id="Mosh参数说明"><a href="#Mosh参数说明" class="headerlink" title="Mosh参数说明"></a>Mosh参数说明</h3><p>Mosh支持很多选项，你可以用下面的方法看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">$ mosh --help</div><div class="line">Usage: /usr/bin/mosh [options] [--] [user@]host [command...]</div><div class="line">        --client=PATH        mosh client on local machine</div><div class="line">                                (default: &quot;mosh-client&quot;)</div><div class="line">        --server=COMMAND     mosh server on remote machine</div><div class="line">                                (default: &quot;mosh-server&quot;)</div><div class="line"></div><div class="line">        --predict=adaptive      local echo for slower links [default]</div><div class="line">-a      --predict=always        use local echo even on fast links</div><div class="line">-n      --predict=never         never use local echo</div><div class="line">        --predict=experimental  aggressively echo even when incorrect</div><div class="line"></div><div class="line">-p PORT[:PORT2]</div><div class="line">        --port=PORT[:PORT2]  server-side UDP port or range</div><div class="line"></div><div class="line">        --ssh=COMMAND        ssh command to run when setting up session</div><div class="line">                                (example: &quot;ssh -p 2222&quot;)</div><div class="line">                                (default: &quot;ssh&quot;)</div><div class="line"></div><div class="line">        --no-init            do not send terminal initialization string</div><div class="line"></div><div class="line">        --help               this message</div><div class="line">        --version            version and copyright information</div><div class="line"></div><div class="line">Please report bugs to mosh-devel@mit.edu.</div><div class="line">Mosh home page: http://mosh.mit.edu</div></pre></td></tr></table></figure>
<h3 id="Mosh远程连接"><a href="#Mosh远程连接" class="headerlink" title="Mosh远程连接"></a>Mosh远程连接</h3><p>Mosh使用的UDP协议连接的，使用的端口是从60000到61000，如果开启了防火墙服务器上就需要打开相应的UDP端口。一个Mosh连接就会打开一个UDP端口，比如建立两个连接就是60001、60002，以此类推。</p>
<p>假设Mosh使用60001 UDP端口，则在服务器上运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ iptables -I INPUT -p udp --dport 60001 -j ACCEPT</div></pre></td></tr></table></figure>
<p>这样就在服务器上打开60001这个UDP端口。当然，最好是把上一条命令写入服务器iptables的规则中，这样不必要每次都手动打开这个端口。</p>
<h3 id="Mosh的使用"><a href="#Mosh的使用" class="headerlink" title="Mosh的使用"></a>Mosh的使用</h3><ul>
<li>使用Mosh登录远程Linux服务器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mosh USERNAME@IP</div></pre></td></tr></table></figure>
<ul>
<li>指定开启的端口</li>
</ul>
<p>客户端进行连接时指定端口并开启端口，默认端口从60001开始开启。接下来就是从客户端连接，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 如果原来连接服务器是采用密码的方式登录，会提示输入密码，如果ssh已经做好了密钥认证，则可以直接连接</div><div class="line">$ mosh -p 60001 用户名@ip地址</div></pre></td></tr></table></figure>
<p><strong>注：p参数用于指定UDP端口。</strong></p>
<ul>
<li>采用SSH配置进行认证</li>
</ul>
<p>假如你的SSH连接设置公钥/私钥连接，比如<code>ssh hi-linux</code>即可直接连接服务器而无需输入密码，则mosh命令也可以以<code>mosh hi-linux</code>的形式连接，基本上，可以把它当作ssh命令的替换，只不过SSH开的是TCP口，Mosh开的是UDP口。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ mosh mike@hi-linux.com</div><div class="line">$ exit</div><div class="line">logout</div><div class="line">[mosh is exiting.]</div></pre></td></tr></table></figure>
<ul>
<li>指定服务端SSH开启的端口</li>
</ul>
<p>假设服务端开始的端口是2222</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mosh --ssh=&quot;ssh -p 2222&quot; 用户@服务器IP</div></pre></td></tr></table></figure>
<ul>
<li>如果私钥不在默认的目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mosh --ssh=&quot;~/bin/ssh -i ./identity&quot;  用户@服务器IP</div></pre></td></tr></table></figure>
<ul>
<li>如果服务端修改过SSH的端口，或需要指定单独的SSHKEY，可以通过<code>--ssh</code>参数的方式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mosh --ssh=&quot;ssh -i /home/dong.guo/.ssh/oozie -p 2222&quot;</div></pre></td></tr></table></figure>
<ul>
<li>采用临时Key的方式进行一次性认证</li>
</ul>
<p>先需要在服务端创建Key，然后客户端通过这个Key进行登录，该Key会在会话结束十分钟后自动失效。</p>
<p>创建一个临时的Key和端口供Client登录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ mosh-server</div><div class="line"></div><div class="line">MOSH CONNECT 60001 hNpGrd5rzRrfP47LQEizJw</div><div class="line">mosh-server (mosh 1.2.4)</div><div class="line">Copyright 2012 Keith Winstein &lt;mosh-devel@mit.edu&gt;</div><div class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.</div><div class="line">This is free software: you are free to change and redistribute it.</div><div class="line">There is NO WARRANTY, to the extent permitted by law.</div><div class="line">[mosh-server detached, pid = 27290]</div></pre></td></tr></table></figure>
<p>定义好MOSH_KEY的值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ export MOSH_KEY=hNpGrd5rzRrfP47LQEizJw</div></pre></td></tr></table></figure>
<p>使用临时Key进行登陆</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ mosh-client 192.168.92.128 60001</div><div class="line">$ exit</div><div class="line">logout</div><div class="line">[mosh is exiting.]</div></pre></td></tr></table></figure>
<p><strong>注：mosh-client后面只能跟服务器具体的IP地址和临时端口，不支持主机名或域名方式</strong></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Mosh是一款在大多数linux发行版的仓库中可以下载的一款小工具。虽然它有一些差异尤其是安全问题和额外的需求，它的功能，比如漫游后保持连接是一个加分点。我的建议是任何一个使用SSH的Linux用户都应该试试这个程序，Mosh值得一试。</p>
<p><strong>Mosh的优缺点</strong></p>
<ul>
<li>Mosh有额外的需求，比如需要允许UDP 直接连接，这在SSH不需要。</li>
<li>动态分配的端口范围是60000-61000。第一个打开的端口是分配好的。每个连接都需要一个端口。</li>
<li>默认的端口分配是一个严重的安全问题，尤其是在生产环境中。</li>
<li>支持IPv6连接，但是不支持IPv6漫游。</li>
<li>不支持回滚。</li>
<li>不支持X11转发。</li>
<li>不支持ssh-agent转发。</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="https://mosh.mit.edu/" target="_blank" rel="external">https://mosh.mit.edu/</a><br><a href="http://heylinux.com/archives/2955.html" target="_blank" rel="external">http://heylinux.com/archives/2955.html</a><br><a href="http://blog.szrf215.com/p/4b16d7c218db" target="_blank" rel="external">http://blog.szrf215.com/p/4b16d7c218db</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Apache/Nginx通过UserAgent屏蔽蜘蛛和采集]]></title>
      <url>http://www.hi-linux.com/posts/5492.html</url>
      <content type="html"><![CDATA[<p>正规的搜索引擎的蜘蛛爬行我们的网站对于网站来说是有利的，但垃圾爬虫我们就需要屏蔽掉它们的访问，因为它们有的是人为来采集我们网站内容的，有的是SEO以及其他工具索引我们的网站数据建库进行分析的。它们不仅对网站内容不利，而且对于网站服务器也是一种负担。</p>
<p>即便bot支持,但实际情况是robots.txt 根本无法阻止那些垃圾蜘蛛的，好在垃圾爬虫基本上还是有一定特征的，比如可以根据UA分析。即可使用少量代码屏蔽掉。不过，如果UA伪造或UA变化等其他情况，可使用crontab对日志里面IP频率进行分析和屏蔽了。</p>
<h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><ul>
<li>通过修改.htaccess文件</li>
</ul>
<p>修改网站目录下.htaccess文件，添加如下代码即可(二种代码任选其一)。</p>
<p><strong>方法一</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RewriteEngine On</div><div class="line">RewriteCond %&#123;HTTP_USER_AGENT&#125; (^$|FeedDemon|Indy Library|Alexa Toolbar|AskTbFXTV|AhrefsBot|CrawlDaddy|CoolpadWebkit|Java|Feedly|UniversalFeedParser|ApacheBench|Microsoft URL Control|Swiftbot|ZmEu|oBot|jaunty|Python-urllib|lightDeckReports Bot|YYSpider|DigExt|HttpClient|MJ12bot|heritrix|EasouSpider|Ezooms) [NC]</div><div class="line">RewriteRule ^(.*)$ - [F]</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>方法二 </strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SetEnvIfNoCase ^User-Agent$ .*(FeedDemon|Indy Library|Alexa Toolbar|AskTbFXTV|AhrefsBot|CrawlDaddy|CoolpadWebkit|Java|Feedly|UniversalFeedParser|ApacheBench|Microsoft URL Control|Swiftbot|ZmEu|oBot|jaunty|Python-urllib|lightDeckReports Bot|YYSpider|DigExt|HttpClient|MJ12bot|heritrix|EasouSpider|Ezooms) BADBOT</div><div class="line">Order Allow,Deny</div><div class="line">Allow from all</div><div class="line">Deny from env=BADBOT</div></pre></td></tr></table></figure>
<ul>
<li>通过修改httpd.conf配置文件</li>
</ul>
<p>找到如下类似位置，根据以下代码新增/修改，然后重启Apache即可。</p>
<p><strong>方法一</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">DocumentRoot /var/www/html</div><div class="line">&lt;Directory &quot;/var/www/html&quot;&gt;</div><div class="line">SetEnvIfNoCase User-Agent &quot;.*(FeedDemon|Indy Library|Alexa Toolbar|AskTbFXTV|AhrefsBot|CrawlDaddy|CoolpadWebkit|Java|Feedly|UniversalFeedParser|ApacheBench|Microsoft URL Control|Swiftbot|ZmEu|oBot|jaunty|Python-urllib|lightDeckReports Bot|YYSpider|DigExt|HttpClient|MJ12bot|heritrix|EasouSpider|Ezooms)&quot; BADBOT</div><div class="line">        Order allow,deny</div><div class="line">        Allow from all</div><div class="line">        Deny from env=BADBOT</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure>
<p><strong>方法二</strong></p>
<p>根据UA,REFERER禁止爬虫，[G]返回410页面，[F]返回403页面。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;IfModule mod_rewrite.c&gt;</div><div class="line"> RewriteCond %&#123;HTTP_USER_AGENT&#125; (wget|curl|AhrefsBot|DotBot|MJ12bot|httrack|Findxbot|BLEXBot|WinHttpRequest|Go\s1.1\spackage\shttp|megaindex|BIDUBrowser|FunWebProducts|MSIE\s5|Add\sCatalog|SeznamBot|KomodiaBot|aiHitBot|MojeekBot|PhantomJS|SiteSucker|HTTrack|MegaIndex|BLEXBot|LinkpadBot|Findxbot|SEOkicks|OpenLinkProfiler|PhantomJS|Xenu|007ac9|sistrix|spbot|SiteExplorer|wotbox|ZumBot|ltx71|memoryBot|WBSearchBot|DomainAppender|Python|Aboundex|-crawler|WinHttpRequest|NerdyBot|ZmEu|xovibot) [NC,OR]</div><div class="line"> RewriteCond %&#123;HTTP_USER_AGENT&#125; ^$ [NC,OR] </div><div class="line"> RewriteCond %&#123;HTTP_USER_AGENT&#125; ^-$ [NC,OR]</div><div class="line"> RewriteCond %&#123;HTTP_REFERER&#125; .ru/$ [NC,OR]</div><div class="line"> RewriteCond %&#123;HTTP_REFERER&#125; (example.com) [NC]</div><div class="line"> RewriteRule .* - [G]</div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>
<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>进入到Nginx配置目录下(默认为/etc/nginx/conf.d目录)，将如下代码保存为agent_deny.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ cd /etc/nginx/conf.d</div><div class="line">$ vi agent_deny.conf</div><div class="line"></div><div class="line"></div><div class="line">#禁止Scrapy等工具的抓取</div><div class="line">if ($http_user_agent ~* (Scrapy|Curl|HttpClient)) &#123;</div><div class="line">     return 403;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#禁止指定UA及UA为空的访问</div><div class="line">if ($http_user_agent ~* &quot;WinHttp|WebZIP|FetchURL|node-superagent|java/|FeedDemon|Jullo|JikeSpider|Indy Library|Alexa Toolbar|AskTbFXTV|AhrefsBot|CrawlDaddy|Java|Feedly|Apache-HttpAsyncClient|UniversalFeedParser|ApacheBench|Microsoft URL Control|Swiftbot|ZmEu|oBot|jaunty|Python-urllib|lightDeckReports Bot|YYSpider|DigExt|HttpClient|MJ12bot|heritrix|EasouSpider|Ezooms|BOT/0.1|YandexBot|FlightDeckReports|Linguee Bot|^$&quot; ) &#123;</div><div class="line">     return 403;             </div><div class="line">&#125;</div><div class="line"></div><div class="line">#禁止非GET|HEAD|POST方式的抓取</div><div class="line">if ($request_method !~ ^(GET|HEAD|POST)$) &#123;</div><div class="line">    return 403;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，在网站相关配置中的server段插入如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include agent_deny.conf;</div></pre></td></tr></table></figure>
<p>保存后，执行如下命令，平滑重启nginx即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/nginx reload</div></pre></td></tr></table></figure>
<p>注：这里介绍的是通过判断UserAgent的方法进行限制，Nginx还可以通过<code>ngx_http_limit_conn_module</code>和<code>ngx_http_limit_req_module</code>模块来进行访问限制，在以后的文档中会进行这种方法的介绍。</p>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p>将如下方法放到贴到网站入口文件index.php中的第一个<code>&lt;?php</code>之后即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//获取UA信息</div><div class="line">$ua = $_SERVER[&apos;HTTP_USER_AGENT&apos;];</div><div class="line">//将恶意USER_AGENT存入数组</div><div class="line">$now_ua = array(&apos;FeedDemon &apos;,&apos;BOT/0.1 (BOT for JCE)&apos;,&apos;CrawlDaddy &apos;,&apos;Java&apos;,&apos;Feedly&apos;,&apos;UniversalFeedParser&apos;,&apos;ApacheBench&apos;,&apos;Swiftbot&apos;,&apos;ZmEu&apos;,&apos;Indy Library&apos;,&apos;oBot&apos;,&apos;jaunty&apos;,&apos;YandexBot&apos;,&apos;AhrefsBot&apos;,&apos;MJ12bot&apos;,&apos;WinHttp&apos;,&apos;EasouSpider&apos;,&apos;HttpClient&apos;,&apos;Microsoft URL Control&apos;,&apos;YYSpider&apos;,&apos;jaunty&apos;,&apos;Python-urllib&apos;,&apos;lightDeckReports Bot&apos;);</div><div class="line">//禁止空USER_AGENT，dedecms等主流采集程序都是空USER_AGENT，部分sql注入工具也是空USER_AGENT</div><div class="line">if(!$ua) &#123;</div><div class="line">header(&quot;Content-type: text/html; charset=utf-8&quot;);</div><div class="line">wp_die(&apos;请勿采集本站，因为采集的站长木有小JJ！&apos;);</div><div class="line">&#125;else&#123;</div><div class="line">    foreach($now_ua as $value )</div><div class="line">//判断是否是数组中存在的UA</div><div class="line">    if(eregi($value,$ua)) &#123;</div><div class="line">    header(&quot;Content-type: text/html; charset=utf-8&quot;);</div><div class="line">    wp_die(&apos;请勿采集本站，因为采集的站长木有小JJ！&apos;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="附录：UA收集"><a href="#附录：UA收集" class="headerlink" title="附录：UA收集"></a>附录：UA收集</h3><h4 id="常见搜索引擎爬虫的User-Agent"><a href="#常见搜索引擎爬虫的User-Agent" class="headerlink" title="常见搜索引擎爬虫的User-Agent"></a>常见搜索引擎爬虫的User-Agent</h4><p>百度爬虫</p>
<ul>
<li>Baiduspider+(+<a href="http://www.baidu.com/search/spider.htm”" target="_blank" rel="external">http://www.baidu.com/search/spider.htm”</a>)</li>
</ul>
<p>Google爬虫</p>
<ul>
<li>Mozilla/5.0 (compatible; Googlebot/2.1; +<a href="http://www.google.com/bot.html" target="_blank" rel="external">http://www.google.com/bot.html</a>)</li>
<li>Googlebot/2.1 (+<a href="http://www.googlebot.com/bot.html" target="_blank" rel="external">http://www.googlebot.com/bot.html</a>)</li>
<li>Googlebot/2.1 (+<a href="http://www.google.com/bot.html" target="_blank" rel="external">http://www.google.com/bot.html</a>)</li>
</ul>
<p>雅虎爬虫(分别是雅虎中国和美国总部的爬虫)</p>
<ul>
<li>Mozilla/5.0 (compatible; Yahoo! Slurp China; <a href="http://misc.yahoo.com.cn/help.html”" target="_blank" rel="external">http://misc.yahoo.com.cn/help.html”</a>)</li>
<li>Mozilla/5.0 (compatible; Yahoo! Slurp; <a href="http://help.yahoo.com/help/us/ysearch/slurp”" target="_blank" rel="external">http://help.yahoo.com/help/us/ysearch/slurp”</a>)</li>
</ul>
<p>新浪爱问爬虫</p>
<ul>
<li>iaskspider/2.0(+<a href="http://iask.com/help/help_index.html”" target="_blank" rel="external">http://iask.com/help/help_index.html”</a>)</li>
<li>Mozilla/5.0 (compatible; iaskspider/1.0; MSIE 6.0)</li>
</ul>
<p>搜狗爬虫</p>
<ul>
<li>Sogou web spider/3.0(+<a href="http://www.sogou.com/docs/help/webmasters.htm#07″" target="_blank" rel="external">http://www.sogou.com/docs/help/webmasters.htm#07″</a>)</li>
<li>Sogou Push Spider/3.0(+<a href="http://www.sogou.com/docs/help/webmasters.htm#07″" target="_blank" rel="external">http://www.sogou.com/docs/help/webmasters.htm#07″</a>)</li>
</ul>
<p>网易爬虫</p>
<ul>
<li>Mozilla/5.0 (compatible; YodaoBot/1.0; <a href="http://www.yodao.com/help/webmaster/spider/”" target="_blank" rel="external">http://www.yodao.com/help/webmaster/spider/”</a>; )</li>
</ul>
<p>MSN爬虫</p>
<ul>
<li>msnbot/1.0 (+<a href="http://search.msn.com/msnbot.htm”" target="_blank" rel="external">http://search.msn.com/msnbot.htm”</a>)</li>
</ul>
<h4 id="网络上常见的垃圾UA列表"><a href="#网络上常见的垃圾UA列表" class="headerlink" title="网络上常见的垃圾UA列表"></a>网络上常见的垃圾UA列表</h4><p>内容采集</p>
<ul>
<li>FeedDemon                </li>
<li>Java                  内容采集</li>
<li>Jullo                 内容采集</li>
<li>Feedly                内容采集</li>
<li>UniversalFeedParser   内容采集</li>
</ul>
<p>SQL注入</p>
<ul>
<li>BOT/0.1 (BOT for JCE) </li>
<li>CrawlDaddy      </li>
</ul>
<p>无用爬虫      </p>
<ul>
<li>EasouSpider           </li>
<li>Swiftbot              </li>
<li>YandexBot             </li>
<li>AhrefsBot             </li>
<li>jikeSpider            </li>
<li>MJ12bot               </li>
<li>YYSpider              </li>
<li>oBot                  </li>
</ul>
<p>CC攻击器</p>
<ul>
<li>ApacheBench           </li>
<li>WinHttp               </li>
</ul>
<p>TCP攻击</p>
<ul>
<li>HttpClient            </li>
</ul>
<p>扫描</p>
<ul>
<li>Microsoft URL Control </li>
<li>ZmEu phpmyadmin       </li>
<li>jaunty                </li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://zhangge.net/4458.html" target="_blank" rel="external">http://zhangge.net/4458.html</a><br><a href="https://seonoco.com/apache-nginx-shielded-spider-and-collection" target="_blank" rel="external">https://seonoco.com/apache-nginx-shielded-spider-and-collection</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL 5.6密码强度审计插件使用说明]]></title>
      <url>http://www.hi-linux.com/posts/49609.html</url>
      <content type="html"><![CDATA[<p>相信很多人在日常工作中，都会遇到设置用户、密码之类的问题。很多人使用Keepass来生成和保存密码；但是很多人为了易于记忆，会选择相对简答的密码，这样在安全性方面，会存在非常严重的安全隐患。</p>
<p>在MySQL 5.6对密码的强度进行了加强，推出了<code>Password Validation Plugin</code>插件。可支持用户设置密码时强制使用强密码的要求。</p>
<p>所需MySQL版本：MySQL 5.6.6以上版本</p>
<a id="more"></a>
<h3 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h3><h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><h5 id="插件启用"><a href="#插件启用" class="headerlink" title="插件启用"></a>插件启用</h5><p>插件对应的库对象文件需在配置选项<code>plugin_dir</code>指定的目录中。可使用<code>--plugin-load=validate_password.so</code>，在Server启动时载入插件，或者将<code>plugin-load=validate_password.so</code>写入配置文件。也可以通过如下语句在Server运行时载入插件(会注册进mysql.plugins表)</p>
<ul>
<li>运行时载入插件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; INSTALL PLUGIN validate_password SONAME &apos;validate_password.so&apos;;</div></pre></td></tr></table></figure>
<ul>
<li>在配置文件中添加</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line"></div><div class="line">plugin-load=validate_password.so</div><div class="line">validate_password_policy=2</div><div class="line">validate-password=FORCE_PLUS_PERMANENT</div></pre></td></tr></table></figure>
<h5 id="插件关闭"><a href="#插件关闭" class="headerlink" title="插件关闭"></a>插件关闭</h5><p>关闭插件很简单，在MySQL配置文件(Centos系统下是<code>/etc/my.conf</code>)里面<code>[mysqld]</code>选项下面添加下面一条语句即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line"></div><div class="line">validate_password=off</div></pre></td></tr></table></figure>
<p>记得配置后要重启MySQL,在Shell下面运行下面两条语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ service mysqld stop</div><div class="line">$ service mysqld start</div></pre></td></tr></table></figure>
<h5 id="验证插件"><a href="#验证插件" class="headerlink" title="验证插件"></a>验证插件</h5><p>通过命令<code>SHOW PLUGINS</code>进行观察，应该观察到插件已启用。</p>
<p><img src="http://www.hi-linux.com/img/linux/pvp.png" alt=""></p>
<h4 id="测试插件"><a href="#测试插件" class="headerlink" title="测试插件"></a>测试插件</h4><ul>
<li>设置简单的密码，则MySQL数据库会报类似如下的错误</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SET PASSWORD = PASSWORD(&apos;abc&apos;);</div><div class="line">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</div></pre></td></tr></table></figure>
<ul>
<li>设置复杂密码，则可以成功修改。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SET PASSWORD = &apos;*0D3CED9BEC10A777AEC23CCC353A8C08A633045E&apos;;</div><div class="line">Query OK, 0 rows affected (0.01 sec)</div></pre></td></tr></table></figure>
<h3 id="插件相关说明"><a href="#插件相关说明" class="headerlink" title="插件相关说明"></a>插件相关说明</h3><ul>
<li>相关选项</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">validate-password=ON/OFF/FORCE/FORCE_PLUS_PERMANENT: 决定是否使用该插件(及强制/永久强制使用)。</div><div class="line">validate_password_dictionary_file：插件用于验证密码强度的字典文件路径。</div><div class="line">validate_password_length：密码最小长度。</div><div class="line">validate_password_mixed_case_count：密码至少要包含的小写字母个数和大写字母个数。</div><div class="line">validate_password_number_count：密码至少要包含的数字个数。</div><div class="line">validate_password_policy：密码强度检查等级，0/LOW、1/MEDIUM、2/STRONG。</div><div class="line">validate_password_special_char_count：密码至少要包含的特殊字符数。</div></pre></td></tr></table></figure>
<ul>
<li>关于<code>validate_password_policy</code>密码强度检查等级</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">0/LOW：只检查长度。</div><div class="line">1/MEDIUM：检查长度、数字、大小写、特殊字符。</div><div class="line">2/STRONG：检查长度、数字、大小写、特殊字符字典文件。</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://blog.csdn.net/zyz511919766/article/details/12752741" target="_blank" rel="external">http://blog.csdn.net/zyz511919766/article/details/12752741</a><br><a href="http://www.xuchanggang.cn/archives/1033.html" target="_blank" rel="external">http://www.xuchanggang.cn/archives/1033.html</a><br><a href="http://www.07net01.com/storage_networking/2016/01/1212625.html" target="_blank" rel="external">http://www.07net01.com/storage_networking/2016/01/1212625.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下开启缓存服务NSCD]]></title>
      <url>http://www.hi-linux.com/posts/9461.html</url>
      <content type="html"><![CDATA[<p>NSCD(Name Service Cache Daemon)是服务缓存守护进程，它为NIS和LDAP等服务提供更快的验证。不管是什么系统，缓存是一项非常重要的技术[或机制]，缓存的主旨就是提高客户端访问速度。</p>
<h3 id="NSCD安装"><a href="#NSCD安装" class="headerlink" title="NSCD安装"></a>NSCD安装</h3><ul>
<li>RHEL/CentOS</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum -y install nscd</div></pre></td></tr></table></figure>
<ul>
<li>Debian/Ubuntu</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apt-get install nscd</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="NSCD命令选项"><a href="#NSCD命令选项" class="headerlink" title="NSCD命令选项"></a>NSCD命令选项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ nscd  --help</div><div class="line">用法： nscd [选项...]</div><div class="line">Name Service Cache Daemon.</div><div class="line"></div><div class="line">  -d, --debug                Do not fork and display messages on the current</div><div class="line">                             tty</div><div class="line">  -f, --config-file=名称     从NAME中读取配置数据</div><div class="line">  -g, --statistics           Print current configuration statistics</div><div class="line">  -i, --invalidate=TABLE     Invalidate the specified cache</div><div class="line">  -K, --shutdown             关闭服务器</div><div class="line">  -t, --nthreads=NUMBER      启动 NUMBER 个线程</div><div class="line">  -?, --help                 给出该系统求助列表</div><div class="line">      --usage                给出简要的用法信息</div><div class="line">  -V, --version              打印程序版本号</div><div class="line"></div><div class="line">长选项的强制或可选参数对对应的短选项也是强制或可选的。</div><div class="line"></div><div class="line">For bug reporting instructions, please see:</div><div class="line">&lt;http://www.gnu.org/software/libc/bugs.html&gt;.</div></pre></td></tr></table></figure>
<h3 id="NSCD配置文件"><a href="#NSCD配置文件" class="headerlink" title="NSCD配置文件"></a>NSCD配置文件</h3><p>NSCD配置文件为<code>/etc/nscd.conf</code>，NSCD程序在启动的时候会读取<code>/etc/nscd.conf</code>文件，每一行指定一个属性和对应的值，或者指定一个服务和对应的值，#表示注释。有效的服务设定是：passwd, group, hosts, services, or netgroup五个。</p>
<p>NSCD配置文件相关参数解释</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">#设置日志文件</div><div class="line">logfile debug-file-name</div><div class="line"></div><div class="line">#设置debug记录的级别，默认是0</div><div class="line">debug-level value</div><div class="line"></div><div class="line">#程序启动时，等待进去请求的处理线程数，至少5个</div><div class="line">threads number</div><div class="line"></div><div class="line">#最大线程数，默认32</div><div class="line">max-threads number</div><div class="line"></div><div class="line">#nscd程序以哪个用户运行,如果设置了该选项，nscd将作为该用户运行，而不是作为root。如果每个用户都使用一个单独的缓存(-S参数)，将忽略该选项。</div><div class="line">server-user user</div><div class="line"></div><div class="line">#哪个用户可以请求统计用户</div><div class="line">stat-user user</div><div class="line"></div><div class="line">#在一个缓存项被删除之前允许使用的次数，默认是5</div><div class="line">reload-count unlimited | number</div><div class="line"></div><div class="line">#是否启用偏执模式，启用会导致nscd周期性重启，默认是no</div><div class="line">paranoia &lt;yes|no&gt;</div><div class="line"></div><div class="line">#如果启用偏执模式，设置的定期重启nscd的时间间隔，默认是3600秒</div><div class="line">restart-interval time</div><div class="line"></div><div class="line">#开启或者关闭服务缓存，默认是no</div><div class="line">enable-cache service &lt;yes|no&gt;</div><div class="line"></div><div class="line">#为成功请求的元素设置缓存TTL，单位是秒，值越大缓存命中率越高，降低平均响应时间，但会增加缓存的一致性问题</div><div class="line">positive-time-to-live service value</div><div class="line"></div><div class="line">#为失败查询元素设置缓存TTL，单位是秒，应保持小值，减小缓存一致性问题</div><div class="line">negative-time-to-live service value</div><div class="line"></div><div class="line">#内部的散列表大小，value应该保持一个素数以达到优化效果。默认值是211</div><div class="line">suggested-size service value</div><div class="line"></div><div class="line">#启用或者禁用检查文件是否属于指定的服务，这些文件是/etc/passwd、/etc/group、/etc/hosts、/etc/services、/etc/netgroup等</div><div class="line">check-files service &lt;yes|no&gt;</div><div class="line"></div><div class="line">#设置缓存在服务器重启后，仍旧能提供缓存服务，在使用偏执模式时有用，默认是no</div><div class="line">persistent service &lt;yes|no&gt;</div><div class="line"></div><div class="line">#为客户端共享nscd数据库在内存中做的映射，使客户端可以直接搜索，而不用每次都查询守护进行，默认是no</div><div class="line">shared service &lt;yes|no&gt;</div><div class="line"></div><div class="line">#该数据库的最大大小，单位是bytes，默认是33554432</div><div class="line">max-db-size service bytes</div><div class="line"></div><div class="line">#此选项仅使用于passwd和group服务</div><div class="line">auto-propagate service &lt;yes|no&gt;</div></pre></td></tr></table></figure>
<h3 id="NSCD使用实例"><a href="#NSCD使用实例" class="headerlink" title="NSCD使用实例"></a>NSCD使用实例</h3><h4 id="使用NSCD对DNS进行缓存"><a href="#使用NSCD对DNS进行缓存" class="headerlink" title="使用NSCD对DNS进行缓存"></a>使用NSCD对DNS进行缓存</h4><p><strong>DNS缓存在服务器上的作用</strong></p>
<p>在需要通过域名与外界进行数据交互的时候,dns缓存就派上用场了,它可以减少域名解析的时间,提高效率。例如以下情况</p>
<ul>
<li>使用爬虫采集网络上的页面数据,</li>
<li>使用auth2.0协议从其他平台(如微博或QQ)获取用户数据,</li>
<li>使用第三方支付接口,</li>
<li>使用短信通道下发短信等.</li>
</ul>
<p><strong>开启NSCD DNS缓存服务的优点和缺点</strong></p>
<ul>
<li>优点</li>
</ul>
<ol>
<li>本地缓存DNS解析信息，提供解析速度。</li>
<li>DNS服务挂了也没有问题，在缓存服务时间范围内，解析依旧正常。</li>
</ol>
<ul>
<li>缺点</li>
</ul>
<ol>
<li>DNS解析信息会滞后，如域名解析更改需要手动刷新缓存，NSCD不适合做实时的切换的应用，目前对于依赖DNS切换的服务，建议不要开启DNS缓存。DNS Cache作为普通的DNS解析Cache那是没问题的，如果你使用RDS云服务器，也不建议使用DNS缓存服务。</li>
</ol>
<p><strong>配置DNS缓存</strong></p>
<p>通过编辑<code>/etc/nscd.conf</code>文件，在其中增加如下一行可以开启本地DNS Cache</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">enable-cache hosts yes #这个服务除了dns缓存之外还可以缓存passwd,group,servers</div></pre></td></tr></table></figure>
<p>完整配置如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/nscd.conf</div><div class="line"></div><div class="line">logfile                 /var/log/nscd.log</div><div class="line">threads                 5</div><div class="line">max-threads             32</div><div class="line">server-user             nscd</div><div class="line">debug-level             0</div><div class="line">paranoia                no</div><div class="line">enable-cache            hosts           yes</div><div class="line">enable-cache            passwd          no</div><div class="line">enable-cache            group           no</div><div class="line">positive-time-to-live   hosts           60</div><div class="line">negative-time-to-live   hosts           20</div><div class="line">suggested-size          hosts           211</div><div class="line">check-files             hosts           yes</div><div class="line">persistent              hosts           yes</div><div class="line">shared                  hosts           yes</div><div class="line">max-db-size             hosts           33554432</div></pre></td></tr></table></figure>
<ul>
<li>启动NSCD进程</li>
</ul>
<p>默认该服务在Redhat或Centos下是关闭的，可以通过以下指令开启</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ service nscd start</div></pre></td></tr></table></figure>
<p>加入自启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chkconfig nscd on</div></pre></td></tr></table></figure>
<p>查看进程，如下所示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ps aux | grep nscd</div><div class="line">nscd       1284  0.1  0.3 708056  1580 ?        Ssl  23:37   0:00 /usr/sbin/nscd</div></pre></td></tr></table></figure>
<p>说明已经正常运行了。</p>
<ul>
<li>NSCD服务查看和清除</li>
</ul>
<p>NSCD缓存DB文件在<code>/var/db/nscd</code>下。可以通过<code>nscd -g</code>查看统计的信息，这里列出部分：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">$ nscd -g</div><div class="line"></div><div class="line">nscd 配置：</div><div class="line"></div><div class="line">              0  服务器调试级别</div><div class="line">             4s  server runtime</div><div class="line">              5  current number of threads</div><div class="line">             32  maximum number of threads</div><div class="line">              0  number of times clients had to wait</div><div class="line">             no  paranoia mode enabled</div><div class="line">           3600  restart internal</div><div class="line">              5  reload count</div><div class="line"></div><div class="line">... 省略输出信息若干 ...</div><div class="line"></div><div class="line">hosts cache:</div><div class="line"></div><div class="line">            yes  cache is enabled</div><div class="line">            yes  cache is persistent</div><div class="line">            yes  cache is shared</div><div class="line">            211  suggested size</div><div class="line">         216064  total data pool size</div><div class="line">              0  used data pool size</div><div class="line">             60  seconds time to live for positive entries</div><div class="line">             20  seconds time to live for negative entries</div><div class="line">              0  cache hits on positive entries</div><div class="line">              0  cache hits on negative entries</div><div class="line">              0  cache misses on positive entries</div><div class="line">              0  cache misses on negative entries</div><div class="line">              0% cache hit rate</div><div class="line">              0  current number of cached values</div><div class="line">              0  maximum number of cached values</div><div class="line">              0  maximum chain length searched</div><div class="line">              0  number of delays on rdlock</div><div class="line">              0  number of delays on wrlock</div><div class="line">              0  memory allocations failed</div><div class="line">            yes  check /etc/hosts for changes</div><div class="line"></div><div class="line">... 省略输出信息若干 ...</div></pre></td></tr></table></figure>
<ul>
<li>清除指定类型缓存</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ nscd -i passwd</div><div class="line">$ nscd -i group</div><div class="line">$ nscd -i hosts</div></pre></td></tr></table></figure>
<p>除了上面的方法，重启NSCD服务同样可以达到清理Cache的目的。</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://my.oschina.net/guol/blog/700569" target="_blank" rel="external">http://my.oschina.net/guol/blog/700569</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在Nginx使用Lua扩展功能]]></title>
      <url>http://www.hi-linux.com/posts/24.html</url>
      <content type="html"><![CDATA[<h3 id="什么是LUA"><a href="#什么是LUA" class="headerlink" title="什么是LUA"></a>什么是LUA</h3><p>Lua从一开始就是作为一门方便嵌入(其它应用程序)并可扩展的轻量级脚本语言来设计的，因此她一直遵从着简单、小巧、可移植、快速的原则，官方实现完全采用ANSI C编写，能以C程序库的形式嵌入到宿主程序中。</p>
<p>Lua脚本是一个很轻量级的脚本，也是号称性能最高的脚本，用在很多需要性能的地方，比如：游戏脚本，Nginx，Wireshark的脚本。</p>
<a id="more"></a>
<h3 id="什么是Nginx-Lua-Module"><a href="#什么是Nginx-Lua-Module" class="headerlink" title="什么是Nginx_Lua_Module"></a>什么是Nginx_Lua_Module</h3><p><code>Nginx_Lua_Module</code>是由淘宝的工程师清无(王晓哲)和春来(章亦春)所开发的Nginx第三方模块,它能将Lua语言嵌入到Nginx配置中,从而使用Lua就极大增强了Nginx的能力。</p>
<h3 id="编译Nginx并加载Lua"><a href="#编译Nginx并加载Lua" class="headerlink" title="编译Nginx并加载Lua"></a>编译Nginx并加载Lua</h3><h4 id="安装基础编译环境"><a href="#安装基础编译环境" class="headerlink" title="安装基础编译环境"></a>安装基础编译环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum -y groupinstall &apos;Development Tools&apos;</div></pre></td></tr></table></figure>
<h4 id="下载相关软件源码包"><a href="#下载相关软件源码包" class="headerlink" title="下载相关软件源码包"></a>下载相关软件源码包</h4><p>下载当前最新的Nginx、Luajit和Ngx_devel_kit(NDK)，以及Lua-nginx-module源码包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cd /usr/local/src</div><div class="line">$ wget http://nginx.org/download/nginx-1.10.1.tar.gz</div><div class="line">$ wget http://luajit.org/download/LuaJIT-2.0.4.tar.gz</div><div class="line">$ wget https://github.com/simpl/ngx_devel_kit/archive/v0.3.0.tar.gz</div><div class="line">$ wget https://github.com/openresty/lua-nginx-module/archive/v0.10.5.tar.gz</div></pre></td></tr></table></figure>
<h4 id="创建Nginx运行的普通用户"><a href="#创建Nginx运行的普通用户" class="headerlink" title="创建Nginx运行的普通用户"></a>创建Nginx运行的普通用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ useradd -s /sbin/nologin -M nginx</div></pre></td></tr></table></figure>
<h4 id="安装LuaJIT"><a href="#安装LuaJIT" class="headerlink" title="安装LuaJIT"></a>安装LuaJIT</h4><p>Luajit是Lua即时编译器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ tar zxvf LuaJIT-2.0.4.tar.gz</div><div class="line">$ cd LuaJIT-2.0.4</div><div class="line">$ make &amp;&amp; make install</div></pre></td></tr></table></figure>
<h4 id="安装Nginx并加载模块"><a href="#安装Nginx并加载模块" class="headerlink" title="安装Nginx并加载模块"></a>安装Nginx并加载模块</h4><p>让Nginx支持Lua有两种方法：一是使用Luajit即时编译器，二是使用Lua编译器。推荐使用Luajit，因为效率高。其中Ngx_devel_kit的作用有2个：一是开发用的，二是可以在错误日志中记录Nginx处理阶段信息(rewrite phase,access phase,content phase)，需要将错误日志级别调高，调试时可以设置成Debug。</p>
<ul>
<li>解压Nginx、NDK和Lua-Nginx-Module源码包</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ tar zxvf nginx-1.10.1.tar.gz</div><div class="line">$ tar zxvf v0.3.0.tar.gz</div><div class="line">$ tar zxvf v0.10.5.tar.gz</div></pre></td></tr></table></figure>
<ul>
<li>安装依赖包</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum -y install openssl openssl-devel pcre pcre-devel</div></pre></td></tr></table></figure>
<ul>
<li>编译安装Nginx</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cd nginx-1.10.1</div><div class="line">$ export LUAJIT_LIB=/usr/local/lib</div><div class="line">$ export LUAJIT_INC=/usr/local/include/luajit-2.0</div><div class="line">$ ./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-file-aio --with-http_dav_module --add-module=../ngx_devel_kit-0.3.0/ --add-module=../lua-nginx-module-0.10.5/</div><div class="line">$ make &amp;&amp; make install</div></pre></td></tr></table></figure>
<ul>
<li>创建软连接</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ln -s /usr/local/lib/libluajit-5.1.so.2 /lib64/libluajit-5.1.so.2</div></pre></td></tr></table></figure>
<ul>
<li>如果不创建会出现类似以下错误</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ nginx -t</div><div class="line">/usr/local/nginx/sbin/nginx: error while loading shared libraries: libluajit-5.1.so.2: cannot open shared object file: No such file or directory</div></pre></td></tr></table></figure>
<h4 id="测试是否支持LUA"><a href="#测试是否支持LUA" class="headerlink" title="测试是否支持LUA"></a>测试是否支持LUA</h4><ul>
<li>修改nginx.conf文件，增加如下配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ vim /usr/local/nginx/conf/nginx.conf</div><div class="line"></div><div class="line">        location /hello &#123;</div><div class="line">        default_type &apos;text/plain&apos;;</div><div class="line">        content_by_lua &apos;ngx.say(&quot;hello,lua&quot;)&apos;;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<ul>
<li>配置完成后，类似如下这样</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  localhost;</div><div class="line"></div><div class="line">    #charset koi8-r;</div><div class="line"></div><div class="line">    #access_log  logs/host.access.log  main;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        root   html;</div><div class="line">        index  index.html index.htm;</div><div class="line">    &#125;</div><div class="line">		</div><div class="line">    location /hello &#123;</div><div class="line">    default_type &apos;text/plain&apos;;</div><div class="line">    content_by_lua &apos;ngx.say(&quot;hello,lua&quot;)&apos;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    #error_page  404              /404.html;</div><div class="line"></div><div class="line">    # redirect server error pages to the static page /50x.html</div><div class="line">    #</div><div class="line">    error_page   500 502 503 504  /50x.html;</div><div class="line">    location = /50x.html &#123;</div><div class="line">        root   html;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>检查配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ /usr/local/nginx/sbin/nginx  -t</div><div class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</div><div class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</div></pre></td></tr></table></figure>
<ul>
<li>启动Nginx</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /usr/local/nginx/sbin/nginx</div></pre></td></tr></table></figure>
<p>用浏览器访问<code>http://IP/hello</code>，页面输出<code>hello,lua</code>表示已正确支持LUA。</p>
<h3 id="创建启动脚本"><a href="#创建启动脚本" class="headerlink" title="创建启动脚本"></a>创建启动脚本</h3><p>使用命令行直接运行Nginx较为麻烦，因此使用脚本来控制Nginx的启动、关闭、重载更加合理一些。</p>
<ul>
<li>适用于CentOS 6/CentOS 5</li>
</ul>
<p><a href="https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/" target="_blank" rel="external">Nginx Wiki</a>网站已经有这个脚本(CentOS)，拿来稍做修改即可使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/init.d/nginx</div><div class="line"></div><div class="line">#!/bin/sh</div><div class="line">#</div><div class="line"># nginx - this script starts and stops the nginx daemon</div><div class="line">#</div><div class="line"># chkconfig:   - 85 15</div><div class="line"># description:  NGINX is an HTTP(S) server, HTTP(S) reverse \</div><div class="line">#               proxy and IMAP/POP3 proxy server</div><div class="line"># processname: nginx</div><div class="line"># config:      /usr/local/nginx/conf/nginx.conf</div><div class="line"># config:      /etc/sysconfig/nginx</div><div class="line"># pidfile:     /var/run/nginx.pid</div><div class="line"></div><div class="line"># Source function library.</div><div class="line">. /etc/rc.d/init.d/functions</div><div class="line"></div><div class="line"># Source networking configuration.</div><div class="line">. /etc/sysconfig/network</div><div class="line"></div><div class="line"># Check that networking is up.</div><div class="line">[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;&amp; exit 0</div><div class="line"></div><div class="line">nginx=&quot;/usr/local/nginx/sbin/nginx&quot;</div><div class="line">prog=$(basename $nginx)</div><div class="line"></div><div class="line">NGINX_CONF_FILE=&quot;/usr/local/nginx/conf/nginx.conf&quot;</div><div class="line"></div><div class="line">[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx</div><div class="line"></div><div class="line">lockfile=/var/lock/subsys/nginx</div><div class="line"></div><div class="line">make_dirs() &#123;</div><div class="line">   # make required directories</div><div class="line">   user=`$nginx -V 2&gt;&amp;1 | grep &quot;configure arguments:&quot; | sed &apos;s/[^*]*--user=\([^ ]*\).*/\1/g&apos; -`</div><div class="line">   if [ -z &quot;`grep $user /etc/passwd`&quot; ]; then</div><div class="line">       useradd -M -s /bin/nologin $user</div><div class="line">   fi</div><div class="line">   options=`$nginx -V 2&gt;&amp;1 | grep &apos;configure arguments:&apos;`</div><div class="line">   for opt in $options; do</div><div class="line">       if [ `echo $opt | grep &apos;.*-temp-path&apos;` ]; then</div><div class="line">           value=`echo $opt | cut -d &quot;=&quot; -f 2`</div><div class="line">           if [ ! -d &quot;$value&quot; ]; then</div><div class="line">               # echo &quot;creating&quot; $value</div><div class="line">               mkdir -p $value &amp;&amp; chown -R $user $value</div><div class="line">           fi</div><div class="line">       fi</div><div class="line">   done</div><div class="line">&#125;</div><div class="line"></div><div class="line">start() &#123;</div><div class="line">    [ -x $nginx ] || exit 5</div><div class="line">    [ -f $NGINX_CONF_FILE ] || exit 6</div><div class="line">    make_dirs</div><div class="line">    echo -n $&quot;Starting $prog: &quot;</div><div class="line">    daemon $nginx -c $NGINX_CONF_FILE</div><div class="line">    retval=$?</div><div class="line">    echo</div><div class="line">    [ $retval -eq 0 ] &amp;&amp; touch $lockfile</div><div class="line">    return $retval</div><div class="line">&#125;</div><div class="line"></div><div class="line">stop() &#123;</div><div class="line">    echo -n $&quot;Stopping $prog: &quot;</div><div class="line">    killproc $prog -QUIT</div><div class="line">    retval=$?</div><div class="line">    echo</div><div class="line">    [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile</div><div class="line">    return $retval</div><div class="line">&#125;</div><div class="line"></div><div class="line">restart() &#123;</div><div class="line">    configtest || return $?</div><div class="line">    stop</div><div class="line">    sleep 1</div><div class="line">    start</div><div class="line">&#125;</div><div class="line"></div><div class="line">reload() &#123;</div><div class="line">    configtest || return $?</div><div class="line">    echo -n $&quot;Reloading $prog: &quot;</div><div class="line">    killproc $nginx -HUP</div><div class="line">    RETVAL=$?</div><div class="line">    echo</div><div class="line">&#125;</div><div class="line"></div><div class="line">force_reload() &#123;</div><div class="line">    restart</div><div class="line">&#125;</div><div class="line"></div><div class="line">configtest() &#123;</div><div class="line">  $nginx -t -c $NGINX_CONF_FILE</div><div class="line">&#125;</div><div class="line"></div><div class="line">rh_status() &#123;</div><div class="line">    status $prog</div><div class="line">&#125;</div><div class="line"></div><div class="line">rh_status_q() &#123;</div><div class="line">    rh_status &gt;/dev/null 2&gt;&amp;1</div><div class="line">&#125;</div><div class="line"></div><div class="line">case &quot;$1&quot; in</div><div class="line">    start)</div><div class="line">        rh_status_q &amp;&amp; exit 0</div><div class="line">        $1</div><div class="line">        ;;</div><div class="line">    stop)</div><div class="line">        rh_status_q || exit 0</div><div class="line">        $1</div><div class="line">        ;;</div><div class="line">    restart|configtest)</div><div class="line">        $1</div><div class="line">        ;;</div><div class="line">    reload)</div><div class="line">        rh_status_q || exit 7</div><div class="line">        $1</div><div class="line">        ;;</div><div class="line">    force-reload)</div><div class="line">        force_reload</div><div class="line">        ;;</div><div class="line">    status)</div><div class="line">        rh_status</div><div class="line">        ;;</div><div class="line">    condrestart|try-restart)</div><div class="line">        rh_status_q || exit 0</div><div class="line">            ;;</div><div class="line">    *)</div><div class="line">        echo $&quot;Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;&quot;</div><div class="line">        exit 2</div><div class="line">esac</div></pre></td></tr></table></figure>
<p><strong>增加执行权限</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chmod +x /etc/init.d/nginx</div></pre></td></tr></table></figure>
<p><strong>使用下面的指令来控制Nginx</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 启动Nginx</div><div class="line">$ /etc/init.d/nginx start</div><div class="line"></div><div class="line"># 重启Nginx</div><div class="line">$ /etc/init.d/nginx restart</div><div class="line"></div><div class="line"># 停止Nginx</div><div class="line">$ /etc/init.d/nginx stop</div><div class="line"></div><div class="line"># 重新加载Nginx配置文件</div><div class="line">$ /etc/init.d/nginx reload</div></pre></td></tr></table></figure>
<ul>
<li>适用于Centos 7 </li>
</ul>
<p>由于Centos 7采用了Systemd管理服务进程，故管理的方法与Centos 6之前不太一样。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$ vim /usr/lib/systemd/system/nginx.service</div><div class="line"></div><div class="line"># 输入下面内容，并保存。</div><div class="line"></div><div class="line">[Unit]</div><div class="line">Description=nginx - high performance web server</div><div class="line">Documentation=http://nginx.org/en/docs/</div><div class="line">After=network.target remote-fs.target nss-lookup.target</div><div class="line">  </div><div class="line">[Service]</div><div class="line">Type=forking</div><div class="line">PIDFile=/usr/local/nginx/logs/nginx.pid</div><div class="line">ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf</div><div class="line">ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</div><div class="line">ExecReload=/bin/kill -s HUP $MAINPID</div><div class="line">ExecStop=/bin/kill -s QUIT $MAINPID</div><div class="line">PrivateTmp=true</div><div class="line">  </div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure>
<p><strong>注意下面参数的路径，根据实际情况修改。</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">PIDFile=/usr/local/nginx/logs/nginx.pid</div><div class="line">ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf</div><div class="line">ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure>
<p><strong>修改权限</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chmod +x /usr/lib/systemd/system/nginx.service</div></pre></td></tr></table></figure>
<p><strong>使用下面的指令来控制Nginx</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"># 启动Nginx</div><div class="line">$ systemctl start nginx.service</div><div class="line"></div><div class="line"># 重启Nginx</div><div class="line">$ systemctl restart nginx.service</div><div class="line"></div><div class="line"># 停止Nginx</div><div class="line">$ systemctl stop nginx.service</div><div class="line"></div><div class="line"># 重新加载Nginx配置文件</div><div class="line">$ systemctl reload nginx.service</div><div class="line"></div><div class="line"># 开机运行Nginx</div><div class="line">$ systemctl enable nginx.service</div><div class="line"></div><div class="line"># 取消开机运行Nginx</div><div class="line">$ systemctl disable nginx.service </div><div class="line"></div><div class="line"># 查询Nginx是否开机启动</div><div class="line">$ systemctl is-enabled nginx.service</div><div class="line"></div><div class="line"># 查询Nginx运行状态</div><div class="line">$ systemctl status nginx.service</div><div class="line"></div><div class="line"># 显示Nginx日志</div><div class="line">$ journalctl -f -u nginx.service</div><div class="line"></div><div class="line"># 显示启动失败的服务</div><div class="line">$ systemctl --failed</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://my.oschina.net/liucao/blog/470344" target="_blank" rel="external">http://my.oschina.net/liucao/blog/470344</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何解决Firefox&Chrome下无法访问特定端口]]></title>
      <url>http://www.hi-linux.com/posts/21003.html</url>
      <content type="html"><![CDATA[<p>在做测试、调试时我们会给Web服务器(如Tomcat、Nginx)等设置一些特殊的访问端口，比如<code>87,6666,556,6667</code>等。</p>
<p>如果用Chorme访问就会报类似错误，如下所示： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">错误312(net：：ERR_UNSAFE_PORT)</div></pre></td></tr></table></figure>
<p>如果用Firefox访问就会报类似错误，如下所示： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">此地址访问受限，此地址使用了一个通常用于网络浏览以外目的的端口。出于安全原因，Firefox 取消了该请求。</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>如果一定要使用上述端口，可使用以下的方法解决：</p>
<ul>
<li>Firefox</li>
</ul>
<p>在Firefox地址栏输入<code>about:config</code>，然后在右键新建一个字符串键<code>network.security.ports.banned.override</code>，值就是将需访问网站的端口号即可。如有多个就半角逗号隔开，例：<code>87,6666,556,6667</code>。在能保证安全的前提下，还简化成这样写<code>0-65535</code>。这样就可以浏览任意端口的网站了。</p>
<ul>
<li>Google Chrome</li>
</ul>
<p>右键单击Chrome快捷方式&gt;&gt;选择属性&gt;&gt;在”目标”对应文本框中添加如下参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--explicitly-allowed-ports=xxx (xxx为目标端口号)</div></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot; --explicitly-allowed-ports=87,6666,556,6667</div></pre></td></tr></table></figure>
<p>Chrome默认支持的端口有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">HTTP: 80, 81, 1025-65535</div><div class="line">HTTPS: 443, 563, 8443 </div><div class="line">FTP: 21</div></pre></td></tr></table></figure>
<ul>
<li>附录</li>
</ul>
<p>Google Chrome 默认非安全端口列表，虽然以上方法可以解决问题，但建议尽量避免以下端口：</p>
<blockquote>
<p>  1,    // tcpmux<br>  7,    // echo<br>  9,    // discard<br>  11,   // systat<br>  13,   // daytime<br>  15,   // netstat<br>  17,   // qotd<br>  19,   // chargen<br>  20,   // ftp data<br>  21,   // ftp access<br>  22,   // ssh<br>  23,   // telnet<br>  25,   // smtp<br>  37,   // time<br>  42,   // name<br>  43,   // nicname<br>  53,   // domain<br>  77,   // priv-rjs<br>  79,   // finger<br>  87,   // ttylink<br>  95,   // supdup<br>  101,  // hostriame<br>  102,  // iso-tsap<br>  103,  // gppitnp<br>  104,  // acr-nema<br>  109,  // pop2<br>  110,  // pop3<br>  111,  // sunrpc<br>  113,  // auth<br>  115,  // sftp<br>  117,  // uucp-path<br>  119,  // nntp<br>  123,  // NTP<br>  135,  // loc-srv /epmap<br>  139,  // netbios<br>  143,  // imap2<br>  179,  // BGP<br>  389,  // ldap<br>  465,  // smtp+ssl<br>  512,  // print / exec<br>  513,  // login<br>  514,  // shell<br>  515,  // printer<br>  526,  // tempo<br>  530,  // courier<br>  531,  // chat<br>  532,  // netnews<br>  540,  // uucp<br>  556,  // remotefs<br>  563,  // nntp+ssl<br>  587,  // stmp+ssl<br>  601,  // Reliable Syslog Service<br>  636,  // ldap+ssl<br>  993,  // ldap+ssl<br>  995,  // pop3+ssl<br>  2049, // nfs<br>  3659, // apple-sasl / PasswordServer<br>  4045, // lockd<br>  6000, // X11<br>  6665, // Alternate IRC [Apple addition]<br>  6666, // Alternate IRC [Apple addition]<br>  6667, // Standard IRC [Apple addition]<br>  6668, // Alternate IRC [Apple addition]<br>  6669, // Alternate IRC [Apple addition]</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux压力测试软件Stress使用指南]]></title>
      <url>http://www.hi-linux.com/posts/59095.html</url>
      <content type="html"><![CDATA[<p>为了测试服务器的负载情况，给大家推荐Stress这个压力测试工具。Stress是一个Posix系统下生成Cpu/Menory/IO/Disk负载的工具。 </p>
<p>项目址址: <a href="http://weather.ou.edu/~apw/projects/stress/" target="_blank" rel="external">http://weather.ou.edu/~apw/projects/stress/</a></p>
<a id="more"></a>
<h3 id="Stress安装"><a href="#Stress安装" class="headerlink" title="Stress安装"></a>Stress安装</h3><p>CentOS 7</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 启用三方源</div><div class="line">$ rpm  -ivh http://apt.sw.be/redhat/el7/en/x86_64/rpmforge/RPMS/rpmforge-release-0.5.3-1.el7.rf.x86_64.rpm</div><div class="line"></div><div class="line"># 安装Stress</div><div class="line">$ yum install stress</div></pre></td></tr></table></figure>
<p>CentOS 6</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 启用三方源</div><div class="line">$ yum install epel-release</div><div class="line"></div><div class="line"># 安装Stress</div><div class="line">$ yum install stress</div></pre></td></tr></table></figure>
<h3 id="Stress参数说明"><a href="#Stress参数说明" class="headerlink" title="Stress参数说明"></a>Stress参数说明</h3><ul>
<li>Stress使用语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Usage: stress [OPTION [ARG]] ...</div><div class="line"> -?, --help         show this help statement</div><div class="line">     --version      show version statement</div><div class="line"> -v, --verbose      be verbose</div><div class="line"> -q, --quiet        be quiet</div><div class="line"> -n, --dry-run      show what would have been done</div><div class="line"> -t, --timeout N    timeout after N seconds</div><div class="line">     --backoff N    wait factor of N microseconds before work starts</div><div class="line"> -c, --cpu N        spawn N workers spinning on sqrt()</div><div class="line"> -i, --io N         spawn N workers spinning on sync()</div><div class="line"> -m, --vm N         spawn N workers spinning on malloc()/free()</div><div class="line">     --vm-bytes B   malloc B bytes per vm worker (default is 256MB)</div><div class="line">     --vm-stride B  touch a byte every B bytes (default is 4096)</div><div class="line">     --vm-hang N    sleep N secs before free (default is none, 0 is inf)</div><div class="line">     --vm-keep      redirty memory instead of freeing and reallocating</div><div class="line"> -d, --hdd N        spawn N workers spinning on write()/unlink()</div><div class="line">     --hdd-bytes B  write B bytes per hdd worker (default is 1GB)</div><div class="line">     --hdd-noclean  do not unlink files created by hdd workers</div><div class="line"></div><div class="line">Example: stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 10s</div></pre></td></tr></table></figure>
<ul>
<li>Stress参数说明</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">-? 显示帮助信息</div><div class="line">-v 显示版本号</div><div class="line">-q 不显示运行信息</div><div class="line">-n，--dry-run 显示已经完成的指令执行情况</div><div class="line">-t --timeout N 指定运行N秒后停止</div><div class="line">   --backoff N 等待N微妙后开始运行</div><div class="line">-c --cpu 产生n个进程 每个进程都反复不停的计算随机数的平方根</div><div class="line">-i --io  产生n个进程 每个进程反复调用sync()，sync()用于将内存上的内容写到硬盘上</div><div class="line">-m --vm n 产生n个进程,每个进程不断调用内存分配malloc和内存释放free函数</div><div class="line">   --vm-bytes B 指定malloc时内存的字节数 (默认256MB)</div><div class="line">   --vm-hang N 指示每个消耗内存的进程在分配到内存后转入休眠状态，与正常的无限分配和释放内存的处理相反，这有利于模拟只有少量内存的机器</div><div class="line">-d --hadd n 产生n个执行write和unlink函数的进程</div><div class="line">   --hadd-bytes B 指定写的字节数，默认是1GB</div><div class="line">   --hadd-noclean 不要将写入随机ASCII数据的文件Unlink</div><div class="line">   </div><div class="line">时间单位可以为秒s，分m，小时h，天d，年y，文件大小单位可以为K，M，G</div></pre></td></tr></table></figure>
<h3 id="Stress使用实例"><a href="#Stress使用实例" class="headerlink" title="Stress使用实例"></a>Stress使用实例</h3><ul>
<li>产生13个cpu进程4个io进程1分钟后停止运行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ stress -c 13 -i 4 --verbose --timeout 1m</div></pre></td></tr></table></figure>
<ul>
<li>产生3个cpu进程、3个io进程、2个10M的malloc()/free()进程，并且vm进程中malloc的字节不释放</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ stress --cpu 3 --io 3 --vm 2 --vm-bytes 10000000 --vm-keep --verbose</div></pre></td></tr></table></figure>
<ul>
<li>测试硬盘，通过mkstemp()生成800K大小的文件写入硬盘，对CPU、内存的使用要求很低</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ stress -d 1 --hdd-noclean --hdd-bytes 800k</div></pre></td></tr></table></figure>
<ul>
<li>产生13个进程，每个进程都反复不停的计算由rand ()产生随机数的平方根</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ stress -c 13</div></pre></td></tr></table></figure>
<ul>
<li>产生1024个进程，仅显示出错信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ stress --quiet --cpu 1k</div></pre></td></tr></table></figure>
<ul>
<li>产生4个进程，每个进程反复调用sync()，sync()用于将内存上的内容写到硬盘上</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ stress -i 4</div></pre></td></tr></table></figure>
<ul>
<li>向磁盘中写入固定大小的文件，这个文件通过调用mkstemp()产生并保存在当前目录下，默认是文件产生后就被执行unlink(清除)操作，但是可以使用<code>--hdd-bytes</code>选项将产生的文件全部保存在当前目录下，这会将你的磁盘空间逐步耗尽</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 生成小文件</div><div class="line">$ stress -d 1 --hdd-noclean --hdd-bytes 13</div><div class="line"></div><div class="line"># 生成大文件</div><div class="line">$ stress -d 1 --hdd-noclean --hdd-bytes 3G</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://my.oschina.net/guol/blog/700571" target="_blank" rel="external">http://my.oschina.net/guol/blog/700571</a><br><a href="http://www.cnblogs.com/javaee6/p/4642744.html" target="_blank" rel="external">http://www.cnblogs.com/javaee6/p/4642744.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux命令行下交互式HTTP客户端--HTTP Prompt]]></title>
      <url>http://www.hi-linux.com/posts/57570.html</url>
      <content type="html"><![CDATA[<p>HTTP Prompt是一个交互式的命令行HTTP客户端，支持自动完成、语法高亮，基于HTTPie和prompt_toolkit构建。HTTP Prompt相对于其它命令行的HTTP客户端(如HTTPie、Curl等)使用上更加直观方便。如对HTTPie有兴趣，可参考之前写的[<a href="http://www.hi-linux.com/2016/05/12/%E5%A6%82%E4%BD%95%E7%94%A8httpie%E6%9B%B4%E9%AB%98%E6%95%88%E7%9A%84%E8%B0%83%E8%AF%95%E6%8E%A5%E5%8F%A3/">如何用httpie更高效的调试接口</a>] 一文。</p>
<p>项目地址: <a href="https://github.com/eliangcs/http-prompt" target="_blank" rel="external">https://github.com/eliangcs/http-prompt</a></p>
<a id="more"></a>
<p>先展示一下HTTP Prompt官方给出的效果图。</p>
<p><img src="http://www.hi-linux.com/img/linux/http-prompt.gif" alt=""></p>
<p>有没有觉得很酷！</p>
<h3 id="HTTP-Prompt安装"><a href="#HTTP-Prompt安装" class="headerlink" title="HTTP Prompt安装"></a>HTTP Prompt安装</h3><p>通过Python包管理工具安装</p>
<p>Root用户</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install http-prompt</div></pre></td></tr></table></figure>
<p>非Root用户</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo pip install http-prompt</div></pre></td></tr></table></figure>
<p>注：需要Root权限，否则会报权限错误。这种方式会安装到全系统中，所有用户都可使用。</p>
<p>使用<code>--user</code>选项可只安装到你的用户目录中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install --user http-prompt</div></pre></td></tr></table></figure>
<p>升级 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install -U http-prompt</div></pre></td></tr></table></figure>
<h3 id="HTTP-Prompt配置"><a href="#HTTP-Prompt配置" class="headerlink" title="HTTP Prompt配置"></a>HTTP Prompt配置</h3><p>HTTP Prompt首次运行时会建立一个用户配置文件。配置文件默认放在<code>~/.config/http-prompt/config.py</code>(Linux)或<code>~/AppData/Local/http-prompt/config.py</code>(Windows)。</p>
<p>config.py提供<code>command_style</code>、<code>output_style</code>、<code>pager</code>三个选项可对输出的样式进行控制。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ cat ~/.config/http-prompt/config.py</div><div class="line"></div><div class="line"># Highlighting style for prompt commands. Available values:</div><div class="line"># algol, algol_nu, autumn, borland, bw, colorful, default, emacs, friendly,</div><div class="line"># fruity, igor, lovelace, manni, monokai, murphy, native, paraiso-dark,</div><div class="line"># paraiso-light, pastie, perldoc, rrt, solarized, tango, trac, vim, vs, xcode.</div><div class="line"># See gallery at http://eliangcs.github.io/http-prompt/style-gallery.html</div><div class="line">command_style = &apos;solarized&apos;</div><div class="line"></div><div class="line"># Highlighting style for HTTPie&apos;s output. Available values are the same as</div><div class="line"># command_style. Set this to None to use HTTPie&apos;s default style, which you</div><div class="line"># can refer to https://github.com/jkbrzt/httpie#default_options</div><div class="line">output_style = None</div><div class="line"></div><div class="line"># The tool used to paginate output. Available values: &apos;less&apos; and &apos;more&apos;.</div><div class="line"># Note that &apos;more&apos; does not support ANSI colors.</div><div class="line">pager = &apos;less&apos;</div></pre></td></tr></table></figure>
<h3 id="HTTP-Prompt使用"><a href="#HTTP-Prompt使用" class="headerlink" title="HTTP Prompt使用"></a>HTTP Prompt使用</h3><p>开始一个会话，执行如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 访问一个URL</div><div class="line">$ http-prompt http://httpbin.org</div><div class="line"></div><div class="line"># 如访问URL需身份验证，可通过指定相应参数。</div><div class="line">$ http-prompt localhost:8000/api --auth user:pass username=somebody</div></pre></td></tr></table></figure>
<p>进入一个会话后，你可执行以下命令。</p>
<p>使用cd命令改变URL地址:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 切换到一个相对地址</div><div class="line">&gt; cd api/v1</div><div class="line"></div><div class="line"># 切换到一个绝对地址</div><div class="line">&gt; cd http://localhost/api</div></pre></td></tr></table></figure>
<p>要添加headers、查询字符串，使用的语法与HTTPie类似。如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; Content-Type:application/json username=john</div><div class="line">&gt; &apos;name=John Doe&apos; apikey==abc</div><div class="line">&gt; Authorization:&quot;Bearer auth_token&quot;</div></pre></td></tr></table></figure>
<p>还可以添加HTTPie选项，如以下这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; --form --auth user:pass</div><div class="line">&gt; --verify=no username=jane</div></pre></td></tr></table></figure>
<p>通过HTTPie生成提交预览：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; httpie post</div><div class="line">http --auth user:pass --form POST http://httpbin.org/api apikey==abc username=john</div></pre></td></tr></table></figure>
<p>您可以通过命令httpie提供选项和参数暂时覆盖请求参数，该覆盖不会影响以后的请求。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 没有初始参数</div><div class="line">&gt; httpie</div><div class="line">http http://localhost</div><div class="line"></div><div class="line"># 临时覆盖请求参数</div><div class="line">&gt; httpie /api/something page==2 --json</div><div class="line">http --json http://localhost/api/something page==2</div><div class="line"></div><div class="line"># 当前状态并不受影响</div><div class="line">&gt; httpie</div><div class="line">http http://localhost</div></pre></td></tr></table></figure>
<p>要实际发送请求, 使用以下HTTP方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; get</div><div class="line">&gt; post</div><div class="line">&gt; put</div><div class="line">&gt; patch</div><div class="line">&gt; delete</div><div class="line">&gt; head</div></pre></td></tr></table></figure>
<p>以上的HTTP方法也支持暂时覆盖所有选项和参数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 没有初始参数</div><div class="line"></div><div class="line">&gt; httpie</div><div class="line">http http://localhost</div><div class="line"></div><div class="line"># 发送一个包含参数的请求</div><div class="line">&gt; post /api/v1 --form name=jane</div><div class="line"></div><div class="line"># 当前状态并不受影响</div><div class="line">&gt; httpie</div><div class="line">http http://localhost</div></pre></td></tr></table></figure>
<p>删除现有的header、参数、或HTTPie选项:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; rm -h Content-Type</div><div class="line">&gt; rm -q apikey</div><div class="line">&gt; rm -b username</div><div class="line">&gt; rm -o --auth</div></pre></td></tr></table></figure>
<p>删除当前会话中所有参数和选项:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; rm *</div></pre></td></tr></table></figure>
<p>离开当前会话:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; exit</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="https://github.com/eliangcs/http-prompt" target="_blank" rel="external">https://github.com/eliangcs/http-prompt</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[详解Linux初始化过程-init系统]]></title>
      <url>http://www.hi-linux.com/posts/45475.html</url>
      <content type="html"><![CDATA[<p>使用官方推荐的Omnibus package方式部署gitlab-ce后，发现默认所有对应服务都是开机启动的,由于想关闭gitlab-ce开机启动。把常用的<code>/etc/init.d</code>、<code>/etc/rc.local</code>都找了个遍都没发现相关启动脚本。</p>
<p>最后搜索整个etc目录发现了<code>/etc/init/gitlab-runsvdir.conf</code>这个文件，看看它的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ cat  /etc/init/gitlab-runsvdir.conf</div><div class="line"></div><div class="line">start on runlevel [2345]</div><div class="line">stop on shutdown</div><div class="line">respawn</div><div class="line">post-stop script</div><div class="line">   # To avoid stomping on runsv&apos;s owned by a different runsvdir</div><div class="line">   # process, kill any runsv process that has been orphaned, and is</div><div class="line">   # now owned by init (process 1).</div><div class="line">   pkill -HUP -P 1 runsv$</div><div class="line">end script</div><div class="line">exec /opt/gitlab/embedded/bin/runsvdir-start</div></pre></td></tr></table></figure>
<p>这下水落石出了，gitlab-ce开机启动是从这里进行的。</p>
<p>注：CentOS6开始转用Upstart代替以往的init.d/rcX.d的线性启动方式。(gitlab-ce使用了Upstart方式管理开机启动)</p>
<a id="more"></a>
<p>解决这个问题的过程中，发现了以下两篇好文分享给大家！</p>
<p>Linux初始化过程(init系统): <a href="http://monklof.com/post/14/" target="_blank" rel="external">http://monklof.com/post/14/</a><br>理解Upstart: <a href="http://www.mike.org.cn/articles/understand-upstart/" target="_blank" rel="external">http://www.mike.org.cn/articles/understand-upstart/</a></p>
<p>以下是主要部分内容的节选</p>
<p><strong>Linux初始化过程(init系统)</strong></p>
<p>这篇文章的目的是希望能从一个全局和细节的角度去介绍Linux系统的初始化启动过程。</p>
<p>主要从三个方面尝试介绍和总结一下这方面的知识：</p>
<ol>
<li>系统初始化过程简介</li>
<li>init系统启动具体过程</li>
<li>工具介绍</li>
</ol>
<p><strong>init系统简介</strong></p>
<p>操作系统启动过程中，linux内核加载完成之后，内核初始化的最后一步就是运行 init 程序。init程序负责在系统启动时运行一些服务程序或脚本，来让一些重要和必要的服务开机就能运行起来。系统基本服务程序如network, crond, iptables等和用户安装服务程序如mysqld, nginx等，都是通过init系统来完成开机启动过程。</p>
<p>linux世界中init系统有许多种类，不同的发行版采用了不同的实现。大多数Linux发行版的init系统是和System V相兼容的，被称为”System V init(sysvinit)”，这是人们最熟悉的init系统。早期Ubuntu也是使用的sysvinit，但是Ubuntu从6.10开始，开始用 Upstart 替换sysvinit，成为Ubuntu新一代init系统。现在也有一些linux发行版如Fedora、Debian也开始或者计划采用 systemd 来作为init系统。</p>
<p>(System V 是Unix众多版本中的一个分支，于1983年首次发布)</p>
<p>在2014年Debian项目决定在未来的版本中使用systemd后，马克·沙特尔沃思(Mark Richard Shuttleworth)宣布Ubuntu将开始计划将自身迁移到systemd，以保持与上游一致。但是到目前为止(ubuntu 14.10)，ubuntu的默认的init系统还是Upstart，Upstart也兼容sysvinit，所以本文主要介绍”System V init”和Upstart这两种init系统。</p>
<p>(Mark Richard，南非，是Canonical公司的老板，Ubuntu这个分支也是他创立的，这个人还自费两千万美元乘坐宇宙飞船在太空中翱翔了10天。)</p>
<p><strong>System V init</strong></p>
<p>Ubuntu下，init系统程序位于/sbin/init ，大多数Linux发行版的init程序都位于目录/sbin/或者/bin/之下。</p>
<p>先介绍sysvinit中的一个概念： 运行级别(Run Level) 。它是一个数字，代表系统现在处于什么样的运行模式中，sysvinit根据运行级别来判断需要启动哪些服务。常有的运行级别有：</p>
<p><img src="http://www.hi-linux.com/img/linux/runlevel.jpg" alt=""></p>
<p>另外，介绍两个重要的文件/目录：</p>
<ul>
<li>/etc/inittab中存放了系统启动时的默认运行级别，假设为N。</li>
<li>/etc/rcN.d/目录之下的程序就是对应N运行级别下的程序，系统进入运行级别N时，会按序依次运行该目录下相应程序完成初始化过程。</li>
</ul>
<p>(注：这些文件在Ubuntu中应该是只有6.10之前的版本有，6.10之后init系统换成了Upstart)</p>
<p>sysvinit在启动时，就会读取/etc/inittab文件，获得默认的运行级别(假设为N)，然后依次启动/etc/rcN.d/中的相应程序，完成开机的初始化过程。</p>
<p>由于很多程序是需要放在多个运行级别下运行的，所以为了避免冗余，/etc/rcN.d/目录之下放的其实是真正启动程序的软连接，真正的启动程序一般存放于/etc/init.d/之下。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ ls -lh /etc/rc3.d/</div><div class="line">total 0</div><div class="line">lrwxrwxrwx  1 root root 16 Apr 19  2013 K02puppet -&gt; ../init.d/puppet</div><div class="line">lrwxrwxrwx  1 root root 14 Mar 25  2014 K10cups -&gt; ../init.d/cups</div><div class="line">lrwxrwxrwx. 1 root root 19 Apr 19  2013 K10saslauthd -&gt; ../init.d/saslauthd</div><div class="line">lrwxrwxrwx  1 root root 18 Mar 25  2014 K15svnserve -&gt; ../init.d/svnserve</div><div class="line">lrwxrwxrwx  1 root root 16 Dec 12 10:25 K36mysqld -&gt; ../init.d/mysqld</div><div class="line">lrwxrwxrwx. 1 root root 20 Apr 19  2013 K50netconsole -&gt; ../init.d/netconsole</div><div class="line">lrwxrwxrwx. 1 root root 21 Apr 19  2013 K87restorecond -&gt; ../init.d/restorecond</div><div class="line">lrwxrwxrwx  1 root root 15 Mar 25  2014 K89rdisc -&gt; ../init.d/rdisc</div><div class="line">lrwxrwxrwx  1 root root 19 Mar 25  2014 K92ip6tables -&gt; ../init.d/ip6tables</div><div class="line">lrwxrwxrwx  1 root root 18 Mar 25  2014 K92iptables -&gt; ../init.d/iptables</div><div class="line">lrwxrwxrwx  1 root root 17 Jun 16  2014 S01sysstat -&gt; ../init.d/sysstat</div><div class="line">lrwxrwxrwx  1 root root 17 Mar 25  2014 S10network -&gt; ../init.d/network</div><div class="line">lrwxrwxrwx. 1 root root 16 Apr 19  2013 S11auditd -&gt; ../init.d/auditd</div><div class="line">lrwxrwxrwx. 1 root root 21 Apr 19  2013 S11portreserve -&gt; ../init.d/portreserve</div><div class="line">lrwxrwxrwx  1 root root 17 Mar 25  2014 S12rsyslog -&gt; ../init.d/rsyslog</div><div class="line">lrwxrwxrwx  1 root root 14 Dec 12 10:25 S13sssd -&gt; ../init.d/sssd</div></pre></td></tr></table></figure>
<p>你可能觉得这些程序(软连接)的命名方式有点奇怪，是的，它很奇怪，但是sysvinit就是用程序的文件名来存储程序的一些简单控制信息。程序文件名的格式为： S/K + NN + NAME。系统进入默认运行级别时，init会杀掉所有以K开头的程序，启动以S开头的程序，按照NN的大小，从低到高开始启动/停止程序。NAME则是程序的名字，也是启动之后进程的名字。Sysvinit通过这种命名，来达到控制启动顺序的目的。</p>
<p>我的机器默认的运行级别是3(Multi-User mode)，所以开机启动的时候会启动或停止 /etc/rc3.d/目录下面的程序。根据前面的规则，进入该运行级别时，这些进程如果在运行的话，会被依次关闭：puppet -&gt; cups/saslauthd -&gt; svnserve等。这些程序会被依次启动：sysstat -&gt; network -&gt; auditd等。</p>
<p>值得特别注意的是其中的/etc/rc.local程序，这是一个可执行shell脚本，不仅仅在运行级别3(Multi-User mode)下有，在级别2(Multi-User mode without networking)和级别5(GUI mode)都会有。所以只要机器正常开机，这个脚本就会自动运行。一般情况下该脚本内容为空，如果你需要将一些程序加入开机自启的话，就将程序命令增加到这个脚本中就可以了。</p>
<p>以上就是sysvinit的初始化过程。</p>
<p>其实上面是一个抽象和简化版的初始过程，更加本质的初始过程是这样的(可跳过)：</p>
<ol>
<li>/etc/inittab文件真正的作用是：描述哪些程序在系统正常启动的时候需要运行。</li>
<li>/sbin/init其实只做一件事情：读取/etc/inittab，按配置启动其中的程序。启动/etc/rcN.d/中的程序，并不是/sbin/init做的事情，而是在/etc/inittab中的配置的程序/etc/rc.d/rc(有些系统位于”/etc/rc”)来完成这个过程。</li>
<li>典型的/etc/inittab的配置是这样的：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"># Level to run in</div><div class="line">id:2:initdefault:</div><div class="line"></div><div class="line"># Boot-time system configuration/initialization script.</div><div class="line">si::sysinit:/etc/rc.sysinit</div><div class="line"></div><div class="line"># What to do in single-user mode.</div><div class="line">~:S:wait:/sbin/sulogin</div><div class="line"></div><div class="line"># /etc/init.d executes the S and K scripts upon change</div><div class="line"># of runlevel.</div><div class="line">#</div><div class="line"># Runlevel 0 is halt.</div><div class="line"># Runlevel 1 is single-user.</div><div class="line"># Runlevels 2-5 are multi-user.</div><div class="line"># Runlevel 6 is reboot.</div><div class="line"></div><div class="line">l0:0:wait:/etc/rc 0</div><div class="line">l1:1:wait:/etc/rc 1</div><div class="line">l2:2:wait:/etc/rc 2</div><div class="line">l3:3:wait:/etc/rc 3</div><div class="line">l4:4:wait:/etc/rc 4</div><div class="line">l5:5:wait:/etc/rc 5</div><div class="line">l6:6:wait:/etc/rc 6</div><div class="line"></div><div class="line"># What to do at the &quot;3 finger salute&quot;.</div><div class="line">ca::ctrlaltdel:/sbin/shutdown -t3 -r now</div><div class="line"></div><div class="line"># Runlevel 2,3: getty on virtual consoles</div><div class="line"># Runlevel   3: mgetty on terminal (ttyS0) and modem (ttyS1)</div><div class="line">1:23:respawn:/sbin/mingetty tty1</div><div class="line">2:23:respawn:/sbin/mingetty tty2</div><div class="line">3:23:respawn:/sbin/mingetty tty3</div><div class="line">4:23:respawn:/sbin/mingetty tty4</div><div class="line">S0:3:respawn:/sbin/agetty ttyS0 9600 vt100-nav</div><div class="line">S1:3:respawn:/sbin/mgetty -x0 -D ttyS1</div></pre></td></tr></table></figure>
<p>其中这几行的作用就是：在系统进入N运行级别时，执行命令 “/etc/rc.d/rc N”：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">l0:0:wait:/etc/rc 0</div><div class="line">l1:1:wait:/etc/rc 1</div><div class="line">l2:2:wait:/etc/rc 2</div><div class="line">l3:3:wait:/etc/rc 3</div><div class="line">l4:4:wait:/etc/rc 4</div><div class="line">l5:5:wait:/etc/rc 5</div><div class="line">l6:6:wait:/etc/rc 6</div></pre></td></tr></table></figure>
<p>rc 这个程序按照文件命名，按序启动或停止 /etc/rcN.d/ 目录下相应的程序。所以，真正操作/etc/rcN.d/目录下程序的启动和停止的其实是rc，并不是init程序。但是我们任然可以把这个过程归结于”system v init”系统的功能。</p>
<p>关于inittab的详细介绍可以看<a href="http://unixhelp.ed.ac.uk/CGI/man-cgi?inittab+5" target="_blank" rel="external">这里</a></p>
<p><strong>开机自启服务程序编写</strong></p>
<p>将一个编好的服务程序(作为守护进程存在，提供服务，比如nginx/sshd)，作为固定服务加入系统中的话，在sysvinit中这样做就好了：</p>
<ol>
<li>将服务脚本置于/etc/init.d/中。</li>
<li>在相关运行级别创建启动软连接，例如，开机自启的话，在/etc/rc2.d/、/etc/rc3.d/、/etc/rc5.d/中创建启动服务脚本的软连接(命名S开头)。</li>
<li>(optional)如果有需要的话，在相关运行级别创建停止服务软连接。</li>
</ol>
<p>举例来说，假设是你编写了一个nginx的服务，现在要将其添加进系统启动服务中：</p>
<p>1.将服务程序置于/etc/init.d/nginx</p>
<p>2.在/etc/rc2.d/、/etc/rc3.d/、/etc/rc5.d/中创建启动软连接：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># ln -s /etc/init.d/nginx /etc/rc2.d/S20nginx</div><div class="line"># ln -s /etc/init.d/nginx /etc/rc3.d/S20nginx</div><div class="line"># ln -s /etc/init.d/nginx /etc/rc5.d/S20nginx</div></pre></td></tr></table></figure>
<p>3.在/etc/rc0.d/，/etc/rc1.d/，/etc/rc6.d/中，创建停止服务软连接：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># ln -s /etc/init.d/nginx /etc/rc0.d/K20nginx</div><div class="line"># ln -s /etc/init.d/nginx /etc/rc1.d/K20nginx</div><div class="line"># ln -s /etc/init.d/nginx /etc/rc6.d/K20nginx</div></pre></td></tr></table></figure>
<p>这样，当系统启动的时候，就会启动nginx，而关机、重启的时候，会stop nginx。</p>
<p><strong>小结</strong></p>
<p>sysvinit初始化启动过程比较明朗：开机时按序启动/etc/rcN.d/中的以”S”开头的程序。/etc/rcN.d/中的程序大多真正存放于/etc/init.d/目录之下。</p>
<p><strong>Upstart</strong></p>
<p>可以看到在sysvinit中，服务是按照顺序来执行的，这很影响效率。另一方面，sysvinit中，服务是预设的，不能实时启动(比如在系统被挂载了一个磁盘的时候自动启动)。而Upstart可以解决这些问题。它是基于事件机制的，可以按需启动服务，性能和很多其他方面都比sysvinit强，所以upstart被后来的Ubuntu等linux发行版采用。</p>
<p>在Upstart中，程序执行单位被称作作业(Job)，所有的init作业都必须放置于目录/etc/init/之下，使用Upstart自己的配置文件来描述Job内容。Upstart启动时，从 /etc/init/ 目录中读取各个Job的配置文件，获取所有Job。然后发出Startup信号，所有监听这个信号的作业会被执行。在作业执行过程中，作业本身也可以自己发出信号，其他监听这个信号的服务接着就会被启动执行。Upstart通过这样的方式来达到异步和实时控制作业的启动执行。</p>
<p>比如在我的博客服务器中(精简)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ ls -lh /etc/init/</div><div class="line">total 356K</div><div class="line">(...)</div><div class="line">-rw-r--r-- 1 root root  297 Feb  9  2013 cron.conf</div><div class="line">-rw-r--r-- 1 root root  489 Nov 11  2013 dbus.conf</div><div class="line">-rw-r--r-- 1 root root  273 Nov 19  2010 dmesg.conf</div><div class="line">-rw-r--r-- 1 root root 1.4K Apr 11  2014 failsafe.conf</div><div class="line">-rw-r--r-- 1 root root  267 Apr 11  2014 flush-early-job-log.conf</div><div class="line">-rw-r--r-- 1 root root 1.3K Mar 14  2012 friendly-recovery.conf</div><div class="line">-rw-r--r-- 1 root root  284 Jul 23  2013 hostname.conf</div><div class="line">-rw-r--r-- 1 root root  557 Apr 16  2014 hwclock.conf</div><div class="line">(...)</div><div class="line">-rw-r--r-- 1 root root 1.8K Feb 19  2014 mysql.conf</div><div class="line">-rw-r--r-- 1 root root 2.5K Mar 20  2014 networking.conf</div><div class="line">-rw-r--r-- 1 root root  534 Feb 16  2014 passwd.conf</div><div class="line">(...)</div><div class="line">-rw-r--r-- 1 root root  661 Apr 11  2014 rc.conf</div><div class="line">(...)</div><div class="line">-rw-r--r-- 1 root root 1.6K Apr 11  2014 rc-sysinit.conf</div></pre></td></tr></table></figure>
<p>这些”*.conf”都是作业配置文件，在这个文件中指出作业什么start，什么时候stop，主进程是什么等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">xxxx:/etc/init$ ls | xargs grep &quot;startup&quot;</div><div class="line">friendly-recovery.conf:emits startup</div><div class="line">friendly-recovery.conf:    initctl emit startup</div><div class="line">hostname.conf:# This task is run on startup to set the system hostname from /etc/hostname,</div><div class="line">hostname.conf:start on startup</div><div class="line">kmod.conf:start on (startup</div><div class="line">mountall.conf:start on startup</div><div class="line">plymouth-ready.conf:start on startup or started plymouth-splash</div><div class="line">plymouth-upstart-bridge.conf:start on (startup</div><div class="line">udev-fallback-graphics.conf:# We only want this job to happen once per boot, hence &apos;startup and ...&apos;.</div><div class="line">udev-fallback-graphics.conf:start on (startup and </div><div class="line">udev-finish.conf:start on (startup</div><div class="line">udevmonitor.conf:start on (startup</div><div class="line">udevtrigger.conf:start on (startup</div></pre></td></tr></table></figure>
<p>作业hostname、kmod、mountall等都会监听startup信号(start on EVENT这个指令表示在EVENT发生时启动该程序)。Startup收集作业配置信息完成后，会发出”startup”信号，这些作业就会被执行了。</p>
<p>你可能想，那其他程序怎么办？</p>
<p>其他程序会监听这些程序发射的事件信号，当该事件发生时，那些程序也会被执行。比如mountall这个job就会发射”filesystem”这些类似的基础事件信号，这个代表着文件系统已经就绪了，很多其他作业(比如networking)都是监听这个信号，这样一级一级传递，启动程序就会被按照事件发生顺序一级一级的启动执行了。</p>
<p><strong>兼容sysvinit</strong></p>
<p>最开始我们说到Upstart是兼容sysvinit的，怎么做到的？</p>
<p>在/etc/init/下有两个重要的作业： 作业<code>rc-sysinit</code>和<code>作业 rc</code></p>
<p>我们看一下这两个文件内容：</p>
<p><strong>作业rc-sysinit配置:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">XXXX:/etc/init$ cat rc-sysinit.conf </div><div class="line"># rc-sysinit - System V initialisation compatibility</div><div class="line">#</div><div class="line"># This task runs the old System V-style system initialisation scripts,</div><div class="line"># and enters the default runlevel when finished.</div><div class="line"></div><div class="line">description    &quot;System V initialisation compatibility&quot;</div><div class="line">author        &quot;Scott James Remnant &lt;scott@netsplit.com&gt;&quot;</div><div class="line"></div><div class="line">start on (filesystem and static-network-up) or failsafe-boot</div><div class="line">stop on runlevel</div><div class="line"></div><div class="line"># Default runlevel, this may be overriden on the kernel command-line</div><div class="line"># or by faking an old /etc/inittab entry</div><div class="line">env DEFAULT_RUNLEVEL=2</div><div class="line"></div><div class="line">emits runlevel</div><div class="line"></div><div class="line"># There can be no previous runlevel here, but there might be old</div><div class="line"># information in /var/run/utmp that we pick up, and we don&apos;t want</div><div class="line"># that.</div><div class="line">#</div><div class="line"># These override that</div><div class="line">env RUNLEVEL=</div><div class="line">env PREVLEVEL=</div><div class="line"></div><div class="line">console output</div><div class="line">env INIT_VERBOSE</div><div class="line"></div><div class="line">task</div><div class="line"></div><div class="line">script</div><div class="line">    # Check for default runlevel in /etc/inittab</div><div class="line">    if [ -r /etc/inittab ]</div><div class="line">    then</div><div class="line">    eval &quot;$(sed -nre &apos;s/^[^#][^:]*:([0-6sS]):initdefault:.*/DEFAULT_RUNLEVEL=&quot;\1&quot;;/p&apos; /etc/inittab || true)&quot;</div><div class="line">    fi</div><div class="line"></div><div class="line">    # Check kernel command-line for typical arguments</div><div class="line">    for ARG in $(cat /proc/cmdline)</div><div class="line">    do</div><div class="line">    case &quot;$&#123;ARG&#125;&quot; in</div><div class="line">    -b|emergency)</div><div class="line">        # Emergency shell</div><div class="line">        [ -n &quot;$&#123;FROM_SINGLE_USER_MODE&#125;&quot; ] || sulogin</div><div class="line">        ;;</div><div class="line">    [0123456sS])</div><div class="line">        # Override runlevel</div><div class="line">        DEFAULT_RUNLEVEL=&quot;$&#123;ARG&#125;&quot;</div><div class="line">        ;;</div><div class="line">    -s|single)</div><div class="line">        # Single user mode</div><div class="line">        [ -n &quot;$&#123;FROM_SINGLE_USER_MODE&#125;&quot; ] || DEFAULT_RUNLEVEL=S</div><div class="line">        ;;</div><div class="line">    esac</div><div class="line">    done</div><div class="line"></div><div class="line">    # Run the system initialisation scripts</div><div class="line">    [ -n &quot;$&#123;FROM_SINGLE_USER_MODE&#125;&quot; ] || /etc/init.d/rcS</div><div class="line"></div><div class="line">    # Switch into the default runlevel</div><div class="line">    telinit &quot;$&#123;DEFAULT_RUNLEVEL&#125;&quot;</div><div class="line">end script</div></pre></td></tr></table></figure>
<p><strong>作业rc的配置：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">XXXX:/etc/init$ cat rc.conf </div><div class="line"># rc - System V runlevel compatibility</div><div class="line">#</div><div class="line"># This task runs the old System V-style rc script when changing between</div><div class="line"># runlevels.</div><div class="line"></div><div class="line">description    &quot;System V runlevel compatibility&quot;</div><div class="line">author        &quot;Scott James Remnant &lt;scott@netsplit.com&gt;&quot;</div><div class="line"></div><div class="line">emits deconfiguring-networking</div><div class="line">emits unmounted-remote-filesystems</div><div class="line"></div><div class="line">start on runlevel [0123456]</div><div class="line">stop on runlevel [!$RUNLEVEL]</div><div class="line"></div><div class="line">export RUNLEVEL</div><div class="line">export PREVLEVEL</div><div class="line"></div><div class="line">console output</div><div class="line">env INIT_VERBOSE</div><div class="line"></div><div class="line">task</div><div class="line"></div><div class="line">script</div><div class="line">if [ &quot;$RUNLEVEL&quot; = &quot;0&quot; -o &quot;$RUNLEVEL&quot; = &quot;1&quot; -o &quot;$RUNLEVEL&quot; = &quot;6&quot; ]; then</div><div class="line">    status plymouth-shutdown 2&gt;/dev/null &gt;/dev/null &amp;&amp; start wait-for-state WAITER=rc WAIT_FOR=plymouth-shutdown || :</div><div class="line">fi</div><div class="line">/etc/init.d/rc $RUNLEVEL</div><div class="line">end script</div></pre></td></tr></table></figure>
<p>你不必看懂每个具体配置细节，只要知道这三个配置指令就可以了：</p>
<ol>
<li>start on EVENT： 在EVENT发生的时候启动该作业</li>
<li>stop on EVENT： 在EVENT发生的时候停止改作业</li>
<li>script … end script： 作业运行主程序脚本内容</li>
</ol>
<p>所以根据以上配置，Upstart兼容sysvinit的过程是这样的：</p>
<ol>
<li>作业rc-sysinit在收到 “(filesystem and static-network-up) or failsafe-boot” 的信号之后由Upstart启动。一切正常的话，rc-sysinit通过telinit完成运行级别信号的发送。</li>
<li>作业rc在收到运行级别信号之后，由Upstart启动。然后rc通过运行/etc/init.d/rc $RUNLEVEL这个命令， 来完成/etc/rcN.d/下相应程序的启动。</li>
</ol>
<p>这样，就完成了兼容sysvinit的过程。</p>
<p>所以，在Upstart之下，你可以有2种方式添加系统服务程序：</p>
<ul>
<li>按照System V 规则编写服务，并置于相应位置。</li>
<li>编写Upstart作业配置文件，置于 /etc/init/ 目录之下。</li>
</ul>
<p><strong>常用工具说明</strong><br>这里介绍一下我们常用的service命令到底怎么回事。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service SCRIPT COMMAND [OPTIONS]</div></pre></td></tr></table></figure>
<p>这个命令的作用是： 运行一个sysvinit 程序或Upstart作业！，所以其是一个既支持Upstart作业，又支持sysvinit程序的命令。运行时，service首先从/etc/init.d/中去找SCRIPT，如果没找着再去/etc/init/目录下去找同名作业配置文件。然后运行这些程序/作业。</p>
<p>需要注意的是，service命令和/etc/rcN.d/这个目录没有任何关系。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">service nginx start # 启动nginx服务</div><div class="line">service nginx stop  # 停止nginx服务</div><div class="line">service nginx restart # 重启nginx服务</div></pre></td></tr></table></figure>
<p>在运行时，COMMAND 和 OPTTIONS都会被完整的传递给SCRIPT。故service nginx start其实最终执行的命令是/etc/init.d/nginx start，”start”这个操作，并不是由service来完成，service仅仅是起到一个寻找脚本位置的作用而已！</p>
<p><strong>总结</strong></p>
<p>三个目录 =&gt;</p>
<ul>
<li>/etc/rcN.d/ 是System V init系统启动时查找的服务程序目录。</li>
<li>/etc/init.d/ 目录是System V init系统真正的服务程序所在地。</li>
<li>/etc/init/ 是Upstart系统寻找作业配置文件的地方。</li>
</ul>
<p>两个文件 =&gt;</p>
<ul>
<li>/etc/inittab 是System V init系统的配置文件，其中有设置默认的运行级别。</li>
<li>/etc/rc.local 是一个用户常用来添加系统启动脚本的地方。</li>
</ul>
<p>一个命令 =&gt;</p>
<ul>
<li>service 是用来操作System V init脚本或Upstart作业的命令接口。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS下使用MyTop实时监控MySQL]]></title>
      <url>http://www.hi-linux.com/posts/26991.html</url>
      <content type="html"><![CDATA[<p>MyTop是一个类似Linux下的<code>top</code>命令风格的MySQL监控工具，MyTop采用Perl开发。MyTop可以监控MySQL当前的连接用户和正在执行的命令。</p>
<p>MyTop的项目页面为：<a href="http://jeremy.zawodny.com/mysql/mytop/" target="_blank" rel="external">http://jeremy.zawodny.com/mysql/mytop/</a></p>
<a id="more"></a>
<h3 id="MyTop安装"><a href="#MyTop安装" class="headerlink" title="MyTop安装"></a>MyTop安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum -y install mytop #epel源</div></pre></td></tr></table></figure>
<h3 id="MyTop命令参数"><a href="#MyTop命令参数" class="headerlink" title="MyTop命令参数"></a>MyTop命令参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ man mytop</div><div class="line"></div><div class="line">-u / --user &lt;USERNAME&gt;：指定 username，预设是 root</div><div class="line">-p / --pass / --password &lt;PASSWORD&gt;：指定password，预设是none</div><div class="line">-h / --host &lt;HOSTNAME[:PORT]&gt;：指定 MySQL server的hostname，预设是localhost</div><div class="line">-P / --port &lt;PORT&gt;：指定连接 MySQL server的port，预设是3306</div><div class="line">-s / --delay &lt;SECONDS&gt;：更新的秒数，预设是5秒</div><div class="line">-d / --db / --database &lt;DATABASE&gt;：指定连接的资料库，预设是test</div><div class="line">-b / --batch / --batchmode：指定为 batch mode，每次更新不会清除旧的显示结果，会将更新资料显示上最上方，预设是unset</div><div class="line">-S / --socket &lt;PATH_TO_SOCKET&gt;：指定使用MySQL socket直接连线，而不使用TCP/IP连线，预设是none(当mytop和MySQL在同一台时才能使用)</div><div class="line">--header or -noheader：是否要显示表头，预设是header</div><div class="line">--color or --nocolor：是否要使用颜色，预设是color</div><div class="line">-i / -idle or -noidle：idle 的thread是否要出现在清单上，预设是idle</div></pre></td></tr></table></figure>
<p>注意: 因<code>.mytop</code>内有MySQL server的密码，请注意档案权限。</p>
<h3 id="MyTop的使用"><a href="#MyTop的使用" class="headerlink" title="MyTop的使用"></a>MyTop的使用</h3><ul>
<li>命令行运行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mytop -uroot -pmysql -d wordpress -h 127.0.0.1</div></pre></td></tr></table></figure>
<ul>
<li>通过配置文件运行</li>
</ul>
<p>MyTop配置文件在<code>~/.mytop</code>,也可在<code>~/.my.cnf</code>文件中配置用户名和密码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ vim ~/.mytop</div><div class="line"></div><div class="line">user=root</div><div class="line">pass=mysql</div><div class="line">host=localhost</div><div class="line">db=wordpress</div><div class="line">delay=5</div><div class="line">port=3306</div><div class="line">socket=/var/lib/mysql//mysql.sock</div><div class="line">batchmode=0</div><div class="line">header=1</div><div class="line">color=1</div><div class="line">idle=1</div></pre></td></tr></table></figure>
<p>注意:socket设置和my.cnf里的路径一样，一般MyTop和Mysql在同一台机器。</p>
<ul>
<li>MyTop远端监控</li>
</ul>
<p>若将MyTop装在另一台机器上时，需要设定MySQL Server上的权限才能远端监控</p>
<p>在MySQL Server上新增一个帐号，并给它Process的权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ mysql -u root -p</div><div class="line">mysql&gt; grant process on *.* to &lt;REMOTE_USERNAME&gt;@&lt;REMOTE_IP&gt; identified by &apos;&lt;PASSWORD&gt;&apos;;</div><div class="line">mysql&gt; flush privileges;</div><div class="line">mysql&gt; exit</div></pre></td></tr></table></figure>
<p>在安装MyTop的机器上，用参数指定或修改配置文件的设定。</p>
<p>参数指定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mytop -u &lt;REMOTE_USERNAME&gt; -p &lt;PASSWORD&gt; -h &lt;MYSQL_SERVER_IP&gt;</div></pre></td></tr></table></figure>
<p>修改配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ vim ~/.mytop</div><div class="line"></div><div class="line">user=&lt;REMOTE_USERNAME&gt;</div><div class="line">pass=&lt;PASSWORD&gt;</div><div class="line">host=&lt;MYSQL_SERVER_IP&gt;</div></pre></td></tr></table></figure>
<ul>
<li>MyTop快捷键</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s：设定更新时间 </div><div class="line">p：暂停画面更新</div><div class="line">q：离开</div><div class="line">u：只看某个使用者的thread</div><div class="line">o：反转排列顺序</div></pre></td></tr></table></figure>
<ul>
<li>监控画面参数解释</li>
</ul>
<p>Mytop和Linux下面的top命令展现的结果类似，下面展示了每个线程的当前的状态并且是动态变化。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ mytop -uroot -pmysql -d wordpress -h 127.0.0.1</div><div class="line"></div><div class="line">MySQL on 127.0.0.1 (5.6.29-log)                                                  up 0+05:44:42 [16:51:31]</div><div class="line"> Queries: 654.0  qps:    0 Slow:     0.0         Se/In/Up/De(%):    00/00/00/00 </div><div class="line">             qps now:    0 Slow qps: 0.0  Threads:    1 (   1/   0) 00/00/00/00 </div><div class="line"> Key Efficiency: 100.0%  Bps in/out:   0.8/160.4   Now in/out:   9.7/ 2.0k</div><div class="line"></div><div class="line">      Id      User         Host/IP         DB      Time    Cmd Query or State                                                                                                                                                                                                </div><div class="line">       --      ----         -------         --      ----    --- ----------                                                                                                                                                                                                    </div><div class="line">        8      root       localhost  wordpress         0  Query show full processlist</div></pre></td></tr></table></figure>
<ul>
<li>第一行显示了主机名称，还有至今MySQL的运行时间(以<code>days hour:minutes:seconds</code>为格式)。</li>
<li>第二、三行的显示了Qps:每秒请求书、Slow:慢查询的数量、Se/In/Up/De(%)：读写比例。</li>
<li>第四行的Key Efficiency就是Myisam的键值缓存区使用比例(缓存命中率)，Bps:目前网络进出流量。</li>
<li>最下方的区域就是目前链接到数据库的各个线程，你可以按<code>k</code>杀死一个线程，或者按<code>f</code>了解特定线程的信息。</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://jeremy.zawodny.com/mysql/mytop/mytop.html" target="_blank" rel="external">http://jeremy.zawodny.com/mysql/mytop/mytop.html</a><br><a href="http://dwchaoyue.blog.51cto.com/2826417/1636023" target="_blank" rel="external">http://dwchaoyue.blog.51cto.com/2826417/1636023</a><br><a href="http://www.21andy.com/new/20100927/1970.html" target="_blank" rel="external">http://www.21andy.com/new/20100927/1970.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下查看进程IO工具iopp]]></title>
      <url>http://www.hi-linux.com/posts/41926.html</url>
      <content type="html"><![CDATA[<p>Linux下的IO检测工具最常用的是<code>iostat</code>，不过<code>iostat</code>只能查看到总的IO情况。如果要细看具体那一个程序点用的IO较高，可以使用<code>iotop</code> 。不过<code>iotop</code>对内核版本和Python版本有要求，虽然目前主流的CentOS和Ubuntu版本上都适用。不过考虑到其无法适用的场景，推荐个可以查看程序IO使用情况的工具<code>iopp</code>作为替代方案。</p>
<p>iopp目前有两个版本的，一个是C语言的，一个是C++的。两个版本各有所长，本文将分别介绍两个版本iopp的安装和使用。</p>
<h3 id="iopp-C语言版本"><a href="#iopp-C语言版本" class="headerlink" title="iopp C语言版本"></a>iopp C语言版本</h3><p><code>iopp</code>是一个基于C语言开发的工具，它的作者是Mark Wong，代码仅有532行，非常简洁。</p>
<a id="more"></a>
<p>iopp的项目地址：<a href="https://github.com/markwkm/iopp" target="_blank" rel="external">https://github.com/markwkm/iopp</a></p>
<h4 id="安装iopp"><a href="#安装iopp" class="headerlink" title="安装iopp"></a>安装iopp</h4><p><strong>安装编译工具</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install cmake</div></pre></td></tr></table></figure>
<p><strong>编译安装iopp</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/markwkm/iopp.git</div><div class="line">$ cd iopp</div><div class="line">$ cmake CMakeLists.txt</div><div class="line">$ make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>如需指定安装位置，可按如下方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 指定安装的目标路径到/usr/bin下</div><div class="line">$ make install DESTDIR=/usr</div></pre></td></tr></table></figure>
<p>注：默认安装目录位置为<code>/bin/iopp</code></p>
<h4 id="使用iopp"><a href="#使用iopp" class="headerlink" title="使用iopp"></a>使用iopp</h4><p><strong>iopp语法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ iopp --help</div><div class="line">usage: iopp -h|--help</div><div class="line">usage: iopp [-ci] [-k|-m] [delay [count]]</div><div class="line">            -c, --command display full command line       #显示完整命令行</div><div class="line">            -h, --help display help                       #显示帮助信息</div><div class="line">            -i, --idle hides idle processes               #隐藏空闲进程</div><div class="line">            -k, --kilobytes display data in kilobytes     #以KB为单位显示数据</div><div class="line">            -m, --megabytes display data in megabytes     #以MB为单位显示数据</div><div class="line">            -u, --human-readable display data in kilo-, mega-, or giga-bytes #以方便读的方式显示数据</div></pre></td></tr></table></figure>
<p><strong>列出进程并隐藏I/O空闲的进程</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$ iopp -i -k -c 1</div><div class="line">  pid    rchar    wchar    syscr    syscw      rkb      wkb     cwkb command</div><div class="line">  pid    rchar    wchar    syscr    syscw      rkb      wkb     cwkb command</div><div class="line"> 9311       31        0        0        0        0        0        0 iopp</div><div class="line">  pid    rchar    wchar    syscr    syscw      rkb      wkb     cwkb command</div><div class="line"> 9311       31        0        0        0        0        0        0 iopp</div><div class="line">  pid    rchar    wchar    syscr    syscw      rkb      wkb     cwkb command</div><div class="line"> 9311       31        0        0        0        0        0        0 iopp</div><div class="line">  pid    rchar    wchar    syscr    syscw      rkb      wkb     cwkb command</div><div class="line"> 9311       31        0        0        0        0        0        0 iopp</div><div class="line">  pid    rchar    wchar    syscr    syscw      rkb      wkb     cwkb command</div><div class="line"> 9311       31        0        0        0        0        0        0 iopp</div><div class="line">  pid    rchar    wchar    syscr    syscw      rkb      wkb     cwkb command</div><div class="line"> 9311       31        0        0        0        0        0        0 iopp</div><div class="line">  pid    rchar    wchar    syscr    syscw      rkb      wkb     cwkb command</div><div class="line">  395        0        0        0        0        0        4        0 jbd2/dm-0-8</div><div class="line"> 1229        0        1        0        0        0        8        0 auditd</div><div class="line"> 1251        0        0        0        0        0        4        0 /sbin/rsyslogd</div><div class="line"> 1498      110        0        0        0        0        4        0 crond</div><div class="line"> 9311       31        0        0        0        0        0        0 iopp</div></pre></td></tr></table></figure>
<p>iopp输出的结果也比较清晰易懂，简单解释下</p>
<blockquote>
<p>pid 进程ID<br>rchar 将要从磁盘读取的字节数<br>wchar 已经写入或应该要写入磁盘的字节数<br>syscr 读I/O次数<br>syscw 写I/O次数<br>rbytes 真正从磁盘读取的字节数<br>wbytes 真正写入到磁盘的字节数<br>cwbytes 因为清空页面缓存而导致没有发生操作的字节数<br>command 执行的命令</p>
</blockquote>
<h3 id="iopp-C-语言版本"><a href="#iopp-C-语言版本" class="headerlink" title="iopp C++语言版本"></a>iopp C++语言版本</h3><p>iopp的实现原理非常简单，无非是遍历/proc/pid/io文件，读取出结果后，再通过进一步计算得出。大部分时候，我们只关注参数rbytes和wbytes两部分，基于此需求就产生了一个基于c++优化的iopp。</p>
<p>项目地址：<a href="https://github.com/hackerforward/iopp" target="_blank" rel="external">https://github.com/hackerforward/iopp</a></p>
<h4 id="安装iopp-1"><a href="#安装iopp-1" class="headerlink" title="安装iopp"></a>安装iopp</h4><p><strong>安装编译工具</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install make</div></pre></td></tr></table></figure>
<p><strong>编译安装iopp</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/hackerforward/iopp  </div><div class="line">$ cd iopp</div><div class="line">$ make</div></pre></td></tr></table></figure>
<p>编译完成后，在当前目录生成一个iopp二进制文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls</div><div class="line">curControl.h  iopp  iopp.cc  makefile  README.md</div></pre></td></tr></table></figure>
<h4 id="使用iopp-1"><a href="#使用iopp-1" class="headerlink" title="使用iopp"></a>使用iopp</h4><p>C++版iopp使用起来简单粗暴，直接运行就可以了，如下</p>
<p><img src="http://hi-linux.com/img/linux/iopp-cpp.jpg" alt=""></p>
<p>输出结果是时时刷新的。</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com/" target="_blank" rel="external">http://www.google.com/</a><br><a href="https://github.com/hackerforward/iopp" target="_blank" rel="external">https://github.com/hackerforward/iopp</a><br><a href="https://github.com/markwkm/iopp" target="_blank" rel="external">https://github.com/markwkm/iopp</a><br><a href="http://imysql.com/2014/10/12/using-iopp-instead-of-iotop.shtml" target="_blank" rel="external">http://imysql.com/2014/10/12/using-iopp-instead-of-iotop.shtml</a><br><a href="http://www.361way.com/linux-iopp/3583.html" target="_blank" rel="external">http://www.361way.com/linux-iopp/3583.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Dnsyo-在全球超过1500个DNS服务器上检查你的域名解析记录]]></title>
      <url>http://www.hi-linux.com/posts/14864.html</url>
      <content type="html"><![CDATA[<p>Dnsyo是一个命令行DNS检测工具，能够在多达1500个不同网络的开放DNS服务器上进行查询。在做了DNS变更的时候用来检查DNS生效或排查DNS设置的时候是非常有用的。</p>
<p>项目地址：<a href="https://github.com/samarudge/dnsyo" target="_blank" rel="external">https://github.com/samarudge/dnsyo</a></p>
<h3 id="Dnsyo安装"><a href="#Dnsyo安装" class="headerlink" title="Dnsyo安装"></a>Dnsyo安装</h3><p>Ubuntu, Debian or Linux Mint</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install python-pip</div><div class="line">$ sudo pip install dnsyo --upgrade</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>CentOS, Fedora or RHEL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install python-pip</div><div class="line">$ sudo pip install dnsyo --upgrade</div></pre></td></tr></table></figure>
<h3 id="Dnsyo使用"><a href="#Dnsyo使用" class="headerlink" title="Dnsyo使用"></a>Dnsyo使用</h3><p><strong>Dnsyo语法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">$ dnsyo --help                    </div><div class="line">usage: dnsyo [options] domain [type]</div><div class="line"></div><div class="line">Query lots of DNS servers and colate the results</div><div class="line"></div><div class="line">positional arguments:</div><div class="line">  domain                Domain to query</div><div class="line">  type                  Record type (A, CNAME, MX, etc.)</div><div class="line"></div><div class="line">optional arguments:</div><div class="line">  -h, --help            show this help message and exit</div><div class="line">  --resolverlist RESOLVERLIST</div><div class="line">                        Location of the yaml resolvers list to download</div><div class="line">                        (http/https)</div><div class="line">  --resolverfile RESOLVERFILE</div><div class="line">                        Location of the local yaml resolvers file</div><div class="line">  --verbose, -v         Extended debug info</div><div class="line">  --simple, -s          Simple output mode (good for UNIX parsing)</div><div class="line">  --extended, -x        Extended output mode including server addresses</div><div class="line">  --threads THREADS, -t THREADS</div><div class="line">                        Number of worker threads to use</div><div class="line">  --servers SERVERS, -q SERVERS</div><div class="line">                        Maximum number of servers to query (or ALL)</div><div class="line">  --country COUNTRY, -c COUNTRY</div><div class="line">                        Query servers by two letter country code</div><div class="line">  --update              Check the list for working servers</div><div class="line">  --updateSummary UPDATESUMMARY</div><div class="line">                        Location for the summary status of the update</div><div class="line">  --updateDestination UPDATEDESTINATION</div><div class="line">                        Destination resolver list for update</div></pre></td></tr></table></figure>
<p><strong>Dnsyo使用实例</strong></p>
<p>用100个线程同时查询所有DNS服务器上的结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">$ dnsyo -t 100 -q ALL hi-linux.com</div><div class="line"></div><div class="line">Status: Queried 1097 of 1097 servers, duration: 0:00:42.016678</div><div class="line"></div><div class="line"> - RESULTS</div><div class="line"></div><div class="line">I asked 1097 servers for A records related to hi-linux.com,</div><div class="line">324 responded with records and 773 gave errors</div><div class="line">Here are the results;</div><div class="line"></div><div class="line"></div><div class="line">22 servers responded with;</div><div class="line">199.27.79.133</div><div class="line"></div><div class="line">39 servers responded with;</div><div class="line">103.245.222.133</div><div class="line"></div><div class="line">24 servers responded with;</div><div class="line">23.235.47.133</div><div class="line"></div><div class="line">18 servers responded with;</div><div class="line">23.235.40.133</div><div class="line"></div><div class="line">69 servers responded with;</div><div class="line">185.31.17.133</div><div class="line"></div><div class="line">14 servers responded with;</div><div class="line">23.235.46.133</div><div class="line"></div><div class="line">14 servers responded with;</div><div class="line">185.31.19.133</div><div class="line"></div><div class="line">14 servers responded with;</div><div class="line">199.27.76.133</div><div class="line"></div><div class="line">39 servers responded with;</div><div class="line">23.235.43.133</div><div class="line"></div><div class="line">17 servers responded with;</div><div class="line">23.235.44.133</div><div class="line"></div><div class="line">26 servers responded with;</div><div class="line">185.31.18.133</div><div class="line"></div><div class="line">15 servers responded with;</div><div class="line">23.91.98.188</div><div class="line"></div><div class="line">11 servers responded with;</div><div class="line">23.235.39.133</div><div class="line"></div><div class="line">2 servers responded with;</div><div class="line">141.211.28.87</div><div class="line"></div><div class="line">And here are the errors;</div><div class="line"></div><div class="line"></div><div class="line">42 servers responded with;</div><div class="line">No Nameservers</div><div class="line"></div><div class="line">22 servers responded with;</div><div class="line">No Answer</div><div class="line"></div><div class="line">709 servers responded with;</div><div class="line">Server Timeout</div></pre></td></tr></table></figure>
<p>使用<code>--simple</code>选项采用简单的输出模式，对于UNIX脚本是非常有用的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ dnsyo --simple hi-linux.com</div><div class="line"></div><div class="line">INFO QUERIED 500</div><div class="line">INFO SUCCESS 222</div><div class="line">INFO ERROR 278</div><div class="line">RESULT 10 23.91.98.188</div><div class="line">RESULT 30 103.245.222.133</div><div class="line">RESULT 16 199.27.79.133</div><div class="line">RESULT 11 23.235.47.133</div><div class="line">RESULT 11 23.235.40.133</div><div class="line">RESULT 16 23.235.44.133</div><div class="line">RESULT 18 185.31.19.133</div><div class="line">RESULT 24 23.235.43.133</div><div class="line">RESULT 53 185.31.17.133</div><div class="line">RESULT 13 185.31.18.133</div><div class="line">RESULT 8 199.27.76.133</div><div class="line">RESULT 4 23.235.46.133</div><div class="line">RESULT 7 23.235.39.133</div><div class="line">RESULT 1 141.211.28.87</div><div class="line">ERROR 17 No Answer</div><div class="line">ERROR 18 No Nameservers</div><div class="line">ERROR 243 Server Timeout</div></pre></td></tr></table></figure>
<p>使用<code>--extended</code>选项查询结果更加详细，包含其查询的服务器的名称和地址。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">$ dnsyo --extended hi-linux.com</div><div class="line"></div><div class="line">Status: Queried 500 of 500 servers, duration: 0:00:16.818680</div><div class="line"></div><div class="line"> - RESULTS</div><div class="line"></div><div class="line">I asked 500 servers for A records related to hi-linux.com,</div><div class="line">221 responded with records and 279 gave errors</div><div class="line">Here are the results;</div><div class="line"></div><div class="line"></div><div class="line">The following servers</div><div class="line"> - 69.16.169.11 (HIGHWINDS - Highwinds Network Group, Inc. - US)</div><div class="line"> - 4.2.2.4 (LEVEL3 Level 3 Communications - US)</div><div class="line"> - 148.233.151.8 (Uninet S.A. de C.V. - MX)</div><div class="line"> - 216.52.97.33 (INTERNAP-2BLK - Internap Network Services Corporation - US)</div><div class="line"> - 204.97.212.10 (AS1239 SprintLink Global Network - US)</div><div class="line"> - 201.69.193.143 (TELEFNICA BRASIL S.A,BR - BR)</div><div class="line"> - 69.16.170.11 (HIGHWINDS - Highwinds Network Group, Inc. - US)</div><div class="line"> - 199.2.252.10 (AS1239 SprintLink Global Network - US)</div><div class="line"> - 216.165.129.158 (TDS-AS - TDS TELECOM - US)</div><div class="line"> - 216.170.153.146 (TDS-AS - TDS TELECOM - US)</div><div class="line"> - 186.224.32.6 (Portal Medianeira Informtica Ltda,BR - BR)</div><div class="line"> - 4.2.2.1 (LEVEL3 Level 3 Communications - US)</div><div class="line"> - 64.136.52.73 (AS-NETZERO - Netzero,INC. - US)</div><div class="line"> - 216.52.254.1 (INTERNAP-BLK - Internap Network Services Corporation - US)</div><div class="line">responded with;</div><div class="line">23.235.47.133</div><div class="line"></div><div class="line">The following servers</div><div class="line"> - 103.238.195.226 (BEACHHEADGROUP-AS-AP Beachhead Group Pty. Ltd.,AU - AU)</div><div class="line"> - 203.50.2.71 (ASN-TELSTRA Telstra Pty Ltd - AU)</div><div class="line"> - 60.241.64.224 (TPG-INTERNET-AP TPG Telecom Limited,AU - AU)</div><div class="line"> - 74.82.42.42 (HURRICANE - Hurricane Electric, Inc. - US)</div><div class="line"> - 60.225.26.2 (ASN-TELSTRA Telstra Pty Ltd,AU - AU)</div><div class="line"> - 120.151.240.35 (ASN-TELSTRA Telstra Pty Ltd,AU - AU)</div><div class="line"> - 165.21.83.88 (ERX-SINGNET SingNet - SG)</div><div class="line"> - 203.144.207.29 (TRUEINTERNET-AS-AP TRUE INTERNET Co.,Ltd. - TH)</div><div class="line"> - 14.203.108.78 (TPG-INTERNET-AP TPG Telecom Limited,AU - AU)</div><div class="line"> - 164.124.107.9 (BORANET-KR, LG DACOM Corporation - KR)</div><div class="line"> - 203.219.45.219 (TPG-INTERNET-AP TPG Telecom Limited,AU - AU)</div><div class="line"> - 202.248.37.74 (INFOWEB FUJITSU LIMITED - JP)</div><div class="line"> - 222.151.241.10 (OCN NTT Communications Corporation - JP)</div><div class="line"> - 219.250.36.130 (broadNnet-KR, SK Broadband Co Ltd - KR)</div><div class="line"> - 156.154.70.22 (ULTRADNS - NeuStar, Inc. - US)</div><div class="line"> - 164.124.101.2 (BORANET-KR, LG DACOM Corporation - KR)</div><div class="line"> - 216.146.35.35 (DYNDNS - Dynamic Network Services, Inc. - US)</div><div class="line"> - 203.112.2.5 (MIINET UCOM Corporation - JP)</div><div class="line"> - 110.143.125.229 (ASN-TELSTRA Telstra Pty Ltd,AU - AU)</div><div class="line"> - 61.208.115.242 (OCN NTT Communications Corporation - JP)</div><div class="line"> - 198.153.194.40 (DYNDNS - Dynamic Network Services, Inc. - US)</div><div class="line"> - 203.112.2.4 (MIINET UCOM Corporation - JP)</div><div class="line"> - 74.82.46.6 (HURRICANE - Hurricane Electric, Inc. - US)</div><div class="line"> - 211.75.111.220 (HINET Data Communication Business Group,TW - TW)</div><div class="line"> - 202.248.20.133 (INFOWEB FUJITSU LIMITED - JP)</div><div class="line">responded with;</div><div class="line">103.245.222.133</div></pre></td></tr></table></figure>
<p>通过指定记录类型查询特定类型的DNS记录，如查询MX记录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">$ dnsyo google.com MX</div><div class="line"></div><div class="line"></div><div class="line">Status: Queried 500 of 500 servers, duration: 0:00:06.193986</div><div class="line"></div><div class="line"> - RESULTS</div><div class="line"></div><div class="line">I asked 500 servers for MX records related to google.com,</div><div class="line">14 responded with records and 486 gave errors</div><div class="line">Here are the results;</div><div class="line"></div><div class="line"></div><div class="line">14 servers responded with;</div><div class="line">10 aspmx.l.google.com.</div><div class="line">20 alt1.aspmx.l.google.com.</div><div class="line">30 alt2.aspmx.l.google.com.</div><div class="line">40 alt3.aspmx.l.google.com.</div><div class="line">50 alt4.aspmx.l.google.com.</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">And here are the errors;</div><div class="line"></div><div class="line"></div><div class="line">473 servers responded with;</div><div class="line">No Answer</div><div class="line"></div><div class="line">4 servers responded with;</div><div class="line">No Nameservers</div><div class="line"></div><div class="line">9 servers responded with;</div><div class="line">Server Timeout</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="https://github.com/samarudge/dnsyo" target="_blank" rel="external">https://github.com/samarudge/dnsyo</a><br><a href="http://xmodulo.com/check-dns-propagation-linux.html" target="_blank" rel="external">http://xmodulo.com/check-dns-propagation-linux.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Systemd入门教程]]></title>
      <url>http://www.hi-linux.com/posts/3761.html</url>
      <content type="html"><![CDATA[<p>CentOS 7使用Systemd替换了SysV。Systemd目的是要取代Unix时代以来一直在使用的init系统，兼容SysV和LSB的启动脚本，而且够在进程启动过程中更有效地引导加载服务。</p>
<p>Systemd的特性</p>
<blockquote>
<p>支持并行化任务<br>同时采用socket式与D-Bus总线式激活服务<br>按需启动守护进程(daemon)<br>利用Linux的cgroups监视进程<br>支持快照和系统恢复<br>维护挂载点和自动挂载点<br>各服务间基于依赖关系进行精密控制</p>
</blockquote>
<a id="more"></a>
<h3 id="什么是init系统"><a href="#什么是init系统" class="headerlink" title="什么是init系统"></a>什么是init系统</h3><p>在Linux中，init就是initialization(初始化)的缩写。init是一个daemon(后台)进程， 它是Linux系统开机启动(内核加载完毕)后运行的第一个进程，进程号(pid)为1。直到系统关机它才终止运行，也就是说它也是Linux系统关机前运行的最后一个进程。</p>
<p>Linux系统中所有其他进程都是直接或间接由init进程启动的， 因此init进程是其他所有进程的父进程或祖先进程。 因此它可以做许多其他进程不能做的事情，接管其他进程不负责的功能。</p>
<p>正是由于其特殊性， 万一init因为某种原因不能启动，那么Linux系统就再也无法启动其他进程， 系统就会处于<code>Kernel Panic</code>状态。</p>
<h3 id="什么是Systemd"><a href="#什么是Systemd" class="headerlink" title="什么是Systemd"></a>什么是Systemd</h3><p>Systemd是System Management Daemon的简写(在UNIX系统中，后台进程都按照惯例以d结尾，因此当你看到一个进程的名字以d结尾，那它极有可能是一个后台进程)， 它是Linux系统中启动的第一个进程，也就上面所说的init daemon进程。</p>
<p>Systemd的优点是功能强大，使用方便，缺点是体系庞大，非常复杂。事实上，现在还有很多人反对使用Systemd，理由就是它过于复杂，与操作系统的其他部分强耦合，违反<code>keep simple, keep stupid</code>的Unix哲学。</p>
<p><strong>Systemd架构图</strong></p>
<p><img src="http://www.hi-linux.com/img/linux/systemd.png" alt=""></p>
<h3 id="Systemd基本工具"><a href="#Systemd基本工具" class="headerlink" title="Systemd基本工具"></a>Systemd基本工具</h3><p>Systemd并不是一个命令，而是一组命令，涉及到系统管理的方方面面。</p>
<h4 id="systemd-analyze"><a href="#systemd-analyze" class="headerlink" title="systemd-analyze"></a>systemd-analyze</h4><p>systemd-analyze命令用于查看启动耗时。</p>
<p>开机启动过程</p>
<p>Systemd最基本的任务是管理开机启动过程，并提供开机启动的一些信息。</p>
<p>想得到开机启动时间，运行下面命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ systemd-analyze</div></pre></td></tr></table></figure>
<p>想得到开机时每一个任务启动的时间，运行下面命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ systemd-analyze blame</div></pre></td></tr></table></figure>
<p>想得到更多的启动信息，systemd-analyze 这个命令也可以通过以下命令生成一个描述各个启动任务信息的svg格式图片</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ systemd-analyze plot &gt; plot.svg</div></pre></td></tr></table></figure>
<p>显示瀑布状的启动过程流</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ systemd-analyze critical-chain</div></pre></td></tr></table></figure>
<p>显示指定服务的启动流</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ systemd-analyze critical-chain atd.service</div></pre></td></tr></table></figure>
<h4 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h4><p>检视和控制Systemd的主要命令是systemctl。该命令可用于查看系统状态和管理系统及服务。详见<code>man 1 systemctl</code>。</p>
<p>在systemctl参数中添加<code>-H &lt;用户名&gt;@&lt;主机名&gt;</code>可以实现对其他机器的远程控制。该过程使用ssh链接。systemadm是Systemd的官方图形前端。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"># 启动进入救援状态(单用户状态)</div><div class="line">$ systemctl rescue</div><div class="line"></div><div class="line"># CPU停止工作</div><div class="line">$ systemctl halt</div><div class="line"></div><div class="line"># 重启系统</div><div class="line">$ systemctl reboot</div><div class="line"></div><div class="line"># 关闭系统，切断电源</div><div class="line">$ systemctl poweroff</div><div class="line"></div><div class="line"># 暂停系统</div><div class="line">$ systemctl suspend</div><div class="line"></div><div class="line"># 让系统进入冬眠状态</div><div class="line">$ systemctl hibernate</div><div class="line"></div><div class="line"># 让系统进入交互式休眠状态</div><div class="line">$ systemctl hybrid-sleep</div><div class="line"></div><div class="line"># 让系统进入进入紧急模式</div><div class="line">$ systemctl emergency</div><div class="line"></div><div class="line"># 通过ssh远程控制主机</div><div class="line">$ systemctl --host user_name@host_name command</div><div class="line">$ systemctl -H user_name@host_name command</div></pre></td></tr></table></figure>
<h4 id="journalctl"><a href="#journalctl" class="headerlink" title="journalctl"></a>journalctl</h4><p>Systemd统一管理所有Unit的启动日志。带来的好处就是，可以只用journalctl一个命令，查看所有日志(内核日志和应用日志)。日志的配置文件是<code>/etc/systemd/journald.conf</code>。</p>
<p>journalctl功能强大，用法非常多。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"># 查看所有日志(默认情况下 ，只保存本次启动的日志)</div><div class="line">$ journalctl</div><div class="line"></div><div class="line"># 查看内核日志(不显示应用日志)</div><div class="line">$ journalctl -k</div><div class="line"></div><div class="line"># 查看系统本次启动的日志</div><div class="line">$ journalctl -b</div><div class="line">$ journalctl -b -0</div><div class="line"></div><div class="line"># 查看上一次启动的日志(需更改设置)</div><div class="line">$ journalctl -b -1</div><div class="line">$ journalctl -b caf0524a1d394ce0bdbcff75b94444fe</div><div class="line"></div><div class="line"># 查看指定时间的日志</div><div class="line">$ journalctl --since=&quot;2012-10-30 18:17:16&quot;</div><div class="line">$ journalctl --since &quot;20 min ago&quot;</div><div class="line">$ journalctl --since yesterday</div><div class="line">$ journalctl --since &quot;2015-01-10&quot; --until &quot;2015-01-11 03:00&quot;</div><div class="line">$ journalctl --since 09:00 --until &quot;1 hour ago&quot;</div><div class="line">$ journalctl --since=today</div><div class="line">$ journalctl --since &quot;2015-06-01 01:00:00&quot;</div><div class="line">$ journalctl --since &quot;2015-06-01&quot; --until &quot;2015-06-13 15:00&quot;</div><div class="line">$ journalctl --since 09:00 --until &quot;1 hour ago&quot;</div><div class="line"></div><div class="line"># 显示尾部的最新10行日志</div><div class="line">$ journalctl -n</div><div class="line"></div><div class="line"># 显示尾部指定行数的日志</div><div class="line">$ journalctl -n 20</div><div class="line"></div><div class="line"># 实时滚动显示最新日志</div><div class="line">$ journalctl -f</div><div class="line"></div><div class="line"># 查看指定服务的日志</div><div class="line">$ journalctl /usr/lib/systemd/systemd</div><div class="line"></div><div class="line"># 查看指定进程的日志</div><div class="line">$ journalctl _PID=1</div><div class="line"></div><div class="line"># 查看某个路径的脚本的日志</div><div class="line">$ journalctl /usr/bin/bash</div><div class="line"></div><div class="line"># 查看指定用户的日志</div><div class="line">$ journalctl _UID=33</div><div class="line">$ journalctl _UID=33 --since today</div><div class="line"></div><div class="line"># 查看指定用组的日志</div><div class="line">$ journalctl _GID=33</div><div class="line"></div><div class="line"># 查看指定字段的数据</div><div class="line">$ journalctl -F _GID</div><div class="line"></div><div class="line"># 查看某个Unit的日志</div><div class="line">$ journalctl -u nginx.service</div><div class="line">$ journalctl -u nginx.service --since today</div><div class="line">$ journalctl -u nginx.service -u postgresql.service --since today</div><div class="line"></div><div class="line"># 实时滚动显示某个 Unit 的最新日志</div><div class="line">$ journalctl -u nginx.service -f</div><div class="line"></div><div class="line"># 合并显示多个 Unit 的日志</div><div class="line">$ journalctl -u nginx.service -u php-fpm.service --since today</div><div class="line"></div><div class="line"># 查看指定优先级(及其以上级别)的日志，共有8级</div><div class="line"># 0: emerg</div><div class="line"># 1: alert</div><div class="line"># 2: crit</div><div class="line"># 3: err</div><div class="line"># 4: warning</div><div class="line"># 5: notice</div><div class="line"># 6: info</div><div class="line"># 7: debug</div><div class="line"></div><div class="line">$ journalctl -p err -b</div><div class="line"></div><div class="line"># 日志默认分页输出，--no-pager 改为正常的标准输出</div><div class="line">$ journalctl --no-pager</div><div class="line"></div><div class="line"># 以 JSON 格式(单行)输出</div><div class="line">$ journalctl -b -u nginx.service -o json</div><div class="line"></div><div class="line"># 以 JSON 格式(多行)输出，可读性更好</div><div class="line"></div><div class="line">format:</div><div class="line">      * cat</div><div class="line">      * export</div><div class="line">      * json</div><div class="line">      * json-pretty</div><div class="line">      * json-sse</div><div class="line">      * short</div><div class="line">      * short-iso</div><div class="line">      * short-monotonic</div><div class="line">      * short-precise</div><div class="line">      * verbose</div><div class="line"></div><div class="line">$ journalctl -b -u nginx.service  -o json-pretty</div><div class="line"></div><div class="line"># 显示日志占据的硬盘空间</div><div class="line">$ journalctl --disk-usage</div><div class="line"></div><div class="line"># 指定日志文件占据的最大空间</div><div class="line">$ journalctl --vacuum-size=1G</div><div class="line"></div><div class="line"># 指定日志文件保存多久</div><div class="line">$ journalctl --vacuum-time=1years</div><div class="line"></div><div class="line"># 查看某个应用的日志</div><div class="line">$ journalctl /sbin/crond</div><div class="line">$ journalctl `which crond`</div><div class="line"></div><div class="line"># 以UTC时间格式显示日志</div><div class="line">$ journalctl --utc</div><div class="line"></div><div class="line"># 简洁显示有关启动的日志</div><div class="line">$ journalctl --list-boots</div><div class="line"></div><div class="line"># 显示有关内核启动的日志</div><div class="line">$ journalctl -k</div></pre></td></tr></table></figure>
<h4 id="hostnamectl"><a href="#hostnamectl" class="headerlink" title="hostnamectl"></a>hostnamectl</h4><p>hostnamectl命令用于查看当前主机的信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 显示当前主机的信息</div><div class="line">$ hostnamectl</div><div class="line"></div><div class="line"># 设置主机名。</div><div class="line">$ hostnamectl set-hostname &lt;hostname&gt;</div></pre></td></tr></table></figure>
<h4 id="localectl"><a href="#localectl" class="headerlink" title="localectl"></a>localectl</h4><p>localectl命令用于查看本地化设置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 查看本地化设置</div><div class="line">$ localectl</div><div class="line">$ localectl status</div><div class="line">$ localectl list-locales</div><div class="line">$ localectl list-keymaps</div><div class="line"></div><div class="line"># 设置本地化参数。</div><div class="line">$ localectl set-locale LANG=en_GB.utf8</div><div class="line">$ localectl set-keymap en_GB</div><div class="line">$ localectl set-x11-keymap en_GB</div></pre></td></tr></table></figure>
<h4 id="timedatectl"><a href="#timedatectl" class="headerlink" title="timedatectl"></a>timedatectl</h4><p>timedatectl命令用于查看当前时区设置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"># 查看当前时区设置</div><div class="line">$ timedatectl</div><div class="line"></div><div class="line"># 显示所有可用的时区</div><div class="line">$ timedatectl list-timezones                                                                                   </div><div class="line"></div><div class="line"># 显示系统的当前时间和日期</div><div class="line">$ timedatectl status</div><div class="line"></div><div class="line"># 设置当前时区</div><div class="line">$ timedatectl set-timezone America/New_York</div><div class="line">$ timedatectl set-timezone UTC</div><div class="line">$ timedatectl set-time YYYY-MM-DD</div><div class="line">$ timedatectl set-time HH:MM:SS</div><div class="line">$ timedatectl set-time &apos;YYYY-MM-DD HH:MM:SS&apos;</div><div class="line">$ timedatectl set-local-rtc boolean   # yes/no</div><div class="line">$ timedatectl set-ntp boolean</div><div class="line"></div><div class="line"># 设置硬件时钟以协调世界时UTC</div><div class="line">$ timedatectl | grep local #首先确定你的硬件时钟是否设置为本地时区</div><div class="line">$ timedatectl set-local-rtc 1 #将你的硬件时钟设置为本地时区</div><div class="line">$ timedatectl set-local-rtc 0 #将你的硬件时钟设置为协调世界时</div><div class="line"></div><div class="line"># 将Linux系统时钟同步到远程NTP服务器</div><div class="line">$ timedatectl set-ntp true #自动时间同步到远程NTP服务器</div><div class="line">$ timedatectl set-ntp false #禁用NTP时间同步</div><div class="line">注意:你必须在系统上安装NTP以实现与NTP服务器的自动时间同步。</div></pre></td></tr></table></figure>
<h4 id="loginctl"><a href="#loginctl" class="headerlink" title="loginctl"></a>loginctl</h4><p>loginctl命令用于查看当前登录的用户。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 列出当前session</div><div class="line">$ loginctl list-sessions</div><div class="line"></div><div class="line"># 列出当前登录用户</div><div class="line">$ loginctl list-users</div><div class="line"></div><div class="line"># 列出显示指定用户的信息</div><div class="line">$ loginctl show-user tom</div></pre></td></tr></table></figure>
<h4 id="bootctl"><a href="#bootctl" class="headerlink" title="bootctl"></a>bootctl</h4><p>与系统加载相关命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ bootctl status</div><div class="line">$ bootctl update</div><div class="line">$ bootctl install</div><div class="line">$ bootctl remove</div></pre></td></tr></table></figure>
<h4 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ busctl</div><div class="line">$ machinectl</div><div class="line">$ networkctl</div><div class="line">$ systemd-cgtop</div><div class="line">$ systemd-cgls</div></pre></td></tr></table></figure>
<h3 id="Systemd-Unit"><a href="#Systemd-Unit" class="headerlink" title="Systemd Unit"></a>Systemd Unit</h3><p>系统启动过程中，Systemd用Unit来组织那些各种不同的任务， 例如生成网络端口、配置硬件设备、加载存储设备、开启后台服务进程、等等</p>
<p>Systemd要求每一个任务对应一个Unit， 而每一个Unit都需要一个包含必要信息的配置文件，而这些配置文件的语法很简单，这也是Systemd的要实现的目的之一。</p>
<p>Systemd可以管理所有系统资源。不同的资源统称为Unit(单位)。</p>
<p>Unit一共分成12种</p>
<blockquote>
<p>Service unit：系统服务<br>Target unit：多个Unit构成的一个组<br>Device Unit：硬件设备<br>Mount Unit：文件系统的挂载点<br>Automount Unit：自动挂载点<br>Path Unit：文件或路径<br>Scope Unit：不是由Systemd启动的外部进程<br>Slice Unit：进程组<br>Snapshot Unit：Systemd快照，可以切回某个快照<br>Socket Unit：进程间通信的socket<br>Swap Unit：swap文件<br>Timer Unit：定时器</p>
</blockquote>
<p>Systemd通过配置文件的后缀名来判断unit的类型，比如一个service类型的unit的配置文件名通常类似于name.service， 一个mount类型的unit的配置文件名通常类似于name.mount。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"># 设置开机自启动某服务</div><div class="line">$ systemctl enable name.service</div><div class="line"></div><div class="line"># 停止开机自启动某服务</div><div class="line">$ systemctl disable name.service</div><div class="line"></div><div class="line"># 屏蔽(让它不能启动)或显示一个或多个服务</div><div class="line">$ systemctl mask name.service</div><div class="line"></div><div class="line"># 取消屏蔽(让它不能启动)或显示一个或多个服务</div><div class="line">$ systemctl unmask name.service</div><div class="line"></div><div class="line"># 查看Unit配置文件的内容</div><div class="line">$ systemctl cat name.service</div><div class="line"></div><div class="line"># 编辑Unit配置文件的内容</div><div class="line">$ systemctl edit name.service</div><div class="line"></div><div class="line"># 显示Unit配置文件的内容</div><div class="line">$ systemctl show name.service</div><div class="line">$ systemctl show name.service -p property</div><div class="line"></div><div class="line"># 查看当前系统的所有Unit</div><div class="line">$ systemctl list-units</div><div class="line"></div><div class="line"># 列出所有Unit，包括没有找到配置文件的或者启动失败的</div><div class="line">$ systemctl list-units --all</div><div class="line"></div><div class="line"># 列出所有没有运行的Unit</div><div class="line">$ systemctl list-units --all --state=inactive</div><div class="line">$ systemctl list-units --type service --all --state=inactive</div><div class="line"></div><div class="line"># 列出所有加载失败的Unit</div><div class="line">$ systemctl list-units --failed</div><div class="line"></div><div class="line"># 列出所有正在运行的、类型为service的Unit</div><div class="line">$ systemctl list-units --type=service</div><div class="line"></div><div class="line"># 列出所有服务</div><div class="line">$ systemctl list-unit-files</div></pre></td></tr></table></figure>
<h4 id="Unit的状态"><a href="#Unit的状态" class="headerlink" title="Unit的状态"></a>Unit的状态</h4><p>systemctl status命令用于查看系统状态和单个Unit的状态。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># 显示系统状态</div><div class="line">$ systemctl status</div><div class="line"></div><div class="line"># 显示单个Unit的状态</div><div class="line">$ sysystemctl status bluetooth.service</div><div class="line"></div><div class="line"># 显示远程主机的某个 Unit 的状态</div><div class="line">$ systemctl -H root@rhel7.example.com status httpd.service</div><div class="line">除了status命令，systemctl还提供了三个查询状态的简单方法，主要供脚本内部的判断语句使用。</div><div class="line"></div><div class="line"># 显示某个Unit是否正在运行</div><div class="line">$ systemctl is-active application.service</div><div class="line"></div><div class="line"># 显示某个Unit是否处于启动失败状态</div><div class="line">$ systemctl is-failed application.service</div><div class="line"></div><div class="line"># 显示某个Unit服务是否建立了启动链接</div><div class="line">$ systemctl is-enabled application.service</div></pre></td></tr></table></figure>
<h4 id="Unit管理"><a href="#Unit管理" class="headerlink" title="Unit管理"></a>Unit管理</h4><p>对于用户来说，最常用的是下面这些命令，用于启动和停止Unit(主要是 service)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"># 立即启动一个服务</div><div class="line">$ systemctl start name.service</div><div class="line"></div><div class="line"># 立即停止一个服务</div><div class="line">$ systemctl stop name.service</div><div class="line"></div><div class="line"># 重启一个服务</div><div class="line">$ systemctl restart name.service</div><div class="line"></div><div class="line">#重新启动一个或多个已经激活的服务</div><div class="line">$ systemctl try-restart name.service</div><div class="line"></div><div class="line"># 杀死一个服务的所有子进程</div><div class="line">$ systemctl kill name.service</div><div class="line"></div><div class="line"># 重新加载一个服务的配置文件</div><div class="line">$ systemctl reload name.service</div><div class="line"></div><div class="line"># 重载所有修改过的配置文件</div><div class="line">$ systemctl daemon-reload</div><div class="line"></div><div class="line"># 显示某个Unit的所有底层参数</div><div class="line">$ systemctl show httpd.service</div><div class="line"></div><div class="line"># 显示某个Unit的指定属性的值</div><div class="line">$ systemctl show -p CPUShares httpd.service</div><div class="line"></div><div class="line"># 设置某个Unit的指定属性</div><div class="line">$ systemctl set-property httpd.service CPUShares=500</div></pre></td></tr></table></figure>
<h4 id="Unit依赖关系"><a href="#Unit依赖关系" class="headerlink" title="Unit依赖关系"></a>Unit依赖关系</h4><p>Unit之间存在依赖关系：A依赖于B，就意味着Systemd在启动A的时候，同时会去启动B。</p>
<p>列出一个Unit的所有依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ systemctl list-dependencies nginx.service</div></pre></td></tr></table></figure>
<p>上面命令的输出结果之中，有些依赖是Target类型，默认不会展开显示。如果要展开Target，就需要使用<code>--all</code>参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ systemctl list-dependencies --all nginx.service</div></pre></td></tr></table></figure>
<h4 id="Unit的配置文件"><a href="#Unit的配置文件" class="headerlink" title="Unit的配置文件"></a>Unit的配置文件</h4><p>Systemd会自动生成一些<code>unit</code>，而这些<code>unit</code>并不会存在配置文件，但是它们可以通过systemctl来访问。</p>
<p>每一个Unit都有一个配置文件，告诉Systemd怎么启动这Unit。Systemd默认从目录<code>/etc/systemd/system/</code>读取配置文件。但是里面存放的大部分文件都是符号链接，指向目录<code>/usr/lib/systemd/system/</code>，真正的配置文件存放在那个目录。</p>
<p><code>systemctl enable</code>命令用于在上面两个目录之间，建立符号链接关系。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ systemctl enable clamd@scan.service</div></pre></td></tr></table></figure>
<p>等同于</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ln -s &apos;/usr/lib/systemd/system/clamd@scan.service&apos; &apos;/etc/systemd/system/multi-user.target.wants/clamd@scan.service&apos;</div></pre></td></tr></table></figure>
<p>如果配置文件里面设置了开机启动，<code>systemctl enable</code>命令相当于激活开机启动。</p>
<p>与之对应的，<code>systemctl disable</code>命令用于在两个目录之间，撤销符号链接关系，相当于撤销开机启动。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ systemctl disable clamd@scan.service</div></pre></td></tr></table></figure>
<p>配置文件的后缀名，就是该Unit的种类，比如sshd.socket。如果省略，Systemd 默认后缀名为.service，所以sshd会被理解成sshd.service。</p>
<p>注: 如果同一个配置文件名都处于这两个文件夹中， systemd会忽略<code>/usr/lib/systemd/system/</code>中的同名配置文件。</p>
<h5 id="配置文件的状态"><a href="#配置文件的状态" class="headerlink" title="配置文件的状态"></a>配置文件的状态</h5><p><code>systemctl list-unit-files</code>命令用于列出所有配置文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 列出所有配置文件</div><div class="line">$ systemctl list-unit-files</div><div class="line"></div><div class="line"># 列出指定类型的配置文件</div><div class="line">$ systemctl list-unit-files --type=service</div></pre></td></tr></table></figure>
<p>这个命令会输出一个列表。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ systemctl list-unit-files</div><div class="line"></div><div class="line">UNIT FILE              STATE</div><div class="line">chronyd.service        enabled</div><div class="line">clamd@.service         static</div><div class="line">clamd@scan.service     disabled</div></pre></td></tr></table></figure>
<p>这个列表显示每个配置文件的状态，一共有四种。</p>
<blockquote>
<p>enabled：已建立启动链接<br>disabled：没建立启动链接<br>static：该配置文件没有[Install]部分(无法执行)，只能作为其他配置文件的依赖<br>masked：该配置文件被禁止建立启动链接</p>
</blockquote>
<p>注意，从配置文件的状态无法看出，该Unit是否正在运行。这必须执行前面提到的<code>systemctl status</code>命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ systemctl status bluetooth.service</div></pre></td></tr></table></figure>
<p>一旦修改配置文件，就要让SystemD重新加载配置文件，然后重新启动，否则修改不会生效。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ systemctl daemon-reload</div><div class="line">$ systemctl restart httpd.service</div></pre></td></tr></table></figure>
<h5 id="配置文件的格式"><a href="#配置文件的格式" class="headerlink" title="配置文件的格式"></a>配置文件的格式</h5><p>配置文件就是普通的文本文件，可以用文本编辑器打开。</p>
<p><code>systemctl cat</code>命令可以查看配置文件的内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ systemctl cat atd.service</div><div class="line"></div><div class="line">[Unit]</div><div class="line">Description=ATD daemon</div><div class="line"></div><div class="line">[Service]</div><div class="line">Type=forking</div><div class="line">ExecStart=/usr/bin/atd</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure>
<p>从上面的输出可以看到，配置文件分成几个区块。每个区块的第一行，是用方括号表示的区别名，比如[Unit]。注意，配置文件的区块名和字段名，都是大小写敏感的。</p>
<p>每个区块内部是一些等号连接的键值对。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[Section]</div><div class="line">Directive1=value</div><div class="line">Directive2=value</div><div class="line"></div><div class="line">. . .</div></pre></td></tr></table></figure>
<p>注意:键值对的等号两侧不能有空格。</p>
<h5 id="配置文件的区块"><a href="#配置文件的区块" class="headerlink" title="配置文件的区块"></a>配置文件的区块</h5><p>[Unit]区块通常是配置文件的第一个区块，用来定义Unit的元数据，以及配置与其他Unit的关系。它的主要字段如下</p>
<blockquote>
<p>Description：简短描述<br>Documentation：文档地址<br>Requires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败<br>Wants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败<br>BindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行<br>Before：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动<br>After：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动<br>Conflicts：这里指定的 Unit 不能与当前 Unit 同时运行<br>Condition…：当前 Unit 运行必须满足的条件，否则不会运行<br>Assert…：当前 Unit 运行必须满足的条件，否则会报启动失败</p>
</blockquote>
<p>[Install]通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动。它的主要字段如下</p>
<blockquote>
<p>WantedBy：它的值是一个或多个 Target，当前 Unit 激活时(enable)符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中<br>RequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中<br>Alias：当前 Unit 可用于启动的别名<br>Also：当前 Unit 激活(enable)时，会被同时激活的其他 Unit</p>
</blockquote>
<p>[Service]区块用来 Service 的配置，只有Service类型的Unit才有这个区块。它的主要字段如下</p>
<blockquote>
<p>Type：定义启动时的进程行为。它有以下几种值。<br>Type=simple：默认值，执行ExecStart指定的命令，启动主进程<br>Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出<br>Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行<br>Type=dbus：当前服务通过D-Bus启动<br>Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行<br>Type=idle：若有其他任务执行完毕，当前服务才会运行<br>ExecStart：启动当前服务的命令<br>ExecStartPre：启动当前服务之前执行的命令<br>ExecStartPost：启动当前服务之后执行的命令<br>ExecReload：重启当前服务时执行的命令<br>ExecStop：停止当前服务时执行的命令<br>ExecStopPost：停止当其服务之后执行的命令<br>RestartSec：自动重启当前服务间隔的秒数<br>Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always(总是重启)、on-success、on-failure、on-abnormal、on-abort、on-watchdog<br>TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数<br>Environment：指定环境变量</p>
</blockquote>
<h3 id="Systemd-Target"><a href="#Systemd-Target" class="headerlink" title="Systemd Target"></a>Systemd Target</h3><p>启动计算机的时候，需要启动大量的Unit。如果每一次启动，都要一一写明本次启动需要哪些Unit，显然非常不方便。Systemd的解决方案就是Target。</p>
<p>简单说，Target就是一个Unit组，包含许多相关的Unit 。启动某个Target的时候，Systemd就会启动里面所有的Unit。从这个意义上说，Target这个概念类似于[状态点]，启动某个Target就好比启动到某种状态。</p>
<p>传统的init启动模式里面，有RunLevel的概念，跟Target的作用很类似。不同的是RunLevel是互斥的，不可能多个RunLevel同时启动，但是多个Target可以同时启动。</p>
<p>它与init进程的主要差别如下</p>
<ul>
<li>默认的RunLevel(在/etc/inittab文件设置)现在被默认的 Target 取代，位置是/etc/systemd/system/default.target，通常符号链接到graphical.target(图形界面)或者multi-user.target(多用户命令行)。</li>
<li>启动脚本的位置，以前是/etc/init.d目录，符号链接到不同的 RunLevel 目录 (比如/etc/rc3.d、/etc/rc5.d等)，现在则存放在/lib/systemd/system和/etc/systemd/system目录。</li>
<li>配置文件的位置，以前init进程的配置文件是/etc/inittab，各种服务的配置文件存放在/etc/sysconfig目录。现在的配置文件主要存放在/lib/systemd目录，在/etc/systemd目录里面的修改可以覆盖原始设置。</li>
</ul>
<p>Target与传统RunLevel的对应关系如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Traditional runlevel      New target name     Symbolically linked to...</div><div class="line"></div><div class="line">Runlevel 0           |    runlevel0.target -&gt; poweroff.target</div><div class="line">Runlevel 1           |    runlevel1.target -&gt; rescue.target</div><div class="line">Runlevel 2           |    runlevel2.target -&gt; multi-user.target</div><div class="line">Runlevel 3           |    runlevel3.target -&gt; multi-user.target</div><div class="line">Runlevel 4           |    runlevel4.target -&gt; multi-user.target</div><div class="line">Runlevel 5           |    runlevel5.target -&gt; graphical.target</div><div class="line">Runlevel 6           |    runlevel6.target -&gt; reboot.target</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 查看当前系统的所有Target</div><div class="line">$ systemctl list-unit-files --type=target</div><div class="line"></div><div class="line"># 查看一个Target包含的所有Unit</div><div class="line">$ systemctl list-dependencies multi-user.target</div><div class="line"></div><div class="line"># 查看启动时的默认Target</div><div class="line">$ systemctl get-default</div><div class="line"></div><div class="line"># 设置启动时的默认Target</div><div class="line">$ systemctl set-default multi-user.target</div><div class="line"></div><div class="line"># 切换Target时，默认不关闭前一个Target启动的进程，</div><div class="line"># systemctl isolate 命令改变这种行为，</div><div class="line"># 关闭前一个 Target 里面所有不属于后一个Target 的进程</div><div class="line">$ systemctl isolate multi-user.target</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://fugangqiang.github.io/blog/post/linux/systemd%E4%BB%8B%E7%BB%8D.html" target="_blank" rel="external">http://fugangqiang.github.io/blog/post/linux/systemd%E4%BB%8B%E7%BB%8D.html</a><br><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS 7下使用FirewallD构建动态防火墙]]></title>
      <url>http://www.hi-linux.com/posts/58809.html</url>
      <content type="html"><![CDATA[<h3 id="FirewallD介绍"><a href="#FirewallD介绍" class="headerlink" title="FirewallD介绍"></a>FirewallD介绍</h3><p>FirewallD提供了支持网络/防火墙区域(zone)定义网络链接以及接口安全等级的动态防火墙管理工具。它支持IPv4, IPv6 防火墙设置以及以太网桥接，也支持允许服务或者应用程序直接添加防火墙规则的接口。FirewallD拥有运行时配置和永久配置选项。</p>
<p>采用<code>firewall-cmd</code>(command)或<code>firewall-config</code>(gui)来动态的管理kernel netfilter的临时或永久的接口规则，并实时生效而无需重启服务。</p>
<a id="more"></a>
<p><strong>FirewallD特性</strong></p>
<ul>
<li>Zone</li>
</ul>
<p>FirewallD使用区域(zone)的概念来管理，网络区域定义了网络连接的可信等级。这是一个一对多的关系，这意味着一次连接可以仅仅是一个区域的一部分，而一个区域可以用于很多连接。每个网卡对应一个zone，这些zone的配置文件可在<code>/usr/lib/firewalld/zones/</code>下看到，默认的是public。</p>
<p>Zone提供了以下几个区域</p>
<blockquote>
<p>drop</p>
<p>任何流入网络的包都被丢弃，不作出任何响应，只允许流出的网络连接。即使开放了某些服务(比如http)，这些服务的数据也是不允许通过的。</p>
<p>block<br>任何进入的网络连接都被拒绝，并返回IPv4的icmp-host-prohibited报文或者IPv6的icmp6-adm-prohibited报文。只允许由该系统初始化的网络连接。</p>
<p>public(默认)<br>用以可以公开的部分。你认为网络中其他的计算机不可信并且可能伤害你的计算机，只允许选中的服务通过。</p>
<p>external<br>用在路由器等启用伪装的外部网络。你认为网络中其他的计算机不可信并且可能伤害你的计算机，只允许选中的服务通过。</p>
<p>dmz<br>用以允许隔离区(dmz)中的电脑有限地被外界网络访问，只允许选中的服务通过。</p>
<p>work<br>用在工作网络。你信任网络中的大多数计算机不会影响你的计算机，只允许选中的服务通过。</p>
<p>home<br>用在家庭网络。你信任网络中的大多数计算机不会影响你的计算机，只允许选中的服务通过。</p>
<p>internal<br>用在内部网络。你信任网络中的大多数计算机不会影响你的计算机，只允许选中的服务通过。</p>
<p>trusted<br>允许所有网络连接，即使没有开放任何服务，那么使用此zone的流量照样通过(一路绿灯)。 </p>
</blockquote>
<ul>
<li>预定义的服务</li>
</ul>
<p>服务是端口和/或协议入口的组合。备选内容包括netfilter助手模块以及 IPv4、IPv6地址。</p>
<ul>
<li>端口和协议</li>
</ul>
<p>定义了tcp或udp端口，端口可以是一个端口或者端口范围。</p>
<ul>
<li>ICMP阻塞</li>
</ul>
<p>可以选择Internet控制报文协议的报文。这些报文可以是信息请求亦可是对信息请求或错误条件创建的响应。</p>
<ul>
<li>伪装</li>
</ul>
<p>私有网络地址可以被映射到公开的IP地址。这是一次正规的地址转换。</p>
<ul>
<li>端口转发</li>
</ul>
<p>端口可以映射到另一个端口以及/或者其他主机。</p>
<h3 id="FirewallD安装"><a href="#FirewallD安装" class="headerlink" title="FirewallD安装"></a>FirewallD安装</h3><p>安装FirewallD和管理工具</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install firewalld firewall-config</div></pre></td></tr></table></figure>
<p>运行、停止、禁用FirewallD</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ systemctl start firewalld         # 启动</div><div class="line">$ systemctl enable firewalld        # 开机启动</div><div class="line">$ systemctl stop firewalld          # 关闭</div><div class="line">$ systemctl disable firewalld       # 取消开机启动</div><div class="line">$ systemctl status firewalld        # 查看状态</div></pre></td></tr></table></figure>
<h3 id="使用FirewallD"><a href="#使用FirewallD" class="headerlink" title="使用FirewallD"></a>使用FirewallD</h3><p>FirewallD规则管理可以直接修改配置文件(<code>/etc/firewalld/firewalld.conf</code>)进行配置,也可以通过图形界面工具<code>firewall-config</code>或者命令行客户端<code>firewall-cmd</code>来启用或者关闭防火墙特性。手动编辑配置文件相对还是比较麻烦，推荐使用工具进行配置。</p>
<h4 id="一般应用"><a href="#一般应用" class="headerlink" title="一般应用"></a>一般应用</h4><p>查看规则</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --help</div></pre></td></tr></table></figure>
<p>查看运行状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --state</div></pre></td></tr></table></figure>
<p>查看已被激活的Zone信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --get-active-zones</div><div class="line">public</div><div class="line">  interfaces: eth0 eth1</div></pre></td></tr></table></figure>
<p>获取活动的区域</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --get-active-zones</div></pre></td></tr></table></figure>
<p>查看指定接口的Zone信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --get-zone-of-interface=eth0</div></pre></td></tr></table></figure>
<p>这条命令将输出接口所属的区域名称。</p>
<p>查看指定级别的接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --zone=public --list-interfaces</div><div class="line">eth0</div></pre></td></tr></table></figure>
<p>获取支持的区域列表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --get-zones</div></pre></td></tr></table></figure>
<p>查看指定级别的所有信息，譬如public</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --zone=public --list-all</div><div class="line">public (default, active)</div><div class="line">  interfaces: eth0</div><div class="line">  sources:</div><div class="line">  services: dhcpv6-client http ssh</div><div class="line">  ports:</div><div class="line">  masquerade: no</div><div class="line">  forward-ports:</div><div class="line">  icmp-blocks:</div><div class="line">  rich rules:</div></pre></td></tr></table></figure>
<p>查看所有级别被允许的服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --get-service</div></pre></td></tr></table></figure>
<p>查看重启后所有Zones级别中被允许的服务，即永久放行的服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --get-service --permanent</div></pre></td></tr></table></figure>
<p>更新规则，不重启服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --reload</div></pre></td></tr></table></figure>
<p>更新规则，重启服务。状态信息将会丢失。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --complete-reload</div></pre></td></tr></table></figure>
<p>这个选项应当仅用于处理防火墙问题时，例如，状态信息和防火墙规则都正常，但是不能建立任何连接的情况。</p>
<p>添加某接口至某信任等级，譬如添加eth0至public，再永久生效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --zone=public --add-interface=eth0 --permanent</div></pre></td></tr></table></figure>
<p>修改接口所属区域</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd [--zone=&lt;zone&gt;] --change-interface=&lt;interface&gt;</div></pre></td></tr></table></figure>
<p>这个选项与<code>--add-interface</code> 选项相似，但是当接口已经存在于另一个区域的时候，该接口将被添加到新的区域。</p>
<p>将接口增加到区域</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd [--zone=&lt;zone&gt;] --add-interface=&lt;interface&gt;</div></pre></td></tr></table></figure>
<p>如果接口不属于区域，接口将被增加到区域。如果区域被省略了，将使用默认区域。接口在重新加载后将重新应用。</p>
<p>设置public为默认的信任级别</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --set-default-zone=public</div></pre></td></tr></table></figure>
<p>设置默认区域</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --set-default-zone=&lt;zone&gt;</div></pre></td></tr></table></figure>
<p>获取所有支持的服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --get-services</div></pre></td></tr></table></figure>
<p>获取所有支持的ICMP类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --get-icmptypes</div></pre></td></tr></table></figure>
<p>列出全部启用的区域的特性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --list-all-zones</div></pre></td></tr></table></figure>
<p>输出格式是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;zone&gt;</div><div class="line">  interfaces: &lt;interface1&gt; ..</div><div class="line">  services: &lt;service1&gt; ..</div><div class="line">  ports: &lt;port1&gt; ..</div><div class="line">  forward-ports: &lt;forward port1&gt; ..</div><div class="line">  icmp-blocks: &lt;icmp type1&gt; ..</div></pre></td></tr></table></figure>
<p>输出区域<zone>全部启用的特性。如果省略区域，将显示默认区域的信息。</zone></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd [--zone=&lt;zone&gt;] --list-all</div></pre></td></tr></table></figure>
<p>获取默认区域的网络设置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --get-default-zone</div></pre></td></tr></table></figure>
<p>流入默认区域中配置的接口的新访问请求将被置入新的默认区域。当前活动的连接将不受影响。</p>
<p>从区域中删除一个接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd [--zone=&lt;zone&gt;] --remove-interface=&lt;interface&gt;</div></pre></td></tr></table></figure>
<p>查询区域中是否包含某接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd [--zone=&lt;zone&gt;] --query-interface=&lt;interface&gt;</div></pre></td></tr></table></figure>
<p>列举区域中启用的服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd [ --zone=&lt;zone&gt; ] --list-services</div></pre></td></tr></table></figure>
<p>启用应急模式阻断所有网络连接，以防出现紧急状况</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --panic-on</div></pre></td></tr></table></figure>
<p>禁用应急模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --panic-off</div></pre></td></tr></table></figure>
<p>在0.3.0之前的FirewallD版本中, panic选项是<code>--enable-panic</code>与<code>--disable-panic</code>。</p>
<p>查询应急模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --query-panic</div></pre></td></tr></table></figure>
<h4 id="处理运行时区域"><a href="#处理运行时区域" class="headerlink" title="处理运行时区域"></a>处理运行时区域</h4><p>运行时模式下对区域进行的修改不是永久有效的。重新加载或者重启后修改将失效。</p>
<p>管理端口</p>
<p>列出dmz级别的被允许的进入端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --zone=dmz --list-ports</div></pre></td></tr></table></figure>
<p>允许tcp端口8080至dmz级别</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --zone=dmz --add-port=8080/tcp</div></pre></td></tr></table></figure>
<p>管理服务</p>
<p>启用区域中的一种服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd [--zone=&lt;zone&gt;] --add-service=&lt;service&gt; [--timeout=&lt;seconds&gt;]</div></pre></td></tr></table></figure>
<p>此举启用区域中的一种服务。如果未指定区域，将使用默认区域。如果设定了超时时间，服务将只启用特定秒数。如果服务已经活跃，将不会有任何警告信息。</p>
<p>添加smtp服务至work zone</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --zone=work --add-service=smtp</div></pre></td></tr></table></figure>
<p>使区域中的ipp-client服务生效60秒</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --zone=home --add-service=ipp-client --timeout=60</div></pre></td></tr></table></figure>
<p>启用默认区域中的http服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --add-service=http</div></pre></td></tr></table></figure>
<p>禁用区域中的某种服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd [--zone=&lt;zone&gt;] --remove-service=&lt;service&gt;</div></pre></td></tr></table></figure>
<p>此举禁用区域中的某种服务。如果未指定区域，将使用默认区域。</p>
<p>移除work zone中的smtp服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --zone=work --remove-service=smtp</div></pre></td></tr></table></figure>
<p>禁止home区域中的http服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --zone=home --remove-service=http</div></pre></td></tr></table></figure>
<p>区域种的服务将被禁用。如果服务没有启用，将不会有任何警告信息。</p>
<p>查询区域中是否启用了特定服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd [--zone=&lt;zone&gt;] --query-service=&lt;service&gt;</div></pre></td></tr></table></figure>
<p>如果服务启用，将返回1,否则返回0。没有输出信息。</p>
<p>启用区域端口和协议组合</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd [--zone=&lt;zone&gt;] --add-port=&lt;port&gt;[-&lt;port&gt;]/&lt;protocol&gt; [--timeout=&lt;seconds&gt;]</div></pre></td></tr></table></figure>
<p>此举将启用端口和协议的组合。端口可以是一个单独的端口<code>&lt;port&gt;</code>或者是一个端口范围<code>&lt;port&gt;-&lt;port&gt;</code> 。协议可以是tcp或udp。</p>
<p>禁用端口和协议组合</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd [--zone=&lt;zone&gt;] --remove-port=&lt;port&gt;[-&lt;port&gt;]/&lt;protocol&gt;</div></pre></td></tr></table></figure>
<p>查询区域中是否启用了端口和协议组合</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd [--zone=&lt;zone&gt;] --query-port=&lt;port&gt;[-&lt;port&gt;]/&lt;protocol&gt;</div></pre></td></tr></table></figure>
<p>如果启用，此命令将有返回值。没有输出信息。</p>
<p>启用区域中的IP伪装功能</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd [--zone=&lt;zone&gt;] --add-masquerade</div></pre></td></tr></table></figure>
<p>此举启用区域的伪装功能。私有网络的地址将被隐藏并映射到一个公有IP。这是地址转换的一种形式，常用于路由。由于内核的限制，伪装功能仅可用于IPv4。</p>
<p>禁用区域中的IP伪装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd [--zone=&lt;zone&gt;] --remove-masquerade</div></pre></td></tr></table></figure>
<p>查询区域的伪装状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd [--zone=&lt;zone&gt;] --query-masquerade</div></pre></td></tr></table></figure>
<p>如果启用，此命令将有返回值。没有输出信息。</p>
<p>启用区域的ICMP阻塞功能</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd [--zone=&lt;zone&gt;] --add-icmp-block=&lt;icmptype&gt;</div></pre></td></tr></table></figure>
<p>此举将启用选中的Internet控制报文协议(ICMP)报文进行阻塞。 ICMP 报文可以是请求信息或者创建的应答报文，以及错误应答。</p>
<p>禁止区域的ICMP阻塞功能</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd [--zone=&lt;zone&gt;] --remove-icmp-block=&lt;icmptype&gt;</div></pre></td></tr></table></figure>
<p>查询区域的ICMP阻塞功能</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd [--zone=&lt;zone&gt;] --query-icmp-block=&lt;icmptype&gt;</div></pre></td></tr></table></figure>
<p>如果启用，此命令将有返回值。没有输出信息。</p>
<p>阻塞区域的响应应答报文</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --zone=public --add-icmp-block=echo-reply</div></pre></td></tr></table></figure>
<p>在区域中启用端口转发或映射</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd [--zone=&lt;zone&gt;] --add-forward-port=port=&lt;port&gt;[-&lt;port&gt;]:proto=&lt;protocol&gt; &#123; :toport=&lt;port&gt;[-&lt;port&gt;] | :toaddr=&lt;address&gt; | :toport=&lt;port&gt;[-&lt;port&gt;]:toaddr=&lt;address&gt; &#125;</div></pre></td></tr></table></figure>
<p>端口可以映射到另一台主机的同一端口，也可以是同一主机或另一主机的不同端口。端口号可以是一个单独的端口<code>&lt;port&gt;</code>或者是端口范围<code>&lt;port&gt;-&lt;port&gt;</code> 。协议可以为tcp或udp 。目标端口可以是端口号<code>&lt;port&gt;</code>或者是端口范围<code>&lt;port&gt;-&lt;port&gt;</code> 。目标地址可以是IPv4地址。受内核限制，端口转发功能仅可用于IPv4。</p>
<p>禁止区域的端口转发或者端口映射</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd [--zone=&lt;zone&gt;] --remove-forward-port=port=&lt;port&gt;[-&lt;port&gt;]:proto=&lt;protocol&gt; &#123; :toport=&lt;port&gt;[-&lt;port&gt;] | :toaddr=&lt;address&gt; | :toport=&lt;port&gt;[-&lt;port&gt;]:toaddr=&lt;address&gt; &#125;</div></pre></td></tr></table></figure>
<p>查询区域的端口转发或者端口映射</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd [--zone=&lt;zone&gt;] --query-forward-port=port=&lt;port&gt;[-&lt;port&gt;]:proto=&lt;protocol&gt; &#123; :toport=&lt;port&gt;[-&lt;port&gt;] | :toaddr=&lt;address&gt; | :toport=&lt;port&gt;[-&lt;port&gt;]:toaddr=&lt;address&gt; &#125;</div></pre></td></tr></table></figure>
<p>如果启用，此命令将有返回值。没有输出信息。</p>
<p>端口转发实例</p>
<p>要打开端口转发，则需要先</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --zone=external --add-masquerade</div></pre></td></tr></table></figure>
<p>然后转发tcp 22端口至3753</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --zone=external --add-forward-port=port=22:proto=tcp:toport=3753</div></pre></td></tr></table></figure>
<p>转发22端口数据至另一个ip的相同端口上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --zone=external --add-forward-port=port=22:proto=tcp:toaddr=192.168.1.100</div></pre></td></tr></table></figure>
<p>转发22端口数据至另一ip的2055端口上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --zone=external --add-forward-port=port=22:proto=tcp:toport=2055:toaddr=192.168.1.100</div></pre></td></tr></table></figure>
<p>将区域home的ssh转发到127.0.0.2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --zone=home --add-forward-port=port=22:proto=tcp:toaddr=127.0.0.2</div></pre></td></tr></table></figure>
<h4 id="处理永久区域"><a href="#处理永久区域" class="headerlink" title="处理永久区域"></a>处理永久区域</h4><p>永久选项不直接影响运行时的状态。这些选项仅在重载或者重启服务时可用。为了使用运行时和永久设置，需要分别设置两者。 选项<code>--permanent</code>需要是永久设置的第一个参数。</p>
<p>获取永久选项所支持的服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent --get-services</div></pre></td></tr></table></figure>
<p>获取永久选项所支持的ICMP类型列表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent --get-icmptypes</div></pre></td></tr></table></figure>
<p>获取支持的永久区域</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent --get-zones</div></pre></td></tr></table></figure>
<p>启用区域中的服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent [--zone=&lt;zone&gt;] --add-service=&lt;service&gt;</div></pre></td></tr></table></figure>
<p>此举将永久启用区域中的服务。如果未指定区域，将使用默认区域。</p>
<p>例: 永久启用home区域中的ipp-client服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent --zone=home --add-service=ipp-client</div></pre></td></tr></table></figure>
<p>禁用区域中的一种服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent [--zone=&lt;zone&gt;] --remove-service=&lt;service&gt;</div></pre></td></tr></table></figure>
<p>查询区域中的服务是否启用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent [--zone=&lt;zone&gt;] --query-service=&lt;service&gt;</div></pre></td></tr></table></figure>
<p>如果服务启用，此命令将有返回值。此命令没有输出信息。</p>
<p>永久启用区域中的一个端口-协议组合</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent [--zone=&lt;zone&gt;] --add-port=&lt;port&gt;[-&lt;port&gt;]/&lt;protocol&gt;</div></pre></td></tr></table></figure>
<p>例如</p>
<p>允许某范围的udp端口至public级别，并永久生效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --zone=public --add-port=5060-5059/udp --permanent</div></pre></td></tr></table></figure>
<p>永久启用home区域中的https(tcp 443)端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent --zone=home --add-port=443/tcp</div></pre></td></tr></table></figure>
<p>永久禁用区域中的一个端口-协议组合</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent [--zone=&lt;zone&gt;] --remove-port=&lt;port&gt;[-&lt;port&gt;]/&lt;protocol&gt;</div></pre></td></tr></table></figure>
<p>查询区域中的端口-协议组合是否永久启用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent [--zone=&lt;zone&gt;] --query-port=&lt;port&gt;[-&lt;port&gt;]/&lt;protocol&gt;</div></pre></td></tr></table></figure>
<p>如果服务启用，此命令将有返回值。此命令没有输出信息。</p>
<p>永久启用区域中的伪装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent [--zone=&lt;zone&gt;] --add-masquerade</div></pre></td></tr></table></figure>
<p>此举启用区域的伪装功能。私有网络的地址将被隐藏并映射到一个公有IP。这是地址转换的一种形式，常用于路由。由于内核的限制，伪装功能仅可用于IPv4。</p>
<p>永久禁用区域中的伪装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent [--zone=&lt;zone&gt;] --remove-masquerade</div></pre></td></tr></table></figure>
<p>查询区域中的伪装的永久状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent [--zone=&lt;zone&gt;] --query-masquerade</div></pre></td></tr></table></figure>
<p>如果服务启用，此命令将有返回值。此命令没有输出信息。</p>
<p>永久启用区域中的ICMP阻塞</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent [--zone=&lt;zone&gt;] --add-icmp-block=&lt;icmptype&gt;</div></pre></td></tr></table></figure>
<p>此举将启用选中的 Internet 控制报文协议(ICMP)报文进行阻塞。 ICMP 报文可以是请求信息或者创建的应答报文或错误应答报文。</p>
<p>永久禁用区域中的ICMP阻塞</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent [--zone=&lt;zone&gt;] --remove-icmp-block=&lt;icmptype&gt;</div></pre></td></tr></table></figure>
<p>例: 阻塞公共区域中的响应应答报文</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent --zone=public --add-icmp-block=echo-reply</div></pre></td></tr></table></figure>
<p>查询区域中的ICMP永久状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent [--zone=&lt;zone&gt;] --query-icmp-block=&lt;icmptype&gt;</div></pre></td></tr></table></figure>
<p>如果服务启用，此命令将有返回值。此命令没有输出信息。</p>
<p>在区域中永久启用端口转发或映射</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent [--zone=&lt;zone&gt;] --add-forward-port=port=&lt;port&gt;[-&lt;port&gt;]:proto=&lt;protocol&gt; &#123; :toport=&lt;port&gt;[-&lt;port&gt;] | :toaddr=&lt;address&gt; | :toport=&lt;port&gt;[-&lt;port&gt;]:toaddr=&lt;address&gt; &#125;</div></pre></td></tr></table></figure>
<p>端口可以映射到另一台主机的同一端口，也可以是同一主机或另一主机的不同端口。端口号可以是一个单独的端口<code>&lt;port&gt;</code>或者是端口范围<code>&lt;port&gt;-&lt;port&gt;</code> 。协议可以为tcp或udp 。目标端口可以是端口号<code>&lt;port&gt;</code>或者是端口范围<code>&lt;port&gt;-&lt;port&gt;</code>。目标地址可以是IPv4 地址。受内核限制，端口转发功能仅可用于IPv4。</p>
<p>例: 将home区域的ssh服务转发到127.0.0.2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent --zone=home --add-forward-port=port=22:proto=tcp:toaddr=127.0.0.2</div></pre></td></tr></table></figure>
<p>永久禁止区域的端口转发或者端口映射</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent [--zone=&lt;zone&gt;] --remove-forward-port=port=&lt;port&gt;[-&lt;port&gt;]:proto=&lt;protocol&gt; &#123; :toport=&lt;port&gt;[-&lt;port&gt;] | :toaddr=&lt;address&gt; | :toport=&lt;port&gt;[-&lt;port&gt;]:toaddr=&lt;address&gt; &#125;</div></pre></td></tr></table></figure>
<p>查询区域的端口转发或者端口映射状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent [--zone=&lt;zone&gt;] --query-forward-port=port=&lt;port&gt;[-&lt;port&gt;]:proto=&lt;protocol&gt; &#123; :toport=&lt;port&gt;[-&lt;port&gt;] | :toaddr=&lt;address&gt; | :toport=&lt;port&gt;[-&lt;port&gt;]:toaddr=&lt;address&gt; &#125;</div></pre></td></tr></table></figure>
<p>如果服务启用，此命令将有返回值。此命令没有输出信息。</p>
<p>IP封禁</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --permanent --add-rich-rule=&quot;rule family=&apos;ipv4&apos; source address=&apos;222.222.222.222&apos; reject&quot;</div></pre></td></tr></table></figure>
<h4 id="直接选项"><a href="#直接选项" class="headerlink" title="直接选项"></a>直接选项</h4><p>直接选项主要用于使服务和应用程序能够增加规则。 规则不会被保存，在重新加载或者重启之后必须再次提交。传递的参数<code>&lt;args&gt;</code>与iptables, ip6tables以及ebtables一致。</p>
<p>选项<code>--direct</code>需要是直接选项的第一个参数。</p>
<p>将命令传递给防火墙。参数<code>&lt;args&gt;</code>可以是iptables, ip6tables以及ebtables命令行参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --direct --passthrough &#123; ipv4 | ipv6 | eb &#125; &lt;args&gt;</div></pre></td></tr></table></figure>
<p>为表<code>&lt;table&gt;</code>增加一个新链<code>&lt;chain&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --direct --add-chain &#123; ipv4 | ipv6 | eb &#125; &lt;table&gt; &lt;chain&gt;</div></pre></td></tr></table></figure>
<p>从表<code>&lt;table&gt;</code>中删除链<code>&lt;chain&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --direct --remove-chain &#123; ipv4 | ipv6 | eb &#125; &lt;table&gt; &lt;chain&gt;</div></pre></td></tr></table></figure>
<p>查询<code>&lt;chain&gt;</code>链是否存在与表<code>&lt;table&gt;</code>. 如果是，返回0,否则返回1.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --direct --query-chain &#123; ipv4 | ipv6 | eb &#125; &lt;table&gt; &lt;chain&gt;</div></pre></td></tr></table></figure>
<p>如果启用，此命令将有返回值。此命令没有输出信息。</p>
<p>获取用空格分隔的表<code>&lt;table&gt;</code>中链的列表。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --direct --get-chains &#123; ipv4 | ipv6 | eb &#125; &lt;table&gt;</div></pre></td></tr></table></figure>
<p>为表<code>&lt;table&gt;</code>增加一条参数为<code>&lt;args&gt;</code>的链<code>&lt;chain&gt;</code> ，优先级设定为<code>&lt;priority&gt;</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --direct --add-rule &#123; ipv4 | ipv6 | eb &#125; &lt;table&gt; &lt;chain&gt; &lt;priority&gt; &lt;args&gt;</div></pre></td></tr></table></figure>
<p>从表<code>&lt;table&gt;</code>中删除带参数<code>&lt;args&gt;</code>的链<code>&lt;chain&gt;</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --direct --remove-rule &#123; ipv4 | ipv6 | eb &#125; &lt;table&gt; &lt;chain&gt; &lt;args&gt;</div></pre></td></tr></table></figure>
<p>查询带参数<code>&lt;args&gt;</code>的链<code>&lt;chain&gt;</code>是否存在表<code>&lt;table&gt;</code>中. 如果是返回0,否则返回1.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --direct --query-rule &#123; ipv4 | ipv6 | eb &#125; &lt;table&gt; &lt;chain&gt; &lt;args&gt;</div></pre></td></tr></table></figure>
<p>如果启用，此命令将有返回值。此命令没有输出信息。</p>
<p>获取表<code>&lt;table&gt;</code>中所有增加到链<code>&lt;chain&gt;</code>的规则，并用换行分隔。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ firewall-cmd --direct --get-rules &#123; ipv4 | ipv6 | eb &#125; &lt;table&gt; &lt;chain&gt;</div></pre></td></tr></table></figure>
<h3 id="使用iptables静态防火墙"><a href="#使用iptables静态防火墙" class="headerlink" title="使用iptables静态防火墙"></a>使用iptables静态防火墙</h3><p>对于用惯了iptables的用户，FirewallD的使用起来需要熟悉一段时间。如果你想使用熟悉的iptables和ip6tables静态防火墙规则, 方法如下</p>
<p>安装iptables-services</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install iptables-services</div></pre></td></tr></table></figure>
<p>禁用firewalld</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ systemctl mask firewalld.service</div><div class="line">$ systemctl stop firewalld.service</div></pre></td></tr></table></figure>
<p>启用iptables和ip6tables</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ systemctl enable iptables.service</div><div class="line">$ systemctl enable ip6tables.service</div></pre></td></tr></table></figure>
<p>静态防火墙规则配置文件是<code>/etc/sysconfig/iptables</code>以及<code>/etc/sysconfig/ip6tables</code>。</p>
<p>注：iptables与iptables-services软件包不提供与服务配套使用的防火墙规则. 这些服务是用来保障兼容性以及供想使用自己防火墙规则的人使用的. 你可以安装并使用<code>system-config-firewall</code>来创建服务所需要的规则. 为了能使用<code>system-config-firewall</code>, 你必须停止firewalld。</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://havee.me/linux/2015-01/using-firewalls-on-centos-7.html" target="_blank" rel="external">http://havee.me/linux/2015-01/using-firewalls-on-centos-7.html</a><br><a href="https://fedoraproject.org/wiki/FirewallD/zh-cn" target="_blank" rel="external">https://fedoraproject.org/wiki/FirewallD/zh-cn</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux命令行下抓取HTTP流量的工具--httpry]]></title>
      <url>http://www.hi-linux.com/posts/46493.html</url>
      <content type="html"><![CDATA[<p>httpry是一个专业的封包嗅探器，用C语言开发的用来用于显示和记录HTTP流量。此工具不会进行自身分析，而是用来捕获、分析、并记录流量。</p>
<p>它可以作为一个后台进程记录实时流量并输出到文件，由于具有轻型和灵活的特性，所以它可以很容易适应不同的应用程序。它不显示原始HTTP传输的数据，而是着重解析和显示相关数据字段的请求和响应行。</p>
<p><strong>应用场景</strong></p>
<blockquote>
<p>查看用户在你的网络上在线浏览的内容<br>检查是否正确的服务器配置<br>在HTTP中使用模式的研究<br>关注危险下载的文件<br>验证HTTP策略在网络上的实施<br>提取的HTTP统计输出保存在捕捉文件</p>
</blockquote>
<p>项目地址: <a href="http://dumpsterventures.com/jason/httpry/" target="_blank" rel="external">http://dumpsterventures.com/jason/httpry/</a></p>
<a id="more"></a>
<h3 id="安装httpry"><a href="#安装httpry" class="headerlink" title="安装httpry"></a>安装httpry</h3><h4 id="通过包安装"><a href="#通过包安装" class="headerlink" title="通过包安装"></a>通过包安装</h4><ul>
<li>CentOS/RHEL</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ yum install epel-release #安装EPEL repo</div><div class="line">$ yum install httpry</div></pre></td></tr></table></figure>
<ul>
<li>Debian/Ubuntu</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apt-get install httpry httpry-tools httpry-daemon</div></pre></td></tr></table></figure>
<h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><ul>
<li>安装依赖包</li>
</ul>
<p>CentOS/RHEL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install wget gcc make libpcap libpcap-devel</div></pre></td></tr></table></figure>
<p>Debian/Ubuntu</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apt-get install wget gcc make git libpcap0.8-dev</div></pre></td></tr></table></figure>
<ul>
<li>编译httpry</li>
</ul>
<p>创建相关数据目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p /usr/local/man/man1</div><div class="line">$ mkdir -p /usr/man/man1/</div></pre></td></tr></table></figure>
<p>编译httpry</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ wget http://dumpsterventures.com/jason/httpry/httpry-0.1.8.tar.gz</div><div class="line">$ tar zvxf httpry-0.1.8.tar.gz</div><div class="line">$ cd httpry-0.1.8</div><div class="line">$ make</div><div class="line">$ make install</div><div class="line">$ mkdir /usr/local/share/httpry-0.1.8</div><div class="line">$ mv doc scripts $_</div></pre></td></tr></table></figure>
<h3 id="httpry用法"><a href="#httpry用法" class="headerlink" title="httpry用法"></a>httpry用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">$ httpry -h</div><div class="line"></div><div class="line">httpry version 0.1.8 -- HTTP logging and information retrieval tool</div><div class="line">Copyright (c) 2005-2014 Jason Bittel &lt;jason.bittel@gmail.com&gt;</div><div class="line">Usage: httpry [ -dFhpqs ] [-b file ] [ -f format ] [ -i device ] [ -l threshold ]</div><div class="line">              [ -m methods ] [ -n count ] [ -o file ] [ -P file ] [ -r file ]</div><div class="line">              [ -t seconds] [ -u user ] [ &apos;expression&apos; ]</div><div class="line"></div><div class="line">   -b file      write HTTP packets to a binary dump file</div><div class="line">   -d           run as daemon</div><div class="line">   -f format    specify output format string</div><div class="line">   -F           force output flush</div><div class="line">   -h           print this help information</div><div class="line">   -i device    listen on this interface</div><div class="line">   -l threshold specify a rps threshold for rate statistics</div><div class="line">   -m methods   specify request methods to parse</div><div class="line">   -n count     set number of HTTP packets to parse</div><div class="line">   -o file      write output to a file</div><div class="line">   -p           disable promiscuous mode</div><div class="line">   -P file      use custom PID filename when running in daemon mode </div><div class="line">   -q           suppress non-critical output</div><div class="line">   -r file      read packets from input file</div><div class="line">   -s           run in HTTP requests per second mode</div><div class="line">   -t seconds   specify the display interval for rate statistics</div><div class="line">   -u user      set process owner</div><div class="line">   expression   specify a bpf-style capture filter</div><div class="line"></div><div class="line">Additional information can be found at:</div><div class="line">   http://dumpsterventures.com/jason/httpry</div></pre></td></tr></table></figure>
<h3 id="httpry使用实例"><a href="#httpry使用实例" class="headerlink" title="httpry使用实例"></a>httpry使用实例</h3><p>监听指定的网络接口，并且实时显示捕获到的HTTP请求与响应的包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ httpry -i eth0</div><div class="line">httpry version 0.1.8 -- HTTP logging and information retrieval tool</div><div class="line">Copyright (c) 2005-2014 Jason Bittel &lt;jason.bittel@gmail.com&gt;</div><div class="line">Starting capture on eth0 interface</div><div class="line">2016-05-25 13:24:25	192.168.119.100	23.91.98.188	&gt;	GET	hi-linux.com	/2016/05/16/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AD%A6%E4%B9%A0%E7%A5%9E%E5%99%A8tldr/	HTTP/1.1	-	-</div><div class="line">2016-05-25 13:24:25	23.91.98.188	192.168.119.100	&lt;	-	-	-	HTTP/1.1	200	OK</div><div class="line">2016-05-25 13:24:58	192.168.119.100	23.91.98.188	&gt;	HEAD	www.hi-linux.com	/	HTTP/1.0	-	-</div><div class="line">2016-05-25 13:24:58	23.91.98.188	192.168.119.100	&lt;	-	-	-	HTTP/1.1	200	OK</div><div class="line">2016-05-25 13:24:59	192.168.119.100	23.91.98.188	&gt;	HEAD	www.hi-linux.com	/	HTTP/1.0	-	-</div><div class="line">2016-05-25 13:24:59	23.91.98.188	192.168.119.100	&lt;	-	-	-	HTTP/1.1	200	OK</div><div class="line">2016-05-25 13:25:00	192.168.119.100	23.91.98.188	&gt;	HEAD	www.hi-linux.com	/	HTTP/1.0	-	-</div><div class="line">2016-05-25 13:25:00	23.91.98.188	192.168.119.100	&lt;	-	-	-	HTTP/1.1	200	OK</div><div class="line">^CCaught SIGINT, shutting down...</div><div class="line">92 packets received, 0 packets dropped, 8 http packets parsed</div><div class="line">87.6 packets/min, 7.6 http packets/min</div></pre></td></tr></table></figure>
<p>使用<code>-b</code>或<code>-o</code>选项保存数据包。<code>-b</code>选项将数据包以二进制文件的形式保存下来，这样可以使用httpry软件打开文件以浏览。另一方面，<code>-o</code>选项将数据以可读的字符文件形式保存下来。</p>
<p>以二进制形式保存文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ httpry -i eth0 -b output.dump</div></pre></td></tr></table></figure>
<p>浏览所保存的HTTP数据包文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ httpry -r output.dump</div></pre></td></tr></table></figure>
<p>注意:不需要根用户权限就可以使用<code>-r</code>选项读取数据文件。</p>
<p>将httpry数据以字符文件保存</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ httpry -i eth0 -o /tmp/output.txt</div></pre></td></tr></table></figure>
<p>想监视指定的HTTP方法(如：GET，POST，PUT，HEAD，CONNECT等)，使用<code>-m</code>选项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ httpry -i eth0 -m get,head</div><div class="line"></div><div class="line">httpry version 0.1.8 -- HTTP logging and information retrieval tool</div><div class="line">Copyright (c) 2005-2014 Jason Bittel &lt;jason.bittel@gmail.com&gt;</div><div class="line">Starting capture on eth0 interface</div><div class="line">2016-05-25 13:30:57	192.168.119.100	23.91.98.188	&gt;	HEAD	www.hi-linux.com	/	HTTP/1.0	-	-</div><div class="line">2016-05-25 13:30:57	23.91.98.188	192.168.119.100	&lt;	-	-	-	HTTP/1.1	200	OK</div><div class="line">2016-05-25 13:30:58	192.168.119.100	23.91.98.188	&gt;	HEAD	www.hi-linux.com	/	HTTP/1.0	-	-</div><div class="line">2016-05-25 13:30:58	23.91.98.188	192.168.119.100	&lt;	-	-	-	HTTP/1.1	200	OK</div><div class="line">2016-05-25 13:30:59	192.168.119.100	23.91.98.188	&gt;	HEAD	www.hi-linux.com	/	HTTP/1.0	-	-</div><div class="line">2016-05-25 13:30:59	23.91.98.188	192.168.119.100	&lt;	-	-	-	HTTP/1.1	200	OK</div><div class="line">2016-05-25 13:31:09	192.168.119.100	23.91.98.188	&gt;	GET	hi-linux.com	/2016/05/16/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AD%A6%E4%B9%A0%E7%A5%9E%E5%99%A8tldr/	HTTP/1.1	-	-</div><div class="line">2016-05-25 13:31:09	23.91.98.188	192.168.119.100	&lt;	-	-	-	HTTP/1.1	200	OK</div><div class="line">^CCaught SIGINT, shutting down...</div><div class="line">130 packets received, 0 packets dropped, 16 http packets parsed</div><div class="line">185.7 packets/min, 22.9 http packets/min</div></pre></td></tr></table></figure>
<p>分析httpry记录</p>
<p>如果是编译安装，有一个perl脚本用来帮助我们分析httpry输出。该脚本在<code>/usr/local/share/httpry-0.1.8/scripts/</code>目录下。 该脚本功能有</p>
<blockquote>
<p>hostname : 显示一些列唯一主机名<br>find_proxies：检测web代理<br>search_terms：查找并计算在搜索服务中输入搜索词<br>content_analysis：查找包含特定关键字的URI<br>xml_output：以xml格式输出<br>log_summary：生成日志摘要<br>db_dump：将日志转存到mysql数据库中</p>
</blockquote>
<p>在使用这些脚本前，先使用<code>-o</code>选项运行一段时间。一旦得到输出，可运行脚本分析</p>
<ul>
<li>产生摘要报表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd /usr/local/share/httpry-0.1.8/scripts/</div><div class="line">$ perl ./parse_log.pl -p plugins/log_summary.pm  /tmp/output.txt</div></pre></td></tr></table></figure>
<p>parse_log.pl执行完后，会在<code>/usr/local/share/httpry-0.1.8/scripts/</code>目录下生成分析结果文件log_summary.txt。看起来像下面这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">$ cat log_summary.txt </div><div class="line"></div><div class="line">LOG SUMMARY</div><div class="line"></div><div class="line">Generated:      Wed May 25 13:57:40 2016</div><div class="line">Total lines:    14</div><div class="line">Total run time: 0.0 secs</div><div class="line"></div><div class="line"></div><div class="line">REQUESTS BY HOUR</div><div class="line"></div><div class="line">  0%   0%   0%   0%   0%   0%   0%   0%   0%   0%   0%   0% </div><div class="line">  |----|----|----|----|----|----|----|----|----|----|----|</div><div class="line"> 00   01   02   03   04   05   06   07   08   09   10   11  </div><div class="line"></div><div class="line">  0% 100%   0%   0%   0%   0%   0%   0%   0%   0%   0%   0% </div><div class="line">  |----|----|----|----|----|----|----|----|----|----|----|</div><div class="line"> 12   13   14   15   16   17   18   19   20   21   22   23  </div><div class="line"></div><div class="line"></div><div class="line">15/5 VISITED HOSTS</div><div class="line"></div><div class="line">2	28.6%	hi-linux.com</div><div class="line">2	28.6%	www.hi-linux.com</div><div class="line">1	14.3%	www.163.com</div><div class="line">1	14.3%	www.qq.com</div><div class="line">1	14.3%	www.baidu.com</div><div class="line"></div><div class="line"></div><div class="line">15/1 TOP TALKERS</div><div class="line"></div><div class="line">7	100.0%	192.168.119.100</div><div class="line"></div><div class="line"></div><div class="line">15/1 RESPONSE CODES</div><div class="line"></div><div class="line">7	100.0%	200</div></pre></td></tr></table></figure>
<ul>
<li>产生所有报表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ perl ./parse_log.pl -d plugins /tmp/output.txt</div><div class="line">$ ls -l *.txt</div></pre></td></tr></table></figure>
<p>parse_log.pl执行完后，会在<code>httpry-0.1.8/scripts</code>目录下生成一些分析结果文件(*.txt/xml)。</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://www.linux78.com/http-liu-liang-ji-lu-gong-ju-httpry.html" target="_blank" rel="external">http://www.linux78.com/http-liu-liang-ji-lu-gong-ju-httpry.html</a><br><a href="http://www.ttlsa.com/web/how-to-sniff-http-traffic-from-the-command-line-on-linux/" target="_blank" rel="external">http://www.ttlsa.com/web/how-to-sniff-http-traffic-from-the-command-line-on-linux/</a><br><a href="https://github.com/jbittel/httpry" target="_blank" rel="external">https://github.com/jbittel/httpry</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[利用lshell来构建一个受限的用户SHELL环境]]></title>
      <url>http://www.hi-linux.com/posts/6397.html</url>
      <content type="html"><![CDATA[<p>有些特殊情况下需要实现将系统内普通用户限定在指定目录下,并且只能使用系统管理员设定的命令。lshell就是实现这样功能的一个神器。</p>
<p>lshell提供了一个针对每个用户可配置的限制性shell，lshell的配置文件非常的简单，可以和<code>ssh</code>的<code>authorized_keys</code>或者<code>/etc/shell</code>、<code>/etc/passwd</code>耦合使用，lshell可以很容易的严格限制用户可以访问哪些命令。</p>
<p>项目地址: <a href="https://github.com/ghantoos/lshell" target="_blank" rel="external">https://github.com/ghantoos/lshell</a></p>
<a id="more"></a>
<h3 id="lshell安装"><a href="#lshell安装" class="headerlink" title="lshell安装"></a>lshell安装</h3><p>RHEL、CentOS</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install lshell #EPEL源</div></pre></td></tr></table></figure>
<p>Debian、Ubuntu</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apt-get install lshell</div></pre></td></tr></table></figure>
<h3 id="lshell使用"><a href="#lshell使用" class="headerlink" title="lshell使用"></a>lshell使用</h3><ul>
<li>lshell语法格式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ lshell --help</div><div class="line">Usage: lshell [OPTIONS]</div><div class="line">  --config &lt;file&gt; : Config file location (default /etc/lshell.conf)  #指定配置文件</div><div class="line">  --log    &lt;dir&gt;  : Log files directory                              #指定日志目录</div><div class="line">  -h, --help      : Show this help message                           #显示帮助信息</div><div class="line">  --version       : Show version                                     #显示版本信息</div></pre></td></tr></table></figure>
<ul>
<li>lshell配置</li>
</ul>
<p>Linux下配置文件为<code>/etc/lshell.conf</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"># lshell.py configuration file</div><div class="line">#</div><div class="line"># $Id: lshell.conf,v 1.27 2010/10/18 19:05:17 ghantoos Exp $</div><div class="line"></div><div class="line">[global]</div><div class="line">##  log directory (default /var/log/lshell/ )</div><div class="line">logpath         : /var/log/lshell/</div><div class="line">##  set log level to 0, 1, 2, 3 or 4  (0: no logs, 1: least verbose,</div><div class="line">##                                                 4: log all commands)</div><div class="line">loglevel        : 2</div><div class="line">##  configure log file name (default is %u i.e. username.log)</div><div class="line">#logfilename     : %y%m%d-%u</div><div class="line">#logfilename     : syslog</div><div class="line"></div><div class="line">##  in case you are using syslog, you can choose your logname</div><div class="line">#syslogname      : myapp</div><div class="line"></div><div class="line">[default]</div><div class="line">##  a list of the allowed commands or &apos;all&apos; to allow all commands in user&apos;s PATH</div><div class="line">allowed         : [&apos;ls&apos;,&apos;echo&apos;,&apos;cd&apos;,&apos;ll&apos;]</div><div class="line"></div><div class="line">##  a list of forbidden character or commands</div><div class="line">forbidden       : [&apos;;&apos;, &apos;&amp;&apos;, &apos;|&apos;,&apos;`&apos;,&apos;&gt;&apos;,&apos;&lt;&apos;, &apos;$(&apos;, &apos;$&#123;&apos;]</div><div class="line"></div><div class="line">##  a list of allowed command to use with sudo(8)</div><div class="line">#sudo_commands   : [&apos;ls&apos;, &apos;more&apos;]</div><div class="line"></div><div class="line">##  number of warnings when user enters a forbidden value before getting </div><div class="line">##  exited from lshell, set to -1 to disable.</div><div class="line">warning_counter : 2</div><div class="line"></div><div class="line">##  command aliases list (similar to bash’s alias directive)</div><div class="line">aliases         : &#123;&apos;ll&apos;:&apos;ls -l&apos;, &apos;vi&apos;:&apos;vim&apos;&#125;</div><div class="line"></div><div class="line">##  introduction text to print (when entering lshell)</div><div class="line">#intro           : &quot;== My personal intro ==\nWelcome to lshell\nType &apos;?&apos; or &apos;help&apos; to get the list of allowed commands&quot;</div><div class="line"></div><div class="line">##  configure your promt using %u or %h (default: username)</div><div class="line">#prompt          : &quot;%u@%h&quot;</div><div class="line"></div><div class="line">##  a value in seconds for the session timer</div><div class="line">#timer           : 5</div><div class="line"></div><div class="line">##  list of path to restrict the user &quot;geographicaly&quot;</div><div class="line">#path            : [&apos;/home/bla/&apos;,&apos;/etc&apos;]</div><div class="line"></div><div class="line">##  set the home folder of your user. If not specified the home_path is set to </div><div class="line">##  the $HOME environment variable</div><div class="line">#home_path       : &apos;/home/bla/&apos;</div><div class="line"></div><div class="line">##  update the environment variable $PATH of the user</div><div class="line">#env_path        : &apos;:/usr/local/bin:/usr/sbin&apos;</div><div class="line"></div><div class="line">##  add environment variables</div><div class="line">#env_vars        : &#123;&apos;foo&apos;:1, &apos;bar&apos;:&apos;helloworld&apos;&#125;</div><div class="line"></div><div class="line">##  allow or forbid the use of scp (set to 1 or 0)</div><div class="line">#scp             : 1</div><div class="line"></div><div class="line">## forbid scp upload</div><div class="line">#scp_upload       : 0</div><div class="line"></div><div class="line">## forbid scp download</div><div class="line">#scp_download     : 0</div><div class="line"></div><div class="line">##  allow of forbid the use of sftp (set to 1 or 0)</div><div class="line">#sftp            : 1</div><div class="line"></div><div class="line">##  list of command allowed to execute over ssh (e.g. rsync, rdiff-backup, etc.)</div><div class="line">#overssh         : [&apos;ls&apos;, &apos;rsync&apos;]</div><div class="line"></div><div class="line">##  logging strictness. If set to 1, any unknown command is considered as </div><div class="line">##  forbidden, and user&apos;s warning counter is decreased. If set to 0, command is</div><div class="line">##  considered as unknown, and user is only warned (i.e. *** unknown synthax)</div><div class="line">#strict          : 1</div><div class="line"></div><div class="line">##  force files sent through scp to a specific directory</div><div class="line">#scpforce        : &apos;/home/bla/uploads/&apos;</div><div class="line"></div><div class="line">##  history file maximum size </div><div class="line">#history_size     : 100</div><div class="line"></div><div class="line">##  set history file name (default is /home/%u/.lhistory)</div><div class="line">#history_file     : &quot;/home/%u/.lshell_history&quot;</div></pre></td></tr></table></figure>
<ul>
<li>lshell的配置文件详解</li>
</ul>
<blockquote>
<p>配置文件一共有四个小节<br>[global] -lshell的系统配置(只能有一个)<br>[default] -lshell的默认用户配置(只能有一个)<br>[foo] -指定UNIX的系统用户”foo”的特别的配置<br>[grp:bar] -指定UNIX用户组”bar”的特别的配置</p>
<p>当加载参数的时候遵循以下顺序<br>1.User configuration<br>2.Group configuration<br>3.Default configuration</p>
<p>logpath<br>日志路径(默认是/var/log/lshell/)</p>
<p>loglevel<br>日志记录级别,0, 1, 2, 3 or 4 (0: no logs -4: logs everything)</p>
<p>logfilename<br>如果设置成syslog关键字，则表示日志记录到syslog中<br>如果设置成一个文件名, e.g. %u-%y%m%d (i.e foo-20091009.log): </p>
<p>%u -username<br>%d -day [1..31]<br>%m -month [1..12]<br>%y -year [00..99]<br>%h -time [00:00..23:59]</p>
<p>syslogname<br>如果你打算记录进syslog中，则要设置你的syslog名称，默认是lshell </p>
<p>[default]或者[username]或者[grp:groupname] 三个小节可用的配置项</p>
<p>aliases<br>命令别名</p>
<p>allowed<br>一个允许执行的命令列表，或者设置成all，则允许在user PATH中的所有命令可用</p>
<p>allowed_cmd_path<br>一个路径组成的列表，所有在路径中的可执行文件都被允许</p>
<p>env_path<br>更新用户的环境变量PATH</p>
<p>env_vars<br>设置用户的环境变量</p>
<p>forbidden<br>一个非法字符或者命令组成的列表</p>
<p>history_file<br>history的文件名,%u -username (e.g. ‘/home/%u/.lhistory’)</p>
<p>history_size<br>history文件记录的maximum size(in lines)</p>
<p>home_path (deprecated)<br>默认是$HOME，不赞成使用，下一版会取消。%u -username (e.g. ‘/home/%u’)</p>
<p>intro<br>在登陆时打印出入门信息</p>
<p>login_script<br>用户登陆时执行的脚本</p>
<p>passwd<br>指定用户的密码(默认为空)</p>
<p>path<br>严格限制用户可以去的系统路径，可以使用通配符(e.g. ‘/var/log/ap*’)</p>
<p>prompt<br>设置用户的prompt格式(default: username)<br>%u -username<br>%h -hostname</p>
<p>scp<br>允许或者禁止使用scp连接(0禁止、1允许)。</p>
<p>scpforce<br>强制文件通过scp传输到一个特定目录</p>
<p>scp_download<br>允许或者禁止使用scp下载(0禁止、1允许)。</p>
<p>scp_upload<br>允许或者禁止使用scp上传(0禁止、1允许,默认为1)。</p>
<p>sftp<br>允许或者禁止使用sftp连接(0禁止、1允许)。</p>
<p>sudo_commands<br>一组命令组成的列表，用户可以执行sudo </p>
<p>timer<br>会话维持的秒数</p>
<p>strict<br>日志严格记录，如果设置成1，任何unknow的命令都被禁止，并且降低用户警告数，如果设置成0，unknow命令只是警告。 (i.e. <em>*</em> unknown synthax) </p>
<p>warning_counter<br>警告次数，如果用户达到该警告次数，则会被强制退出lshell，设置成-1，则禁止计数。</p>
</blockquote>
<ul>
<li>lshell下始终可使用的指令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">清屏</div><div class="line">clear</div><div class="line"></div><div class="line">打印可用命令</div><div class="line">help, ?</div><div class="line"></div><div class="line">打印命令历史</div><div class="line">history</div><div class="line"></div><div class="line">列出所有允许和禁止的路径</div><div class="line">lpath </div><div class="line"></div><div class="line">列出所有允许sudo的命令</div><div class="line">lsudo</div></pre></td></tr></table></figure>
<h3 id="lshell实例"><a href="#lshell实例" class="headerlink" title="lshell实例"></a>lshell实例</h3><p>为了记录用户日志，首先需要创建相关目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ groupadd --system lshell</div><div class="line">$ mkdir /var/log/lshell</div><div class="line">$ chown :lshell /var/log/lshell</div><div class="line">$ chmod 770 /var/log/lshell</div></pre></td></tr></table></figure>
<p>添加test用户</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ useradd test -d /home/test -s /usr/bin/lshell</div></pre></td></tr></table></figure>
<p>然后增加test用户到lshell group</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ usermod -aG lshell test</div></pre></td></tr></table></figure>
<p>改变test用户默认shell，使用lshell作为默认shell</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chsh -s /usr/bin/lshell test</div></pre></td></tr></table></figure>
<p>修改配置文件让test用户只能使用受限命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[test]</div><div class="line">allowed         : [&apos;ls&apos;,&apos;echo&apos;,&apos;cd&apos;,&apos;ll&apos;]      ##允许使用的命令</div><div class="line">home_path       : &apos;/home/test&apos;                 ##设置用户的家目录</div><div class="line">path            : [&apos;/home/test&apos;,&apos;/tmp&apos;]             ##限制用户的目录</div></pre></td></tr></table></figure>
<p><code>home_path</code>和<code>path</code>注释掉则限制用户只能访问自己的家目录及其子目录。如果需要能访问其他目录，则需要在path中加入相应的目录，当前设置下用户可以访问家目录及其子目录，也可以访问<code>/tmp</code>目录及其子目录，但不能访问这以外的目录，比如<code>/etc</code>。</p>
<p><code>allowed</code>中添加我们限定用户所能使用的命令，这里限定只能使用<code>ls</code>、<code>echo</code>、<code>cd</code>、<code>ll</code>四个命令。</p>
<p>测试登陆</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ssh test@127.0.0.1                                                    </div><div class="line">test@127.0.0.1&apos;s password: </div><div class="line">You are in a limited shell.</div><div class="line">Type &apos;?&apos; or &apos;help&apos; to get the list of allowed commands</div><div class="line">test:~$</div></pre></td></tr></table></figure>
<p>命令使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">test:~$ cd /etc</div><div class="line">*** forbidden path -&gt; &quot;/etc/&quot;</div><div class="line">*** You have 1 warning(s) left, before getting kicked out.</div><div class="line">This incident has been reported.</div><div class="line"></div><div class="line">test:~$ touch test.txt</div><div class="line">*** unknown command: touch</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="https://github.com/ghantoos/lshell" target="_blank" rel="external">https://github.com/ghantoos/lshell</a><br><a href="http://m.oschina.net/blog/337374" target="_blank" rel="external">http://m.oschina.net/blog/337374</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS 6下搭建OpenVPN服务器]]></title>
      <url>http://www.hi-linux.com/posts/43594.html</url>
      <content type="html"><![CDATA[<p>OpenVPN是一个用于创建虚拟专用网络(Virtual Private Network)加密通道的免费开源软件。使用OpenVPN可以方便地在家庭、办公场所、住宿酒店等不同网络访问场所之间搭建类似于局域网的专用网络通道。</p>
<p>使用OpenVPN配合特定的代理服务器，可用于访问Youtube、FaceBook、Twitter等受限网站，也可用于突破公司的网络限制。</p>
<p><strong>OpenVPN架构图</strong></p>
<p><img src="http://www.hi-linux.com/img/linux/openvpnflows.jpg" alt=""></p>
<a id="more"></a>
<h3 id="OpenVPN服务器端安装"><a href="#OpenVPN服务器端安装" class="headerlink" title="OpenVPN服务器端安装"></a>OpenVPN服务器端安装</h3><h4 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h4><ul>
<li>关闭selinux</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ setenforce 0</div><div class="line">$ sed -i &apos;/^SELINUX=/c\SELINUX=disabled&apos; /etc/selinux/config</div></pre></td></tr></table></figure>
<ul>
<li>安装EPEL扩展库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</div></pre></td></tr></table></figure>
<ul>
<li>安装所需依赖软件包</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install -y openssl openssl-devel lzo lzo-devel pam pam-devel automake pkgconfig</div></pre></td></tr></table></figure>
<h4 id="安装OpenVPN和Easy-Rsa"><a href="#安装OpenVPN和Easy-Rsa" class="headerlink" title="安装OpenVPN和Easy-Rsa"></a>安装OpenVPN和Easy-Rsa</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum -y install openvpn easy-rsa   #EPEL源</div></pre></td></tr></table></figure>
<h4 id="启动OpenVPN并设置为开机启动"><a href="#启动OpenVPN并设置为开机启动" class="headerlink" title="启动OpenVPN并设置为开机启动"></a>启动OpenVPN并设置为开机启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ service openvpn start</div><div class="line">$ chkconfig openvpn on</div></pre></td></tr></table></figure>
<h3 id="OpenVPN服务器端配置"><a href="#OpenVPN服务器端配置" class="headerlink" title="OpenVPN服务器端配置"></a>OpenVPN服务器端配置</h3><h4 id="配置Easy-Rsa-Vars"><a href="#配置Easy-Rsa-Vars" class="headerlink" title="配置Easy-Rsa Vars"></a>配置Easy-Rsa Vars</h4><ul>
<li>修改vars文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ cd /usr/share/easy-rsa/2.0/</div><div class="line"></div><div class="line">$ vim vars</div><div class="line">#修改注册信息，比如公司地址、公司名称、部门名称等。</div><div class="line">export KEY_COUNTRY=&quot;CN&quot;</div><div class="line">export KEY_PROVINCE=&quot;ChongQing&quot;</div><div class="line">export KEY_CITY=&quot;ChongQing&quot;</div><div class="line">export KEY_ORG=&quot;jinke&quot;</div><div class="line">export KEY_EMAIL=&quot;jinke@qq.com&quot;</div><div class="line">export KEY_OU=&quot;P2P_TECH&quot;</div></pre></td></tr></table></figure>
<ul>
<li>初始化环境变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ source vars</div><div class="line">NOTE: If you run ./clean-all, I will be doing a rm -rf on /usr/share/easy-rsa/2.0/keys</div></pre></td></tr></table></figure>
<ul>
<li>清除keys目录下所有与证书相关的文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">下面步骤生成的证书和密钥都在/usr/share/easy-rsa/2.0/keys目录里</div><div class="line">$ ./clean-all</div></pre></td></tr></table></figure>
<ul>
<li>生成服务器端CA证书根证书ca.crt和根密钥ca.key，由于在vars文件中做过缺省设置，在出现交互界面时，直接一路回车即可</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./build-ca</div></pre></td></tr></table></figure>
<ul>
<li>为服务端生成证书和密钥(一路按回车，直到提示需要输入y/n时，输入y再按回车，一共两次)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./build-key-server server</div></pre></td></tr></table></figure>
<ul>
<li>创建迪菲·赫尔曼(DH)密钥，会生成dh2048.pem文件(生成过程比较慢，在此期间不要去中断它)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./build-dh</div></pre></td></tr></table></figure>
<ul>
<li>生成TLS私密文件ta.key(防DDos攻击、UDP淹没等恶意攻击)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ openvpn --genkey --secret keys/ta.key</div></pre></td></tr></table></figure>
<ul>
<li>每一个登陆的VPN客户端需要有一个证书，每个证书在同一时刻只能供一个客户端连接，下面建立2份</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">为客户端生成证书和密钥(一路按回车，直到提示需要输入y/n时，输入y再按回车，一共两次)</div><div class="line">$ ./build-key client1</div><div class="line">$ ./build-key client2</div></pre></td></tr></table></figure>
<p><strong>注意:进行证书制作工作时，仍旧需要进行初始化，但只需要进入easy-rsa目录，运行<code>source vars</code>就可以了，不需要./clean-all 步骤，它会清除一切证书文件，这一点一定要注意！！！</strong></p>
<ul>
<li>查看keys目录下生成的文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls keys/</div><div class="line">01.pem  02.pem  03.pem  ca.crt  ca.key  client1.crt  client1.csr  client1.key  client2.crt  client2.csr  client2.key  dh2048.pem  index.txt  index.txt.attr  index.txt.attr.old  index.txt.old  serial  serial.old  server.crt  server.csr  server.key  ta.key</div></pre></td></tr></table></figure>
<h4 id="配置OpenVPN服务端"><a href="#配置OpenVPN服务端" class="headerlink" title="配置OpenVPN服务端"></a>配置OpenVPN服务端</h4><ul>
<li>在OpenVPN的配置目录下新建一个keys目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mkdir /etc/openvpn/keys</div></pre></td></tr></table></figure>
<ul>
<li>将需要用到的OpenVPN证书和密钥复制一份到刚创建好的keys目录中</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cp /usr/share/easy-rsa/2.0/keys/&#123;ca.crt,server.&#123;crt,key&#125;,dh2048.pem,ta.key&#125; /etc/openvpn/keys/</div></pre></td></tr></table></figure>
<ul>
<li>复制一份服务器端配置文件模板server.conf到/etc/openvpn/</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cp /usr/share/doc/openvpn-2.3.9/sample/sample-config-files/server.conf /etc/openvpn/</div></pre></td></tr></table></figure>
<ul>
<li>编辑server.conf配置文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/openvpn/server.conf</div><div class="line"></div><div class="line">#本机要侦听使用的IP地址</div><div class="line">local 192.168.1.201</div><div class="line">#使用的端口，默认1194</div><div class="line">port 1194</div><div class="line">#改成tcp，默认使用udp，如果使用HTTP Proxy，必须使用tcp协议</div><div class="line">proto tcp</div><div class="line">#使用的设备可选tap和tun，tap是二层设备，支持链路层协议。</div><div class="line">#tun是ip层的点对点协议，限制稍微多一些，建议使用tun,如果使用桥接的话，就必须要使用tap</div><div class="line">dev tun</div><div class="line">#路径前面加keys，全路径为/etc/openvpn/keys/ca.crt</div><div class="line">#OpenVPN使用的ROOT CA，使用build-ca生成的，用于验证客户是证书是否合法</div><div class="line">ca keys/ca.crt</div><div class="line">#Server使用的证书文件</div><div class="line">cert keys/server.crt</div><div class="line">#Server使用的证书对应的key，注意文件的权限，防止被盗</div><div class="line">key keys/server.key  # This file should be kept secret</div><div class="line">dh keys/dh2048.pem</div><div class="line">#注销用户需要增加</div><div class="line">#crl-verify /usr/share/easy-rsa/2.0/keys/crl.pem</div><div class="line">#默认虚拟局域网网段，不要和实际的局域网冲突即可</div><div class="line">server 10.8.0.0 255.255.255.0</div><div class="line">#用于记录某个Client获得的IP地址，类似于dhcpd.lease文件，</div><div class="line">#防止openvpn重新启动后“忘记”Client曾经使用过的IP地址</div><div class="line">ifconfig-pool-persist ipp.txt</div><div class="line">#通过VPN Server往Client push路由，client通过pull指令获得Server push的所有选项并应用</div><div class="line">#10.0.0.0/8是我这台VPN服务器所在的内网的网段，读者应该根据自身实际情况进行修改</div><div class="line">push &quot;route 10.0.0.0 255.0.0.0&quot;</div><div class="line">#配置客户端dns</div><div class="line">push &quot;dhcp-option DNS 114.114.114.114&quot;</div><div class="line">push &quot;dhcp-option DNS 8.8.4.4&quot;</div><div class="line">#可以让客户端之间相互访问直接通过openvpn程序转发，根据需要设置</div><div class="line">#不用发送到tun或者tap设备后重新转发，优化Client to Client的访问效率</div><div class="line">client-to-client</div><div class="line">#如果客户端都使用相同的证书和密钥连接VPN，一定要打开这个选项，否则每个证书只允许一个人连接VPN,建议一人一个证书。</div><div class="line">duplicate-cn</div><div class="line">#定义最大连接数</div><div class="line">max-clients 10</div><div class="line">#NAT后面使用VPN，如果VPN长时间不通信，NAT Session可能会失效，</div><div class="line">#导致VPN连接丢失，为防止之类事情的发生，keepalive提供一个类似于ping的机制，</div><div class="line">#下面表示每10秒通过VPN的Control通道ping对方，如果连续120秒无法ping通，</div><div class="line">#认为连接丢失，并重新启动VPN，重新连接</div><div class="line">#(对于mode server模式下的openvpn不会重新连接)。</div><div class="line">keepalive 10 120</div><div class="line">tls-auth keys/ta.key 0 # This file is secret</div><div class="line">#对数据进行压缩，注意Server和Client一致</div><div class="line">comp-lzo</div><div class="line">#通过keepalive检测超时后，重新启动VPN，不重新读取keys，保留第一次使用的keys</div><div class="line">persist-key</div><div class="line">#通过keepalive检测超时后，重新启动VPN，一直保持tun或者tap设备是linkup的，</div><div class="line">#否则网络连接会先linkdown然后linkup</div><div class="line">persist-tun</div><div class="line">#OpenVPN的状态日志，默认为/etc/openvpn/openvpn-status.log</div><div class="line">status openvpn-status.log</div><div class="line">#OpenVPN的运行日志，默认为/etc/openvpn/openvpn.log，和log一致，每次重新启动openvpn后保留原有的log信息，新信息追加到文件最后 </div><div class="line">log-append  /var/log/openvpn/openvpn.log</div><div class="line">#相当于debug level</div><div class="line">verb 3</div></pre></td></tr></table></figure>
<ul>
<li>配置内核和防火墙</li>
</ul>
<p><strong>开启路由转发功能</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sed -i &apos;/net.ipv4.ip_forward/s/0/1/&apos; /etc/sysctl.conf</div><div class="line">$ sysctl -p</div></pre></td></tr></table></figure>
<p><strong>配置防火墙</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ iptables -I INPUT -p tcp --dport 1194 -m comment --comment &quot;openvpn&quot; -j ACCEPT</div><div class="line">$ iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j MASQUERADE</div><div class="line">$ service iptables save</div></pre></td></tr></table></figure>
<h3 id="OpenVPN客户端安装及配置"><a href="#OpenVPN客户端安装及配置" class="headerlink" title="OpenVPN客户端安装及配置"></a>OpenVPN客户端安装及配置</h3><h4 id="生成客户端配置文件"><a href="#生成客户端配置文件" class="headerlink" title="生成客户端配置文件"></a>生成客户端配置文件</h4><ul>
<li>复制一份client.conf模板命名为client.ovpn</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cp /usr/share/doc/openvpn-2.3.9/sample/sample-config-files/client.conf client.ovpn</div></pre></td></tr></table></figure>
<ul>
<li>编辑client.ovpn</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ vim client.ovpn</div><div class="line">client</div><div class="line">dev tun</div><div class="line">#改为tcp</div><div class="line">proto tcp</div><div class="line">#OpenVPN服务器的外网IP和端口</div><div class="line">remote xxx.xxx.xxx.xxx 1194</div><div class="line">resolv-retry infinite</div><div class="line">nobind</div><div class="line">persist-key</div><div class="line">persist-tun</div><div class="line">ca ca.crt</div><div class="line">#client1的证书</div><div class="line">cert client1.crt</div><div class="line">#client1的密钥</div><div class="line">key client1.key</div><div class="line">ns-cert-type server</div><div class="line">#去掉前面的注释</div><div class="line">tls-auth ta.key 1</div><div class="line">comp-lzo</div><div class="line">verb 3</div></pre></td></tr></table></figure>
<h4 id="Linux客户端"><a href="#Linux客户端" class="headerlink" title="Linux客户端"></a>Linux客户端</h4><ul>
<li>安装客户端</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum -y install openvpn   #EPEL源</div></pre></td></tr></table></figure>
<ul>
<li>配置客户端</li>
</ul>
<p>将OpenVPN服务器上的<code>client.ovpn</code>、<code>ca.crt</code>、<code>client1.crt</code>、<code>client1.key</code>、<code>ta.key</code>上传到Linux客户端<code>/etc/openvpn/keys/</code>文件夹</p>
<ul>
<li>连接OpenVPN</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ openvpn --daemon --config /etc/openvpn/keys/client.ovpn</div></pre></td></tr></table></figure>
<h4 id="Windows客户端"><a href="#Windows客户端" class="headerlink" title="Windows客户端"></a>Windows客户端</h4><ul>
<li>下载并安装客户端</li>
</ul>
<p>OpenVPN版本:OpenVPN 2.3.3 Windows 64位</p>
<blockquote>
<p>OpenVPN Windows 32位安装文件: <a href="https://swupdate.openvpn.org/community/releases/openvpn-install-2.3.10-I601-i686.exe" target="_blank" rel="external">https://swupdate.openvpn.org/community/releases/openvpn-install-2.3.10-I601-i686.exe</a><br>OpenVPN Windows 64位安装文件: <a href="https://swupdate.openvpn.org/community/releases/openvpn-install-2.3.10-I601-x86_64.exe" target="_blank" rel="external">https://swupdate.openvpn.org/community/releases/openvpn-install-2.3.10-I601-x86_64.exe</a></p>
</blockquote>
<ul>
<li>配置客户端</li>
</ul>
<p>将OpenVPN服务器上的<code>client.ovpn</code>、<code>ca.crt</code>、<code>client1.crt</code>、<code>client1.key</code>、<code>ta.key</code>上传到Windows客户端安装目录下的config文件夹(<code>C:\Program Files\OpenVPN\config</code>)</p>
<ul>
<li>启动OpenVPN GUI</li>
</ul>
<p>在电脑右下角的openvpn图标上右击，选择”Connect”。正常情况下应该能够连接成功，分配正常的IP。</p>
<h4 id="MAC客户端"><a href="#MAC客户端" class="headerlink" title="MAC客户端"></a>MAC客户端</h4><ul>
<li>Tunnelblick: <a href="https://tunnelblick.net/" target="_blank" rel="external">https://tunnelblick.net/</a></li>
</ul>
<h4 id="Android客户端"><a href="#Android客户端" class="headerlink" title="Android客户端"></a>Android客户端</h4><ul>
<li>OpenVPN Connect: <a href="https://play.google.com/store/apps/details?id=net.openvpn.openvpn" target="_blank" rel="external">https://play.google.com/store/apps/details?id=net.openvpn.openvpn</a></li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://heylinux.com/archives/3499.html" target="_blank" rel="external">http://heylinux.com/archives/3499.html</a><br><a href="http://qicheng0211.blog.51cto.com/3958621/1575273" target="_blank" rel="external">http://qicheng0211.blog.51cto.com/3958621/1575273</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL的增强型语法高亮终端-MyCli]]></title>
      <url>http://www.hi-linux.com/posts/23030.html</url>
      <content type="html"><![CDATA[<h3 id="MyCli简介"><a href="#MyCli简介" class="headerlink" title="MyCli简介"></a>MyCli简介</h3><p>MyCli是一个MySQL的命令行客户端，可以实现自动补全(auto-completion)和语法高亮。MyCli也可用于MariaDB和Percona。</p>
<p>项目地址：<a href="http://mycli.net/" target="_blank" rel="external">http://mycli.net/</a></p>
<p><strong>特性</strong></p>
<ul>
<li>MyCli使用<a href="https://github.com/jonathanslenders/python-prompt-toolkit/" target="_blank" rel="external">Python Prompt Toolkit</a>编写。</li>
<li>支持语法高亮</li>
<li>当你输入SQL关键字，数据库的表格和列时可自动补全。</li>
<li>智能补全(默认启用)，会提示文本感应的(context-sensitive)补全。</li>
<li>配置文件在第一次启动时，自动创建在<code>~/.myclirc</code></li>
</ul>
<a id="more"></a>
<p><strong>效果展示</strong></p>
<p><img src="http://www.hi-linux.com/img/linux/mycli.gif" alt=""></p>
<h3 id="MyCli安装"><a href="#MyCli安装" class="headerlink" title="MyCli安装"></a>MyCli安装</h3><p>如果你已会安装Python包，那就简单了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install mycli</div></pre></td></tr></table></figure>
<p>如果你是在OS X平台，那就用homebrew</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew update &amp;&amp; brew install mycli</div></pre></td></tr></table></figure>
<h3 id="MyCli使用"><a href="#MyCli使用" class="headerlink" title="MyCli使用"></a>MyCli使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">$ mycli --help                        </div><div class="line">Usage: mycli [OPTIONS] [DATABASE]</div><div class="line"></div><div class="line">Options:</div><div class="line">  -h, --host TEXT               Host address of the database.</div><div class="line">  -P, --port INTEGER            Port number to use for connection. Honors</div><div class="line">                                $MYSQL_TCP_PORT</div><div class="line">  -u, --user TEXT               User name to connect to the database.</div><div class="line">  -S, --socket TEXT             The socket file to use for connection.</div><div class="line">  -p, --password TEXT           Password to connect to the database</div><div class="line">  --pass TEXT                   Password to connect to the database</div><div class="line">  --ssl-ca PATH                 CA file in PEM format</div><div class="line">  --ssl-capath TEXT             CA directory</div><div class="line">  --ssl-cert PATH               X509 cert in PEM format</div><div class="line">  --ssl-key PATH                X509 key in PEM format</div><div class="line">  --ssl-cipher TEXT             SSL cipher to use</div><div class="line">  --ssl-verify-server-cert      Verify server&apos;s &quot;Common Name&quot; in its cert</div><div class="line">                                against hostname used when connecting. This</div><div class="line">                                option is disabled by default</div><div class="line">  -v, --version                 Version of mycli.</div><div class="line">  -D, --database TEXT           Database to use.</div><div class="line">  -R, --prompt TEXT             Prompt format (Default: &quot;\t \u@\h:\d&gt; &quot;)</div><div class="line">  -l, --logfile FILENAME        Log every query and its results to a file.</div><div class="line">  --defaults-group-suffix TEXT  Read config group with the specified suffix.</div><div class="line">  --defaults-file PATH          Only read default options from the given file</div><div class="line">  --auto-vertical-output        Automatically switch to vertical output mode</div><div class="line">                                if the result is wider than the terminal</div><div class="line">                                width.</div><div class="line">  -t, --table                   Display batch output in table format.</div><div class="line">  --warn / --no-warn            Warn before running a destructive query.</div><div class="line">  --local-infile BOOLEAN        Enable/disable LOAD DATA LOCAL INFILE.</div><div class="line">  --login-path TEXT             Read this path from the login file.</div><div class="line">  --help                        Show this message and exit.</div></pre></td></tr></table></figure>
<h3 id="MyCli示例"><a href="#MyCli示例" class="headerlink" title="MyCli示例"></a>MyCli示例</h3><ul>
<li>用root登陆到数据库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ mycli -h localhost -u root -p123</div><div class="line">Version: 1.7.0</div><div class="line">Chat: https://gitter.im/dbcli/mycli</div><div class="line">Mail: https://groups.google.com/forum/#!forum/mycli-users</div><div class="line">Home: http://mycli.net</div><div class="line">Thanks to the contributor - www.mysqlfanboy.com</div><div class="line">mysql root@localhost:(none)&gt;</div></pre></td></tr></table></figure>
<ul>
<li>用root登陆并连接到数据库tpcc</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ mycli mysql://root@localhost:3306/tpcc</div><div class="line">Version: 1.7.0</div><div class="line">Chat: https://gitter.im/dbcli/mycli</div><div class="line">Mail: https://groups.google.com/forum/#!forum/mycli-users</div><div class="line">Home: http://mycli.net</div><div class="line">Thanks to the contributor - Magnus udd</div><div class="line">mysql root@localhost:tpcc&gt;</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://mycli.net/" target="_blank" rel="external">http://mycli.net/</a><br><a href="https://github.com/dbcli/mycli" target="_blank" rel="external">https://github.com/dbcli/mycli</a><br><a href="https://linux.cn/article-5934-1.html" target="_blank" rel="external">https://linux.cn/article-5934-1.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux系统性能监控工具Tsar]]></title>
      <url>http://www.hi-linux.com/posts/5198.html</url>
      <content type="html"><![CDATA[<h3 id="Tsar简介"><a href="#Tsar简介" class="headerlink" title="Tsar简介"></a>Tsar简介</h3><ul>
<li>Tsar是淘宝自己开发的一个采集工具，主要用来收集服务器的系统信息(如cpu，io，mem，tcp等)，以及应用数据(如squid haproxy nginx等)。</li>
<li>收集到的数据存储在磁盘上，可以随时查询历史信息，输出方式灵活多样，另外支持将数据存储到mysql中，也可以将数据发送到nagios报警服务器。</li>
<li>Tsar在展示数据时，可以指定模块，并且可以对多条信息的数据进行merge输出，带–live参数可以输出秒级的实时信息。</li>
<li>Tsar能够比较方便的增加模块，只需要按照tsar的要求编写数据的采集函数和展现函数，就可以把自定义的模块加入到Tsar中。<a id="more"></a>
</li>
</ul>
<p><strong>总体架构</strong></p>
<ul>
<li>Tsar是基于模块化设计的程序，程序有两部分组成：框架和模块。</li>
<li>框架程序源代码主要在src目录，而模块源代码主要在modules目录中。</li>
<li>框架提供对配置文件的解析，模块的加载，命令行参数的解析，应用模块的接口对模块原始数据的解析与输出。 模块提供接口给框架调用。</li>
<li>Tsar依赖与cron每分钟执行采集数据，因此它需要系统安装并启用crond，安装后，tsar每分钟会执行<code>tsar --cron</code>来定时采集信息，并且记录到原始日志文件。</li>
</ul>
<p><strong>Tsar的运行流程图</strong></p>
<p><img src="http://www.hi-linux.com/img/linux/tsar.png" alt=""></p>
<p>主要执行流程</p>
<blockquote>
<p>1.解析输入<br>根据用户的输入，初始化一些全局信息，如间隔时间，是否merge，是否指定模块，运行模式</p>
<p>2.读取配置文件信息<br>主要解析tsar的配置文件，如果include生效，则会解析include的配置文件<br>配置文件用来获得tsar需要加载的模块，输出方式，每一类输出方式包含的模块，和此输出方式的接收信息<br>如mod_cpu on代表采集cpu的信息<br>output_interface file,nagios表示向文件和nagios服务器发送采集信息和报警信息</p>
<p>3.加载相应模块<br>根据配置文件的模块开启关闭情况，将模块的动态库load到系统</p>
<p>4.tsar的三种运行模式<br>tsar在运行的时候有三种模式：<br>print模式仅仅输出指定的模块信息，默认显示最近一天的；<br>live模式是输出当前信息，可以精确到秒级<br>cron模式，此一般是crontab定时执行，每一分钟采集一次所有配置的模块信息，并将数据写入原始文件，在cron运行的时候 会判断是否配置输出到db或者nagios，如果配置则将相应格式的数据输出到对应接口。</p>
<p>5.释放资源<br>程序最后，释放动态库，程序结束</p>
</blockquote>
<p>项目地址: <a href="https://github.com/alibaba/tsar" target="_blank" rel="external">https://github.com/alibaba/tsar</a></p>
<h3 id="Tsar安装"><a href="#Tsar安装" class="headerlink" title="Tsar安装"></a>Tsar安装</h3><p><strong>从github上检出代码</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git clone git://github.com/alibaba/tsar.git</div><div class="line">$ cd tsar</div><div class="line">$ make</div><div class="line">$ make install</div></pre></td></tr></table></figure>
<p><strong>从github上下载源码</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ wget -O tsar.zip https://github.com/alibaba/tsar/archive/master.zip --no-check-certificate</div><div class="line">$ unzip tsar.zip</div><div class="line">$ cd tsar</div><div class="line">$ make</div><div class="line">$ make install</div></pre></td></tr></table></figure>
<p><strong>安装后生成的文件</strong></p>
<blockquote>
<p>Tsar配置文件路径：/etc/tsar/tsar.conf，tsar的采集模块和输出的具体配置；<br>定时任务配置:/etc/cron.d/tsar，负责每分钟调用tsar执行采集任务；<br>日志文件轮转配置:/etc/logrotate.d/tsar，每个月会把tsar的本地存储进行轮转；<br>模块路径：/usr/local/tsar/modules，各个模块的动态库so文件；</p>
</blockquote>
<h3 id="Tsar配置"><a href="#Tsar配置" class="headerlink" title="Tsar配置"></a>Tsar配置</h3><p><strong>Tsar配置文件介绍</strong></p>
<ul>
<li>定时任务配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cat  /etc/cron.d/tsar</div><div class="line"># cron tsar collect once per minute</div><div class="line">MAILTO=&quot;&quot;</div><div class="line">* * * * * root /usr/bin/tsar --cron &gt; /dev/null 2&gt;&amp;1</div></pre></td></tr></table></figure>
<p>如上所示，<code>/etc/cron.d/tsar</code>里面负责每分钟以root用户的角色调用tsar命令来执行数据采集。</p>
<ul>
<li>日志文件轮转</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/logrotate.d/tsar </div><div class="line">/var/log/tsar.data</div><div class="line">&#123;</div><div class="line">monthly</div><div class="line">rotate 120</div><div class="line">create</div><div class="line">nocompress</div><div class="line">nodateext</div><div class="line">notifempty</div><div class="line">prerotate</div><div class="line">/usr/bin/chattr -a /var/log/tsar.data</div><div class="line">endscript</div><div class="line">postrotate</div><div class="line">/usr/bin/chattr +a /var/log/tsar.data</div><div class="line">endscript</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在日志文件轮转配置中，每个月会把tsar的本地存储进行轮转，此外这里也设定了数据在<code>/var/log/tsar.data</code>下</p>
<ul>
<li>配置文件</li>
</ul>
<p><code>/etc/tsar/tsar.conf</code>负责tsar的采集模块和输出的具体配置；在这里配置启用哪些模块，输出等内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/tsar/tsar.conf</div><div class="line">####debug_level(INFO DEBUG WARN ERROR FATAL)</div><div class="line">debug_level ERROR</div><div class="line">####[module]</div><div class="line">mod_cpu on</div><div class="line">mod_mem on</div><div class="line">mod_swap on</div><div class="line">mod_tcp on</div><div class="line">mod_udp on</div><div class="line">mod_traffic on</div><div class="line">mod_io on</div><div class="line">mod_pcsw on</div><div class="line">mod_partition on</div><div class="line">mod_tcpx on</div><div class="line">mod_load on</div><div class="line">mod_apache off</div><div class="line">mod_lvs off</div><div class="line">mod_haproxy off</div><div class="line">mod_squid off</div><div class="line">mod_nginx off</div><div class="line">mod_nginx_multiport off</div><div class="line">mod_nginx_live off</div><div class="line">#mod_nginx_sys_mport on 80 8080</div><div class="line">mod_swift off</div><div class="line">mod_swift_code off</div><div class="line">mod_swift_domain off</div><div class="line">mod_swift_esi off</div><div class="line">mod_swift_fwd off</div><div class="line">mod_swift_store off</div><div class="line">mod_swift_swapdir off</div><div class="line">mod_swift_purge off</div><div class="line">mod_swift_sys off</div><div class="line">mod_swift_tcmalloc off</div><div class="line">mod_tmd off</div><div class="line">mod_percpu off</div><div class="line">mod_tcprt off</div><div class="line">mod_proc off pidname</div><div class="line">mod_pharos off</div><div class="line">mod_tmd4 off</div><div class="line">mod_keyserver off</div><div class="line">#mod_erpc on /etc/tsar/erpc.conf</div><div class="line">#mod_search on</div><div class="line"></div><div class="line">####output_interface file,db,nagios</div><div class="line">output_interface file</div><div class="line"></div><div class="line">####[output_file] original data to store</div><div class="line">output_file_path /var/log/tsar.data</div><div class="line"></div><div class="line">####[output_stdio] these mod will be show as using tsar command</div><div class="line">output_stdio_mod mod_swap,mod_partition,mod_cpu,mod_mem,mod_lvs,mod_haproxy,mod_traffic,mod_squid,mod_load,mod_tcp,mod_udp,mod_tcpx,mod_apache,mod_pcsw,mod_io,mod_percpu</div><div class="line"></div><div class="line">####[output_db]</div><div class="line">#output_db_mod mod_swap,mod_partition,mod_cpu,mod_mem,mod_traffic,mod_load,mod_tcp,mod_udp,mod_pcsw,mod_io</div><div class="line">#output_db_addr console2:56677</div><div class="line"></div><div class="line">####[output_tcp]</div><div class="line">#output_tcp_mod mod_swap,mod_cpu</div><div class="line">#output_tcp_addr localhost:9666</div><div class="line">#output_tcp_merge on</div><div class="line"></div><div class="line">####support include other mod conf</div><div class="line">include /etc/tsar/conf.d/*.conf</div><div class="line"></div><div class="line">####The IP address or the host running the NSCA daemon</div><div class="line">#server_addr nagios.server.com</div><div class="line">####The port on which the daemon is running - default is 5667</div><div class="line">#server_port 8086</div><div class="line">####The cycle of send alert to nagios</div><div class="line">#cycle_time 300</div><div class="line">####nsca client program</div><div class="line">#send_nsca_cmd /usr/bin/send_nsca</div><div class="line">#send_nsca_conf /home/a/conf/amon/send_nsca.conf</div><div class="line"></div><div class="line">####tsar mod alert config file</div><div class="line">####threshold servicename.key;w-min;w-max;c-min;cmax;</div><div class="line">#threshold cpu.util;N;N;N;N;</div></pre></td></tr></table></figure>
<p><strong>常用参数说明</strong></p>
<blockquote>
<p>debug_level       指定tsar的运行级别，主要用来调试使用<br>mod_xxx on/off    开启指定模块<br>out_interface     设置输出类型，支持file，nagios，db<br>out_stdio_mod     设置用户终端默认显示的模块<br>output_db_mod     设置哪些模块输出到数据库<br>output_db_addr    数据库的ip和端口<br>output_nagios_mod 设置哪些模块输出到nagios<br>include           支持include配置，主要用来加载用户的自定义模块<br>cycle_time        指定上报的间隔时间，由于tsar每一分钟采集一次，上报时会判断是否符合时间间隔，如设置300的话，则在0，5等整点分钟会上报nagios<br>threshold         设置某个要报警项的阀值,前面是模块和要监控的具体名称，后面的四个数据代表报警的范围，warn和critical的范围</p>
</blockquote>
<ul>
<li>自定义模块配置文件</li>
</ul>
<p><code>/etc/tsar/conf.d/</code>这个目录下是用户的自定义模块配置文件,配置基本在用户开发自定义模块时确定，主要包含模块的开启，输出类型和报警范围</p>
<h3 id="Tsar使用介绍"><a href="#Tsar使用介绍" class="headerlink" title="Tsar使用介绍"></a>Tsar使用介绍</h3><p>在Tsar的使用中，可以参考下面的帮助信息，完成对应的监控。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">$ tsar -h</div><div class="line">Usage: tsar [options]</div><div class="line">Options:</div><div class="line">    -check         查看最后一次的采集数据</div><div class="line">    --check/-C     查看最后一次tsar的提醒信息，如：tsar --check / tsar --check --cpu --io</div><div class="line">    --cron/-c      使用crond模式来进行tsar监控</div><div class="line">    --interval/-i  指明tsar的间隔时间，默认单位分钟,默认显示间隔5分钟；带上--live参数则单位是秒，默认是5秒。 </div><div class="line">    --list/-L      列出启用的模块</div><div class="line">    --live/-l      启用实时模式，类似iostat等，可以配合-i参数和模块参数使用。</div><div class="line">    --file/-f      指定输入文件</div><div class="line">    --ndays/-n     控制显示多长时间的历史数据，默认1天</div><div class="line">    --date/-d      指定日期,YYYYMMDD或者n代表n天前</div><div class="line">    --detail/-D    能够指定查看主要字段还是模块的所有字段</div><div class="line">    --spec/-s      指定字段,tsar –cpu -s sys,util</div><div class="line">    --watch/-w     显示最后多少分钟的记录. 如:tsar --watch 30 / tsar --watch 30 --cpu --io</div><div class="line">    --merge/-m     对有多个数据的展示，进行汇总，如机器上跑了3个squid，可以用 tsar –squid -m的放式进行展示汇总。</div><div class="line">    --item/-I      显示指定项目数据, 如:tsar --io -I sda</div><div class="line">    -–help/-h      显示提示信息和模块信息</div><div class="line">Modules Enabled:</div><div class="line">    --cpu          列出cpu相关的监控计数</div><div class="line">    --mem          物理内存的使用情况</div><div class="line">    --swap         虚拟内存的使用情况</div><div class="line">    --tcp          TCP协议IPV4的使用情况</div><div class="line">    --udp          UDP协议IPV4的使用情况</div><div class="line">    --traffic      网络传出的使用情况</div><div class="line">    --io           Linux IO的情况</div><div class="line">    --pcsw         进程和上下文切换</div><div class="line">    --partition    磁盘使用情况</div><div class="line">    --tcpx         TCP连接相关的数据参数</div><div class="line">    --load         系统负载情况</div></pre></td></tr></table></figure>
<ul>
<li>tsar命令行主要担负显示历史数据和实时数据的功能，因此有控制展示模块和格式化输出的参数，默认不带任何参数/选项的情况下，tsar打印汇总信息。</li>
<li>tsar命令行主要显示给人看的，所以数据展示中都进行了k/m/g等的进位。</li>
<li>tsar命令会在显示20行数据后再次打印各个列的列头，以利于用户理解数据的含义。</li>
<li>tsar的列头信息包括2行，第一行为模块名，第二行为列名。</li>
<li>tsar输出最后会作min/avg/max的汇总统计，统计所展示中的最小/平均/最大数据。</li>
</ul>
<h3 id="Tsar使用实例"><a href="#Tsar使用实例" class="headerlink" title="Tsar使用实例"></a>Tsar使用实例</h3><h4 id="Tsar监控系统"><a href="#Tsar监控系统" class="headerlink" title="Tsar监控系统"></a>Tsar监控系统</h4><p>查看可用的模块列表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ tsar -L</div><div class="line">tsar enable follow modules:</div><div class="line">    cpu</div><div class="line">    mem</div><div class="line">    swap</div><div class="line">    tcp</div><div class="line">    udp</div><div class="line">    traffic</div><div class="line">    io</div><div class="line">    pcsw</div><div class="line">    partition</div><div class="line">    tcpx</div><div class="line">    load</div></pre></td></tr></table></figure>
<p>查看指定模块的运行状况,模块是指<code>tsar -L</code>列出来的名称。如查看CPU运行情况</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">$ tsar --cpu</div><div class="line">Time           -----------------------cpu---------------------- </div><div class="line">Time             user     sys    wait    hirq    sirq    util   </div><div class="line">18/05/16-09:20   0.03    0.08    0.01    0.00    0.02    0.12   </div><div class="line">18/05/16-09:25   0.00    0.02    0.00    0.00    0.01    0.04   </div><div class="line">18/05/16-09:30   0.00    0.02    0.00    0.00    0.02    0.05   </div><div class="line">18/05/16-09:35   0.00    0.87    2.06    0.00    0.02    0.90   </div><div class="line">18/05/16-09:40   0.00    0.03    0.00    0.00    0.02    0.05   </div><div class="line">18/05/16-09:45   0.00    0.02    0.00    0.00    0.02    0.04   </div><div class="line">18/05/16-09:50   0.00    0.02    0.00    0.00    0.02    0.04   </div><div class="line">18/05/16-09:55   0.01    0.02    0.00    0.00    0.02    0.05   </div><div class="line">18/05/16-10:00   0.00    0.02    0.00    0.00    0.02    0.05   </div><div class="line">18/05/16-10:05   0.07    0.16    0.00    0.00    0.02    0.24   </div><div class="line">18/05/16-10:10   0.12    0.32    0.04    0.00    0.02    0.46   </div><div class="line">18/05/16-10:15   0.02    0.09    0.00    0.00    0.02    0.13   </div><div class="line">18/05/16-10:20   0.04    0.15    0.00    0.00    0.02    0.20   </div><div class="line">18/05/16-10:25   0.03    0.07    0.00    0.00    0.02    0.11   </div><div class="line">18/05/16-10:30   0.01    0.03    0.00    0.00    0.02    0.05   </div><div class="line">18/05/16-10:35   0.00    0.02    0.00    0.00    0.02    0.04   </div><div class="line">18/05/16-10:40   0.01    0.03    0.00    0.00    0.02    0.05   </div><div class="line">18/05/16-10:45   0.00    0.02    0.00    0.00    0.02    0.05   </div><div class="line">18/05/16-10:50   0.00    0.03    0.00    0.00    0.02    0.05   </div><div class="line">Time           -----------------------cpu---------------------- </div><div class="line">Time             user     sys    wait    hirq    sirq    util   </div><div class="line">18/05/16-10:55   0.07    0.10    0.00    0.00    0.02    0.19   </div><div class="line">18/05/16-11:00   0.02    0.07    0.00    0.00    0.02    0.10   </div><div class="line">18/05/16-11:05   0.02    0.05    0.00    0.00    0.01    0.09   </div><div class="line">18/05/16-11:10   0.01    0.03    0.00    0.00    0.01    0.06   </div><div class="line">18/05/16-11:15   0.01    0.03    0.00    0.00    0.01    0.05   </div><div class="line">18/05/16-11:20   0.01    0.03    0.00    0.00    0.02    0.06   </div><div class="line">18/05/16-11:25   0.01    0.03    0.00    0.00    0.01    0.05   </div><div class="line"></div><div class="line">MAX              0.03    0.87    2.06    0.00    0.02    0.90   </div><div class="line">MEAN             0.02    0.09    0.08    0.00    0.02    0.13   </div><div class="line">MIN              0.03    0.08    0.01    0.00    0.02    0.12</div></pre></td></tr></table></figure>
<p>查看实时数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ tsar -l   </div><div class="line">Time              ---cpu-- ---mem-- ---tcp-- -----traffic---- --sda--- --dm-0-- --dm-1-- --dm-2--  ---load- </div><div class="line">Time                util     util   retran    bytin  bytout     util     util     util     util     load1   </div><div class="line">18/05/16-11:27:47   0.05    33.16     0.00    24.00   74.00     0.04     0.04     0.00     0.00      0.00   </div><div class="line">18/05/16-11:27:52   0.05    33.15     0.00    30.00   52.00     0.06     0.06     0.00     0.00      0.00   </div><div class="line">18/05/16-11:27:57   0.20    33.15     0.00    12.00   40.00     0.02     0.02     0.00     0.00      0.00   </div><div class="line">18/05/16-11:28:02   0.50    33.18     0.00    12.00   40.00     0.00     0.00     0.00     0.00      0.00   </div><div class="line">18/05/16-11:28:07   0.15    33.18     0.00    85.00   40.00     0.04     0.04     0.00     0.00      0.00   </div><div class="line">18/05/16-11:28:12   0.15    33.18     0.00   159.00   40.00     0.00     0.00     0.00     0.00      0.00   </div><div class="line">18/05/16-11:28:17   0.05    33.18     0.00    12.00   40.00     0.06     0.06     0.00     0.00      0.00   </div><div class="line">18/05/16-11:28:22   0.10    33.18     0.00    24.00   52.00     0.00     0.00     0.00     0.00      0.00   </div><div class="line">18/05/16-11:28:27   0.15    33.17     0.00    48.00   40.00     0.00     0.00     0.00     0.00      0.00</div></pre></td></tr></table></figure>
<p>显示1天内的历史汇总(summury)信息，以默认5分钟为间隔</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">$ tsar</div><div class="line">Time           ---cpu-- ---mem-- ---tcp-- -----traffic---- --sda--- --dm-0-- --dm-1-- --dm-2--  ---load- </div><div class="line">Time             util     util   retran    bytin  bytout     util     util     util     util     load1   </div><div class="line">18/05/16-09:20   0.12    24.61     0.00    42.00   33.00     0.07     0.07     0.00     0.00      0.00   </div><div class="line">18/05/16-09:25   0.04    24.58     0.00    12.00    2.00     0.03     0.03     0.00     0.00      0.00   </div><div class="line">18/05/16-09:30   0.05    24.62     0.00     6.00    3.00     0.03     0.03     0.00     0.00      0.00   </div><div class="line">18/05/16-09:35   0.90    32.99     0.00     3.00    2.00    11.16    11.05     0.00     0.11      0.35   </div><div class="line">18/05/16-09:40   0.05    32.98     0.00     8.00    2.00     0.14     0.14     0.00     0.00      0.00   </div><div class="line">18/05/16-09:45   0.04    32.98     0.00    16.00    2.00     0.01     0.01     0.00     0.00      0.00   </div><div class="line">18/05/16-09:50   0.04    33.03     0.00    11.00    3.00     0.03     0.03     0.00     0.00      0.00   </div><div class="line">18/05/16-09:55   0.05    32.95     0.00     8.00    2.00     0.03     0.03     0.00     0.00      0.00   </div><div class="line">18/05/16-10:00   0.05    33.00     0.00     9.00    2.00     0.02     0.02     0.00     0.00      0.00   </div><div class="line">18/05/16-10:05   0.24    33.00     0.00    77.00  167.00     0.05     0.05     0.00     0.00      0.00   </div><div class="line">18/05/16-10:10   0.46    33.50     0.00   146.00  377.00     0.23     0.23     0.00     0.00      0.00   </div><div class="line">18/05/16-10:15   0.13    33.01     0.00    31.00   60.00     0.04     0.04     0.00     0.00      0.00   </div><div class="line">18/05/16-10:20   0.20    33.03     0.00    51.00  120.00     0.05     0.05     0.00     0.00      0.00   </div><div class="line">18/05/16-10:25   0.11    33.01     0.00    27.00   26.00     0.04     0.04     0.00     0.00      0.01   </div><div class="line">18/05/16-10:30   0.05    33.04     0.00     2.00    3.00     0.02     0.02     0.00     0.00      0.00   </div><div class="line">18/05/16-10:35   0.04    32.99     0.00    10.00    2.00     0.01     0.01     0.00     0.00      0.00   </div><div class="line">18/05/16-10:40   0.05    33.03     0.00    22.00    2.00     0.02     0.02     0.00     0.00      0.00   </div><div class="line">18/05/16-10:45   0.05    33.00     0.00    10.00    3.00     0.03     0.03     0.00     0.00      0.00   </div><div class="line">18/05/16-10:50   0.05    33.01     0.00    16.00    3.00     0.02     0.02     0.00     0.00      0.00   </div><div class="line">Time           ---cpu-- ---mem-- ---tcp-- -----traffic---- --sda--- --dm-0-- --dm-1-- --dm-2--  ---load- </div><div class="line">Time             util     util   retran    bytin  bytout     util     util     util     util     load1   </div><div class="line">18/05/16-10:55   0.19    33.02     0.00    45.00   63.00     0.02     0.02     0.00     0.00      0.00   </div><div class="line">18/05/16-11:00   0.10    33.04     0.00    21.00   30.00     0.02     0.02     0.00     0.00      0.00   </div><div class="line">18/05/16-11:05   0.09    33.01     0.00    32.00   23.00     0.03     0.03     0.00     0.00      0.00   </div><div class="line">18/05/16-11:10   0.06    33.04     0.00    14.00    3.00     0.01     0.01     0.00     0.00      0.01   </div><div class="line">18/05/16-11:15   0.05    33.02     0.00    12.00    2.00     0.01     0.01     0.00     0.00      0.00   </div><div class="line">18/05/16-11:20   0.06    33.03     0.00    10.00    2.00     0.04     0.04     0.00     0.00      0.03   </div><div class="line">18/05/16-11:25   0.05    33.03     0.00     7.00    2.00     0.01     0.01     0.00     0.00      0.03   </div><div class="line"></div><div class="line">MAX              0.90    33.50     0.00   146.00  377.00    11.16    11.05     0.00     0.11      0.35   </div><div class="line">MEAN             0.13    32.36     0.00    24.24   36.24     0.48     0.48     0.00     0.00      0.02   </div><div class="line">MIN              0.12    24.61     0.00     2.00    2.00     0.07     0.07     0.00     0.00      0.00</div></pre></td></tr></table></figure>
<p>以1秒钟为间隔，实时打印tsar的概述数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ tsar -i 1 -l</div><div class="line">Time              ---cpu-- ---mem-- ---tcp-- -----traffic---- --sda--- --dm-0-- --dm-1-- --dm-2--  ---load- </div><div class="line">Time                util     util   retran    bytin  bytout     util     util     util     util     load1   </div><div class="line">18/05/16-10:17:17   0.25    33.13     0.00    60.00  314.00     0.00     0.00     0.00     0.00      0.00   </div><div class="line">18/05/16-10:17:18   0.00    33.13     0.00    60.00  202.00     0.50     0.50     0.00     0.00      0.00   </div><div class="line">18/05/16-10:17:19   0.49    33.13     0.00    60.00  202.00     0.00     0.00     0.00     0.00      0.00   </div><div class="line">18/05/16-10:17:21   0.00    33.13     0.00    60.00  202.00     0.00     0.00     0.00     0.00      0.00   </div><div class="line">18/05/16-10:17:22   0.49    33.13     0.00    60.00  202.00     0.00     0.00     0.00     0.00      0.00   </div><div class="line">18/05/16-10:17:23   0.25    33.13     0.00   120.00  262.00     0.20     0.20     0.00     0.00      0.00   </div><div class="line">18/05/16-10:17:24   0.25    33.13     0.00    60.00  202.00     0.40     0.40     0.00     0.00      0.00   </div><div class="line">18/05/16-10:17:25   0.00    33.13     0.00    60.00  202.00     0.00     0.00     0.00     0.00      0.00   </div><div class="line">18/05/16-10:17:26   0.00    33.13     0.00    60.00  202.00     0.00     0.00     0.00     0.00      0.00   </div><div class="line">18/05/16-10:17:27   0.49    33.13     0.00    60.00  202.00     0.00     0.00     0.00     0.00      0.00   </div><div class="line">18/05/16-10:17:28   0.25    33.13     0.00    60.00  202.00     0.00     0.00     0.00     0.00      0.00   </div><div class="line">18/05/16-10:17:29   0.25    33.13     0.00    60.00  202.00     0.00     0.00     0.00     0.00      0.00</div></pre></td></tr></table></figure>
<p>tsar cpu监控</p>
<p>使用参数<code>-–cpu</code>可以监控系统的cpu，参数user表示用户空间cpu, sys内核空间cpu使用情况，wait是IO对应的cpu使用情况，hirq,sirq分别是硬件中断，软件中断的使用情况，util是系统使用cpu的总计情况。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">$ tsar  --cpu</div><div class="line">Time           -----------------------cpu---------------------- </div><div class="line">Time             user     sys    wait    hirq    sirq    util   </div><div class="line">18/05/16-09:20   0.03    0.08    0.01    0.00    0.02    0.12   </div><div class="line">18/05/16-09:25   0.00    0.02    0.00    0.00    0.01    0.04   </div><div class="line">18/05/16-09:30   0.00    0.02    0.00    0.00    0.02    0.05   </div><div class="line">18/05/16-09:35   0.00    0.87    2.06    0.00    0.02    0.90   </div><div class="line">18/05/16-09:40   0.00    0.03    0.00    0.00    0.02    0.05   </div><div class="line">18/05/16-09:45   0.00    0.02    0.00    0.00    0.02    0.04   </div><div class="line">18/05/16-09:50   0.00    0.02    0.00    0.00    0.02    0.04   </div><div class="line">18/05/16-09:55   0.01    0.02    0.00    0.00    0.02    0.05   </div><div class="line">18/05/16-10:00   0.00    0.02    0.00    0.00    0.02    0.05   </div><div class="line">18/05/16-10:05   0.07    0.16    0.00    0.00    0.02    0.24   </div><div class="line">18/05/16-10:10   0.12    0.32    0.04    0.00    0.02    0.46   </div><div class="line">18/05/16-10:15   0.02    0.09    0.00    0.00    0.02    0.13   </div><div class="line">18/05/16-10:20   0.04    0.15    0.00    0.00    0.02    0.20   </div><div class="line">18/05/16-10:25   0.03    0.07    0.00    0.00    0.02    0.11   </div><div class="line">18/05/16-10:30   0.01    0.03    0.00    0.00    0.02    0.05   </div><div class="line">18/05/16-10:35   0.00    0.02    0.00    0.00    0.02    0.04   </div><div class="line">18/05/16-10:40   0.01    0.03    0.00    0.00    0.02    0.05   </div><div class="line">18/05/16-10:45   0.00    0.02    0.00    0.00    0.02    0.05   </div><div class="line">18/05/16-10:50   0.00    0.03    0.00    0.00    0.02    0.05   </div><div class="line">Time           -----------------------cpu---------------------- </div><div class="line">Time             user     sys    wait    hirq    sirq    util   </div><div class="line">18/05/16-10:55   0.07    0.10    0.00    0.00    0.02    0.19   </div><div class="line">18/05/16-11:00   0.02    0.07    0.00    0.00    0.02    0.10   </div><div class="line">18/05/16-11:05   0.02    0.05    0.00    0.00    0.01    0.09   </div><div class="line">18/05/16-11:10   0.01    0.03    0.00    0.00    0.01    0.06   </div><div class="line">18/05/16-11:15   0.01    0.03    0.00    0.00    0.01    0.05   </div><div class="line">18/05/16-11:20   0.01    0.03    0.00    0.00    0.02    0.06   </div><div class="line">18/05/16-11:25   0.01    0.03    0.00    0.00    0.01    0.05   </div><div class="line"></div><div class="line">MAX              0.03    0.87    2.06    0.00    0.02    0.90   </div><div class="line">MEAN             0.02    0.09    0.08    0.00    0.02    0.13   </div><div class="line">MIN              0.03    0.08    0.01    0.00    0.02    0.12</div></pre></td></tr></table></figure>
<p>显示一天内的cpu和内存历史数据，以1分钟为间隔</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ tsar --cpu --mem -i 1</div><div class="line">Time           -----------------------cpu---------------------- -----------------------mem---------------------- </div><div class="line">Time             user     sys    wait    hirq    sirq    util     free    used    buff    cach   total    util   </div><div class="line">18/05/16-09:14   0.00    0.02    0.00    0.00    0.01    0.04     1.2G  456.9M   35.9M   95.8M    1.8G   24.54   </div><div class="line">18/05/16-09:15   0.01    0.02    0.00    0.00    0.02    0.05     1.2G  456.9M   35.9M   95.8M    1.8G   24.53   </div><div class="line">18/05/16-09:16   0.00    0.02    0.00    0.00    0.01    0.04     1.2G  456.8M   36.0M   95.8M    1.8G   24.53   </div><div class="line">18/05/16-09:17   0.01    0.03    0.00    0.00    0.02    0.06     1.2G  456.6M   36.0M   95.8M    1.8G   24.52   </div><div class="line">18/05/16-09:18   0.19    0.46    0.08    0.00    0.02    0.67     1.2G  458.8M   36.7M   95.8M    1.8G   24.64   </div><div class="line">18/05/16-09:19   0.00    0.03    0.00    0.00    0.02    0.05     1.2G  457.9M   36.8M   95.8M    1.8G   24.59   </div><div class="line">18/05/16-09:20   0.00    0.02    0.00    0.00    0.02    0.05     1.2G  458.3M   36.8M   95.8M    1.8G   24.61   </div><div class="line">18/05/16-09:21   0.00    0.02    0.00    0.00    0.01    0.04     1.2G  457.8M   36.8M   95.8M    1.8G   24.58   </div><div class="line">18/05/16-09:22   0.01    0.02    0.00    0.00    0.02    0.05     1.2G  457.5M   36.8M   95.8M    1.8G   24.57   </div><div class="line">18/05/16-09:23   0.00    0.03    0.00    0.00    0.02    0.05     1.2G  457.6M   36.9M   95.8M    1.8G   24.57   </div><div class="line">18/05/16-09:24   0.00    0.02    0.00    0.00    0.02    0.05     1.2G  457.7M   36.9M   95.8M    1.8G   24.58   </div><div class="line">18/05/16-09:25   0.00    0.02    0.00    0.00    0.01    0.04     1.2G  457.7M   36.9M   95.8M    1.8G   24.58   </div><div class="line">18/05/16-09:26   0.00    0.02    0.00    0.00    0.02    0.05     1.2G  457.7M   36.9M   95.9M    1.8G   24.58   </div><div class="line">18/05/16-09:27   0.01    0.03    0.00    0.00    0.02    0.06     1.2G  457.4M   36.9M   95.9M    1.8G   24.56   </div><div class="line">18/05/16-09:28   0.00    0.02    0.00    0.00    0.02    0.04     1.2G  457.5M   36.9M   95.9M    1.8G   24.57   </div><div class="line">18/05/16-09:29   0.00    0.02    0.00    0.00    0.02    0.03     1.2G  457.5M   37.0M   95.9M    1.8G   24.57   </div><div class="line">18/05/16-09:30   0.00    0.03    0.00    0.00    0.02    0.05     1.2G  458.4M   37.0M   95.8M    1.8G   24.62   </div><div class="line">18/05/16-09:31   0.00    0.02    0.01    0.00    0.02    0.05     1.2G  457.5M   37.0M   95.9M    1.8G   24.57   </div><div class="line">18/05/16-09:32   0.00    0.02    0.00    0.00    0.02    0.04     1.2G  457.5M   37.0M   95.9M    1.8G   24.57</div></pre></td></tr></table></figure>
<p>显示一天内cpu的历史信息，以1分钟为间隔</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ tsar --cpu -i 1</div><div class="line">Time           -----------------------cpu---------------------- -----------------------mem---------------------- </div><div class="line">Time             user     sys    wait    hirq    sirq    util     free    used    buff    cach   total    util   </div><div class="line">18/05/16-09:14   0.00    0.02    0.00    0.00    0.01    0.04     1.2G  456.9M   35.9M   95.8M    1.8G   24.54   </div><div class="line">18/05/16-09:15   0.01    0.02    0.00    0.00    0.02    0.05     1.2G  456.9M   35.9M   95.8M    1.8G   24.53   </div><div class="line">18/05/16-09:16   0.00    0.02    0.00    0.00    0.01    0.04     1.2G  456.8M   36.0M   95.8M    1.8G   24.53   </div><div class="line">18/05/16-09:17   0.01    0.03    0.00    0.00    0.02    0.06     1.2G  456.6M   36.0M   95.8M    1.8G   24.52   </div><div class="line">18/05/16-09:18   0.19    0.46    0.08    0.00    0.02    0.67     1.2G  458.8M   36.7M   95.8M    1.8G   24.64   </div><div class="line">18/05/16-09:19   0.00    0.03    0.00    0.00    0.02    0.05     1.2G  457.9M   36.8M   95.8M    1.8G   24.59   </div><div class="line">18/05/16-09:20   0.00    0.02    0.00    0.00    0.02    0.05     1.2G  458.3M   36.8M   95.8M    1.8G   24.61   </div><div class="line">18/05/16-09:21   0.00    0.02    0.00    0.00    0.01    0.04     1.2G  457.8M   36.8M   95.8M    1.8G   24.58   </div><div class="line">18/05/16-09:22   0.01    0.02    0.00    0.00    0.02    0.05     1.2G  457.5M   36.8M   95.8M    1.8G   24.57   </div><div class="line">18/05/16-09:23   0.00    0.03    0.00    0.00    0.02    0.05     1.2G  457.6M   36.9M   95.8M    1.8G   24.57   </div><div class="line">18/05/16-09:24   0.00    0.02    0.00    0.00    0.02    0.05     1.2G  457.7M   36.9M   95.8M    1.8G   24.58   </div><div class="line">18/05/16-09:25   0.00    0.02    0.00    0.00    0.01    0.04     1.2G  457.7M   36.9M   95.8M    1.8G   24.58   </div><div class="line">18/05/16-09:26   0.00    0.02    0.00    0.00    0.02    0.05     1.2G  457.7M   36.9M   95.9M    1.8G   24.58   </div><div class="line">18/05/16-09:27   0.01    0.03    0.00    0.00    0.02    0.06     1.2G  457.4M   36.9M   95.9M    1.8G   24.56   </div><div class="line">18/05/16-09:28   0.00    0.02    0.00    0.00    0.02    0.04     1.2G  457.5M   36.9M   95.9M    1.8G   24.57   </div><div class="line">18/05/16-09:29   0.00    0.02    0.00    0.00    0.02    0.03     1.2G  457.5M   37.0M   95.9M    1.8G   24.57   </div><div class="line">18/05/16-09:30   0.00    0.03    0.00    0.00    0.02    0.05     1.2G  458.4M   37.0M   95.8M    1.8G   24.62   </div><div class="line">18/05/16-09:31   0.00    0.02    0.01    0.00    0.02    0.05     1.2G  457.5M   37.0M   95.9M    1.8G   24.57   </div><div class="line">18/05/16-09:32   0.00    0.02    0.00    0.00    0.02    0.04     1.2G  457.5M   37.0M   95.9M    1.8G   24.57</div></pre></td></tr></table></figure>
<p>tsar监控虚拟内存和load情况</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ tsar  --swap --load</div><div class="line">Time           ---------------swap------------- -------------------load----------------- </div><div class="line">Time            swpin  swpout   total    util    load1   load5  load15    runq    plit   </div><div class="line">18/05/16-09:20   0.00    0.00    1.9G    0.00     0.00    0.00    0.00    0.00  147.00   </div><div class="line">18/05/16-09:25   0.00    0.00    1.9G    0.00     0.00    0.00    0.00    0.00  147.00   </div><div class="line">18/05/16-09:30   0.00    0.00    1.9G    0.00     0.00    0.00    0.00    0.00  149.00   </div><div class="line">18/05/16-09:35   0.00    0.00    1.9G    0.00     0.35    0.11    0.04    0.00  147.00   </div><div class="line">18/05/16-09:40   0.00    0.00    1.9G    0.00     0.00    0.03    0.01    0.00  147.00   </div><div class="line">18/05/16-09:45   0.00    0.00    1.9G    0.00     0.00    0.00    0.00    0.00  147.00   </div><div class="line">18/05/16-09:50   0.00    0.00    1.9G    0.00     0.00    0.00    0.00    0.00  147.00   </div><div class="line">18/05/16-09:55   0.00    0.00    1.9G    0.00     0.00    0.00    0.00    0.00  146.00   </div><div class="line">18/05/16-10:00   0.00    0.00    1.9G    0.00     0.00    0.00    0.00    0.00  146.00   </div><div class="line">18/05/16-10:05   0.00    0.00    1.9G    0.00     0.00    0.00    0.00    0.00  146.00   </div><div class="line">18/05/16-10:10   0.00    0.00    1.9G    0.00     0.00    0.00    0.00    0.00  147.00   </div><div class="line">18/05/16-10:15   0.00    0.00    1.9G    0.00     0.00    0.00    0.00    0.00  146.00   </div><div class="line">18/05/16-10:20   0.00    0.00    1.9G    0.00     0.00    0.00    0.00    1.00  148.00   </div><div class="line">18/05/16-10:25   0.00    0.00    1.9G    0.00     0.01    0.01    0.00    0.00  146.00   </div><div class="line">18/05/16-10:30   0.00    0.00    1.9G    0.00     0.00    0.00    0.00    0.00  146.00   </div><div class="line">18/05/16-10:35   0.00    0.00    1.9G    0.00     0.00    0.00    0.00    0.00  146.00   </div><div class="line">18/05/16-10:40   0.00    0.00    1.9G    0.00     0.00    0.00    0.00    0.00  146.00   </div><div class="line">18/05/16-10:45   0.00    0.00    1.9G    0.00     0.00    0.00    0.00    0.00  146.00   </div><div class="line">18/05/16-10:50   0.00    0.00    1.9G    0.00     0.00    0.00    0.00    0.00  146.00</div></pre></td></tr></table></figure>
<p>tsar监控内存使用情况</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ tsar  --mem</div><div class="line">Time           -----------------------mem---------------------- </div><div class="line">Time             free    used    buff    cach   total    util   </div><div class="line">23/08/15-21:25   2.1G    5.7G    0.00  164.0M    8.0G   71.44   </div><div class="line">23/08/15-21:30   2.1G    5.7G    0.00  181.4M    8.0G   71.43   </div><div class="line">23/08/15-21:35   2.1G    5.7G    0.00  213.9M    8.0G   71.42   </div><div class="line">23/08/15-21:40   2.1G    5.7G    0.00  233.8M    8.0G   71.43   </div><div class="line">23/08/15-21:45   1.4G    5.7G    0.00  924.6M    8.0G   71.43   </div><div class="line">23/08/15-21:50   1.4G    5.7G    0.00  889.4M    8.0G   71.42</div></pre></td></tr></table></figure>
<p>以2秒钟为间隔，实时打印mem的数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ tsar --live --mem -i 2</div><div class="line">Time              -----------------------mem---------------------- </div><div class="line">Time                free    used    buff    cach   total    util   </div><div class="line">18/05/16-11:30:59 905.8M  617.2M  219.4M  119.8M    1.8G   33.14   </div><div class="line">18/05/16-11:31:01 904.9M  618.1M  219.4M  119.8M    1.8G   33.19   </div><div class="line">18/05/16-11:31:03 904.9M  618.1M  219.4M  119.8M    1.8G   33.19   </div><div class="line">18/05/16-11:31:05 904.9M  618.0M  219.4M  119.8M    1.8G   33.19   </div><div class="line">18/05/16-11:31:07 904.9M  618.0M  219.4M  119.8M    1.8G   33.19   </div><div class="line">18/05/16-11:31:09 905.0M  618.0M  219.4M  119.8M    1.8G   33.19</div></pre></td></tr></table></figure>
<p>tsar监控io使用情况</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ tsar --io</div><div class="line">Time           ------------------------------------------sda-------------------------------------------  </div><div class="line">Time            rrqms   wrqms      rs      ws   rsecs   wsecs  rqsize  qusize   await   svctm    util    </div><div class="line">18/08/16-21:25   0.28    3.4K  184.40  389.25    4.9K   15.0K   35.47    3.00    6.35    0.29   16.44   </div><div class="line">18/08/16-21:30   0.00    3.2K  109.71  382.74    2.5K   14.5K   35.27    3.00    7.33    0.30   14.68   </div><div class="line">18/08/16-21:35   0.15    3.1K  156.91  342.16    3.8K   13.8K   36.15    3.00    6.60    0.29   14.37   </div><div class="line">18/08/16-21:40   0.86    3.3K  234.00  371.43    6.9K   14.6K   36.43    3.00    5.93    0.28   16.83   </div><div class="line">18/08/16-21:45   0.72    3.4K  376.80  357.13   11.7K   14.8K   37.03    3.00    4.84    0.25   18.50</div></pre></td></tr></table></figure>
<p>tsar监控网络监控统计</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">$ tsar  --traffic</div><div class="line">Time           ---------------------traffic-------------------- </div><div class="line">Time            bytin  bytout   pktin  pktout  pkterr  pktdrp   </div><div class="line">18/05/16-09:20  42.00   33.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-09:25  12.00    2.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-09:30   6.00    3.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-09:35   3.00    2.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-09:40   8.00    2.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-09:45  16.00    2.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-09:50  11.00    3.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-09:55   8.00    2.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-10:00   9.00    2.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-10:05  77.00  167.00    1.00    0.00    0.00    0.00   </div><div class="line">18/05/16-10:10 146.00  377.00    2.00    1.00    0.00    0.00   </div><div class="line">18/05/16-10:15  31.00   60.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-10:20  51.00  120.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-10:25  27.00   26.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-10:30   2.00    3.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-10:35  10.00    2.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-10:40  22.00    2.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-10:45  10.00    3.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-10:50  16.00    3.00    0.00    0.00    0.00    0.00   </div><div class="line">Time           ---------------------traffic-------------------- </div><div class="line">Time            bytin  bytout   pktin  pktout  pkterr  pktdrp   </div><div class="line">18/05/16-10:55  45.00   63.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-11:00  21.00   30.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-11:05  32.00   23.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-11:10  14.00    3.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-11:15  12.00    2.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-11:20  10.00    2.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-11:25   7.00    2.00    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-11:30  97.00  241.00    1.00    1.00    0.00    0.00   </div><div class="line"></div><div class="line">MAX            146.00  377.00    2.00    1.00    0.00    0.00   </div><div class="line">MEAN            27.04   44.12    0.15    0.08    0.00    0.00   </div><div class="line">MIN              2.00    2.00    0.00    0.00    0.00    0.00</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ tsar --tcp --udp -d 1</div><div class="line">Time           -------------------------------tcp------------------------------ ---------------udp-------------- </div><div class="line">Time           active  pasive    iseg  outseg  EstRes  AtmpFa  CurrEs  retran     idgm    odgm  noport  idmerr   </div><div class="line">18/05/16-00:05   0.79    1.52    1.6K    2.1K    0.00    0.03    3.4K    0.02     0.00    2.00    0.00    0.00   </div><div class="line">18/05/16-00:10   0.73    1.40  884.25  921.56    0.00    0.03    3.4K    0.01     0.00    3.00    0.00    0.00   </div><div class="line">18/05/16-00:15   0.77    1.46  959.62    1.0K    0.00    0.03    3.4K    0.01     0.00    3.00    0.00    0.00   </div><div class="line">18/05/16-00:20   0.69    1.43    1.0K    1.0K    0.00    0.03    3.4K    0.01     0.00    3.00    0.00    0.00   </div><div class="line">18/05/16-00:25   0.72    1.42    1.2K    1.1K    0.00    0.03    3.4K    0.00     0.00    3.00    0.00    0.00</div></pre></td></tr></table></figure>
<p>tsar监控查看系统tcp连接情况，5秒刷新一次</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ tsar --tcp -l 5</div><div class="line">Time              -------------------------------tcp------------------------------ </div><div class="line">Time              active  pasive    iseg  outseg  EstRes  AtmpFa  CurrEs  retran   </div><div class="line">18/05/16-11:34:01   0.00    0.00    0.20    0.20    0.00    0.00    1.00    0.00   </div><div class="line">18/05/16-11:34:06   0.00    0.20    6.20    4.60    0.00    0.00    2.00    0.00   </div><div class="line">18/05/16-11:34:11   0.00    0.00    4.60    2.80    0.00    0.00    2.00    0.00   </div><div class="line">18/05/16-11:34:16   0.20    0.00    1.20    1.20    0.00    0.00    2.00    0.00   </div><div class="line">18/05/16-11:34:21   0.40    0.00    1.40    1.80    0.00    0.00    4.00    0.00</div></pre></td></tr></table></figure>
<p>tsar检查告警信息</p>
<p>查看最后一次tsar的提醒信息,这里包括了系统的cpu,io的告警情况。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ tsar --check --cpu --io</div><div class="line">localhost.localdomain       tsar    cpu:user=25.0 cpu:sys=2.1 cpu:wait=0.1 cpu:hirq=0.0 cpu:sirq=0.2 cpu:util=27.4 io:sda:rrqms=0.0 io:sda:wrqms=4172.4 io:sda:rs=80.3 io:sda:ws=493.0 io:sda:rsecs=1664.0 io:sda:wsecs=18661.7 io:sda:rqsize=35.5 io:sda:qusize=4.0 io:sda:await=7.7 io:sda:svctm=0.3 io:sda:util=18.5</div></pre></td></tr></table></figure>
<p>tsar历史数据回溯</p>
<p>通过参数<code>-d 2</code>可以查出两天前到现在的数据，<code>-i 1</code>表示以每次1分钟作为采集显示。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ tsar -d 2 -i 1 </div><div class="line">Time           ---cpu-- ---mem-- ---tcp-- -----traffic---- --sda---  ---load- </div><div class="line">Time             util     util   retran    bytin  bytout     util     load1   </div><div class="line">15/05/16-00:02 ------    71.40     0.03   754.2K  421.4K    14.38     1.59   </div><div class="line">15/05/16-00:03  34.55    71.41     0.01   773.7K  400.9K    13.39     1.42   </div><div class="line">15/05/16-00:04  31.80    71.41     0.03   708.6K  391.9K    12.88     1.54   </div><div class="line">15/05/16-00:05  28.70    71.40     0.00   544.5K  305.9K    11.32     1.68   </div><div class="line">15/05/16-00:06  25.83    71.41     0.02   521.1K  280.4K    13.32     1.48   </div><div class="line">15/05/16-00:07  25.68    71.42     0.00   495.0K  265.2K    12.08     1.21   </div><div class="line">15/05/16-00:08  30.89    71.41     0.01   811.0K  280.1K    14.92     0.92   </div><div class="line">15/05/16-00:09  23.83    71.41     0.03   636.7K  349.4K    11.81     1.47</div></pre></td></tr></table></figure>
<p>tsar查看指定日期的数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ tsar  --load  -d 20160518 #指定日期,格式YYYYMMDD</div><div class="line">Time           -------------------load----------------- </div><div class="line">Time            load1   load5  load15    runq    plit   </div><div class="line">18/05/16-09:20   0.00    0.00    0.00    0.00  147.00   </div><div class="line">18/05/16-09:25   0.00    0.00    0.00    0.00  147.00   </div><div class="line">18/05/16-09:30   0.00    0.00    0.00    0.00  149.00   </div><div class="line">18/05/16-09:35   0.35    0.11    0.04    0.00  147.00   </div><div class="line">18/05/16-09:40   0.00    0.03    0.01    0.00  147.00   </div><div class="line">18/05/16-09:45   0.00    0.00    0.00    0.00  147.00   </div><div class="line">18/05/16-09:50   0.00    0.00    0.00    0.00  147.00   </div><div class="line">18/05/16-09:55   0.00    0.00    0.00    0.00  146.00   </div><div class="line">18/05/16-10:00   0.00    0.00    0.00    0.00  146.00   </div><div class="line">18/05/16-10:05   0.00    0.00    0.00    0.00  146.00   </div><div class="line">18/05/16-10:10   0.00    0.00    0.00    0.00  147.00   </div><div class="line">18/05/16-10:15   0.00    0.00    0.00    0.00  146.00   </div><div class="line">18/05/16-10:20   0.00    0.00    0.00    1.00  148.00   </div><div class="line">18/05/16-10:25   0.01    0.01    0.00    0.00  146.00   </div><div class="line">18/05/16-10:30   0.00    0.00    0.00    0.00  146.00   </div><div class="line">18/05/16-10:35   0.00    0.00    0.00    0.00  146.00   </div><div class="line">18/05/16-10:40   0.00    0.00    0.00    0.00  146.00   </div><div class="line">18/05/16-10:45   0.00    0.00    0.00    0.00  146.00   </div><div class="line">18/05/16-10:50   0.00    0.00    0.00    0.00  146.00</div></pre></td></tr></table></figure>
<p>tsar查看所有字段</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ tsar --mem -D</div><div class="line">Time           -----------------------mem---------------------- </div><div class="line">Time             free    used    buff    cach   total    util   </div><div class="line">18/05/16-09:20 1333063680.00  480555008.00  38567936.00  100483072.00  1952669696.00   24.61   </div><div class="line">18/05/16-09:25 1333542912.00  479940608.00  38682624.00  100503552.00  1952669696.00   24.58   </div><div class="line">18/05/16-09:30 1332707328.00  480657408.00  38801408.00  100503552.00  1952669696.00   24.62   </div><div class="line">18/05/16-09:35 961646592.00  644251648.00  227205120.00  119566336.00  1952669696.00   32.99   </div><div class="line">18/05/16-09:40 961708032.00  644059136.00  227336192.00  119566336.00  1952669696.00   32.98   </div><div class="line">18/05/16-09:45 961646592.00  643997696.00  227434496.00  119590912.00  1952669696.00   32.98   </div><div class="line">18/05/16-09:50 960610304.00  644898816.00  227569664.00  119590912.00  1952669696.00   33.03</div></pre></td></tr></table></figure>
<p>查看fstab指定挂在的系统目录的使用情况 ，<code>-I</code>指定查看某个目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">$ tsar --partition -I /</div><div class="line">Time           ---------------------------/----------------------------  </div><div class="line">Time            bfree   bused   btotl    util   ifree   itotl   iutil    </div><div class="line">18/05/16-09:20  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-09:25  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-09:30  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-09:35  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-09:40  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-09:45  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-09:50  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-09:55  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-10:00  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-10:05  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-10:10  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-10:15  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-10:20  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-10:25  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-10:30  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-10:35  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-10:40  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-10:45  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-10:50  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">Time           ---------------------------/----------------------------  </div><div class="line">Time            bfree   bused   btotl    util   ifree   itotl   iutil    </div><div class="line">18/05/16-10:55  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-11:00  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-11:05  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-11:10  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-11:15  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-11:20  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-11:25  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-11:30  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">18/05/16-11:35  27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line"></div><div class="line">MAX             27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">MEAN            27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71    </div><div class="line">MIN             27.5G   19.1G   49.1G   42.00    2.7M    3.1M   14.71</div></pre></td></tr></table></figure>
<h4 id="Tsar监控应用"><a href="#Tsar监控应用" class="headerlink" title="Tsar监控应用"></a>Tsar监控应用</h4><p>Tsar默认支持的模块,如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ls /usr/local/tsar/modules    </div><div class="line">mod_apache.so  mod_haproxy.so  mod_load.so  mod_mem.so   mod_nginx.so      mod_pcsw.so    mod_pernic.so  mod_squid.so  mod_tcp.so   mod_traffic.so</div><div class="line">mod_cpu.so     mod_io.so       mod_lvs.so   mod_ncpu.so  mod_partition.so  mod_percpu.so  mod_proc.so    mod_swap.so   mod_tcpx.so  mod_udp.so</div></pre></td></tr></table></figure>
<p>默认安装完后，只启用了系统相关的模块。如要监控应用就需手动启用相应模块，以Nginx为例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/tsar/tsar.conf</div><div class="line">mod_nginx on</div></pre></td></tr></table></figure>
<p>验证Nginx模块是否启用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ tsar -L|grep nginx</div><div class="line">    nginx</div></pre></td></tr></table></figure>
<p>配置Nginx</p>
<p>该配置主要是为nginx开启status统计页面,给tsar提供http数据。Tsar统计的原理是通过获取status页面的输出结果，并对输出内容进行统计和计算得出的结果。而且其获取状态页的url默认是<a href="http://127.0.0.1/nginx_status" target="_blank" rel="external">http://127.0.0.1/nginx_status</a> ，所以在nginx上你必须有如下的配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">location /nginx_status &#123;</div><div class="line">          stub_status on;</div><div class="line">          access_log   off;</div><div class="line">          allow 127.0.0.1;</div><div class="line">          deny all;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>注：以上的url并非不能更改，可以修改环境变量实现。其自带的几个环境变量如下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export NGX_TSAR_HOST=192.168.0.1</div><div class="line">export NGX_TSAR_PORT=8080</div><div class="line">export NGX_TSAR_SERVER_NAME=status.taobao.com</div><div class="line">export NGX_TSAR_URI=/nginx_status</div></pre></td></tr></table></figure>
<p>监控Nginx状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ tsar --nginx -l -i 2</div><div class="line">Time              ----------------------------------------------nginx--------------------------------------------- </div><div class="line">Time              accept  handle    reqs  active    read   write    wait     qps      rt  sslqps  spdyps  sslhst   </div><div class="line">18/05/16-13:11:30   1.00    1.00    1.00    1.00    0.00    1.00    0.00    0.20    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-13:11:35   1.00    1.00    1.00    1.00    0.00    1.00    0.00    0.20    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-13:11:40   1.00    1.00    1.00    1.00    0.00    1.00    0.00    0.20    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-13:11:45   1.4K    1.4K    1.4K    1.00    0.00    1.00    0.00  280.40    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-13:11:50   1.00    1.00    1.00    1.00    0.00    1.00    0.00    0.20    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-13:11:55   1.00    1.00    1.00    1.00    0.00    1.00    0.00    0.20    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-13:12:00  10.1K   10.1K   10.1K    1.00    0.00    1.00    0.00    2.0K    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-13:12:05   2.00    2.00    2.00    1.00    0.00    1.00    0.00    0.40    0.00    0.00    0.00    0.00   </div><div class="line">18/05/16-13:12:10   1.00    1.00    1.00    1.00    0.00    1.00    0.00    0.20    0.00    0.00    0.00    0.00</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://code.taobao.org/p/tsar/wiki/index/" target="_blank" rel="external">http://code.taobao.org/p/tsar/wiki/index/</a><br><a href="http://blog.csdn.net/Road_long/article/details/47959221" target="_blank" rel="external">http://blog.csdn.net/Road_long/article/details/47959221</a><br><a href="http://blog.itpub.net/22664653/viewspace-1273519/" target="_blank" rel="external">http://blog.itpub.net/22664653/viewspace-1273519/</a><br><a href="http://www.361way.com/tsar-nginx/2308.html" target="_blank" rel="external">http://www.361way.com/tsar-nginx/2308.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL多线程备份工具Mydumper详解]]></title>
      <url>http://www.hi-linux.com/posts/26407.html</url>
      <content type="html"><![CDATA[<h3 id="Mydumper介绍"><a href="#Mydumper介绍" class="headerlink" title="Mydumper介绍"></a>Mydumper介绍</h3><p>MySQL在备份方面包含了自身的mysqldump工具，但其只支持单线程工作，这就使得它无法迅速的备份数据。而mydumper作为一个实用工具，能够良好支持多线程工作，这使得它在处理速度方面十倍于传统的mysqldump。其特征之一是在处理过程中需要对列表加以锁定，因此如果我们需要在工作时段执行备份工作，那么会引起DML阻塞。但一般现在的MySQL都有主从，备份也大部分在从上进行，所以锁的问题可以不用考虑。这样mydumper能更好的完成备份任务。</p>
<p>Mydumper是一个针对MySQL和Drizzle的高性能多线程备份和恢复工具，开发人员主要来自MySQL,Facebook,SkySQL公司。<br><a id="more"></a><br><strong>Mydumper特性</strong></p>
<blockquote>
<p>轻量级C语言写的<br>执行速度比mysqldump快10倍<br>事务性和非事务性表一致的快照(适用于0.2.2以上版本)<br>快速的文件压缩<br>支持导出binlog(新版本里已经不能备份binlog)<br>支持将备份文件切块<br>多线程备份(因为是多线程逻辑备份，备份后会生成多个备份文件)<br>多线程恢复(适用于0.2.1以上版本)<br>备份时对MyISAM表施加FTWRL(FLUSH TABLES WITH READ LOCK),会阻塞DML语句<br>以守护进程的工作方式，定时快照和连续二进制日志(适用于0.5.0以上版本)<br>开源 (GNU GPLv3)</p>
</blockquote>
<p>Mydumper项目地址: <a href="https://launchpad.net/mydumper/" target="_blank" rel="external">https://launchpad.net/mydumper/</a></p>
<h3 id="Mydumper备份机制"><a href="#Mydumper备份机制" class="headerlink" title="Mydumper备份机制"></a>Mydumper备份机制</h3><h4 id="Mydumper工作流程图"><a href="#Mydumper工作流程图" class="headerlink" title="Mydumper工作流程图"></a>Mydumper工作流程图</h4><p><img src="http://www.hi-linux.com/img/linux/mydumper.png" alt=""></p>
<p><strong>主要步骤概括</strong></p>
<ul>
<li>主线程 FLUSH TABLES WITH READ LOCK, 施加全局只读锁，以阻止DML语句写入，保证数据的一致性</li>
<li>读取当前时间点的二进制日志文件名和日志写入的位置并记录在metadata文件中，以供即使点恢复使用</li>
<li>N个（线程数可以指定，默认是4）dump线程 START TRANSACTION WITH CONSISTENT SNAPSHOT; 开启读一致的事物</li>
<li>dump non-InnoDB tables, 首先导出非事物引擎的表</li>
<li>主线程 UNLOCK TABLES 非事物引擎备份完后，释放全局只读锁</li>
<li>dump InnoDB tables, 基于事物导出InnoDB表</li>
<li>事物结束</li>
</ul>
<p><strong>Mydumper的less locking模式</strong></p>
<p>Mydumper使用<code>--less-locking</code>可以减少锁等待时间，此时mydumper的执行机制大致为</p>
<ul>
<li>主线程 FLUSH TABLES WITH READ LOCK(全局锁)</li>
<li>Dump线程 START TRANSACTION WITH CONSISTENT SNAPSHOT;</li>
<li>LL Dump线程 LOCK TABLES non-InnoDB(线程内部锁)</li>
<li>主线程UNLOCK TABLES</li>
<li>LL Dump线程 dump non-InnoDB tables</li>
<li>LL DUmp线程 UNLOCK non-InnoDB</li>
<li>Dump线程 dump InnoDB tables</li>
</ul>
<h4 id="Mydumper备份所生成的文件"><a href="#Mydumper备份所生成的文件" class="headerlink" title="Mydumper备份所生成的文件"></a>Mydumper备份所生成的文件</h4><p>所有的备份文件在一个目录中，目录可以自己指定。</p>
<p><strong>目录中包含一个metadata文件</strong></p>
<ul>
<li>记录了备份数据库在备份时间点的二进制日志文件名，日志的写入位置，如果是在从库进行备份，还会记录备份时同步至主库的二进制日志文件及写入位置</li>
</ul>
<p><strong>每个表有两个备份文件</strong></p>
<ul>
<li>database.table-schema.sql 表结构文件</li>
<li>database.table.sql 表数据文件</li>
<li>如果对表文件分片，将生成多个备份数据文件，可以指定行数或指定大小分片</li>
</ul>
<p><strong>binary logs(新版已废弃)</strong></p>
<p>启用<code>--binlogs</code>选项后，二进制文件存放在binlog_snapshot目录下</p>
<p><strong>daemon mode</strong></p>
<ul>
<li>在这个模式下，有五个目录0、1、binlogs、binlog_snapshot、last_dump。</li>
<li>备份目录是0和1，间隔备份，如果mydumper因某种原因失败而仍然有一个好的快照，当快照完成后，last_dump指向该备份。</li>
</ul>
<h3 id="Mydumper安装"><a href="#Mydumper安装" class="headerlink" title="Mydumper安装"></a>Mydumper安装</h3><p>Mydumper使用C语言编写，使用glibc库。mydumper安装所依赖的软件包：<code>glibc</code>、 <code>zlib</code>、 <code>pcre</code>、 <code>pcre-devel</code>、 <code>gcc</code>、 <code>gcc-c++</code>、<code>cmake</code>、<code>make</code>、<code>mysql客户端库文件</code>。</p>
<p><strong>安装依赖包</strong></p>
<ul>
<li>Centos</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install glib2-devel mysql-devel zlib-devel pcre-devel cmake</div></pre></td></tr></table></figure>
<ul>
<li>Ubuntu</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apt-get cmake make install libglib2.0-dev libmysqlclient15-dev zlib1g-dev libpcre3-dev g++</div></pre></td></tr></table></figure>
<p><strong>编译安装</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ wget https://launchpad.net/mydumper/0.9/0.9.1/+download/mydumper-0.9.1.tar.gz</div><div class="line">$ tar xzvf mydumper-0.9.1.tar.gz</div><div class="line">$ cd mydumper-0.9.1</div><div class="line">$ cmake .</div><div class="line">$ make</div><div class="line">$ make install</div></pre></td></tr></table></figure>
<p>安装完成后生成两个二进制文件mydumper和myloader位于/usr/local/bin目录下</p>
<p><strong>检查版本</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ mydumper -V                    </div><div class="line">mydumper 0.9.1, built against MySQL 5.6.29</div><div class="line"></div><div class="line">$ myloader -V</div><div class="line">myloader 0.9.1, built against MySQL 5.6.29</div></pre></td></tr></table></figure>
<h3 id="Mydumper使用"><a href="#Mydumper使用" class="headerlink" title="Mydumper使用"></a>Mydumper使用</h3><p>Mydumper主要有以下两个命令：mydumper用于备份，myloader用于恢复。</p>
<p><strong>mydumper命令一览</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">$ mydumper --help</div><div class="line"></div><div class="line">Usage:</div><div class="line">  mydumper [OPTION...] multi-threaded MySQL dumping</div><div class="line"></div><div class="line">Help Options:</div><div class="line">  -?, --help                  Show help options</div><div class="line"></div><div class="line">-B, --database              要备份的数据库，不指定则备份所有库</div><div class="line">-T, --tables-list           需要备份的表，名字用逗号隔开</div><div class="line">-o, --outputdir             备份文件输出的目录</div><div class="line">-s, --statement-size        生成的insert语句的字节数，默认1000000(这个参数不能太小，不然会报 Row bigger than statement_size for tools.t_serverinfo)</div><div class="line">-r, --rows                  将表按行分块时，指定的块行数，指定这个选项会关闭 --chunk-filesize</div><div class="line">-F, --chunk-filesize        将表按大小分块时，指定的块大小，单位是 MB</div><div class="line">-c, --compress              压缩输出文件</div><div class="line">-e, --build-empty-files     如果表数据是空，还是产生一个空文件（默认无数据则只有表结构文件）</div><div class="line">-x, --regex                 支持正则表达式匹配&apos;db.table&apos;,如mydumper –regex &apos;^(?!(mysql|test))&apos;</div><div class="line">-i, --ignore-engines        忽略的存储引擎，用都厚分割</div><div class="line">-m, --no-schemas            不备份表结构</div><div class="line">-d, --no-data               不备份表数据</div><div class="line">-G, --triggers              不备份触发器</div><div class="line">-E, --events                不备份事件</div><div class="line">-R, --routines              不备份存储过程和函数</div><div class="line">-k, --no-locks              不使用临时共享只读锁，使用这个选项会造成数据不一致</div><div class="line">--less-locking              减少对InnoDB表的锁施加时间（这种模式的机制下文详解）</div><div class="line">-l, --long-query-guard      设定阻塞备份的长查询超时时间，单位是秒，默认是60秒（超时后默认mydumper将会退出）</div><div class="line">--kill-long-queries         杀掉长查询 (不退出)</div><div class="line">-b, --binlogs               导出binlog</div><div class="line">-D, --daemon                启用守护进程模式，守护进程模式以某个间隔不间断对数据库进行备份</div><div class="line">-I, --snapshot-interval     dump快照间隔时间，默认60s，需要在daemon模式下</div><div class="line">-L, --logfile               使用的日志文件名(mydumper所产生的日志), 默认使用标准输出</div><div class="line">--tz-utc                    设置时区，只有备份应用到不同时区的时使用。默认是--skip-tz-utc是关闭的</div><div class="line">--skip-tz-utc               同上</div><div class="line">--use-savepoints            使用savepoints来减少采集metadata所造成的锁时间，需要 SUPER 权限</div><div class="line">--success-on-1146           Not increment error count and Warning instead of Critical in case of table doesn&apos;t exist</div><div class="line">-h, --host                  连接的主机名</div><div class="line">-u, --user                  备份所使用的用户</div><div class="line">-p, --password              密码</div><div class="line">-P, --port                  端口</div><div class="line">-S, --socket                使用socket通信时的socket文件</div><div class="line">-t, --threads               开启的备份线程数，默认是4</div><div class="line">-C, --compress-protocol     压缩与mysql通信的数据</div><div class="line">-V, --version               显示版本号</div><div class="line">-v, --verbose               输出信息模式, 0 = silent, 1 = errors, 2 = warnings, 3 = info, 默认为 2</div><div class="line">--lock-all-tables           锁全表，代替FLUSH TABLE WITH READ LOCK</div><div class="line">-U, --updated-since         Use Update_time to dump only tables updated in the last U days</div><div class="line">--trx-consistency-only      Transactional consistency only</div></pre></td></tr></table></figure>
<p><strong>myloader命令一览</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ myloader --help</div><div class="line">Usage:</div><div class="line">  myloader [OPTION...] multi-threaded MySQL loader </div><div class="line"></div><div class="line">-d, --directory                   备份文件的文件夹</div><div class="line">-q, --queries-per-transaction     每次事物执行的查询数量，默认是1000</div><div class="line">-o, --overwrite-tables            如果要恢复的表存在，则先drop掉该表，使用该参数，需要备份时候要备份表结构</div><div class="line">-B, --database                    需要还原的数据库</div><div class="line">-s, --source-db                   还原的数据库</div><div class="line">-e, --enable-binlog               启用还原数据的二进制日志</div><div class="line">-h, --host                        主机</div><div class="line">-u, --user                        还原的用户</div><div class="line">-p, --password                    密码</div><div class="line">-P, --port                        端口</div><div class="line">-S, --socket                      socket文件</div><div class="line">-t, --threads                     还原所使用的线程数，默认是4</div><div class="line">-C, --compress-protocol           压缩协议</div><div class="line">-V, --version                     显示版本</div><div class="line">-v, --verbose                     输出模式, 0 = silent, 1 = errors, 2 = warnings, 3 = info, 默认为2</div></pre></td></tr></table></figure>
<h3 id="Mydumper实例"><a href="#Mydumper实例" class="headerlink" title="Mydumper实例"></a>Mydumper实例</h3><h4 id="备份实例"><a href="#备份实例" class="headerlink" title="备份实例"></a>备份实例</h4><p>备份wordpress库到/var/backup/wordpress文件夹中，并压缩备份文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mydumper -u root -p root -h localhost -B wordpress -c -o /var/backup/wordpress</div></pre></td></tr></table></figure>
<p>备份所有数据库，并备份二进制日志文件，备份至/var/backup/alldb文件夹</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mydumper -u root -p root -h localhost -o /var/backup/alldb</div></pre></td></tr></table></figure>
<p>备份wordpress.wp_posts表，且不备份表结构，备份至/var/backup/wordpress-01文件夹</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mydumper -u root -p root -h localhost -B wordpress -T wp_posts -m -o /var/backup/wordpress-01</div></pre></td></tr></table></figure>
<p>只导出数据不导出表结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mydumper -h 127.0.0.1 -u root -p root --database wordpress --no-schemas</div></pre></td></tr></table></figure>
<p>不指定输出目录会在当前目录下生成一个以当前时间命名的目录，类似<code>export-20160517-114713</code></p>
<p>默认无数据则只有表结构文件，加上<code>--build-empty-files</code>参数后，即使是一张空表，仍然会创建一个文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mydumper -h 127.0.0.1 -u root -p root --build-empty-files</div></pre></td></tr></table></figure>
<p>设置长查询的上限，如果存在比这个还长的查询则退出mydumper，也可以设置杀掉这个长查询</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mydumper -h 127.0.0.1 -u root -p root --long-query-guard 300 --kill-long-queries</div></pre></td></tr></table></figure>
<p>实现此功能需要指定<code>--long-query-guard</code>参数，后面加上限值即可。同时杀掉长查询，需要指定<code>--kill-long-queries</code>参数。</p>
<p>设置需要导出的列表<code>-–tables-list</code>，逗号分割</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mydumper -h 127.0.0.1 -u root -p root --tables-list=test.mt_test,robin.test</div></pre></td></tr></table></figure>
<p>只备份t_task和t_guid表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mydumper --database=tools --outputdir=/var/backup/tools/ --tables-list=t_task,t_guid</div></pre></td></tr></table></figure>
<p>注意此参数需要加上数据库名字。执行完成后，在导出目录即可看到上述两张表的表结构以及数据。</p>
<p>通过regex设置正则表达式，需要设置数据库名字</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mydumper -h 127.0.0.1 -u root -p root --regex=&quot;beebol.*|tools.*&quot;</div></pre></td></tr></table></figure>
<p>此功能跟上面的<code>-–tables-list</code>类似。</p>
<p>只备份以t_server开头的表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mydumper --database=tools --outputdir=/var/backup/tools/ --regex=&quot;tools.t_server*&quot;</div></pre></td></tr></table></figure>
<p>备份出了名称为tmp.*的表，并压缩备份文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mydumper -u root -p 123456 -P 3306 -m -c -b --regex=tmp.* -B test -o /var/backup/tmp/</div></pre></td></tr></table></figure>
<p>只备份abc、bcd、cde库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mydumper -u backup -p 123456  -h 192.168.180.13 -P 3306 -t 3 -c -l 3600 -s 10000000 -e --regex &apos;abc|bcd|cde&apos; -o bbb/</div></pre></td></tr></table></figure>
<p>不备份abc、mysql、test数据库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mydumper -u backup -p 123456  -h 192.168.180.13 -P 3306 -t 3 -c -l 3600 -s 10000000 -e --regex &apos;^(?!(abc|mysql|test))&apos; -o bbb/</div></pre></td></tr></table></figure>
<p>把单表分成多个chunks</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mydumper -h 127.0.0.1 -u root -p root --rows 2000</div></pre></td></tr></table></figure>
<p>实现此功能，加上<code>--rows</code>参数。如果一张表的记录数超过设置的值，则这张表会拆分成多个SQL文件，命名规则如下：数据库名.表名.0000x.sql，x 从 0 开始。</p>
<p>过滤某个引擎的表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mydumper -h 127.0.0.1 -u root -p root -B test --ignore-engines=innodb</div></pre></td></tr></table></figure>
<p>加上<code>--ignore-engines</code>参数后，指定的存储引擎就会被过滤，亦即不导出指定存储引擎的表。</p>
<p>查看详细日志</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mydumper -h 127.0.0.1 -u root -p root -B test -v 3</div></pre></td></tr></table></figure>
<p>加上-v参数即可查看日志，取值可以是 0、1、2、3，分别表示静默模式、只输出错误、只输出警告、详细信息，默认取值是2。</p>
<p>指定导出线程数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mydumper -h 127.0.0.1 -u root -p root -B test --threads 10</div></pre></td></tr></table></figure>
<p>mydumper是多线程的。加上<code>--threads</code>参数后，可以指定线程数，如果导出的数据较多，建议指定此参数，并且设置一个合理的值。另外，加上此参数，明显导出速度快了很多，这就是多线程的优势。当然，多线程肯定会消耗更多的系统资源。</p>
<p>后台运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mydumper -h 127.0.0.1 -u root -p root -B test --daemon</div></pre></td></tr></table></figure>
<p>压缩导出的SQL文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mydumper -h 127.0.0.1 -u root -p root -B test --compress</div></pre></td></tr></table></figure>
<p>压缩后的SQL文件以.gz 结尾。我们可以使用gunzip命令来解压。具体用法是：<code>gunzip –c filename.gz &gt; filename</code></p>
<p>远程备份</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mydumper -h 远程服务器地址 -u root -p root -o /var/backup/mydumper -v 3 -c 9 -C -e -t 8</div></pre></td></tr></table></figure>
<h4 id="还原实例"><a href="#还原实例" class="headerlink" title="还原实例"></a>还原实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ myloader -u root -p root -h localhost -B wordpress -d /var/backup/wordpress</div></pre></td></tr></table></figure>
<p>还原到另一台服务器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ myloader -u root -p 123456 -h 192.168.200.25 -P 3307 -B wordpress -d /var/backup/wordpress</div></pre></td></tr></table></figure>
<p>如表存在先删除</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ myloader -u root -p 123456 -h 192.168.200.25 -P 3306 -o -B wordpress -d /var/backup/wordpress</div></pre></td></tr></table></figure>
<p>这里需要注意使用该参数，备份目录里面需要有表结构的备份文件。</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://www.cnblogs.com/linuxnote/p/3817698.html" target="_blank" rel="external">http://www.cnblogs.com/linuxnote/p/3817698.html</a><br><a href="https://dbarobin.com/2015/04/07/mydumper/" target="_blank" rel="external">https://dbarobin.com/2015/04/07/mydumper/</a><br><a href="http://www.cnblogs.com/zhoujinyi/p/3423641.html" target="_blank" rel="external">http://www.cnblogs.com/zhoujinyi/p/3423641.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用httping测试WEB页面响应时间]]></title>
      <url>http://www.hi-linux.com/posts/56953.html</url>
      <content type="html"><![CDATA[<p>httping是一个用来测试 HTTP 请求的连接、发送请求、等待回应的时间。httping与ping类似，不过它不是发送ICMP请求，而是发送HTTP请求。利用httping，我们可以测量出Web服务器跟网络的延迟。</p>
<p>httping项目地址: <a href="https://www.vanheusden.com/httping/" target="_blank" rel="external">https://www.vanheusden.com/httping/</a></p>
<p><img src="http://www.hi-linux.com/img/linux/httping.jpg" alt=""></p>
<a id="more"></a>
<h3 id="httping安装"><a href="#httping安装" class="headerlink" title="httping安装"></a>httping安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ apt-get install httping # Debian/Ubuntu</div><div class="line">$ yum install httping     # Fedora/CentOS/RHEL(EPEL源)</div><div class="line">$ yaourt -S httping       # Arch Linux</div><div class="line">$ emerge -av httping      # Funtoo/Gentoo</div><div class="line">$ brew install httping    # MAC</div></pre></td></tr></table></figure>
<h3 id="httping语法"><a href="#httping语法" class="headerlink" title="httping语法"></a>httping语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line">$ httping --help</div><div class="line">HTTPing v2.4, (C) 2003-2013 folkert@vanheusden.com</div><div class="line"> * SSL support included (-l)</div><div class="line"> * ncurses interface with FFT included (-K)</div><div class="line"> * TFO (TCP fast open) support included (-F)</div><div class="line"></div><div class="line"> *** where to connect to ***</div><div class="line">-g x / --url             URL to ping (e.g. -g http://localhost/)</div><div class="line">-h x / --hostname        hostname to ping (e.g. localhost) - use either -g or -h</div><div class="line">-p x / --port            portnumber (e.g. 80) - use with -h</div><div class="line">-6   / --ipv6            use IPv6 when resolving/connecting</div><div class="line">-l   / --use-ssl         connect using SSL. pinging an https URL automatically enables this setting</div><div class="line"></div><div class="line"> *** proxy settings ***</div><div class="line">-x x / --proxy           x should be &quot;host:port&quot; which are the network settings of the http/https proxy server. ipv6 ip-address should be &quot;[ip:address]:port&quot;</div><div class="line">-E                       fetch proxy settings from environment variables</div><div class="line">--proxy-user x           username for authentication against proxy</div><div class="line">--proxy-password x       password for authentication against proxy</div><div class="line">--proxy-password-file x  read password for proxy authentication from file x</div><div class="line">-5                       proxy is a socks5 server</div><div class="line">--proxy-buster x         adds &quot;&amp;x=[random value]&quot; to the request URL</div><div class="line"></div><div class="line"> *** timing settings ***</div><div class="line">-c x / --count           how many times to ping</div><div class="line">-i x / --interval        delay between each ping</div><div class="line">-t x / --timeout         timeout (default: 30s)</div><div class="line">--ai / --adaptive-interval execute pings at multiples of interval relative to start, automatically enabled in ncurses output mode</div><div class="line">-f   / --flood           flood connect (no delays)</div><div class="line"></div><div class="line"> *** HTTP settings ***</div><div class="line">-Z   / --no-cache        ask any proxies on the way not to cache the requests</div><div class="line">--divert-connect         connect to a different host than in the URL given</div><div class="line">--keep-cookies           return the cookies given by the HTTP server in the following request(s)</div><div class="line">--no-host-header         do not add &quot;Host:&quot;-line to the request headers</div><div class="line">-Q   / --persistent-connections use a persistent connection. adds a &apos;C&apos; to the output if httping had to reconnect</div><div class="line">-I x / --user-agent      use &apos;x&apos; for the UserAgent header</div><div class="line">-R x / --referer         use &apos;x&apos; for the Referer header</div><div class="line">--header                 adds an extra request-header</div><div class="line"></div><div class="line"> *** networking settings ***</div><div class="line">--max-mtu                limit the MTU size</div><div class="line">--no-tcp-nodelay         do not disable Naggle</div><div class="line">--recv-buffer            receive buffer size</div><div class="line">--tx-buffer              transmit buffer size</div><div class="line">-r   / --resolve-once    resolve hostname only once (useful when pinging roundrobin DNS: also takes the first DNS lookup out of the loop so that the first measurement is also correct)</div><div class="line">-W                       do not abort the program if resolving failed: keep retrying</div><div class="line">-y x / --bind-to         bind to an ip-address (and thus interface) with an optional port</div><div class="line">-F   / --tcp-fast-open   &quot;TCP fast open&quot; (TFO), reduces the latency of TCP connects</div><div class="line">--priority               set priority of packets</div><div class="line">--tos                    set TOS (type of service)</div><div class="line"></div><div class="line"> *** HTTP authentication ***</div><div class="line">-A   / --basic-auth      activate (&quot;basic&quot;) authentication</div><div class="line">-U x / --username        username for authentication</div><div class="line">-P x / --password        password for authentication</div><div class="line">-T x                     read the password fom the file &apos;x&apos; (replacement for -P)</div><div class="line"></div><div class="line"> *** output settings ***</div><div class="line">-s   / --show-statuscodes show statuscodes</div><div class="line">-S   / --split-time      split measured time in its individual components (resolve, connect, send, etc.</div><div class="line">--threshold-red          from what ping value to show the value in red (must be bigger than yellow), only in color mode (-Y)</div><div class="line">--threshold-yellow       from what ping value to show the value in yellow</div><div class="line">--threshold-show         from what ping value to show the results</div><div class="line">--timestamp / --ts       put a timestamp before the measured values, use -v to include the date and -vv to show in microseconds</div><div class="line">--aggregate x[,y[,z]]    show an aggregate each x[/y[/z[/etc]]] seconds</div><div class="line">-z   / --show-fingerprint show fingerprint (SSL)</div><div class="line">-v                       verbose mode</div><div class="line"></div><div class="line"> *** &quot;GET&quot; (instead of HTTP &quot;HEAD&quot;) settings ***</div><div class="line">-G   / --get-request     do a GET request instead of HEAD (read the contents of the page as well)</div><div class="line">-b   / --show-transfer-speed show transfer speed in KB/s (use with -G)</div><div class="line">-B   / --show-xfer-speed-compressed like -b but use compression if available</div><div class="line">-L x / --data-limit      limit the amount of data transferred (for -b) to &apos;x&apos; (in bytes)</div><div class="line">-X   / --show-kb         show the number of KB transferred (for -b)</div><div class="line"></div><div class="line"> *** output mode settings ***</div><div class="line">-q   / --quiet           quiet, only returncode</div><div class="line">-m   / --parseable-output give machine parseable output (see also -o and -e)</div><div class="line">-M                       json output, cannot be combined with -m</div><div class="line">-o rc,rc,... / --ok-result-codes what http results codes indicate &apos;ok&apos; comma seperated WITHOUT spaces inbetween default is 200, use with -e</div><div class="line">-e x / --result-string   string to display when http result code doesn&apos;t match</div><div class="line">-n warn,crit / --nagios-mode-1 / --nagios-mode-2 Nagios-mode: return 1 when avg. response time &gt;= warn, 2 if &gt;= crit, otherwhise return 0</div><div class="line">-N x                     Nagios mode 2: return 0 when all fine, &apos;x&apos; when anything failes</div><div class="line">-C cookie=value / --cookie add a cookie to the request</div><div class="line">-Y   / --colors          add colors</div><div class="line">-a   / --audible-ping    audible ping</div><div class="line"></div><div class="line"> *** GUI/ncurses mode settings ***</div><div class="line">-K   / --ncurses / --gui ncurses/GUI mode</div><div class="line">--draw-phase             draw phase (fourier transform) in gui</div><div class="line">--slow-log               when the duration is x or more, show ping line in the slow log window (the middle window)</div><div class="line">--graph-limit x          do not scale to values above x</div><div class="line">-D   / --no-graph        do not show graphs (in ncurses/GUI mode)</div><div class="line"></div><div class="line">-V   / --version         show the version</div><div class="line"></div><div class="line">Example:</div><div class="line">	httping Mike-Master-01 -Y -s -Z</div><div class="line"></div><div class="line">Welcome to the new HTTPing version 2.4!</div><div class="line"></div><div class="line">Did you know that with -K you can start a fullscreen GUI version with nice graphs and lots more information? And that you can disable the moving graphs with -D?</div></pre></td></tr></table></figure>
<p>简单介绍一下几个常用的选项</p>
<blockquote>
<p>-g 要测量的网址<br>-l 使用SSL连接<br>-c 这个和ping 一样，为请求数量<br>-Y 启用颜色输出<br>-x host:port(如果是测squid，用-x，不要用-h；和curl的不一样，curl -H指定的是发送的hostname，这个-h是指定给DNS解析的hostname)<br>-S 将时间分开成连接和传输两部分显示<br>-G GET(默认是HEAD)<br>-b 在使用了GET的前提下显示传输速度KB/s<br>-B 同-b，不过使用了压缩<br>-n a,b 提供给nagios监控用的，当平均响应时间&gt;=a时，返回1；&gt;=b，返回2；默认为0<br>-N c 提供给nagios监控用的，一切正常返回0，否则只要有失败的就返回c<br>-K 使用图形模式</p>
</blockquote>
<h3 id="httping使用"><a href="#httping使用" class="headerlink" title="httping使用"></a>httping使用</h3><ul>
<li>测试http网站</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ httping -g http://hi-linux.com  -c 5 -Y</div><div class="line">PING hi-linux.com:80 (/):</div><div class="line">connected to 23.91.98.188:80 (225 bytes), seq=0 time=391.34 ms </div><div class="line">connected to 23.91.98.188:80 (225 bytes), seq=1 time=456.97 ms </div><div class="line">connected to 23.91.98.188:80 (225 bytes), seq=2 time=472.89 ms </div><div class="line">connected to 23.91.98.188:80 (225 bytes), seq=3 time=289.64 ms </div><div class="line">connected to 23.91.98.188:80 (225 bytes), seq=4 time=180.28 ms </div><div class="line">--- http://hi-linux.com/ ping statistics ---</div><div class="line">5 connects, 5 ok, 0.00% failed, time 6799ms</div><div class="line">round-trip min/avg/max = 180.3/358.2/472.9 ms</div></pre></td></tr></table></figure>
<ul>
<li>测试https网站</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ httping -g https://hi-linux.com  -c 5 -Y -l                                       </div><div class="line">PING hi-linux.com:443 (/):</div><div class="line">connected to 23.91.98.188:443 (232 bytes), seq=0 time=3409.36 ms </div><div class="line">connected to 23.91.98.188:443 (232 bytes), seq=1 time=3193.33 ms </div><div class="line">connected to 23.91.98.188:443 (232 bytes), seq=2 time=8279.54 ms </div><div class="line">connected to 23.91.98.188:443 (232 bytes), seq=3 time=1774.22 ms </div><div class="line">connected to 23.91.98.188:443 (232 bytes), seq=4 time=1441.57 ms </div><div class="line">--- https://hi-linux.com/ ping statistics ---</div><div class="line">5 connects, 5 ok, 0.00% failed, time 23113ms</div><div class="line">round-trip min/avg/max = 1441.6/3619.6/8279.5 ms</div></pre></td></tr></table></figure>
<ul>
<li>测试使用代理的网站</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ httping -x 10.1.2.210:1080 http://www.hi-linux.com/ -SGbs -c 5 </div><div class="line">PING www.hi-linux.com:80 (/):</div><div class="line">connected to www.hi-linux.com:80 (558 bytes), seq=0 time=   n/a+  0.61+  0.89+1914.14+  0.08=1915.63 ms 200 OK 90KB/s</div><div class="line">connected to www.hi-linux.com:80 (558 bytes), seq=1 time=   n/a+  1.21+  2.51+1574.01+  0.09=1577.73 ms 200 OK 80KB/s</div><div class="line">connected to www.hi-linux.com:80 (557 bytes), seq=2 time=   n/a+  1.21+  2.44+1396.79+  0.09=1400.44 ms 200 OK 90KB/s</div><div class="line">connected to www.hi-linux.com:80 (557 bytes), seq=3 time=   n/a+  1.07+  2.57+4491.80+  0.13=4495.44 ms 200 OK 71KB/s</div><div class="line">connected to www.hi-linux.com:80 (558 bytes), seq=4 time=   n/a+  1.08+  0.91+4535.66+  0.13=4537.65 ms 200 OK 22KB/s</div><div class="line">--- http://www.hi-linux.com/ ping statistics ---</div><div class="line">5 connects, 5 ok, 0.00% failed, time 18944ms</div><div class="line">round-trip min/avg/max = 1400.4/2785.4/4537.6 ms</div><div class="line">Transfer speed: min/avg/max = 22.674567/71.059180/90.632973 KB</div></pre></td></tr></table></figure>
<p>httping还支持IPv6、代理、超时、请求头等其他特性，详情可以通过<code>man httping</code>查询。值得一提的是httping也有Android版本，有需要有朋友可通过<a href="https://play.google.com/store/apps/details?id=com.vanheusden.HTTPing" target="_blank" rel="external">Google Play</a>获取。</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="https://www.vanheusden.com/httping/" target="_blank" rel="external">https://www.vanheusden.com/httping/</a><br><a href="http://blog.sina.com.cn/s/blog_04268f4b0100monk.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_04268f4b0100monk.html</a><br><a href="https://linuxtoy.org/archives/httping.html" target="_blank" rel="external">https://linuxtoy.org/archives/httping.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下使用Rinetd来实现端口转发]]></title>
      <url>http://www.hi-linux.com/posts/29683.html</url>
      <content type="html"><![CDATA[<p>Linux下端口转发一般都使用iptables来实现，使用iptables可以很容易将TCP和UDP端口从防火墙转发到内部主机上。但是如果需要将流量从专用地址转发到不在您当前网络上的机器上，可尝试另一个应用层端口转发程序Rinetd。Rinetd短小、高效，配置起来比iptables也简单很多。</p>
<p>Rinetd是为在一个Unix和Linux操作系统中为重定向传输控制协议(TCP)连接的一个工具。Rinetd是单一过程的服务器，它处理任何数量的连接到在配置文件etc/rinetd中指定的地址/端口对。尽管rinetd使用非闭锁I/O运行作为一个单一过程，它可能重定向很多连接而不对这台机器增加额外的负担。<br><a id="more"></a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>通过包安装</li>
</ul>
<p><strong>CentOS</strong></p>
<p>官方源中不具有Rinetd，所以需要先安装三方源。</p>
<p><strong>配置三方源</strong></p>
<p>32位系统</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/yum.repos.d/nux-misc.repo</div><div class="line"></div><div class="line">[nux-misc]</div><div class="line">name=Nux Misc</div><div class="line">baseurl=http://li.nux.ro/download/nux/misc/el6/i386/</div><div class="line">enabled=0</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro</div></pre></td></tr></table></figure>
<p>64位系统</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ vim  /etc/yum.repos.d/nux-misc.repo:</div><div class="line"></div><div class="line">[nux-misc]</div><div class="line">name=Nux Misc</div><div class="line">baseurl=http://li.nux.ro/download/nux/misc/el6/x86_64/</div><div class="line">enabled=0</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro</div></pre></td></tr></table></figure>
<p><strong>安装Rinetd</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum --enablerepo=nux-misc install rinetd</div></pre></td></tr></table></figure>
<p><strong>Ubuntu</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apt-get install rinetd</div></pre></td></tr></table></figure>
<ul>
<li>编译安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ wget http://www.boutell.com/rinetd/http/rinetd.tar.gz</div><div class="line">$ mkdir  -p /usr/man/man8   #默认会把man文件放么/usr/man/man8下面，如果没有这个目录会报目前不存在，但不影响使用. </div><div class="line">$ make &amp;&amp; make install</div></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>配置端口转发的配置文件在<code>/etc/rinetd.conf</code></p>
<p><strong>配置文件格式</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[bindaddress] [bindport] [connectaddress] [connectport]</div><div class="line">绑定的地址    绑定的端口  连接的地址      连接的端口</div><div class="line"></div><div class="line">[Source Address] [Source Port] [Destination Address] [Destination Port]</div><div class="line">源地址            源端口         目的地址               目的端口</div></pre></td></tr></table></figure>
<p>在每一单独的行中指定每个要转发的端口。源地址和目的地址都可以是主机名或IP地址，IP 地址0.0.0.0将rinetd绑定到任何可用的本地IP地址上。例如：<code>0.0.0.0 8080 www.hi-linux.com 80</code></p>
<p><strong>配置规则</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/rinetd.conf</div><div class="line"></div><div class="line">0.0.0.0 8080 172.19.94.3 8080</div><div class="line">0.0.0.0 2222 192.168.0.103 3389</div><div class="line">1.2.3.4 80 192.168.0.10 80</div><div class="line">allow *.*.*.*</div><div class="line">logfile /var/log/rinetd.log</div></pre></td></tr></table></figure>
<p>说明</p>
<blockquote>
<p>0.0.0.0表示本机绑定所有可用地址<br>将所有发往本机8080端口的请求转发到172.19.94.3的8080端口<br>将所有发往本机2222端口的请求转发到192.168.0.103的3389端口<br>将所有发往1.2.3.4的80端口请求转发到192.168.0.10的80端口<br>allow设置允许访问的ip地址信息,<code>*.*.*.*</code>表示所有IP地址<br>logfil设置打印的log的位置</p>
</blockquote>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ul>
<li>启动Rinetd</li>
</ul>
<p><strong>脚本启动</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /etc/init.d/rinetd start</div></pre></td></tr></table></figure>
<p><strong>手动启动</strong></p>
<p>编译安装不自带脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /usr/sbin/rinetd -c /etc/rinetd.conf</div></pre></td></tr></table></figure>
<ul>
<li>关闭rinetd</li>
</ul>
<p><strong>脚本关闭</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /etc/init.d/rinetd stop</div></pre></td></tr></table></figure>
<p><strong>手动关闭</strong></p>
<p>编译安装不自带脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pkill rinetd</div></pre></td></tr></table></figure>
<ul>
<li>注意事项</li>
</ul>
<blockquote>
<p>1.rinetd.conf中绑定的本机端口必须没有被其它程序占用<br>2.运行rinetd的系统防火墙应该打开绑定的本机端口<br>3.不支持FTP的跳转</p>
</blockquote>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.douban.com/note/527117358/" target="_blank" rel="external">https://www.douban.com/note/527117358/</a><br><a href="http://pvbutler.blog.51cto.com/7662323/1621753" target="_blank" rel="external">http://pvbutler.blog.51cto.com/7662323/1621753</a><br><a href="http://blog.csdn.net/wang7dao/article/details/8498530" target="_blank" rel="external">http://blog.csdn.net/wang7dao/article/details/8498530</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux命令行学习神器tldr]]></title>
      <url>http://www.hi-linux.com/posts/16098.html</url>
      <content type="html"><![CDATA[<p>对于很多使用终端的Linux和Mac用户，使用Terminal最难的就是要记住众多的Linux命令了。比如：<code>ssh</code>，<code>curl</code>，<code>grep</code>等，经常会记不住参数的顺序。这个时候通常在使用的时候通过man阅读长长的文档，从中对比一个个参数，这样费时又费力。</p>
<p>今天要介绍的一个好用的工具叫<code>tldr</code>，tldr全称Too long, Don’t read，翻译成中文就是[太长不读]。<code>tldr</code>根据二八原则将命令的常用场景给出示例，让人一看就懂。</p>
<p>tldr项目地址: <a href="https://github.com/tldr-pages/tldr" target="_blank" rel="external">https://github.com/tldr-pages/tldr</a><br><a id="more"></a></p>
<h3 id="tldr安装"><a href="#tldr安装" class="headerlink" title="tldr安装"></a>tldr安装</h3><p>tldr有很多种语言版本，安装也很简单，各种包管理工具都支持。</p>
<p>安装方式如下</p>
<p><strong>C++ client</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install tldr-pages/tldr/tldr</div></pre></td></tr></table></figure>
<p><strong>Crystal client</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install porras/tap/tlcr</div></pre></td></tr></table></figure>
<p><strong>Go client</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ go get github.com/pranavraja/tldr (or platform binaries)</div></pre></td></tr></table></figure>
<p><strong>Node.js client</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g tldr</div></pre></td></tr></table></figure>
<p><strong>Perl5 client</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cpanm App::tldr</div></pre></td></tr></table></figure>
<p><strong>Python clients</strong></p>
<ul>
<li>tldr-python-client</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install tldr</div></pre></td></tr></table></figure>
<ul>
<li>tldr.py</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install tldr.py</div></pre></td></tr></table></figure>
<p><strong>Ruby client</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gem install tldrb</div></pre></td></tr></table></figure>
<p><strong>Bash client</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/raylee/tldr</div></pre></td></tr></table></figure>
<p><strong>Web client</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://ostera.github.io/tldr.jsx</div></pre></td></tr></table></figure>
<p><strong>Android clients</strong></p>
<ul>
<li>tldr-viewer, available on Google Play</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">https://github.com/gianasista/tldr-viewer</div><div class="line">https://play.google.com/store/apps/details?id=de.gianasista.tldr_viewer</div></pre></td></tr></table></figure>
<ul>
<li>tldroid, available on Google Play</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">https://github.com/hidroh/tldroid   </div><div class="line">https://play.google.com/store/apps/details?id=io.github.hidroh.tldroid</div></pre></td></tr></table></figure>
<p><strong>iOS clients</strong></p>
<ul>
<li>tldr-man-page, available on App Store</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">https://github.com/freesuraj/TLDR</div><div class="line">https://itunes.apple.com/sg/app/tldr-man-page/id1073433250?mt=8</div></pre></td></tr></table></figure>
<ul>
<li>tldr-pages, available on App Store</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">https://github.com/mflint/ios-tldr-viewer</div><div class="line">https://itunes.apple.com/us/app/tldt-pages/id1071725095?ls=1&amp;mt=8</div></pre></td></tr></table></figure>
<p>更多客户端可参考: <a href="https://github.com/tldr-pages/tldr" target="_blank" rel="external">https://github.com/tldr-pages/tldr</a></p>
<h3 id="tldr使用"><a href="#tldr使用" class="headerlink" title="tldr使用"></a>tldr使用</h3><p>tldr命令格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ tldr -h </div><div class="line">usage: tldr [-h] [-o &#123;linux,osx,sunos&#125;] command [command ...]</div><div class="line"></div><div class="line">Python command line client for tldr</div><div class="line"></div><div class="line">positional arguments:</div><div class="line">  command               command to lookup</div><div class="line"></div><div class="line">optional arguments:</div><div class="line">  -h, --help            show this help message and exit</div><div class="line">  -o &#123;linux,osx,sunos&#125;, --os &#123;linux,osx,sunos&#125;</div><div class="line">                        Override the operating system [linux, osx, sunos]</div></pre></td></tr></table></figure>
<p>来看几个例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">$ tldr ssh</div><div class="line">#SSH                                                                           </div><div class="line">                                                                                </div><div class="line">  Secure Shell is a protocol used to securely log onto remote systems.          </div><div class="line">  It can be used for logging or executing commands on a remote server.          </div><div class="line">                                                                                </div><div class="line">- Connect to a remote server:                                                   </div><div class="line">                                                                                </div><div class="line">  ssh username@remote_host                                                      </div><div class="line">                                                                                </div><div class="line">- Connect to a remote server with a specific identity (private key):            </div><div class="line">                                                                                </div><div class="line">  ssh -i /path/to/key_file username@remote_host                                 </div><div class="line">                                                                                </div><div class="line">- Connect to a remote server using a specific port:                             </div><div class="line">                                                                                </div><div class="line">  ssh username@remote_host -p 2222                                              </div><div class="line">                                                                                </div><div class="line">- Run a command on a remote server:                                             </div><div class="line">                                                                                </div><div class="line">  ssh remote_host command -with -flags                                          </div><div class="line">                                                                                </div><div class="line">- SSH tunneling: Dynamic port forwarding (SOCKS proxy on localhost:9999):       </div><div class="line">                                                                                </div><div class="line">  ssh -D 9999 -C username@remote_host                                           </div><div class="line">                                                                                </div><div class="line">- SSH tunneling: Forward a specific port (localhost:9999 to slashdot.org:80):   </div><div class="line">                                                                                </div><div class="line">  ssh -L 9999:slashdot.org:80 username@remote_host                              </div><div class="line">                                                                                </div><div class="line">- SSH enable agent forward:                                                     </div><div class="line">                                                                                </div><div class="line">  ssh -A username@remote_host</div></pre></td></tr></table></figure>
<pre><code>$ tldr curl
# curl                                                                          

  Transfers data from or to a server.                                           
  Supports most protocols including HTTP, FTP, POP.                             

- Download a URL to a file:                                                     

  curl &quot;URL&quot; -o filename                                                        

- Send form-encoded data:                                                       

  curl --data name=bob http://localhost/form                                    

- Send JSON data:                                                               

  curl -X POST -H &quot;Content-Type: application/json&quot; -d &apos;{&quot;name&quot;:&quot;bob&quot;}&apos; http://localhost/login

- Specify an HTTP method:                                                       

  curl -X DELETE http://localhost/item/123                                      

- Head request:                                                                 

  curl --head http://localhost                                                  

- Include an extra header:                                                      

  curl -H &quot;X-MyHeader: 123&quot; http://localhost                                    

- Pass a user name and password for server authentication:                      

  curl -u myusername:mypassword http://localhost
</code></pre><p>怎么样，比man看起来舒服多了吧？还等什么，赶紧上手体验一下吧！</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="https://github.com/tldr-pages/tldr" target="_blank" rel="external">https://github.com/tldr-pages/tldr</a><br><a href="https://codingstyle.cn/topics/26" target="_blank" rel="external">https://codingstyle.cn/topics/26</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[终极Web应用性能和压力测试工具Gor]]></title>
      <url>http://www.hi-linux.com/posts/41063.html</url>
      <content type="html"><![CDATA[<h3 id="什么是Gor"><a href="#什么是Gor" class="headerlink" title="什么是Gor"></a>什么是Gor</h3><p>项目地址：<a href="https://github.com/buger/gor" target="_blank" rel="external">https://github.com/buger/gor</a></p>
<p><strong>官方描述</strong></p>
<blockquote>
<p>Gor is a simple http traffic replication tool written in Go.<br>Its main goal is to replay traffic from production servers to staging and dev environments.</p>
</blockquote>
<p>简单点说就是一个http流量复制器，Gor是用Golang写的一个HTTP实时流量复制工具。只需要在LB或者Varnish入口服务器上执行一个进程，就可以把生产环境的流量复制到任何地方，比如Staging 环境、Dev环境。完美解决了HTTP层实时流量复制和压力测试的问题。<br><a id="more"></a><br><strong>Gor的功能</strong></p>
<p>Gor支持流量的放大和缩小、频率限制，这样不需要搭建和生产环境一致的服务器集群也可以正确测试。Gor还支持根据正则表达式过滤流量，这意味着可以单独测试某个API服务。还可以修改HTTP请求头，比如替换User-Agent, 或者增加某些HTTPHeader。</p>
<p>Gor还可以把请求记录到文件，以备回放和分析。Gor支持和ElasticSearch集成，将流量存入ES进行实时分析。</p>
<p><strong>Gor的架构</strong></p>
<p><img src="http://www.hi-linux.com/img/linux/gor.png" alt=""></p>
<p><strong>非http协议的流量复制</strong></p>
<p>对于不是基于http协议的流量复制，可以使用流量复制工具TCPCopy, TCPCopy支持tcp协议流量的复制、转发、拦截，非常棒的工具。</p>
<p>TCPCopy项目地址：<a href="https://github.com/session-replay-tools/tcpcopy" target="_blank" rel="external">https://github.com/session-replay-tools/tcpcopy</a></p>
<h3 id="Gor安装"><a href="#Gor安装" class="headerlink" title="Gor安装"></a>Gor安装</h3><h4 id="二进制版本"><a href="#二进制版本" class="headerlink" title="二进制版本"></a>二进制版本</h4><p>官方预编译版本使用比较简单，开箱即用。</p>
<p>通过以下地址下载最新版本</p>
<p><a href="https://github.com/buger/gor/releases" target="_blank" rel="external">https://github.com/buger/gor/releases</a> </p>
<p>Linux</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/buger/gor/releases/download/v0.12.1/gor_0.12.1_x64.tar.gz</div><div class="line">$ tar xzvf gor_0.12.1_x64.tar.gz</div><div class="line">$ cp gor /usr/local/bin</div></pre></td></tr></table></figure>
<p>Mac</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/buger/gor/releases/download/v0.12.1/gor_0.12.1_mac.tar.gz</div><div class="line">$ tar xzvf gor_0.12.1_mac.tar.gz</div></pre></td></tr></table></figure>
<h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><p>搭建标准的Go语言环境,可参考<code>http://golang.org/doc/code.html</code>。并设置<code>$GOPATH</code>环境变量</p>
<p>获取源代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ go get github.com/buger/gor</div></pre></td></tr></table></figure>
<p>编译</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd $GOPATH/src/github.com/buger/gor</div><div class="line">$ go build</div></pre></td></tr></table></figure>
<p>编译完成会产生一个gor二进制文件。</p>
<h3 id="Gor配置参数"><a href="#Gor配置参数" class="headerlink" title="Gor配置参数"></a>Gor配置参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">$ gor --help</div><div class="line"></div><div class="line">  -cpuprofile string</div><div class="line">        write cpu profile to file</div><div class="line">  -debug verbose</div><div class="line">        打开debug模式，显示所有接口的流量 </div><div class="line">  -http-allow-header value</div><div class="line">        用一个正则表达式来匹配http头部，如果请求的头部没有匹配上，则被拒绝 </div><div class="line">         gor --input-raw :8080 --output-http staging.com --http-allow-header api-version:^v1 (default [])</div><div class="line">  -http-allow-method value</div><div class="line">        类似于一个白名单机制来允许通过的http请求方法，除此之外的方法都被拒绝.</div><div class="line">        gor --input-raw :8080 --output-http staging.com --http-allow-method GET --http-allow-method OPTIONS (default [])</div><div class="line">  -http-allow-url value</div><div class="line">        一个正则表达式用来匹配url， 用来过滤完全匹配的的url，在此之外的都被过滤掉 </div><div class="line">         gor --input-raw :8080 --output-http staging.com --http-allow-url ^www. (default [])</div><div class="line">  -http-disallow-header value</div><div class="line">        用一个正则表达式来匹配http头部，匹配到的请求会被拒绝掉</div><div class="line">         gor --input-raw :8080 --output-http staging.com --http-disallow-header &quot;User-Agent: Replayed by Gor&quot; (default [])</div><div class="line">  -http-disallow-url value</div><div class="line">        用一个正则表达式来匹配url，如果请求匹配上了，则会被拒绝</div><div class="line">         gor --input-raw :8080 --output-http staging.com --http-disallow-url ^www. (default [])</div><div class="line">  -http-header-limiter value</div><div class="line">        读取请求，基于FNV32-1A散列来拒绝一定比例的特殊请求 </div><div class="line">         gor --input-raw :8080 --output-http staging.com --http-header-imiter user-id:25% (default [])</div><div class="line">  -http-original-host</div><div class="line">        在--output-http的输出中，通常gor会使用取代请求的http头，所以应该禁用该选项，保留原始的主机头</div><div class="line">  -http-param-limiter value</div><div class="line">        Takes a fraction of requests, consistently taking or rejecting a request based on the FNV32-1A hash of a specific GET param:</div><div class="line">         gor --input-raw :8080 --output-http staging.com --http-param-limiter user_id:25% (default [])</div><div class="line">  -http-rewrite-url value</div><div class="line">        Rewrite the request url based on a mapping:</div><div class="line">        gor --input-raw :8080 --output-http staging.com --http-rewrite-url /v1/user/([^\/]+)/ping:/v2/user/$1/ping (default [])</div><div class="line">  -http-set-header value</div><div class="line">        Inject additional headers to http reqest:</div><div class="line">        gor --input-raw :8080 --output-http staging.com --http-set-header &apos;User-Agent: Gor&apos; (default [])</div><div class="line">  -http-set-param value</div><div class="line">        Set request url param, if param already exists it will be overwritten:</div><div class="line">        gor --input-raw :8080 --output-http staging.com --http-set-param api_key=1 (default [])</div><div class="line">  -input-dummy value</div><div class="line">        Used for testing outputs. Emits &apos;Get /&apos; request every 1s (default [])</div><div class="line">  -input-file value</div><div class="line">        从一个文件中读取请求</div><div class="line">        gor --input-file ./requests.gor --output-http staging.com (default [])</div><div class="line">  -input-http value</div><div class="line">        从一个http接口读取请求</div><div class="line">        # Listen for http on 9000</div><div class="line">        gor --input-http :9000 --output-http staging.com (default [])</div><div class="line">  -input-raw value</div><div class="line">        Capture traffic from given port (use RAW sockets and require *sudo* access):</div><div class="line">        # Capture traffic from 8080 port</div><div class="line">        gor --input-raw :8080 --output-http staging.com (default [])</div><div class="line">  -input-tcp value</div><div class="line">       用来在多个gor之间流转流量</div><div class="line">        # Receive requests from other Gor instances on 28020 port, and redirect output to staging</div><div class="line">        gor --input-tcp :28020 --output-http staging.com (default [])</div><div class="line">  -memprofile string</div><div class="line">        write memory profile to this file</div><div class="line">  -middleware string</div><div class="line">        Used for modifying traffic using external command</div><div class="line">  -output-dummy value</div><div class="line">        用来测试输入，打印出接收的数据. (default [])</div><div class="line">  -output-file value</div><div class="line">        把进入的请求写入一个文件中</div><div class="line">        gor --input-raw :80 --output-file ./requests.gor (default [])</div><div class="line">  -output-http value</div><div class="line">        转发进入的请求到一个http地址上</div><div class="line">        # Redirect all incoming requests to staging.com address </div><div class="line">        gor --input-raw :80 --output-http http://staging.com (default [])</div><div class="line">  -output-http-elasticsearch string</div><div class="line">        把请求和响应状态发送到ElasticSearch:</div><div class="line">        gor --input-raw :8080 --output-http staging.com --output-http-elasticsearch &apos;es_host:api_port/index_name&apos;</div><div class="line">  -output-http-redirects int</div><div class="line">        设置多少次重定向被允许</div><div class="line">  -output-http-stats</div><div class="line">        每5秒钟输出一次输出队列的状态 </div><div class="line">  -output-http-timeout duration</div><div class="line">       指定http的request/response超时时间，默认是5秒</div><div class="line">  -output-http-workers int</div><div class="line">        gor默认是动态的扩展工作者数量，你也可以指定固定数量的工作者</div><div class="line">  -output-tcp value</div><div class="line">        用来在多个gor之间流转流量</div><div class="line">        # Listen for requests on 80 port and forward them to other Gor instance on 28020 port</div><div class="line">        gor --input-raw :80 --output-tcp replay.local:28020 (default [])</div><div class="line">  -output-tcp-stats</div><div class="line">        每5秒钟报告一次tcp输出队列的状态</div><div class="line">  -split-output true</div><div class="line">        By default each output gets same traffic. If set to true it splits traffic equally among all outputs.</div><div class="line">  -stats</div><div class="line">        打开输出队列的状态</div><div class="line">  -verbose</div><div class="line">        Turn on more verbose output</div></pre></td></tr></table></figure>
<h3 id="Gor常用命令"><a href="#Gor常用命令" class="headerlink" title="Gor常用命令"></a>Gor常用命令</h3><p>简单的HTTP流量复制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gor --input-raw :80 --output-http &quot;http://staging.com&quot;</div></pre></td></tr></table></figure>
<p>HTTP流量复制频率控制(获取每秒超过10个请求)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gor --input-tcp :28020 --output-http &quot;http://staging.com|10&quot;</div></pre></td></tr></table></figure>
<p>HTTP流量复制缩小</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gor --input-raw :80 --output-tcp &quot;replay.local:28020|10%&quot;</div></pre></td></tr></table></figure>
<p>HTTP流量记录到本地文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gor --input-raw :80 --output-file requests.gor</div></pre></td></tr></table></figure>
<p>HTTP流量回放和压测</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gor --input-file &quot;requests.gor|200%&quot; --output-http &quot;staging.com&quot;</div></pre></td></tr></table></figure>
<p>HTTP流量过滤复制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gor --input-raw :8080 --output-http staging.com --output-http-url-regexp ^www.</div></pre></td></tr></table></figure>
<p>自定义一些流量复制的参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gor --input-raw :80 --output-http 192.168.2.6:8000 --http-allow-method POST --http-set-header &apos;User-Agent: Gor&apos; -output-http-workers=1 -http-allow-url test.php</div></pre></td></tr></table></figure>
<p>将流量复制两份到不同的测试服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gor --input-tcp :28020 --output-http &quot;http://staging.com&quot;  --output-http &quot;http://dev.com&quot;</div></pre></td></tr></table></figure>
<p>将流量像负载均衡一样分配到不同的服务器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gor --input-tcp :28020 --output-http &quot;http://staging.com&quot;  --output-http &quot;http://dev.com&quot; --split-output true</div></pre></td></tr></table></figure>
<h3 id="测试实例"><a href="#测试实例" class="headerlink" title="测试实例"></a>测试实例</h3><p>预发布系统压力测试</p>
<blockquote>
<p>预发布系统主要由预发布服务器和Gor流量复制工具组成，为了查看和分析测试效果，还可以接入各种监控分析系统。<br>部署搭建预发布服务，预发布服务使用的数据库，消息队列，缓存等等需要生成环境隔离，避免对生产环境造成影响；同时，预发布环境使用的数据尽量保证和生成环境一致，以保证测试效果。<br>将线上的五台Api服务器的流量复制到了一台preview(预发布)服务器</p>
</blockquote>
<ul>
<li>在Api服务器上启动Gor Listener，复制80端口的流量，转发到预发布服务器的28020端口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo gor --input-raw :80 --output-tcp preview:28020</div></pre></td></tr></table></figure>
<ul>
<li>在预发布服务器上启动Gor Replayer， 监听28020端口，同时将请求转发到预发布服务器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo gor --input-tcp preview:28020 --output-http http://staging.com</div></pre></td></tr></table></figure>
<ul>
<li>也可以将listener和replayer合二为一</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo gor --input-tcp preview:28020 --output-http http://staging.com</div></pre></td></tr></table></figure>
<p>注: gor使用listener捕捉请求的时候需要sudo权限</p>
<ul>
<li>测试总结</li>
</ul>
<blockquote>
<p>极少的情况下Gor会有少量的丢包问题出现，但是不影响测试效果。<br>建议将Gor的listener和replayer分开，减少对生成环境性能的影响。<br>部署搭建预发布服务，预发布服务使用的数据库，消息队列，缓存等等需要生成环境隔离，避免对生产环境造成影响；同时，预发布环境使用的数据尽量保证和生成环境一致，以保证测试效果。<br>由于预发布环境和生成环境的数据无法做到实时的同步，所以要注意区分哪些错误是有程序的bug，哪些是由数据不一致导致的。<br>预发布系统能够一站解决回归测试、abtest和压力测试，然而还是会有局限性：对于比较复杂的业务逻辑，并不能直观的表现出来，需要后台对数据进行进一步的分析比较后才能判断。</p>
</blockquote>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="https://github.com/buger/gor" target="_blank" rel="external">https://github.com/buger/gor</a><br><a href="https://blog.eood.cn/web-performance-testing-gor" target="_blank" rel="external">https://blog.eood.cn/web-performance-testing-gor</a><br><a href="http://my.oschina.net/guol/blog/675294" target="_blank" rel="external">http://my.oschina.net/guol/blog/675294</a><br><a href="http://xuyaoqiang.com/2016/05/02/prevew-api-based-on-gor/" target="_blank" rel="external">http://xuyaoqiang.com/2016/05/02/prevew-api-based-on-gor/</a><br><a href="https://github.com/buger/gor/blob/master/ELASTICSEARCH.md" target="_blank" rel="external">https://github.com/buger/gor/blob/master/ELASTICSEARCH.md</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何用httpie更高效的调试接口]]></title>
      <url>http://www.hi-linux.com/posts/59166.html</url>
      <content type="html"><![CDATA[<p>如果你经常需要通过终端以非交互模式访问网络服务器(例如，从网络上下载文件，或者是测试RESTful网络服务接口)，可能你会选择的工具是wget或curl。</p>
<p>HTTPie(读aych-tee-tee-pie)是一款开源的命令行HTTP工具。HTTPie采用Python开发，底层用到了Requests和Pygments库。HTTPie设计用来增强wget和curl的可用性。它的主要目标是使通过命令行与网络服务器进行交互的过程变得尽可能的人性化。其提供了一个简单的HTTP环境来让我们通过简单而自然的语法发送任意HTTP请求，并显示彩色输出。HTTPie可用于测试，调试和与HTTP服务器进行普通的交互。<br><a id="more"></a></p>
<p>官方主页: <a href="http://httpie.org/" target="_blank" rel="external">http://httpie.org/</a></p>
<p>先展示一下HTTPie官方的一个HTTPie VS cURL的图给大家看看。</p>
<p><img src="http://www.hi-linux.com/img/linux/httpie.png" alt=""></p>
<h3 id="安装HTTPie"><a href="#安装HTTPie" class="headerlink" title="安装HTTPie"></a>安装HTTPie</h3><p>Linux</p>
<p>HTTPie是用Python写的，所以你可以在几乎所有地方(Linux，MacOSX，Windows)安装它。而且，在大多数的Linux发行版中都有编译好的安装包。</p>
<p>Debian、Ubuntu或者Linux Mint</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install httpie</div></pre></td></tr></table></figure>
<p>Fedora</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install httpie</div></pre></td></tr></table></figure>
<p>CentOS/RHEL(Centos7需启用EPEL源)</p>
<p>首先，启用EPEL仓库，然后运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install httpie</div></pre></td></tr></table></figure>
<p>对于任何Linux发行版，另一个安装方法使用pip。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo pip install --upgrade httpie</div></pre></td></tr></table></figure>
<p>Mac OS X</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install httpie</div></pre></td></tr></table></figure>
<h3 id="HTTPie使用"><a href="#HTTPie使用" class="headerlink" title="HTTPie使用"></a>HTTPie使用</h3><p>当你安装完HTTPie后，你可以通过输入http命令来调用它。</p>
<p>标准命令格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http [flags] [METHOD] URL [ITEM [ITEM]]</div></pre></td></tr></table></figure>
<p>先看一个示例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">$ http PUT httpbin.org/put hello=world Referer:http://www.imike.me</div><div class="line">HTTP/1.1 200 OK</div><div class="line">Access-Control-Allow-Credentials: true</div><div class="line">Access-Control-Allow-Origin: *</div><div class="line">Connection: keep-alive</div><div class="line">Content-Length: 458</div><div class="line">Content-Type: application/json</div><div class="line">Date: Tue, 03 May 2016 09:25:33 GMT</div><div class="line">Server: nginx</div><div class="line"></div><div class="line">&#123;</div><div class="line">    &quot;args&quot;: &#123;&#125;, </div><div class="line">    &quot;data&quot;: &quot;&#123;\&quot;hello\&quot;: \&quot;world\&quot;&#125;&quot;, </div><div class="line">    &quot;files&quot;: &#123;&#125;, </div><div class="line">    &quot;form&quot;: &#123;&#125;, </div><div class="line">    &quot;headers&quot;: &#123;</div><div class="line">        &quot;Accept&quot;: &quot;application/json&quot;, </div><div class="line">        &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, </div><div class="line">        &quot;Content-Length&quot;: &quot;18&quot;, </div><div class="line">        &quot;Content-Type&quot;: &quot;application/json&quot;, </div><div class="line">        &quot;Host&quot;: &quot;httpbin.org&quot;, </div><div class="line">        &quot;Referer&quot;: &quot;http://www.imike.me&quot;, </div><div class="line">        &quot;User-Agent&quot;: &quot;HTTPie/0.9.3&quot;</div><div class="line">    &#125;, </div><div class="line">    &quot;json&quot;: &#123;</div><div class="line">        &quot;hello&quot;: &quot;world&quot;</div><div class="line">    &#125;, </div><div class="line">    &quot;origin&quot;: &quot;118.60.17.21&quot;, </div><div class="line">    &quot;url&quot;: &quot;http://httpbin.org/put&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="定制头部"><a href="#定制头部" class="headerlink" title="定制头部"></a>定制头部</h4><p>你可以使用<code>&lt;header:value&gt;</code>的格式来定制头部。例如，我们发送一个HTTP GET请求到www.test.com ，使用定制用户代理(user-agent)和来源(referer)，还有定制头部(比如MyParam)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http www.test.com User-Agent:Xmodulo/1.0 Referer:http://www.imike.me MyParam:Foo</div></pre></td></tr></table></figure>
<p>注意到当使用HTTP GET方法时，就无需明确指定HTTP方法。</p>
<p>这个HTTP请求看起来如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">GET / HTTP/1.1</div><div class="line">Host: www.test.com</div><div class="line">Accept: */*</div><div class="line">Referer: www.imike.me</div><div class="line">Accept-Encoding: gzip, deflate, compress</div><div class="line">MyParam: Foo</div><div class="line">User-Agent: Xmodulo/1.0</div></pre></td></tr></table></figure>
<h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http  post http://127.0.0.1:8080/login &lt; /root/1.py</div></pre></td></tr></table></figure>
<h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><p>你可以把http作为文件下载器来使用。你需要像下面一样把输出重定向到文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http www.test.com/my_file.zip &gt; my_file.zip</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http --download www.test.com/my_file.zip</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http -d &#123;url&#125; #支持https</div></pre></td></tr></table></figure>
<h4 id="使用其他HTTP方法"><a href="#使用其他HTTP方法" class="headerlink" title="使用其他HTTP方法"></a>使用其他HTTP方法</h4><p>除了默认的GET方法，你还可以使用其他方法(比如PUT、POST、DELETE、HEAD)。</p>
<h5 id="发送一个HTTP-PUT请求"><a href="#发送一个HTTP-PUT请求" class="headerlink" title="发送一个HTTP PUT请求"></a>发送一个HTTP PUT请求</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http PUT www.test.com name=&apos;Dan Nanni&apos; email=&apos;dan@email.com&apos;</div></pre></td></tr></table></figure>
<h5 id="发送POST数据"><a href="#发送POST数据" class="headerlink" title="发送POST数据"></a>发送POST数据</h5><p>提交表单</p>
<p>使用http命令提交表单很容易，如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http -f POST www.test.com name=&apos;Dan Nanni&apos; comment=&apos;Hi there&apos;</div></pre></td></tr></table></figure>
<p><code>-f</code>选项使http命令序列化数据字段，并将<code>Content-Type</code>设置为<code>application/x-www-form-urlencoded; charset=utf-8</code>。</p>
<p>这个HTTP POST 请求看起来如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">POST / HTTP/1.1</div><div class="line">Host: www.test.com</div><div class="line">Content-Length: 31</div><div class="line">Content-Type: application/x-www-form-urlencoded; charset=utf-8</div><div class="line">Accept-Encoding: gzip, deflate, compress</div><div class="line">Accept: */*</div><div class="line">User-Agent: HTTPie/0.8.0</div><div class="line">name=Dan+Nanni&amp;comment=Hi+there</div></pre></td></tr></table></figure>
<p>模拟Form的上传, Content-Type: multipart/form-data</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http -f POST test.com/jobs name=&apos;John Smith&apos; file@~/test.pdf</div></pre></td></tr></table></figure>
<h5 id="模拟HEAD方法"><a href="#模拟HEAD方法" class="headerlink" title="模拟HEAD方法"></a>模拟HEAD方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http HEAD www.imike.me</div></pre></td></tr></table></figure>
<p>HEAD这个方法只会让服务器返回http response headers。</p>
<p>这个命令结果如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Request</div><div class="line"></div><div class="line">HEAD / HTTP/1.1</div><div class="line">Accept: */*</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Connection: keep-alive</div><div class="line">Host: www.imike.me</div><div class="line">User-Agent: HTTPie/0.9.2</div><div class="line">Response</div><div class="line"></div><div class="line">HTTP/1.1 200 OK</div><div class="line">Accept-Ranges: bytes</div><div class="line">Access-Control-Allow-Origin: *</div><div class="line">Age: 0</div><div class="line">Cache-Control: max-age=600</div><div class="line">Connection: keep-alive</div><div class="line">Content-Encoding: gzip</div><div class="line">Content-Length: 36794</div><div class="line">Content-Type: text/html; charset=utf-8</div><div class="line">Date: Wed, 15 Jul 2015 09:26:22 GMT</div><div class="line">Expires: Wed, 15 Jul 2015 09:36:22 GMT</div><div class="line">Last-Modified: Sun, 12 Jul 2015 11:32:15 GMT</div><div class="line">Server: imike.me</div><div class="line">Vary: Accept-Encoding</div><div class="line">Via: 1.1 varnish</div><div class="line">X-Cache: MISS</div><div class="line">X-Cache-Hits: 0</div><div class="line">X-Served-By: cache-fra1227-FRA</div><div class="line">X-Timer: S1436952382.011631,VS0,VE99</div></pre></td></tr></table></figure>
<h5 id="请求删除的方法"><a href="#请求删除的方法" class="headerlink" title="请求删除的方法"></a>请求删除的方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http DELETE test.com</div></pre></td></tr></table></figure>
<h4 id="修改请求头"><a href="#修改请求头" class="headerlink" title="修改请求头"></a>修改请求头</h4><p>使用:分隔</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http test.com  User-Agent:Yhz/1.0  &apos;Cookie:a=b;b=c&apos;  Referer:http://imike.me/</div></pre></td></tr></table></figure>
<h4 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ http -a username:password test.com  </div><div class="line">$ http --auth-type=digest -a username:password test.com</div></pre></td></tr></table></figure>
<h4 id="JSON支持"><a href="#JSON支持" class="headerlink" title="JSON支持"></a>JSON支持</h4><p>HTTPie内置JSON的支持。事实上HTTPie默认使用的内容类型(content-type)就是application/json。因此，当你不指定内容类型发送数据字段时，它们会自动序列化为JSON对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ http http://127.0.0.1:8080/snippets/1/</div><div class="line">HTTP/1.0 200 OK</div><div class="line">Content-Type: application/json</div><div class="line">Date: Mon, 04 Jan 2016 03:22:29 GMT</div><div class="line">Server: WSGIServer/0.1 Python/2.7.6</div><div class="line">X-Frame-Options: SAMEORIGIN</div><div class="line"> </div><div class="line">&#123;</div><div class="line">    &quot;code&quot;: &quot;foo = \&quot;bar\&quot;\n&quot;,</div><div class="line">    &quot;language&quot;: &quot;python&quot;,</div><div class="line">    &quot;linenos&quot;: false,</div><div class="line">    &quot;pk&quot;: 1,</div><div class="line">    &quot;style&quot;: &quot;friendly&quot;,</div><div class="line">    &quot;title&quot;: &quot;&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>传递JSON数据请求(默认就是JSON数据请求)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http PUT test.com name=nate password=nate_password</div></pre></td></tr></table></figure>
<p>如果JSON数据存在不是字符串则用:=分隔，例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http PUT test.com name=nate password=nate_password age:=28 a:=true streets:=&apos;[&quot;a&quot;, &quot;b&quot;]&apos;</div></pre></td></tr></table></figure>
<h4 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h4><p>HTTPie的另外一个用户友好特性是输入重定向，你可以使用缓冲数据提供HTTP请求内容。例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http POST api.test.com/db/lookup &lt; my_info.json</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ echo &apos;&#123;&quot;name&quot;: &quot;Dan Nanni&quot;&#125;&apos; | http POST api.test.com/db/lookup</div><div class="line">$ echo &apos;&#123;&quot;name&quot;: &quot;Dan Nanni&quot;,&quot;email&quot;: &quot;test@email.com&quot;&#125;&apos; | http POST api.test.com/db/lookup</div></pre></td></tr></table></figure>
<h4 id="使用http代理"><a href="#使用http代理" class="headerlink" title="使用http代理"></a>使用http代理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ http --proxy=http:127.0.0.1:8087 youtube.com</div><div class="line">$ http --proxy=http:http://192.168.1.100:8060 youtube.com  </div><div class="line">$ http --proxy=http:http://user:pass@192.168.1.100:8060 youtube.com</div></pre></td></tr></table></figure>
<h4 id="显示详细的请求"><a href="#显示详细的请求" class="headerlink" title="显示详细的请求"></a>显示详细的请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http -v test.com</div></pre></td></tr></table></figure>
<p>只显示Header</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http -h test.com</div></pre></td></tr></table></figure>
<p>只显示Body</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http -b test.com</div></pre></td></tr></table></figure>
<h4 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h4><p>看全部并跟随跳转</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http --follow httpbin.org/redirect/3</div></pre></td></tr></table></figure>
<p>下载图片，然后用imagemagick转化，然后上传到另外一个网站</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http octodex.github.com/images/original.jpg | convert - -resize 25% -  | http test.com/Octocats</div></pre></td></tr></table></figure>
<p>把认证信息放到session里</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http --session=user1 -a user1:password test.com X-Foo:Bar</div></pre></td></tr></table></figure>
<p>使用之前认证过后的session继续访问</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http --session=user1 test.com</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="https://github.com/jkbrzt/httpie" target="_blank" rel="external">https://github.com/jkbrzt/httpie</a><br><a href="http://lingxiankong.github.io/blog/2014/08/19/curl-httpie/" target="_blank" rel="external">http://lingxiankong.github.io/blog/2014/08/19/curl-httpie/</a><br><a href="http://www.rendoumi.com/httpdiao-shi-de-ling-yi-li-qi-httpie/" target="_blank" rel="external">http://www.rendoumi.com/httpdiao-shi-de-ling-yi-li-qi-httpie/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS下安装系统监控工具OrzDBA]]></title>
      <url>http://www.hi-linux.com/posts/2395.html</url>
      <content type="html"><![CDATA[<p>OrzDBA是淘宝DBA团队发布的监控脚本，使用perl开发，可以完成对linux系统和MySql相关指标的实时监控。</p>
<p>MYSQL这些监控指标的来源和mysqlreport等工具类似，都是通过<code>show variables</code>列出经常关注的核心变量，通过<code>show global status</code>列出相关MYSQL状态信息。这个监控工具比较有特色，把系统信息和数据库信息一起监控，就是安装有点麻烦。</p>
<p>项目地址：<a href="http://code.taobao.org/p/orzdba/src/trunk/" target="_blank" rel="external">http://code.taobao.org/p/orzdba/src/trunk/</a></p>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用SVN下载OrzDBA的项目，其中包含了文档和依赖的包文件。</p>
<p><strong>下载源码</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ svn co http://code.taobao.org/svn/orzdba/trunk</div><div class="line">$ chmod +x orzdba</div><div class="line">$ cp orzdba  /usr/bin/orzdba</div></pre></td></tr></table></figure>
<p><strong>安装tcprstat</strong></p>
<p>orzdba依赖于tcprstat，需先安装tcprstat。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ wget http://github.com/downloads/Lowercases/tcprstat/tcprstat-static.v0.3.1.x86_64</div><div class="line">$ cp tcprstat-static.v0.3.1.x86_64 /usr/bin/tcprstat</div><div class="line">$ chmod u+sx /usr/bin/tcprstat</div></pre></td></tr></table></figure>
<p>编辑orzdba源码</p>
<p>在源码162行左右把/usr/bin/tcprstat加入默认读取的位置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vim orzdba</div><div class="line"></div><div class="line">my $TCPRSTAT = &quot;/usr/bin/tcprstat --no-header -t 1 -n 0 -p $port&quot;;</div></pre></td></tr></table></figure>
<p><strong>安装的perl依赖包</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install perl-Test-Simple.x86_64 perl-Time-HiRes perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker perl-DBD-MySQL perl-DBI</div></pre></td></tr></table></figure>
<p><strong>安装version模块</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ wget http://search.cpan.org/CPAN/authors/id/J/JP/JPEACOCK/version-0.99.tar.gz</div><div class="line">$ tar -zxvf version-0.99.tar.gz</div><div class="line">$ cd version-0.99</div><div class="line">$ perl Makefile.PL</div><div class="line">$ make </div><div class="line">$ make test</div><div class="line">$ make install</div></pre></td></tr></table></figure>
<p><strong>安装Module-Build模块</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ wget http://search.cpan.org/CPAN/authors/id/K/KW/KWILLIAMS/Module-Build-0.31.tar.gz </div><div class="line">$ tar -zxvf Module-Build-0.31.tar.gz </div><div class="line">$ cd Module-Build-0.31 </div><div class="line">$ perl Build.PL </div><div class="line">$ ./Build </div><div class="line">$ ./Build test </div><div class="line">$ ./Build install</div></pre></td></tr></table></figure>
<p><strong>安装File::Lockfile模块</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ wget http://search.cpan.org/CPAN/authors/id/G/GL/GLORYBOX/File-Lockfile-v1.0.5.tar.gz</div><div class="line">$ tar -zxvf File-Lockfile-v1.0.5.tar.gz </div><div class="line">$ cd File-Lockfile-v1.0.5 </div><div class="line">$ perl Build.PL</div><div class="line">$ perl ./Build</div><div class="line">$ perl ./Build test</div><div class="line">$ perl ./Build install</div></pre></td></tr></table></figure>
<p><strong>安装Class-Data-Inheritable模块</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ wget http://search.cpan.org/CPAN/authors/id/T/TM/TMTM/Class-Data-Inheritable-0.08.tar.gz</div><div class="line">$ tar -zxvf Class-Data-Inheritable-0.08.tar.gz </div><div class="line">$ cd Class-Data-Inheritable-0.08 </div><div class="line">$ perl Makefile.PL </div><div class="line">$ make </div><div class="line">$ make test </div><div class="line">$ make install</div></pre></td></tr></table></figure>
<p>安装完如提示：<code>Usage: Socket::inet_ntoa(ip_address_sv) at ./orz line 477</code>，因主机名不能解析，需要将IP和主机名写到<code>/etc/hosts</code>文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/hosts</div><div class="line">127.0.0.1   mike</div></pre></td></tr></table></figure>
<p>注:SVN中签出包含一个<code>orzdba_rt_depend_perl_module.tar.gz</code>文件，这个文件也包含以上4个PERL模块的源代码。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>配置登陆密码</p>
<p>在代码的160行左右，配置自己的MySQL验证信息：<code>username</code>、<code>password</code>、<code>socket</code>、<code>host</code>、<code>port</code></p>
<p>MYSQL 5.6以下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ grep -n &apos;my $MYSQL&apos; orzdba</div><div class="line">160:my $MYSQL    = qq&#123;mysql -s --skip-column-names -uroot -pyoon -h127.0.0.1 -P$port &#125;;</div></pre></td></tr></table></figure>
<p>MYSQL 5.6以上</p>
<p>密码安全问题解决</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mysql -uroot -p&apos;xxxxx&apos; -s</div><div class="line">Warning: Using a password on the command line interface can be insecure.</div><div class="line">(db)root@localhost [(none)]&gt;</div></pre></td></tr></table></figure>
<p>MySQL加强了密码安全，如果在命令行输入密码，会出现这个警告。但这个警告会影响orzdba展示页面，解决这个烦人的警告可以通过下面两个方法</p>
<ul>
<li><p>把数据库密码写到my.cnf配置文件里面</p>
</li>
<li><p>同样利用mysql5.6的新特性<code>mysql_config_edit</code>可以用来加密用户的密码，消除警告(推荐)</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ mysql_config_editor set --login-path=login --user=root --password</div><div class="line">$ mysql_config_editor print --all</div><div class="line">[login] </div><div class="line">user = root </div><div class="line">password = *****</div><div class="line">host = localhost</div><div class="line"></div><div class="line">#加密过后的文件是二进制文件不能够直接读出</div><div class="line">$ cat .mylogin.cnf    </div><div class="line">  §Z[root@ ~]# ???=s??μ¤??￠ A^Z??o????~  </div><div class="line">$ mysql --login-path=login -s</div><div class="line">(db)root@localhost [(none)]&gt;</div></pre></td></tr></table></figure>
<p>修改orzdba</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ vim orzdba</div><div class="line"></div><div class="line">#找到160行</div><div class="line">gg 160</div><div class="line">my $MYSQL    = qq&#123;mysql -s --skip-column-names -uroot -P$port &#125;;</div><div class="line">修改为</div><div class="line">my $MYSQL    = qq&#123;mysql --login-path=login -s --skip-column-names &#125;;</div></pre></td></tr></table></figure>
<p>保存， 大功告成。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用方法可用帮助命令查看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">$ orzdba -h</div><div class="line">==========================================================================================</div><div class="line">Info  :</div><div class="line">        Created By zhuxu@taobao.com</div><div class="line">Usage :</div><div class="line">Command line options :</div><div class="line"></div><div class="line">   -h,--help           Print Help Info. </div><div class="line">   -i,--interval       Time(second) Interval.  </div><div class="line">   -C,--count          Times. </div><div class="line">   -t,--time           Print The Current Time.</div><div class="line">   -nocolor            Print NO Color.</div><div class="line"></div><div class="line">   -l,--load           Print Load Info.</div><div class="line">   -c,--cpu            Print Cpu  Info.</div><div class="line">   -s,--swap           Print Swap Info.</div><div class="line">   -d,--disk           Print Disk Info.</div><div class="line">   -n,--net            Print Net  Info.</div><div class="line"></div><div class="line">   -P,--port           Port number to use for mysql connection(default 3306).</div><div class="line">   -S,--socket         Socket file to use for mysql connection.</div><div class="line"></div><div class="line">   -com                Print MySQL Status(Com_select,Com_insert,Com_update,Com_delete).</div><div class="line">   -hit                Print Innodb Hit%.</div><div class="line">   -innodb_rows        Print Innodb Rows Status(Innodb_rows_inserted/updated/deleted/read).</div><div class="line">   -innodb_pages       Print Innodb Buffer Pool Pages Status(Innodb_buffer_pool_pages_data/free/dirty/flushed)</div><div class="line">   -innodb_data        Print Innodb Data Status(Innodb_data_reads/writes/read/written)</div><div class="line">   -innodb_log         Print Innodb Log  Status(Innodb_os_log_fsyncs/written)</div><div class="line">   -innodb_status      Print Innodb Status from Command: &apos;Show Engine Innodb Status&apos;</div><div class="line">                       (history list/ log unflushed/uncheckpointed bytes/ read views/ queries inside/queued)</div><div class="line">   -T,--threads        Print Threads Status(Threads_running,Threads_connected,Threads_created,Threads_cached).</div><div class="line">   -rt                 Print MySQL DB RT(us).</div><div class="line">   -B,--bytes          Print Bytes received from/send to MySQL(Bytes_received,Bytes_sent).</div><div class="line"></div><div class="line">   -mysql              Print MySQLInfo (include -t,-com,-hit,-T,-B).</div><div class="line">   -innodb             Print InnodbInfo(include -t,-innodb_pages,-innodb_data,-innodb_log,-innodb_status)</div><div class="line">   -sys                Print SysInfo   (include -t,-l,-c,-s).</div><div class="line">   -lazy               Print Info      (include -t,-l,-c,-s,-com,-hit). </div><div class="line"></div><div class="line">   -L,--logfile        Print to Logfile.</div><div class="line">   -logfile_by_day     One day a logfile,the suffix of logfile is &apos;yyyy-mm-dd&apos;;</div><div class="line">                       and is valid with -L.</div><div class="line"></div><div class="line">Sample :</div><div class="line">   shell&gt; nohup ./orzdba -lazy -d sda -C 5 -i 2 -L /tmp/orzdba.log  &gt; /dev/null 2&gt;&amp;1 &amp;</div><div class="line">==========================================================================================</div></pre></td></tr></table></figure>
<p><strong>监控系统和MYSQL各项指标</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ orzdba  -lazy -rt -S /var/lib/mysql/mysql.sock</div></pre></td></tr></table></figure>
<p><img src="http://www.hi-linux.com/img/linux/orzdba1.png" alt=""></p>
<blockquote>
<p>count：此间隔内完成的请求数量<br>avg：此间隔内所有完成的请求，响应的平均时间<br>95_avg：此间隔内95%的请求量的平均响应时间(单位微秒)，该值较能体现MySQL Server查询的平均响应时间</p>
</blockquote>
<p><strong>监控InnoDB的各项指标</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ orzdba -innodb -S /var/lib/mysql/mysql.sock</div></pre></td></tr></table></figure>
<p>文档中给出[innodb请求命中率]的计算公式为</p>
<blockquote>
<p>Hit% =<br>(Innodb_buffer_pool_read_requests - Innodb_buffer_pool_reads)<br>/ Innodb_buffer_pool_read_requests * 100%</p>
</blockquote>
<p><strong>监控MySQL Server性能</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ orzdba -mysql -S /var/lib/mysql/mysql.sock</div></pre></td></tr></table></figure>
<p><img src="http://www.hi-linux.com/img/linux/orzdba2.jpg" alt=""></p>
<p>显示出数据库常用变量值、insert/update/delete/select的统计值、innodb请求命中率、线程状态、mysql收发字节数</p>
<p><strong>Linux系统信息的监控</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ orzdba -sys</div></pre></td></tr></table></figure>
<p><img src="http://www.hi-linux.com/img/linux/orzdba3.png" alt=""></p>
<p>显示出了当前负载状况、CPU使用状况、swap状况</p>
<p><strong>查询数据库节点主机cpu,每两秒显示一次，共显示10次，将结果放到cpu.log中</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ orzdba -c -i 2 -C 10 -L cpu.log</div></pre></td></tr></table></figure>
<p><img src="http://www.hi-linux.com/img/linux/orzdba4.jpg" alt=""></p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://code.taobao.org/p/orzdba/src/trunk/" target="_blank" rel="external">http://code.taobao.org/p/orzdba/src/trunk/</a><br><a href="http://blog.itpub.net/15480802/viewspace-1425464" target="_blank" rel="external">http://blog.itpub.net/15480802/viewspace-1425464</a><br><a href="http://blog.itpub.net/28939273/viewspace-1875895/" target="_blank" rel="external">http://blog.itpub.net/28939273/viewspace-1875895/</a><br><a href="http://blog.csdn.net/dba_waterbin/article/details/12970675" target="_blank" rel="external">http://blog.csdn.net/dba_waterbin/article/details/12970675</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS下搭建Aria2远程下载环境]]></title>
      <url>http://www.hi-linux.com/posts/49089.html</url>
      <content type="html"><![CDATA[<h3 id="关于Aria2"><a href="#关于Aria2" class="headerlink" title="关于Aria2"></a>关于Aria2</h3><p>Aria2是一个基于命令行的开源下载工具，支持多协议、多来源(HTTP/HTTPS、FTP、BitTorrent、Metalink协议等)、多线程的下载。它比axel优秀的地方在于完全支持BitTorrent协议，同时可以作为BitTorrent客户端来下载种子文件,支持Metalink协议,远程控制(通过web端)下载进程。</p>
<p>主要优势如下</p>
<blockquote>
<p>高速，自动多线程下载；<br>断点续传；<br>轻量占用内存非常少，通常情况平均4~9MB内存占用(官方介绍)；<br>多平台。支援 Win/Linux/OSX/Android 等操作系统下的部署；<br>模块化。分段下载引擎，文件整合速度快；<br>支持RPC界面远程；<br>全面支持BitTorrent协议；<br><a id="more"></a></p>
</blockquote>
<p>Aria2官方项目页面：<a href="https://aria2.github.io/" target="_blank" rel="external">https://aria2.github.io/</a></p>
<h3 id="安装Aria2"><a href="#安装Aria2" class="headerlink" title="安装Aria2"></a>安装Aria2</h3><h4 id="包安装"><a href="#包安装" class="headerlink" title="包安装"></a>包安装</h4><p>CentOS</p>
<p>默认Repo里没有Aria2,我们需要添加第三方的yum源。</p>
<p>安装rpmforge源</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ wget http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm</div><div class="line">$ rpm -ivh rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm</div></pre></td></tr></table></figure>
<p>安装Aria2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum -y install aria2</div></pre></td></tr></table></figure>
<p>注:rpmforge源中的版本是1.16.4，版本相对是比较低！</p>
<p>Ubuntu</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install aria2</div></pre></td></tr></table></figure>
<p>MAC OS</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install aria2</div></pre></td></tr></table></figure>
<h4 id="编译安装Aria2"><a href="#编译安装Aria2" class="headerlink" title="编译安装Aria2"></a>编译安装Aria2</h4><p>依赖环境</p>
<p>Aria2 1.17.1以上版本要求<code>gcc &gt;= 4.8.3 or clang &gt;= 3.4</code></p>
<p>安装clang</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install clang   #epel源</div></pre></td></tr></table></figure>
<p>安装GCC</p>
<p>通过SCL安装GCC</p>
<p>CentOS 6</p>
<p><a href="https://copr.fedoraproject.org/coprs/rhscl/devtoolset-3/" target="_blank" rel="external">https://copr.fedoraproject.org/coprs/rhscl/devtoolset-3/</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ wget https://copr.fedoraproject.org/coprs/rhscl/devtoolset-3/repo/epel-6/rhscl-devtoolset-3-epel-6.repo   -O /etc/yum.repos.d/rhscl-devtoolset-3-epel-6.repo</div><div class="line">$ yum install devtoolset-3-gcc devtoolset-3-gcc-c++ devtoolset-3-binutils devtoolset-3-gcc-gfortran </div><div class="line">$ scl enable devtoolset-3 bash   #启用SCL环境中新版本GCC </div><div class="line">$ gcc --version</div></pre></td></tr></table></figure>
<p>编译Aria2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/aria2/aria2/releases/download/release-1.22.0/aria2-1.22.0.tar.gz</div><div class="line">$ tar xzvf aria2-1.22.0.tar.gz</div><div class="line">$ cd aria2-1.22.0</div><div class="line">$ ./configure</div><div class="line">$ make</div><div class="line">$ make install</div><div class="line">$ man aria2c //查看aria2c manual</div></pre></td></tr></table></figure>
<p>验证Aria2版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ aria2c --version                                  </div><div class="line">aria2 版本 1.22.0</div><div class="line">Copyright (C) 2006, 2015 Tatsuhiro Tsujikawa</div><div class="line"></div><div class="line">本程序为自由软件；您可自由再版或修改它，惟须遵守 GNU 通用公共许可证，</div><div class="line">第 2 版或更新版本（依您所愿）的条款，以自由软件基金会发布的版本为准。</div><div class="line"></div><div class="line">我们本着希望有用的态度发行此软件，但 *从未做出任何保证*，甚至不暗示对</div><div class="line">于适销性或对某一特定用途的适用性的保证。参见 GNU 通用公共许可证以获取</div><div class="line">更多信息。</div><div class="line"></div><div class="line">** 配置 **</div><div class="line">已开启的特性: BitTorrent, Firefox3 Cookie, GZip, HTTPS, Message Digest, Metalink, XML-RPC</div><div class="line">哈希算法: sha-1, sha-224, sha-256, sha-384, sha-512, md5, adler32</div><div class="line">库: zlib/1.2.3 libxml2/2.7.6 sqlite3/3.6.20 OpenSSL/1.0.1e</div><div class="line">编译器: gcc 4.9.2 20150212 (Red Hat 4.9.2-6)</div><div class="line">  built by   x86_64-pc-linux-gnu</div><div class="line">  on         May  6 2016 14:31:52</div><div class="line">系统: Linux 2.6.32-573.12.1.el6.x86_64 #1 SMP Tue Dec 15 21:19:08 UTC 2015 x86_64</div></pre></td></tr></table></figure>
<h3 id="配置Aria2"><a href="#配置Aria2" class="headerlink" title="配置Aria2"></a>配置Aria2</h3><p>创建配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">$ mkdir /etc/aria2/</div><div class="line">$ vim /etc/aria2/aria2.conf</div><div class="line"></div><div class="line">#用户名</div><div class="line">#rpc-user=user</div><div class="line">#密码</div><div class="line">#rpc-passwd=passwd</div><div class="line">#上面的认证方式不建议使用,建议使用下面的token方式</div><div class="line">#设置加密的密钥</div><div class="line">#rpc-secret=token</div><div class="line">#允许rpc</div><div class="line">enable-rpc=true</div><div class="line">#允许所有来源, web界面跨域权限需要</div><div class="line">rpc-allow-origin-all=true</div><div class="line">#允许外部访问，false的话只监听本地端口</div><div class="line">rpc-listen-all=true</div><div class="line">#RPC端口, 仅当默认端口被占用时修改</div><div class="line">rpc-listen-port=6800</div><div class="line">#最大同时下载数(任务数), 路由建议值: 3</div><div class="line">max-concurrent-downloads=5</div><div class="line">#断点续传</div><div class="line">continue=true</div><div class="line">#同服务器连接数</div><div class="line">max-connection-per-server=5</div><div class="line">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要</div><div class="line">min-split-size=10M</div><div class="line">#单文件最大线程数, 路由建议值: 5</div><div class="line">split=10</div><div class="line">#下载速度限制</div><div class="line">max-overall-download-limit=0</div><div class="line">#单文件速度限制</div><div class="line">max-download-limit=0</div><div class="line">#上传速度限制</div><div class="line">max-overall-upload-limit=0</div><div class="line">#单文件速度限制</div><div class="line">max-upload-limit=0</div><div class="line">#断开速度过慢的连接</div><div class="line">#lowest-speed-limit=0</div><div class="line">#验证用，需要1.16.1之后的release版本</div><div class="line">#referer=*</div><div class="line">#文件保存路径, 默认为当前启动位置</div><div class="line">dir=/root/downloads</div><div class="line">#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本</div><div class="line">#disk-cache=0</div><div class="line">#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)</div><div class="line">#enable-mmap=true</div><div class="line">#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长</div><div class="line">#所需时间 none &lt; falloc ? trunc &lt;&lt; prealloc, falloc和trunc需要文件系统和内核支持</div><div class="line">file-allocation=prealloc</div></pre></td></tr></table></figure>
<p>注意将配置表中保存路径一项<code>dir=/root/downloads</code>替换为自己的保存位置。(Windows下类似这样<code>dir=F:\SoftWare</code>)</p>
<h3 id="Aria2的使用"><a href="#Aria2的使用" class="headerlink" title="Aria2的使用"></a>Aria2的使用</h3><p>配置完成后，就可以开始使用了。</p>
<p>Aria2有两种模式</p>
<h4 id="命令直接调用"><a href="#命令直接调用" class="headerlink" title="命令直接调用"></a>命令直接调用</h4><p>直接在命令行下载<code>$ aria2c &quot;download.url&quot;</code>, 下载完成后自动退出,就和wget 的工作方式一样。</p>
<h5 id="Aria2命令行使用"><a href="#Aria2命令行使用" class="headerlink" title="Aria2命令行使用"></a>Aria2命令行使用</h5><p>使用Aria2下载文件，只需在命令后附加地址即可。如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ aria2c http://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.22.6.tar.bz2</div></pre></td></tr></table></figure>
<p>分段下载</p>
<p>利用Aria2的分段下载功能可以加快文件的下载速度，对于下载大文件时特别有用。为了使用aria2的分段下载功能，你需要在命令中指定<code>-s</code>选项。如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ aria2c -s 2 http://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.22.6.tar.bz2</div></pre></td></tr></table></figure>
<p>这将使用2连接来下载该文件。<code>-s</code>后面的参数值介于1~5之间，你可以根据实际情况选择。</p>
<p>断点续传</p>
<p>在命令中使用<code>-c</code>选项可以断点续传文件。如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ aria2c -c http://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.22.6.tar.bz2</div></pre></td></tr></table></figure>
<p>下载torrent文件</p>
<p>你也可以使用Aria2下载BitTorrent文件。如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ aria2c -o gutsy.torrent http://cdimage.ubuntu.com/daily-live/current/gutsy-desktop-i386.iso.torrent</div></pre></td></tr></table></figure>
<p>后台下载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ aria2c -D url</div><div class="line">$ aria2c --deamon=true url</div></pre></td></tr></table></figure>
<p>验证文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ aria2c --checksum=md5=别人提供的md5</div></pre></td></tr></table></figure>
<p>BT下载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ aria2c /tmp/CentOS-6.3-i386-bin-DVD1to2.torrent</div><div class="line">$ aria2c http://mirrors.163.com/centos/6.6/isos/x86_64/CentOS-6.6-x86_64-minimal.torrent</div></pre></td></tr></table></figure>
<p>列出种子内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ aria2c -S .torrent</div></pre></td></tr></table></figure>
<p>下载种子内特定编号的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ aria2c --select-file=1,4-7 .torrent</div></pre></td></tr></table></figure>
<p>此处下载编号为1,4,5,6,7的文件</p>
<p>设置bt端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ aria2c --listen-port=1234 .torrent</div></pre></td></tr></table></figure>
<p>设置dht端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ aria2c --dht-listen-port=1234 .torrent</div></pre></td></tr></table></figure>
<p>下载需要引用页的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ aria2c --referer=referurl url</div></pre></td></tr></table></figure>
<p>限速下载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ aria2c --max-download-limit=500k url //单个文件</div><div class="line">$ aria2c --max-overall-download-limit=500k url //全局</div></pre></td></tr></table></figure>
<p>下载需要Cookie验证的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ aria2c --header=&apos;Cookie:cookie名称=cookie内容&apos; url</div><div class="line">$ aria2c --load-cookies=cookie文件 url</div></pre></td></tr></table></figure>
<p>Metalink</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ aria2c http://example.org/mylinux.metalink</div></pre></td></tr></table></figure>
<p>批量下载文本中所有URL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ aria2c -i uris.txt</div></pre></td></tr></table></figure>
<p>注意：当源地址存在诸如<code>&amp;</code>,<code>*</code>等shell的特殊字符，请使用单引号或双引号把URI包含起来。</p>
<h4 id="RPC-Server模式-推荐"><a href="#RPC-Server模式-推荐" class="headerlink" title="RPC Server模式(推荐)"></a>RPC Server模式(推荐)</h4><p>Aria2作为后台常驻程序，监测rpc端口的活动情况，添加并下载文件。完成后继续在后台运行。</p>
<p>涉及到命令输入，力求简化，第二种模式明显更省事。</p>
<h5 id="启动Aria2-RPC模式"><a href="#启动Aria2-RPC模式" class="headerlink" title="启动Aria2 RPC模式"></a>启动Aria2 RPC模式</h5><p><strong>命令行启动</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ aria2c --enable-rpc --rpc-listen-all --rpc-allow-origin-all -c  --dir /root/downloads -D (-D daemon模式,用于后台执行)</div></pre></td></tr></table></figure>
<p><strong>配置文件启动(推荐)</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ aria2c --conf-path=&lt;Path&gt;</div></pre></td></tr></table></figure>
<p><path></path>是指配置文件所在的绝对路径。默认位置是:<code>$HOME/.aria2/aria2.conf</code></p>
<p>依照上述配置一路下来，具体是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ aria2c --conf-path=&quot;/etc/aria2.conf&quot; -D  #(-D daemon模式,用于后台执行)</div></pre></td></tr></table></figure>
<p>这时正确无误的话，Aria2就启动了。</p>
<p><strong>启动脚本</strong></p>
<p>为方便管理，创建一个管理脚本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/init.d/aria2</div><div class="line">#!/bin/bash</div><div class="line">#</div><div class="line"># aria2 - this script starts and stops the aria2 daemon</div><div class="line">#</div><div class="line"># chkconfig:   - 85 15</div><div class="line"># description: Aria2 - Download Manager</div><div class="line"># processname: aria2c</div><div class="line"># config:      /etc/aria2/aria2.conf</div><div class="line"># pidfile:     </div><div class="line"> </div><div class="line"># Source function library.</div><div class="line">. /etc/rc.d/init.d/functions</div><div class="line"> </div><div class="line"># Source networking configuration.</div><div class="line">. /etc/sysconfig/network</div><div class="line"> </div><div class="line"># Check that networking is up.</div><div class="line">[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;&amp; exit 0</div><div class="line"> </div><div class="line">aria2c=&quot;/usr/bin/aria2c&quot;</div><div class="line">ARIA2C_CONF_FILE=&quot;/etc/aria2/aria2.conf&quot;</div><div class="line">options=&quot; --conf-path=$ARIA2C_CONF_FILE -D &quot;</div><div class="line"> </div><div class="line">RETVAL=0</div><div class="line"> </div><div class="line">start() &#123;</div><div class="line">        # code here to start the program</div><div class="line">        echo -n &quot;Starting aria2c daemon.&quot;</div><div class="line">        $&#123;aria2c&#125; $&#123;options&#125;</div><div class="line">        RETVAL=$?</div><div class="line">        echo</div><div class="line">&#125;</div><div class="line"> </div><div class="line">stop() &#123;</div><div class="line">        echo -n &quot;Shutting down aria2c daemon.&quot;</div><div class="line">        /usr/bin/killall aria2c</div><div class="line">        RETVAL=$?</div><div class="line">        echo</div><div class="line">&#125;</div><div class="line"> </div><div class="line">status() &#123;</div><div class="line">        ID=$(/bin/ps -ef | grep &apos;aria2c&apos; | grep -v &apos;grep&apos; | awk &apos;&#123;print $2&#125;&apos;)</div><div class="line">        if [[ &quot;x$ID&quot; != &quot;x&quot; ]]; then</div><div class="line">                echo &quot;Aria2 is running.&quot;</div><div class="line">        else</div><div class="line">                echo &quot;Aria2 is not running.&quot;</div><div class="line">        fi</div><div class="line">&#125;</div><div class="line"> </div><div class="line">restart() &#123;</div><div class="line">        stop</div><div class="line">        sleep 3</div><div class="line">        start</div><div class="line">&#125;</div><div class="line"> </div><div class="line">case &quot;$1&quot; in</div><div class="line">        start)</div><div class="line">                start</div><div class="line">                ;;</div><div class="line">        stop)</div><div class="line">                stop</div><div class="line">                ;;</div><div class="line">        status) </div><div class="line">                status</div><div class="line">                ;;</div><div class="line">        restart)</div><div class="line">                restart</div><div class="line">                ;;</div><div class="line">        *)</div><div class="line">                echo &quot;Usage: service aria2c &#123;start|stop|restart&#125;&quot;</div><div class="line">                RETVAL=1                             </div><div class="line">esac                                                 </div><div class="line">                                                      </div><div class="line">exit $RETVAL</div></pre></td></tr></table></figure>
<p>添加可执行权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chmod +x /etc/init.d/aria2</div></pre></td></tr></table></figure>
<p>启动Aria2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /etc/init.d/aria2 start</div></pre></td></tr></table></figure>
<h3 id="搭配Aria2-Web-UI"><a href="#搭配Aria2-Web-UI" class="headerlink" title="搭配Aria2 Web UI"></a>搭配Aria2 Web UI</h3><p>Aria2不带GUI界面。了解下载进度会有不便，日常使用需搭配Web UI工具方便查看。</p>
<h4 id="webui-aria2"><a href="#webui-aria2" class="headerlink" title="webui-aria2"></a>webui-aria2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/ziahamza/webui-aria2</div><div class="line">$ python -m SimpleHTTPServer 9999</div></pre></td></tr></table></figure>
<p>访问这台机器的9999端口就可以了,这里为了方便用python做为WEB服务器，其它任意一种WEB服务器都是可以的。</p>
<p>如果你不想搭建可使用<code>http://ziahamza.github.io/webui-aria2/</code>,配置数据是存在本地浏览器的，不需要注册。</p>
<p>注意：需要根据情况设置一下Aria2 RPC的地址，一般为Aria2后台进程运行的ip:port,例如192.168.119.100:6800。</p>
<h4 id="YAAW"><a href="#YAAW" class="headerlink" title="YAAW"></a>YAAW</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/binux/yaaw</div><div class="line">$ python -m SimpleHTTPServer 9999 #也可以使用Apache</div></pre></td></tr></table></figure>
<p>访问这台机器的9999端口就可以了,这里为了方便用python做为WEB服务器，其它任意一种WEB服务器都是可以的。</p>
<p>YAAW也有线版本</p>
<p><a href="http://aria2c.com/" target="_blank" rel="external">http://aria2c.com/</a><br><a href="http://binux.github.io/yaaw/demo/" target="_blank" rel="external">http://binux.github.io/yaaw/demo/</a></p>
<p>注意：需要根据情况设置一下Aria2 RPC的地址，一般为Aria2后台进程运行的ip:port,例如192.168.119.100:6800。</p>
<h4 id="Windows下图形版本"><a href="#Windows下图形版本" class="headerlink" title="Windows下图形版本"></a>Windows下图形版本</h4><p>Aria2c Remote Control</p>
<p><a href="http://sourceforge.net/projects/aria2cremote/" target="_blank" rel="external">http://sourceforge.net/projects/aria2cremote/</a></p>
<h4 id="给jsonrpc加上验证"><a href="#给jsonrpc加上验证" class="headerlink" title="给jsonrpc加上验证"></a>给jsonrpc加上验证</h4><h5 id="使用token验证-建议使用"><a href="#使用token验证-建议使用" class="headerlink" title="使用token验证(建议使用)"></a>使用token验证(建议使用)</h5><p>需要1.18.4以上版本，帐号密码方式将在后续版本中停用！</p>
<p>配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># token验证</div><div class="line">rpc-secret=secret</div></pre></td></tr></table></figure>
<p>命令行</p>
<p>使用<code>--rpc-secret=xxxxxx</code>选项</p>
<p>启用验证后，使用<code>http://token:secret@hostname:port/jsonrpc</code>的地址格式设置secret。</p>
<h5 id="使用密码验证"><a href="#使用密码验证" class="headerlink" title="使用密码验证"></a>使用密码验证</h5><p>需要1.15.2以上，1.18.6以下版本<br>1.18.4新增了<code>--rpc-secret</code> ,设置的RPC授权令牌, 取代<code>--rpc-user</code>和<code>--rpc-passwd</code>选项</p>
<p>配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#用户名</div><div class="line">rpc-user=username</div><div class="line">#密码</div><div class="line">rpc-passwd=passwd</div></pre></td></tr></table></figure>
<p>命令行</p>
<p>使用<code>--rpc-user=user</code> <code>--rpc-passwd=pwd</code>选项</p>
<p>启用验证后，使用<code>http://username:passwd@hostname:port/jsonrpc</code>的地址格式设置密码。 </p>
<p>对于RPC模式来说, 界面和后端是分离的, 只要给后端设置密码即可. 前端认证什么的是毫无意义的。 </p>
<h3 id="其它相关"><a href="#其它相关" class="headerlink" title="其它相关"></a>其它相关</h3><p>YAAW搭配脚本</p>
<p>迅雷离线(需会员账号)</p>
<p>Chrome Extension: <a href="https://chrome.google.com/webstore/detail/thunderlixianassistant/eehlmkfpnagoieibahhcghphdbjcdmen" target="_blank" rel="external">ThunderLixianAssistant</a><br>UserScript: <a href="https://github.com/binux/ThunderLixianExporter" target="_blank" rel="external">ThunderLixianExporter</a></p>
<p>旋风离线</p>
<p>UserScript: <a href="https://greasyfork.org/scripts/354-xuanfengex" target="_blank" rel="external">XuanFengEx</a><br>UserScript: <a href="https://greasyfork.org/scripts/2398-lixianexporter" target="_blank" rel="external">LixianExporter</a></p>
<p>百度网盘</p>
<p>Chrome Extension: <a href="https://chrome.google.com/webstore/detail/mjaenbjdjmgolhoafkohbhhbaiedbkno" target="_blank" rel="external">BaiduExporter</a><br>Firefox Addons: <a href="https://github.com/acgotaku/BaiduExporter" target="_blank" rel="external">BaiduExporter</a><br>UserScript: <a href="https://greasyfork.org/scripts/294-baidupandownloadhelper" target="_blank" rel="external">BaiduPanDownloadHelper</a></p>
<p>115网盘</p>
<p>Chrome Extension: <a href="https://chrome.google.com/webstore/detail/115exporter/ojafklbojgenkohhdgdjeaepnbjffdjf" target="_blank" rel="external">115exporter</a> </p>
<p>其他脚本</p>
<p>Chrome Extension</p>
<p><a href="https://chrome.google.com/webstore/detail/nimeojfecmndgolmlmjghjmbpdkhhogl" target="_blank" rel="external">添加到aria2</a><br><a href="http://git.oschina.net/yky/CDHelper" target="_blank" rel="external">Chrome Download Helper</a></p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://scateu.me/2015/02/12/aria2c-flashgot-firefox-jsonrpc.html" target="_blank" rel="external">http://scateu.me/2015/02/12/aria2c-flashgot-firefox-jsonrpc.html</a><br><a href="http://skypegnu1.blog.51cto.com/8991766/1637168" target="_blank" rel="external">http://skypegnu1.blog.51cto.com/8991766/1637168</a><br><a href="http://aria2c.com/usage.html" target="_blank" rel="external">http://aria2c.com/usage.html</a><br><a href="http://azeril.me/blog/Aria2.html" target="_blank" rel="external">http://azeril.me/blog/Aria2.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS下安装高版本GCC]]></title>
      <url>http://www.hi-linux.com/posts/25767.html</url>
      <content type="html"><![CDATA[<p>有时编译需要用到4.8以上版本的GCC,由于CentOS源没有提供高版本的GCC安装包，这时就不能通过安装包安装。通常的解决方案就是通过编译安装高版本的GCC。</p>
<p>这里介绍一个更高级、更好用、更简单的方法来升级系统GCC，本文将介绍如何利用CentOS的新特性SCL进行高版本GCC的安装。</p>
<h3 id="什么是SCL"><a href="#什么是SCL" class="headerlink" title="什么是SCL"></a>什么是SCL</h3><p>请参考:<a href="http://www.imike.me/2016/05/09/%E5%A6%82%E4%BD%95%E5%9C%A8CentOS%E4%B8%8A%E5%90%AF%E7%94%A8%E8%BD%AF%E4%BB%B6%E9%9B%86Software%20Collections/" target="_blank" rel="external">如何在CentOS上启用软件集Software Collections</a>一文<br><a id="more"></a></p>
<h3 id="通过SCL安装GCC"><a href="#通过SCL安装GCC" class="headerlink" title="通过SCL安装GCC"></a>通过SCL安装GCC</h3><h4 id="官方SCL仓库"><a href="#官方SCL仓库" class="headerlink" title="官方SCL仓库"></a>官方SCL仓库</h4><p>devtoolset-3: <a href="https://www.softwarecollections.org/en/scls/rhscl/devtoolset-3/" target="_blank" rel="external">https://www.softwarecollections.org/en/scls/rhscl/devtoolset-3/</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install centos-release-scl</div><div class="line">$ sudo yum-config-manager --enable rhel-server-rhscl-7-rpms</div><div class="line">$ sudo yum install devtoolset-3</div><div class="line">$ scl enable devtoolset-3 bash</div></pre></td></tr></table></figure>
<h4 id="三方SCL仓库"><a href="#三方SCL仓库" class="headerlink" title="三方SCL仓库"></a>三方SCL仓库</h4><p>copr.fedoraproject.org提供了第三方构建的devtoolset-3/4的仓库, 可直接添加yum源repo后体验devtoolset-3(gcc-4.9.2)、devtoolset-4(gcc-5.2.1)。</p>
<p>devtoolset-3: <a href="https://copr.fedoraproject.org/coprs/rhscl/devtoolset-3/" target="_blank" rel="external">https://copr.fedoraproject.org/coprs/rhscl/devtoolset-3/</a><br>devtoolset-4: <a href="https://copr.fedoraproject.org/coprs/hhorak/devtoolset-4-rebuild-bootstrap/" target="_blank" rel="external">https://copr.fedoraproject.org/coprs/hhorak/devtoolset-4-rebuild-bootstrap/</a></p>
<h5 id="devtoolset-3"><a href="#devtoolset-3" class="headerlink" title="devtoolset-3"></a>devtoolset-3</h5><ul>
<li>CentOS 6</li>
</ul>
<p>安装软件源</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget https://copr.fedoraproject.org/coprs/rhscl/devtoolset-3/repo/epel-6/rhscl-devtoolset-3-epel-6.repo   -O /etc/yum.repos.d/rhscl-devtoolset-3-epel-6.repo</div></pre></td></tr></table></figure>
<p>安装devtoolset-3</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ yum --disablerepo=&apos;*&apos; --enablerepo=&apos;rhscl-devtoolset-3&apos; list</div><div class="line">$ yum --disablerepo=&apos;*&apos; --enablerepo=&apos;rhscl-devtoolset-3&apos; install devtoolset-3-gcc devtoolset-3-gcc-c++</div></pre></td></tr></table></figure>
<p>启用SCL环境中新版本GCC</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scl enable devtoolset-3 bash</div></pre></td></tr></table></figure>
<p>验证GCC版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ gcc --version</div><div class="line">gcc (GCC) 4.9.2 20150212 (Red Hat 4.9.2-6)</div><div class="line">Copyright (C) 2014 Free Software Foundation, Inc.</div><div class="line">This is free software; see the source for copying conditions.  There is NO</div><div class="line">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</div></pre></td></tr></table></figure>
<ul>
<li>CentOS 7</li>
</ul>
<p>安装软件源</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget https://copr.fedoraproject.org/coprs/rhscl/devtoolset-3-el7/repo/epel-7/rhscl-devtoolset-3-el7-epel-7.repo -O /etc/yum.repos.d/rhscl-devtoolset-3-el7-epel-7.repo</div></pre></td></tr></table></figure>
<p>安装devtoolset-3</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ yum --disablerepo=&apos;*&apos; --enablerepo=&apos;rhscl-devtoolset-3-el7&apos; list</div><div class="line">$ yum --disablerepo=&apos;*&apos; --enablerepo=&apos;rhscl-devtoolset-3-el7&apos; install devtoolset-3-gcc devtoolset-3-gcc-c++</div></pre></td></tr></table></figure>
<p>启用SCL环境中新版本GCC</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scl enable devtoolset-3 bash</div></pre></td></tr></table></figure>
<p>验证GCC版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ gcc --version</div><div class="line">gcc (GCC) 4.9.2 20150212 (Red Hat 4.9.2-6)</div><div class="line">Copyright (C) 2014 Free Software Foundation, Inc.</div><div class="line">This is free software; see the source for copying conditions.  There is NO</div><div class="line">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</div></pre></td></tr></table></figure>
<h5 id="devtoolset-4仓库"><a href="#devtoolset-4仓库" class="headerlink" title="devtoolset-4仓库"></a>devtoolset-4仓库</h5><ul>
<li>CentOS 6</li>
</ul>
<p>安装软件源</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://copr.fedoraproject.org/coprs/hhorak/devtoolset-4-rebuild-bootstrap/repo/epel-6/hhorak-devtoolset-4-rebuild-bootstrap-epel-6.repo -O /etc/yum.repos.d/hhorak-devtoolset-4-rebuild-bootstrap-epel-6.repo</div></pre></td></tr></table></figure>
<p>安装devtoolset-4</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum --disablerepo=&apos;*&apos; --enablerepo=&apos;hhorak-devtoolset-4-rebuild-bootstrap&apos; list</div><div class="line">yum --disablerepo=&apos;*&apos; --enablerepo=&apos;hhorak-devtoolset-4-rebuild-bootstrap&apos; install devtoolset-4-gcc devtoolset-4-gcc-c++</div></pre></td></tr></table></figure>
<p>启用SCL环境中新版本GCC</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scl enable devtoolset-4 bash</div></pre></td></tr></table></figure>
<p>验证GCC版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gcc --version</div><div class="line">gcc (GCC) 5.2.1 20150902 (Red Hat 5.2.1-2)</div><div class="line">Copyright (C) 2015 Free Software Foundation, Inc.</div><div class="line">This is free software; see the source for copying conditions.  There is NO</div><div class="line">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</div></pre></td></tr></table></figure>
<ul>
<li>CentOS 7</li>
</ul>
<p>安装软件源</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://copr.fedoraproject.org/coprs/hhorak/devtoolset-4-rebuild-bootstrap/repo/epel-7/hhorak-devtoolset-4-rebuild-bootstrap-epel-7.repo -O /etc/yum.repos.d/hhorak-devtoolset-4-rebuild-bootstrap-epel-7.repo</div></pre></td></tr></table></figure>
<p>安装devtoolset-4</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum --disablerepo=&apos;*&apos; --enablerepo=&apos;hhorak-devtoolset-4-rebuild-bootstrap&apos; list</div><div class="line">yum --disablerepo=&apos;*&apos; --enablerepo=&apos;hhorak-devtoolset-4-rebuild-bootstrap&apos; install devtoolset-4-gcc devtoolset-4-gcc-c++</div></pre></td></tr></table></figure>
<p>启用SCL环境中新版本GCC</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scl enable devtoolset-4 bash</div></pre></td></tr></table></figure>
<p>验证GCC版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gcc --version</div><div class="line">gcc (GCC) 5.2.1 20150902 (Red Hat 5.2.1-2)</div><div class="line">Copyright (C) 2015 Free Software Foundation, Inc.</div><div class="line">This is free software; see the source for copying conditions.  There is NO</div><div class="line">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="https://www.softwarecollections.org/en/scls/rhscl/devtoolset-3/" target="_blank" rel="external">https://www.softwarecollections.org/en/scls/rhscl/devtoolset-3/</a><br><a href="http://m.blog.csdn.net/article/details?id=50474355" target="_blank" rel="external">http://m.blog.csdn.net/article/details?id=50474355</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何在CentOS上启用软件集Software Collections]]></title>
      <url>http://www.hi-linux.com/posts/62916.html</url>
      <content type="html"><![CDATA[<h3 id="什么是SCL"><a href="#什么是SCL" class="headerlink" title="什么是SCL"></a>什么是SCL</h3><p>SCL项目主页：<a href="https://www.softwarecollections.org/" target="_blank" rel="external">https://www.softwarecollections.org/</a></p>
<p>SCL(Software Collections)可以让你在同一个操作系统上安装和使用多个版本的软件，而不会影响整个系统的安装包。SCL为社区的以下需求而设计：创建和使用软件集合生产系统、概念验证系统、开发测试平台。SCL目前已经支持Fedora和RHEL(衍生版本如CentOS也包含在内)。</p>
<p>SCL的创建就是为了给RHEL/CentOS用户提供一种以方便、安全地安装和使用应用程序和运行时环境的多个(而且可能是更新的)版本的方式，同时避免把系统搞乱。与之相对的是第三方源，它们可能会在已安装的包之间引起冲突。<br><a id="more"></a></p>
<p>现有软件选集</p>
<p>现在有以下软件选集可供CentOS 6.5或以上版本应用</p>
<p>Ruby 1.9.3 (ruby193)<br>Python 2.7 (python27)<br>Python 3.3 (python33)<br>PHP 5.4 (php54)<br>Perl 5.16.3 (perl516)<br>Node.js 0.10 (nodejs010)<br>MariaDB 5.5 (mariadb55)<br>MySQL 5.5 (mysql55)<br>PostgreSQL 9.2 (postgresql92)</p>
<p>更多的软件集可参看这里：<a href="https://www.softwarecollections.org/en/scls/" target="_blank" rel="external">https://www.softwarecollections.org/en/scls/</a></p>
<h3 id="安装SCL"><a href="#安装SCL" class="headerlink" title="安装SCL"></a>安装SCL</h3><p>在CentOS下访问SCL，需要安装CentOS Software Collections。它是CentOS Extras软件库的一部份，并可通过以下指命进行安装</p>
<p>Centos 7</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install centos-release-scl</div></pre></td></tr></table></figure>
<p>Centos 6</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install centos-release-SCL</div></pre></td></tr></table></figure>
<p>注意：Centos6和Centos7的包名是区分大小写的！</p>
<p>要启用和运行SCL中的应用，你还需要安装下列包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install scl-utils scl-utils-build</div></pre></td></tr></table></figure>
<h3 id="SCL的设置及启用"><a href="#SCL的设置及启用" class="headerlink" title="SCL的设置及启用"></a>SCL的设置及启用</h3><p>SCL设置步骤非常简单</p>
<h4 id="SCL语法"><a href="#SCL语法" class="headerlink" title="SCL语法"></a>SCL语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ scl --help</div><div class="line">usage: scl &lt;action&gt; [&lt;collection&gt;...] &lt;command&gt;</div><div class="line">   or: scl -l|--list [&lt;collection&gt;...]</div><div class="line">   or: scl register &lt;path&gt;</div><div class="line">   or: scl deregister &lt;collection&gt; [--force]</div><div class="line"></div><div class="line">Options:</div><div class="line">    -l, --list            list installed Software Collections or packages</div><div class="line">                          that belong to them</div><div class="line">    -h, --help            display this help and exit</div><div class="line"></div><div class="line">Actions:</div><div class="line">    enable                calls enable script from Software Collection</div><div class="line">                          (enables a Software Collection)</div><div class="line">    &lt;SCL script name&gt;     calls arbitrary script from a Software Collection</div></pre></td></tr></table></figure>
<h4 id="浏览可用的版本"><a href="#浏览可用的版本" class="headerlink" title="浏览可用的版本"></a>浏览可用的版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ yum list available | grep scl</div><div class="line">$ yum --disablerepo=&quot;*&quot; --enablerepo=&quot;*scl*&quot; list available</div></pre></td></tr></table></figure>
<h4 id="搜索SCL中的包"><a href="#搜索SCL中的包" class="headerlink" title="搜索SCL中的包"></a>搜索SCL中的包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum --disablerepo=&quot;*&quot; --enablerepo=&quot;*scl*&quot; search &lt;keyword&gt;</div></pre></td></tr></table></figure>
<h4 id="启用一个已经安装的SCL包"><a href="#启用一个已经安装的SCL包" class="headerlink" title="启用一个已经安装的SCL包"></a>启用一个已经安装的SCL包</h4><p>需要在每个命令中使用scl命令显式启用它(即想在哪条命令中使用SCL中的包，就得通过scl命令执行该命令)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scl enable &lt;scl-package-name&gt; &lt;command&gt;</div></pre></td></tr></table></figure>
<p>如果想在启用的包时执行多条命令，你可以像下面那样创建一个启用SCL的bash会话</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scl enable &lt;scl-package-name&gt; bash</div></pre></td></tr></table></figure>
<h3 id="SCL使用实例"><a href="#SCL使用实例" class="headerlink" title="SCL使用实例"></a>SCL使用实例</h3><ul>
<li>以要安装Python 3.3为例</li>
</ul>
<h4 id="安装Python集合"><a href="#安装Python集合" class="headerlink" title="安装Python集合"></a>安装Python集合</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install python33-*</div></pre></td></tr></table></figure>
<h4 id="查看从SCL中安装的包的列表"><a href="#查看从SCL中安装的包的列表" class="headerlink" title="查看从SCL中安装的包的列表"></a>查看从SCL中安装的包的列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ scl --list</div><div class="line">python33</div></pre></td></tr></table></figure>
<p>在安装python33包后检查默认的python版本，你会发现默认的版本并没有改变</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python --version</div><div class="line">Python 2.6.6</div></pre></td></tr></table></figure>
<p>SCL的优点之一就是安装其中的包不会覆盖任何系统文件，并且保证不会引起与系统中其它库和应用的冲突。</p>
<h4 id="开始使用SCL"><a href="#开始使用SCL" class="headerlink" title="开始使用SCL"></a>开始使用SCL</h4><p>你可以使用以下三种方法来启用SCL</p>
<h5 id="运行一个命令"><a href="#运行一个命令" class="headerlink" title="运行一个命令"></a>运行一个命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scl enable python33 ./hello.py</div></pre></td></tr></table></figure>
<h5 id="启动一个会话"><a href="#启动一个会话" class="headerlink" title="启动一个会话"></a>启动一个会话</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scl enable python33 bash</div></pre></td></tr></table></figure>
<ul>
<li>以要安装Apache 2.4为例</li>
</ul>
<h4 id="安装Apache集合"><a href="#安装Apache集合" class="headerlink" title="安装Apache集合"></a>安装Apache集合</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install httpd24*</div></pre></td></tr></table></figure>
<h4 id="启动一个服务器"><a href="#启动一个服务器" class="headerlink" title="启动一个服务器"></a>启动一个服务器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ chkconfig httpd24-httpd on</div><div class="line">$ /etc/init.d/httpd24-httpd start</div></pre></td></tr></table></figure>
<p>更详细的SCL指南，参考官方的<a href="https://www.softwarecollections.org/en/docs/" target="_blank" rel="external">快速入门指南</a></p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://xmodulo.com/enable-software-collections-centos.html" target="_blank" rel="external">http://xmodulo.com/enable-software-collections-centos.html</a><br><a href="https://linux.cn/article-6776-1.html" target="_blank" rel="external">https://linux.cn/article-6776-1.html</a><br><a href="https://wiki.centos.org/zh/AdditionalResources/Repositories/SCL" target="_blank" rel="external">https://wiki.centos.org/zh/AdditionalResources/Repositories/SCL</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[让Windows用上OMZ的神器Babun]]></title>
      <url>http://www.hi-linux.com/posts/57246.html</url>
      <content type="html"><![CDATA[<h3 id="什么是babun"><a href="#什么是babun" class="headerlink" title="什么是babun"></a>什么是babun</h3><p>babun是windows上的一个第三方shell，在这个shell上面你可以使用几乎所有linux，unix上面的命令，他几乎可以取代windows的shell。用官方的题目说就是A Windows shell you will love!</p>
<p><img src="http://www.hi-linux.com/img/linux/screen_zsh_update.png" alt=""><br><a id="more"></a></p>
<blockquote>
<p>babun的几个特点</p>
<p>使用babun无需管理员权限<br>先进的安装包管理器(类似于linux上面的apt-get或yum)<br>预先配置了Cygwin和很多插件<br>拥有256色的兼容控制台<br>HTTP(S)的代理支持<br>面向插件的体系结构<br>可以使用它来配置你的git<br>集成了oh-my-zsh<br>自动升级<br>支持shell编程，内置VIM等</p>
<p>Cygwin</p>
<p>babun的核心包括一个预配置的Cygwin。cygwin是一个非常好的工具，但有很多使用技巧，使你能够节省大量的时间。babun解决了很多问题，它里面包含了很多重要的软件包，是你能够第一时间能够使用它们。</p>
<p>包的管理：<br>babun的包管理在shell输入：pact，这类似于：apt-get或yum，来非常方便的管理软件包，安装、升级、搜索和删除，让你省区很多麻烦，shell输入pact –help能够获得帮助信息。</p>
<p>shell</p>
<p>babun的shell通过调整，已达到最佳的用户体验，babun有两个配置之后马上使用的shell(默认使用zsh)，babun的shell具有以下的特点</p>
<p>语法高亮<br>具有unix的工具<br>软件开发工具<br>git-语义提示<br>自定义脚本和别名<br>等等………</p>
<p>Console</p>
<p>babun支持HTTP代理，只需添加地址和HTTP代理服务器的凭据。babunrc文件所在文件夹执行源babunrc启用HTTP代理。目前还不支持SOCKS代理。</p>
<p>开发者工具</p>
<p>babun提供多种方便的工具和脚本，是你的开发工作更轻松，具有的功能如下</p>
<p>编程语言(python,Perl, etc等)<br>git(各种各样的别名调整)<br>UNIX工具((grep, wget, curl, etc)<br>vcs (svn, git)<br>oh-my-zsh<br>自定义脚本(pbcopy, pbpaste, babun, etc)</p>
</blockquote>
<p>babun官网链接：<a href="http://babun.github.io/" target="_blank" rel="external">http://babun.github.io/</a></p>
<h3 id="什么是cmder"><a href="#什么是cmder" class="headerlink" title="什么是cmder"></a>什么是cmder</h3><p>cmder是window下的多标签命令行工具，可以方便的新建cmd、cmd admin、powershell、powershell admin多种命令行，设置很多，功能强大。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="cmder安装"><a href="#cmder安装" class="headerlink" title="cmder安装"></a>cmder安装</h4><p>下载：<a href="http://cmder.net/" target="_blank" rel="external">http://cmder.net/</a></p>
<p>cmder是开箱即用的软件就不在详述了，具体使用可参考官网说明。</p>
<h4 id="babun安装"><a href="#babun安装" class="headerlink" title="babun安装"></a>babun安装</h4><p>下载：<a href="http://babun.github.io/" target="_blank" rel="external">http://babun.github.io/</a></p>
<h5 id="默认安装"><a href="#默认安装" class="headerlink" title="默认安装"></a>默认安装</h5><p>下载完成之后解压babun，直接双击目录中install.bat脚本(需管理员权限)进行安装。几分钟之后自动安装完成，默认会被安装在<code>%userprofile%\.babun</code>目录下。</p>
<h5 id="自定义安装位置"><a href="#自定义安装位置" class="headerlink" title="自定义安装位置"></a>自定义安装位置</h5><p>通过cmd命令行在执行install.bat时指定参数/t或/target指定安装的目录。</p>
<p>执行：<code>babun.bat /t c:\babun</code></p>
<p>安装好之后会在c:\babun目录下生成一个.babun的目录，babun所有文件都在这个目录中。注意安装目录最好不要有空格，这是cygwin要求的。</p>
<h5 id="测试安装成功"><a href="#测试安装成功" class="headerlink" title="测试安装成功"></a>测试安装成功</h5><p>安装完毕后，一般需要以下两个命令检查</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">babun check(用于判断环境是否正确)</div><div class="line">babun update(用于判断是否有新的更新包)</div></pre></td></tr></table></figure>
<h3 id="Babun配置"><a href="#Babun配置" class="headerlink" title="Babun配置"></a>Babun配置</h3><p>默认根目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%userprofile%\.babun\cygwin\home\Mike</div></pre></td></tr></table></figure>
<h4 id="windows-cmd内置命令显示中文"><a href="#windows-cmd内置命令显示中文" class="headerlink" title="windows cmd内置命令显示中文"></a>windows cmd内置命令显示中文</h4><p>babun默认编码是UTF-8的，而windows的cmd命令输出是GBK编码的，所以在Babun里面运行ipconfig等windows命令时，中文会是一大堆乱码。</p>
<p><img src="http://www.hi-linux.com/img/linux/ipconfig-error1.png" alt=""></p>
<p>解决：在babun自带的shell(mintty)右上角右键options-text,在character set选择default或者GBK,之后执行ipconfig等cmd内置的命令时就正常显示中文了。</p>
<p>如果把Babun的编码改成GBK的话，命令的中文输出倒是正常了，PS1却会出现一个乱码字符，如图</p>
<p><img src="http://www.hi-linux.com/img/linux/ipconfig-error2.jpg" alt=""></p>
<p>去掉命令提示符乱码</p>
<p>babun内置两个shell，默认是zsh,另一个是bash,设置成中文后命令提示符最后会有一个乱码字符，看着很不爽，要修改PS1变量去掉。把乱码字符替换为：&gt;&gt;</p>
<p>bash</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vi /usr/local/etc/babun.bash</div><div class="line">PS1=&quot;\[\033[00;34m\]&#123; \[\033[01;34m\]\W \[\033[00;34m\]&#125;\[\033[01;32m\] \$( git rev-parse --abbrev-ref HEAD 2&gt; /dev/null || echo &quot;&quot; ) \[\033[01;31m\]&gt;&gt;\[\033[00m\]&quot;</div></pre></td></tr></table></figure>
<p>zsh</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vi ~/.oh-my-zsh/custom/babun.zsh-theme</div><div class="line"></div><div class="line">PROMPT=&apos;%&#123;$fg[blue]%&#125;&#123; %c &#125; \</div><div class="line">%&#123;$fg[green]%&#125;$(  git rev-parse --abbrev-ref HEAD 2&gt; /dev/null || echo &quot;&quot;  )%&#123;$reset_color%&#125; \</div><div class="line">%&#123;$fg[red]%&#125;%(!.#.&gt;&gt;)%&#123;$reset_color%&#125; &apos;</div></pre></td></tr></table></figure>
<p>这样改好后命令提示符就变成： <code>{ ~ } &gt;&gt;</code></p>
<p><strong>注：将编码修改成GBK后，ls命令中文文件名的会出现乱码。最好在Babun环境中使用UTF-8编码，ipconfig等windows指令用cmder或默认cmd执行就行了。</strong></p>
<h4 id="将Babun整合到ConEmu-cmder"><a href="#将Babun整合到ConEmu-cmder" class="headerlink" title="将Babun整合到ConEmu/cmder"></a>将Babun整合到ConEmu/cmder</h4><p>在cmder窗口右上角右键Settings&gt;Startup&gt;Tasks,点+号添加一个新task，命名为babun。            </p>
<p>在Task parameters中填入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/icon &quot;%userprofile%\.babun\cygwin\bin\mintty.exe&quot; /dir &quot;%userprofile%&quot;</div></pre></td></tr></table></figure>
<p>在Commands中填入以下任意一种都可以</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#默认使用ZSH</div><div class="line">%userprofile%\.babun\cygwin\bin\mintty.exe /bin/env CHERE_INVOKING=1 /bin/zsh.exe</div><div class="line"></div><div class="line">#使用自定义mintty配置</div><div class="line">%userprofile%\.babun\cygwin\bin\mintty.exe -t &quot;%userprofile%\.babun\cygwin\etc\minttyrc&quot;</div></pre></td></tr></table></figure>
<p>保存后,建立一个新终端时选Babun就可用了。</p>
<h4 id="配置个性化的mintty"><a href="#配置个性化的mintty" class="headerlink" title="配置个性化的mintty"></a>配置个性化的mintty</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">vim ~/.minttyrc</div><div class="line"></div><div class="line">CursorType=block</div><div class="line">Term=xterm-256color</div><div class="line">Font=Source Code Pro Semibold</div><div class="line">FontHeight=10</div></pre></td></tr></table></figure>
<h4 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h4><p>pip</p>
<p>Babun内置了Python、Perl等解释器。cygwin自带的python没有pip,需手动安装。</p>
<p>直接执行下面这个命令就好了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://bootstrap.pypa.io/get-pip.py -O - | python</div></pre></td></tr></table></figure>
<p>有了pip就可以自由的安装诸如ipython之类的东西，还有包罗万象的类库。</p>
<h4 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h4><p>Babun默认是安装了Oh My ZSH的，这里可以根据自身情况安装一些插件。具体可参考<a href="http://www.imike.me/2016/04/28/%E5%88%A9%E7%94%A8Oh-My-Zsh%E6%89%93%E9%80%A0%E4%BD%A0%E7%9A%84%E8%B6%85%E7%BA%A7%E7%BB%88%E7%AB%AF/" target="_blank" rel="external">利用Oh-My-Zsh打造你的超级终端</a>一文</p>
<h3 id="包管理器使用"><a href="#包管理器使用" class="headerlink" title="包管理器使用"></a>包管理器使用</h3><p>babun提供一个叫pact包管理工具，类似于linux上面的apt-get或yum的包管理工具。</p>
<p>pact使用语法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">pact: Installs and removes Cygwin packages.</div><div class="line"></div><div class="line">Usage:</div><div class="line">  &quot;pact install &lt;package names&gt;&quot; to install given packages</div><div class="line">  &quot;pact remove &lt;package names&gt;&quot; to remove given packages</div><div class="line">  &quot;pact update &lt;package names&gt;&quot; to update given packages</div><div class="line">  &quot;pact show&quot; to show installed packages</div><div class="line">  &quot;pact find &lt;patterns&gt;&quot; to find packages matching patterns</div><div class="line">  &quot;pact describe &lt;patterns&gt;&quot; to describe packages matching patterns</div><div class="line">  &quot;pact packageof &lt;commands or files&gt;&quot; to locate parent packages</div><div class="line">  &quot;pact invalidate&quot; to invalidate pact caches (setup.ini, etc.)</div><div class="line">Options:</div><div class="line">  --mirror, -m &lt;url&gt; : set mirror</div><div class="line">  --invalidate, -i       : invalidates pact caches (setup.ini, etc.)</div><div class="line">  --force, -f : force the execution</div><div class="line">  --help</div><div class="line">  --version</div></pre></td></tr></table></figure>
<p>pact使用比较简单，不在详述了！</p>
<p>常用软件安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">#安装tmux</div><div class="line">pact install tmux        </div><div class="line"></div><div class="line">#安装screen</div><div class="line">pact install screen</div><div class="line"></div><div class="line">#安装zip</div><div class="line">pact install zip</div><div class="line"></div><div class="line">#安装svn</div><div class="line">pact install subversion</div><div class="line"></div><div class="line">#安装lftp命令</div><div class="line">pact install lftp</div><div class="line"></div><div class="line">#安装p7zip命令</div><div class="line">pact install p7zip</div><div class="line"></div><div class="line">#基于openssh的socks https代理</div><div class="line">pact install connect-proxy</div><div class="line"></div><div class="line">#安装linux基础命令行工具more/col/whereis等命令</div><div class="line">pact install util-linux    </div><div class="line"></div><div class="line">#安装dig命令</div><div class="line">pact install bind-utils</div><div class="line"></div><div class="line">#安装Telnet等常用网络命令</div><div class="line">pact install inetutils  </div><div class="line"></div><div class="line">#安装python环境</div><div class="line">pact install python        </div><div class="line">pact install python-crypto</div></pre></td></tr></table></figure>
<p>这个包管理很方便，用法也简单，按照自己需要安装吧!</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Babun虽然没有多少技术创新，但是它博采众长，追求极致的体验，把其他同类软件狠狠的甩在了后面。Babun是近年来最好的在Windows下使用Linux Shell的一站式解决方案。</p>
<p>无论是被迫使用Windows的Linuxer，还是离不开Windows却又羡慕Linux下强大的命令行工具的PC用户，Babun都是一个不容错过的好东西，相信你们会爱上它的。</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://babun.github.io/" target="_blank" rel="external">http://babun.github.io/</a><br><a href="http://www.cnblogs.com/Leekin/p/4830868.html" target="_blank" rel="external">http://www.cnblogs.com/Leekin/p/4830868.html</a><br><a href="http://0x0d.im/archives/windows-build-linux-like-environment.html" target="_blank" rel="external">http://0x0d.im/archives/windows-build-linux-like-environment.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[代码统计利器CLOC]]></title>
      <url>http://www.hi-linux.com/posts/4004.html</url>
      <content type="html"><![CDATA[<p>软件开发过程中，有时候需要进行代码统计，比如在申请软件著作权的时候需要进行代码统计进而提供程序源码数据。本文给大家介绍一个开源代码统计工具Cloc，以供参考。</p>
<h3 id="Cloc简介"><a href="#Cloc简介" class="headerlink" title="Cloc简介"></a>Cloc简介</h3><p>Cloc是一款使用Perl语言开发的开源代码统计工具，支持多平台使用、多语言识别，能够计算指定目标文件或文件夹中的文件数(files)、空白行数(blank)、注释行数(comment)和代码行数(code)。<br><a id="more"></a></p>
<p>Cloc特性</p>
<blockquote>
<p>Cloc具备很多特性以致于让它更方便于使用、完善、拓展和便携。<br>作为一个单一的独立形式存在的文件，Cloc只需要下载相应文件并运行这样最少的安装工作即可。<br>能够从源码文件中识别编程语言注释定义；<br>允许通过语言和项目来分开统计计算；<br>能够以纯文本、SQL、XML、YAML、逗号分隔等多样化的格式生成统计结果；<br>能够统计诸如tar、Zip等格式的压缩文件中的代码数；<br>有许多排除式的指令；<br>能够使用空格或者不常用的字符处理文件名和目录名；<br>不需要依赖外部标准的Perl语言配置；<br>支持多平台使用。</p>
</blockquote>
<p>官网地址：<a href="http://cloc.sourceforge.net/" target="_blank" rel="external">http://cloc.sourceforge.net/</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">npm install -g cloc                    # https://www.npmjs.com/package/cloc</div><div class="line">sudo apt-get install cloc              # Debian, Ubuntu</div><div class="line">sudo yum install cloc                  # Red Hat, Fedora</div><div class="line">sudo pacman -S cloc                    # Arch</div><div class="line">sudo pkg install cloc                  # FreeBSD</div><div class="line">sudo port install cloc                 # Mac OS X with MacPorts</div></pre></td></tr></table></figure>
<p>Cloc也有windows版本，需自行下载。</p>
<p>下载地址：<a href="https://sourceforge.net/projects/cloc/" target="_blank" rel="external">https://sourceforge.net/projects/cloc/</a></p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>通过<code>cloc --help</code>查看更多命令的使用语法，在帮助中有详细的说明。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div></pre></td><td class="code"><pre><div class="line">$ cloc --help                                    </div><div class="line"></div><div class="line">Usage: cloc [options] &lt;file(s)/dir(s)&gt; | &lt;set 1&gt; &lt;set 2&gt; | &lt;report files&gt;</div><div class="line"></div><div class="line"> Count, or compute differences of, physical lines of source code in the</div><div class="line"> given files (may be archives such as compressed tarballs or zip files)</div><div class="line"> and/or recursively below the given directories.</div><div class="line"></div><div class="line"> Input Options</div><div class="line">   --extract-with=&lt;cmd&gt;      This option is only needed if cloc is unable</div><div class="line">                             to figure out how to extract the contents of</div><div class="line">                             the input file(s) by itself.</div><div class="line">                             Use &lt;cmd&gt; to extract binary archive files (e.g.:</div><div class="line">                             .tar.gz, .zip, .Z).  Use the literal &apos;&gt;FILE&lt;&apos; as</div><div class="line">                             a stand-in for the actual file(s) to be</div><div class="line">                             extracted.  For example, to count lines of code</div><div class="line">                             in the input files</div><div class="line">                                gcc-4.2.tar.gz  perl-5.8.8.tar.gz</div><div class="line">                             on Unix use</div><div class="line">                               --extract-with=&apos;gzip -dc &gt;FILE&lt; | tar xf -&apos;</div><div class="line">                             or, if you have GNU tar,</div><div class="line">                               --extract-with=&apos;tar zxf &gt;FILE&lt;&apos;</div><div class="line">                             and on Windows use, for example:</div><div class="line">                               --extract-with=&quot;\&quot;c:\Program Files\WinZip\WinZip32.exe\&quot; -e -o &gt;FILE&lt; .&quot;</div><div class="line">                             (if WinZip is installed there).</div><div class="line">   --list-file=&lt;file&gt;        Take the list of file and/or directory names to</div><div class="line">                             process from &lt;file&gt; which has one file/directory</div><div class="line">                             name per line.  See also --exclude-list-file.</div><div class="line">   --unicode                 Check binary files to see if they contain Unicode</div><div class="line">                             expanded ASCII text.  This causes performance to</div><div class="line">                             drop noticably.</div><div class="line"></div><div class="line"> Processing Options</div><div class="line">   --autoconf                Count .in files (as processed by GNU autoconf) of</div><div class="line">                             recognized languages.</div><div class="line">   --by-file                 Report results for every source file encountered.</div><div class="line">   --by-file-by-lang         Report results for every source file encountered</div><div class="line">                             in addition to reporting by language.</div><div class="line">   --diff &lt;set1&gt; &lt;set2&gt;      Compute differences in code and comments between</div><div class="line">                             source file(s) of &lt;set1&gt; and &lt;set2&gt;.  The inputs</div><div class="line">                             may be pairs of files, directories, or archives.</div><div class="line">                             Use --diff-alignment to generate a list showing</div><div class="line">                             which file pairs where compared.  See also</div><div class="line">                             --ignore-case, --ignore-whitespace.</div><div class="line">   --diff-timeout &lt;N&gt;        Ignore files which take more than &lt;N&gt; seconds</div><div class="line">                             to process.  Default is 10 seconds.</div><div class="line">                             (Large files with many repeated lines can cause </div><div class="line">                             Algorithm::Diff::sdiff() to take hours.)</div><div class="line">   --follow-links            [Unix only] Follow symbolic links to directories</div><div class="line">                             (sym links to files are always followed).</div><div class="line">   --force-lang=&lt;lang&gt;[,&lt;ext&gt;]</div><div class="line">                             Process all files that have a &lt;ext&gt; extension</div><div class="line">                             with the counter for language &lt;lang&gt;.  For</div><div class="line">                             example, to count all .f files with the</div><div class="line">                             Fortran 90 counter (which expects files to</div><div class="line">                             end with .f90) instead of the default Fortran 77</div><div class="line">                             counter, use</div><div class="line">                               --force-lang=&quot;Fortran 90&quot;,f</div><div class="line">                             If &lt;ext&gt; is omitted, every file will be counted</div><div class="line">                             with the &lt;lang&gt; counter.  This option can be</div><div class="line">                             specified multiple times (but that is only</div><div class="line">                             useful when &lt;ext&gt; is given each time).</div><div class="line">                             See also --script-lang, --lang-no-ext.</div><div class="line">   --force-lang-def=&lt;file&gt;   Load language processing filters from &lt;file&gt;,</div><div class="line">                             then use these filters instead of the built-in</div><div class="line">                             filters.  Note:  languages which map to the same </div><div class="line">                             file extension (for example:</div><div class="line">                             MATLAB/Objective C/MUMPS;  Pascal/PHP; </div><div class="line">                             Lisp/OpenCL) will be ignored as these require </div><div class="line">                             additional processing that is not expressed in </div><div class="line">                             language definition files.  Use --read-lang-def </div><div class="line">                             to define new language filters without replacing </div><div class="line">                             built-in filters (see also --write-lang-def).</div><div class="line">   --ignore-whitespace       Ignore horizontal white space when comparing files</div><div class="line">                             with --diff.  See also --ignore-case.</div><div class="line">   --ignore-case             Ignore changes in case; consider upper- and lower-</div><div class="line">                             case letters equivalent when comparing files with</div><div class="line">                             --diff.  See also --ignore-whitespace.</div><div class="line">   --lang-no-ext=&lt;lang&gt;      Count files without extensions using the &lt;lang&gt;</div><div class="line">                             counter.  This option overrides internal logic</div><div class="line">                             for files without extensions (where such files</div><div class="line">                             are checked against known scripting languages</div><div class="line">                             by examining the first line for #!).  See also</div><div class="line">                             --force-lang, --script-lang.</div><div class="line">   --read-binary-files       Process binary files in addition to text files.</div><div class="line">                             This is usually a bad idea and should only be</div><div class="line">                             attempted with text files that have embedded</div><div class="line">                             binary data.</div><div class="line">   --read-lang-def=&lt;file&gt;    Load new language processing filters from &lt;file&gt;</div><div class="line">                             and merge them with those already known to cloc.  </div><div class="line">                             If &lt;file&gt; defines a language cloc already knows </div><div class="line">                             about, cloc&apos;s definition will take precedence.  </div><div class="line">                             Use --force-lang-def to over-ride cloc&apos;s </div><div class="line">                             definitions (see also --write-lang-def ).</div><div class="line">   --script-lang=&lt;lang&gt;,&lt;s&gt;  Process all files that invoke &lt;s&gt; as a #!</div><div class="line">                             scripting language with the counter for language</div><div class="line">                             &lt;lang&gt;.  For example, files that begin with</div><div class="line">                                #!/usr/local/bin/perl5.8.8</div><div class="line">                             will be counted with the Perl counter by using</div><div class="line">                                --script-lang=Perl,perl5.8.8</div><div class="line">                             The language name is case insensitive but the</div><div class="line">                             name of the script language executable, &lt;s&gt;,</div><div class="line">                             must have the right case.  This option can be</div><div class="line">                             specified multiple times.  See also --force-lang,</div><div class="line">                             --lang-no-ext.</div><div class="line">   --sdir=&lt;dir&gt;              Use &lt;dir&gt; as the scratch directory instead of</div><div class="line">                             letting File::Temp chose the location.  Files</div><div class="line">                             written to this location are not removed at</div><div class="line">                             the end of the run (as they are with File::Temp).</div><div class="line">   --skip-uniqueness         Skip the file uniqueness check.  This will give</div><div class="line">                             a performance boost at the expense of counting</div><div class="line">                             files with identical contents multiple times</div><div class="line">                             (if such duplicates exist).</div><div class="line">   --stdin-name=&lt;file&gt;       Give a file name to use to determine the language</div><div class="line">                             for standard input.</div><div class="line">   --strip-comments=&lt;ext&gt;    For each file processed, write to the current</div><div class="line">                             directory a version of the file which has blank</div><div class="line">                             lines and comments removed.  The name of each</div><div class="line">                             stripped file is the original file name with</div><div class="line">                             .&lt;ext&gt; appended to it.  It is written to the</div><div class="line">                             current directory unless --original-dir is on.</div><div class="line">   --original-dir            [Only effective in combination with</div><div class="line">                             --strip-comments]  Write the stripped files</div><div class="line">                             to the same directory as the original files.</div><div class="line">   --sum-reports             Input arguments are report files previously</div><div class="line">                             created with the --report-file option.  Makes</div><div class="line">                             a cumulative set of results containing the</div><div class="line">                             sum of data from the individual report files.</div><div class="line">   --unix                    Override the operating system autodetection</div><div class="line">                             logic and run in UNIX mode.  See also</div><div class="line">                             --windows, --show-os.</div><div class="line">   --windows                 Override the operating system autodetection</div><div class="line">                             logic and run in Microsoft Windows mode.</div><div class="line">                             See also --unix, --show-os.</div><div class="line"></div><div class="line"> Filter Options</div><div class="line">   --exclude-dir=&lt;D1&gt;[,D2,]  Exclude the given comma separated directories</div><div class="line">                             D1, D2, D3, et cetera, from being scanned.  For</div><div class="line">                             example  --exclude-dir=.cache,test  will skip</div><div class="line">                             all files that have /.cache/ or /test/ as part</div><div class="line">                             of their path.</div><div class="line">                             Directories named .bzr, .cvs, .hg, .git, and</div><div class="line">                             .svn are always excluded.</div><div class="line">   --exclude-ext=&lt;ext1&gt;[,&lt;ext2&gt;[...]]</div><div class="line">                             Do not count files having the given file name</div><div class="line">                             extensions.</div><div class="line">   --exclude-lang=&lt;L1&gt;[,L2,] Exclude the given comma separated languages</div><div class="line">                             L1, L2, L3, et cetera, from being counted.</div><div class="line">   --exclude-list-file=&lt;file&gt;  Ignore files and/or directories whose names</div><div class="line">                             appear in &lt;file&gt;.  &lt;file&gt; should have one entry</div><div class="line">                             per line.  Relative path names will be resolved</div><div class="line">                             starting from the directory where cloc is</div><div class="line">                             invoked.  See also --list-file.</div><div class="line">   --match-d=&lt;regex&gt;         Only count files in directories matching the Perl</div><div class="line">                             regex.  For example</div><div class="line">                               --match-d=&apos;/(src|include)/&apos;</div><div class="line">                             only counts files in directories containing</div><div class="line">                             /src/ or /include/.</div><div class="line">   --not-match-d=&lt;regex&gt;     Count all files except those in directories</div><div class="line">                             matching the Perl regex.</div><div class="line">   --match-f=&lt;regex&gt;         Only count files whose basenames match the Perl</div><div class="line">                             regex.  For example</div><div class="line">                               --match-f=&apos;^[Ww]idget&apos;</div><div class="line">                             only counts files that start with Widget or widget.</div><div class="line">   --not-match-f=&lt;regex&gt;     Count all files except those whose basenames</div><div class="line">                             match the Perl regex.</div><div class="line">   --skip-archive=&lt;regex&gt;    Ignore files that end with the given Perl regular</div><div class="line">                             expression.  For example, if given</div><div class="line">                               --skip-archive=&apos;(zip|tar(.(gz|Z|bz2|xz|7z))?)&apos;</div><div class="line">                             the code will skip files that end with .zip,</div><div class="line">                             .tar, .tar.gz, .tar.Z, .tar.bz2, .tar.xz, and</div><div class="line">                             .tar.7z.</div><div class="line">   --skip-win-hidden         On Windows, ignore hidden files.</div><div class="line"></div><div class="line"> Debug Options</div><div class="line">   --categorized=&lt;file&gt;      Save names of categorized files to &lt;file&gt;.</div><div class="line">   --counted=&lt;file&gt;          Save names of processed source files to &lt;file&gt;.</div><div class="line">   --diff-alignment=&lt;file&gt;   Write to &lt;file&gt; a list of files and file pairs</div><div class="line">                             showing which files were added, removed, and/or</div><div class="line">                             compared during a run with --diff.  This switch</div><div class="line">                             forces the --diff mode on.</div><div class="line">   --help                    Print this usage information and exit.</div><div class="line">   --found=&lt;file&gt;            Save names of every file found to &lt;file&gt;.</div><div class="line">   --ignored=&lt;file&gt;          Save names of ignored files and the reason they</div><div class="line">                             were ignored to &lt;file&gt;.</div><div class="line">   --print-filter-stages     Print to STDOUT processed source code before and</div><div class="line">                             after each filter is applied.</div><div class="line">   --show-ext[=&lt;ext&gt;]        Print information about all known (or just the</div><div class="line">                             given) file extensions and exit.</div><div class="line">   --show-lang[=&lt;lang&gt;]      Print information about all known (or just the</div><div class="line">                             given) languages and exit.</div><div class="line">   --show-os                 Print the value of the operating system mode</div><div class="line">                             and exit.  See also --unix, --windows.</div><div class="line">   -v[=&lt;n&gt;]                  Verbose switch (optional numeric value).</div><div class="line">   --version                 Print the version of this program and exit.</div><div class="line">   --write-lang-def=&lt;file&gt;   Writes to &lt;file&gt; the language processing filters</div><div class="line">                             then exits.  Useful as a first step to creating</div><div class="line">                             custom language definitions (see also</div><div class="line">                             --force-lang-def, --read-lang-def).</div><div class="line"></div><div class="line"> Output Options</div><div class="line">   --3                       Print third-generation language output.</div><div class="line">                             (This option can cause report summation to fail</div><div class="line">                             if some reports were produced with this option</div><div class="line">                             while others were produced without it.)</div><div class="line">   --progress-rate=&lt;n&gt;       Show progress update after every &lt;n&gt; files are</div><div class="line">                             processed (default &lt;n&gt;=100).  Set &lt;n&gt; to 0 to</div><div class="line">                             suppress progress output (useful when redirecting</div><div class="line">                             output to STDOUT).</div><div class="line">   --quiet                   Suppress all information messages except for</div><div class="line">                             the final report.</div><div class="line">   --report-file=&lt;file&gt;      Write the results to &lt;file&gt; instead of STDOUT.</div><div class="line">   --out=&lt;file&gt;              Synonym for --report-file=&lt;file&gt;.</div><div class="line">   --csv                     Write the results as comma separated values.</div><div class="line">   --csv-delimiter=&lt;C&gt;       Use the character &lt;C&gt; as the delimiter for comma</div><div class="line">                             separated files instead of ,.  This switch forces</div><div class="line">                             --csv to be on.</div><div class="line">   --sql=&lt;file&gt;              Write results as SQL create and insert statements</div><div class="line">                             which can be read by a database program such as</div><div class="line">                             SQLite.  If &lt;file&gt; is -, output is sent to STDOUT.</div><div class="line">   --sql-project=&lt;name&gt;      Use &lt;name&gt; as the project identifier for the</div><div class="line">                             current run.  Only valid with the --sql option.</div><div class="line">   --sql-append              Append SQL insert statements to the file specified</div><div class="line">                             by --sql and do not generate table creation</div><div class="line">                             statements.  Only valid with the --sql option.</div><div class="line">   --sum-one                 For plain text reports, show the SUM: output line</div><div class="line">                             even if only one input file is processed.</div><div class="line">   --xml                     Write the results in XML.</div><div class="line">   --xsl=&lt;file&gt;              Reference &lt;file&gt; as an XSL stylesheet within</div><div class="line">                             the XML output.  If &lt;file&gt; is 1 (numeric one),</div><div class="line">                             writes a default stylesheet, cloc.xsl (or</div><div class="line">                             cloc-diff.xsl if --diff is also given).</div><div class="line">                             This switch forces --xml on.</div><div class="line">   --yaml                    Write the results in YAML.</div></pre></td></tr></table></figure>
<p><strong>统计目录下代码行数</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$ cloc ngrok</div><div class="line"></div><div class="line">cloc  ngrok</div><div class="line">      71 text files.</div><div class="line">      71 unique files.                              </div><div class="line">      49 files ignored.</div><div class="line"></div><div class="line">http://cloc.sourceforge.net v 1.58  T=0.5 s (118.0 files/s, 15258.0 lines/s)</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">Language                     files          blank        comment           code</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">Go                              46            851            452           3862</div><div class="line">Javascript                       8            152            162           1049</div><div class="line">CSS                              2              0              9            865</div><div class="line">HTML                             1             13              6            143</div><div class="line">make                             1             15              0             37</div><div class="line">YAML                             1              1              0             12</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">SUM:                            59           1032            629           5968</div><div class="line">-------------------------------------------------------------------------------</div></pre></td></tr></table></figure>
<p><strong>统计压缩包代码行数</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ cloc htop-2.0.0.tar.gz </div><div class="line">     174 text files.</div><div class="line">     166 unique files.                                          </div><div class="line">      11 files ignored.</div><div class="line"></div><div class="line">http://cloc.sourceforge.net v 1.58  T=0.5 s (322.0 files/s, 117496.0 lines/s)</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">Language                     files          blank        comment           code</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">Bourne Shell                     9           3591           3994          23532</div><div class="line">C                               71           1750           2172           9929</div><div class="line">m4                               7            995             91           8940</div><div class="line">C/C++ Header                    72           1032            667           1851</div><div class="line">make                             1             26              0             85</div><div class="line">Python                           1             10             40             43</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">SUM:                           161           7404           6964          44380</div><div class="line">-------------------------------------------------------------------------------</div></pre></td></tr></table></figure>
<p><strong>对比压缩包代码差异</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cloc --diff htop-2.0.1.tar.gz htop-2.0.0.tar.gz</div></pre></td></tr></table></figure>
<p><strong>统计某个类型的文件</strong></p>
<p>该命令会统计当前文件夹下所有符合.c和.h的文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ cloc *.c *.h</div><div class="line"></div><div class="line">cloc *.c *.h                                   </div><div class="line">      91 text files.</div><div class="line">      91 unique files.                              </div><div class="line">       0 files ignored.</div><div class="line"></div><div class="line">http://cloc.sourceforge.net v 1.58  T=0.5 s (182.0 files/s, 22922.0 lines/s)</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">Language                     files          blank        comment           code</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">C                               45           1093           1379           6537</div><div class="line">C/C++ Header                    46            710            427           1315</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">SUM:                            91           1803           1806           7852</div><div class="line">-------------------------------------------------------------------------------</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://cloc.sourceforge.net/" target="_blank" rel="external">http://cloc.sourceforge.net/</a><br><a href="http://rockybean.info/2014/04/28/cloc_tutorial" target="_blank" rel="external">http://rockybean.info/2014/04/28/cloc_tutorial</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[终端环境下更好用的文件比较差异工具icdiff]]></title>
      <url>http://www.hi-linux.com/posts/43087.html</url>
      <content type="html"><![CDATA[<p>在终端环境下，两个文件要进行差异比对，通常我们会使用系统内建的diff指令，效果如下</p>
<p><img src="http://www.hi-linux.com/img/linux/regular-diff-demo.png" alt=""></p>
<p>diff指令仅仅是将文件差异处以上下对照呈现，并不会以颜色标示差异处。<br><a id="more"></a><br>再看看icdiff比较文件的结果，效果如下</p>
<p><img src="http://www.hi-linux.com/img/linux/icdiff-css-demo-tall.png" alt=""></p>
<p>其中各种颜色代表的意义如下</p>
<blockquote>
<p>[绿色]表示[新增]<br>[红色]表示[删除]</p>
</blockquote>
<p>icdiff将文件差异处以左右对照呈现的方式，并且将差异处标记上颜色。看上去直观多了！</p>
<p>icdiff官网: <a href="http://www.jefftk.com/icdiff" target="_blank" rel="external">http://www.jefftk.com/icdiff</a></p>
<h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><p>MAC OS X</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew icdiff</div></pre></td></tr></table></figure>
<p>Liunx</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install icdiff</div></pre></td></tr></table></figure>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="如何比较两个文件差异"><a href="#如何比较两个文件差异" class="headerlink" title="如何比较两个文件差异"></a>如何比较两个文件差异</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ icdiff &lt;file_1&gt; &lt;file_2&gt;</div></pre></td></tr></table></figure>
<h4 id="如何搭配git使用"><a href="#如何搭配git使用" class="headerlink" title="如何搭配git使用"></a>如何搭配git使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git difftool --extcmd icdiff</div></pre></td></tr></table></figure>
<p>更精简的git用法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git icdiff</div></pre></td></tr></table></figure>
<p><strong>将icdiff设定为git预设比对差异工具</strong></p>
<p>我们可以设定git预设使用icdiff来做差异比对，只需要设定git difftool path指向git-icdiff即可。</p>
<p>设定方法如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ vim ~/.gitconfig</div><div class="line"></div><div class="line">[diff]</div><div class="line">    #使用icdiff来取代git内建的diff</div><div class="line">    external = ~/bin/git-diff-wrapper.sh</div></pre></td></tr></table></figure>
<p>建立<code>~/bin/git-diff-wrapper.sh</code>文件，加入以下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vim  ~/bin/git-diff-wrapper.sh</div><div class="line"></div><div class="line">#!/bin/bash</div><div class="line">icdiff $2 $5</div></pre></td></tr></table></figure>
<p>给脚本加上执行权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chmod +x ~/bin/git-diff-wrapper.sh</div></pre></td></tr></table></figure>
<p>赶紧使用<code>$ git diff</code>试试吧,是不是已经默认使用icdiff做比较了！</p>
<p>如果你想要忽略这个外部diff而使用官方的diff效果的话</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff --no-ext-diff</div></pre></td></tr></table></figure>
<h4 id="如何搭配svn使用"><a href="#如何搭配svn使用" class="headerlink" title="如何搭配svn使用"></a>如何搭配svn使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ svn diff --diff-cmd icdiff</div></pre></td></tr></table></figure>
<p><strong>如何让svn预设使用icdiff</strong></p>
<p>设定方法如下</p>
<p>编辑<code>~/.subversion/config</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vim ~/.subversion/config </div><div class="line">将# diff-cmd = diff_program的注释行修改成diff-cmd = icdiff</div></pre></td></tr></table></figure>
<p>保存退出,之后执行<code>svn diff</code>命令的时候，就可以彩色化的显示版本差异了，其实这样配置，相当于在执行<code>svn diff</code>的时候多加了一个参数<code>svn diff --diff-cmd = colordiff</code></p>
<h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><p>使用<code>svn diff --diff-cmd icdiff</code>可能出现以下类似错误</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Sorry I don&apos;t know python, I can just report the error :</div><div class="line">(used from svn)</div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;/bin/icdiff&quot;, line 561, in &lt;module&gt;</div><div class="line">    start()</div><div class="line">  File &quot;/bin/icdiff&quot;, line 476, in start</div><div class="line">    diff_files(options, a, b, options.encoding)</div><div class="line">  File &quot;/bin/icdiff&quot;, line 556, in diff_files</div><div class="line">    codec_print(line, options)</div><div class="line">  File &quot;/bin/icdiff&quot;, line 483, in codec_print</div><div class="line">    sys.stdout.write(s.encode(options.output_encoding))</div><div class="line">UnicodeDecodeError: &apos;ascii&apos; codec can&apos;t decode byte 0xc3 in position 32: ordinal not in range(128)</div></pre></td></tr></table></figure>
<p>解决:根据作者的回复，需改用python3</p>
<blockquote>
<p>Setting python=python3 in your bashrc won’t make icdiff use python3. The easiest way to do that would be to change #!/usr/bin/env python to #!/usr/bin/env python3 at the top of icdiff.</p>
</blockquote>
<p>具体可见<a href="https://github.com/jeffkaufman/icdiff/issues/36" target="_blank" rel="external">issues36</a></p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="https://github.com/jeffkaufman/icdiff" target="_blank" rel="external">https://github.com/jeffkaufman/icdiff</a><br><a href="https://github.com/jeffkaufman/icdiff/issues/36" target="_blank" rel="external">https://github.com/jeffkaufman/icdiff/issues/36</a><br><a href="https://gist.github.com/bobo52310/57db1af38cd87ddcd05a" target="_blank" rel="external">https://gist.github.com/bobo52310/57db1af38cd87ddcd05a</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[通过Docker Machine快速安装Docker环境]]></title>
      <url>http://www.hi-linux.com/posts/46251.html</url>
      <content type="html"><![CDATA[<h3 id="什么是Docker-Machine"><a href="#什么是Docker-Machine" class="headerlink" title="什么是Docker Machine"></a>什么是Docker Machine</h3><p>Docker Machine是一个简化安装Docker环境的工具。市场上主流Linux系统版本很多，使用Machine工具就简单很多，一两条命令即可在主流Linux系统上安装Docker环境，用户不用考虑什么操作系统。Docker Machine还具备Docker工具管理虚拟化技术，Generic驱动默认管理LXC容器技术。</p>
<p>Docker Machine 支持多种后端驱动，包括虚拟机、本地主机和云平台等。Docker Machine目前支持的驱动：<br><a id="more"></a></p>
<blockquote>
<p>amazonec2<br>azure<br>digitalocean<br>exoscale<br>generic<br>google<br>none<br>openstack<br>rackspace<br>softlayer<br>virtualbox<br>vmwarevcloudair<br>vmwarevsphere</p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Docker Machine可以在多种操作系统平台上安装，包括Linux、Mac OS以及 Windows。</p>
<h4 id="Linux-Mac-OS"><a href="#Linux-Mac-OS" class="headerlink" title="Linux/Mac OS"></a>Linux/Mac OS</h4><p>在Linux/Mac OS 上的安装十分简单，推荐从官方Release库直接下载编译好的二进制文件即可。</p>
<p>例如在Linux 64位系统上直接下载对应的二进制包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -L https://github.com/docker/machine/releases/download/v0.7.0/docker-machine-`uname -s`-`uname -m` &gt;/usr/local/bin/docker-machine &amp;&amp; chmod +x /usr/local/bin/docker-machine</div></pre></td></tr></table></figure>
<h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>Windows下面要复杂一些，首先需要安装msysgit。<br>msysgit是Windows下的git客户端软件包，会提供类似Linux下的一些基本的工具，例如ssh等。<br>安装之后，启动msysgit的命令行界面，仍然通过下载二进制包进行安装.</p>
<p>On Windows with git bash</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ if [[ ! -d &quot;$HOME/bin&quot; ]]; then mkdir -p &quot;$HOME/bin&quot;; fi &amp;&amp; \</div><div class="line">curl -L https://github.com/docker/machine/releases/download/v0.7.0/docker-machine-Windows-x86_64.exe &gt; &quot;$HOME/bin/docker-machine.exe&quot; &amp;&amp; \</div><div class="line">chmod +x &quot;$HOME/bin/docker-machine.exe&quot;</div></pre></td></tr></table></figure>
<p>完成后，查看版本信息，验证运行正常。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker-machine -v</div><div class="line">docker-machine version 0.7.0, build a650a40</div></pre></td></tr></table></figure>
<h3 id="docker-machine命令"><a href="#docker-machine命令" class="headerlink" title="docker-machine命令"></a>docker-machine命令</h3><blockquote>
<p>help  查看帮助信息<br>active  查看活动的Docker主机<br>config  输出连接的配置信息<br>create  创建一个Docker主机<br>env  显示连接到某个主机需要的环境变量<br>inspect  输出主机更新信息<br>ip  获取Docker主机地址<br>kill  停止某个Docker主机<br>ls  列出所有管理的Docker主机<br>regenerate-certs  为某个主机重新成功TLS认证信息<br>restart  重启Docker主机<br>rm  删除Docker主机<br>scp  在Docker主机之间复制文件<br>ssh  SSH到主机上执行命令<br>start  启动一个主机<br>status  查看一个主机状态<br>stop  停止一个主机<br>upgrade  更新主机Docker版本为最新<br>url  获取主机的URL</p>
</blockquote>
<p>每个命令又带有不同的参数，查看具体的用法可以通过</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker-machine &lt;COMMAND&gt; -h</div></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="创建Docker主机实例"><a href="#创建Docker主机实例" class="headerlink" title="创建Docker主机实例"></a>创建Docker主机实例</h4><p>这里使用的Docker主机使用的是Ubuntu 14.04(docker-machine 0.7版本不支持CentOS7以下版本)</p>
<p>docker-machine通过ssh免交互登录或指定私钥登录连接到Docker主机，从网上下载并安装docker工具，需要用root权限来安装。</p>
<h5 id="配置root权限"><a href="#配置root权限" class="headerlink" title="配置root权限"></a>配置root权限</h5><p><strong>如果用root用户</strong></p>
<p>在ubuntu系统下，默认禁止root用户登录系统，因此需要先配置root允许SSH登录系统</p>
<p>允许root ssh登录(docker主机操作)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#切换到root用户</div><div class="line">$ sudo -i </div><div class="line">#修改此项为允许root登录</div><div class="line">$ sed -i -e &quot;s/PermitRootLogin without-password/PermitRootLogin yes/g&quot; /etc/ssh/sshd_config</div><div class="line">#重启SSH</div><div class="line">$ service ssh restart</div><div class="line">按提示设置root用户密码</div><div class="line">$ passwd</div></pre></td></tr></table></figure>
<p><strong>如果用具有sudo权限的普通用户</strong></p>
<p>以mike为例</p>
<p>配置为免密码sudo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/sudoers.d/nopasswdsudo </div><div class="line">mike ALL=(ALL) NOPASSWD : ALL</div></pre></td></tr></table></figure>
<p>注:Ubuntu 14.04下sudo免密码的方法略有不同，具体可参考：<a href="http://imike.me/2016/04/15/Ubuntu%2014.04%20sudo%E5%85%8D%E5%AF%86%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95/" target="_blank" rel="external">Ubuntu 14.04 sudo免密码的方法</a></p>
<h5 id="配置ssh免交互登录"><a href="#配置ssh免交互登录" class="headerlink" title="配置ssh免交互登录"></a>配置ssh免交互登录</h5><p>首先确保本地主机可以通过user账号的key直接ssh到目标主机。</p>
<p>以root为例</p>
<p>创建密钥对(machine主机操作)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa  #一直回车</div><div class="line">$ mv id_rsa.pub authorized_keys</div><div class="line">$ chmod 600 authorized_keys</div></pre></td></tr></table></figure>
<p>免交互root登录系统(machine主机操作)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ssh-copy-id root@192.168.119.105  #将公钥拷贝到docker主机</div><div class="line">$ ssh root@192.168.119.105   #如果不提示密码登录主机说明成功，可以继续下一步了</div></pre></td></tr></table></figure>
<h5 id="启用visiblepw"><a href="#启用visiblepw" class="headerlink" title="启用visiblepw"></a>启用visiblepw</h5><p>machine主机操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ visudo</div><div class="line">Defaults   visiblepw</div></pre></td></tr></table></figure>
<p>如果不添加这个条，可能报下面的错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Error creating machine: Error running provisioning: Something went wrong running an SSH command!</div><div class="line">command : sudo hostname ubuntu &amp;&amp; echo &quot;ubuntu&quot; | sudo tee /etc/hostname</div><div class="line">err     : exit status 1</div><div class="line">output  : sudo: no tty present and no askpass program specified</div><div class="line">Sorry, try again.</div><div class="line">sudo: no tty present and no askpass program specified</div><div class="line">Sorry, try again.</div><div class="line">sudo: no tty present and no askpass program specified</div><div class="line">Sorry, try again.</div><div class="line">sudo: 3 incorrect password attempts</div></pre></td></tr></table></figure>
<h5 id="使用generic类型的驱动创建Docker主机"><a href="#使用generic类型的驱动创建Docker主机" class="headerlink" title="使用generic类型的驱动创建Docker主机"></a>使用generic类型的驱动创建Docker主机</h5><p>创建一台Docker主机，命名为docker-web。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker-machine create -d generic --generic-ip-address=192.168.119.105 --generic-ssh-user=mike docker-ubuntu-web</div></pre></td></tr></table></figure>
<p>注意：Docker Machine安装docker环境中会因网络或其他情况造成安装失败(国内连官网速度很慢),可按下面的方法使用国内镜像源进行安装。</p>
<p>Docker下如何使用国内镜像源可参考<a href="http://www.imike.me/2016/04/20/Docker%E4%B8%8B%E4%BD%BF%E7%94%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/" target="_blank" rel="external">Docker下使用daocloud/阿里云镜像加速</a>一文。</p>
<h5 id="使用daoclound镜像安装"><a href="#使用daoclound镜像安装" class="headerlink" title="使用daoclound镜像安装"></a>使用daoclound镜像安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ docker-machine create -d generic --generic-ip-address=192.168.119.105 --generic-ssh-user=mike --engine-registry-mirror http://xxxxxx.m.daocloud.io  docker-ubuntu-web</div><div class="line"></div><div class="line">Running pre-create checks...</div><div class="line">Creating machine...</div><div class="line">(docker-ubuntu-web) No SSH key specified. Connecting to this machine now and in the future will require the ssh agent to contain the appropriate key.</div><div class="line">Waiting for machine to be running, this may take a few minutes...</div><div class="line">Detecting operating system of created instance...</div><div class="line">Waiting for SSH to be available...</div><div class="line">Detecting the provisioner...</div><div class="line">Provisioning with ubuntu(upstart)...</div><div class="line">Installing Docker...</div><div class="line">Copying certs to the local machine directory...</div><div class="line">Copying certs to the remote machine...</div><div class="line">Setting Docker configuration on the remote daemon...</div><div class="line">Checking connection to Docker...</div><div class="line">Docker is up and running!</div><div class="line">To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env docker-ubuntu-web</div></pre></td></tr></table></figure>
<p>参数说明</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-d  driver  #指定基于什么虚拟化技术的驱动</div><div class="line">--generic-ip-address  #指定要安装宿主机的IP，前提是SSH root用户免交互登录或私钥认证。</div><div class="line">--generic-ssh-user   #SSH的用户</div></pre></td></tr></table></figure>
<p>等待数分钟后，docker就安装成功了，可以通过docker命令管理容器了。如果安装失败多尝试两次！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ docker-machine ls</div><div class="line">NAME                ACTIVE   DRIVER    STATE     URL                          SWARM   DOCKER    ERRORS</div><div class="line">docker-ubuntu-web   -        generic   Running   tcp://192.168.119.105:2376           v1.11.0</div></pre></td></tr></table></figure>
<p>创建主机成功后，可以通过env命令来让后续操作对象都是目标主机。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker-machine env docker-ubuntu-web</div></pre></td></tr></table></figure>
<p>SSH到docker主机</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker-machine ssh  docker-ubuntu-web</div></pre></td></tr></table></figure>
<h4 id="在不使用驱动的情况新增一个主机"><a href="#在不使用驱动的情况新增一个主机" class="headerlink" title="在不使用驱动的情况新增一个主机"></a>在不使用驱动的情况新增一个主机</h4><p>我们可以在不使用驱动的情况往Docker增加一台主机，只需要一个URL。它可以使用一个已有机器的别名，所以我们就不需要每次在运行docker命令时输入完整的URL了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker-machine create -d none --url=tcp://192.168.119.105:2376 docker-ubuntu-web</div><div class="line">$ docker-machine regenerate-certs docker-ubuntu-web</div></pre></td></tr></table></figure>
<p>注：进行证书注册时会出现<code>http://www.dockone.io/question/920</code>类似错误，造成注册失败并不能正常管理docker主机，此问题暂未解决，如有知道如何解决的大神求留言。</p>
<h4 id="在Docker-Machine中使用Mirror服务"><a href="#在Docker-Machine中使用Mirror服务" class="headerlink" title="在Docker Machine中使用Mirror服务"></a>在Docker Machine中使用Mirror服务</h4><p><strong>使用daoclound镜像安装</strong></p>
<p>新建时通过指定<code>--engine-registry-mirror</code>参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker-machine create -d generic --generic-ip-address=192.168.119.105 --generic-ssh-user=mike --engine-registry-mirror http://xxxxxx.m.daocloud.io  docker-ubuntu-web</div></pre></td></tr></table></figure>
<p><strong>修改已存在docker主机</strong></p>
<p>以主机名为docker-ubuntu-web的为例</p>
<p>修改<code>~/.docker/machine/machines/docker-ubuntu-web/config.json</code>文件，编辑RegistryMirror字段，插入你的镜像地址，然后再重启你就会在<code>/var/lib/boot2docker/profile</code>看见一个<code>--registry-mirror http://xxxxxx.m.daocloud.io</code>了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ vim  ~/.docker/machine/machines/docker-ubuntu-web/config.json</div><div class="line"></div><div class="line"></div><div class="line">&quot;RegistryMirror&quot;: [</div><div class="line">    &quot;http://xxxxxx.m.daocloud.io&quot;</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="https://docs.docker.com/machine/install-machine/" target="_blank" rel="external">https://docs.docker.com/machine/install-machine/</a><br><a href="https://docs.docker.com/machine/reference/" target="_blank" rel="external">https://docs.docker.com/machine/reference/</a><br><a href="http://lizhenliang.blog.51cto.com/7876557/1730028" target="_blank" rel="external">http://lizhenliang.blog.51cto.com/7876557/1730028</a><br><a href="https://reality0ne.com/docker-machine-mirror/" target="_blank" rel="external">https://reality0ne.com/docker-machine-mirror/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[利用Oh-My-Zsh打造你的超级终端]]></title>
      <url>http://www.hi-linux.com/posts/54879.html</url>
      <content type="html"><![CDATA[<h3 id="什么是Zsh"><a href="#什么是Zsh" class="headerlink" title="什么是Zsh"></a>什么是Zsh</h3><p>Zsh是一款强大的虚拟终端，既是一个系统的虚拟终端，也可以作为一个脚本语言的交互解析器。</p>
<p>Zsh的一些特性</p>
<blockquote>
<p>兼容bash，原来使用bash的兄弟切换过来毫无压力。</p>
<p>强大的历史纪录功能，在用<ctrl-p>或者方向上键查找历史命令时，zsh支持限制查找。比如输入ls然后再按方向上键,则只会查找用过的ls命令。而此时使用<ctrl-p>则会仍然按之前的方式查找，忽略ls。</ctrl-p></ctrl-p></p>
<p>多个终端会话共享历史记录。经常有多个窗口，tab，tmux的多个session，panel。这些命令历史不能共享实在是很糟糕的回忆。但是有了zsh之后，这些确实成了回忆了,所有的命令历史都可以共享。<br><a id="more"></a></p>
<p>智能拼写纠正，输入<code>gtep mactalk * -R</code>，系统会提示：<code>zsh: correct &#39;gtep&#39; to &#39;grep&#39; [nyae]?</code>比妹纸贴心吧，她们向来都是让你猜的……</p>
<p>各种补全：路径补全、命令补全，命令参数补全，插件内容补全等等。触发补全只需要按一下或两下tab键，补全项可以使用ctrl+n/p/f/b上下左右切换。比如你想杀掉java的进程，只需要输入<code>kill java + tab</code>键，如果只有一个java进程，zsh 会自动替换为进程的 pid，如果有多个则会出现选择项供你选择。ssh+空格+两个tab键，zsh会列出所有访问过的主机和用户名进行补全</p>
<p>智能跳转，安装了autojump之后，zsh 会自动记录你访问过的目录，通过 j + 目录名 可以直接进行目录跳转，而且目录名支持模糊匹配和自动补全，例如你访问过hadoop-1.0.0目录，输入j hado 即可正确跳转。j –stat 可以看你的历史路径库。</p>
<p>目录浏览和跳转：输入 d，即可列出你在这个会话里访问的目录列表，输入列表前的序号，即可直接跳转。</p>
<p>在当前目录下输入 .. 或 … ，或直接输入当前目录名都可以跳转，你甚至不再需要输入cd命令了。</p>
<p>通配符搜索：<code>ls -l **/*.sh</code>，可以递归显示当前目录下的 shell 文件，文件少时可以代替find，文件太多还是用find。</p>
</blockquote>
<p>Zsh默认不兼容Bash，不过Zsh实现中包含了一个屌炸天的仿真模式(emulation mode)支持对两种主流的Bourne衍生版shell（bash、ksh）和C shell的仿真(csh的支持并不完整)。在Bash的仿真模式下，可以使用与Bash相同的语法和命令集合，从而达到近乎完全兼容的目的。</p>
<p>为了激活对Bash的仿真，需要显式执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ emulate bash</div></pre></td></tr></table></figure>
<p>等效于</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ emulate sh</div></pre></td></tr></table></figure>
<p>更详细介绍可到官网了解，zsh官网：<a href="http://www.zsh.org/" target="_blank" rel="external">http://www.zsh.org/</a></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>Redhat/Centos</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install zsh</div></pre></td></tr></table></figure>
<p>Debian/Ubuntu</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apt-get install zsh</div></pre></td></tr></table></figure>
<h4 id="设置默认shell为zsh"><a href="#设置默认shell为zsh" class="headerlink" title="设置默认shell为zsh"></a>设置默认shell为zsh</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chsh -s $(which zsh)</div></pre></td></tr></table></figure>
<p>完成后可以使用下面这条命令检查是否设置成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ echo $SHELL</div></pre></td></tr></table></figure>
<h3 id="什么是Oh-My-Zsh"><a href="#什么是Oh-My-Zsh" class="headerlink" title="什么是Oh My Zsh"></a>什么是Oh My Zsh</h3><p>Oh My Zsh是一款社区驱动的命令行工具，正如它的主页上说的，Oh My Zsh 是一种生活方式。它基于zsh命令行，提供了主题配置，插件机制，已经内置的便捷操作。给我们一种全新的方式使用命令行。</p>
<p>Oh My Zsh这个名字听起来就很有意思，它是基于zsh命令行的一个扩展工具集，提供了丰富的扩展功能。 </p>
<p>Oh My Zsh只是一个对zsh命令行环境的配置包装框架，但它不提供命令行窗口，更不是一个独立的APP。</p>
<p>更详细介绍可到官网了解，Oh My Zsh官网：<a href="http://ohmyz.sh" target="_blank" rel="external">http://ohmyz.sh</a></p>
<h4 id="安装Oh-My-Zsh"><a href="#安装Oh-My-Zsh" class="headerlink" title="安装Oh My Zsh"></a>安装Oh My Zsh</h4><p>前提条件：必须已安装ZSH</p>
<p>我们可以在命令行中输入这个命令来查看我们的电脑上是否安装了zsh命令行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ zsh --version</div></pre></td></tr></table></figure>
<p>如果安装了，这个命令就会输出zsh当前的版本号。确定 zsh 已经安装后，我们就可以继续安装Oh My Zsh了。</p>
<p>安装Oh My Zsh</p>
<p>Oh My Zsh 的安装方式非常简单，可以通过<code>curl</code>或<code>wget</code>的方式，用一条命令即可安装。</p>
<p>curl 方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</div></pre></td></tr></table></figure>
<p>wget 方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sh -c &quot;$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</div></pre></td></tr></table></figure>
<p>安装过程中输出如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Cloning Oh My Zsh...</div><div class="line">Cloning into &apos;/root/.oh-my-zsh&apos;...</div><div class="line">remote: Counting objects: 712, done.</div><div class="line">remote: Compressing objects: 100% (584/584), done.</div><div class="line">remote: Total 712 (delta 15), reused 522 (delta 4), pack-reused 0</div><div class="line">Receiving objects: 100% (712/712), 443.58 KiB | 27.00 KiB/s, done.</div><div class="line">Resolving deltas: 100% (15/15), done.</div><div class="line">Checking connectivity... done.</div><div class="line">Looking for an existing zsh config...</div><div class="line">Using the Oh My Zsh template file and adding it to ~/.zshrc</div><div class="line">Copying your current PATH and adding it to the end of ~/.zshrc for you.</div><div class="line">Time to change your default shell to zsh!</div><div class="line">        __                                     __</div><div class="line"> ____  / /_     ____ ___  __  __   ____  _____/ /_</div><div class="line">/ __ \/ __ \   / __ `__ \/ / / /  /_  / / ___/ __ \</div><div class="line">/ /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / /</div><div class="line">\____/_/ /_/  /_/ /_/ /_/\__, /    /___/____/_/ /_/</div><div class="line">                       /____/                       ....is now installed!</div><div class="line"></div><div class="line"></div><div class="line">Please look over the ~/.zshrc file to select plugins, themes, and options.</div><div class="line">p.s. Follow us at https://twitter.com/ohmyzsh.</div><div class="line">p.p.s. Get stickers and t-shirts at http://shop.planetargon.com.</div></pre></td></tr></table></figure>
<p>到这里，Oh My Zsh 就安装成功了。</p>
<h4 id="Oh-My-Zsh目录结构"><a href="#Oh-My-Zsh目录结构" class="headerlink" title="Oh My Zsh目录结构"></a>Oh My Zsh目录结构</h4><p>进入~/.oh-my-zsh目录后，看看该目录的结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls ~/.oh-my-zsh</div><div class="line">cache  custom  lib  log  MIT-LICENSE.txt  oh-my-zsh.sh  plugins  README.markdown  templates  themes  tools</div></pre></td></tr></table></figure>
<blockquote>
<p>lib 提供了核心功能的脚本库<br>tools 提供安装、升级等功能的快捷工具<br>plugins 自带插件的存在放位置<br>templates 自带模板的存在放位置<br>themes  自带主题文件的存在放位置<br>custom 个性化配置目录，自安装的插件和主题可放这里</p>
</blockquote>
<h4 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h4><p>安装完毕后，我们就可以使用了，咱们先来简单配置一下。<br>Oh My Zsh 提供了很多主题风格，我们可以根据自己的喜好，设置主题风格，主题的配置在 ~/.zshrc 文件中可以看到，用一个自己熟悉的编辑器打开这个文件，可以找到这一项：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZSH_THEME=&quot;robbyrussel&quot;</div></pre></td></tr></table></figure>
<p>可以看到，我们默认使用的主题叫做<code>robbyrussel</code>。 它的显示效果嘛，大概是这样</p>
<p><img src="http://www.hi-linux.com/img/linux/omz.jpg" alt=""></p>
<p>Oh My Zsh默认自带了一些默认主题，存放在<code>~/.oh-my-zsh/themes</code>目录中。我们可以查看这些主题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ ls ~/.oh-my-zsh/themes</div><div class="line"></div><div class="line">3den.zsh-theme                essembeh.zsh-theme            junkfood.zsh-theme            rgm.zsh-theme</div><div class="line">Soliah.zsh-theme              evan.zsh-theme                kafeitu.zsh-theme             risto.zsh-theme</div><div class="line">adben.zsh-theme               example.zsh-theme             kardan.zsh-theme              rixius.zsh-theme</div><div class="line">af-magic.zsh-theme            fino-time.zsh-theme           kennethreitz.zsh-theme        rkj-repos.zsh-theme</div><div class="line">afowler.zsh-theme             fino.zsh-theme                kiwi.zsh-theme                rkj.zsh-theme</div><div class="line">agnoster.zsh-theme            fishy.zsh-theme               kolo.zsh-theme                robbyrussell.zsh-theme</div><div class="line">alanpeabody.zsh-theme         flazz.zsh-theme               kphoen.zsh-theme              sammy.zsh-theme</div><div class="line">amuse.zsh-theme               fletcherm.zsh-theme           lambda.zsh-theme              simonoff.zsh-theme</div><div class="line">apple.zsh-theme               fox.zsh-theme                 linuxonly.zsh-theme           simple.zsh-theme</div><div class="line">arrow.zsh-theme               frisk.zsh-theme               lukerandall.zsh-theme         skaro.zsh-theme</div><div class="line">....</div></pre></td></tr></table></figure>
<p>怎么样，默认主题的数量相当多吧，这就是社区驱动的力量。</p>
<p>这么多的主题可以满足你的各种偏好了，我们只需在<code>./zshrc</code>文件中配置需要的主题即可，比如我们想用<code>lambda.zsh-theme</code>这个主题，我们只要这样配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZSH_THEME=&quot;lambda&quot;</div></pre></td></tr></table></figure>
<p>然后保存这个文件文件，再打开一个新的命令行窗口即可看到效果了。那么这么多的主题如何快速找到哪些是我们喜欢的呢，我们还可以这样设置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZSH_THEME=&quot;random&quot;</div></pre></td></tr></table></figure>
<p>我们将主题设置为随机，这样在我们每次打开命令行窗口的时候，都会随机在默认主题中选择一个。这样我们如果觉得当前的主题比较喜欢，可以直接使用 echo 命令输出当前主题的名称</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ echo $ZSH_THEME</div></pre></td></tr></table></figure>
<p>然后再将他设置到配置文件中即可。</p>
<p>如果这些默认主题还不能满足你的需要，我们还可以到这里找到更多的主题</p>
<blockquote>
<p><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</a><br><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/External-themes" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh/wiki/External-themes</a><br><a href="https://github.com/unixorn/awesome-zsh-plugins#themes" target="_blank" rel="external">https://github.com/unixorn/awesome-zsh-plugins#themes</a></p>
</blockquote>
<h4 id="启用插件"><a href="#启用插件" class="headerlink" title="启用插件"></a>启用插件</h4><p>Oh My Zsh 默认自带了一些默认主题，存放在<code>~/.oh-my-zsh/plugins</code>目录中。我们可以查看这些插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ ls ~/.oh-my-zsh/plugins</div><div class="line"></div><div class="line">adb               brew         coffee             dirpersist      fastfile         gitignore                 httpie     last-working-dir  nanoc                  pod         rebar       sprunge        terminitor  vault              zeus</div><div class="line">ant               brew-cask    colemak            django          fbterm           git-prompt                iwhois     lein              nmap                   postgres    redis-cli   ssh-agent      terraform   vim-interaction    zsh-navigation-tools</div><div class="line">apache2-macports  bundler      colored-man-pages  dnf             fedora           git-remote-branch         jake-node  lighthouse        node                   pow         repo        stack          textastic   vi-mode            zsh_reload</div><div class="line">archlinux         bwana        colorize           docker          forklift         glassfish                 jhbuild    lol               npm                    powder      rsync       sublime        textmate    virtualenv</div><div class="line">asdf              cabal        command-not-found  docker-compose  frontend-search  gnu-utils                 jira       macports          nvm                    powify      ruby        sudo           thefuck     virtualenvwrapper</div><div class="line">autoenv           cake         common-aliases     emacs           gas              go                        jruby      man               nyan                   profiles    rvm         supervisor     themes      vundle</div><div class="line">autojump          cakephp3     compleat           ember-cli       geeknote         golang                    jsontools  marked2           osx                    pyenv       safe-paste  suse           thor        wakeonlan</div><div class="line">autopep8          capistrano   composer           emoji           gem              gpg-agent                 jump       mercurial         pass                   pylint      sbt         svn            tmux        wd</div><div class="line">aws               cask         copydir            emoji-clock     git              gradle                    kate       meteor            paver                  python      scala       svn-fast-info  tmux-cssh   web-search</div><div class="line">battery           catimg       copyfile           emotty          git-extras       grails                    kitchen    mix               pep8                   rails       scd         symfony        tmuxinator  wp-cli</div><div class="line">bbedit            celery       cp                 encode64        gitfast          grunt                     knife      mix-fast          per-directory-history  rake        screen      symfony2       torrent     xcode</div><div class="line">bgnotify          chruby       cpanm              extract         git-flow         gulp                      knife_ssh  mosh              perl                   rake-fast   scw         systemadmin    tugboat     yii</div><div class="line">boot2docker       chucknorris  debian             fabric          git-flow-avh     heroku                    laravel    mvn               phing                  rand-quote  sfffe       systemd        ubuntu      yii2</div><div class="line">bower             cloudapp     dircycle           fancy-ctrl-z    github           history                   laravel4   mysql-macports    pip                    rbenv       singlechar  taskwarrior    urltools    yum</div><div class="line">branch            codeclimate  dirhistory         fasd            git-hubflow      history-substring-search  laravel5   n98-magerun       pj                     rbfu        spring      terminalapp    vagrant     z</div></pre></td></tr></table></figure>
<p>Oh My Zsh默认是只启用git插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plugins=(git)</div></pre></td></tr></table></figure>
<p>如需启用更多插件，可加入需启用插件的名称。如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plugins=(git wd web-search history history-substring-search)</div></pre></td></tr></table></figure>
<p>推荐几个好用插件</p>
<blockquote>
<p>zsh-history-substring-search<br><a href="https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/history-substring-search" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/history-substring-search</a></p>
<p>zsh-syntax-highlighting<br><a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="external">https://github.com/zsh-users/zsh-syntax-highlighting</a></p>
<p>zsh-autosuggestions<br><a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="external">https://github.com/zsh-users/zsh-autosuggestions</a></p>
</blockquote>
<p>更多插件可参考</p>
<blockquote>
<p><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins</a><br><a href="https://github.com/unixorn/awesome-zsh-plugins" target="_blank" rel="external">https://github.com/unixorn/awesome-zsh-plugins</a><br><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview</a></p>
</blockquote>
<h3 id="一些小技巧"><a href="#一些小技巧" class="headerlink" title="一些小技巧"></a>一些小技巧</h3><p>给history命令增加时间</p>
<p>.zshrc中加入以下行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vim ~/.zshrc</div><div class="line">HIST_STAMPS=&quot;yyyy-mm-dd&quot; </div><div class="line">source ~/.zshrc</div></pre></td></tr></table></figure>
<p>如果没用oh my zsh的话可用如下alias</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ alias history=&apos;fc -il 1&apos;</div></pre></td></tr></table></figure>
<h4 id="更新oh-my-zsh"><a href="#更新oh-my-zsh" class="headerlink" title="更新oh-my-zsh"></a>更新oh-my-zsh</h4><p>设置自动更新oh-my-zsh</p>
<p>默认情况下，当oh-my-zsh有更新时，都会给你提示。如果希望让oh-my-zsh自动更新，在~/.zshrc 中添加下面这句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DISABLE_UPDATE_PROMPT=true</div></pre></td></tr></table></figure>
<p>要手动更新，可以执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ upgrade_oh_my_zsh</div></pre></td></tr></table></figure>
<h4 id="卸载oh-my-zsh"><a href="#卸载oh-my-zsh" class="headerlink" title="卸载oh my zsh"></a>卸载oh my zsh</h4><p>直接在终端中，运行<code>uninstall_oh_my_zsh</code>既可以卸载。</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://ohmyz.sh/" target="_blank" rel="external">http://ohmyz.sh/</a><br><a href="http://swiftcafe.io/2015/10/31/cafe-time-omz/" target="_blank" rel="external">http://swiftcafe.io/2015/10/31/cafe-time-omz/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何透过SSH代理穿越跳板机]]></title>
      <url>http://www.hi-linux.com/posts/929.html</url>
      <content type="html"><![CDATA[<p><img src="http://www.hi-linux.com/img/linux/ProxyCommand.png" alt=""></p>
<p>一般公司为了安全起见，线上服务器都无法直接访问，必须通过一台跳板机来访问。比如要访问机器webserver01，则必须先ssh到跳板机gateway，然后再ssh到webserver01机器。这样做自然可以减少攻击面，但是每次去webserver01机器执行命令，或者上传文件的时候都要两次ssh，对线上的调试和监控效率影响很大。<a id="more"></a></p>
<h3 id="通过Proxycommand-Netcat"><a href="#通过Proxycommand-Netcat" class="headerlink" title="通过Proxycommand+Netcat"></a>通过Proxycommand+Netcat</h3><p>前提条件</p>
<ul>
<li>本机、跳板机、目标机器三者已经做过公钥认证(如果不做密钥认证就会提示分别输入跳板机和目标机器的密码，需要多输入两次密码比较繁琐)</li>
<li>跳板机已安装Netcat</li>
</ul>
<p>安装Netcat</p>
<p>CentOS</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install nc</div></pre></td></tr></table></figure>
<p>配置本机ssh config</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">vim ~/.ssh/config</div><div class="line"></div><div class="line">Host webserver01					#主机别名，也可写成目标服务器IP，可使用通配符，如：Host 10.208.*</div><div class="line">  HostName 192.168.111.102		#目标机域名或IP地址</div><div class="line">  User root						#SSH用户名</div><div class="line">  Port 22						#SSH端口</div><div class="line">  ProxyCommand ssh -q -p 22 root@192.168.119.101 nc %h %p</div><div class="line">  IdentityFile ~/.ssh/id_rsa 	#登陆跳板机的私钥所在位置，如默认位置可不用显示指定</div></pre></td></tr></table></figure>
<p>原理分析</p>
<p>通过ProxyCommand，可以在开启ssh之前执行一个命令打开代理隧道，这个命令<code>nc %h %p</code>意为在跳板机上使用nc开启了远程隧道。<br>ProxyCommand参数中的-q是为了防止和跳板机的ssh连接产生多余的输出，比如不加-q就会导致每次断开连接的时候会多一句<code>Killed by signal 1.</code></p>
<h3 id="通过SSH-W参数-推荐"><a href="#通过SSH-W参数-推荐" class="headerlink" title="通过SSH -W参数(推荐)"></a>通过<code>SSH -W</code>参数(推荐)</h3><p>此方法不用跳板机上额外安装NC。</p>
<p>前提条件</p>
<ul>
<li>本机、跳板机、目标机器三者已经做过公钥认证(如果不做密钥认证就会提示分别输入跳板机和目标机器的密码，需要多输入两次密码比较繁琐)</li>
</ul>
<p>配置本机ssh config</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">vim ~/.ssh/config</div><div class="line"></div><div class="line">Host gateway</div><div class="line">  HostName 192.168.119.101</div><div class="line">  User root</div><div class="line"></div><div class="line">Host webserver01    				#主机别名，也可写成目标服务器IP，可使用通配符，如：Host 10.208.*</div><div class="line">  HostName 192.168.111.102		#目标机域名或IP地址</div><div class="line">  User root						#SSH用户名</div><div class="line">  Port 22						#SSH端口</div><div class="line">  ProxyCommand ssh -q -W %h:%p gateway</div><div class="line">  IdentityFile ~/.ssh/id_rsa 	#登陆跳板机的私钥所在位置，如默认位置可不用显示指定</div></pre></td></tr></table></figure>
<p>原理分析</p>
<p>通过ProxyCommand命令就会先和gateway建立ssh连接，并把这个中间连接当作一个代理使用。<br>ProxyCommand参数中的-q是为了防止和跳板机的ssh连接产生多余的输出，比如不加-q就会导致每次断开连接的时候会多一句<code>Killed by signal 1.</code></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在本地机器的命令行输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh root@webserver01</div></pre></td></tr></table></figure>
<p>见证奇迹的时刻来了，SSH会直接登陆到远端WEB服务器。</p>
<h3 id="一些高级用法"><a href="#一些高级用法" class="headerlink" title="一些高级用法"></a>一些高级用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh dev &quot;sudo tcpdump -s 0 -U -n -i eth0 not port 22 -w -&quot; | wireshark -k -i -</div></pre></td></tr></table></figure>
<p>这条命令在远端调用tcpdump抓包，通过管道传回本地，然后让wireshark抓包，就达到了实时抓包的效果了。这比原来的抓包存储到pcap文件中，然后两次scp传回来要快很多。</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="https://www.robberphex.com/2015/09/426" target="_blank" rel="external">https://www.robberphex.com/2015/09/426</a><br><a href="http://xieminis.me/?p=257" target="_blank" rel="external">http://xieminis.me/?p=257</a><br><a href="http://feiyang.me/2013/03/ssh-cross-gateway/" target="_blank" rel="external">http://feiyang.me/2013/03/ssh-cross-gateway/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用pyenv搭建python虚拟环境]]></title>
      <url>http://www.hi-linux.com/posts/63429.html</url>
      <content type="html"><![CDATA[<p>pyenv可以帮助你在一台开发机上建立多个版本的python环境， 并提供方便的切换方法。</p>
<p>例如系统自带的Python是2.6，自己需要Python 2.7中的某些特性；此时需要在系统中安装多个Python，但又不能影响系统自带的Python，即需要实现Python的多版本共存，pyenv就是这样一个Python版本管理器。</p>
<p>pyenv项目地址: <a href="https://github.com/yyuu/pyenv" target="_blank" rel="external">https://github.com/yyuu/pyenv</a></p>
<h3 id="安装pyenv"><a href="#安装pyenv" class="headerlink" title="安装pyenv"></a>安装pyenv</h3><h4 id="通过脚本自动安装方式"><a href="#通过脚本自动安装方式" class="headerlink" title="通过脚本自动安装方式"></a>通过脚本自动安装方式</h4><p>通过<code>https://github.com/yyuu/pyenv-installer</code>提供脚本进行自动安装<br><a id="more"></a></p>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</div></pre></td></tr></table></figure>
<h5 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h5><p><code>PYENV_ROOT</code>指向pyenv检出的根目录，并向<code>$PATH</code>添加<code>$PYENV_ROOT/bin</code>以提供访问<code>pyenv</code>这条命令的路径(这里的shell配置文件(<code>~/.bash_profile</code>)依不同SHELL而需作修改,如Zsh：<code>~/.zshrc</code>)</p>
<p>BASH</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ echo &apos;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&apos; &gt;&gt; ~/.bashrc</div><div class="line">$ echo &apos;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&apos; &gt;&gt; ~/.bashrc</div><div class="line">$ echo &apos;eval &quot;$(pyenv init -)&quot;&apos; &gt;&gt; ~/.bashrc</div></pre></td></tr></table></figure>
<p>重启shell(因为修改了$PATH)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ exec $SHELL</div></pre></td></tr></table></figure>
<p>ZSH</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ echo &apos;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&apos; &gt;&gt; ~/.zshrc</div><div class="line">$ echo &apos;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</div><div class="line">$ echo &apos;eval &quot;$(pyenv init -)&quot;&apos; &gt;&gt; ~/.zshrc</div></pre></td></tr></table></figure>
<p>重启shell(因为修改了$PATH)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ exec $SHELL</div></pre></td></tr></table></figure>
<h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv update</div></pre></td></tr></table></figure>
<h5 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#Uninstall: pyenv is installed within $PYENV_ROOT (default: ~/.pyenv). To uninstall, just remove it:</div><div class="line">$ rm -fr ~/.pyenv</div></pre></td></tr></table></figure>
<h4 id="手动安装方式"><a href="#手动安装方式" class="headerlink" title="手动安装方式"></a>手动安装方式</h4><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><p>将pyenv检出到你想安装的目录。建议路径为<code>$HOME/.pyenv</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone git://github.com/yyuu/pyenv.git ~/.pyenv</div></pre></td></tr></table></figure>
<h5 id="添加环境变量-1"><a href="#添加环境变量-1" class="headerlink" title="添加环境变量"></a>添加环境变量</h5><p><code>PYENV_ROOT</code>指向pyenv检出的根目录，并向<code>$PATH</code>添加<code>$PYENV_ROOT/bin</code>以提供访问<code>pyenv</code>这条命令的路径(这里的shell配置文件(<code>~/.bash_profile</code>)依不同SHELL而需作修改，如Zsh：<code>~/.zshrc</code>)</p>
<p>BASH</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ echo &apos;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&apos; &gt;&gt; ~/.bashrc</div><div class="line">$ echo &apos;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&apos; &gt;&gt; ~/.bashrc</div><div class="line">$ echo &apos;eval &quot;$(pyenv init -)&quot;&apos; &gt;&gt; ~/.bashrc</div></pre></td></tr></table></figure>
<p>重启shell(因为修改了$PATH)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ exec $SHELL</div></pre></td></tr></table></figure>
<p>ZSH</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ echo &apos;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&apos; &gt;&gt; ~/.zshrc</div><div class="line">$ echo &apos;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</div><div class="line">$ echo &apos;eval &quot;$(pyenv init -)&quot;&apos; &gt;&gt; ~/.zshrc</div></pre></td></tr></table></figure>
<p>重启shell(因为修改了$PATH)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ exec $SHELL</div></pre></td></tr></table></figure>
<h5 id="更新pyenv"><a href="#更新pyenv" class="headerlink" title="更新pyenv"></a>更新pyenv</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd ~/.pyenv</div><div class="line">$ git pull</div></pre></td></tr></table></figure>
<h5 id="删除特定版本Python"><a href="#删除特定版本Python" class="headerlink" title="删除特定版本Python"></a>删除特定版本Python</h5><p>查找特定版本Python文件夹位置，之后直接删除即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pyenv prefix 3.4.3</div><div class="line">$ rm -rf ~/.pyenv/versions/3.4.3</div></pre></td></tr></table></figure>
<h4 id="包安装"><a href="#包安装" class="headerlink" title="包安装"></a>包安装</h4><h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install  --egg  pyenv</div></pre></td></tr></table></figure>
<h5 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install pyenv</div></pre></td></tr></table></figure>
<h3 id="pyenv可用的命令"><a href="#pyenv可用的命令" class="headerlink" title="pyenv可用的命令"></a>pyenv可用的命令</h3><h4 id="查看pyenv的命令"><a href="#查看pyenv的命令" class="headerlink" title="查看pyenv的命令"></a>查看pyenv的命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ pyenv -h</div><div class="line"></div><div class="line">commands    List all available pyenv commands</div><div class="line">local       Set or show the local application-specific Python version</div><div class="line">global      Set or show the global Python version</div><div class="line">shell       Set or show the shell-specific Python version</div><div class="line">install     Install a Python version using python-build</div><div class="line">uninstall   Uninstall a specific Python version</div><div class="line">rehash      Rehash pyenv shims (run this after installing executables)</div><div class="line">version     Show the current Python version and its origin</div><div class="line">versions    List all Python versions available to pyenv</div><div class="line">which       Display the full path to an executable</div><div class="line">whence      List all Python versions that contain the given executable</div></pre></td></tr></table></figure>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>查看当前 pyenv 可检测到的所有版本，处于激活状态的版本前以<code>*</code>标示。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ pyenv versions</div><div class="line"> 2.5.6</div><div class="line"> 2.6.8</div><div class="line">*2.7.6 (set by /home/yyuu/.pyenv/version)</div><div class="line"> 3.3.3</div><div class="line"> jython-2.5.3</div><div class="line"> pypy-2.2.1</div></pre></td></tr></table></figure>
<p>查看当前处于激活状态的版本，括号中内容表示这个版本是由哪条途径激活的（global、local、shell）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pyenv version</div><div class="line">2.7.6 (set by /home/yyuu/.pyenv/version)</div></pre></td></tr></table></figure>
<p>使用python-build(一个插件)安装一个Python版本，到<code>$PYENV_ROOT/versions</code>路径下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv install -v 2.7.3</div></pre></td></tr></table></figure>
<p>建议添加<code>-v</code>参数用于显示细节。<code>python-build</code>会首先尝试从一个镜像站点下载包，此时可以去/tmp/python-build.xxx 里面关心一下下载速度。如果太慢，可以直接在shell里<code>ctrl-c</code>终止此次下载，然后<code>python-build</code>会自动去<code>python.org/ftp</code>下载。不一定哪个更快。</p>
<p>卸载一个版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv uninstall 2.7.3</div></pre></td></tr></table></figure>
<p>为所有已安装的可执行文件 （如：~/.pyenv/versions/<em>/bin/</em>） 创建shims，因此，每当你增删了Python 版本或带有可执行文件的包(如 pip)以后，都应该执行一次本命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pyenv install 2.7.3</div><div class="line">$ pyenv rehash  #安装新版本的python或者其他二进制包后都需要运行</div></pre></td></tr></table></figure>
<p>设置全局的 Python 版本，通过将版本号写入 ~/.pyenv/version 文件的方式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv global 3.4.0</div></pre></td></tr></table></figure>
<p>设置面向程序的本地版本，通过将版本号写入当前目录下的<code>.python-version</code>文件的方式。通过这种方式设置的 Python 版本优先级较 global 高。pyenv会从当前目录开始向上逐级查找<code>.python-version</code>文件，直到根目录为止。若找不到，就用global版本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pyenv local 2.7.3</div><div class="line">$ pyenv local --unset #取消改变</div></pre></td></tr></table></figure>
<p>设置面向shell的Python版本，通过设置当前shell的PYENV_VERSION环境变量的方式。这个版本的优先级比local和global都要高。<code>--unset</code>参数可以用于取消当前shell设定的版本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pyenv shell pypy-2.2.1</div><div class="line">$ pyenv shell --unset</div></pre></td></tr></table></figure>
<p>查看pyenv可用的命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv commands</div></pre></td></tr></table></figure>
<p>显示当前Python的安裝路径 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv which python</div></pre></td></tr></table></figure>
<h4 id="安装不同版本Python"><a href="#安装不同版本Python" class="headerlink" title="安装不同版本Python"></a>安装不同版本Python</h4><p>查看可安装的版本</p>
<p>该命令会列出可以用pyenv安装的Python版本，仅列举几个</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ pyenv install --list</div><div class="line"></div><div class="line">2.7.8   #Python 2最新版本</div><div class="line">3.4.1   #Python 3最新版本</div><div class="line">anaconda-2.0.1  #支持Python 2.6和2.7</div><div class="line">anaconda3-2.0.1 #支持Python 3.3和3.4</div></pre></td></tr></table></figure>
<p>其中形如x.x.x这样的只有版本号的为Python官方版本，其他的形如xxxxx-x.x.x这种既有名称又有版本后的属于衍生版或发行版。</p>
<p>安装Python的依赖包</p>
<p>在安装Python时需要首先安装其依赖的其他软件包，已知的一些需要预先安装的库如下。</p>
<p>在CentOS/RHEL/Fedora下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ yum install readline readline-devel readline-static</div><div class="line">$ yum install openssl openssl-devel openssl-static</div><div class="line">$ yum install sqlite-devel</div><div class="line">$ yum install bzip2-devel bzip2-libs</div></pre></td></tr></table></figure>
<p>安装指定版本</p>
<p>使用如下命令即可安装python 3.4.1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv install 3.4.1 -v</div></pre></td></tr></table></figure>
<p>该命令会从github上下载python的源代码，并解压到/tmp目录下，然后在/tmp中执行编译工作。若依赖包没有安装，则会出现编译错误，需要在安装依赖包后重新执行该命令。</p>
<p>对于科研环境，更推荐安装专为科学计算准备的Anaconda发行版 </p>
<p>安装2.x版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv install anaconda-2.1.0</div></pre></td></tr></table></figure>
<p>安装3.x版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv install anaconda3-2.1.0</div></pre></td></tr></table></figure>
<p>Anacoda很大，用pyenv下载会比较慢，可以自己到Anaconda官方网站下载，并将下载得到的文件放在<code>~/.pyenv/cache</code>目录下，则pyenv不会重复下载。</p>
<p>更新数据库</p>
<p>安装完成之后需要对数据库进行更新</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv rehash</div></pre></td></tr></table></figure>
<p>查看当前已安装的python版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ pyenv versions</div><div class="line">* system (set by /home/seisman/.pyenv/version)</div><div class="line">3.4.1</div></pre></td></tr></table></figure>
<p>其中的星号表示当前正在使用的是系统自带的python。</p>
<p>设置全局的python版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ pyenv global 3.4.1</div><div class="line">pyenv versions</div><div class="line">system</div><div class="line">* 3.4.1 (set by /home/seisman/.pyenv/version)</div></pre></td></tr></table></figure>
<p>当前全局的python版本已经变成了3.4.1。也可以使用pyenv local或pyenv shell临时改变python版本。</p>
<p>确认python版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ python</div><div class="line">Python 3.4.1 (default, Sep 10 2014, 17:10:18)</div><div class="line">[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)] on linux</div><div class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>使用python</p>
<p>输入python即可使用新版本的python；<br>系统自带的脚本会以<code>/usr/bin/python</code>的方式直接调用老版本的python，因而不会对系统脚本产生影响；<br>使用pip安装第三方模块时会安装到<code>~/.pyenv/versions/3.4.1</code>下，不会和系统模块发生冲突。<br>使用pip安装模块后，可能需要执行<code>pyenv rehash</code>更新数据库；</p>
<h3 id="Pyenv的pyenv-virtualenv插件"><a href="#Pyenv的pyenv-virtualenv插件" class="headerlink" title="Pyenv的pyenv-virtualenv插件"></a>Pyenv的pyenv-virtualenv插件</h3><p>如果你是安装我们前面的方式安装pyenv的，那它已经帮我们以plugin的形式安装好了virtualenv, 我们只要使用就好了</p>
<p>pyenv virtualenv是pyenv的插件，为Unix系统上的python virtualenv提供<code>pyenv virtualenv</code>命令。它可以为pyenv管理的python版本运行提供隔离的虚拟环境，在此虚拟环境下的操作例如安装第三方模块以及修改库搜索路径等，都不会在原始的python环境里直接操作，从而保证了各python版本本身的纯净。</p>
<h4 id="安装pyenv-virtualenv插件"><a href="#安装pyenv-virtualenv插件" class="headerlink" title="安装pyenv-virtualenv插件"></a>安装pyenv-virtualenv插件</h4><h5 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv</div></pre></td></tr></table></figure>
<p>注:用pyenv自动安装脚本安装的已自带</p>
<h5 id="MAC-1"><a href="#MAC-1" class="headerlink" title="MAC"></a>MAC</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ brew install pyenv-virtualenv</div><div class="line">$ brew install --HEAD pyenv-virtualenv</div></pre></td></tr></table></figure>
<h4 id="添加环境变量-2"><a href="#添加环境变量-2" class="headerlink" title="添加环境变量"></a>添加环境变量</h4><p>BASH</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ echo &apos;eval &quot;$(pyenv virtualenv-init -)&quot;&apos; &gt;&gt; ~/.bash_profile</div></pre></td></tr></table></figure>
<p>重启SHELL启用pyenv-virtualenv</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ exec $SHELL</div></pre></td></tr></table></figure>
<p>ZSH</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ echo &apos;eval &quot;$(pyenv virtualenv-init -)&quot;&apos; &gt;&gt; ~/.zshrc</div></pre></td></tr></table></figure>
<p>重启SHELL启用pyenv-virtualenv<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ exec &quot;$SHELL&quot;</div></pre></td></tr></table></figure></p>
<h4 id="pyenv-virtualenv使用"><a href="#pyenv-virtualenv使用" class="headerlink" title="pyenv-virtualenv使用"></a>pyenv-virtualenv使用</h4><p><code>pyenv-virtualenv</code>会为<code>pyenv</code>引入一些新命令，例如<code>virtualenv/virtualenv-delete</code>用户创建/删除虚拟环境，virtualenvs用于列出所有的虚拟环境，activate和deactivate用于激活/禁用已有虚拟环境，用于获取使用帮助：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ pyenv help virtualenv</div><div class="line">Usage: pyenv virtualenv [-f|--force] [VIRTUALENV_OPTIONS] [version] virtualenv-name</div><div class="line">pyenv virtualenv --version</div><div class="line">pyenv virtualenv --help</div><div class="line">-f/--force       Install even if the version appears to be installed already</div></pre></td></tr></table></figure>
<p>使用pyenv-virtualenv建立虚拟python环境</p>
<p>pyenv virtualenv依赖于通过pyenv已安装的python版本，只能建立已安装python版本的虚拟环境</p>
<p>查看可用python版本列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ pyenv versions</div><div class="line">* system (set by /root/.pyenv/version)</div><div class="line">2.7.9</div><div class="line">3.4.2</div><div class="line">3.4.2/envs/myenv</div></pre></td></tr></table></figure></p>
<p>创建一个虚拟的python环境</p>
<p>创建一个名为myenv的虚拟python环境，其使用3.4.2的版本。</p>
<p>这条命令在本机上创建了一个名为myenv的python虚拟环境，这个环境的真实目录位于：<code>~/.pyenv/versions/</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ pyenv virtualenv 3.4.2 myenv</div><div class="line"></div><div class="line">Ignoring indexes: https://pypi.python.org/simple/</div><div class="line">Requirement already satisfied (use --upgrade to upgrade): setuptools in /root/.pyenv/versions/3.4.2/envs/myenv/lib/python3.4/site-packages</div><div class="line">Requirement already satisfied (use --upgrade to upgrade): pip in /root/.pyenv/versions/3.4.2/envs/myenv/lib/python3.4/site-packages</div><div class="line"> Cleaning up...</div></pre></td></tr></table></figure>
<p>注意，命令中的3.4.2必须是一个安装前面步骤已经安装好的python版本， 否则会出错。</p>
<p>然后我们可以继续通过pyenv versions 命令来查看当前的虚拟环境， 结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ pyenv versions</div><div class="line">* system (set by /root/.pyenv/version)</div><div class="line">2.7.9</div><div class="line">3.4.2</div><div class="line">3.4.2/envs/myenv</div><div class="line">myenv</div></pre></td></tr></table></figure>
<p>这里我们可以看到， 除了已经安装的python版本， 我们多出了一个myenv的python虚拟环境。</p>
<p>仅查看python的虚拟环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ pyenv virtualenvs</div><div class="line">3.4.2/envs/myenv (created from /root/.pyenv/versions/3.4.2)</div><div class="line">myenv (created from /root/.pyenv/versions/3.4.2)</div></pre></td></tr></table></figure>
<p>在当前工作目录激活虚拟环境myenv,此时Python版本自动变为3.4.2, 且是独立环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ pyenv activate myenv</div><div class="line">(myenv) $ python --version</div><div class="line">Python 3.4.2</div></pre></td></tr></table></figure>
<p>接下来我们的python环境就已经切换到3.4.2的虚拟环境了， 运行python命令认证</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ python</div><div class="line">Python 3.4.2 (r271:86832, May  9 2014, 01:07:17) </div><div class="line">[GCC 4.8.2] on linux3</div><div class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div><div class="line">&gt;&gt;&gt;</div><div class="line">可以看到， python版本已经是3.4.2, 而且是在虚拟环境之中(myenv)</div></pre></td></tr></table></figure>
<p>查看可用pip及其版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(myenv) $ pip -V</div><div class="line">pip 1.5.6 from /root/.pyenv/versions/3.4.2/envs/myenv/lib/python3.4/site-packages (python 3.4)</div><div class="line">为当前虚拟环境使用pip命令安装一个第三方模块，例如pymysql和ipython</div><div class="line">pip install pymysql</div><div class="line">pip install ipython</div></pre></td></tr></table></figure>
<p>运行ipython，并尝试导入pymysql模块，如果能导入成功，则表示模块已然就绪；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ ipython</div><div class="line">Python 3.4.2 (default, Nov 23 2015, 13:14:16)</div><div class="line">Type &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div><div class="line">     </div><div class="line">IPython 4.1.1 -- An enhanced Interactive Python.</div><div class="line">?         -&gt; Introduction and overview of IPython&apos;s features.</div><div class="line">%quickref -&gt; Quick reference.</div><div class="line">help      -&gt; Python&apos;s own help system.</div><div class="line">object?   -&gt; Details about &apos;object&apos;, use &apos;object??&apos; for extra details.</div><div class="line"> </div><div class="line">In [1]: import pymysql</div><div class="line">In [2]:</div></pre></td></tr></table></figure>
<p>如果要切换回系统环境， 运行这个命令即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv deactivate</div></pre></td></tr></table></figure>
<p>那如果要删除这个虚拟环境呢？ 答案简单而且粗暴，只要直接删除它所在的目录就好：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rm -rf ~/.pyenv/versions/myenv/</div></pre></td></tr></table></figure>
<p>顺带一提，Python3自带了一个叫做venv的虚拟环境模块，搭配pyenv使用简直爽</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ python3 -m venv venv  # 报错的话那就 python3 -m venv --without-pip venv</div><div class="line">$ ln -s ./venv/bin/activate activate</div><div class="line">$ . ./activate</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.google.com/" target="_blank" rel="external">http://www.google.com/</a><br><a href="https://github.com/yyuu/pyenv" target="_blank" rel="external">https://github.com/yyuu/pyenv</a><br><a href="http://m.oschina.net/blog/267469" target="_blank" rel="external">http://m.oschina.net/blog/267469</a><br><a href="https://blog.laisky.com/p/pyenv/" target="_blank" rel="external">https://blog.laisky.com/p/pyenv/</a><br><a href="https://wp-lai.gitbooks.io/learn-python/content/0MOOC/pyenv.html" target="_blank" rel="external">https://wp-lai.gitbooks.io/learn-python/content/0MOOC/pyenv.html</a><br><a href="http://www.cnblogs.com/npumenglei/p/3719412.html" target="_blank" rel="external">http://www.cnblogs.com/npumenglei/p/3719412.html</a><br><a href="http://seisman.info/python-pyenv.html" target="_blank" rel="external">http://seisman.info/python-pyenv.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[为Bash和VIM配置一个美观奢华的状态提示栏]]></title>
      <url>http://www.hi-linux.com/posts/49092.html</url>
      <content type="html"><![CDATA[<p>Powerline是使用Python所开发的一个外挂小工具，支援各种常见的Shell与应用程式，可以产生非常漂亮的提示字串与状态列文字，让终端机的文字看起来更舒服。除了Vim 之外也可以用于各种Shell 与应用程式中，如<code>zsh</code>、<code>bash</code>、<code>tmux</code>、<code>IPython</code>、<code>Awesome</code>与<code>Qtile</code>。</p>
<h3 id="安装Powerline"><a href="#安装Powerline" class="headerlink" title="安装Powerline"></a>安装Powerline</h3><p>Powerline 在使用前需要进行一些安装步骤。</p>
<h4 id="自动安装"><a href="#自动安装" class="headerlink" title="自动安装"></a>自动安装</h4><p>如果您是使用Ubuntu Linux 14.10以后的版本，建议可以直接使用universe repository所打包好的套件自动安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install powerline</div></pre></td></tr></table></figure>
<p>只要执行这一行就装好了。<a id="more"></a></p>
<h4 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h4><h5 id="安装pip和git"><a href="#安装pip和git" class="headerlink" title="安装pip和git"></a>安装pip和git</h5><p>首先安装Python的pip与git，若是Debian系列的 Linux(Ubuntu、Mint)则可用 apt 安装 python-pip 与 git 套件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install python-pip git</div></pre></td></tr></table></figure>
<p>Red Hat系列的Linux(CentOS、RHEL、Fedora)，则可使用yum 安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install python-pip git</div></pre></td></tr></table></figure>
<p>若是Fedora Linux 22以后的版本，则可用dnf安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo dnf install python-pip git</div></pre></td></tr></table></figure>
<h5 id="安装Powerline-1"><a href="#安装Powerline-1" class="headerlink" title="安装Powerline"></a>安装Powerline</h5><p>使用pip安装Powerline：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install --user powerline-status</div></pre></td></tr></table></figure>
<p>如果要取得最新的开发者版本，可以执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install --user git+git://github.com/powerline/powerline</div></pre></td></tr></table></figure>
<h4 id="Teriminal字体配置"><a href="#Teriminal字体配置" class="headerlink" title="Teriminal字体配置"></a>Teriminal字体配置</h4><p>执行完上面两步后，不出意外powerline就已经开始工作了。但是你会发现Bash提示符会和下图一样是一些非常恶心的符号,<br>出现这样情况的原因是powerline为了美观自己造了一些符号，而这些符号不在Unicode字库内。所以想要powerline正常显示的话，需要安装特殊处理过的字体。</p>
<p>1.Linux、MAC下字体配置</p>
<p>方法一</p>
<p>下载最新的Powerline字型以及fontconfig字型设定档：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf</div><div class="line">wget https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf</div></pre></td></tr></table></figure>
<p>将PowerlineSymbols.otf这个字型放进自己的字型目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv PowerlineSymbols.otf ~/.fonts/</div></pre></td></tr></table></figure>
<p>更新字型缓存：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fc-cache -vf ~/.fonts/</div></pre></td></tr></table></figure>
<p>将字型设定档放进适当的目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv 10-powerline-symbols.conf ~/.config/fontconfig/conf.d/</div></pre></td></tr></table></figure>
<p>方法二</p>
<p>github上已有大部分打上了powerline patch的常用的等宽字体，首先我们从github上下载并安装字体：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#推荐字体Sauce Code Powerline Semibold.otf</div><div class="line">shell&gt; git clone https://github.com/powerline/fonts.git</div><div class="line">shell&gt; cd fonts</div><div class="line">shell&gt; ./install.sh</div></pre></td></tr></table></figure>
<p>安装完成后我们就可以在iTerm2或者Terminal的字体选项里看到并选择多个xxx for powerline的字体了。*注意：对于ASCII fonts和non-ASCII fonts都需要选择for powerline的字体。如下图：</p>
<p><img src="http://www.hi-linux.com/img/linux/powerlinefonts.png" alt=""></p>
<p>2.Windows字体</p>
<p>Win7</p>
<p>下载<a href="https://github.com/eugeii/consolas-powerline-vim" target="_blank" rel="external">consolas-powerline</a> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/eugeii/consolas-powerline-vim.git</div></pre></td></tr></table></figure>
<p>安装这几个字体到系统fonts文件夹下即可。</p>
<p>PS:区分两个系统不同的字体下载是因为网上有文档说在Windows下安装powerline fonts有可能不生效。我WIN10实测<a href="https://github.com/powerline/fonts" target="_blank" rel="external">powerline fonts</a>中的字体也可用于Windows系统。</p>
<h3 id="使用Powerline"><a href="#使用Powerline" class="headerlink" title="使用Powerline"></a>使用Powerline</h3><p>以下介绍Bash Shell与Vim 的使用方式，其他的应用可参考Powerline官方的<a href="https://powerline.readthedocs.org/en/latest/" target="_blank" rel="external">说明文件</a>。</p>
<p>查看powerline所处的具体路径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#pip show powerline-status</div><div class="line">Metadata-Version: 1.0</div><div class="line">Name: powerline-status</div><div class="line">Version: 2.3</div><div class="line">Summary: The ultimate statusline/prompt utility.</div><div class="line">Home-page: https://github.com/powerline/powerline</div><div class="line">Author: Kim Silkebaekken</div><div class="line">Author-email: kim.silkebaekken+vim@gmail.com</div><div class="line">License: MIT</div><div class="line">Location: /usr/lib/python2.6/site-packages</div><div class="line">Requires:</div></pre></td></tr></table></figure>
<h4 id="Bash-Shell"><a href="#Bash-Shell" class="headerlink" title="Bash Shell"></a>Bash Shell</h4><p>方法一</p>
<p>安装好Powerline之后，若要在Bash Shell中使用，只要在~/.bashrc 中加入下面这段程式码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">POWERLINE_SCRIPT=/usr/lib/python2.6/site-packages/powerline/bindings/bash/powerline.sh</div><div class="line">if [ -f $POWERLINE_SCRIPT ]; then</div><div class="line">  source $POWERLINE_SCRIPT</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>然后再关闭终端机，重新开启(或是登出再登入)后就可以看到Powerline的效果了。</p>
<p>方法二</p>
<p>配置方法很简单，只需要在Bash配置文件(例如：/etc/bashrc，~/.bashrc，~/.bash_profile)中增加一行调用安装路径下的bindings/bash/powerline.sh即可。这样每次调用生成新的Bash窗口时，都会自动执行powerline.sh文件中的内容。下面以~/.bash_profile为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">shell&gt; echo &lt;&lt; EOF &gt;&gt; ~/.bash_profile </div><div class="line">. /usr/lib/python2.6/site-packages/powerline/bindings/bash/powerline.sh</div><div class="line">EOF</div><div class="line"></div><div class="line">shell&gt; . /usr/lib/python2.6/site-packages/powerline/bindings/bash/powerline.sh</div></pre></td></tr></table></figure></p>
<p>注意：根据python安装方式的不同，你的powerline所在路径也可能不同。如果你是通过python官网或者apple store通过安装工具安装的python，那么你的powerline安装路径就是<code>/Library/Python/2.7/site-packages/powerline/</code>。如果你是通过<code>brew install python</code>的话，那么你的powerline路径可能会有不同。请根据实际情况修改上面的命令。</p>
<h4 id="ZShell"><a href="#ZShell" class="headerlink" title="ZShell"></a>ZShell</h4><p>安装好Powerline之后，若要在ZSH Shell中使用，只要在~/.zshrc中加入下面这段程式码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">POWERLINE_SCRIPT=/usr/lib/python2.6/site-packages/powerline/bindings/zsh/powerline.zsh </div><div class="line">if [ -f $POWERLINE_SCRIPT ]; then</div><div class="line">  source $POWERLINE_SCRIPT</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>然后再关闭终端机，重新开启(或是登出再登入)后就可以看到Powerline的效果了。</p>
<h5 id="Oh-My-Zsh"><a href="#Oh-My-Zsh" class="headerlink" title="Oh-My-Zsh"></a>Oh-My-Zsh</h5><p>如果你用Oh-My-Zsh就更方便了,oh-my-zsh本身的agnoster主题就支持Powerline</p>
<p>这里推荐几个好用的OMZ主题</p>
<p>1.oh-my-zsh-powerline-theme</p>
<p>项目地址：<a href="https://github.com/jeremyFreeAgent/oh-my-zsh-powerline-theme" target="_blank" rel="external">https://github.com/jeremyFreeAgent/oh-my-zsh-powerline-theme</a></p>
<p><img src="http://www.hi-linux.com/img/linux/oh-my-zsh-powerline-theme.png" alt=""></p>
<p>安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/jeremyFreeAgent/oh-my-zsh-powerline-theme </div><div class="line">cd oh-my-zsh-powerline-theme</div><div class="line">./install_in_omz.sh</div></pre></td></tr></table></figure>
<p>安装完之后记得再zshrc中加入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZSH_THEME=&quot;powerline&quot;</div></pre></td></tr></table></figure>
<p>如果要更多定制化设定可以参考repo内的设定</p>
<p>2.bullet-train-oh-my-zsh-theme</p>
<p>项目地址：<a href="https://github.com/caiogondim/bullet-train-oh-my-zsh-theme" target="_blank" rel="external">https://github.com/caiogondim/bullet-train-oh-my-zsh-theme</a></p>
<p><img src="http://www.hi-linux.com/img/linux/bullet-train-oh-my-zsh-theme.png" alt=""></p>
<p>安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/caiogondim/bullet-train-oh-my-zsh-theme.git</div><div class="line">cd bullet-train-oh-my-zsh-theme</div><div class="line">cp bullet-train.zsh-theme  ~/.oh-my-zsh/themes/</div></pre></td></tr></table></figure>
<p>安装完之后记得再zshrc中加入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZSH_THEME=&quot;bullet-train&quot;</div></pre></td></tr></table></figure>
<h4 id="Vim中使用Powerline"><a href="#Vim中使用Powerline" class="headerlink" title="Vim中使用Powerline"></a>Vim中使用Powerline</h4><p>若要在Vim的状态列中使用Powerline，则在~/.vimrc 中加入这几行：</p>
<p>方法一</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">vim ~/.vimrc</div><div class="line">set laststatus=2</div><div class="line">set t_Co=256</div><div class="line">python from powerline.vim import setup as powerline_setup</div><div class="line">python powerline_setup()</div><div class="line">python del powerline_setup</div></pre></td></tr></table></figure>
<p>方法二</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">vim ~/.vimrc</div><div class="line">set rtp+=/usr/lib/python2.6/site-packages/powerline/bindings/vim/</div><div class="line"></div><div class="line">&quot; These lines setup the environment to show graphics and colors correctly.</div><div class="line">set nocompatible</div><div class="line">set t_Co=256</div><div class="line"> </div><div class="line">let g:minBufExplForceSyntaxEnable = 1</div><div class="line">python from powerline.vim import setup as powerline_setup</div><div class="line">python powerline_setup()</div><div class="line">python del powerline_setup</div><div class="line"> </div><div class="line">if ! has(&apos;gui_running&apos;)</div><div class="line">   set ttimeoutlen=10</div><div class="line">   augroup FastEscape</div><div class="line">      autocmd!</div><div class="line">      au InsertEnter * set timeoutlen=0</div><div class="line">      au InsertLeave * set timeoutlen=1000</div><div class="line">   augroup END</div><div class="line">endif</div><div class="line"> </div><div class="line">set laststatus=2 &quot; Always display the statusline in all windows</div><div class="line">set guifont=Inconsolata\ for\ Powerline:h14</div><div class="line">set noshowmode &quot; Hide the default mode text (e.g. -- INSERT -- below the statusline)</div></pre></td></tr></table></figure>
<p>注：<code>set rtp+=/usr/lib/python2.6/site-packages/powerline/bindings/vim/</code>需要按照自己的powerline实际安装情况调整。</p>
<p>方法三</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">set rtp+=/usr/lib/python2.6/site-packages/powerline/bindings/vim/</div><div class="line">set guifont=Monaco\ for\ Powerline:h14.5  </div><div class="line">set laststatus=2  </div><div class="line">let g:Powerline_symbols = &apos;fancy&apos;  </div><div class="line">set encoding=utf-8  </div><div class="line">set t_Co=256  </div><div class="line">set number  </div><div class="line">set fillchars+=stl:\ ,stlnc:\  </div><div class="line">set term=xterm-256color  </div><div class="line">set termencoding=utf-8  </div><div class="line">syntax enable  </div><div class="line">set background=light  </div><div class="line">colorscheme solarized</div></pre></td></tr></table></figure>
<p>方法四</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">set rtp+=/usr/lib/python2.6/site-packages/powerline/bindings/vim/</div><div class="line">set guifont=Consolas\ for\ Powerline\ FixedD:h11 </div><div class="line">let g:Powerline_symbols = &apos;fancy&apos;</div><div class="line">set laststatus=2</div><div class="line">set encoding=utf-8</div><div class="line">set t_Co=256</div><div class="line">set fillchars+=stl:\ ,stlnc:\</div><div class="line">set term=xterm-256color</div><div class="line">set termencoding=utf-8</div><div class="line">set nocompatible</div><div class="line">syntax enable</div><div class="line">colorscheme solarized</div><div class="line">set background=dark</div><div class="line">let g:solarized_termcolors=256</div></pre></td></tr></table></figure>
<p>注意事项</p>
<p>使用Powerline需要在vimrc中设置<code>set laststatus=2</code><br>Powerline中的分隔符实际上是特殊字体，如果显示错误请下载修改过的字体：<code>https://gist.github.com/1595572</code></p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://blog.gtwang.org/linux/powerline-adds-powerful-statuslines-and-prompts-to-vim-and-bash/" target="_blank" rel="external">http://blog.gtwang.org/linux/powerline-adds-powerful-statuslines-and-prompts-to-vim-and-bash/</a><br><a href="http://lee-w-blog.logdown.com/posts/210946-powerline-on-zsh-vim-tmux" target="_blank" rel="external">http://lee-w-blog.logdown.com/posts/210946-powerline-on-zsh-vim-tmux</a><br><a href="https://github.com/powerline/powerline" target="_blank" rel="external">https://github.com/powerline/powerline</a><br><a href="http://blog.csdn.net/little__zm/article/details/21786773" target="_blank" rel="external">http://blog.csdn.net/little__zm/article/details/21786773</a><br><a href="http://hessian.cn/p/1026.html" target="_blank" rel="external">http://hessian.cn/p/1026.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker下使用daocloud/阿里云镜像加速]]></title>
      <url>http://www.hi-linux.com/posts/1421.html</url>
      <content type="html"><![CDATA[<p>在使用docker下载镜像时，在国内使用官方的Docker registry下载时速度很慢，庆幸国内还镜像加速服务。目前支持Docker镜像的有阿里云和DaoCloud两家。本文将详细讲解镜像服务的具体配置方法。</p>
<h3 id="docker使用阿里云镜像库加速"><a href="#docker使用阿里云镜像库加速" class="headerlink" title="docker使用阿里云镜像库加速"></a>docker使用阿里云镜像库加速</h3><p>注册阿里云开发者帐号帐号<br><a href="https://cr.console.aliyun.com/" target="_blank" rel="external">https://cr.console.aliyun.com/</a></p>
<p>登陆后取得专属加速器地址，类似这样<code>https://xxxxxx.mirror.aliyuncs.com</code><br><a id="more"></a></p>
<h4 id="配置Docker加速器"><a href="#配置Docker加速器" class="headerlink" title="配置Docker加速器"></a>配置Docker加速器</h4><h5 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h5><p>安装或升级Docker</p>
<p>请安装1.6.0以上版本的Docker。<br>您可以通过阿里云的镜像仓库下载： mirrors.aliyun.com/help/docker-engine</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</div></pre></td></tr></table></figure>
<p>配置Docker加速器</p>
<p>您可以使用如下的脚本将mirror的配置添加到docker daemon的启动参数中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo &quot;DOCKER_OPTS=\&quot;--registry-mirror=https://xxxxxx.mirror.aliyuncs.com\&quot;&quot; | sudo tee -a /etc/default/docker</div><div class="line">sudo service docker restart</div></pre></td></tr></table></figure></p>
<h5 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h5><p>安装或升级Docker</p>
<p>请安装1.6.0以上版本的Docker。 </p>
<p>您可以通过阿里云的镜像仓库下载： mirrors.aliyun.com/help/docker-engine</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</div></pre></td></tr></table></figure>
<p>配置Docker加速器</p>
<p>您可以使用如下的脚本将mirror的配置添加到docker daemon的启动参数中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#系统要求CentOS 7以上、Docker1.9以上</div><div class="line">sudo cp -n /lib/systemd/system/docker.service /etc/systemd/system/docker.service</div><div class="line">sudo sed -i &quot;s|ExecStart=/usr/bin/docker daemon|ExecStart=/usr/bin/docker daemon --registry-mirror=https://xxxxxx.mirror.aliyuncs.com|g&quot; /etc/systemd/system/docker.service</div><div class="line">sudo systemctl daemon-reload</div><div class="line">sudo service docker restart</div></pre></td></tr></table></figure>
<h5 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h5><p>安装或升级Docker</p>
<p>推荐您安装Docker Toolbox。 </p>
<p>Toolbox的介绍和帮助： <a href="http://mirrors.aliyun.com/help/docker-toolbox" target="_blank" rel="external">http://mirrors.aliyun.com/help/docker-toolbox</a><br>Windows系统的安装文件目录： <a href="http://mirrors.aliyun.com/docker-toolbox/windows" target="_blank" rel="external">http://mirrors.aliyun.com/docker-toolbox/windows</a></p>
<p>快速开始</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 创建一台安装有Docker环境的Linux虚拟机，指定机器名称为default，同时配置Docker加速器地址。</div><div class="line">docker-machine create --engine-registry-mirror=https://mytfd7zc.mirror.aliyuncs.com -d virtualbox default</div><div class="line"></div><div class="line"># 查看机器的环境配置，并配置到本地。然后通过Docker客户端访问Docker服务。</div><div class="line">docker-machine env default</div><div class="line">eval &quot;$(docker-machine env default)&quot;</div><div class="line">docker info</div></pre></td></tr></table></figure>
<h5 id="macos"><a href="#macos" class="headerlink" title="macos"></a>macos</h5><p>安装或升级Docker<br>推荐您安装Docker Toolbox。 </p>
<p>Toolbox的介绍和帮助： <a href="http://mirrors.aliyun.com/help/docker-toolbox" target="_blank" rel="external">http://mirrors.aliyun.com/help/docker-toolbox</a><br>Mac系统的安装文件目录： <a href="http://mirrors.aliyun.com/docker-toolbox/mac" target="_blank" rel="external">http://mirrors.aliyun.com/docker-toolbox/mac</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 创建一台安装有Docker环境的Linux虚拟机，指定机器名称为default，同时配置Docker加速器地址。</div><div class="line">docker-machine create --engine-registry-mirror=https://mytfd7zc.mirror.aliyuncs.com -d virtualbox default</div><div class="line"></div><div class="line"># 查看机器的环境配置，并配置到本地。然后通过Docker客户端访问Docker服务。</div><div class="line">docker-machine env default</div><div class="line">eval &quot;$(docker-machine env default)&quot;</div><div class="line">docker info</div></pre></td></tr></table></figure>
<h3 id="docker使用daocloud镜像库加速"><a href="#docker使用daocloud镜像库加速" class="headerlink" title="docker使用daocloud镜像库加速"></a>docker使用daocloud镜像库加速</h3><p>注册daocloud帐号<br><a href="http://www.daocloud.io/" target="_blank" rel="external">http://www.daocloud.io/</a></p>
<h4 id="配置Docker加速器-1"><a href="#配置Docker加速器-1" class="headerlink" title="配置Docker加速器"></a>配置Docker加速器</h4><p>daocloud与阿里云的方法差不多，daocloud提供两种方式：</p>
<h5 id="加速器2-0配置方法"><a href="#加速器2-0配置方法" class="headerlink" title="加速器2.0配置方法"></a>加速器2.0配置方法</h5><p>由于CentOS6内核太旧，Docker和RedHat都不再支持，请升级您的操作系统。需要CentOS7及以上版本。</p>
<p>安装Docker官方的最新发行版</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl -sSL https://get.daocloud.io/docker | sh </div><div class="line">sudo chkconfig docker on </div><div class="line">sudo systemctl start docker</div></pre></td></tr></table></figure>
<p>安装过程结束后，可执行下面命令验证安装结果。如果看到输出 active (running) 就表示安装成功。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl status docker</div></pre></td></tr></table></figure>
<p>安装主机监控程序</p>
<p>运行安装命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -sSL https://get.daocloud.io/daomonit/install.sh | sh -s cddd20f6b891c6d7d8fd3adf91b9585d22718c17</div></pre></td></tr></table></figure>
<h5 id="加速器1-0配置方法"><a href="#加速器1-0配置方法" class="headerlink" title="加速器1.0配置方法"></a>加速器1.0配置方法</h5><p>登陆后取得专属加速器地址，类似这样<code>http://xxxxxx.m.daocloud.io</code></p>
<p>安装或升级Docker</p>
<p>Docker 1.3.2版本以上支持加速器，如果您没有安装Docker或者版本较旧，请安装或升级。</p>
<p>配置Docker加速器</p>
<h6 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo cp -n /lib/systemd/system/docker.service /etc/systemd/system/docker.service</div><div class="line">sudo sed -i &apos;N;s|\[Service\]\n|\[Service\]\nEnvironmentFile=-/etc/sysconfig/docker\n|g&apos; /etc/systemd/system/docker.service</div><div class="line">sudo sed -i &apos;s|fd://|fd:// $other_args |g&apos; /etc/systemd/system/docker.service</div><div class="line">#这里和官方文档有点差异,实测的时候`/etc/sysconfig/docker`文件是不存的,用以下命令新建并配置</div><div class="line">echo &apos;other_args=&quot;--registry-mirror=http://xxxxxx.m.daocloud.io&quot;&apos;&gt; /etc/sysconfig/docker</div><div class="line">sudo systemctl daemon-reload</div><div class="line">sudo service docker restart</div></pre></td></tr></table></figure>
<h6 id="CentOS-6"><a href="#CentOS-6" class="headerlink" title="CentOS 6"></a>CentOS 6</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo sed -i &quot;s|other_args=\&quot;|other_args=\&quot;--registry-mirror=http://xxxxxx.m.daocloud.io |g&quot; /etc/sysconfig/docker</div><div class="line">sudo service docker restart</div></pre></td></tr></table></figure>
<p>该脚本可以将–registry-mirror加入到你的Docker配置文件/etc/sysconfig/docker中。</p>
<h3 id="Docker加速器使用"><a href="#Docker加速器使用" class="headerlink" title="Docker加速器使用"></a>Docker加速器使用</h3><p>Docker加速器使用时不需要任何额外操作。就像这样下载官方Ubuntu镜像</p>
<p>测试查找ubuntu镜像，并下载一个pull镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"># docker search ubuntu</div><div class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</div><div class="line">ubuntu                            Ubuntu is a Debian-based Linux operating s...   3687      [OK]       </div><div class="line">ubuntu-upstart                    Upstart is an event-based replacement for ...   61        [OK]       </div><div class="line">torusware/speedus-ubuntu          Always updated official Ubuntu docker imag...   25                   [OK]</div><div class="line">ubuntu-debootstrap                debootstrap --variant=minbase --components...   24        [OK]       </div><div class="line">rastasheep/ubuntu-sshd            Dockerized SSH service, built on top of of...   24                   [OK]</div><div class="line">nickistre/ubuntu-lamp             LAMP server on Ubuntu                           6                    [OK]</div><div class="line">nickistre/ubuntu-lamp-wordpress   LAMP on Ubuntu with wp-cli installed            5                    [OK]</div><div class="line">nuagebec/ubuntu                   Simple always updated Ubuntu docker images...   4                    [OK]</div><div class="line">nimmis/ubuntu                     This is a docker images different LTS vers...   4                    [OK]</div><div class="line">maxexcloo/ubuntu                  Docker base image built on Ubuntu with Sup...   2                    [OK]</div><div class="line">sylvainlasnier/ubuntu             Ubuntu 15.10 root docker images with commo...   2                    [OK]</div><div class="line">admiringworm/ubuntu               Base ubuntu images based on the official u...   1                    [OK]</div><div class="line">darksheer/ubuntu                  Base Ubuntu Image -- Updated hourly             1                    [OK]</div><div class="line">jordi/ubuntu                      Ubuntu Base Image                               1                    [OK]</div><div class="line">life360/ubuntu                    Ubuntu is a Debian-based Linux operating s...   0                    [OK]</div><div class="line">konstruktoid/ubuntu               Ubuntu base image                               0                    [OK]</div><div class="line">webhippie/ubuntu                  Docker images for ubuntu                        0                    [OK]</div><div class="line">esycat/ubuntu                     Ubuntu LTS                                      0                    [OK]</div><div class="line">lynxtp/ubuntu                     https://github.com/lynxtp/docker-ubuntu         0                    [OK]</div><div class="line">rallias/ubuntu                    Ubuntu with the needful                         0                    [OK]</div><div class="line">teamrock/ubuntu                   TeamRock&apos;s Ubuntu image configured with AW...   0                    [OK]</div><div class="line">widerplan/ubuntu                  Our basic Ubuntu images.                        0                    [OK]</div><div class="line">ustclug/ubuntu                    ubuntu image for docker with USTC mirror        0                    [OK]</div><div class="line">suzlab/ubuntu                     ubuntu                                          0                    [OK]</div><div class="line">uvatbc/ubuntu                     Ubuntu images with unprivileged user            0                    [OK]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># docker pull ubuntu</div><div class="line">Using default tag: latest</div><div class="line">latest: Pulling from library/ubuntu</div><div class="line">759d6771041e: Pull complete </div><div class="line">8836b825667b: Pull complete </div><div class="line">c2f5e51744e6: Pull complete </div><div class="line">a3ed95caeb02: Pull complete </div><div class="line">Digest: sha256:b4dbab2d8029edddfe494f42183de20b7e2e871a424ff16ffe7b15a31f102536</div><div class="line">Status: Downloaded newer image for ubuntu:latest</div></pre></td></tr></table></figure>
<p>查看镜像信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># docker images     </div><div class="line">REPOSITORY                              TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">ubuntu                                  latest              b72889fa879c        6 days ago          187.9 MB</div><div class="line">mysql                                   latest              63a92d0c131d        7 days ago          374 MB</div><div class="line">daocloud.io/daocloud/daocloud-toolset   latest              1ca651dfc92a        8 days ago          150.2 MB</div><div class="line">nginx                                   latest              82422ac65f7b        2 weeks ago         182.6 MB</div><div class="line">java                                    7                   8cb5d3124efe        2 weeks ago         588.1 MB</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用rbenv安装和管理Ruby版本]]></title>
      <url>http://www.hi-linux.com/posts/41737.html</url>
      <content type="html"><![CDATA[<p>如果你是Ruby开发者应该知道用rvm来安装/管理Ruby版本，同时也能用它的gemset功能来管理各个工程的gems。因为rvm过于强大以至于违背了某个Linux软件开发原则。所以出现了很多轻便的替代者，其中来自37signals的rbenv就很受欢迎。</p>
<p>rbenv可以帮助你在一台机器上建立多个版本的ruby环境， 并提供方便的切换方法。</p>
<p>注意：rbenv和rvm是不兼容的，所以安装rbenv之前要先把rvm卸载。</p>
<h3 id="卸载rvm"><a href="#卸载rvm" class="headerlink" title="卸载rvm"></a>卸载rvm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rvm implode</div></pre></td></tr></table></figure>
<p>然后再将你zsh或bash中的这一句去掉。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[ <span class="_">-s</span> <span class="string">"<span class="variable">$HOME</span>/.rvm/scripts/rvm"</span> ]] &amp;&amp; . <span class="string">"<span class="variable">$HOME</span>/.rvm/scripts/rvm"</span> <span class="comment"># Load RVM function</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="安装rbenv"><a href="#安装rbenv" class="headerlink" title="安装rbenv"></a>安装rbenv</h3><h4 id="Linux下安装"><a href="#Linux下安装" class="headerlink" title="Linux下安装"></a>Linux下安装</h4><p>rbenv的源代码托管在github，在终端中从 github上将rbenv源码clone到本地，然后设置<code>$PATH</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/rbenv/rbenv.git ~/.rbenv</div><div class="line">Optionally, try to compile dynamic bash extension to speed up rbenv. Don<span class="string">'t worry if it fails; rbenv will still work normally:</span></div><div class="line">cd ~/.rbenv &amp;&amp; src/configure &amp;&amp; make -C src</div><div class="line">echo '<span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$HOME</span>/.rbenv/bin:<span class="variable">$PATH</span>"</span><span class="string">' &gt;&gt; ~/.bashrc</span></div><div class="line">echo '<span class="built_in">eval</span> <span class="string">"<span class="variable">$(rbenv init -)</span>"</span><span class="string">' &gt;&gt; ~/.bashrc</span></div></pre></td></tr></table></figure>
<p>注意:如果用Zsh，就用<code>~/.zshrc</code>替换<code>~/.bash_profile</code>。</p>
<p>重启shell或者运行<code>exec $SHELL</code>，就可以开始用rbenv了。</p>
<p>测试rbenv是否设置正常</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">type</span> rbenv</div><div class="line"><span class="comment">#=&gt; "rbenv is a function"</span></div></pre></td></tr></table></figure>
<h4 id="Mac下安装"><a href="#Mac下安装" class="headerlink" title="Mac下安装"></a>Mac下安装</h4><p>如果你有安装Homebrew的话，可以用以下命令来安装rbenv和 ruby-build</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ brew install rbenv</div><div class="line">$ brew install ruby-build</div></pre></td></tr></table></figure>
<p>配置并初始化SHELL</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">'export PATH="$HOME/.rbenv/bin:$PATH"'</span> &gt;&gt; ~/.bashrc</div><div class="line"><span class="built_in">echo</span> <span class="string">'eval "$(rbenv init -)"'</span> &gt;&gt; ~/.bashrc</div></pre></td></tr></table></figure>
<p>注意:如果用 Zsh，就用<code>~/.zshrc</code>替换<code>~/.bash_profile</code>。</p>
<h4 id="更新rbenv"><a href="#更新rbenv" class="headerlink" title="更新rbenv"></a>更新rbenv</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/.rbenv</div><div class="line">git pull</div></pre></td></tr></table></figure>
<h3 id="安装ruby-build"><a href="#安装ruby-build" class="headerlink" title="安装ruby-build"></a>安装ruby-build</h3><p>使用ruby-build可以自动下载编译安装Ruby相应的版本，只需指定版本号。</p>
<p>ruby-build是一个rbenv插件，用来编译安装Ruby源码。提供了一个<code>rbenv install</code>命令编译和安装类UNIX系统不同版本的Ruby。如果选择手动编译，可不使用这个工具。</p>
<h4 id="安装编译ruby的依赖"><a href="#安装编译ruby的依赖" class="headerlink" title="安装编译ruby的依赖"></a>安装编译ruby的依赖</h4><p>Ubuntu</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install autoconf bison build-essential libssl-dev libyaml-dev libreadline6 libreadline6-dev zlib1g zlib1g-dev</div></pre></td></tr></table></figure>
<p>CentOS</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y gcc openssl-devel libyaml-devel libffi-devel readline-devel zlib-devel gdbm-devel ncurses-devel</div></pre></td></tr></table></figure>
<h4 id="安装ruby-build-1"><a href="#安装ruby-build-1" class="headerlink" title="安装ruby-build"></a>安装ruby-build</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build</div><div class="line"><span class="built_in">cd</span> ~/.rbenv/plugins/ruby-build</div><div class="line">./install.sh</div></pre></td></tr></table></figure>
<h3 id="rbenv使用"><a href="#rbenv使用" class="headerlink" title="rbenv使用"></a>rbenv使用</h3><h4 id="安装Ruby"><a href="#安装Ruby" class="headerlink" title="安装Ruby"></a>安装Ruby</h4><p>查看可用的ruby版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rbenv install --list</div></pre></td></tr></table></figure>
<p>安装2.3.0版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rbenv install 2.3.0</div></pre></td></tr></table></figure>
<p>等待一会儿，安装完毕后可以查看已经安装的所有Ruby版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rbenv versions</div><div class="line">* system (<span class="built_in">set</span> by /root/.rbenv/version)</div><div class="line">  2.3.0</div></pre></td></tr></table></figure>
<p>显示所有版本，前面加*的为当前激活的版本。</p>
<h4 id="选择一个Ruby版本"><a href="#选择一个Ruby版本" class="headerlink" title="选择一个Ruby版本"></a>选择一个Ruby版本</h4><p>rbenv中的Ruby版本有三个不同的作用域：全局(global)，本地(local)，当前终端(shell)。</p>
<p>查找版本的优先级是当前终端&gt;本地&gt;全局。</p>
<h5 id="设置全局版本"><a href="#设置全局版本" class="headerlink" title="设置全局版本"></a>设置全局版本</h5><p>全局版本是在没有找到当前终端或本地作用域的设置时执行。通过以下命令设置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rbenv global 2.3.0</div></pre></td></tr></table></figure>
<h5 id="设置本地版本"><a href="#设置本地版本" class="headerlink" title="设置本地版本"></a>设置本地版本</h5><p>本地作用域是针对各个项目的，通过项目文件夹中的 .rbenv-version 这个文件进行管理，需要将相应的 Ruby 版本号写入这个文件。所以一般设置这个选项就可以了，这个过程可以通过以下命令执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rbenv <span class="built_in">local</span> 2.3.0</div></pre></td></tr></table></figure>
<p>会在当前目录下生成<code>.rbenv-version</code>文件，此文件会覆盖<code>rbenv global</code>设定。</p>
<p>如果想取消的话，可以这样</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rbenv <span class="built_in">local</span> --unset</div></pre></td></tr></table></figure>
<h5 id="设置当前终端版本"><a href="#设置当前终端版本" class="headerlink" title="设置当前终端版本"></a>设置当前终端版本</h5><p>“当前终端”作用域的优先级最高。通过以下命令设置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rbenv shell 2.3.0</div></pre></td></tr></table></figure>
<h5 id="使用系统Ruby"><a href="#使用系统Ruby" class="headerlink" title="使用系统Ruby"></a>使用系统Ruby</h5><p>如果要使用系统原有的Ruby，则通过system指定</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rbenv global system</div></pre></td></tr></table></figure>
<p>每当切换ruby版本和执行bundle install之后必须执行这个命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rbenv <span class="built_in">rehash</span></div></pre></td></tr></table></figure>
<p>设置完毕后可以通过以下命令进行验证</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">which</span> ruby  </div><div class="line"><span class="comment"># ~/.rbenv/shims/ruby</span></div></pre></td></tr></table></figure>
<h4 id="列出目前使用的版本"><a href="#列出目前使用的版本" class="headerlink" title="列出目前使用的版本"></a>列出目前使用的版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rbenv version</div><div class="line"><span class="comment">#2.3.0 (set by RBENV_VERSION environment variable)</span></div></pre></td></tr></table></figure>
<h4 id="列出irb这个命令的完整路径"><a href="#列出irb这个命令的完整路径" class="headerlink" title="列出irb这个命令的完整路径"></a>列出irb这个命令的完整路径</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rbenv <span class="built_in">which</span> irb</div></pre></td></tr></table></figure>
<h4 id="列出包含irb这个命令的版本"><a href="#列出包含irb这个命令的版本" class="headerlink" title="列出包含irb这个命令的版本"></a>列出包含irb这个命令的版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rbenv <span class="built_in">whence</span> irb</div></pre></td></tr></table></figure>
<h4 id="查看对应Ruby版主的目录"><a href="#查看对应Ruby版主的目录" class="headerlink" title="查看对应Ruby版主的目录"></a>查看对应Ruby版主的目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rbenv prefix</div></pre></td></tr></table></figure>
<h4 id="卸载Ruby"><a href="#卸载Ruby" class="headerlink" title="卸载Ruby"></a>卸载Ruby</h4><p>直接用用rm -rf 命令删除<code>~/.rbenv/versions</code>文件夹下对应的Ruby版本即可</p>
<p>如果安装了 ruby-build 插件，那么使用如下命令即可</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rbenv uninstall 2.3.0</div></pre></td></tr></table></figure>
<h4 id="查看当前使用的ruby版本"><a href="#查看当前使用的ruby版本" class="headerlink" title="查看当前使用的ruby版本"></a>查看当前使用的ruby版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rbenv version</div></pre></td></tr></table></figure>
<h4 id="安装gem"><a href="#安装gem" class="headerlink" title="安装gem"></a>安装gem</h4><p>使用rbenv后，gem还是按照原有的方式进行安装、升级，只是gem的安装路径是在~/.rbenv 文件夹中当前Ruby版本文件夹下。而且安装带有可执行文件的gem后，需要执行一个特别的命令，告诉rbenv更新相应的映射关系，这个命令在安装新版本的Ruby后也需要执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rbenv <span class="built_in">rehash</span></div></pre></td></tr></table></figure>
<p>安装rails</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install bundler rails</div></pre></td></tr></table></figure>
<p>检查安装后的软件版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -v gem -v rake -V rails -v</div></pre></td></tr></table></figure>
<p>告诉Rubygems安装软件包的时候不安装文档</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"gem: --no-ri --no-rdoc"</span> &gt; ~/.gemrc</div></pre></td></tr></table></figure>
<h3 id="一些好用的rbenv插件"><a href="#一些好用的rbenv插件" class="headerlink" title="一些好用的rbenv插件"></a>一些好用的rbenv插件</h3><p>ruby-build<br>自动编译安装ruby</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build</div></pre></td></tr></table></figure>
<p>gemset<br>管理gemset</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/jf/rbenv-gemset.git  ~/.rbenv/plugins/rbenv-gemset</div></pre></td></tr></table></figure>
<p>rbenv-gem-rehash<br>通过gem命令安装完gem后无需手动输入rbenv rehash命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/rbenv/rbenv-gem-rehash.git ~/.rbenv/plugins/rbenv-gem-rehash</div></pre></td></tr></table></figure>
<p>rbenv-update<br>通过rbenv update命令来更新rbenv以及所有插件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/rkh/rbenv-update ~/.rbenv/plugins/rbenv-update</div></pre></td></tr></table></figure>
<p>rbenv-aliases</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/tpope/rbenv-aliases.git ~/.rbenv/plugins/rbenv-aliases</div></pre></td></tr></table></figure>
<h3 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h3><p>rbenv安装太慢的解决办法</p>
<p>rbenv+ruby-build插件，可以直接使用命令<code>rbenv install 2.3.0</code>安装对应的ruby版本。但这样太慢，很长时间都在下载。</p>
<p>解决方法</p>
<h4 id="使用国内镜像源"><a href="#使用国内镜像源" class="headerlink" title="使用国内镜像源"></a>使用国内镜像源</h4><p>因为检查md5sum，所以需要在url后面加个#或者?</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$env</span> RUBY_BUILD_MIRROR_URL=https://ruby.taobao.org/mirrors/ruby/ruby-2.3.0.tar.gz<span class="comment"># rbenv install 2.3.0</span></div></pre></td></tr></table></figure>
<h4 id="使用wget下载"><a href="#使用wget下载" class="headerlink" title="使用wget下载"></a>使用wget下载</h4><p>如果速度还慢，可以用wget先下载完成</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ wget -q https://ruby.taobao.org/mirrors/ruby/ruby-2.3.0.tar.gz -O ~/.rbenv/versions/ruby-2.3.0.tar.gz</div><div class="line">$ env RUBY_BUILD_MIRROR_URL=file:///root/.rbenv/versions/ruby-2.3.0.tar.gz<span class="comment"># rbenv install 2.3.0</span></div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://www.dreamxu.com/install-ruby-on-mac-with-rbenv/" target="_blank" rel="external">http://www.dreamxu.com/install-ruby-on-mac-with-rbenv/</a><br><a href="http://www.4wei.cn/archives/1002162" target="_blank" rel="external">http://www.4wei.cn/archives/1002162</a><br><a href="http://iplayboy.tk/troubleshooting/2015-12/centos-install-jekyll.html" target="_blank" rel="external">http://iplayboy.tk/troubleshooting/2015-12/centos-install-jekyll.html</a><br><a href="http://about.ac/2012/04/install-ruby-with-rbenv.html" target="_blank" rel="external">http://about.ac/2012/04/install-ruby-with-rbenv.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux环境下VI/VIM编辑文件时无权限保存的解决方法]]></title>
      <url>http://www.hi-linux.com/posts/46870.html</url>
      <content type="html"><![CDATA[<p>在Linux环境下，如果直接使用VI/VIM命令编辑没有修改权限的文件时，保存的时候就会提示用户无法进行保存操作，一般的解决方法只能是关闭文件重新以sudo权限打开该文件编辑后再保存(前提是用户具有sudo权限)。其实，在VI/VIM模式下通过一些简单的命令，就能在不关闭当前文件的情况下达到保存文件的目的。</p>
<p><strong>方法一</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">输入命令:%! sudo tee % &gt; /dev/null</div><div class="line">按提示输入sudo权限密码</div><div class="line">输入<span class="string">"L"</span>(Load File)</div><div class="line">输入:q命令退出</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>关于<code>%! sudo tee % &gt; /dev/null</code>这条命令的说明如下</p>
<p>此命令是把当前文件(即%)作为stdin传给sudo tee命令来执行。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">%　　　　　  <span class="comment">#VI/VIM编辑的文件内容</span></div><div class="line">!　　　　　　<span class="comment">#执行一个外部命令</span></div><div class="line">sudo　　　　 <span class="comment">#以root权限执行命令</span></div><div class="line">tee　　　　　<span class="comment">#将标准输入(即通过管道过来的当前编辑的文件内容)输出到标准输出，同时写入到指定的文件中(即VI/VIM当前编辑的文件)</span></div><div class="line">%　　　　　  <span class="comment">#vim当中一个只读寄存器的名字，总保存着当前编辑文件的文件路径。</span></div><div class="line">&gt; /dev/null　   <span class="comment">#将标准输出重定向到/dev/null(不输出显示)</span></div></pre></td></tr></table></figure>
<p><strong>方法二</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">:%!sudo bash -c <span class="string">"cat &gt; '%'"</span></div><div class="line">按提示输入sudo权限密码</div><div class="line">输入<span class="string">"L"</span>(Load File)</div><div class="line">输入:q命令退出</div></pre></td></tr></table></figure>
<p>更详细的解释可参考：<a href="http://feihu.me/blog/2014/vim-write-read-only-file/" target="_blank" rel="external">http://feihu.me/blog/2014/vim-write-read-only-file/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 14.04 sudo免密码的方法]]></title>
      <url>http://www.hi-linux.com/posts/8737.html</url>
      <content type="html"><![CDATA[<p>Ubuntu 14.04的方法与之前版本不太一样，Ubuntu建议把自定义部分内容放到/etc/sudoers.d目录，以减少对/etc/sudoers的错误修改，造成对系统的错误影响。</p>
<p>以用户名mike为例：具体实现方法如下</p>
<p>以下两种格式都可以</p>
<p>方法一</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /etc/sudoers.d</div><div class="line">sudo vi nopasswdsudo</div><div class="line">mike ALL=(ALL) NOPASSWD : ALL</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>方法二</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /etc/sudoers.d</div><div class="line">sudo vi nopasswdsudo</div><div class="line">mike  ALL=NOPASSWD: ALL</div></pre></td></tr></table></figure>
<p>保存后,这样使用sudo就不用一遍遍的输入密码了！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS7开机加载内核模块]]></title>
      <url>http://www.hi-linux.com/posts/60936.html</url>
      <content type="html"><![CDATA[<p>以bridge模块为例</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /etc/sysconfig/modules/</div></pre></td></tr></table></figure>
<p>新建一个bridge.modules文件并添加如下内容</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ vim bridge.modules</div><div class="line"></div><div class="line"><span class="comment">#！/bin/sh </span></div><div class="line">/sbin/modinfo -F filename bridge &gt; /dev/null 2&gt;&amp;1 </div><div class="line"><span class="keyword">if</span> [ $? <span class="_">-eq</span> 0 ]; <span class="keyword">then</span> </div><div class="line">    /sbin/modprobe bridge </div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>增加执行权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$chmod</span> 755 bridge.modules   //这一步至关重要</div></pre></td></tr></table></figure>
<p>重启系统</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$reboot</span></div></pre></td></tr></table></figure>
<p>验证模块是否加载</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ lsmod|grep bridge</div><div class="line">bridge                119562  0 </div><div class="line">stp                    12976  1 bridge</div><div class="line">llc                    14552  2 stp,bridge</div></pre></td></tr></table></figure>
<p>就可以看到bridge模块被加载到系统中。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS6下升级OpenSSH至7.1]]></title>
      <url>http://www.hi-linux.com/posts/12788.html</url>
      <content type="html"><![CDATA[<p>本文通过编译生成OpenSSH RPM升级OpenSSH至7.1，目前最新版本的OpenSSH版本为7.2p2,这个版本貌似有BUG没能编译成功，故使用7.1p2版本</p>
<h3 id="安装编译所需工具"><a href="#安装编译所需工具" class="headerlink" title="安装编译所需工具"></a>安装编译所需工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ yum -y groupinstall <span class="string">"Development tools"</span></div><div class="line">$ yum -y install pam-devel rpm-build rpmdevtools zlib-devel krb5-devel tcp_wrappers tcp_wrappers-devel tcp_wrappers-libs libX11-devel xmkmf libXt-devel wget</div></pre></td></tr></table></figure>
<h3 id="配置RPM编译环境"><a href="#配置RPM编译环境" class="headerlink" title="配置RPM编译环境"></a>配置RPM编译环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~</div><div class="line">$ mkdir rpmbuild</div><div class="line">$ <span class="built_in">cd</span> rpmbuild</div><div class="line">$ mkdir -pv &#123;BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="升级OpenSSL到最新"><a href="#升级OpenSSL到最新" class="headerlink" title="升级OpenSSL到最新"></a>升级OpenSSL到最新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum update openssl openssl-devel</div></pre></td></tr></table></figure>
<h3 id="编译OpenSSH-RPM"><a href="#编译OpenSSH-RPM" class="headerlink" title="编译OpenSSH RPM"></a>编译OpenSSH RPM</h3><h4 id="下载源码包"><a href="#下载源码包" class="headerlink" title="下载源码包"></a>下载源码包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/rpmbuild/SOURCES/</div><div class="line">$ wget http://openbsd.hk/pub/OpenBSD/OpenSSH/portable/openssh-7.1p2.tar.gz</div><div class="line">$ wget http://ftp.riken.jp/Linux/momonga/6/Everything/SOURCES/x11-ssh-askpass-1.2.4.1.tar.gz</div></pre></td></tr></table></figure>
<h4 id="配置SPEC文件"><a href="#配置SPEC文件" class="headerlink" title="配置SPEC文件"></a>配置SPEC文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/rpmbuild/SPECS</div><div class="line">$ tar xfz ../SOURCES/openssh-7.1p2.tar.gz openssh-7.1p2/contrib/redhat/openssh.spec</div><div class="line">$ mv openssh-7.1p2/contrib/redhat/openssh.spec openssh-7.1p2.spec</div><div class="line">$ rm -rf openssh-7.1p2</div><div class="line">$ sed -i <span class="_">-e</span> <span class="string">"s/%define no_gnome_askpass 0/%define no_gnome_askpass 1/g"</span> openssh-7.1p2.spec</div><div class="line">$ sed -i <span class="_">-e</span> <span class="string">"s/%define no_x11_askpass 0/%define no_x11_askpass 1/g"</span> openssh-7.1p2.spec</div><div class="line">$ sed -i <span class="_">-e</span> <span class="string">"s/BuildPreReq/BuildRequires/g"</span> openssh-7.1p2.spec</div></pre></td></tr></table></figure>
<h4 id="编译生成RPM"><a href="#编译生成RPM" class="headerlink" title="编译生成RPM"></a>编译生成RPM</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/rpmbuild/SPECS</div><div class="line">$ rpmbuild -bb openssh-7.1p2.spec</div></pre></td></tr></table></figure>
<h4 id="查看生成的RPM"><a href="#查看生成的RPM" class="headerlink" title="查看生成的RPM"></a>查看生成的RPM</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/rpmbuild/RPMS/x86_64</div><div class="line">$ ls openssh-*</div><div class="line">openssh-7.1p2-1.x86_64.rpm  openssh-clients-7.1p2-1.x86_64.rpm  openssh-debuginfo-7.1p2-1.x86_64.rpm  openssh-server-7.1p2-1.x86_64.rpm</div></pre></td></tr></table></figure>
<h4 id="安装生成的RPM"><a href="#安装生成的RPM" class="headerlink" title="安装生成的RPM"></a>安装生成的RPM</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/rpmbuild/RPMS/x86_64</div><div class="line">yum install openssh-7.1p2-1.x86_64.rpm  openssh-clients-7.1p2-1.x86_64.rpm  openssh-server-7.1p2-1.x86_64.rpm</div><div class="line"></div><div class="line">诊断 openssh-clients-7.1p2-1.x86_64.rpm: openssh-clients-7.1p2-1.x86_64</div><div class="line">openssh-clients-7.1p2-1.x86_64.rpm 将作为 openssh-clients-5.3p1-114.el6_7.x86_64 的更新</div><div class="line">诊断 openssh-server-7.1p2-1.x86_64.rpm: openssh-server-7.1p2-1.x86_64</div><div class="line">openssh-server-7.1p2-1.x86_64.rpm 将作为 openssh-server-5.3p1-114.el6_7.x86_64 的更新</div><div class="line">解决依赖关系</div><div class="line">--&gt; 执行事务检查</div><div class="line">---&gt; Package openssh.x86_64 0:5.3p1-114.el6_7 will be 升级</div><div class="line">---&gt; Package openssh.x86_64 0:7.1p2-1 will be an update</div><div class="line">---&gt; Package openssh-clients.x86_64 0:5.3p1-114.el6_7 will be 升级</div><div class="line">---&gt; Package openssh-clients.x86_64 0:7.1p2-1 will be an update</div><div class="line">---&gt; Package openssh-server.x86_64 0:5.3p1-114.el6_7 will be 升级</div><div class="line">---&gt; Package openssh-server.x86_64 0:7.1p2-1 will be an update</div><div class="line">--&gt; 完成依赖关系计算</div><div class="line"></div><div class="line">依赖关系解决</div><div class="line"></div><div class="line">========================================================================================================================================================================================================================================================================</div><div class="line"> 软件包                                                            架构                                                     版本                                                      仓库                                                                               大小</div><div class="line">========================================================================================================================================================================================================================================================================</div><div class="line">正在升级:</div><div class="line"> openssh                                                           x86_64                                                   7.1p2-1                                                   /openssh-7.1p2-1.x86_64                                                           1.9 M</div><div class="line"> openssh-clients                                                   x86_64                                                   7.1p2-1                                                   /openssh-clients-7.1p2-1.x86_64                                                   2.0 M</div><div class="line"> openssh-server                                                    x86_64                                                   7.1p2-1                                                   /openssh-server-7.1p2-1.x86_64                                                    933 k</div><div class="line"></div><div class="line">事务概要</div><div class="line">========================================================================================================================================================================================================================================================================</div><div class="line">Upgrade       3 Package(s)</div><div class="line"></div><div class="line">总文件大小：4.8 M</div><div class="line">确定吗？[y/N]：y</div><div class="line">下载软件包：</div><div class="line">运行 rpm_check_debug </div><div class="line">执行事务测试</div><div class="line">事务测试成功</div><div class="line">执行事务</div><div class="line">  正在升级   : openssh-7.1p2-1.x86_64                                                                                                                                                                                                                                     1/6 </div><div class="line">  正在升级   : openssh-server-7.1p2-1.x86_64                                                                                                                                                                                                                              2/6 </div><div class="line">warning: /etc/ssh/sshd_config created as /etc/ssh/sshd_config.rpmnew</div><div class="line">  正在升级   : openssh-clients-7.1p2-1.x86_64                                                                                                                                                                                                                             3/6 </div><div class="line">  清理       : openssh-clients-5.3p1-114.el6_7.x86_64                                                                                                                                                                                                                     4/6 </div><div class="line">  清理       : openssh-server-5.3p1-114.el6_7.x86_64                                                                                                                                                                                                                      5/6 </div><div class="line">  清理       : openssh-5.3p1-114.el6_7.x86_64                                                                                                                                                                                                                             6/6 </div><div class="line">  Verifying  : openssh-server-7.1p2-1.x86_64                                                                                                                                                                                                                              1/6 </div><div class="line">  Verifying  : openssh-clients-7.1p2-1.x86_64                                                                                                                                                                                                                             2/6 </div><div class="line">  Verifying  : openssh-7.1p2-1.x86_64                                                                                                                                                                                                                                     3/6 </div><div class="line">  Verifying  : openssh-server-5.3p1-114.el6_7.x86_64                                                                                                                                                                                                                      4/6 </div><div class="line">  Verifying  : openssh-clients-5.3p1-114.el6_7.x86_64                                                                                                                                                                                                                     5/6 </div><div class="line">  Verifying  : openssh-5.3p1-114.el6_7.x86_64                                                                                                                                                                                                                             6/6 </div><div class="line"></div><div class="line">更新完毕:</div><div class="line">  openssh.x86_64 0:7.1p2-1                                                            openssh-clients.x86_64 0:7.1p2-1                                                            openssh-server.x86_64 0:7.1p2-1                                                           </div><div class="line"></div><div class="line">完毕！</div></pre></td></tr></table></figure>
<h4 id="更新SSH配置文件"><a href="#更新SSH配置文件" class="headerlink" title="更新SSH配置文件"></a>更新SSH配置文件</h4><p>将配置文件更新为新版本，避免某些参数变更造成无法远程登录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cp /etc/ssh/sshd_config.rpmnew /etc/ssh/sshd_config</div></pre></td></tr></table></figure></p>
<p>OpenSSH默认配置不支持ROOT登陆，如需ROOT登陆修改以下配置</p>
<p>将<code>/etc/ssh/sshd_config</code>中<code>#PermitRootLogin prohibit-password</code>修改为<code>PermitRootLogin yes</code></p>
<h4 id="重启SSH服务"><a href="#重启SSH服务" class="headerlink" title="重启SSH服务"></a>重启SSH服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /etc/init.d/sshd restart</div></pre></td></tr></table></figure>
<h4 id="查看已安装的RPM"><a href="#查看已安装的RPM" class="headerlink" title="查看已安装的RPM"></a>查看已安装的RPM</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ rpm -qa | grep openssh</div><div class="line">openssh-7.1p2-1.x86_64</div><div class="line">openssh-clients-7.1p2-1.x86_64</div><div class="line">openssh-server-7.1p2-1.x86_64</div></pre></td></tr></table></figure>
<h4 id="验证已安装的版本"><a href="#验证已安装的版本" class="headerlink" title="验证已安装的版本"></a>验证已安装的版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ssh -V                        </div><div class="line">OpenSSH_7.1p2, OpenSSL 1.0.1e-fips 11 Feb 2013</div></pre></td></tr></table></figure>
<p><strong>重要！退出之前打开一个新的SSH会话连接到你的服务器，以确保一切正常！如果你有问题，可用以下命令降级到之前版本</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ yum downgrade openssh-server openssh-clients openssh</div><div class="line">$ cp /etc/ssh/sshd_config.rpmnew /etc/ssh/sshd_config</div><div class="line">$ /etc/init.d/sshd restart</div></pre></td></tr></table></figure></p>
<h4 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h4><p>在制作的时候你可能会发现有些依赖包没有，你可以使用yum工具自带的搜索功能，比如，当提示你libxml.h找不到时，你可以使用命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum provides */libxml.h</div></pre></td></tr></table></figure></p>
<p>找到对应的包名后，即可以使用以下命令进行安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install -y rpm-package-name</div></pre></td></tr></table></figure></p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://thecpaneladmin.com/upgrading-openssh-on-centos-5/" target="_blank" rel="external">http://thecpaneladmin.com/upgrading-openssh-on-centos-5/</a><br><a href="http://www.guoziweb.com/2015/11/26/centos-6-2%E5%8D%87%E7%BA%A7openssh-7-1/" target="_blank" rel="external">http://www.guoziweb.com/2015/11/26/centos-6-2%E5%8D%87%E7%BA%A7openssh-7-1/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[开启ControlPersist来大幅度提升SSH的连接速度]]></title>
      <url>http://www.hi-linux.com/posts/21998.html</url>
      <content type="html"><![CDATA[<p>背景介绍</p>
<p>Ansible创建ssh通道相对很慢,虽然ansible在同一个task里面是并行的控制多台受控端.但是每一个task都需要和受控端创建ssh通道,非常影响效率。</p>
<p>开启SSH的ControlMaster并持久化socket连接，可以加速Ansible的执行速度，不需要在每次都经历SSH认证，并且只需要修改ssh client就行了。单个服务器可能节约的时间仅在1秒左右，而上百台的服务器就能节省约1分钟左右的时间。</p>
<p>支持这个特性需要比较新的openssh 5.6以上,CentOS6.x默认的版本太旧了并且官方yum仓库中的版本也很旧。</p>
<p>服务器环境</p>
<p>CentOS 6.7 x86_64 Minimal<br><a id="more"></a></p>
<h3 id="1-编译生成OpenSSH-RPM"><a href="#1-编译生成OpenSSH-RPM" class="headerlink" title="1. 编译生成OpenSSH RPM"></a>1. 编译生成OpenSSH RPM</h3><h4 id="1-1-安装编译所需工具"><a href="#1-1-安装编译所需工具" class="headerlink" title="1.1 安装编译所需工具"></a>1.1 安装编译所需工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo yum -y groupinstall <span class="string">"Development tools"</span></div><div class="line">$ sudo yum -y install pam-devel rpm-build rpmdevtools zlib-devel krb5-devel tcp_wrappers tcp_wrappers-devel tcp_wrappers-libs libX11-devel xmkmf libXt-devel</div></pre></td></tr></table></figure>
<h4 id="1-2-配置RPM编译环境"><a href="#1-2-配置RPM编译环境" class="headerlink" title="1.2 配置RPM编译环境"></a>1.2 配置RPM编译环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~</div><div class="line">$ mkdir rpmbuild</div><div class="line">$ <span class="built_in">cd</span> rpmbuild</div><div class="line">$ mkdir -pv &#123;BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS,TMP&#125;</div><div class="line"></div><div class="line">$ <span class="built_in">cd</span> ~</div><div class="line">$ vim .rpmmacros</div><div class="line"></div><div class="line">%_topdir /root/rpmbuild</div><div class="line">%_tmppath /root/rpmbuild/TMP</div></pre></td></tr></table></figure>
<h4 id="1-3-升级OpenSSL到最新"><a href="#1-3-升级OpenSSL到最新" class="headerlink" title="1.3 升级OpenSSL到最新"></a>1.3 升级OpenSSL到最新</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum update openssl</div></pre></td></tr></table></figure>
<h4 id="1-4-编译OpenSSH-RPM"><a href="#1-4-编译OpenSSH-RPM" class="headerlink" title="1.4 编译OpenSSH RPM"></a>1.4 编译OpenSSH RPM</h4><h5 id="1-4-1-下载源码包"><a href="#1-4-1-下载源码包" class="headerlink" title="1.4.1 下载源码包"></a>1.4.1 下载源码包</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/rpmbuild/SOURCES/</div><div class="line">$ wget http://openbsd.hk/pub/OpenBSD/OpenSSH/portable/openssh-6.6p1.tar.gz</div><div class="line">$ wget http://ftp.riken.jp/Linux/momonga/6/Everything/SOURCES/x11-ssh-askpass-1.2.4.1.tar.gz</div></pre></td></tr></table></figure>
<h5 id="1-4-2-配置SPEC文件"><a href="#1-4-2-配置SPEC文件" class="headerlink" title="1.4.2 配置SPEC文件"></a>1.4.2 配置SPEC文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/rpmbuild/SPECS</div><div class="line">$ tar xfz ../SOURCES/openssh-6.6p1.tar.gz openssh-6.6p1/contrib/redhat/openssh.spec</div><div class="line">$ mv openssh-6.6p1/contrib/redhat/openssh.spec openssh-6.6p1.spec</div><div class="line">$ rm -rf openssh-6.6p1</div><div class="line">$ sed -i <span class="_">-e</span> <span class="string">"s/%define no_gnome_askpass 0/%define no_gnome_askpass 1/g"</span> openssh-6.6p1.spec</div><div class="line">$ sed -i <span class="_">-e</span> <span class="string">"s/%define no_x11_askpass 0/%define no_x11_askpass 1/g"</span> openssh-6.6p1.spec</div><div class="line">$ sed -i <span class="_">-e</span> <span class="string">"s/BuildPreReq/BuildRequires/g"</span> openssh-6.6p1.spec</div></pre></td></tr></table></figure>
<h5 id="1-4-3-编译生成RPM"><a href="#1-4-3-编译生成RPM" class="headerlink" title="1.4.3 编译生成RPM"></a>1.4.3 编译生成RPM</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/rpmbuild/SPECS</div><div class="line">$ rpmbuild -ba openssh-6.6p1.spec</div></pre></td></tr></table></figure>
<h5 id="1-4-4-查看生成的RPM"><a href="#1-4-4-查看生成的RPM" class="headerlink" title="1.4.4 查看生成的RPM"></a>1.4.4 查看生成的RPM</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/rpmbuild/RPMS/x86_64</div><div class="line">$ ls openssh-*</div><div class="line">openssh-6.6p1-1.x86_64.rpm  openssh-clients-6.6p1-1.x86_64.rpm  openssh-debuginfo-6.6p1-1.x86_64.rpm  openssh-server-6.6p1-1.x86_64.rpm</div></pre></td></tr></table></figure>
<h5 id="1-4-5-安装生成的RPM"><a href="#1-4-5-安装生成的RPM" class="headerlink" title="1.4.5 安装生成的RPM"></a>1.4.5 安装生成的RPM</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/rpmbuild/RPMS/x86_64</div><div class="line">yum install openssh-server-6.6p1-1.x86_64.rpm openssh-6.6p1-1.x86_64.rpm openssh-clients-6.6p1-1.x86_64.rpm</div><div class="line"></div><div class="line">依赖关系解决</div><div class="line"></div><div class="line">========================================================================================================================================================================================================================================================================</div><div class="line"> 软件包                                                            架构                                                     版本                                                      仓库                                                                               大小</div><div class="line">========================================================================================================================================================================================================================================================================</div><div class="line">正在升级:</div><div class="line"> openssh                                                           x86_64                                                   6.6p1-1                                                   /openssh-6.6p1-1.x86_64                                                           1.7 M</div><div class="line"> openssh-clients                                                   x86_64                                                   6.6p1-1                                                   /openssh-clients-6.6p1-1.x86_64                                                   1.8 M</div><div class="line"> openssh-server                                                    x86_64                                                   6.6p1-1                                                   /openssh-server-6.6p1-1.x86_64                                                    892 k</div><div class="line"></div><div class="line">事务概要</div><div class="line">========================================================================================================================================================================================================================================================================</div><div class="line">Upgrade       3 Package(s)</div><div class="line"></div><div class="line">总文件大小：4.4 M</div><div class="line">确定吗？[y/N]：y</div><div class="line">下载软件包：</div><div class="line">运行 rpm_check_debug </div><div class="line">执行事务测试</div><div class="line">事务测试成功</div><div class="line">执行事务</div><div class="line">  正在升级   : openssh-6.6p1-1.x86_64                                                                                                                                                                                                                                     1/6 </div><div class="line">  正在升级   : openssh-clients-6.6p1-1.x86_64                                                                                                                                                                                                                             2/6 </div><div class="line">  正在升级   : openssh-server-6.6p1-1.x86_64                                                                                                                                                                                                                              3/6 </div><div class="line">warning: /etc/ssh/sshd_config created as /etc/ssh/sshd_config.rpmnew</div><div class="line">  清理       : openssh-server-5.3p1-112.el6_7.x86_64                                                                                                                                                                                                                      4/6 </div><div class="line">  清理       : openssh-clients-5.3p1-112.el6_7.x86_64                                                                                                                                                                                                                     5/6 </div><div class="line">  清理       : openssh-5.3p1-112.el6_7.x86_64                                                                                                                                                                                                                             6/6 </div><div class="line">  Verifying  : openssh-6.6p1-1.x86_64                                                                                                                                                                                                                                     1/6 </div><div class="line">  Verifying  : openssh-clients-6.6p1-1.x86_64                                                                                                                                                                                                                             2/6 </div><div class="line">  Verifying  : openssh-server-6.6p1-1.x86_64                                                                                                                                                                                                                              3/6 </div><div class="line">  Verifying  : openssh-clients-5.3p1-112.el6_7.x86_64                                                                                                                                                                                                                     4/6 </div><div class="line">  Verifying  : openssh-5.3p1-112.el6_7.x86_64                                                                                                                                                                                                                             5/6 </div><div class="line">  Verifying  : openssh-server-5.3p1-112.el6_7.x86_64                                                                                                                                                                                                                      6/6 </div><div class="line"></div><div class="line">更新完毕:</div><div class="line">  openssh.x86_64 0:6.6p1-1                                                            openssh-clients.x86_64 0:6.6p1-1                                                            openssh-server.x86_64 0:6.6p1-1</div><div class="line"></div><div class="line">完毕！</div></pre></td></tr></table></figure>
<h5 id="1-4-6-更新SSH配置文件，避免某些参数变更造成无法远程登录"><a href="#1-4-6-更新SSH配置文件，避免某些参数变更造成无法远程登录" class="headerlink" title="1.4.6 更新SSH配置文件，避免某些参数变更造成无法远程登录"></a>1.4.6 更新SSH配置文件，避免某些参数变更造成无法远程登录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo cp /etc/ssh/sshd_config.rpmnew /etc/ssh/sshd_config</div><div class="line">$ sudo /etc/init.d/sshd restart</div></pre></td></tr></table></figure>
<h5 id="1-4-7-查看已安装的RPM"><a href="#1-4-7-查看已安装的RPM" class="headerlink" title="1.4.7 查看已安装的RPM"></a>1.4.7 查看已安装的RPM</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo rpm -qa | grep openssh</div><div class="line">openssh-clients-6.6p1-1.x86_64</div><div class="line">openssh-server-6.6p1-1.x86_64</div><div class="line">openssh-6.6p1-1.x86_64</div></pre></td></tr></table></figure>
<h3 id="2-配置ControlMaster"><a href="#2-配置ControlMaster" class="headerlink" title="2. 配置ControlMaster"></a>2. 配置ControlMaster</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~</div><div class="line">$ vim .ssh/config</div><div class="line">Host *</div><div class="line">  Compression yes</div><div class="line">  ServerAliveInterval 60</div><div class="line">  ServerAliveCountMax 5</div><div class="line">  ControlMaster auto</div><div class="line">  ControlPath ~/.ssh/sockets/%r@%h-%p</div><div class="line">  ControlPersist 4h</div><div class="line"></div><div class="line">创建目录用于存放socket文件</div><div class="line">mkdir ~/.ssh/sockets</div></pre></td></tr></table></figure>
<h3 id="3-用cmc工具管理sockets"><a href="#3-用cmc工具管理sockets" class="headerlink" title="3. 用cmc工具管理sockets"></a>3. 用cmc工具管理sockets</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~</div><div class="line">$ sudo yum install http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</div><div class="line">$ sudo yum install git</div><div class="line">$ git <span class="built_in">clone</span> https://github.com/ClockworkNet/cmc.git</div><div class="line">$ cp cmc/cmc /usr/<span class="built_in">local</span>/bin</div></pre></td></tr></table></figure>
<h3 id="4-使用与测试"><a href="#4-使用与测试" class="headerlink" title="4. 使用与测试"></a>4. 使用与测试</h3><h4 id="4-1-查看当前的sockets"><a href="#4-1-查看当前的sockets" class="headerlink" title="4.1 查看当前的sockets"></a>4.1 查看当前的sockets</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cmc <span class="_">-l</span></div><div class="line">No ControlMaster connection sockets found.</div></pre></td></tr></table></figure>
<h4 id="4-2-统计第一次的执行时间"><a href="#4-2-统计第一次的执行时间" class="headerlink" title="4.2 统计第一次的执行时间"></a>4.2 统计第一次的执行时间</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ time ssh root@server02 <span class="string">'hostname -s'</span></div><div class="line">Mike-Slave-01</div><div class="line">ssh root@server02 <span class="string">'hostname -s'</span>  0.01s user 0.00s system 14% cpu 0.093 total</div></pre></td></tr></table></figure>
<p>耗时0.093秒</p>
<h4 id="4-3-查看当前的sockets"><a href="#4-3-查看当前的sockets" class="headerlink" title="4.3 查看当前的sockets"></a>4.3 查看当前的sockets</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cmc <span class="_">-l</span></div><div class="line">server02</div><div class="line">  Master running (pid=107064, cmd=ssh: /root/.ssh/sockets/root@server02-22 [mux], start=15:03:46)</div><div class="line">  Socket: /root/.ssh/root@server02-22</div></pre></td></tr></table></figure>
<h4 id="4-4-统计有socket情况下的执行时间"><a href="#4-4-统计有socket情况下的执行时间" class="headerlink" title="4.4 统计有socket情况下的执行时间"></a>4.4 统计有socket情况下的执行时间</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ time ssh root@server02 <span class="string">'hostname -s'</span></div><div class="line">Mike-Slave-01</div><div class="line">ssh root@server02 <span class="string">'hostname -s'</span>  0.00s user 0.00s system 38% cpu 0.008 total</div></pre></td></tr></table></figure>
<p>耗时0.008秒</p>
<h4 id="4-5-删除当前所有的sockets"><a href="#4-5-删除当前所有的sockets" class="headerlink" title="4.5 删除当前所有的sockets"></a>4.5 删除当前所有的sockets</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cmc -X</div><div class="line">server02 - Closing ControlMaster connection</div><div class="line">  Exit request sent.</div></pre></td></tr></table></figure>
<h4 id="4-6-统计没有socket情况下的执行时间"><a href="#4-6-统计没有socket情况下的执行时间" class="headerlink" title="4.6 统计没有socket情况下的执行时间"></a>4.6 统计没有socket情况下的执行时间</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ time ssh root@server02 <span class="string">'hostname -s'</span></div><div class="line">Mike-Slave-01</div><div class="line">ssh root@server02 <span class="string">'hostname -s'</span>  0.00s user 0.00s system 9% cpu 0.090 total</div></pre></td></tr></table></figure>
<p>仍然是0.090秒</p>
<h4 id="4-7-用Ansible验证"><a href="#4-7-用Ansible验证" class="headerlink" title="4.7 用Ansible验证"></a>4.7 用Ansible验证</h4><p>未持久化socket前需要1.7秒</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">time ansible server02  -m ping                                       </div><div class="line">server02 | success &gt;&gt; &#123;</div><div class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </div><div class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">ansible server02 -m ping  0.22s user 0.29s system 29% cpu 1.736 total</div></pre></td></tr></table></figure>
<p>持久化后375毫秒</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">time ansible server02  -m ping</div><div class="line">server02 | success &gt;&gt; &#123;</div><div class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </div><div class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">ansible server02 -m ping  0.19s user 0.10s system 78% cpu 0.375 total</div></pre></td></tr></table></figure>
<h3 id="5-结论"><a href="#5-结论" class="headerlink" title="5. 结论"></a>5. 结论</h3><p>在开启了ControlMaster的持久化之后，SSH在建立了sockets之后，节省了每次验证和创建连接的时间。<br>在网络状况不是特别理想，尤其是跨互联网的情况下，所带来的性能提升是非常可观的，而即使在局域网内部使用，每台服务器节省1秒左右的时间，同时操作上百台服务器时，节省的时间也是非常可观的，非常值得拥有。</p>
<h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h3><p>在应用于线上网络更为复杂的环境中时效果更为明显,在海外美国操作新加坡一次任务从5秒优化到1秒.</p>
<h3 id="7-参考资料"><a href="#7-参考资料" class="headerlink" title="7.参考资料"></a>7.参考资料</h3><p><a href="http://www.ptudor.net/linux/openssh/" target="_blank" rel="external">http://www.ptudor.net/linux/openssh/</a><br><a href="http://jpmens.net/2012/06/22/ssh-controlmaster/" target="_blank" rel="external">http://jpmens.net/2012/06/22/ssh-controlmaster/</a><br><a href="https://github.com/ClockworkNet/cmc" target="_blank" rel="external">https://github.com/ClockworkNet/cmc</a><br><a href="http://www.kisops.com/?p=77" target="_blank" rel="external">http://www.kisops.com/?p=77</a><br><a href="http://heylinux.com/archives/3152.html" target="_blank" rel="external">http://heylinux.com/archives/3152.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[利用ControlPersist特性自动登陆SSH服务器]]></title>
      <url>http://www.hi-linux.com/posts/39001.html</url>
      <content type="html"><![CDATA[<h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><p>很多公司都使用静态密码+动态密码的方式登陆跳板机，某些还会强制一个动态密码只能登陆一次，于是我们面临着等一分钟才能登陆一次跳板机，很不方便。本文介绍一种在本机的设置，免除每次输入密码的方法。</p>
<h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><p>此功能是利用SSH的ControlPersist特性，SSH版本必须是5.6或以上版本才可使用ControlPersist特性。升级SSH可参考<a href="http://imike.me/2016/04/13/CentOS6%E4%B8%8B%E5%8D%87%E7%BA%A7OpenSSH%E8%87%B37.1/" target="_blank" rel="external">CentOS6下升级OpenSSH至7.1</a>一文。</p>
<h4 id="多条连接共享"><a href="#多条连接共享" class="headerlink" title="多条连接共享"></a>多条连接共享</h4><p>如果你需要在多个窗口中打开到同一个服务器的连接，而不想每次都输入用户名，密码，或是等待连接建立，那么你可以配置SSH的连接共享选项，在本地打开你的SSH配置文件，通常它们位于~/.ssh/config，然后添加下面2行(ControlMaster配合ControlPath一起使用)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ControlMaster auto</div><div class="line">ControlPath /tmp/ssh_mux_%h_%p_%r</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>现在试试断开你与服务器的连接，并建立一条新连接，然后打开一个新窗口，再创建一条连接，你会发现，第二条连接几乎是在瞬间就建立好了。</p>
<p>Windows用户</p>
<p>如果你是Windows用户，很不幸，最流行的开源SSH客户端Putty并不支持这个特性，但是Windows上也有OpenSSH的实现，比如这个<a href="https://www.itefix.net/copssh" target="_blank" rel="external">Copssh</a></p>
<p>文件传输</p>
<p>连接共享不止可以帮助你共享多个SSH连接，如果你需要通过SFTP与服务器传输文件，你会发现，它们使用的依然是同一条连接，如果你使用的Bash，你会发现，你甚至SSH甚至支持Tab对服务器端文件进行自动补全，共享连接选项对于那些需要借助SSH的工具，比如rsync，git等等也同样有效。</p>
<h4 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h4><p>如果你发现自己每条需要连接同一个服务器无数次，那么长连接选项就是为你准备的。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ControlPersist yes</div></pre></td></tr></table></figure>
<p>打开之后即使关闭了所有的已连接ssh连接，一段时间内也能无需密码重新连接。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ControlPersist 4h</div></pre></td></tr></table></figure>
<p>每次通过SSH与服务器建立连接之后，这条连接将被保持4个小时，即使在你退出服务器之后这条连接依然可以重用，因此，在你下一次(4小时之内)登录服务器时，你会发现连接以闪电般的速度建立完成，这个选项对于通过scp拷贝多个文件提速尤其明显，因为你不在需要为每个文件做单独的认证了。</p>
<p>Compression为压缩选项，打开之后加快数据传输速度。</p>
<h4 id="具体配置方法"><a href="#具体配置方法" class="headerlink" title="具体配置方法"></a>具体配置方法</h4><p>此时我们打开ssh客户端/shell命令行，编辑~/.ssh/config文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">vim ~/.ssh/config</div><div class="line"></div><div class="line">Host *</div><div class="line">     ControlPersist yes</div><div class="line">     ControlMaster auto</div><div class="line">     ControlPath ~/.ssh/%r@%h-%p</div><div class="line">     Compression yes</div></pre></td></tr></table></figure>
<p>如果登陆服务器地址为<code>web.imike.me</code>，通常每次都要输入<code>ssh web.imike.me</code>这样一长串。优化上面的配置可减少输入，提高效率。如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Host web</div><div class="line">      HostName web.imike.me</div><div class="line">      ControlPersist yes</div><div class="line">      ControlMaster auto</div><div class="line">      ControlPath ~/.ssh/%r@%h-%p</div><div class="line">      Compression yes</div></pre></td></tr></table></figure>
<p>这样每次只需输入ssh web即可登陆。大家自行修改HostName和ControlPath字段就可以。</p>
<p>用指定用户名和指定端口登陆，可以使用下面的代替，同理使用<code>ssh web02</code>命令登陆。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Host web02</div><div class="line">      HostName 202.202.202.202</div><div class="line">      User mike</div><div class="line">	  Port 2698</div><div class="line">      ControlPersist yes</div><div class="line">      ControlMaster auto</div><div class="line">      ControlPath ~/.ssh/%r@%h-%p</div><div class="line">      Compression yes</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://blog.csdn.net/xuanwu_yan/article/details/45666797" target="_blank" rel="external">http://blog.csdn.net/xuanwu_yan/article/details/45666797</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TPCC-MySQL的安装与使用]]></title>
      <url>http://www.hi-linux.com/posts/38534.html</url>
      <content type="html"><![CDATA[<h3 id="什么是TPC-C"><a href="#什么是TPC-C" class="headerlink" title="什么是TPC-C"></a>什么是TPC-C</h3><p>TPC-C是专门针对联机交易处理系统（OLTP系统）的规范，一般情况下我们也把这类系统称为业务处理系统。</p>
<p>TPC-C是TPC(Transaction Processing Performance Council)组织发布的一个测试规范，用于模拟测试复杂的在线事务处理系统。其测试结果包括每分钟事务数(tpmC)，以及每事务的成本(Price/tpmC)。在进行大压力下MySQL的一些行为时经常使用。</p>
<h3 id="什么是TPCC-MYSQL"><a href="#什么是TPCC-MYSQL" class="headerlink" title="什么是TPCC-MYSQL"></a>什么是TPCC-MYSQL</h3><p>TPCC-MYSQL是percona基于TPC-C(下面简写成TPCC)衍生出来的产品，专用于MySQL基准测试。用来测试数据库的压力工具，模拟一个电商的业务，主要的业务有新增订单，库存查询，发货，支付等模块的测试。<br><a id="more"></a></p>
<h3 id="percona官方版本"><a href="#percona官方版本" class="headerlink" title="percona官方版本"></a>percona官方版本</h3><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><p>MySQL 5.1</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install mysql-devel</div></pre></td></tr></table></figure>
<p>MySQL 5.6</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install mysql-community-devel</div></pre></td></tr></table></figure>
<h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/Percona-Lab/tpcc-mysql</div><div class="line"><span class="built_in">cd</span> tpcc-mysql/src</div><div class="line">make</div></pre></td></tr></table></figure>
<p>如果make没报错，就会在tpcc-mysql文件夹下生成tpcc二进制命令行工具tpcc_load、tpcc_start</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>tpcc-mysql的业务逻辑及其相关的几个表作用如下</p>
<blockquote>
<p>New-Order：新订单，一次完整的订单事务，几乎涉及到全部表<br>Payment：支付，主要对应orders、history表<br>Order-Status：订单状态，主要对应 orders、order_line表<br>Delivery：发货，主要对应order_line表<br>Stock-Level：库存，主要对应stock表</p>
</blockquote>
<p>其它表说明</p>
<blockquote>
<p>客户：主要对应customer表<br>地区：主要对应district表<br>商品：主要对应item表<br>仓库：主要对应warehouse表</p>
</blockquote>
<h4 id="TPCC测试前准备"><a href="#TPCC测试前准备" class="headerlink" title="TPCC测试前准备"></a>TPCC测试前准备</h4><p>查看README文件的内容(简单实用的说明)</p>
<blockquote>
<p>1.Build binaries</p>
<p>cd scr ; make ( you should have mysql_config available in $PATH)</p>
<p>2.Load data</p>
<p>create database mysqladmin create tpcc1000<br>create tables mysql tpcc1000 &lt; create_table.sql<br>create indexes and FK ( this step can be done after loading data) mysql tpcc1000 &lt; add_fkey_idx.sql</p>
<p>populate data</p>
<p>simple step tpcc_load -h127.0.0.1 -d tpcc1000 -u root -p “” -w 1000 |hostname:port| |dbname| |user| |password| |WAREHOUSES| ref. tpcc_load –help for all options<br>load data in parallel check load.sh script</p>
<p>3.start benchmark<br>./tpcc_start -h127.0.0.1 -P3306 -dtpcc1000 -uroot -w1000 -c32 -r10 -l10800<br>|hostname| |port| |dbname| |user| |WAREHOUSES| |CONNECTIONS| |WARMUP TIME| |BENCHMARK TIME|<br>ref. tpcc_start –help for all options</p>
</blockquote>
<p>初始化测试库环境，先创建一个测试库然后导入create_table.sql,顾名思义是创表的sql语句</p>
<p>创建tpcc数据库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$mysql</span> -uroot -p <span class="_">-e</span> <span class="string">"CREATE DATABASE TPCC DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;"</span></div></pre></td></tr></table></figure>
<p>初始化表结构</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$mysql</span> -uroot -p TPCC &lt;./create_table.sql</div></pre></td></tr></table></figure>
<p>创建相关索引和主外键<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$mysql</span> -uroot -p TPCC &lt;./add_fkey_idx.sql</div></pre></td></tr></table></figure></p>
<p>显示创建的表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$mysql</span> -uroot -p <span class="_">-e</span> <span class="string">"show tables from  TPCC"</span></div><div class="line">+--------------------+</div><div class="line">| Tables_in_tpcctest |</div><div class="line">+--------------------+</div><div class="line">| customer           |</div><div class="line">| district           |</div><div class="line">| <span class="built_in">history</span>            |</div><div class="line">| item               |</div><div class="line">| new_orders         |</div><div class="line">| order_line         |</div><div class="line">| orders             |</div><div class="line">| stock              |</div><div class="line">| warehouse          |</div><div class="line">+--------------------+</div></pre></td></tr></table></figure></p>
<p>初始化完毕后，就可以开始加载测试数据了</p>
<p>tpcc_load用法如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Usage: tpcc_load -h server_host -P port <span class="_">-d</span> database_name -u mysql_user -p mysql_password -w warehouses <span class="_">-l</span> part -m min_wh -n max_wh</div><div class="line">* [part]: 1=ITEMS 2=WAREHOUSE 3=CUSTOMER 4=ORDERS</div></pre></td></tr></table></figure>
<blockquote>
<p>选项[warehouse]意为指定测试库下的仓库数量<br>选项[part]为只创建数据到[part]对应的表中<br>选项[min_wh]、[max_wh]为min_wid max_wid</p>
</blockquote>
<p>在这里，需要注意的是tpcc默认会读取<code>/var/lib/mysql/mysql.sock</code>这个socket 文件。因此，如果你的socket文件不在相应路径的话，可以做个软连接，或者通过TCP/IP的方式连接测试服务器</p>
<p>真实测试场景中，仓库数一般不建议少于100个，视服务器硬件配置而定，如果是配备了SSD或者PCIE SSD这种高IOPS设备的话，建议最少不低于1000个。仓库越多，造数据的时间越长，需要耐心等待</p>
<p>执行下面的命令，开始灌入测试数据：选择单进程或并发加载(本人的是虚拟机，仓库数就弄了10,省得压死了，哈哈)</p>
<h5 id="单进程加载"><a href="#单进程加载" class="headerlink" title="单进程加载"></a>单进程加载</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$./tpcc_load -h 127.0.0.1 -P 3306 <span class="_">-d</span> TPCC -u root -p 000000 -w 10</div></pre></td></tr></table></figure>
<h5 id="并发加载"><a href="#并发加载" class="headerlink" title="并发加载"></a>并发加载</h5><p>需根据实际情况修改一下</p>
<p>方法一</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$./load.sh TPCC 10</div></pre></td></tr></table></figure>
<p>通过load.sh并发加载数据(创建10个warsehouse)</p>
<p>造数据成功后，会提示：…DATA LOADING COMPLETED SUCCESSFULLY.</p>
<p>方法二</p>
<p>GitHub上另一个并行加载脚本: <a href="https://gist.github.com/sh2/3458844" target="_blank" rel="external">https://gist.github.com/sh2/3458844</a></p>
<p>根据实际情况情况修改用户名、密码、数据库名，初始仓库为10个。</p>
<p>由于最新版本tpcc_load使用方法需要显示使用参数，修改脚本如下</p>
<p>vim tpcc_load_parallel.sh</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="comment"># Configration</span></div><div class="line"></div><div class="line">MYSQL=/usr/bin/mysql</div><div class="line">TPCCLOAD=./tpcc_load</div><div class="line">TABLESQL=./create_table.sql</div><div class="line">CONSTRAINTSQL=./add_fkey_idx.sql</div><div class="line">DEGREE=`getconf _NPROCESSORS_ONLN`</div><div class="line"></div><div class="line">SERVER=localhost</div><div class="line">DATABASE=tpcc</div><div class="line">USER=tpcc</div><div class="line">PASS=tpcc</div><div class="line">WAREHOUSE=10</div><div class="line"></div><div class="line"><span class="comment"># Load</span></div><div class="line"></div><div class="line"><span class="built_in">set</span> <span class="_">-e</span></div><div class="line"><span class="variable">$MYSQL</span> -u <span class="variable">$USER</span> -p<span class="variable">$PASS</span> <span class="_">-e</span> <span class="string">"DROP DATABASE IF EXISTS <span class="variable">$DATABASE</span>"</span></div><div class="line"><span class="variable">$MYSQL</span> -u <span class="variable">$USER</span> -p<span class="variable">$PASS</span> <span class="_">-e</span> <span class="string">"CREATE DATABASE <span class="variable">$DATABASE</span>"</span></div><div class="line"><span class="variable">$MYSQL</span> -u <span class="variable">$USER</span> -p<span class="variable">$PASS</span> <span class="variable">$DATABASE</span> &lt; <span class="variable">$TABLESQL</span></div><div class="line"><span class="variable">$MYSQL</span> -u <span class="variable">$USER</span> -p<span class="variable">$PASS</span> <span class="variable">$DATABASE</span> &lt; <span class="variable">$CONSTRAINTSQL</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">'Loading item ...'</span></div><div class="line"><span class="variable">$TPCCLOAD</span>  -h <span class="variable">$SERVER</span> <span class="_">-d</span> <span class="variable">$DATABASE</span> -u <span class="variable">$USER</span> -p <span class="variable">$PASS</span> -w <span class="variable">$WAREHOUSE</span> 1 1 -n <span class="variable">$WAREHOUSE</span> &gt; /dev/null</div><div class="line"></div><div class="line"><span class="built_in">set</span> +e</div><div class="line">STATUS=0</div><div class="line"><span class="built_in">trap</span> <span class="string">'STATUS=1; kill 0'</span> INT TERM</div><div class="line"></div><div class="line"><span class="keyword">for</span> ((WID = 1; WID &lt;= WAREHOUSE; WID++)); <span class="keyword">do</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"Loading warehouse id <span class="variable">$WID</span> ..."</span></div><div class="line">    </div><div class="line">    (</div><div class="line">        <span class="built_in">set</span> <span class="_">-e</span></div><div class="line">        </div><div class="line">        <span class="comment"># warehouse, stock, district</span></div><div class="line">        <span class="variable">$TPCCLOAD</span> -h <span class="variable">$SERVER</span> <span class="_">-d</span> <span class="variable">$DATABASE</span> -u <span class="variable">$USER</span> -p <span class="variable">$PASS</span> -w <span class="variable">$WAREHOUSE</span> 2 -m <span class="variable">$WID</span>  -n <span class="variable">$WID</span> &gt; /dev/null</div><div class="line">        </div><div class="line">        <span class="comment"># customer, history</span></div><div class="line">        <span class="variable">$TPCCLOAD</span> -h <span class="variable">$SERVER</span> <span class="_">-d</span> <span class="variable">$DATABASE</span> -u <span class="variable">$USER</span> -p <span class="variable">$PASS</span> -w <span class="variable">$WAREHOUSE</span> 3 -m <span class="variable">$WID</span>  -n <span class="variable">$WID</span> &gt; /dev/null</div><div class="line">        </div><div class="line">        <span class="comment"># orders, new_orders, order_line</span></div><div class="line">        <span class="variable">$TPCCLOAD</span> -h <span class="variable">$SERVER</span> <span class="_">-d</span> <span class="variable">$DATABASE</span> -u <span class="variable">$USER</span> -p <span class="variable">$PASS</span> -w <span class="variable">$WAREHOUSE</span> 4 -m <span class="variable">$WID</span>  -n <span class="variable">$WID</span> &gt; /dev/null</div><div class="line">    ) &amp;</div><div class="line">    </div><div class="line">    PIDLIST=(<span class="variable">$&#123;PIDLIST[@]&#125;</span> $!)</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> [ $((WID % DEGREE)) <span class="_">-eq</span> 0 ]; <span class="keyword">then</span></div><div class="line">        <span class="keyword">for</span> PID <span class="keyword">in</span> <span class="variable">$&#123;PIDLIST[@]&#125;</span>; <span class="keyword">do</span></div><div class="line">            <span class="built_in">wait</span> <span class="variable">$PID</span></div><div class="line">            </div><div class="line">            <span class="keyword">if</span> [ $? <span class="_">-ne</span> 0 ]; <span class="keyword">then</span></div><div class="line">                STATUS=1</div><div class="line">            <span class="keyword">fi</span></div><div class="line">        <span class="keyword">done</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> [ <span class="variable">$STATUS</span> <span class="_">-ne</span> 0 ]; <span class="keyword">then</span></div><div class="line">            <span class="built_in">exit</span> <span class="variable">$STATUS</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">        </div><div class="line">        PIDLIST=()</div><div class="line">    <span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> PID <span class="keyword">in</span> <span class="variable">$&#123;PIDLIST[@]&#125;</span>; <span class="keyword">do</span></div><div class="line">    <span class="built_in">wait</span> <span class="variable">$PID</span></div><div class="line">    </div><div class="line">    <span class="keyword">if</span> [ $? <span class="_">-ne</span> 0 ]; <span class="keyword">then</span></div><div class="line">        STATUS=1</div><div class="line">    <span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$STATUS</span> <span class="_">-eq</span> 0 ]; <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">'Completed.'</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="built_in">exit</span> <span class="variable">$STATUS</span></div></pre></td></tr></table></figure>
<h4 id="进行TPCC测试及结果解读"><a href="#进行TPCC测试及结果解读" class="headerlink" title="进行TPCC测试及结果解读"></a>进行TPCC测试及结果解读</h4><p>tpcc_start工具用于tpcc压测，其用法如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$./tpcc_start --help</div><div class="line">***************************************</div><div class="line">*** <span class="comment">###easy### TPC-C Load Generator ***</span></div><div class="line">***************************************</div><div class="line">./tpcc_start: invalid option -- <span class="string">'-'</span></div><div class="line">Usage: tpcc_start -h server_host -P port <span class="_">-d</span> database_name -u mysql_user -p mysql_password -w warehouses -c connections -r warmup_time <span class="_">-l</span> running_time -i report_interval <span class="_">-f</span> report_file -t trx_file</div></pre></td></tr></table></figure>
<blockquote>
<p>选项说明</p>
<p>-w 指定仓库数量<br>-c 指定并发连接数<br>-r 指定开始测试前进行warmup的时间，进行预热后，测试效果更好(单位:秒)<br>-l 指定测试持续时间(单位:秒)<br>-i 指定生成报告间隔时长<br>-f 指定生成的报告文件名</p>
</blockquote>
<p>使用例子</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$./tpcc_start -h127.0.0.1 -P3306 <span class="_">-d</span> TPCC -u root -p 000000 -w 10 -c 10 -r 120 <span class="_">-l</span> 120 &gt;&gt; mysql_tpcc_20160411</div></pre></td></tr></table></figure>
<p>模拟对10个仓库(-w 10),并发10个线程(-c 10),预热120s(-r 120),持续压测120s(-l 120)</p>
<p>真实测试场景中，建议预热时间不小于5分钟，持续压测时长不小于30分钟，否则测试数据可能不具参考意义。</p>
<p>结果解读</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">***************************************</div><div class="line">*** <span class="comment">###easy### TPC-C Load Generator ***</span></div><div class="line">***************************************</div><div class="line">option h with value <span class="string">'127.0.0.1'</span></div><div class="line">option P with value <span class="string">'3306'</span></div><div class="line">option d with value <span class="string">'TPCC'</span></div><div class="line">option u with value <span class="string">'root'</span></div><div class="line">option p with value <span class="string">'000000'</span></div><div class="line">option w with value <span class="string">'10'</span></div><div class="line">option c with value <span class="string">'10'</span></div><div class="line">option r with value <span class="string">'120'</span></div><div class="line">option l with value <span class="string">'120'</span></div><div class="line">&lt;Parameters&gt;</div><div class="line">     [server]: 127.0.0.1      -- 主机</div><div class="line">     [port]: 3306             -- 端口</div><div class="line">     [DBname]: TPCC       -- 压测的数据库</div><div class="line">       [user]: root           -- 账号</div><div class="line">       [pass]: 000000         -- 密码</div><div class="line">  [warehouse]: 10             -- 仓库数</div><div class="line"> [connection]: 10             -- 并发线程数 </div><div class="line">     [rampup]: 120 (sec.)     -- 数据预热时长 </div><div class="line">    [measure]: 120 (sec.)     -- 压测时长</div><div class="line"></div><div class="line">RAMP-UP TIME.(120 sec.)       --预热结束</div><div class="line"></div><div class="line">MEASURING START.              --开始压测</div><div class="line"></div><div class="line">  10, 27(0):3.829|7.321, 26(0):1.854|4.399, 3(0):1.503|1.670, 3(0):4.467|5.559, 3(0):14.525|20.229 --每10秒输出一次压测数据</div><div class="line">  20, 31(0):3.153|3.247, 29(0):0.861|1.202, 3(0):0.400|0.475, 3(0):4.471|4.980, 0(0):0.000|0.000</div><div class="line">  30, 28(0):3.559|3.943, 27(0):0.807|0.838, 2(0):0.285|0.379, 2(0):3.273|3.628, 3(0):13.534|13.577</div><div class="line">  40, 26(0):3.643|4.040, 32(0):0.676|0.686, 4(0):0.337|0.393, 4(0):4.397|5.081, 6(0):13.890|16.757</div><div class="line">  50, 32(1):4.377|5.695, 30(0):0.749|0.813, 2(0):0.254|0.309, 3(0):3.418|4.066, 2(0):11.356|12.581</div><div class="line">  60, 32(0):3.561|3.602, 33(0):1.024|1.645, 4(0):0.318|0.413, 3(0):3.446|3.542, 5(0):11.772|12.417</div><div class="line">  70, 41(0):3.228|3.415, 39(0):0.956|1.296, 4(0):0.394|0.396, 5(0):3.671|3.925, 1(0):0.000|13.920</div><div class="line">  80, 35(1):4.096|6.454, 35(0):0.727|0.877, 3(0):0.344|0.410, 3(0):3.100|3.961, 4(0):11.251|11.489</div><div class="line">  90, 27(0):2.787|3.505, 25(0):0.945|1.093, 2(0):0.394|0.423, 2(0):2.804|5.293, 3(0):11.637|12.463</div><div class="line"> 100, 31(2):5.050|5.467, 31(0):0.835|0.884, 4(0):0.334|0.363, 4(0):3.094|3.738, 2(0):11.853|11.885</div><div class="line"> 110, 32(0):3.101|3.968, 33(0):0.606|1.503, 3(0):0.255|0.347, 3(0):3.007|3.427, 5(0):11.685|12.653</div><div class="line"> 120, 34(0):3.359|3.713, 33(0):0.730|0.844, 3(0):0.319|0.504, 3(0):3.092|3.502, 2(0):8.187|10.347</div><div class="line"></div><div class="line">-- 以逗号分隔，共6列</div><div class="line">-- 第一列，第N次10秒</div><div class="line">-- 第二列，新订单成功执行压测的次数(推迟执行压测的次数):90%事务的响应时间|本轮测试最大响应时间，新订单事务数也被认为是总有效事务数的指标</div><div class="line">-- 第三列，支付业务成功执行次数(推迟执行次数):90%事务的响应时间|本轮测试最大响应时间</div><div class="line">-- 第四列，订单状态业务的结果，后面几个的意义同上</div><div class="line">-- 第五列，物流发货业务的结果，后面几个的意义同上</div><div class="line">-- 第六列，库存仓储业务的结果，后面几个的意义同上</div><div class="line"></div><div class="line">STOPPING THREADS..........          -- 结束压测</div><div class="line"> </div><div class="line">&lt;Raw Results&gt;                       -- 第一次统计结果</div><div class="line">  [0] sc:372  lt:4  rt:0  fl:0      -- New-Order，新订单业务成功(success,简写sc)次数，延迟(late,简写lt)次数，重试(retry,简写rt)次数，失败(failure,简写fl)次数</div><div class="line">  [1] sc:373  lt:0  rt:0  fl:0      -- Payment，支付业务统计，其他同上</div><div class="line">  [2] sc:37  lt:0  rt:0  fl:0       -- Order-Status，订单状态业务统计，其他同上</div><div class="line">  [3] sc:38  lt:0  rt:0  fl:0       -- Delivery，发货业务统计，其他同上</div><div class="line">  [4] sc:36  lt:0  rt:0  fl:0       -- Stock-Level，库存业务统计，其他同上</div><div class="line"> <span class="keyword">in</span> 120 sec.</div><div class="line"></div><div class="line">&lt;Raw Results2(sum ver.)&gt;            -- 第二次统计结果，其他同上</div><div class="line">  [0] sc:372  lt:4  rt:0  fl:0 </div><div class="line">  [1] sc:373  lt:0  rt:0  fl:0 </div><div class="line">  [2] sc:37  lt:0  rt:0  fl:0 </div><div class="line">  [3] sc:38  lt:0  rt:0  fl:0 </div><div class="line">  [4] sc:36  lt:0  rt:0  fl:0 </div><div class="line"></div><div class="line">&lt;Constraint Check&gt; (all must be [OK])     -- 下面所有业务逻辑结果都必须为OK才行</div><div class="line"> [transaction percentage]</div><div class="line"></div><div class="line">        Payment: 43.37% (&gt;=43.0%) [OK]    -- 支付成功次数(上述统计结果中 sc + lt)必须大于43.0%，否则结果为NG，而不是OK</div><div class="line">   Order-Status: 4.30% (&gt;= 4.0%) [OK]     --订单状态，其他同上</div><div class="line">       Delivery: 4.42% (&gt;= 4.0%) [OK]     -- 发货，其他同上</div><div class="line">    Stock-Level: 4.19% (&gt;= 4.0%) [OK]     -- 库存，其他同上</div><div class="line"> [response time (at least 90% passed)]    -- 响应耗时指标必须超过90%通过才行</div><div class="line">      New-Order: 98.94%  [OK]             -- 下面几个响应耗时指标全部 100% 通过</div><div class="line">        Payment: 100.00%  [OK]</div><div class="line">   Order-Status: 100.00%  [OK]</div><div class="line">       Delivery: 100.00%  [OK]</div><div class="line">    Stock-Level: 100.00%  [OK]</div><div class="line"></div><div class="line">&lt;TpmC&gt;</div><div class="line">                 188.000 TpmC  -- TpmC结果值(每分钟事务数，该值是第一次统计结果中的新订单事务数除以总耗时分钟数，例如本例中是：372/2=186)</div><div class="line">　　　　　　　　 　　　　　　　　　　　　tpmC值在国内外被广泛用于衡量计算机系统的事务处理能力</div></pre></td></tr></table></figure>
<p>测试期间，tpcc_start工具会输出实时的日志信息，这些信息包含了TPC-C模型中的五个业务逻辑:New-Order:新订单、Payment:支付、Order-Status:订单查询、Delivery:发货、Stock-Level：库存，在指定响应时间内，事务处理和完成情况。</p>
<p>除了MySQL的输出日志之外，还需要关心系统的性能指标，因此需要借助<code>iostat</code>、<code>vmstat</code>等系统工具，查看系统的性能特征。</p>
<h5 id="测试结果分析"><a href="#测试结果分析" class="headerlink" title="测试结果分析"></a>测试结果分析</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> scripts</div><div class="line">./analyze.sh ../mysql_tpcc_20160411&gt;/tmp/mysql_tpcc_20160411.res</div></pre></td></tr></table></figure>
<h5 id="使用gnuplot绘图"><a href="#使用gnuplot绘图" class="headerlink" title="使用gnuplot绘图"></a>使用gnuplot绘图</h5><p>安装gnuplot</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install gnuplot</div></pre></td></tr></table></figure>
<p>生成绘图数据</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">innodb_buffer_pool_size值为512M</div><div class="line">./tpcc_analyze.sh 512m-tpcc-data.log &gt;512m-tpcc-data.data</div><div class="line"></div><div class="line">innodb_buffer_pool_size值为1G</div><div class="line">./tpcc_analyze.sh 1g-tpcc-data.log &gt;1g-tpcc-data.data</div><div class="line"></div><div class="line">innodb_buffer_pool_size值为2G</div><div class="line">./tpcc_analyze.sh 2g-tpcc-data.log &gt;2g-tpcc-data.data</div></pre></td></tr></table></figure>
<p>合并三组数据</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">paste 512m-tpcc-data.data  1g-tpcc-data.data 2g-tpcc-data.data&gt;tpcc-data.data</div></pre></td></tr></table></figure>
<p>生成图片</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./tpcc_graph.sh tpcc-data.data  tpcc.jpg</div></pre></td></tr></table></figure>
<p>tpcc_analyze.sh脚本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">cat tpcc_analyze.sh </div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">TIMESLOT=1</div><div class="line">         </div><div class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$2</span>"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">    TIMESLOT=<span class="variable">$2</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"Defined <span class="variable">$2</span>"</span></div><div class="line"><span class="keyword">fi</span>  </div><div class="line">         </div><div class="line">cat <span class="variable">$1</span> | grep -v HY000 | grep -v payment | grep -v neword | \</div><div class="line">awk -v timeslot=<span class="variable">$TIMESLOT</span> <span class="string">' BEGIN &#123; FS="[,():]"; s=0; cntr=0; aggr=0 &#125; \</span></div><div class="line">/MEASURING START/ &#123; s=1&#125; /STOPPING THREADS/ &#123;s=0&#125; /0/ &#123; if (s==1) &#123; cntr++; aggr+=$2; &#125; \</div><div class="line">if ( cntr==timeslot ) &#123; printf ("%d %3f\n",$1,$5) ; cntr=0; aggr=0  &#125;  &#125; '</div></pre></td></tr></table></figure>
<p>tpcc_graph.sh脚本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">cat tpcc_graph.sh</div><div class="line"></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">gnuplot &lt;&lt; EOP</div><div class="line"><span class="built_in">set</span> style line 1 lt 1 lw 3</div><div class="line"><span class="built_in">set</span> style line 2 lt 5 lw 3</div><div class="line"><span class="built_in">set</span> style line 3 lt 7 lw 3</div><div class="line"><span class="built_in">set</span> terminal png size 960,480</div><div class="line"><span class="built_in">set</span> grid x y</div><div class="line"><span class="built_in">set</span> xlabel <span class="string">"Time(sec)"</span></div><div class="line"><span class="built_in">set</span> ylabel <span class="string">"Transactions"</span></div><div class="line"><span class="built_in">set</span> output <span class="string">"<span class="variable">$2</span>"</span></div><div class="line">plot <span class="string">"<span class="variable">$1</span>"</span> using 1:2 title <span class="string">"PS 5.1.56 buffer pool 512MM"</span> ls 1 with lines,\</div><div class="line">     <span class="string">"<span class="variable">$1</span>"</span> using 3:4 title <span class="string">"PS 5.1.56 buffer pool 1g"</span> ls 2 with lines,\</div><div class="line">     <span class="string">"<span class="variable">$1</span>"</span> using 3:6 title <span class="string">"PS 5.1.56 buffer pool 2g"</span> ls 3 with lines axes x1y1                                                    </div><div class="line">EOP</div></pre></td></tr></table></figure>
<p>可能出现的错误</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Could not find/open font when opening font <span class="string">"arial"</span>, using internal non-scalable font</div></pre></td></tr></table></figure>
<p>解决</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> GDFONTPATH=/usr/share/fonts/dejavu</div><div class="line"><span class="built_in">export</span> GNUPLOT_DEFAULT_GDFONT=DejaVuSansMono</div><div class="line"><span class="built_in">source</span> ~/.bashrc</div></pre></td></tr></table></figure>
<h3 id="percona的tpcc-mysql分支版本"><a href="#percona的tpcc-mysql分支版本" class="headerlink" title="percona的tpcc-mysql分支版本"></a>percona的tpcc-mysql分支版本</h3><h4 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h4><blockquote>
<p>本项目是在percona的tpcc-mysql版本基础上衍生而来，根据InnoDB表结构设计规范建议做了小调整，可以作为官方版本的补充。</p>
<p>该分支版本项目地址: <a href="https://github.com/yejr/tpcc-mysql" target="_blank" rel="external">https://github.com/yejr/tpcc-mysql</a></p>
<p>percona官方版本项目地址: <a href="https://github.com/Percona-Lab/tpcc-mysql" target="_blank" rel="external">https://github.com/Percona-Lab/tpcc-mysql</a></p>
<p>为什么要做改造</p>
<p>tpcc-mysql是percona基于TPC-C(下面简写成TPCC)衍生出来的产品，专用于MySQL基准测试。</p>
<p>它生成的测试表我认为有2个问题</p>
<p>1、没有自增列作为主键。如果仅作为基准测试问题不大，但和我们实际生产中的设计模式可能有一定区别，相信大多数人还是习惯使用自增列作为主键的，如果你没这个习惯，那么可以忽略本文了；<br>2、使用外键。个人认为MySQL对外键支持并不是太好，并且一定程度上影响并发性能，因此建议取消外键，仅保留一般的索引。</p>
<p>基于上面这2点，我微调了下tpcc-mysql的源码，主要改动有下面几个地方</p>
<p>1、所有表都加上自增列做主键；<br>2、取消外键，仅保留普通索引；<br>3、降低tpcc测试过程中的输出频率，避免刷屏；<br>4、修改了表结构初始化DDL脚本以及load.c文件。</p>
<p>利用该分支版本进行tpcc压力测试的结果表明，有自增列主键时，其TpmC相比没有自增列主键约提升了10%，还是比较可观的。</p>
</blockquote>
<h4 id="编译安装tpcc-mysql"><a href="#编译安装tpcc-mysql" class="headerlink" title="编译安装tpcc-mysql"></a>编译安装tpcc-mysql</h4><p>安装依赖包</p>
<p>MySQL 5.1</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install mysql-devel</div></pre></td></tr></table></figure>
<p>MySQL 5.6</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install mysql-community-devel</div></pre></td></tr></table></figure>
<p>进入tpcc-mysql源码目录，执行make，编译过程无报错即可</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span>  https://github.com/yejr/tpcc-mysql</div><div class="line"><span class="built_in">cd</span> tpcc-mysql</div><div class="line"><span class="built_in">cd</span> src</div><div class="line">make</div></pre></td></tr></table></figure>
<p>编译完成后，会在上一级目录下生成<code>tpcc_load</code>、<code>tpcc_start</code>这2个可执行文件。</p>
<h4 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h4><h5 id="环境初始化"><a href="#环境初始化" class="headerlink" title="环境初始化"></a>环境初始化</h5><p>创建tpcc数据库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqladmin -u user -p passwd create tpcc</div></pre></td></tr></table></figure>
<p>初始化表结构</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u user -p passwd <span class="_">-f</span> tpcc&lt;create_table-autoinc-pk.sql</div></pre></td></tr></table></figure>
<h5 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h5><p>利用tpcc_load初始化测试数据，用法和原先的一样</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">./tpcc_load    </div><div class="line">*************************************</div><div class="line">*** <span class="comment">###easy### TPC-C Data Loader  ***</span></div><div class="line">*************************************</div><div class="line"></div><div class="line"> usage: tpcc_load [server] [DB] [user] [pass] [warehouse]</div><div class="line">      OR</div><div class="line">        tpcc_load [server] [DB] [user] [pass] [warehouse] [part] [min_wh] [max_wh]</div><div class="line"></div><div class="line">           * [part]: 1=ITEMS 2=WAREHOUSE 3=CUSTOMER 4=ORDERS</div></pre></td></tr></table></figure>
<p>利用tpcc_start开始测试，用法也和原先的一样</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">./tpcc_start --help                                                                                       </div><div class="line">***************************************</div><div class="line">*** <span class="comment">###easy### TPC-C Load Generator ***</span></div><div class="line">***************************************</div><div class="line">./tpcc_start: invalid option -- <span class="string">'-'</span></div><div class="line">Usage: tpcc_start -h server_host -P port <span class="_">-d</span> database_name -u mysql_user -p mysql_password -w warehouses -c connections -r warmup_time <span class="_">-l</span> running_time -i report_interval <span class="_">-f</span> report_file -t trx_file</div></pre></td></tr></table></figure>
<h5 id="自动化测试脚本"><a href="#自动化测试脚本" class="headerlink" title="自动化测试脚本"></a>自动化测试脚本</h5><p>根据各自的测试环境，调整<code>run_tpcc.sh</code>脚本里的相应参数，运行该脚本可进行自动化测试。</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://imysql.com/2014/10/10/tpcc-mysql-full-user-manual.shtml" target="_blank" rel="external">http://imysql.com/2014/10/10/tpcc-mysql-full-user-manual.shtml</a><br><a href="http://www.cnblogs.com/xuanzhi201111/p/4148434.html" target="_blank" rel="external">http://www.cnblogs.com/xuanzhi201111/p/4148434.html</a><br><a href="http://imysql.com/2012/08/04/tpcc-for-mysql-manual.html" target="_blank" rel="external">http://imysql.com/2012/08/04/tpcc-for-mysql-manual.html</a><br><a href="http://imysql.com/2014/10/10/tpcc-mysql-full-user-manual.shtml" target="_blank" rel="external">http://imysql.com/2014/10/10/tpcc-mysql-full-user-manual.shtml</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[利用n和nvm管理Node的版本]]></title>
      <url>http://www.hi-linux.com/posts/51355.html</url>
      <content type="html"><![CDATA[<h3 id="使用nvm安装管理nodejs"><a href="#使用nvm安装管理nodejs" class="headerlink" title="使用nvm安装管理nodejs"></a>使用nvm安装管理nodejs</h3><p>本文将介绍如何使用nvm来安装管理nodejs运行环境，在不更改系统级配置的情况下，使普通用户可以在自己的用户目录下安装nodejs，多版本的nodejs不但可以同时共存，而且可以很方便地在多个版本之间进行切换。</p>
<h4 id="nvm介绍"><a href="#nvm介绍" class="headerlink" title="nvm介绍"></a>nvm介绍</h4><p>nvm全称Node Version Manager,它是通过shell脚本实现nodejs版本管理的。从他的名字可以看出来，他和rvm有着非常类似的设计思路。如果是需要管理Windows下的node，官方推荐是使用nvmw或nvm-windows。</p>
<p>官方网站地址是：<a href="https://github.com/creationix/nvm" target="_blank" rel="external">https://github.com/creationix/nvm</a><br><a id="more"></a></p>
<h4 id="nvm安装"><a href="#nvm安装" class="headerlink" title="nvm安装"></a>nvm安装</h4><p>nvm安装非常方便，输入以下命令即可完成安装</p>
<p>安装方式有两种</p>
<p>通过CURL</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash</div></pre></td></tr></table></figure>
<p>通过WGET</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash</div></pre></td></tr></table></figure>
<p>以上脚本会把nvm库clone到~/.nvm，然后会在~/.bash_profile, ~/.zshrc或`~/.profile末尾添加source，安装完成之后，你可以用以下命令来安装node.</p>
<p>以上命令会将nvm仓库克隆到~/.nvm目录，并将启动脚本添加到shell配置文件中(~/.bash_profile、 ~/.zshrc 或~/.profile)</p>
<p>你还可以通过参数NVM_SOURCE NVM_DIR NVM_PROFILE 进行自定义安装，比如<code>curl ... | NVM_DIR=/usr/local/nvm sh</code></p>
<p>通过源码手动安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> <span class="built_in">clone</span> https://github.com/creationix/nvm.git ~/.nvm</div><div class="line"><span class="variable">$cd</span> ~/.nvm</div><div class="line"></div><div class="line">将以下内容加入到shell配置文件中，根据环境不同，可能是~/.bashrc, ~/.profile, 或 ~/.zshrc</div><div class="line"></div><div class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></div><div class="line">[ <span class="_">-s</span> <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; . <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> <span class="comment"># This loads nvm</span></div></pre></td></tr></table></figure>
<h4 id="nvm使用"><a href="#nvm使用" class="headerlink" title="nvm使用"></a>nvm使用</h4><p>安装</p>
<p>首先使用nvm ls-remote命令查看当前都支持哪些版本的 nodejs，会输出很长很长的一堆，挑一个最新的稳定版，使用 nvm install 命令安装上即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ nvm ls-remote</div><div class="line">  ....</div><div class="line">  v4.4.0</div><div class="line">  ....</div></pre></td></tr></table></figure>
<p>安装指定版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$nvm</span> install v4.4.0</div></pre></td></tr></table></figure>
<p>在输出一个进度条之后，这个版本的nodejs 就安装好了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$node</span> -v</div><div class="line">v4.4.0</div></pre></td></tr></table></figure>
<p>安装最新稳定版node</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm install stable</div></pre></td></tr></table></figure>
<p>删除某版本的node</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nvm uninstall 4.4.0</div><div class="line">nvm uninstall default</div></pre></td></tr></table></figure>
<p>设置默认版本</p>
<p>nvm使用default的alias来实现默认版本，只要执行个命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm <span class="built_in">alias</span> default v4.4.0</div></pre></td></tr></table></figure>
<p>以后再登录进系统时，就默认使用的是nodejs v4.4.0这个版本了</p>
<p>使用指定的版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$nvm</span> use 5.10.1</div></pre></td></tr></table></figure>
<p>使用别名设置的默认的版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$nvm</span> use default</div></pre></td></tr></table></figure>
<p>查看当前已经安装的版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$nvm</span> ls</div><div class="line">-&gt;       v4.4.0</div><div class="line">        v5.10.1</div><div class="line">default -&gt; v4.4.0</div><div class="line">node -&gt; stable (-&gt; v5.10.1) (default)</div><div class="line">stable -&gt; 5.10 (-&gt; v5.10.1) (default)</div></pre></td></tr></table></figure>
<p>查看正在使用的版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$nvm</span> current</div><div class="line">v4.4.0</div></pre></td></tr></table></figure>
<p>以指定版本执行脚本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$nvm</span> run 4.4.0 myApp.js</div></pre></td></tr></table></figure>
<p>卸载nvm</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rm</span> -rf ~/.nvm</div></pre></td></tr></table></figure>
<p>在不同版本下安装模块</p>
<p>切换至4.4.0版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm use 4      <span class="comment">#版本名可简写</span></div></pre></td></tr></table></figure>
<p>安装mz-fis模块至全局目录,安装完成的路径是~/.nvm/versions/node/v4.4.0/lib/node_modules/mz-fis</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g mz-fis</div></pre></td></tr></table></figure>
<p>切换至5.10版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm use 5     <span class="comment">#版本名可简写</span></div></pre></td></tr></table></figure>
<p>安装react-native-cli模块至全局目录,安装完成的路径是~/.nvm/versions/node/v5.10.1/lib/node_modules/react-native-cli </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g react-native-cli</div></pre></td></tr></table></figure>
<p>你还可以在你的项目根目录中新建.nvmrc文件来存放node版本，然后在该目录运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$nvm</span> use</div></pre></td></tr></table></figure>
<p>使用.nvmrc文件配置项目所使用的node版本</p>
<p>如果你的默认node 版本(通过 nvm alias 命令设置的)与项目所需的版本不同，则可在项目根目录或其任意父级目录中创建.nvmrc文件，在文件中指定使用的node 版本号，例如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span>  &lt;项目根目录&gt;  <span class="comment">#进入项目根目录</span></div><div class="line"><span class="built_in">echo</span> 4 &gt; .nvmrc <span class="comment">#添加 .nvmrc 文件</span></div><div class="line">nvm use <span class="comment">#无需指定版本号，会自动使用 .nvmrc 文件中配置的版本</span></div><div class="line">node -v <span class="comment">#查看 node 是否切换为对应版本</span></div></pre></td></tr></table></figure>
<p>恢复使用系统安装的版本，撤销nvm使用的版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$nvm</span> deactivate</div></pre></td></tr></table></figure>
<p>指定安装源</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$export</span> NVM_NODEJS_ORG_MIRROR=http://nodejs.org/dist</div><div class="line"><span class="variable">$nvm</span> install 0.10</div><div class="line"><span class="comment">#或者</span></div><div class="line"><span class="variable">$NVM_NODEJS_ORG_MIRROR</span>=http://nodejs.org/dist nvm install 0.10</div></pre></td></tr></table></figure>
<h3 id="使用n安装管理nodejs"><a href="#使用n安装管理nodejs" class="headerlink" title="使用n安装管理nodejs"></a>使用n安装管理nodejs</h3><p>n是非常简单易用的node版本管理器,Node的一个模块，作者是TJ Holowaychuk(鼎鼎大名的Express框架作者)，就像它的名字一样，它的理念就是简单:[no subshells, no profile setup, no convoluted api, just simple]</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$npm</span> install -g n</div></pre></td></tr></table></figure>
<p>安装完成之后，直接输入n后输出当前已经安装的node版本以及正在使用的版本(前面有一个o)，你可以通过移动上下方向键来选择要使用的版本，最后按回车生效。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ n</div><div class="line">    0.10.1 </div><div class="line">    0.10.15 </div><div class="line">o   0.10.21 </div><div class="line">    0.11.8</div></pre></td></tr></table></figure>
<p>通过源代码安装</p>
<p>方法一</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -L http://git.io/n-install | bash</div></pre></td></tr></table></figure>
<p>方法二</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> <span class="built_in">clone</span> https://github.com/visionmedia/n.git</div><div class="line"><span class="variable">$cd</span> n</div><div class="line"><span class="variable">$make</span> install</div></pre></td></tr></table></figure>
<p>如果需要安装到指定目录，需要在安装前增加PREFIX前缀</p>
<p>将n安装到~/bin/n</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$PREFIX</span>=<span class="variable">$HOME</span> make install</div></pre></td></tr></table></figure>
<h4 id="n使用"><a href="#n使用" class="headerlink" title="n使用"></a>n使用</h4><p>如果你要安装其他的版本(比如0.11.12)，那么如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ n 0.11.12</div><div class="line">install : 0.11.12</div><div class="line">   mkdir : /usr/<span class="built_in">local</span>/n/versions/0.11.12</div><div class="line">   fetch : http://nodejs.org/dist/v0.11.12/node-v0.11.12-darwin-x64.tar.gz</div><div class="line"><span class="comment">####                                                     5.9%</span></div></pre></td></tr></table></figure>
<p>安装最新的版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$n</span> latest</div></pre></td></tr></table></figure>
<p>安装稳定版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$n</span> stable</div></pre></td></tr></table></figure>
<p>注：通过n安装的node存放在/usr/local/n/versions目录中。</p>
<p>查看可使用和安装的node版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">n ls</div></pre></td></tr></table></figure>
<p>删除某版本node</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$n</span> rm 0.10.26 v0.11.12</div><div class="line">或者</div><div class="line"><span class="variable">$n</span> - 0.11.12</div></pre></td></tr></table></figure>
<p>以指定的版本来执行脚本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$n</span> use 0.10.21 some.js</div><div class="line"><span class="variable">$n</span> use 0.11.12 --harmony some.js <span class="comment">#带参数</span></div></pre></td></tr></table></figure>
<p>切换到之前的版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$n</span> prev</div></pre></td></tr></table></figure>
<p>查看某版本node的安装路径</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$n</span> bin 0.11.12</div><div class="line">/usr/<span class="built_in">local</span>/n/versions/0.11.12/bin/node</div></pre></td></tr></table></figure>
<p>命令别名</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">which</span>   bin</div><div class="line">use     as</div><div class="line">list    ls</div><div class="line">-       rm</div></pre></td></tr></table></figure>
<h3 id="nvm与n的区别"><a href="#nvm与n的区别" class="headerlink" title="nvm与n的区别"></a>nvm与n的区别</h3><p>n命令是作为一个node的模块而存在，而nvm 是一个独立于node/npm的外部 shell 脚本，因此n命令相比nvm更加局限。</p>
<p>由于npm安装的模块路径均为/usr/local/lib/node_modules ，当使用n切换不同的node版本时，实际上会共用全局的node/npm目录。 因此不能很好的满足按不同node版本使用不同全局node模块的需求。因此建议各位尽早开始使用nvm，以免出现全局模块无法更新的问题。</p>
<p>不要在使用nvm的同时，再去使用n，这将会导致node版本混乱，反之亦是如此。根据自己的喜好和习惯，选择其一。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="https://github.com/creationix/nvm" target="_blank" rel="external">https://github.com/creationix/nvm</a><br><a href="https://github.com/tj/n" target="_blank" rel="external">https://github.com/tj/n</a><br><a href="http://weizhifeng.net/node-version-management-via-n-and-nvm.html" target="_blank" rel="external">http://weizhifeng.net/node-version-management-via-n-and-nvm.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux性能实时监测工具-Netdata]]></title>
      <url>http://www.hi-linux.com/posts/42392.html</url>
      <content type="html"><![CDATA[<h3 id="Netdata是什么"><a href="#Netdata是什么" class="headerlink" title="Netdata是什么"></a>Netdata是什么</h3><p>Netdata是一款Linux性能实时监测工具。</p>
<p>Netdata是一个高度优化的Linux守护进程，它为Linux系统，应用程序，SNMP服务等提供实时的性能监测。</p>
<p>它用可视化的手段，将被监测者最细微的细节，展现了出来。这样，你便可以清晰地了解你的系统和应用程序此时的状况。</p>
<p>GITHUB地址：<a href="https://github.com/firehol/netdata" target="_blank" rel="external">https://github.com/firehol/netdata</a></p>
<p><img src="http://www.hi-linux.com/img/linux/netdata1.gif" alt=""><br><a id="more"></a></p>
<p>使用此软件，你可以得到：</p>
<blockquote>
<p>1.优美的界面：bootstrap框架下的控制界面<br>2.自定义的控制界面：你可以使用简单的HTML代码去自定义控制界面(不需要使用javascript)<br>3.极其的快速而高效：程序使用C进行编写(默认安装下，预计只有2%的单核CPU使用率和少许的内存使用率)<br>4.零配置：你只需要去安装它，接着它就会自动地监测一切数据<br>5.零依赖：它的静态网络文件和网络接口拥有自己的网络服务器<br>6.可扩展：用它自身的插件API(可以使用许多方式来制作它的插件，从bash到node.js),你可以检测任何可以衡量的数据。<br>7.可嵌入：它可以在任何Linux内核可以运行的地方运行</p>
</blockquote>
<p>监测内容：</p>
<p>这是它目前检测的内容(大多数都不需要进行配置，安装后即可开始监测)</p>
<blockquote>
<p>1.CPU的使用率,中断，软中断和频率(总量和每个单核)<br>2.RAM，互换和内核内存的使用率(包括KSM和内核内存deduper)<br>3.硬盘输入/输出(每个硬盘的带宽，操作，整理，利用等)</p>
</blockquote>
<p><img src="http://www.hi-linux.com/img/linux/netdata2.gif" alt=""></p>
<blockquote>
<p>4.IPv4网络(数据包，错误，分片)：<br>TCP：连接，数据包，错误，握手<br>UDP:数据包，错误<br>广播：带宽，数据包<br>组播：带宽，数据包</p>
</blockquote>
<p><img src="http://www.hi-linux.com/img/linux/netdata3.gif" alt=""></p>
<blockquote>
<p>5.Netfilter/iptables Linux防火墙(连接，连接跟踪事件，错误等)<br>6.IPv4/IPv6 networking<br>7.进程(运行，受阻，分叉，活动等)<br>8.熵<br>9.NFS文件服务器，v2,v3,v4(输入/输出，缓存，预读，RPC调用)<br>10.网络服务质量(唯一一个可实时可视化网络状况的工具)</p>
</blockquote>
<p><img src="http://www.hi-linux.com/img/linux/netdata4.gif" alt=""></p>
<blockquote>
<p>11.应用程序，通过对进程树进行分组(CPU,内存，硬盘读取，硬盘写入，交换，线程，管道，套接字等)</p>
</blockquote>
<p><img src="http://www.hi-linux.com/img/linux/netdata5.gif" alt=""></p>
<blockquote>
<p>12.Apache Web服务器状态(v2.2, v2.4)<br>13.Nginx Web服务器状态<br>14.Mysql数据库(多台服务器，单个显示：带宽，查询/s, 处理者，锁，问题，临时操作，连接，二进制日志，线程，innodb引擎等)<br>15.ISC Bind域名服务器(多个服务器，单个显示：客户，请求，查询，更新，失败等)<br>16.Postfix邮件服务器的消息队列(条目，大小)<br>17.Squid代理服务器(客户带宽和请求，服务带宽和请求)<br>18.硬件传感器(温度，电压，风扇，电源，湿度等)<br>19.NUT UPSes(负载，充电，电池电压，温度，使用指标，输出指标)</p>
<p>你可以监测任意数量的SNMP服务，不过你需要进行配置。<br>你可以对此软件进行扩展，可以使用任何语言编写插件，以此来从任何来源收集数据。</p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><p>运行netdata你必须先安装以下依赖包<code>git</code>, <code>make</code>, <code>gcc</code>, <code>autoconf</code>, <code>autogen</code>,<code>automake</code>,<code>pkg-config</code>.</p>
<p>以下为不同发行版本的安装方法</p>
<p>Debian / Ubuntu</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install zlib1g-dev gcc make git autoconf autogen automake pkg-config</div></pre></td></tr></table></figure>
<p>Centos / Redhat</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install zlib-devel gcc make git autoconf autogen automake pkgconfig</div></pre></td></tr></table></figure>
<p><strong>注：autogen需epel-testing源</strong></p>
<p>ArchLinux</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">pacman -S --needed base-devel libmnl libnetfilter_acct zlib</div><div class="line">or run the following (and ignore the next section):</div><div class="line">wget https://aur.archlinux.org/cgit/aur.git/snapshot/netdata.tar.gz</div><div class="line">tar xf netdata.tar.gz &amp;&amp; <span class="built_in">cd</span> netdata/</div><div class="line">makepkg -sri</div></pre></td></tr></table></figure>
<h4 id="安装netdata"><a href="#安装netdata" class="headerlink" title="安装netdata"></a>安装netdata</h4><h5 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/firehol/netdata.git --depth=1</div><div class="line"><span class="built_in">cd</span> netdata</div></pre></td></tr></table></figure>
<h5 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./netdata-installer.sh</div></pre></td></tr></table></figure>
<p>默认安装位置</p>
<blockquote>
<p>It will be installed at these locations:</p>
<ul>
<li>the daemon    at /usr/sbin/netdata</li>
<li>config files  at /etc/netdata</li>
<li>web files     at /usr/share/netdata</li>
<li>plugins       at /usr/libexec/netdata</li>
<li>cache files   at /var/cache/netdata</li>
<li>log files     at /var/log/netdata</li>
</ul>
</blockquote>
<p>也可用<code>--install</code>修改安装位置</p>
<p>安装netdata到/opt/netdata下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./netdata-installer.sh --install /opt</div></pre></td></tr></table></figure>
<p>更多安装选项：可使用<code>./netdata-installer.sh --install</code>查看.</p>
<h5 id="更新netdata"><a href="#更新netdata" class="headerlink" title="更新netdata"></a>更新netdata</h5><p>更新源代码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /path/to/netdata.git</div><div class="line">git pull</div></pre></td></tr></table></figure>
<p>重新编译和安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./netdata-installer.sh</div></pre></td></tr></table></figure>
<h5 id="启动和停止"><a href="#启动和停止" class="headerlink" title="启动和停止"></a>启动和停止</h5><p>启动NetData</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/sbin/netdata</div></pre></td></tr></table></figure>
<p>停止NetData</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">killall netdata</div></pre></td></tr></table></figure>
<p>加入开机启动</p>
<p>编辑<code>/etc/rc.local</code>加入以下行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vim /etc/rc.local</div><div class="line">/usr/sbin/netdata</div></pre></td></tr></table></figure>
<h4 id="访问netdata"><a href="#访问netdata" class="headerlink" title="访问netdata"></a>访问netdata</h4><p>默认编译安装完成后可用浏览器访问<code>http://localhost:19999/</code><br>访问netdata的配置文件可访问<code>http://127.0.0.1:19999/netdata.conf</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[curl酷炫技巧:使用curl命令发送邮件]]></title>
      <url>http://www.hi-linux.com/posts/54000.html</url>
      <content type="html"><![CDATA[<p>关于curl，大家都知道可以用它来访问web页面、下载文件等等。其实它的功能远不止这么点，它支持众多协议，今天，来随凉白开看看如何使用curl发送邮件</p>
<h3 id="确认curl是否支持SMTP"><a href="#确认curl是否支持SMTP" class="headerlink" title="确认curl是否支持SMTP"></a>确认curl是否支持SMTP</h3><p>首先确认你的curl是否支持smtp</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl-config --protocols | grep SMTP</div><div class="line">SMTP</div><div class="line">SMTPS</div></pre></td></tr></table></figure>
<p>如果不支持smtp协议，那么升级curl(需7.20以上版本才支持)<a id="more"></a></p>
<h3 id="安装高版本CURL"><a href="#安装高版本CURL" class="headerlink" title="安装高版本CURL"></a>安装高版本CURL</h3><p>使用yum安装的curl一般不支持smtp协议，接下来我们使用源码包来安装curl</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</div><div class="line">wget https://curl.haxx.se/download/curl-7.48.0.tar.gz</div><div class="line">unzip master.zip</div><div class="line"><span class="built_in">cd</span> curl-master</div><div class="line">./buildconf</div><div class="line">./configure </div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>再次确认下是否支持curl</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/bin/curl-config --protocols | grep SMTP</div><div class="line">SMTP</div><div class="line">SMTPS</div></pre></td></tr></table></figure>
<p>备注：默认情况下，curl会被安装到/usr/local/bin下，与老版本同时存在。</p>
<h3 id="使用curl发送邮件"><a href="#使用curl发送邮件" class="headerlink" title="使用curl发送邮件"></a>使用curl发送邮件</h3><p>试着给dengyun@ttlsa.com发送一份邮件</p>
<h4 id="编写邮件内容"><a href="#编写邮件内容" class="headerlink" title="编写邮件内容"></a>编写邮件内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cat mail.txt</div><div class="line">From:support@ttlsa.com</div><div class="line">To:dengyun@ttlsa.com</div><div class="line">Subject: curl发送邮件标题</div><div class="line"></div><div class="line">这里是内容，上面有一个空行别忘记了</div></pre></td></tr></table></figure>
<h4 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/bin/curl <span class="_">-s</span> --url <span class="string">"smtp://smtp.ttlsa.com"</span> --mail-from <span class="string">"support@ttlsa.com"</span> \</div><div class="line">--mail-rcpt <span class="string">"dengyun@ttlsa.com"</span> --upload-file mail.txt --user <span class="string">"support@ttlsa.com:123456"</span></div></pre></td></tr></table></figure>
<h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">--url ：smtp地址</div><div class="line">--mail-from：发件人邮箱</div><div class="line">--mail-rcpt：收件人邮箱</div><div class="line">--upload-file：信件内容，包含发件人、收件人、标题、内容</div><div class="line">--user：账号密码，中间用冒号分隔</div></pre></td></tr></table></figure>
<h3 id="curl更多协议"><a href="#curl更多协议" class="headerlink" title="curl更多协议"></a>curl更多协议</h3><p>curl支持众多协议，想知道当前curl支持哪些协议，使用如下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/bin/curl-config --protocols</div><div class="line">DICT</div><div class="line">FILE</div><div class="line">FTP</div><div class="line">FTPS</div><div class="line">GOPHER</div><div class="line">HTTP</div><div class="line">HTTPS</div><div class="line">IMAP</div><div class="line">IMAPS</div><div class="line">POP3</div><div class="line">POP3S</div><div class="line">RTSP</div><div class="line">SMB</div><div class="line">SMBS</div><div class="line">SMTP</div><div class="line">SMTPS</div><div class="line">TELNET</div><div class="line">TFTP</div></pre></td></tr></table></figure>
<h3 id="zabbix-curl发邮件脚本"><a href="#zabbix-curl发邮件脚本" class="headerlink" title="zabbix curl发邮件脚本"></a>zabbix curl发邮件脚本</h3><p>我们通常使用sendEmail来发送告警，下面分享一个zabbix使用curl发送告警邮件的脚本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">curl zabbix_curl_sendmail.sh</div><div class="line"></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># -------------------------------------------------------------------------------</span></div><div class="line"><span class="comment"># FileName:    zabbix_curl_sendmail.sh</span></div><div class="line"><span class="comment"># Revision:    1.0</span></div><div class="line"><span class="comment"># Date:        2015/11/14</span></div><div class="line"><span class="comment"># Author:      凉白开</span></div><div class="line"><span class="comment"># Email:       dengyun@ttlsa.com</span></div><div class="line"><span class="comment"># Website:     www.ttlsa.com</span></div><div class="line"><span class="comment"># Description: use curl send email</span></div><div class="line"><span class="comment"># Notes:       ~</span></div><div class="line"><span class="comment"># -------------------------------------------------------------------------------</span></div><div class="line"><span class="comment"># Copyright:   2015 (c) 凉白开</span></div><div class="line"><span class="comment"># License:     GPL</span></div><div class="line"></div><div class="line">MAIL_FROM=<span class="string">'support@ttlsa.com'</span></div><div class="line">MAIL_TO=<span class="variable">$1</span></div><div class="line">MAIL_SUBJECT=<span class="variable">$2</span></div><div class="line">MAIL_CONTENT=<span class="variable">$3</span></div><div class="line">MAIL_CONTENT_FILE=<span class="string">"/tmp/`/bin/date +%s`.txt"</span></div><div class="line">MAIL_SMTP=<span class="string">'smtp://smtp.ttlsa.com'</span></div><div class="line">MAIL_USER=<span class="string">'support@ttlsa.com'</span></div><div class="line">MAIL_PASSWORD=<span class="string">'123456'</span></div><div class="line"></div><div class="line"><span class="comment"># create mail content file</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"From:<span class="variable">$&#123;MAIL_FROM&#125;</span></span></div><div class="line">To:<span class="variable">$1</span></div><div class="line">Subject: <span class="variable">$MAIL_SUBJECT</span></div><div class="line"></div><div class="line"><span class="variable">$MAIL_CONTENT</span> "&gt; <span class="variable">$&#123;MAIL_CONTENT_FILE&#125;</span></div><div class="line"></div><div class="line"><span class="comment"># send mail</span></div><div class="line">/usr/<span class="built_in">local</span>/bin/curl <span class="_">-s</span> --url <span class="string">"<span class="variable">$&#123;MAIL_SMTP&#125;</span>"</span> --mail-from <span class="string">"<span class="variable">$&#123;MAIL_FROM&#125;</span>"</span> --mail-rcpt <span class="variable">$&#123;MAIL_TO&#125;</span> \</div><div class="line">--upload-file <span class="variable">$&#123;MAIL_CONTENT_FILE&#125;</span> --user <span class="string">"<span class="variable">$&#123;MAIL_USER&#125;</span>:<span class="variable">$&#123;MAIL_PASSWORD&#125;</span>"</span> </div><div class="line"></div><div class="line"><span class="comment"># delete mail content file</span></div><div class="line">rm <span class="variable">$&#123;MAIL_CONTENT_FILE&#125;</span></div></pre></td></tr></table></figure>
<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p>WEB SITE: <a href="https://curl.haxx.se/" target="_blank" rel="external">https://curl.haxx.se/</a><br>GitHub： <a href="https://github.com/bagder/curl/" target="_blank" rel="external">https://github.com/bagder/curl/</a></p>
<p>转载自: <a href="https://www.ttlsa.com/linux/curl-skill-use-curl-send-email/" target="_blank" rel="external">https://www.ttlsa.com/linux/curl-skill-use-curl-send-email/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[谈mysql中utf8和utf8mb4区别]]></title>
      <url>http://www.hi-linux.com/posts/51173.html</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>MySQL在5.5.3之后增加了这个utf8mb4的编码，mb4就是most bytes 4的意思，专门用来兼容四字节的unicode。好在utf8mb4是utf8的超集，除了将编码改为utf8mb4外不需要做其他转换。当然，为了节省空间一般情况下使用utf8也就够了。</p>
<h3 id="内容描述"><a href="#内容描述" class="headerlink" title="内容描述"></a>内容描述</h3><p>那上面说了既然utf8能够存下大部分中文汉字,那为什么还要使用utf8mb4呢? 原来mysql支持的utf8编码最大字符长度为3字节，如果遇到4字节的宽字符就会插入异常了。三个字节的 UTF-8 最大能编码的Unicode字符是0xffff，也就是Unicode中的基本多文种平面(BMP)。也就是说，任何不在基本多文本平面的Unicode字符，都无法使用Mysql的utf8字符集存储。包括Emoji表情(Emoji是一种特殊的Unicode编码，常见于ios和 android手机上)，和很多不常用的汉字，以及任何新增的Unicode字符等等。<br><a id="more"></a></p>
<h3 id="问题根源"><a href="#问题根源" class="headerlink" title="问题根源"></a>问题根源</h3><p>最初的UTF-8格式使用一至六个字节，最大能编码31位字符。最新的UTF-8规范只使用一到四个字节，最大能编码21位，正好能够表示所有的17个Unicode平面。</p>
<p>utf8是Mysql中的一种字符集，只支持最长三个字节的UTF-8字符，也就是Unicode中的基本多文本平面。</p>
<p>Mysql中的utf8为什么只支持持最长三个字节的UTF-8字符呢？我想了一下，可能是因为Mysql刚开始开发那会，Unicode还没有辅助平面这一说呢。那时候，Unicode委员会还做着[65535个字符足够全世界用了]的美梦。Mysql中的字符串长度算的是字符数而非字节数，对于CHAR数据类型来说，需要为字符串保留足够的长。当使用utf8字符集时，需要保留的长度就是utf8最长字符长度乘以字符串长度，所以这里理所当然的限制了utf8最大长度为3，比如CHAR(100)Mysql会保留300字节长度。至于后续的版本为什么不对4字节长度的UTF-8字符提供支持，我想一个是为了向后兼容性的考虑，还有就是基本多文种平面之外的字符确实很少用到。</p>
<p>要在Mysql中保存4字节长度的UTF-8字符，需要使用utf8mb4字符集，但只有5.5.3版本以后的才支持(查看版本：<code>select version();</code>)。我觉得，为了获取更好的兼容性，应该总是使用utf8mb4而非utf8. 对于CHAR类型数据，utf8mb4会多消耗一些空间，根据Mysql官方建议，使用 VARCHAR替代CHAR。</p>
<blockquote>
<p>引用批注<br>[1] 谈谈字符集与字符编码<br><a href="http://my.oschina.net/leejun2005/blog/232732#OSC_h3_4" target="_blank" rel="external">http://my.oschina.net/leejun2005/blog/232732#OSC_h3_4</a><br>[2] 关于 MySQL UTF8 编码下生僻字符插入失败/假死问题的分析<br><a href="http://my.oschina.net/leejun2005/blog/343353" target="_blank" rel="external">http://my.oschina.net/leejun2005/blog/343353</a></p>
</blockquote>
<p>转载自：<a href="http://ourmysql.com/archives/1402" target="_blank" rel="external">http://ourmysql.com/archives/1402</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[常用Git命令清单]]></title>
      <url>http://www.hi-linux.com/posts/60426.html</url>
      <content type="html"><![CDATA[<p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p>
<p><img src="http://www.hi-linux.com/img/linux/git-command.png" alt=""></p>
<p>下面是我整理的常用Git命令清单。几个专用名词的译名如下。</p>
<blockquote>
<p>Workspace：工作区<br>Index / Stage：暂存区<br>Repository：仓库区（或本地仓库）<br>Remote：远程仓库<br><a id="more"></a></p>
</blockquote>
<h3 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h3><p>在当前目录新建一个Git代码库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git init</div></pre></td></tr></table></figure></p>
<p>新建一个目录，将其初始化为Git代码库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git init [project-name]</div></pre></td></tr></table></figure></p>
<p>下载一个项目和它的整个代码历史<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> [url]</div></pre></td></tr></table></figure></p>
<h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<p>显示当前的Git配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --list</div></pre></td></tr></table></figure></p>
<p>编辑Git配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config <span class="_">-e</span> [--global]</div></pre></td></tr></table></figure></p>
<p>设置提交代码时的用户信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config [--global] user.name <span class="string">"[name]"</span></div><div class="line">$ git config [--global] user.email <span class="string">"[email address]"</span></div></pre></td></tr></table></figure></p>
<h3 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h3><p>添加指定文件到暂存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add [file1] [file2] ...</div></pre></td></tr></table></figure></p>
<p>添加指定目录到暂存区，包括子目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add [dir]</div></pre></td></tr></table></figure></p>
<p>添加当前目录的所有文件到暂存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add .</div></pre></td></tr></table></figure></p>
<p>添加每个变化前，都会要求确认<br>对于同一个文件的多处变化，可以实现分次提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add -p</div></pre></td></tr></table></figure></p>
<p>删除工作区文件，并且将这次删除放入暂存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rm [file1] [file2] ...</div></pre></td></tr></table></figure></p>
<p>停止追踪指定文件，但该文件会保留在工作区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rm --cached [file]</div></pre></td></tr></table></figure></p>
<p>改名文件，并且将这个改名放入暂存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git mv [file-original] [file-renamed]</div></pre></td></tr></table></figure></p>
<h3 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h3><p>提交暂存区到仓库区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m [message]</div></pre></td></tr></table></figure></p>
<p>提交暂存区的指定文件到仓库区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit [file1] [file2] ... -m [message]</div></pre></td></tr></table></figure></p>
<p>提交工作区自上次commit之后的变化，直接到仓库区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit <span class="_">-a</span></div></pre></td></tr></table></figure></p>
<p>提交时显示所有diff信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -v</div></pre></td></tr></table></figure></p>
<p>使用一次新的commit，替代上一次提交<br>如果代码没有任何新变化，则用来改写上一次commit的提交信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit --amend -m [message]</div></pre></td></tr></table></figure></p>
<p>重做上一次commit，并包括指定文件的新变化<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit --amend [file1] [file2] ...</div></pre></td></tr></table></figure></p>
<h3 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h3><p>列出所有本地分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch</div></pre></td></tr></table></figure></p>
<p>列出所有远程分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -r</div></pre></td></tr></table></figure></p>
<p>列出所有本地分支和远程分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch <span class="_">-a</span></div></pre></td></tr></table></figure></p>
<p>新建一个分支，但依然停留在当前分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch [branch-name]</div></pre></td></tr></table></figure></p>
<p>新建一个分支，并切换到该分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b [branch]</div></pre></td></tr></table></figure></p>
<p>新建一个分支，指向指定commit<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch [branch] [commit]</div></pre></td></tr></table></figure></p>
<p>新建一个分支，与指定的远程分支建立追踪关系<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --track [branch] [remote-branch]</div></pre></td></tr></table></figure></p>
<p>切换到指定分支，并更新工作区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout [branch-name]</div></pre></td></tr></table></figure></p>
<p>切换到上一个分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -</div></pre></td></tr></table></figure></p>
<p>建立追踪关系，在现有分支与指定的远程分支之间<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --set-upstream [branch] [remote-branch]</div></pre></td></tr></table></figure></p>
<p>合并指定分支到当前分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge [branch]</div></pre></td></tr></table></figure></p>
<p>选择一个commit，合并进当前分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git cherry-pick [commit]</div></pre></td></tr></table></figure></p>
<p>删除分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch <span class="_">-d</span> [branch-name]</div></pre></td></tr></table></figure></p>
<p>删除远程分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git push origin --delete [branch-name]</div><div class="line">$ git branch -dr [remote/branch]</div></pre></td></tr></table></figure></p>
<h3 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h3><p>列出所有tag<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag</div></pre></td></tr></table></figure></p>
<p>新建一个tag在当前commit<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag [tag]</div></pre></td></tr></table></figure></p>
<p>新建一个tag在指定commit<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag [tag] [commit]</div></pre></td></tr></table></figure></p>
<p>删除本地tag<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag <span class="_">-d</span> [tag]</div></pre></td></tr></table></figure></p>
<p>删除远程tag<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin :refs/tags/[tagName]</div></pre></td></tr></table></figure></p>
<p>查看tag信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git show [tag]</div></pre></td></tr></table></figure></p>
<p>提交指定tag<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push [remote] [tag]</div></pre></td></tr></table></figure></p>
<p>提交所有tag<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push [remote] --tags</div></pre></td></tr></table></figure></p>
<p>新建一个分支，指向某个tag<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b [branch] [tag]</div></pre></td></tr></table></figure></p>
<h3 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h3><p>显示有变更的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git status</div></pre></td></tr></table></figure></p>
<p>显示当前分支的版本历史<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span></div></pre></td></tr></table></figure></p>
<p>显示commit历史，以及每次commit发生变更的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> --stat</div></pre></td></tr></table></figure></p>
<p>搜索提交历史，根据关键词<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> -S [keyword]</div></pre></td></tr></table></figure></p>
<p>显示某个commit之后的所有变动，每个commit占据一行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</div></pre></td></tr></table></figure></p>
<p>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</div></pre></td></tr></table></figure></p>
<p>显示某个文件的版本历史，包括文件改名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> --follow [file]</div><div class="line">$ git whatchanged [file]</div></pre></td></tr></table></figure></p>
<p>显示指定文件相关的每一次diff<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> -p [file]</div></pre></td></tr></table></figure></p>
<p>显示过去5次提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</div></pre></td></tr></table></figure></p>
<p>显示所有提交过的用户，按提交次数排序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git shortlog -sn</div></pre></td></tr></table></figure></p>
<p>显示指定文件是什么人在什么时间修改过<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git blame [file]</div></pre></td></tr></table></figure></p>
<p>显示暂存区和工作区的差异<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff</div></pre></td></tr></table></figure></p>
<p>显示暂存区和上一个commit的差异<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff --cached [file]</div></pre></td></tr></table></figure></p>
<p>显示工作区与当前分支最新commit之间的差异<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff HEAD</div></pre></td></tr></table></figure></p>
<p>显示两次提交之间的差异<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff [first-branch]...[second-branch]</div></pre></td></tr></table></figure></p>
<p>显示今天你写了多少行代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></div></pre></td></tr></table></figure></p>
<p>显示某次提交的元数据和内容变化<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git show [commit]</div></pre></td></tr></table></figure></p>
<p>显示某次提交发生变化的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git show --name-only [commit]</div></pre></td></tr></table></figure></p>
<p>显示某次提交时，某个文件的内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git show [commit]:[filename]</div></pre></td></tr></table></figure></p>
<p>显示当前分支的最近几次提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reflog</div></pre></td></tr></table></figure></p>
<h3 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h3><p>下载远程仓库的所有变动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git fetch [remote]</div></pre></td></tr></table></figure></p>
<p>显示所有远程仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote -v</div></pre></td></tr></table></figure></p>
<p>显示某个远程仓库的信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote show [remote]</div></pre></td></tr></table></figure></p>
<p>增加一个新的远程仓库，并命名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add [shortname] [url]</div></pre></td></tr></table></figure></p>
<p>取回远程仓库的变化，并与本地分支合并<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull [remote] [branch]</div></pre></td></tr></table></figure></p>
<p>上传本地指定分支到远程仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push [remote] [branch]</div></pre></td></tr></table></figure></p>
<p>强行推送当前分支到远程仓库，即使有冲突<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push [remote] --force</div></pre></td></tr></table></figure></p>
<p>推送所有分支到远程仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push [remote] --all</div></pre></td></tr></table></figure></p>
<h3 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h3><p>恢复暂存区的指定文件到工作区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout [file]</div></pre></td></tr></table></figure></p>
<p>恢复某个commit的指定文件到暂存区和工作区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout [commit] [file]</div></pre></td></tr></table></figure></p>
<p>恢复暂存区的所有文件到工作区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout .</div></pre></td></tr></table></figure></p>
<p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset [file]</div></pre></td></tr></table></figure></p>
<p>重置暂存区与工作区，与上一次commit保持一致<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard</div></pre></td></tr></table></figure></p>
<p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset [commit]</div></pre></td></tr></table></figure></p>
<p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard [commit]</div></pre></td></tr></table></figure></p>
<p>重置当前HEAD为指定commit，但保持暂存区和工作区不变<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset --keep [commit]</div></pre></td></tr></table></figure></p>
<p>新建一个commit，用来撤销指定commit<br>后者的所有变化都将被前者抵消，并且应用到当前分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git revert [commit]</div></pre></td></tr></table></figure></p>
<p>暂时将未提交的变化移除，稍后再移入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git stash</div><div class="line">$ git stash pop</div></pre></td></tr></table></figure></p>
<h3 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h3><p>生成一个可供发布的压缩包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git archive</div></pre></td></tr></table></figure></p>
<p>转载自：<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS 6下安装Zabbix 3.0]]></title>
      <url>http://www.hi-linux.com/posts/16723.html</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>对于3.0官方只提供CentOS7的RPM包、Ubuntu的DEB包。对于CentOS6默认不提供RPM包，为了方便CentOS6包安装可采用以下两个项目中打好的RPM包。</p>
<p>环境要求</p>
<blockquote>
<p>PHP &gt;= 5.4  (CentOS6默认为5.3.3，需要更新)<br>curl &gt;= 7.20 (如需支持SMTP认证，需更新)</p>
</blockquote>
<p>为了支持CentOS6，特建立如下项目</p>
<blockquote>
<p><a href="https://github.com/zabbixcn/zabbix3.0-rpm.git" target="_blank" rel="external">https://github.com/zabbixcn/zabbix3.0-rpm.git</a><br><a href="https://github.com/zabbixcn/curl-rpm" target="_blank" rel="external">https://github.com/zabbixcn/curl-rpm</a></p>
</blockquote>
<a id="more"></a>
<h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><p>MySQL建议使用5.6版本，CentOS6默认为5.1，不建议使用，性能偏低。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm -ivh http://dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm</div><div class="line">yum install mysql-server -y  <span class="comment">#此过程会因为网路问题偏慢，请耐心等待</span></div></pre></td></tr></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vim /etc/my.cnf  </div><div class="line">[mysqld]</div><div class="line">innodb_file_per_table</div></pre></td></tr></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysqld start</div></pre></td></tr></table></figure>
<h4 id="设置ROOT密码"><a href="#设置ROOT密码" class="headerlink" title="设置ROOT密码"></a>设置ROOT密码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql_secure_installation   </div><div class="line"></div><div class="line">Enter current password <span class="keyword">for</span> root (enter <span class="keyword">for</span> none):</div><div class="line">Set root password? [Y/n]</div><div class="line">Remove anonymous users? [Y/n]</div><div class="line">Disallow root login remotely? [Y/n]</div><div class="line">Remove <span class="built_in">test</span> database and access to it? [Y/n]</div><div class="line">Reload privilege tables now? [Y/n]</div></pre></td></tr></table></figure>
<h4 id="创建zabbix数据库"><a href="#创建zabbix数据库" class="headerlink" title="创建zabbix数据库"></a>创建zabbix数据库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mysql -uroot -p</div><div class="line">mysql&gt; CREATE DATABASE zabbix CHARACTER SET utf8 COLLATE utf8_bin;</div><div class="line">mysql&gt; GRANT ALL PRIVILEGES ON zabbix.* TO zabbix@localhost IDENTIFIED BY <span class="string">'zabbix'</span>;</div><div class="line">mysql&gt; show databases;   </div><div class="line">+--------------------+     </div><div class="line">| Database           |     </div><div class="line">+--------------------+     </div><div class="line">| information_schema |     </div><div class="line">| mysql              |     </div><div class="line">| performance_schema |     </div><div class="line">| zabbix             |     </div><div class="line">+--------------------+</div></pre></td></tr></table></figure>
<h3 id="安装WEB"><a href="#安装WEB" class="headerlink" title="安装WEB"></a>安装WEB</h3><p>Zabbix 3.0对PHP的要求最低为5.4，而CentOS6默认为5.3.3，完全不满足要求，故需要利用第三方源将PHP升级到5.4以上。(注意:不支持PHP7)</p>
<p>ssh登录您的CentOS6 x64系统，使用root用户运行以下命令</p>
<h4 id="迁出RPM安装包"><a href="#迁出RPM安装包" class="headerlink" title="迁出RPM安装包"></a>迁出RPM安装包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/zabbixcn/zabbix3.0-rpm.git</div><div class="line"><span class="built_in">cd</span>  zabbix3.0-rpm/RPMS</div><div class="line">yum install zabbix-web-mysql-3.0.0-1.el6.noarch.rpm zabbix-web-3.0.0-1.el6.noarch.rpm</div></pre></td></tr></table></figure>
<h4 id="升级PHP为5-6版本"><a href="#升级PHP为5-6版本" class="headerlink" title="升级PHP为5.6版本"></a>升级PHP为5.6版本</h4><p>安装软件源<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -ivh http://repo.webtatic.com/yum/el6/latest.rpm</div></pre></td></tr></table></figure></p>
<p>如已安装PHP 5.3,先卸载</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum erase php php-mysql php-gd php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc php-mcrypt php-mbstring php-devel php-pecl-memcached php-pecl-memcache  php-common php-pdo php-cli php-fpm libmemcached</div></pre></td></tr></table></figure>
<p>安装PHP 5.6</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install httpd php56w php56w-mysql php56w-gd php56w-imap php56w-ldap php56w-odbc php56w-pear php56w-xml php56w-xmlrpc php56w-mcrypt php56w-mbstring php56w-devel php56w-pecl-memcached  php56w-common php56w-pdo php56w-cli php56w-pecl-memcache php56w-bcmath php56w-fpm</div></pre></td></tr></table></figure>
<p>修改时区</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed -i <span class="string">"s@# php_value date.timezone Europe/Riga@php_value date.timezone Asia/Shanghai@g"</span> /etc/httpd/conf.d/zabbix.conf</div></pre></td></tr></table></figure>
<h4 id="升级CURL"><a href="#升级CURL" class="headerlink" title="升级CURL"></a>升级CURL</h4><p>安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/zabbixcn/curl-rpm</div><div class="line"><span class="built_in">cd</span> curl-rpm/RPMS </div><div class="line">yum install curl-7.29.0-25.el6.x86_64.rpm  libcurl-7.29.0-25.el6.x86_64.rpm  libcurl-devel-7.29.0-25.el6.x86_64.rpm</div></pre></td></tr></table></figure></p>
<p>验证<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">curl -V          </div><div class="line"></div><div class="line">curl 7.29.0 (x86_64-redhat-linux-gnu) libcurl/7.29.0 NSS/3.16.1 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2</div><div class="line">Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp scp sftp smtp smtps telnet tftp </div><div class="line">Features: AsynchDNS GSS-Negotiate IDN IPv6 Largefile NTLM NTLM_WB SSL libz</div></pre></td></tr></table></figure></p>
<h3 id="安装Zabbix-Server"><a href="#安装Zabbix-Server" class="headerlink" title="安装Zabbix-Server"></a>安装Zabbix-Server</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum  localinstall  zabbix-server-mysql-3.0.0-1.el6.x86_64.rpm</div></pre></td></tr></table></figure>
<h4 id="初始化Zabbix数据库"><a href="#初始化Zabbix数据库" class="headerlink" title="初始化Zabbix数据库"></a>初始化Zabbix数据库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/share/zabbix-server-mysql-3.0.0</div><div class="line">zcat create.sql.gz | mysql -uzabbix -pzabbix zabbix</div></pre></td></tr></table></figure>
<h4 id="配置数据库连接信息"><a href="#配置数据库连接信息" class="headerlink" title="配置数据库连接信息"></a>配置数据库连接信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vi /etc/zabbix/zabbix_server.conf</div><div class="line">DBHost=localhost</div><div class="line">DBName=zabbix</div><div class="line">DBUser=zabbix</div><div class="line">DBPassword=zabbix</div></pre></td></tr></table></figure>
<h4 id="启动Zabbix-Server"><a href="#启动Zabbix-Server" class="headerlink" title="启动Zabbix-Server"></a>启动Zabbix-Server</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/zabbix-server restart</div></pre></td></tr></table></figure>
<p>如果一切正常，日志会如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">tail -n 100 /var/<span class="built_in">log</span>/zabbix/zabbix_server.log</div><div class="line"> 28554:20160217:112307.419 Starting Zabbix Server. Zabbix 3.0.0 (revision 58460).</div><div class="line"> 28554:20160217:112307.419 ****** Enabled features ******</div><div class="line"> 28554:20160217:112307.419 SNMP monitoring:           YES</div><div class="line"> 28554:20160217:112307.419 IPMI monitoring:           YES</div><div class="line"> 28554:20160217:112307.419 Web monitoring:            YES</div><div class="line"> 28554:20160217:112307.419 VMware monitoring:         YES</div><div class="line"> 28554:20160217:112307.419 SMTP authentication:       YES</div><div class="line"> 28554:20160217:112307.419 Jabber notifications:      YES</div><div class="line"> 28554:20160217:112307.419 Ez Texting notifications:  YES</div><div class="line"> 28554:20160217:112307.419 ODBC:                      YES</div><div class="line"> 28554:20160217:112307.419 SSH2 support:              YES</div><div class="line"> 28554:20160217:112307.419 IPv6 support:              YES</div><div class="line"> 28554:20160217:112307.419 TLS support:               YES</div><div class="line"> 28554:20160217:112307.419 ******************************</div><div class="line"> 28554:20160217:112307.419 using configuration file: /etc/zabbix/zabbix_server.conf</div><div class="line"> 28554:20160217:112307.428 current database version (mandatory/optional): 03000000/03000000</div><div class="line"> 28554:20160217:112307.428 required mandatory version: 03000000</div><div class="line"> 28554:20160217:112307.436 server <span class="comment">#0 started [main process]</span></div><div class="line"> 28556:20160217:112307.436 server <span class="comment">#1 started [configuration syncer #1]</span></div></pre></td></tr></table></figure>
<h3 id="配置WEB"><a href="#配置WEB" class="headerlink" title="配置WEB"></a>配置WEB</h3><h4 id="启动Apache"><a href="#启动Apache" class="headerlink" title="启动Apache"></a>启动Apache</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/httpd start</div></pre></td></tr></table></figure>
<h4 id="访问zabbix-web"><a href="#访问zabbix-web" class="headerlink" title="访问zabbix web"></a>访问zabbix web</h4><p>浏览器访问<code>http://${IP}/zabbix</code>，进行配置即可，此处不再详解！<br>默认用户名/密码:<code>Admin/zabbix</code>(区分大小写)</p>
<p><img src="http://www.hi-linux.com/img/linux/zabbix3.0.png" alt=""></p>
<h3 id="安装客户端"><a href="#安装客户端" class="headerlink" title="安装客户端"></a>安装客户端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install zabbix-agent-3.0.0-1.el6.x86_64.rpm zabbix-sender-3.0.0-1.el6.x86_64.rpm zabbix-get-3.0.0-1.el6.x86_64.rpm</div></pre></td></tr></table></figure>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>如果您是CentOS7或Ubuntu，请参考官方文档直接安装</p>
<blockquote>
<p><a href="https://www.zabbix.com/documentation/3.0/manual/installation/install_from_packages" target="_blank" rel="external">https://www.zabbix.com/documentation/3.0/manual/installation/install_from_packages</a></p>
</blockquote>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<p><a href="http://itnihao.blog.51cto.com/1741976/1742701" target="_blank" rel="external">http://itnihao.blog.51cto.com/1741976/1742701</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何正确配置Nginx+PHP]]></title>
      <url>http://www.hi-linux.com/posts/31363.html</url>
      <content type="html"><![CDATA[<p>假设我们用PHP实现了一个前端控制器，或者直白点说就是统一入口。把PHP请求都发送到同一个文件上，然后在此文件里通过解析<code>REQUEST_URI</code>实现路由。</p>
<p>此时很多教程会教大家这样配置Nginx+PHP</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name foo.com;</div><div class="line"></div><div class="line">    root /path;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        index index.html index.htm index.php;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!<span class="_">-e</span> <span class="variable">$request_filename</span>) &#123;</div><div class="line">            rewrite . /index.php last;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ~ \.php$ &#123;</div><div class="line">        include fastcgi_params;</div><div class="line">        fastcgi_param SCRIPT_FILENAME /path<span class="variable">$fastcgi_script_name</span>;</div><div class="line">        fastcgi_pass 127.0.0.1:9000;</div><div class="line">        fastcgi_index index.php;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>这里面有很多错误，或者说至少是坏味道的地方，大家看看能发现几个。</p>
<p>我们有必要先了解一下Nginx配置文件里指令的继承关系</p>
<p>Nginx配置文件分为好多块，常见的从外到内依次是<code>http</code>、<code>server</code>、<code>location</code>等等，缺省的继承关系是从外到内，也就是说内层块会自动获取外层块的值作为缺省值。</p>
<p>让我们先从<code>index</code>指令入手吧<br>在问题配置中它是在<code>location</code>中定义的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">    index index.html index.htm index.php;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一旦未来需要加入新的<code>location</code>，必然会出现重复定义的<code>index</code>指令，这是因为多个<code>location</code>是平级的关系，不存在继承，此时应该在<code>server</code>里定义<code>index</code>，借助继承关系，<code>index</code>指令在所有的<code>location</code>中都能生效。</p>
<p>接下来看看<code>if</code>指令</p>
<p>说它是大家误解最深的Nginx指令毫不为过</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="_">-e</span> <span class="variable">$request_filename</span>) &#123;</div><div class="line">    rewrite . /index.php last;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很多人喜欢用<code>if</code>指令做一系列的检查，不过这实际上是<code>try_files</code>指令的职责</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php;</div></pre></td></tr></table></figure>
<p>除此以外，初学者往往会认为<code>if</code>指令是内核级的指令，但是实际上它是<code>rewrite</code>模块的一部分，加上Nginx配置实际上是声明式的，而非过程式的，所以当其和非rewrite模块的指令混用时，结果可能会非你所愿。</p>
<p>下面看看<code>fastcgi_params</code>配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include fastcgi_params;</div></pre></td></tr></table></figure>
<p>Nginx有两份fastcgi配置文件，分别是<code>fastcgi_params</code>和<code>fastcgi.conf</code>，它们没有太大的差异，唯一的区别是后者比前者多了一行<code>SCRIPT_FILENAME</code>的定义</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fastcgi_param SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</div></pre></td></tr></table></figure>
<p>注意：<code>$document_root</code>和<code>$fastcgi_script_name</code>之间没有/</p>
<p>原本Nginx只有<code>fastcgi_params</code>，后来发现很多人在定义<code>SCRIPT_FILENAME</code>时使用了硬编码的方式，于是为了规范用法便引入了<code>fastcgi.conf</code>。</p>
<p>不过这样的话就产生一个疑问：为什么一定要引入一个新的配置文件，而不是修改旧的配置文件？这是因为<code>fastcgi_param</code>指令是数组型的，和普通指令相同的是：内层替换外层；和普通指令不同的是：当在同级多次使用的时候，是新增而不是替换。换句话说，如果在同级定义两次<code>SCRIPT_FILENAME</code>，那么它们都会被发送到后端，这可能会导致一些潜在的问题，为了避免此类情况，便引入了一个新的配置文件。</p>
<p>此外，我们还需要考虑一个安全问题：在PHP开启<code>cgi.fix_pathinfo</code>的情况下，PHP可能会把错误的文件类型当作PHP文件来解析。如果Nginx和PHP安装在同一台服务器上的话，那么最简单的解决方法是用<code>try_files</code>指令做一次过滤</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">try_files <span class="variable">$uri</span> =404;</div></pre></td></tr></table></figure>
<p>依照前面的分析，给出一份改良后的版本，是不是比开始的版本清爽了很多</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name foo.com;</div><div class="line"></div><div class="line">    root /path;</div><div class="line">    index index.html index.htm index.php;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php<span class="variable">$is_args</span><span class="variable">$args</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ~ \.php$ &#123;</div><div class="line">        try_files <span class="variable">$uri</span> =404;</div><div class="line"></div><div class="line">        include fastcgi.conf;</div><div class="line">        fastcgi_pass 127.0.0.1:9000;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>转载自：<a href="http://www.linuxprobe.com/nginx-php/" target="_blank" rel="external">http://www.linuxprobe.com/nginx-php/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx的try_files指令使用实例]]></title>
      <url>http://www.hi-linux.com/posts/53878.html</url>
      <content type="html"><![CDATA[<p>Nginx的配置语法灵活，可控制度非常高。在0.7以后的版本中加入了一个try_files指令，配合命名location，可以部分替代原本常用的rewrite配置方式，提高解析效率。</p>
<h3 id="try-files指令说明"><a href="#try-files指令说明" class="headerlink" title="try_files指令说明"></a>try_files指令说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">try_files指令</div><div class="line">语法：try_files file ... uri 或 try_files file ... = code</div><div class="line">默认值：无</div><div class="line">作用域：server location</div></pre></td></tr></table></figure>
<p>其作用是按顺序检查文件是否存在，返回第一个找到的文件或文件夹(结尾加斜线表示为文件夹)，如果所有的文件或文件夹都找不到，会进行一个内部重定向到最后一个参数。<a id="more"></a></p>
<p>需要注意的是，只有最后一个参数可以引起一个内部重定向，之前的参数只设置内部URI的指向。最后一个参数是回退URI且必须存在，否则会出现内部500错误。命名的location也可以使用在最后一个参数中。与rewrite指令不同，如果回退URI不是命名的location那么$args不会自动保留，如果你想保留$args，则必须明确声明。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?q=<span class="variable">$uri</span>&amp;<span class="variable">$args</span>;</div></pre></td></tr></table></figure></p>
<h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><h4 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h4><p>try_files 将尝试你列出的文件并设置内部文件指向。</p>
<p>例如:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">try_files /app/cache/ <span class="variable">$uri</span> @fallback; </div><div class="line">index index.php index.html;</div></pre></td></tr></table></figure>
<p>它将检测$document_root/app/cache/index.php,$document_root/app/cache/index.html 和 $document_root$uri是否存在，如果不存在着内部重定向到@fallback(＠表示配置文件中预定义标记点) 。<br>你也可以使用一个文件或者状态码(=404)作为最后一个参数，如果是最后一个参数是文件，那么这个文件必须存在。</p>
<h4 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h4><p>例如nginx不解析PHP文件，以文本代码返回</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">try_files <span class="variable">$uri</span> /cache.php @fallback;</div></pre></td></tr></table></figure>
<p>因为这个指令设置内部文件指向到 $document_root/cache.php 并返回,但没有发生内部重定向，因而没有进行location段处理而返回文本 。<br>(如果加上index指令可以解析PHP是因为index会触发一个内部重定向)</p>
<h4 id="示例三"><a href="#示例三" class="headerlink" title="示例三"></a>示例三</h4><p>跳转到变量</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line"> listen 8000;</div><div class="line"> server_name 192.168.119.100;</div><div class="line"> root html;</div><div class="line"> index index.html index.php;</div><div class="line"> </div><div class="line"> location /abc &#123;</div><div class="line">     try_files /4.html /5.html @qwe;      		<span class="comment">#检测文件4.html和5.html,如果存在正常显示,不存在就去查找@qwe值</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"> location @qwe  &#123;</div><div class="line">    rewrite ^/(.*)$   http://www.baidu.com;       <span class="comment">#跳转到百度页面</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h4 id="示例四"><a href="#示例四" class="headerlink" title="示例四"></a>示例四</h4><p>跳转指定文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">   listen 8000;</div><div class="line">   server_name 192.168.119.100;</div><div class="line">   root html;</div><div class="line">   index index.php index.html;</div><div class="line"></div><div class="line">   location /abc &#123;</div><div class="line">       try_files /4.html /5.html /6.html;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="示例五"><a href="#示例五" class="headerlink" title="示例五"></a>示例五</h4><p>将请求跳转到后端</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">upstream tornado &#123;</div><div class="line">        server 127.0.0.1:8001;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">server &#123;</div><div class="line">        server_name imike.me;</div><div class="line">        <span class="built_in">return</span> 301 <span class="variable">$scheme</span>://www.imike.me<span class="variable">$request_uri</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">server &#123;</div><div class="line">        listen 80;</div><div class="line">        server_name www.imike.me;</div><div class="line"> </div><div class="line">        root /var/www/www.imike.me/V0.3/www;</div><div class="line">        index index.html index.htm;</div><div class="line"> </div><div class="line">        try_files <span class="variable">$uri</span> @tornado;</div><div class="line"> </div><div class="line">        location @tornado &#123;</div><div class="line">                proxy_pass_header Server;</div><div class="line">                proxy_set_header Host <span class="variable">$http_host</span>;</div><div class="line">                proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">                proxy_set_header X-Scheme <span class="variable">$scheme</span>;</div><div class="line"> </div><div class="line">                proxy_pass http://tornado;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><h4 id="常见错误一"><a href="#常见错误一" class="headerlink" title="常见错误一"></a>常见错误一</h4><p>try_files 按顺序检查文件是否存在，返回第一个找到的文件，至少需要两个参数，但最后一个是内部重定向也就是说和rewrite效果一致，前面的值是相对$document_root的文件路径。也就是说参数的意义不同，甚至可以用一个状态码 (404)作为最后一个参数。如果不注意会有死循环造成500错误。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">location ~.*\.(gif|jpg|jpeg|png)$ &#123;</div><div class="line">        root /web/wwwroot;</div><div class="line">        try_files /static/<span class="variable">$uri</span> <span class="variable">$uri</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原意图是访问<code>http://example.com/test.jpg</code>时先去检查<code>/web/wwwroot/static/test.jpg</code>是否存在，不存在就取<code>/web/wwwroot/test.jpg</code></p>
<p>但由于最后一个参数是一个内部重定向，所以并不会检查<code>/web/wwwroot/test.jpg</code>是否存在，只要第一个路径不存在就会重新向然后再进入这个location造成死循环。结果出现500 Internal Server Error</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">location ~.*\.(gif|jpg|jpeg|png)$ &#123;</div><div class="line">        root /web/wwwroot;</div><div class="line">        try_files /static/<span class="variable">$uri</span> <span class="variable">$uri</span> 404;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样才会先检查<code>/web/wwwroot/static/test.jpg</code>是否存在，不存在就取<code>/web/wwwroot/test.jpg</code>再不存在则返回404 not found</p>
<h4 id="常见错误二"><a href="#常见错误二" class="headerlink" title="常见错误二"></a>常见错误二</h4><p>Nginx try_files <code>$query_string</code>为空的解决办法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name localhost.dev;</div><div class="line">    index index.php index.html index.htm;</div><div class="line">    <span class="built_in">set</span> <span class="variable">$root_path</span> <span class="string">'/var/www/phalcon/public'</span>; </div><div class="line">    root <span class="variable">$root_path</span>;</div><div class="line">    location / &#123;</div><div class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php;</div><div class="line">    &#125;</div><div class="line">    location ~ \.php$ &#123;</div><div class="line">        try_files <span class="variable">$uri</span> =404;</div><div class="line">        fastcgi_split_path_info ^(.+\.php)(/.+)$;</div><div class="line">        fastcgi_pass 127.0.0.1:9000;</div><div class="line">        fastcgi_index index.php;</div><div class="line">        fastcgi_param SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>; include fastcgi_params;</div><div class="line">    &#125;</div><div class="line">    location ~* ^/(css|img|js|flv|swf|download)/(.+)$ &#123;</div><div class="line">        root <span class="variable">$root_path</span>;</div><div class="line">    &#125;</div><div class="line">    location ~ /\.ht &#123;</div><div class="line">        deny all;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发现PHP无法获取<code>$_GET</code>信息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php;</div></pre></td></tr></table></figure>
<p>改为</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$query_string</span>;</div></pre></td></tr></table></figure>
<p>即可解决</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL高可用方案选型参考]]></title>
      <url>http://www.hi-linux.com/posts/10242.html</url>
      <content type="html"><![CDATA[<p>MySQL的各种高可用方案，大多是基于以下几种基础来部署的：</p>
<blockquote>
<p>基于主从复制；<br>基于Galera协议；<br>基于NDB引擎；<br>基于中间件/proxy；<br>基于共享存储；<br>基于主机高可用；</p>
</blockquote>
<p>在这些可选项中，最常见的就是基于主从复制的方案，其次是基于Galera的方案，我们重点说说这两种方案。其余几种方案在生产上用的并不多，我们只简单说下。<a id="more"></a></p>
<h3 id="基于主从复制的高可用方案"><a href="#基于主从复制的高可用方案" class="headerlink" title="基于主从复制的高可用方案"></a>基于主从复制的高可用方案</h3><h4 id="双节点主从-keepalived-heartbeat"><a href="#双节点主从-keepalived-heartbeat" class="headerlink" title="双节点主从 + keepalived/heartbeat"></a>双节点主从 + keepalived/heartbeat</h4><p>一般来说，中小型规模的时候，采用这种架构是最省事的。</p>
<p>两个节点可以采用简单的一主一从模式，或者双主模式，并且放置于同一个VLAN中，在master节点发生故障后，利用keepalived/heartbeat的高可用机制实现快速切换到slave节点。</p>
<p>在这个方案里，有几个需要注意的地方：</p>
<ul>
<li><p>采用keepalived作为高可用方案时，两个节点最好都设置成BACKUP模式，避免因为意外情况下（比如脑裂）相互抢占导致往两个节点写入相同数据而引发冲突；</p>
</li>
<li><p>把两个节点的auto_increment_increment（自增起始值）和auto_increment_offset（自增步长）设成不同值。其目的是为了避免master节点意外宕机时，可能会有部分binlog未能及时复制到slave上被应用，从而会导致slave新写入数据的自增值和原先master上冲突了，因此一开始就使其错开；当然了，如果有合适的容错机制能解决主从自增ID冲突的话，也可以不这么做；</p>
</li>
<li><p>slave节点服务器配置不要太差，否则更容易导致复制延迟。作为热备节点的slave服务器，硬件配置不能低于master节点；</p>
</li>
<li><p>如果对延迟问题很敏感的话，可考虑使用MariaDB分支版本，或者直接上线MySQL 5.7最新版本，利用多线程复制的方式可以很大程度降低复制延迟；</p>
</li>
<li><p>对复制延迟特别敏感的另一个备选方案，是采用semi sync replication（就是所谓的半同步复制）或者后面会提到的PXC方案，基本上无延迟，不过事务并发性能会有不小程度的损失，需要综合评估再决定；</p>
</li>
<li><p>keepalived的检测机制需要适当完善，不能仅仅只是检查mysqld进程是否存活，或者MySQL服务端口是否可通，还应该进一步做数据写入或者运算的探测，判断响应时间，如果超过设定的阈值，就可以启动切换机制；</p>
</li>
<li><p>keepalived最终确定进行切换时，还需要判断slave的延迟程度。需要事先定好规则，以便决定在延迟情况下，采取直接切换或等待何种策略。直接切换可能因为复制延迟有些数据无法查询到而重复写入；</p>
</li>
<li><p>keepalived或heartbeat自身都无法解决脑裂的问题，因此在进行服务异常判断时，可以调整判断脚本，通过对第三方节点补充检测来决定是否进行切换，可降低脑裂问题产生的风险。</p>
</li>
</ul>
<p>双节点主从+keepalived/heartbeat方案架构示意图见下：</p>
<p><img src="http://www.hi-linux.com/img/linux/mysqlha-2node-keepalived-wm.png" alt=""></p>
<p>图解：MySQL双节点（单向/双向主从复制），采用keepalived实现高可用架构。</p>
<h4 id="多节点主从-MHA-MMM"><a href="#多节点主从-MHA-MMM" class="headerlink" title="多节点主从+MHA/MMM"></a>多节点主从+MHA/MMM</h4><p>多节点主从，可以采用一主多从，或者双主多从的模式。<br>这种模式下，可以采用MHA或MMM来管理整个集群，目前MHA应用的最多，优先推荐MHA，最新的MHA也已支持MySQL 5.6的GTID模式了，是个好消息。</p>
<p>MHA的优势很明显：</p>
<ul>
<li><p>开源，用Perl开发，代码结构清晰，二次开发容易；</p>
</li>
<li><p>方案成熟，故障切换时，MHA会做到较严格的判断，尽量减少数据丢失，保证数据一致性；</p>
</li>
<li><p>提供一个通用框架，可根据自己的情况做自定义开发，尤其是判断和切换操作步骤；</p>
</li>
<li><p>支持binlog server，可提高binlog传送效率，进一步减少数据丢失风险。</p>
</li>
</ul>
<p>不过MHA也有些限制：</p>
<ul>
<li><p>需要在各个节点间打通ssh信任，这对某些公司安全制度来说是个挑战，因为如果某个节点被黑客攻破的话，其他节点也会跟着遭殃；</p>
</li>
<li><p>自带提供的脚本还需要进一步补充完善，当然了，一般的使用还是够用的。</p>
</li>
</ul>
<h4 id="多节点主从-etcd-zookeeper"><a href="#多节点主从-etcd-zookeeper" class="headerlink" title="多节点主从+etcd/zookeeper"></a>多节点主从+etcd/zookeeper</h4><p>在大规模节点环境下，采用keepalived或者MHA作为MySQL的高可用管理还是有些复杂或麻烦。<br>首先，这么多节点如果没有采用配置服务来管理，必然杂乱无章，线上切换时很容易误操作。<br>在较大规模环境下，建议采用etcd/zookeeper管理集群，可实现快速检测切换，以及便捷的节点管理。</p>
<h3 id="基于Galera协议的高可用方案"><a href="#基于Galera协议的高可用方案" class="headerlink" title="基于Galera协议的高可用方案"></a>基于Galera协议的高可用方案</h3><p>Galera是Codership提供的多主数据同步复制机制，可以实现多个节点间的数据同步复制以及读写，并且可保障数据库的服务高可用及数据一致性。<br>基于Galera的高可用方案主要有MariaDB Galera Cluster和Percona XtraDB Cluster（简称PXC），目前PXC用的会比较多一些。</p>
<p>PXC的架构示意图见下<br><img src="http://www.hi-linux.com/img/linux/galera-overview1.png" alt=""></p>
<p>图解：在底层采用wsrep接口实现数据在多节点间的同步复制。</p>
<p><img src="http://www.hi-linux.com/img/linux/certificationbasedreplication1.png" alt=""><br>图解：在PXC中，一次数据写入在各个节点间的验证/回滚流程。</p>
<p>PXC的优点</p>
<ul>
<li><p>服务高可用；</p>
</li>
<li><p>数据同步复制(并发复制)，几乎无延迟；</p>
</li>
<li><p>多个可同时读写节点，可实现写扩展，不过最好事先进行分库分表，让各个节点分别写不同的表或者库，避免让galera解决数据冲突；</p>
</li>
<li><p>新节点可以自动部署，部署操作简单；</p>
</li>
<li><p>数据严格一致性，尤其适合电商类应用；</p>
</li>
<li><p>完全兼容MySQL；</p>
</li>
</ul>
<p>虽然有这么多好处，但也有些局限性：</p>
<ul>
<li><p>只支持InnoDB引擎；</p>
</li>
<li><p>所有表都要有主键；</p>
</li>
<li><p>不支持LOCK TABLE等显式锁操作；</p>
</li>
<li><p>锁冲突、死锁问题相对更多；</p>
</li>
<li><p>不支持XA；</p>
</li>
<li><p>集群吞吐量/性能取决于短板；</p>
</li>
<li><p>新加入节点采用SST时代价高；</p>
</li>
<li><p>存在写扩大问题；</p>
</li>
<li><p>如果并发事务量很大的话，建议采用InfiniBand网络，降低网络延迟；</p>
</li>
<li><p>事实上，采用PXC的主要目的是解决数据的一致性问题，高可用是顺带实现的。因为PXC存在写扩大以及短板效应，并发效率会有较大损失，类似semi sync replication机制。</p>
</li>
</ul>
<h3 id="其他高可用方案"><a href="#其他高可用方案" class="headerlink" title="其他高可用方案"></a>其他高可用方案</h3><ul>
<li><p>基于NDB Cluster，由于NDB目前仍有不少缺陷和限制，不建议在生产环境上使用；</p>
</li>
<li><p>基于共享存储，一方面需要不太差的存储设备，另外共享存储可也会成为新的单点，除非采用基于高速网络的分布式存储，类似RDS的应用场景，架构方案就更复杂了，成本也可能更高；</p>
</li>
<li><p>基于中间件(Proxy)，现在可靠的Proxy选择并不多，而且没有通用的Proxy，都有有所针对，比如有的专注解决读写分离，有的专注分库分表等等，真正好用的Proxy一般要自行开发；</p>
</li>
<li><p>基于主机高可用，是指采用类似RHCS构建一个高可用集群后，再部署MySQL应用的方案。老实说，我没实际用过，但从侧面了解到这种方案生产上用的并不多，可能也有些局限性所致吧；</p>
</li>
</ul>
<p>转载自: <a href="http://imysql.com/2015/09/14/solutions-of-mysql-ha.shtml" target="_blank" rel="external">http://imysql.com/2015/09/14/solutions-of-mysql-ha.shtml</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[让MySQL支持emoji表情符号存储]]></title>
      <url>http://www.hi-linux.com/posts/50680.html</url>
      <content type="html"><![CDATA[<p>MySQL的文本(varchar,text)，对emoji表情符号不是很好的支持，在5.5之前的版本，varchar和text都是不支持存储emoji表情符号的（即使是utf8）的编码模式。原因在于mysql的utf8是规定了每一个utf8字符按照3个字节来存储，而一个emoji（最初来自苹果系统，现在流行于各种移动操作系统）却需要4个字节来存储。这就导致了如果强制将emoji存储到varchar，text等字段上的时候，mysql会抛出异常，认为emoji是个不正确的文本。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR 1366 (HY000): Incorrect string value: ‘\xF0\x9F\x91\xBD\xF0\x9F…’ <span class="keyword">for</span> column ‘name’ at row 31</div></pre></td></tr></table></figure>
<p>其原因是utf8是不定长的，根据左侧位来决定占用了几个字节。emoji表情是4个字节，而MySQL的utf8编码最多支持3个字节，所以插入会出错。</p>
<p>为了解决这个问题，MySQL 5.5开始支持utf8mb4,utf8mb4可支持4个字节utf编码，从而支持更大的字符集，并且兼容utf8。简单来说，utf8mb4是utf8的超集。<a id="more"></a></p>
<p>要让MySQL开启utf8mb4支持，需要一些额外的设置。</p>
<h3 id="检查MySQL-Server版本"><a href="#检查MySQL-Server版本" class="headerlink" title="检查MySQL Server版本"></a>检查MySQL Server版本</h3><p>utf8mb4 支持需要MySQL Server v5.5.3+</p>
<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><h4 id="设置表的CHARSET"><a href="#设置表的CHARSET" class="headerlink" title="设置表的CHARSET"></a>设置表的CHARSET</h4><p>创建表的时候指定CHARSET为utf8mb4</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE IF NOT EXISTS table_name (</div><div class="line">...</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE utf8mb4_general_ci;</div></pre></td></tr></table></figure>
<h4 id="修改数据库字符集"><a href="#修改数据库字符集" class="headerlink" title="修改数据库字符集"></a>修改数据库字符集</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER DATABASE database_name CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;</div></pre></td></tr></table></figure>
<h4 id="修改表的字符集"><a href="#修改表的字符集" class="headerlink" title="修改表的字符集"></a>修改表的字符集</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table_name CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; <span class="comment">#将TABLE_NAME替换成你的表名</span></div><div class="line">ALTER TABLE table_name modify name text charset utf8mb4;</div></pre></td></tr></table></figure>
<h4 id="修改字段的字符集"><a href="#修改字段的字符集" class="headerlink" title="修改字段的字符集"></a>修改字段的字符集</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table_name CHANGE column_name column_name VARCHAR(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</div></pre></td></tr></table></figure>
<h4 id="修改MySQL配置文件"><a href="#修改MySQL配置文件" class="headerlink" title="修改MySQL配置文件"></a>修改MySQL配置文件</h4><p>修改my.cnf的内容</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[client]</div><div class="line">default-character-set = utf8mb4</div><div class="line"></div><div class="line">[mysql]</div><div class="line">default-character-set = utf8mb4</div><div class="line"></div><div class="line">[mysqld]</div><div class="line">character-set-client-handshake = FALSE</div><div class="line">character-set-server = utf8mb4</div><div class="line">collation-server = utf8mb4_unicode_ci</div><div class="line">init_connect=<span class="string">'SET  NAMES utf8mb4'</span></div></pre></td></tr></table></figure>
<h4 id="检查是否生效"><a href="#检查是否生效" class="headerlink" title="检查是否生效"></a>检查是否生效</h4><p>正常情况下的结果应该如下所示</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SHOW VARIABLES WHERE Variable_name LIKE <span class="string">'character\_set\_%'</span> OR   Variable_name LIKE <span class="string">'collation%'</span>;</div><div class="line">+--------------------------+--------------------+</div><div class="line">| Variable_name            | Value              |</div><div class="line">+--------------------------+--------------------+</div><div class="line">| character_set_client     | utf8mb4            |</div><div class="line">| character_set_connection | utf8mb4            |</div><div class="line">| character_set_database   | utf8mb4            |</div><div class="line">| character_set_filesystem | binary             |</div><div class="line">| character_set_results    | utf8mb4            |</div><div class="line">| character_set_server     | utf8mb4            |</div><div class="line">| character_set_system     | utf8               |</div><div class="line">| collation_connection     | utf8mb4_unicode_ci |</div><div class="line">| collation_database       | utf8mb4_unicode_ci |</div><div class="line">| collation_server         | utf8mb4_unicode_ci |</div><div class="line">+--------------------------+--------------------+</div></pre></td></tr></table></figure>
<p>如果修改以上都不行请查询</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show variables like <span class="string">'%sql_mode%'</span>; </div><div class="line">+---------------+--------------------------------------------+</div><div class="line">| Variable_name | Value                                      |</div><div class="line">+---------------+--------------------------------------------+</div><div class="line">| sql_mode      | STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION |</div><div class="line">+---------------+--------------------------------------------+</div><div class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div></pre></td></tr></table></figure>
<p>如果是以上结果恭喜你是存储不了的</p>
<p>去设置这个sql_mod模式(注意这里修改看之后要退出控制台要不然还是看不到效果的，而且这个配置写my.cnf重启服务器是不生效的)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show variables like <span class="string">'%sql_mode%'</span>;</div><div class="line">+---------------+--------------------------------------------+</div><div class="line">| Variable_name | Value                                      |</div><div class="line">+---------------+--------------------------------------------+</div><div class="line">| sql_mode      | STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION |</div><div class="line">+---------------+--------------------------------------------+</div><div class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div></pre></td></tr></table></figure>
<h4 id="指定MySQL连接时的charset"><a href="#指定MySQL连接时的charset" class="headerlink" title="指定MySQL连接时的charset"></a>指定MySQL连接时的charset</h4><p>以mysql-python为例</p>
<pre><code class="bash">MySQLdb.connect(
        host=config.DB_HOST,
        port=config.DB_PORT,
        user=config.DB_USR,
        passwd=config.DB_PSW,
        db=config.DB_NAME,
        use_unicode=True,
        charset=<span class="string">"utf8mb4"</span>)
</code></pre>
<p>参考文档</p>
<p><a href="http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters" target="_blank" rel="external">http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters</a><br><a href="http://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html" target="_blank" rel="external">http://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html</a><br><a href="https://mathiasbynens.be/notes/mysql-utf8mb4#utf8-to-utf8mb4" target="_blank" rel="external">https://mathiasbynens.be/notes/mysql-utf8mb4#utf8-to-utf8mb4</a><br><a href="http://blog.caoyue.me/post/support-emoji-in-mysql" target="_blank" rel="external">http://blog.caoyue.me/post/support-emoji-in-mysql</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Centos6下Codis集群的搭建与使用]]></title>
      <url>http://www.hi-linux.com/posts/53649.html</url>
      <content type="html"><![CDATA[<h3 id="Codis简介"><a href="#Codis简介" class="headerlink" title="Codis简介"></a>Codis简介</h3><blockquote>
<p>Codis是豌豆荚使用Go和C语言开发、以代理的方式实现的一个Redis分布式集群解决方案,且完全兼容Twemproxy。Twemproxy对于上一层的应用来说, 连接Codis Proxy(Redis代理服务)和连接原生的Redis服务器没有明显的区别,上一层应用能够像使用单机的Redis一样对待。Codis底层会处理请求的转发、不停机的数据迁移等工作, 所有底层的一切处理, 对于客户端来说是透明的。总之，可以简单的认为后台连接的是一个内存无限大的Redis服务。Codis遵循MIT开源协议发布，更多关于Codis的信息请登录其在GitHub的主页查看。</p>
<p>Codis是一个分布式Redis解决方案, 对于上层的应用来说, 连接到Codis Proxy和连接原生的Redis Server没有明显的区别(不支持的命令列表), 上层应用可以像使用单机的Redis一样使用, Codis底层会处理请求的转发, 不停机的数据迁移等工作, 所有后边的一切事情, 对于前面的客户端来说是透明的, 可以简单的认为后边连接的是一个内存无限大的Redis服务。<a id="more"></a></p>
<p>Codis 由四部分组成:</p>
<p>Codis Proxy     (codis-proxy)<br>Codis Manager     (codis-config)<br>Codis Redis     (codis-server)<br>ZooKeeper</p>
<p>codis-proxy是客户端连接的Redis代理服务, codis-proxy本身实现了Redis协议, 表现得和一个原生的Redis没什么区别(就像Twemproxy), 对于一个业务来说, 可以部署多个codis-proxy, codis-proxy本身是无状态的. 可以执行多个Codis Dashboard(codis-config)是Codis的管理工具, 支持包括, 添加/删除 Redis 节点, 添加/删除Proxy节点, 发起数据迁移等操作. codis-config本身还自带了一个 http server, 会启动一个dashboard, 用户可以直接在浏览器上观察Codis集群的运行状态。</p>
<p>Codis Redis(codis-server)是Codis项目维护的一个Redis分支, 基于2.8.21开发, 加入了slot的支持和原子的数据迁移指令. Codis上层的codis-proxy和codis-config只能和这个版本的Redis交互才能正常运行。</p>
<p>Codis依赖ZooKeeper来存放数据路由表和codis-proxy节点的元信息, codis-config 发起的命令都会通过ZooKeeper同步到各个存活的codis-proxy。</p>
<p>Codis支持按照Namespace区分不同的产品, 拥有不同的product name 的产品, 各项配置都不会冲突。</p>
<p><strong>Codis架构</strong><br><img src="http://www.hi-linux.com/img/linux/architecture.png" alt=""></p>
</blockquote>
<h3 id="安装并测试Codis"><a href="#安装并测试Codis" class="headerlink" title="安装并测试Codis"></a>安装并测试Codis</h3><p>本文使用Codis分支的2.0版本，也是很多公司正在用的版本，Codis3.0版本已经有分支了，但是有线上使用的用户不确定。Codis3.0可以不依赖zookeeper，dashboard和proxy直接通过HTTP方式通讯。出于稳定性考虑，我们还是用目前的版本，避免在新版本上踩坑。</p>
<p>Codis新增一个group的概念，每个group包含一个Redis Master和至少一个Redis Slave。Codis可以支持数据热迁移.Codis采用预先分片机制，分成1024个slots，也就是最多可以支持1024个Codis server,这些信息保存在zookeeper中。</p>
<h4 id="安装GO语言和编译安装codis"><a href="#安装GO语言和编译安装codis" class="headerlink" title="安装GO语言和编译安装codis"></a>安装GO语言和编译安装codis</h4><p>Codis由Go语言写的，所以需要安装Go语言包</p>
<h5 id="安装go"><a href="#安装go" class="headerlink" title="安装go"></a>安装go</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">wget  https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz</div><div class="line">wget  http://golangtc.com/static/go/1.6/go1.6.linux-amd64.tar.gz   <span class="comment">#国内镜像地址</span></div><div class="line">tar -C /usr/<span class="built_in">local</span> -xzf go1.6.linux-amd64.tar.gz</div><div class="line">配置环境变量</div><div class="line">vi /etc/profile</div><div class="line">在最后添加：</div><div class="line"><span class="built_in">export</span> GOROOT=/usr/<span class="built_in">local</span>/go</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin</div><div class="line">保存，执行：</div><div class="line"><span class="built_in">source</span> /etc/profile</div><div class="line">判断go是否安装成功，运行go version</div><div class="line">[root@centos6 <span class="built_in">local</span>]<span class="comment"># go version</span></div><div class="line">go version go1.6 linux/amd64</div><div class="line"></div><div class="line">也可以yum安装：</div><div class="line"><span class="comment">#yum -y install gcc gcc-c++ make git wget go </span></div><div class="line"><span class="comment">#export GOROOT=/usr/local/go</span></div><div class="line"><span class="comment">#export PATH=$GOROOT/bin:$JAVA_HOME/bin:$PATH</span></div></pre></td></tr></table></figure>
<h5 id="安装codis"><a href="#安装codis" class="headerlink" title="安装codis"></a>安装codis</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#安装编译工具</span></div><div class="line">yum groupinstall <span class="string">"Development Tools"</span></div><div class="line"><span class="comment">#下载并编译codis</span></div><div class="line">mkdir <span class="variable">$HOME</span>/goproj</div><div class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/goproj</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin:<span class="variable">$GOPATH</span>/bin</div><div class="line">go get -u <span class="_">-d</span> github.com/CodisLabs/codis</div><div class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/CodisLabs/codis</div><div class="line">make</div><div class="line">make gotest</div></pre></td></tr></table></figure>
<blockquote>
<p>这里需要注意的是，最好按照Codis的文档使用go get载codis，我尝试过自己下载需要的依赖包然后编译codis，但是总是报错说是GOPATH设置不正确。这里对于初次接触GO项目编译的人来说有点诡异。</p>
</blockquote>
<p>编译完成后会在bin目录下生成3个二进制文件</p>
<blockquote>
<p>codis-config    Codis的管理工具，支持添加/删除Redis节点，添加/删除Proxy节点，执行Auto Rebalance等操作</p>
<p>codis-server    Codis 项目维护的一个Redis分支, 基于2.8.21开发, 加入了slot的支持和原子的数据迁移指令. Codis上层的codis-proxy和codis-config只能和这个版本的Redis交互才能正常运行.</p>
<p>codis-proxy     是客户端连接的 Redis 代理服务, codis-proxy本身实现了Redis协议, 表现得和一个原生的Redis没什么区别(就像 Twemproxy), 对于一个业务来说, 可以部署多个codis-proxy, codis-proxy本身是无状态的.</p>
<p>Codis 支持按照 Namespace 区分不同的产品, 拥有不同的product name的产品, 各项配置都不会冲突</p>
</blockquote>
<p><strong>另外值得注意的是</strong></p>
<blockquote>
<p>bin/assets文件夹是codis-config的dashboard http服务需要的前端资源, 需要和codis-config放置在同一文件夹下。</p>
<p>把Codis编译完成后直接复制bin目录下的codis-proxy,codis-config,codis-server三个二进制文件和assets资源目录到其他机器上也是可以直接运行的。目标主机不一定安装有go语言。</p>
</blockquote>
<h5 id="常用命令维护说明"><a href="#常用命令维护说明" class="headerlink" title="常用命令维护说明"></a>常用命令维护说明</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line">server：</div><div class="line">主要用来添加,删除，提权，查找 server group（实际操作zookeeper）</div><div class="line">./codis-config server --help</div><div class="line">codis-config server list</div><div class="line">codis-config server add &lt;group_id&gt; &lt;redis_addr&gt; &lt;role&gt;</div><div class="line">codis-config server remove &lt;group_id&gt; &lt;redis_addr&gt;</div><div class="line">codis-config server promote &lt;group_id&gt; &lt;redis_addr&gt;</div><div class="line">codis-config server add-group &lt;group_id&gt;</div><div class="line">codis-config server remove-group &lt;group_id&gt;</div><div class="line"></div><div class="line">slot：</div><div class="line">主要用来初始化,迁移，设置range-set，查询slot</div><div class="line"></div><div class="line">./codis-config slot --help</div><div class="line">usage:</div><div class="line">codis-config slot init [<span class="_">-f</span>]</div><div class="line">codis-config slot info &lt;slot_id&gt;</div><div class="line">codis-config slot <span class="built_in">set</span> &lt;slot_id&gt; &lt;group_id&gt; &lt;status&gt;</div><div class="line">codis-config slot range-set &lt;slot_from&gt; &lt;slot_to&gt; &lt;group_id&gt; &lt;status&gt;</div><div class="line">codis-config slot migrate &lt;slot_from&gt; &lt;slot_to&gt; &lt;group_id&gt;</div><div class="line">[--delay=&lt;delay_time_in_ms&gt;]</div><div class="line">codis-config slot rebalance [--delay=&lt;delay_time_in_ms&gt;]</div><div class="line"></div><div class="line">dashboard：</div><div class="line">主要用来启动dashboard</div><div class="line">./codis-config dashboard --help</div><div class="line">usage: codis-config dashboard [--addr=&lt;address&gt;] [--http-log=&lt;log_file&gt;]</div><div class="line">options:</div><div class="line">--addr listen ip:port, e.g. localhost:12345, :8086, [default: :8086]</div><div class="line">--http-log http request <span class="built_in">log</span> [default: request.log ]</div><div class="line"></div><div class="line">action:</div><div class="line">主要用来操作codis保存的事件记录，并解除zk锁（迁移异常会出现锁）</div><div class="line"> </div><div class="line">./codis-config action --help</div><div class="line">usage: codis-config action (gc [-n &lt;num&gt; | <span class="_">-s</span> &lt;seconds&gt;] | remove-lock)</div><div class="line">options:</div><div class="line">gc:</div><div class="line">gc -n N</div><div class="line">gc <span class="_">-s</span> Sec</div><div class="line">keep last N actions;</div><div class="line">keep last Sec seconds actions;</div><div class="line">remove-lock force remove zookeeper lock;</div><div class="line"></div><div class="line">proxy：</div><div class="line">主要用来实现proxy上线，下线，查询</div><div class="line">./codis-config proxy</div><div class="line">usage:</div><div class="line">codis-config proxy list</div><div class="line">codis-config proxy offline &lt;proxy_name&gt;</div><div class="line">codis-config proxy online &lt;proxy_name&gt;</div><div class="line"></div><div class="line">codis-proxy</div><div class="line">主要用来启动proxy进程</div><div class="line">./codis-proxy --help</div><div class="line">usage: proxy [-c &lt;config_file&gt;] [-L &lt;log_file&gt;] [--log-level=&lt;loglevel&gt;] [--cpu=&lt;cpu_num&gt;]</div><div class="line">[--addr=&lt;proxy_listen_addr&gt;] [--http-addr=&lt;debug_http_server_addr&gt;]</div><div class="line"></div><div class="line">options:</div><div class="line">-cset config file</div><div class="line">-L<span class="built_in">set</span> output <span class="built_in">log</span> file, default is stdout</div><div class="line">--log-level=&lt;loglevel&gt; <span class="built_in">set</span> <span class="built_in">log</span> level: info, warn, error, debug [default: info]</div><div class="line">--cpu=&lt;cpu_num&gt;</div><div class="line">num of cpu cores that proxy can use</div><div class="line">--addr=&lt;proxy_listen_addr&gt;</div><div class="line">proxy listen address, example: 0.0.0.0:9000</div><div class="line">--http-addr=&lt;debug_http_server_addr&gt;</div><div class="line">debug vars http server</div><div class="line"></div><div class="line">codis-server</div><div class="line">主要用来启动 codis(redis 实例)</div><div class="line">./codis-server --help</div><div class="line">Usage: ./redis-server [/path/to/redis.conf] [options]</div><div class="line">./redis-server - (<span class="built_in">read</span> config from stdin)</div><div class="line">./redis-server -v or --version</div><div class="line">./redis-server -h or --help</div><div class="line">./redis-server --test-memory &lt;megabytes&gt;</div><div class="line"></div><div class="line">Examples:</div><div class="line">./redis-server (run the server with default conf)</div><div class="line">./redis-server /etc/redis/6379.conf</div><div class="line">./redis-server --port 7777</div><div class="line">./redis-server --port 7777 --slaveof 127.0.0.1 8888</div><div class="line">./redis-server /etc/myredis.conf --loglevel verbose</div><div class="line"></div><div class="line">Sentinel mode:</div><div class="line">./redis-server /etc/sentinel.conf –sentinel</div><div class="line"></div><div class="line">codis-ha</div><div class="line">主要来实现 server_group 中的主从 ha</div><div class="line">./codis-ha --help</div><div class="line">Usage of ./codis-ha:</div><div class="line">-codis-config=<span class="string">"localhost:18087"</span>: api server address</div><div class="line">-productName=<span class="string">"test"</span>: product name, can be found <span class="keyword">in</span> codis-proxy<span class="string">'s config</span></div></pre></td></tr></table></figure>
<h5 id="Codis不支持的命令"><a href="#Codis不支持的命令" class="headerlink" title="Codis不支持的命令"></a>Codis不支持的命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">KEYS, MOVE, OBJECT, RENAME, RENAMENX, SORT, SCAN, BITOP,MSETNX, BLPOP, BRPOP, BRPOPLPUSH, PSUBSCRIBE，PUBLISH, PUNSUBSCRIBE, SUBSCRIBE, UNSUBSCRIBE, DISCARD, EXEC, MULTI, UNWATCH, WATCH, SCRIPT EXISTS, SCRIPT FLUSH, SCRIPT KILL, SCRIPT LOAD, AUTH, ECHO, SELECT, BGREWRITEAOF, BGSAVE, CLIENT KILL, CLIENT LIST, CONFIG GET, CONFIG SET, CONFIG RESETSTAT, DBSIZE, DEBUG OBJECT, DEBUG SEGFAULT, FLUSHALL, FLUSHDB, INFO, LASTSAVE, MONITOR, SAVE, SHUTDOWN, SLAVEOF, SLOWLOG, SYNC, TIME、MIGRATE、RANDOMKEY、PSUBSCRIBE、PUBLISH、PUNSUBSCRIBE、BGREWRITEAOF、RESTORE、SLOTSCHECK、SLOTSDEL、SLOTSINFO、SLOTSMGRTONE、SLOTSMGRTSLOT、SLOTSMGRTTAGONE、SLOTSMGRTTAGSLOT</div></pre></td></tr></table></figure>
<h5 id="Codis半支持的命令"><a href="#Codis半支持的命令" class="headerlink" title="Codis半支持的命令"></a>Codis半支持的命令</h5><p>需要将以下key放入同一slot才能支持，方式采用{}，如key为”bar{zap}”，则只会对zap进行hash</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RPOPLPUSH、SDIFF、SINTER、SINTERSTORE、SMOVE、SUNION、SUNIONSTORE、ZINTERSTORE、ZUNIONSTORE、PFMERGE、EVAL、EVALSHA</div></pre></td></tr></table></figure>
<h5 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h5><p>zookeeper依赖java环境，所以要先安装JDK。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget --no-cookies --no-check-certificate --header <span class="string">"Cookie: oraclelicense=accept-securebackup-cookie"</span> rpm<span class="string">" -O jdk-7u65-linux-x64.rpm</span></div><div class="line">rpm -ivh jdk-7u65-linux-x64.rpm</div></pre></td></tr></table></figure></p>
<h5 id="安装和配置zookeeper"><a href="#安装和配置zookeeper" class="headerlink" title="安装和配置zookeeper"></a>安装和配置zookeeper</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget http://www.us.apache.org/dist/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz</div><div class="line">tar zxvf zookeeper-3.4.6.tar.gz</div><div class="line"><span class="built_in">cd</span> zookeeper-3.4.6/conf/</div><div class="line">cp zoo_sample.cfg zoo.cfg</div></pre></td></tr></table></figure>
<h5 id="部署zookeeper集群"><a href="#部署zookeeper集群" class="headerlink" title="部署zookeeper集群"></a>部署zookeeper集群</h5><ul>
<li><p>复制三份zookeeper实例</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cp -rf  zookeeper-3.4.6 zookeeper-1</div><div class="line">cp -rf  zookeeper-3.4.6 zookeeper-2</div><div class="line">cp -rf  zookeeper-3.4.6 zookeeper-3</div></pre></td></tr></table></figure>
</li>
<li><p>创建三个数据和日志目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir -p /var/<span class="built_in">local</span>/zookeeper/data&#123;1..3&#125;</div><div class="line">mkdir -p /var/<span class="built_in">local</span>/zookeeper/logs&#123;1..3&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>编辑配置文件</p>
<p>修改数据目录和日志目录.并且添加server(由于是一台机器，端口则不能相同)，如下</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">vim /opt/zookeeper-1/conf/zoo.cfg</div><div class="line">tickTime=2000</div><div class="line">initLimit=10</div><div class="line">syncLimit=5</div><div class="line">dataDir=/var/<span class="built_in">local</span>/zookeeper/data1</div><div class="line">dataLogDir=/var/<span class="built_in">local</span>/zookeeper/logs1</div><div class="line">clientPort=2181</div><div class="line">server.1=server01:2887:3887</div><div class="line">server.2=server01:2888:3888</div><div class="line">server.3=server01:2889:3889</div><div class="line"></div><div class="line">vim /opt/zookeeper-2/conf/zoo.cfg</div><div class="line">tickTime=2000</div><div class="line">initLimit=10</div><div class="line">syncLimit=5</div><div class="line">dataDir=/var/<span class="built_in">local</span>/zookeeper/data2</div><div class="line">clientPort=2182</div><div class="line">server.1=192.168.119.100:2887:3887</div><div class="line">server.2=192.168.119.100:2888:3888</div><div class="line">server.3=192.168.119.100:2889:3889</div><div class="line"></div><div class="line">vim /opt/zookeeper-3/conf/zoo.cfg</div><div class="line">tickTime=2000</div><div class="line">initLimit=10</div><div class="line">syncLimit=5</div><div class="line">dataDir=/var/<span class="built_in">local</span>/zookeeper/data3</div><div class="line">clientPort=2183</div><div class="line">server.1=192.168.119.100:2887:3887</div><div class="line">server.2=192.168.119.100:2888:3888</div><div class="line">server.3=192.168.119.100:2889:3889</div></pre></td></tr></table></figure>
<ul>
<li><p>创建myid文件</p>
<p>要在每台机器的dataDir下，新建一个myid文件，里面存放一个数字，用来标识当前主机。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"1"</span>&gt;/var/<span class="built_in">local</span>/zookeeper/data1/myid</div><div class="line"><span class="built_in">echo</span> <span class="string">"2"</span>&gt;/var/<span class="built_in">local</span>/zookeeper/data2/myid</div><div class="line"><span class="built_in">echo</span> <span class="string">"3"</span>&gt;/var/<span class="built_in">local</span>/zookeeper/data3/myid</div></pre></td></tr></table></figure>
<ul>
<li>启动三个zookeeper</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/opt/zookeeper-1/bin/zkServer.sh start</div><div class="line">/opt/zookeeper-2/bin/zkServer.sh start</div><div class="line">/opt/zookeeper-3/bin/zkServer.sh start</div></pre></td></tr></table></figure>
<ul>
<li>查看是否已经自动选举</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/opt/zookeeper-1/bin/zkServer.sh status</div><div class="line">JMX enabled by default</div><div class="line">Using config: /opt/zookeeper-1/bin/../conf/zoo.cfg</div><div class="line">Mode: follower</div><div class="line"></div><div class="line">/opt/zookeeper-2/bin/zkServer.sh status</div><div class="line">JMX enabled by default</div><div class="line">Using config: /opt/zookeeper-2/bin/../conf/zoo.cfg</div><div class="line">Mode: leader</div><div class="line"></div><div class="line">/opt/zookeeper-3/bin/zkServer.sh status</div><div class="line">JMX enabled by default</div><div class="line">Using config: /opt/zookeeper-3/bin/../conf/zoo.cfg</div><div class="line">Mode: follower</div></pre></td></tr></table></figure>
<ul>
<li>备注</li>
</ul>
<blockquote>
<p>  三种类型的节点<br>  Leader   : 处理写请求，最终更新状态；<br>  Follower : 处理客户端请求，参与投票；<br>  Observer : 不参加投票，只处理客户端请求，主要是为提升zookeeper的性能；</p>
<p>  当leader重启或宕机后，通过paxos算法，重新选出Leader，并以Leader为准，进行数据同步；<br>  关于为Server ID，是标识host机器在集群中的机器序号，在每个ZK机器上，需要在dataDir目录下创建一个myid文件，myid中就是这个Server ID的数字。</p>
</blockquote>
<ul>
<li>连接测试</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/opt/zookeeper-1/bin/zkCli.sh -server 192.168.119.100:2181</div><div class="line">Connecting to 192.168.119.100:2181</div><div class="line">2016-03-25 13:35:12,972 [myid:] - INFO  [main:Environment@100] - Client environment:zookeeper.version=3.4.6-1569965, built on 02/20/2014 09:09 GMT</div><div class="line">2016-03-25 13:35:12,974 [myid:] - INFO  [main:Environment@100] - Client environment:host.name=localhost</div><div class="line">2016-03-25 13:35:12,974 [myid:] - INFO  [main:Environment@100] - Client environment:java.version=1.8.0_65</div><div class="line">2016-03-25 13:35:12,987 [myid:] - INFO  [main:Environment@100] - Client environment:java.vendor=Oracle Corporation</div><div class="line">2016-03-25 13:35:12,987 [myid:] - INFO  [main:Environment@100] - Client environment:java.home=/usr/java/jdk1.8.0_65/jre</div><div class="line">2016-03-25 13:35:12,987 [myid:] - INFO  [main:Environment@100] - Client environment:java.class.path=/opt/zookeeper-1/bin/../build/classes:/opt/zookeeper-1/bin/../build/lib/*.jar:/opt/zookeeper-1/bin/../lib/slf4j-log4j12-1.6.1.jar:/opt/zookeeper-1/bin/../lib/slf4j-api-1.6.1.jar:/opt/zookeeper-1/bin/../lib/netty-3.7.0.Final.jar:/opt/zookeeper-1/bin/../lib/<span class="built_in">log</span>4j-1.2.16.jar:/opt/zookeeper-1/bin/../lib/jline-0.9.94.jar:/opt/zookeeper-1/bin/../zookeeper-3.4.6.jar:/opt/zookeeper-1/bin/../src/java/lib/*.jar:/opt/zookeeper-1/bin/../conf:.:/usr/java/jdk1.8.0_65//lib/dt.jar:/usr/java/jdk1.8.0_65//lib/tools.jar</div><div class="line">2016-03-25 13:35:12,987 [myid:] - INFO  [main:Environment@100] - Client environment:java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</div><div class="line">2016-03-25 13:35:12,987 [myid:] - INFO  [main:Environment@100] - Client environment:java.io.tmpdir=/tmp</div><div class="line">2016-03-25 13:35:12,987 [myid:] - INFO  [main:Environment@100] - Client environment:java.compiler=&lt;NA&gt;</div><div class="line">2016-03-25 13:35:12,987 [myid:] - INFO  [main:Environment@100] - Client environment:os.name=Linux</div><div class="line">2016-03-25 13:35:12,987 [myid:] - INFO  [main:Environment@100] - Client environment:os.arch=amd64</div><div class="line">2016-03-25 13:35:12,988 [myid:] - INFO  [main:Environment@100] - Client environment:os.version=2.6.32-573.12.1.el6.x86_64</div><div class="line">2016-03-25 13:35:12,988 [myid:] - INFO  [main:Environment@100] - Client environment:user.name=root</div><div class="line">2016-03-25 13:35:12,988 [myid:] - INFO  [main:Environment@100] - Client environment:user.home=/root</div><div class="line">2016-03-25 13:35:12,988 [myid:] - INFO  [main:Environment@100] - Client environment:user.dir=/root</div><div class="line">2016-03-25 13:35:12,989 [myid:] - INFO  [main:ZooKeeper@438] - Initiating client connection, connectString=192.168.119.100:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain<span class="variable">$MyWatcher</span>@67424e82</div><div class="line">Welcome to ZooKeeper!</div><div class="line">JLine support is enabled</div><div class="line">2016-03-25 13:35:13,125 [myid:] - INFO  [main-SendThread(192.168.119.100:2181):ClientCnxn<span class="variable">$SendThread</span>@975] - Opening socket connection to server 192.168.119.100/192.168.119.100:2181. Will not attempt to authenticate using SASL (unknown error)</div><div class="line">2016-03-25 13:35:13,236 [myid:] - INFO  [main-SendThread(192.168.119.100:2181):ClientCnxn<span class="variable">$SendThread</span>@852] - Socket connection established to 192.168.119.100/192.168.119.100:2181, initiating session</div><div class="line">[zk: 192.168.119.100:2181(CONNECTING) 0] 2016-03-25 13:35:13,345 [myid:] - INFO  [main-SendThread(192.168.119.100:2181):ClientCnxn<span class="variable">$SendThread</span>@1235] - Session establishment complete on server 192.168.119.100/192.168.119.100:2181, sessionid = 0x153ab70dc7c0001, negotiated timeout = 30000</div><div class="line"></div><div class="line">WATCHER::</div><div class="line">WatchedEvent state:SyncConnected <span class="built_in">type</span>:None path:null</div><div class="line">[zk: 192.168.119.100:2181(CONNECTED) 0] ls /</div><div class="line">[zk, zookeeper]</div><div class="line">[zk: 192.168.119.100:2181(CONNECTED) 1] ls /zookeeper</div><div class="line">[quota]</div><div class="line">[zk: 192.168.119.100:2181(CONNECTED) 2]</div></pre></td></tr></table></figure>
<h5 id="启动Codis服务"><a href="#启动Codis服务" class="headerlink" title="启动Codis服务"></a>启动Codis服务</h5><h6 id="启动dashboard"><a href="#启动dashboard" class="headerlink" title="启动dashboard"></a>启动dashboard</h6><p>codis-config和codis-proxy使用config.ini这个配置文件,编辑配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">grep -v <span class="string">'#'</span>  config.ini|grep  -v <span class="string">'^$'</span></div><div class="line"><span class="comment">#根据实际情况，修改以下项</span></div><div class="line">coordinator=zookeeper</div><div class="line">zk=192.168.119.100:2181,192.168.119.100:2182,192.168.119.100:2183</div><div class="line">product=<span class="built_in">test</span></div><div class="line">dashboard_addr=192.168.119.100:18087</div><div class="line">password=</div><div class="line">backend_ping_period=5</div><div class="line">session_max_timeout=1800</div><div class="line">session_max_bufsize=131072</div><div class="line">session_max_pipeline=1024</div><div class="line">zk_session_timeout=30000</div><div class="line">proxy_id=proxy_1   <span class="comment">#如果有多个proxy，proxy_id 需要唯一。</span></div></pre></td></tr></table></figure>
<ul>
<li>启动dashboard</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/codis-config dashboard</div></pre></td></tr></table></figure>
<ul>
<li>关闭dashboard</li>
</ul>
<p>我们在启动了dashboard后，他打印了一堆内容，如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[code]2015/09/26 11:18:41 dashboard.go:160: [INFO] dashboard listening on addr: :18087</div><div class="line">2015/09/26 11:18:41 dashboard.go:143: [INFO] dashboard node created: /zk/codis/db_test/dashboard, &#123;<span class="string">"addr"</span>: <span class="string">"localhost:18087"</span>, <span class="string">"pid"</span>: 1701&#125;</div><div class="line">2015/09/26 11:18:41 dashboard.go:144: [WARN] ********** Attention **********</div><div class="line">2015/09/26 11:18:41 dashboard.go:145: [WARN] You should use `<span class="built_in">kill</span> &#123;pid&#125;` rather than `<span class="built_in">kill</span> -9 &#123;pid&#125;` to stop me,</div><div class="line">2015/09/26 11:18:41 dashboard.go:146: [WARN] or the node resisted on zk will not be cleaned when I<span class="string">'m quiting and you must remove it manually</span></div><div class="line">2015/09/26 11:18:41 dashboard.go:147: [WARN] *******************************</div></pre></td></tr></table></figure>
<p>是的，如内容说说的，如果要关闭，记得要<code>kill -{pid}</code></p>
<p>要不然突然电脑没电之类的bug，导致异常退出的时候，就得手动关闭，要不然在下次启动的时候，就会遇到下面的内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">bin/codis-config dashboard</div><div class="line">2015/09/26 11:14:10 dashboard.go:160: [INFO] dashboard listening on addr: :18087</div><div class="line">2015/09/26 11:14:10 dashboard.go:234: [PANIC] create zk node failed</div><div class="line">[error]: dashboard already exists: &#123;<span class="string">"addr"</span>: <span class="string">"192.168.0.123:18087"</span>, <span class="string">"pid"</span>: 30155&#125;</div><div class="line">[stack]: </div><div class="line">    3   /usr/<span class="built_in">local</span>/codis/src/github.com/wandoulabs/codis/cmd/cconfig/dashboard.go:234</div><div class="line">            main.runDashboard</div><div class="line">    2   /usr/<span class="built_in">local</span>/codis/src/github.com/wandoulabs/codis/cmd/cconfig/dashboard.go:54</div><div class="line">            main.cmdDashboard</div><div class="line">    1   /usr/<span class="built_in">local</span>/codis/src/github.com/wandoulabs/codis/cmd/cconfig/main.go:84</div><div class="line">            main.runCommand</div><div class="line">    0   /usr/<span class="built_in">local</span>/codis/src/github.com/wandoulabs/codis/cmd/cconfig/main.go:151</div><div class="line">            main.main</div><div class="line">        ... ...</div></pre></td></tr></table></figure></p>
<blockquote>
<p>备注:必须先启动zookeeper</p>
</blockquote>
<ul>
<li><p>通过NGINX代理认证访问dashboard</p>
<p>配置nginx</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">yum install -y nginx httpd</div><div class="line">vim /etc/nginx/conf.d/codis.conf</div><div class="line">修改如下参数：</div><div class="line">server &#123;</div><div class="line">  listen       80;</div><div class="line">  server_name  192.168.119.100;</div><div class="line"></div><div class="line">  location / &#123;</div><div class="line">    auth_basic <span class="string">"codis auth"</span>;</div><div class="line">    auth_basic_user_file /etc/nginx/passwd.db;</div><div class="line">    proxy_set_header Host <span class="variable">$host</span>;</div><div class="line">    proxy_set_header X-Forwarded-For <span class="variable">$remote_addr</span>;</div><div class="line">    proxy_pass http://192.168.119.100:18087;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  启动nginx</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">htpasswd -c /etc/nginx/passwd codis</div><div class="line">service nginx start</div><div class="line">chkconfig nginx on</div><div class="line">chkconfig httpd off</div></pre></td></tr></table></figure>
<blockquote>
<p>备注：因为codis的dashboard不支持认证访问，可以通过nginx代理做认证访问(htpasswd的apache的一个命令工具，用于生成http 基本认证的密码文件)，可以用防火墙关闭18087端口。通过URL浏览器访问codis的dashboard。</p>
</blockquote>
<h5 id="初始化slots"><a href="#初始化slots" class="headerlink" title="初始化slots"></a>初始化slots</h5><p>初始化slots(codis-config上操作)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/codis-config slot init</div></pre></td></tr></table></figure>
<p>该命令会在zookeepr上创建slot相关信息</p>
<p>重新初始化slot</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">bin/codis-config slot init <span class="_">-f</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"msg"</span>: <span class="string">"OK"</span>,</div><div class="line">  <span class="string">"ret"</span>: 0</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="部署codis-server"><a href="#部署codis-server" class="headerlink" title="部署codis-server"></a>部署codis-server</h5><p>Codis Redis和普通的Redis启动方式一样的,这里创建4个Codis Redis实例，两两一组</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Master  192.168.119.100:26379</div><div class="line">Slave   192.168.119.100:26380</div><div class="line">Master  192.168.119.100:26479</div><div class="line">Slave   192.168.119.100:26480</div></pre></td></tr></table></figure>
<ul>
<li>调整内存分配策略</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"1"</span> &gt; /proc/sys/vm/overcommit_memory</div><div class="line"><span class="built_in">echo</span> <span class="string">"512"</span> &gt; /proc/sys/net/core/somaxconn</div><div class="line">vim /etc/sysctl.conf</div><div class="line"></div><div class="line">修改如下参数：</div><div class="line">vm.overcommit_memory = 1</div><div class="line">net.core.somaxconn = 512</div><div class="line"></div><div class="line">让sysctl生效</div><div class="line">sysctl -p</div><div class="line"></div><div class="line">禁用大内存页面</div><div class="line"><span class="built_in">echo</span> <span class="string">"never"</span> &gt; /sys/kernel/mm/transparent_hugepage/enabled</div><div class="line"></div><div class="line">加入开机自启</div><div class="line">vim /etc/rc.local</div><div class="line">加入如下参数：</div><div class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="_">-f</span> /sys/kernel/mm/transparent_hugepage/enabled ; <span class="keyword">then</span>  </div><div class="line">  <span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled  </div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<ul>
<li>生成配置文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cp extern/redis-2.8.21/redis.conf redis26379.conf</div><div class="line">cp extern/redis-2.8.21/redis.conf redis26380.conf</div><div class="line">cp extern/redis-2.8.21/redis.conf redis26479.conf</div><div class="line">cp extern/redis-2.8.21/redis.conf redis26480.conf</div></pre></td></tr></table></figure>
<ul>
<li><p>修改配置文件</p>
<p>将几个Redis实例的pidfile、port和dbfilename进行区分,以redis26379.conf为例(配置文件主要更改以下几点)</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">grep -v <span class="string">'#'</span> redis26379.conf|egrep <span class="string">'pidfile|port|dbfilename|slaveof'</span></div><div class="line">pidfile /var/run/redis26379.pid</div><div class="line">port 26379</div><div class="line">dbfilename dump26379.rdb</div><div class="line"></div><div class="line"></div><div class="line">grep -v <span class="string">'#'</span> redis26380.conf|egrep <span class="string">'pidfile|port|dbfilename|slaveof'</span></div><div class="line">pidfile /var/run/redis26380.pid</div><div class="line">port 26380</div><div class="line">dbfilename dump26380.rdb</div><div class="line">slaveof localhost 26379    <span class="comment">#将26380设置成为26379的从库</span></div><div class="line"></div><div class="line"></div><div class="line">grep -v <span class="string">'#'</span> redis26479.conf|egrep <span class="string">'pidfile|port|dbfilename|slaveof'</span></div><div class="line">pidfile /var/run/redis26479.pid</div><div class="line">port 26479</div><div class="line">dbfilename dump26479.rdb</div><div class="line"></div><div class="line">grep -v <span class="string">'#'</span> redis26480.conf|egrep <span class="string">'pidfile|port|dbfilename|slaveof'</span></div><div class="line">pidfile /var/run/redis26480.pid</div><div class="line">port 26480</div><div class="line">dbfilename dump26480.rdb   </div><div class="line">slaveof localhost 26479   <span class="comment">#将26480设置成为26479的从库</span></div></pre></td></tr></table></figure>
<ul>
<li>启动codis</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bin/codis-server redis26379.conf</div><div class="line">bin/codis-server redis26380.conf </div><div class="line">bin/codis-server redis26479.conf</div><div class="line">bin/codis-server redis26480.conf</div></pre></td></tr></table></figure>
<blockquote>
<p>备注：codis不是不负责维护主从，而是不会自动持续维护主从状态。在手动添加slave的时候会发送slave of指令，如果redis的slave of不写在配置文件里，重启会被重置。</p>
</blockquote>
<h5 id="配置Redis-Server-Group"><a href="#配置Redis-Server-Group" class="headerlink" title="配置Redis Server Group"></a>配置Redis Server Group</h5><p>每个Server Group就是一个Redis服务器组，包括一个Master和多个Slave，group id从1开始算起</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bin/codis-config server add 1 localhost:26379 master</div><div class="line">bin/codis-config server add 1 localhost:26380 slave</div><div class="line">bin/codis-config server add 2 localhost:26479 master</div><div class="line">bin/codis-config server add 2 localhost:26480 slave</div></pre></td></tr></table></figure>
<p>移除节点</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bin/codis-config server remove-group 1</div><div class="line">bin/codis-config server remove-group 2</div></pre></td></tr></table></figure>
<blockquote>
<p>备注：添加Redis Server Group，只允许有一个master，可以有多个slave，group id需要是大于等于1的整数。</p>
</blockquote>
<h5 id="设置server-group服务的slot范围"><a href="#设置server-group服务的slot范围" class="headerlink" title="设置server group服务的slot范围"></a>设置server group服务的slot范围</h5><p>Codis采用Pre-sharding的技术来实现数据的分片，默认分成1024个slots(0-1023)，对于每个key通过公式SlotID=crc32(key)%1024确定属于哪个Slot，每个slot都会有一个且必须有一个特定的server group id来表示这个slot的数据由哪个server group来提供</p>
<p>例如：设置编号为[0, 511]的slot由server group 1 提供服务, 编号[512, 1023]的slot由server group 2提供服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bin/codis-config slot range-set 0 511 1 online</div><div class="line">bin/codis-config slot range-set 512 1023 2 online</div></pre></td></tr></table></figure>
<blockquote>
<p>备注：Codis采用Pre-sharding 的技术来实现数据的分片，默认分成1024个slots (0-1023)，每一个slot都会有一个特定的server group id，后端最多支持1024个Codis Server，路由信息保存在ZooKeeper中。</p>
</blockquote>
<h5 id="启动coids-proxy"><a href="#启动coids-proxy" class="headerlink" title="启动coids-proxy"></a>启动coids-proxy</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">bin/codis-proxy -c config.ini -L ./<span class="built_in">log</span>/proxy.log  --cpu=32 --addr=0.0.0.0:19000 --http-addr=0.0.0.0:11000 &amp;</div><div class="line"></div><div class="line">备注：</div><div class="line">--cpu 是codis-proxy 使用的CPU核数，根据主机的情况设置；</div><div class="line">--addr是codis-proxy的redis server监听地址；</div><div class="line">--http-addr是codis-proxy启动的http server，显示的调试信息可以访问 http://server_addr:port/debug/vars ；</div></pre></td></tr></table></figure>
<p>启动dashboard时，codis管理界面端口为18087，10086的端口，实际上用不到；刚启动codis-proxy默认是处于offline的状态，需要设置为online状态</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/codis-config -c config.ini proxy online proxy_1</div></pre></td></tr></table></figure>
<p>设置proxy为offline</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">bin/codis-config proxy offline proxy_1</div><div class="line">&#123;</div><div class="line">  <span class="string">"msg"</span>: <span class="string">"OK"</span>,</div><div class="line">  <span class="string">"ret"</span>: 0</div><div class="line">&#125;</div><div class="line">[5]   Exit 1                  bin/codis-proxy -c config.ini -L proxy.log --cpu=2 --addr=0.0.0.0:19000 --http-addr=0.0.0.0:11000</div></pre></td></tr></table></figure>
<p>通过浏览器访问codis的管理界面:<code>http://192.168.119.100:18087/admin/</code></p>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>使用redis-benchmark随意写入一些数据</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">redis-benchmark -h 192.168.119.100 -p 19000 -n 500000 -P 100  -r 1048576 <span class="_">-d</span> 256 -t get,<span class="built_in">set</span>,mset -c 800</div><div class="line">-n 发起的请求总数</div><div class="line">-P Pipeline请求数</div><div class="line"><span class="_">-d</span> SET/GET值大小</div><div class="line">-c 并列连接的客户端数量</div></pre></td></tr></table></figure>
<p>使用脚本插入数据</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#/bin/bash</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..1000&#125;</div><div class="line"><span class="keyword">do</span></div><div class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></div><div class="line">  redis-cli -h 192.168.119.100 -p 19000 <span class="built_in">set</span> name<span class="variable">$i</span> <span class="variable">$i</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<p>测试一下redis-master和redis-slave是否正常同步数据了</p>
<p>在redis-master上写数据</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">redis-cli -h 192.168.119.100  -p 26379</div><div class="line">192.168.119.100:26379&gt;<span class="built_in">set</span> name <span class="built_in">test</span></div><div class="line">OK</div><div class="line">192.168.119.100:26379&gt;<span class="built_in">set</span> age 24</div><div class="line">OK</div><div class="line">192.168.119.100:26379:7000&gt;</div></pre></td></tr></table></figure>
<p>在redis-slave查看是否把数据同步过来了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">redis-cli -h 192.168.119.100  -p 26380</div><div class="line">192.168.119.100:26380&gt; get name</div><div class="line"><span class="string">"test"</span></div><div class="line">192.168.119.100:26380&gt; get age</div><div class="line"><span class="string">"29"</span></div><div class="line">192.168.119.100:26380&gt; </div><div class="line">可以看到正常同步的。</div></pre></td></tr></table></figure>
<p>下面做个测试，测试大体内容是</p>
<p>1)假设redis-master有问题，也可以理解为挂了<br>2)在页面把redis-slave手动提升为master<br>3)把有问题的master下线<br>4)假如刚刚有问题的master已经正常恢复服务了，转为redis-slave</p>
<p>在上面已经测试了，在redis-master写数据,redis-slave上是可以看到数据同步过来的，现在在redis-slave上写数据，看主能不能看到</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">redis-cli -h 192.168.119.100  -p 26380</div><div class="line">192.168.119.100:26380&gt; <span class="built_in">set</span> MySQL innodb</div><div class="line">OK</div><div class="line">192.168.119.100:26380&gt; get MySQL</div><div class="line"><span class="string">"innodb"</span></div><div class="line">192.168.119.100:26380&gt;</div></pre></td></tr></table></figure>
<p>在redis-master查看</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">redis-cli -h 192.168.119.100  -p 26379</div><div class="line">192.168.119.100:26379&gt; keys *</div><div class="line">1) <span class="string">"name"</span></div><div class="line">2) <span class="string">"age"</span></div><div class="line">192.168.119.100:26379&gt; </div><div class="line"></div><div class="line">可以看到，redis-slave写数据，是不会到master上的。</div></pre></td></tr></table></figure>
<p>现在模拟redis-master down机</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ps -ef |grep 26379 </div><div class="line">root       6466      1  0 09:28 ?        00:00:32 bin/codis-server *:26379  </div><div class="line"><span class="built_in">kill</span> -9 6466</div></pre></td></tr></table></figure>
<p>在web页面刷新可以看到master已经挂了<br>我们把redis-slave提升master，点Promote to Master按钮即可：<br>可以看到本来的master已经变成offline下线状态了，这时我们把它删除掉，点后面的X删除主机。假如刚刚下线的redis服务器恢复正常了，再点上面的Add New Redis Instance按钮添加主机：<br>可以看到刚刚下线redis服务器，现在变成了redis-slave的角色了。我们测试下数据是否正常同步</p>
<p><strong>注意：现在26380端口的角色是master的了，在它上面写数据</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">redis-cli -h 192.168.119.100  -p 26380</div><div class="line">192.168.119.100:26380&gt; <span class="built_in">set</span> aa bb</div><div class="line">OK</div><div class="line">192.168.119.100:26380&gt; <span class="built_in">set</span> cc dd</div><div class="line">OK</div><div class="line">192.168.119.100:26380&gt;</div></pre></td></tr></table></figure>
<p>新的redis-slave上查看数据也是就26379端口对应的redis</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">192.168.119.100:26379&gt; get aa</div><div class="line"><span class="string">"bb"</span></div><div class="line">192.168.119.100:26379&gt; get cc</div><div class="line"><span class="string">"dd"</span></div><div class="line">192.168.119.100:26379&gt;</div></pre></td></tr></table></figure>
<p>可以看到是正常同步的。</p>
<h5 id="在线增加分片"><a href="#在线增加分片" class="headerlink" title="在线增加分片"></a>在线增加分片</h5><p>添加redis master和slave到group 4</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">codis-config -c config.ini server add 4 10.13.43.144:6379 master</div><div class="line">codis-config -c config.ini server add 4 10.13.50.214:6380 slave</div></pre></td></tr></table></figure>
<h5 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h5><p>将slot id为[768-1023]的slot数据，迁移到 server group 4上，执行完命令后，数据会在后台迁移，web页面中可以看到迁移的状态。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">codis-config -c <span class="variable">$CODISCONF</span>/config.ini slot migrate 768 1023 4</div></pre></td></tr></table></figure>
<p>通过访问<code>http://192.168.119.100:18087/slots</code></p>
<p>可以看到slots的排列情况，不同的Group是不同的颜色。这样作数据迁移后很容易看到slot迁移后的情况。<br>如果要迁移slots可以在管理界面选择Migrate Slot(s) 然后选择需要将哪些slots迁移到哪个Group</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/codis-config slot migrate 0 511 2 --delay=10</div></pre></td></tr></table></figure>
<p>正常的slots的状态是online，正在迁移的slots的状态是migrate</p>
<p>数据迁移migrate的问题</p>
<p>因为填错了组，所以导致这个迁移任务一致显示出错，reblance卡住不能动，对此的解决方法是，到zk下面的migrate_task里面删掉任务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sh /usr/<span class="built_in">local</span>/zookeeper/bin/zkCli.sh</div><div class="line">ls /zk/codis/db_test/migrate_tasks</div><div class="line">＃在显示的里面最小的那个任务号码。放到下面这一个去</div><div class="line">delete /zk/codis/db_test/migrate_tasks/XXXXX任务号码XXXX</div></pre></td></tr></table></figure>
<h5 id="自动均衡"><a href="#自动均衡" class="headerlink" title="自动均衡"></a>自动均衡</h5><p>Codis支持动态的根据实例内存, 自动对slot进行迁移, 以均衡数据分布.</p>
<p>自动均衡slots分布需要满足几个条件</p>
<blockquote>
<p>所有的codis-server都必须设置了maxmemory参数<br>所有的slots都应该处于online状态, 即没有迁移任务正在执行<br>所有server group都必须有Master</p>
</blockquote>
<ul>
<li>执行自动均衡</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">管理界面</div><div class="line">在管理界面点击Auto Rebalance</div><div class="line"></div><div class="line">命令行方式</div><div class="line">bin/codis-config slot rebalance</div></pre></td></tr></table></figure>
<p>关于redis的配置maxmemory </p>
<p>为何要设置这个maxmemory呢，因为codes在做主从切换的时候，用的是codis-ha; </p>
<p>codis-ha实现codis-server的主从切换，codis-server主库挂了会提升一个从库为主库，从库挂了会设置这个从库从集群下线。 而这个codes－ha需要我们明确每个redis可以使用的最大内存。不能是NAN GB，所以需要我们配置这个属性。拉到redis自带的配置文件的中间地方，有下面这段，我们取消maxmemory的注释就好了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Don't use more memory than the specified amount of bytes.</span></div><div class="line"><span class="comment"># When the memory limit is reached Redis will try to remove keys</span></div><div class="line"><span class="comment"># according to the eviction policy selected (see maxmemory-policy).</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># If Redis can't remove keys according to the policy, or if the policy is</span></div><div class="line"><span class="comment"># set to 'noeviction', Redis will start to reply with errors to commands</span></div><div class="line"><span class="comment"># that would use more memory, like SET, LPUSH, and so on, and will continue</span></div><div class="line"><span class="comment"># to reply to read-only commands like GET.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># This option is usually useful when using Redis as an LRU cache, or to set</span></div><div class="line"><span class="comment"># a hard memory limit for an instance (using the 'noeviction' policy).</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># WARNING: If you have slaves attached to an instance with maxmemory on,</span></div><div class="line"><span class="comment"># the size of the output buffers needed to feed the slaves are subtracted</span></div><div class="line"><span class="comment"># from the used memory count, so that network problems / resyncs will</span></div><div class="line"><span class="comment"># not trigger a loop where keys are evicted, and in turn the output</span></div><div class="line"><span class="comment"># buffer of slaves is full with DELs of keys evicted triggering the deletion</span></div><div class="line"><span class="comment"># of more keys, and so forth until the database is completely emptied.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># In short... if you have slaves attached it is suggested that you set a lower</span></div><div class="line"><span class="comment"># limit for maxmemory so that there is some free RAM on the system for slave</span></div><div class="line"><span class="comment"># output buffers (but this is not needed if the policy is 'noeviction').</span></div><div class="line"><span class="comment">#</span></div><div class="line">maxmemory 1GB</div></pre></td></tr></table></figure>
<h5 id="codis-server的HA"><a href="#codis-server的HA" class="headerlink" title="codis-server的HA"></a>codis-server的HA</h5><p>当一个group的master挂掉的时候，codis不会自动的将某个slave升级成master，codis-ha实现codis-server的主从切换，codis-server主库挂了会提升一个从库为主库，从库挂了会设置这个从库从集群下线。</p>
<ul>
<li>安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/goproj</div><div class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span></div><div class="line">go get github.com/ngaut/codis-ha</div><div class="line"><span class="built_in">cd</span> src/github.com/ngaut/codis-ha</div><div class="line">go build</div></pre></td></tr></table></figure>
<ul>
<li>使用方法</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./codis-ha--codis-config=192.168.92.136:18087 --productName=<span class="built_in">test</span> &amp;</div></pre></td></tr></table></figure>
<p>注:productName为集群项目名称，codis-config为codis dashboard地址。</p>
<ul>
<li>使用supervisord管理codis-ha进程</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">yum -y install supervisord</div><div class="line">/etc/supervisord.conf中添加如下内容：</div><div class="line">[program:codis-ha]</div><div class="line">autorestart = True</div><div class="line">stopwaitsecs = 10</div><div class="line">startsecs = 1</div><div class="line">stopsignal = QUIT</div><div class="line"><span class="built_in">command</span> = /root/goproj/src/github.com/ngaut/codis-ha --codis-config=192.168.92.136:18087 --productName=<span class="built_in">test</span></div><div class="line">user = root</div><div class="line">startretries = 3</div><div class="line">autostart = True</div><div class="line">exitcodes = 0,2</div></pre></td></tr></table></figure>
<ul>
<li>启动supervisord服务</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/supervisord start</div><div class="line">chkconfig supervisord  on</div></pre></td></tr></table></figure>
<p>此时，<code>ps -ef |grep codis-ha</code>你会发现codis-ha进程已经启动，这个时候你去停掉一个codis-server的master，看看slave会不会提升为master呢</p>
<h5 id="常见错误处理"><a href="#常见错误处理" class="headerlink" title="常见错误处理"></a>常见错误处理</h5><p>错误1：启动dashboard报错，提示已经存在pid文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">bin/codis-config -c config.ini dashboard &amp;</div><div class="line">[1] 441</div><div class="line">[root@Mike codis]<span class="comment"># 2015/09/15 10:23:05 dashboard.go:160: [INFO] dashboard listening on addr: :18087</span></div><div class="line">2015/09/15 10:23:05 dashboard.go:234: [PANIC] create zk node failed</div><div class="line">[error]: dashboard already exists: &#123;<span class="string">"addr"</span>: <span class="string">"10.19.21.241:18087"</span>, <span class="string">"pid"</span>: 12687&#125;</div><div class="line">[stack]: </div><div class="line">    3   /usr/<span class="built_in">local</span>/codis/src/github.com/wandoulabs/codis/cmd/cconfig/dashboard.go:234</div><div class="line">            main.runDashboard</div><div class="line">    2   /usr/<span class="built_in">local</span>/codis/src/github.com/wandoulabs/codis/cmd/cconfig/dashboard.go:54</div><div class="line">            main.cmdDashboard</div><div class="line">    1   /usr/<span class="built_in">local</span>/codis/src/github.com/wandoulabs/codis/cmd/cconfig/main.go:84</div><div class="line">            main.runCommand</div><div class="line">    0   /usr/<span class="built_in">local</span>/codis/src/github.com/wandoulabs/codis/cmd/cconfig/main.go:151</div><div class="line">            main.main</div><div class="line">        ... ...</div><div class="line"></div><div class="line">[1]+  Exit 1                  bin/codis-config -c config.ini dashboard</div><div class="line"></div><div class="line">解决办法：</div><div class="line">到zk里删除dashboard</div><div class="line">/usr/<span class="built_in">local</span>/zookeeper/bin/zkCli.sh </div><div class="line">Connecting to localhost:2181</div><div class="line">.....</div><div class="line">[zk: localhost:2181(CONNECTED) 6] delete /zk/codis/db_test/dashboard</div><div class="line">[zk: localhost:2181(CONNECTED) 7] quit</div><div class="line"></div><div class="line">bin/codis-config -c config.ini dashboard &amp;</div><div class="line">[1] 623</div><div class="line">[root@Mike codis]<span class="comment"># 2015/09/15 10:26:11 dashboard.go:160: [INFO] dashboard listening on addr: :18087</span></div><div class="line">2015/09/15 10:26:11 dashboard.go:143: [INFO] dashboard node created: /zk/codis/db_test/dashboard, &#123;<span class="string">"addr"</span>: <span class="string">"10.19.21.241:18087"</span>, <span class="string">"pid"</span>: 623&#125;</div><div class="line">2015/09/15 10:26:11 dashboard.go:144: [WARN] ********** Attention **********</div><div class="line">2015/09/15 10:26:11 dashboard.go:145: [WARN] You should use `<span class="built_in">kill</span> &#123;pid&#125;` rather than `<span class="built_in">kill</span> -9 &#123;pid&#125;` to stop me,</div><div class="line">2015/09/15 10:26:11 dashboard.go:146: [WARN] or the node resisted on zk will not be cleaned when I<span class="string">'m quiting and you must remove it manually</span></div><div class="line">2015/09/15 10:26:11 dashboard.go:147: [WARN] *******************************</div></pre></td></tr></table></figure>
<p>错误2:删除group下的节点被锁</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line">bin/codis-config server remove 2 10.19.21.241:6380</div><div class="line">2015/09/15 10:29:41 main.go:153: [PANIC] run sub-command failed</div><div class="line">[error]: http status code 500, zkutil: obtaining lock timed out</div><div class="line">    4   /usr/<span class="built_in">local</span>/codis/src/github.com/wandoulabs/codis/cmd/cconfig/utils.go:66</div><div class="line">            main.callApi</div><div class="line">    3   /usr/<span class="built_in">local</span>/codis/src/github.com/wandoulabs/codis/cmd/cconfig/server_group.go:124</div><div class="line">            main.runRemoveServerFromGroup</div><div class="line">    2   /usr/<span class="built_in">local</span>/codis/src/github.com/wandoulabs/codis/cmd/cconfig/server_group.go:57</div><div class="line">            main.cmdServer</div><div class="line">    1   /usr/<span class="built_in">local</span>/codis/src/github.com/wandoulabs/codis/cmd/cconfig/main.go:86</div><div class="line">            main.runCommand</div><div class="line">    0   /usr/<span class="built_in">local</span>/codis/src/github.com/wandoulabs/codis/cmd/cconfig/main.go:151</div><div class="line">            main.main</div><div class="line">        ... ...</div><div class="line">[stack]: </div><div class="line">    0   /usr/<span class="built_in">local</span>/codis/src/github.com/wandoulabs/codis/cmd/cconfig/main.go:153</div><div class="line">            main.main</div><div class="line">        ... ...</div><div class="line"></div><div class="line"></div><div class="line">同样到zk里删除整个db_test</div><div class="line">[zk: localhost:2181(CONNECTED) 5] ls /zk/codis/db_test</div><div class="line">[proxy, slots, servers, LOCK, migrate_tasks, actions, fence, ActionResponse, dashboard]</div><div class="line">[zk: localhost:2181(CONNECTED) 6] delete /zk/codis/db_test</div><div class="line">Node not empty: /zk/codis/db_test</div><div class="line"></div><div class="line">停止服务</div><div class="line">ps -ef |grep codis</div><div class="line">root       623 32515  0 10:26 pts/3    00:00:01 bin/codis-config -c config.ini dashboard</div><div class="line">root      1663 32515  0 10:35 pts/3    00:00:00 grep codis</div><div class="line">root     13115     1  0 Sep14 ?        00:00:42 bin/codis-server *:6379     </div><div class="line">root     13134     1  0 Sep14 ?        00:00:42 bin/codis-server *:6380     </div><div class="line">root     13210     1  0 Sep14 ?        00:00:41 bin/codis-server *:6480     </div><div class="line">root     13229     1  0 Sep14 ?        00:00:41 bin/codis-server *:6479     </div><div class="line"></div><div class="line">pkill codis</div><div class="line">2015/09/15 10:35:29 dashboard.go:154: [INFO] removing dashboard node</div><div class="line">2015/09/15 10:35:29 main.go:104: [PANIC] ctrl-c or SIGTERM found, <span class="built_in">exit</span></div><div class="line">[stack]: </div><div class="line">    0   /usr/<span class="built_in">local</span>/codis/src/github.com/wandoulabs/codis/cmd/cconfig/main.go:104</div><div class="line">            main.func·010</div><div class="line">        ... ...</div><div class="line">[1]+  Exit 1                  bin/codis-config -c config.ini dashboard</div><div class="line"></div><div class="line">ps -ef |grep codis</div><div class="line">root      1694 32515  0 10:35 pts/3    00:00:00 grep codis</div><div class="line"></div><div class="line"></div><div class="line">bin/codis-config action remove-lock</div><div class="line">2015/09/15 10:50:29 action.go:331: [INFO] deleting../zk/codis/db_test/LOCK/lock-0000000038</div><div class="line">&#123;</div><div class="line">  <span class="string">"msg"</span>: <span class="string">"OK"</span>,</div><div class="line">  <span class="string">"ret"</span>: 0</div><div class="line">&#125;</div><div class="line">bin/codis-config server list</div><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="string">"id"</span>: 1,</div><div class="line">    <span class="string">"product_name"</span>: <span class="string">"test"</span>,</div><div class="line">    <span class="string">"servers"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"addr"</span>: <span class="string">"localhost:6380"</span>,</div><div class="line">        <span class="string">"group_id"</span>: 1,</div><div class="line">        <span class="string">"type"</span>: <span class="string">"slave"</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="string">"addr"</span>: <span class="string">"localhost:6379"</span>,</div><div class="line">        <span class="string">"group_id"</span>: 1,</div><div class="line">        <span class="string">"type"</span>: <span class="string">"master"</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"id"</span>: 2,</div><div class="line">    <span class="string">"product_name"</span>: <span class="string">"test"</span>,</div><div class="line">    <span class="string">"servers"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"addr"</span>: <span class="string">"10.19.21.241:6380"</span>,</div><div class="line">        <span class="string">"group_id"</span>: 2,</div><div class="line">        <span class="string">"type"</span>: <span class="string">"offline"</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="string">"addr"</span>: <span class="string">"localhost:6480"</span>,</div><div class="line">        <span class="string">"group_id"</span>: 2,</div><div class="line">        <span class="string">"type"</span>: <span class="string">"master"</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">]</div><div class="line"></div><div class="line">bin/codis-config server remove 2 10.19.21.241:6380</div><div class="line">2015/09/15 10:52:24 server_group.go:182: [INFO] &#123;offline 2 10.19.21.241:6380&#125;</div><div class="line">&#123;</div><div class="line">  <span class="string">"msg"</span>: <span class="string">"OK"</span>,</div><div class="line">  <span class="string">"ret"</span>: 0</div><div class="line">&#125;</div><div class="line">bin/codis-config server list</div><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="string">"id"</span>: 1,</div><div class="line">    <span class="string">"product_name"</span>: <span class="string">"test"</span>,</div><div class="line">    <span class="string">"servers"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"addr"</span>: <span class="string">"localhost:6380"</span>,</div><div class="line">        <span class="string">"group_id"</span>: 1,</div><div class="line">        <span class="string">"type"</span>: <span class="string">"slave"</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="string">"addr"</span>: <span class="string">"localhost:6379"</span>,</div><div class="line">        <span class="string">"group_id"</span>: 1,</div><div class="line">        <span class="string">"type"</span>: <span class="string">"master"</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"id"</span>: 2,</div><div class="line">    <span class="string">"product_name"</span>: <span class="string">"test"</span>,</div><div class="line">    <span class="string">"servers"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"addr"</span>: <span class="string">"localhost:6480"</span>,</div><div class="line">        <span class="string">"group_id"</span>: 2,</div><div class="line">        <span class="string">"type"</span>: <span class="string">"master"</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>错误3:Ulimit的大小问题</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">启动proxy的时候</div><div class="line">bin/codis-proxy -c config.ini -L ./<span class="built_in">log</span>/proxy.log –cpu=8 –addr=0.0.0.0:19000 –http-addr=0.0.0.0:11000 </div><div class="line">打印的<span class="built_in">log</span>显示了下面的问题： </div><div class="line">[code]2015/09/28 23:39:13 main.go:102: [PANIC] <span class="built_in">ulimit</span> too small: 256, should be at  least 1024</div><div class="line">[stack]: </div><div class="line">1   /usr/<span class="built_in">local</span>/codis/src/github.com/wandoulabs/codis/cmd/proxy/main.go:102</div><div class="line">                    main.checkU<span class="built_in">limit</span></div><div class="line">0   /usr/<span class="built_in">local</span>/codis/src/github.com/wandoulabs/codis/cmd/proxy/main.go:166</div><div class="line">                    main.main</div><div class="line">                ... ...</div><div class="line"></div><div class="line"></div><div class="line">这时候需要我们调大一下<span class="built_in">ulimit</span>：</div><div class="line">$ <span class="built_in">ulimit</span> -n 1024</div></pre></td></tr></table></figure>
<h5 id="使用过程中遇到的问题"><a href="#使用过程中遇到的问题" class="headerlink" title="使用过程中遇到的问题"></a>使用过程中遇到的问题</h5><ul>
<li><p>codis-proxy的日志切割，codis-proxy的默认日志级别是info，日志量很大，我们这边每天产生50多G日志，目前codis-proxy还不支持热重启，想修改启动参数还是比较麻烦的，日志切割推荐用logrotate</p>
</li>
<li><p>codis-proxy的监听地址默认没有具体ipv4，也就是codis-proxy启动之后没有0.0.0.0:19000这样的监听，这样会导致的问题就是前端lvs没有办法负载均衡codis-proxy，不能转发请求过，这个问题已联系作者处理了，在codis-proxy启动的配置文件中加上proto=tcp4这个参数就支持监听ipv4了</p>
</li>
<li><p>添加Redis Server Group的时候，非codis-server(原生的redis)竟然也能加入到codis集群里面，在redis和codis-server共存在一个物理机上的清楚，很容易加错，希望能有个验证，非codis-server不能加入到codis集群</p>
</li>
<li><p>codis集群内部通讯是通过主机名的，如果主机名没有做域名解析那dashboard是通过主机名访问不到proxy的http-addr地址的，这会导致从web界面上看不到OP/s的数据，至于还有没有其他问题，目前我这边还没有发现，建议内部通讯直接用内网IP </p>
</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://navyaijm.blog.51cto.com/4647068/1637688" target="_blank" rel="external">http://navyaijm.blog.51cto.com/4647068/1637688</a><br><a href="http://www.cnblogs.com/xuanzhi201111/p/4425194.html" target="_blank" rel="external">http://www.cnblogs.com/xuanzhi201111/p/4425194.html</a><br><a href="http://467754239.blog.51cto.com/4878013/1728423" target="_blank" rel="external">http://467754239.blog.51cto.com/4878013/1728423</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用PM2管理Node应用]]></title>
      <url>http://www.hi-linux.com/posts/20296.html</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Node.js应用能够简单地通过命令行启动，只要有Node 运行环境。对于生产环境，情况要复杂得多。不仅需要数据库等功能性组件，更对安全性、可靠性、可扩展性等方面有更高的要求。</p>
<p>PM2是一个针对Node应用且自带负载均衡的进程管理器，拥有forever和Upstart都不具备的特性。能够管理Node 应用，使其随系统启动，出错挂掉能自动重启。还能对应用的运行状态进行监控，为应用生成SystemV, SystemD 服务启动脚本。PM2支持CoffeeScript，可以运行在Linux和OSX环境。</p>
<p>PM2是非常优秀工具，它提供对基于node.js的项目运行托管服务。它基于命令行界面，提供很多特性：<br><a id="more"></a></p>
<blockquote>
<p>内置的负载均衡器（使用nodecluster module）<br>以守护进程运行<br>0s(不间断)重启<br>为ubuntu/CentOS 提供启动脚本<br>关闭不稳定的进程（避免无限死循环）<br>基于控制台监控<br>HTTP API<br>远程控制以及实时监控接口<br>pm2使用nodecluster构建一个内置的负载均衡器。部署多个app的实例来达到分流的目的以减轻单app处理的压力。</p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install pm2 -g</div><div class="line">npm install pm2@latest -g</div><div class="line">npm install git://github.com/Unitech/pm2<span class="comment">#master -g</span></div></pre></td></tr></table></figure>
<h3 id="升级安装"><a href="#升级安装" class="headerlink" title="升级安装"></a>升级安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install pm2@latest -g</div><div class="line">pm2 update  <span class="comment">#Update in memory pm2</span></div></pre></td></tr></table></figure>
<h3 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">pm2 start &lt;app_name|id|all&gt;  <span class="comment">#可以指定应用名称pm2 start app,js --name=test</span></div><div class="line">pm2 start app.js -i 4 --name <span class="string">"episode"</span>   <span class="comment">#-i 4 表示启动四个app.js, 也可以-i max 将会最大限度利用cpu核心数目 --name 用于命名进程</span></div><div class="line">pm2 start app.js</div><div class="line">pm2 start app.js -i 1  <span class="comment">#cluster_mode</span></div><div class="line">pm2 start app.js -i 0  <span class="comment">#支持使用多核 CPU</span></div><div class="line">pm2 start big-app.js --max-memory-restart 20M</div><div class="line">cluster_mode 需要Node 0.11.x 以上，否则请用fork mode。</div></pre></td></tr></table></figure>
<h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pm2 start app.js -- -p 8080 </div><div class="line">pm2 start app.js --node-args=<span class="string">"--debug=7001 --trace-deprecation"</span></div></pre></td></tr></table></figure>
<h3 id="命名应用"><a href="#命名应用" class="headerlink" title="命名应用"></a>命名应用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NODE_ENV=production pm2 start index.js -n Ghost</div></pre></td></tr></table></figure>
<h3 id="生成服务脚本"><a href="#生成服务脚本" class="headerlink" title="生成服务脚本"></a>生成服务脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 startup &lt;ubuntu|centos|gentoo|systemd&gt;  <span class="comment">#产生init脚本，保持进程活着</span></div></pre></td></tr></table></figure>
<h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pm2 list          <span class="comment"># 显示所有进程状态</span></div><div class="line">pm2 jlist         <span class="comment"># Print process list in raw JSON</span></div><div class="line">pm2 prettylist    <span class="comment"># Print process list in beautified JSON</span></div><div class="line">pm2 info 0        <span class="comment"># Display all informations about a specific process</span></div></pre></td></tr></table></figure>
<h3 id="运行控制"><a href="#运行控制" class="headerlink" title="运行控制"></a>运行控制</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">pm2 stop 0             <span class="comment"># 停止指定进程</span></div><div class="line">pm2 stop all           <span class="comment"># 停止所有进程</span></div><div class="line">pm2 restart 0          <span class="comment"># Restart specific process id</span></div><div class="line">pm2 restart all        <span class="comment"># 重启所有进程</span></div><div class="line">pm2 delete 0           <span class="comment"># Will remove process from pm2 list</span></div><div class="line">pm2 delete all         <span class="comment"># Will remove all processes from pm2 list</span></div><div class="line">pm2 reload 0           <span class="comment"># 类似restart，0秒重载，支持 cluster_mode</span></div><div class="line">pm2 reload all         <span class="comment"># Will 0s downtime reload (for NETWORKED apps)</span></div><div class="line">pm2 gracefulReload all <span class="comment"># Send exit message then reload (for networked apps)</span></div><div class="line">pm2 dump               <span class="comment"># ~/.pm2/dump.pm2</span></div><div class="line">pm2 <span class="built_in">kill</span>               <span class="comment"># 杀掉PM2</span></div><div class="line">pm2 resurrect          <span class="comment"># 复活所有进程</span></div></pre></td></tr></table></figure>
<h3 id="代码监控"><a href="#代码监控" class="headerlink" title="代码监控"></a>代码监控</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pm2 start app.js --watch  <span class="comment"># 代码修改自动重启</span></div><div class="line">pm2 stop 0                <span class="comment"># not stop watching</span></div><div class="line">pm2 stop --watch 0        <span class="comment"># stop watching</span></div></pre></td></tr></table></figure>
<h3 id="运行监测"><a href="#运行监测" class="headerlink" title="运行监测"></a>运行监测</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 monit              <span class="comment"># Monitor all processes</span></div></pre></td></tr></table></figure>
<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pm2 logs               <span class="comment"># 显示所有进程日志</span></div><div class="line">pm2 ilogs              <span class="comment"># Advanced termcaps interface to display logs</span></div><div class="line">pm2 flush              <span class="comment"># Empty all log file</span></div><div class="line">pm2 reloadLogs         <span class="comment"># Reload all logs</span></div></pre></td></tr></table></figure>
<h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">pm2 ping  <span class="comment"># Ensure pm2 daemon has been launched</span></div><div class="line">pm2 reset &lt;process&gt;  <span class="comment"># Reset meta data (restarted time...)</span></div><div class="line">pm2 sendSignal SIGUSR2 my-app  <span class="comment"># Send system signal to script</span></div><div class="line">pm2 start app.js --no-daemon  <span class="comment"># run pm2 daemon in the foreground</span></div><div class="line">pm2 describe id|all <span class="comment">#查看启动程序的详细信息</span></div><div class="line">pm2 web  <span class="comment">#API(端口:9615)</span></div></pre></td></tr></table></figure>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>管理Ghost</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /path/to/ghost/folder</div><div class="line"><span class="built_in">echo</span> <span class="string">"export NODE_ENV=production"</span> &gt;&gt; ~/.profile</div><div class="line"><span class="built_in">source</span> ~/.profile</div><div class="line">pm2 <span class="built_in">kill</span></div><div class="line">pm2 start index.js --name <span class="string">"Ghost"</span></div><div class="line"></div><div class="line"><span class="comment">#Ghost已经运行在PM2管理下</span></div><div class="line">pm2 ls</div><div class="line">pm2 stop &lt;process ID&gt;</div><div class="line">pm2 monit</div><div class="line">pm2 logs</div><div class="line"></div><div class="line"><span class="comment">#生成服务启动脚本：/etc/init.d/pm2-init.sh。只会将pm2 list中的应用加入服务启动脚本，确保需要启动的应用就在其中。不要使用root账户(下面用的是ghost账户)。</span></div><div class="line">pm2 startup ubuntu</div><div class="line"></div><div class="line"><span class="comment">#生成命令如下：包含node路径，用户账户。执行即可</span></div><div class="line">sudo env PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/bin pm2 startup ubuntu -u ghost</div><div class="line">pm2 save或reboot</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="https://github.com/Unitech/pm2" target="_blank" rel="external">https://github.com/Unitech/pm2</a><br><a href="http://www.allaboutghost.com/keep-ghost-running-with-pm2/" target="_blank" rel="external">http://www.allaboutghost.com/keep-ghost-running-with-pm2/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Localtunnel内网穿透工具的安装与使用]]></title>
      <url>http://www.hi-linux.com/posts/24471.html</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Localtunnel可以方便快捷的实现你的本地web服务通过外网访问，无需修改DNS和防火墙设置，其实原理与ngrok类似。但Localtunnel是基于nodejs的，而ngrok是基于go语言。</p>
<h3 id="使用官方提供的Localtunnel服务端"><a href="#使用官方提供的Localtunnel服务端" class="headerlink" title="使用官方提供的Localtunnel服务端"></a>使用官方提供的Localtunnel服务端</h3><h4 id="安装localtunnel客户端"><a href="#安装localtunnel客户端" class="headerlink" title="安装localtunnel客户端"></a>安装localtunnel客户端</h4><p>localtunnel是基于node.js的一个模块，所以首先需要安装node.js和npm。(此部分略)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$npm</span> install -g localtunnel</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>假设本地服务器在81端口，我们可以通过下面的命令把本地服务器暴露到公网中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$lt</span> --port 81</div><div class="line">your url is: https://ouumalrvoi.localtunnel.me</div></pre></td></tr></table></figure>
<p>通过上面的命令，我们不需要做其他设置就可以通过<code>https://ouumalrvoi.localtunnel.me</code>来访问我们本地服务器了。</p>
<p>如果想通过固定的域名访问，则可以通过以下命令进行设置，成功后可通过<code>https://mike.localtunnel.me</code>而访问到本地服务器。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$lt</span> --subdomain mike --port 81</div><div class="line"><span class="variable">$lt</span> <span class="_">-s</span> mike -p 81</div></pre></td></tr></table></figure>
<h3 id="自建Localtunnel服务端"><a href="#自建Localtunnel服务端" class="headerlink" title="自建Localtunnel服务端"></a>自建Localtunnel服务端</h3><p>由于localtunnel.me是国外的服务器，访问速度有时候不太理想，这时候我们可以自己搭建localtunnel的服务端。</p>
<h4 id="安装服务端"><a href="#安装服务端" class="headerlink" title="安装服务端"></a>安装服务端</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> <span class="built_in">clone</span> https://github.com/localtunnel/server.git localtunnel-server</div><div class="line"><span class="variable">$cd</span> localtunnel-server</div><div class="line"><span class="variable">$npm</span> install</div></pre></td></tr></table></figure>
<h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p>以监听2000端口为例：</p>
<p>直接使用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$bin</span>/server --port 2000</div><div class="line">localtunnel server listening on port: 2000 +0ms</div></pre></td></tr></table></figure>
<p>配合pm2使用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">安装pm2</div><div class="line"><span class="variable">$npm</span> install -g pm2</div><div class="line"><span class="comment">#运行</span></div><div class="line"><span class="variable">$pm2</span> --name lt start bin/server -- --port 2000</div></pre></td></tr></table></figure>
<p>启动服务端程序后，我们只要在使用客户端lt时加上–host参数，就可以指定服务端了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#host后面不要加/</span></div><div class="line"><span class="variable">$lt</span> --host http://imike.me:2000 --port 81</div><div class="line">your url is: http://imike.me:2000</div></pre></td></tr></table></figure>
<p>这样，我们就可以通过自己的代理服务器来访问本地服务器了，不用经过第三方代理服务器，不必担心代理服务器的安全问题。</p>
<h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>在Github 上面有一份Nginx的<a href="https://github.com/localtunnel/server/blob/master/devops/nginx/sites/localtunnel" target="_blank" rel="external">配置</a>，我们可以直接使用，或者按照自己的需要做些修改。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">proxy_http_version 1.1;</div><div class="line"></div><div class="line"><span class="comment"># http://nginx.org/en/docs/http/websocket.html</span></div><div class="line">map <span class="variable">$http_upgrade</span> <span class="variable">$connection_upgrade</span> &#123;</div><div class="line">    default upgrade;</div><div class="line">    <span class="string">''</span>      close;</div><div class="line">&#125;</div><div class="line"></div><div class="line">upstream lt-server &#123;</div><div class="line">    server 127.0.0.1:2000;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">    listen 80 default_server;</div><div class="line">    listen [::]:80 default_server ipv6only=on;</div><div class="line"></div><div class="line">    server_name .localtunnel.me;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://lt-server/;</div><div class="line"></div><div class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">        proxy_set_header Host <span class="variable">$http_host</span>;</div><div class="line">        proxy_set_header X-Forwarded-Proto http;</div><div class="line">        proxy_set_header X-NginX-Proxy <span class="literal">true</span>;</div><div class="line">        proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</div><div class="line">        proxy_set_header Connection <span class="variable">$connection_upgrade</span>;</div><div class="line"></div><div class="line">        proxy_redirect off;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">    listen 443 default_server ssl spdy;</div><div class="line">    listen [::]:443 default_server ipv6only=on;</div><div class="line"></div><div class="line">    server_name .localtunnel.me;</div><div class="line"></div><div class="line">    ssl on;</div><div class="line"></div><div class="line">    ssl_certificate      /etc/nginx/ssl/STAR.localtunnel.me.crt;</div><div class="line">    ssl_certificate_key  /etc/nginx/ssl/STAR.localtunnel.me.key;</div><div class="line"></div><div class="line">    ssl_protocols              SSLv3 TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">    ssl_ciphers                RC4:HIGH:!aNULL:!MD5;</div><div class="line">    ssl_prefer_server_ciphers  on;</div><div class="line"></div><div class="line">    ssl_session_cache    shared:SSL:10m;</div><div class="line">    ssl_session_timeout  10m;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://lt-server/;</div><div class="line"></div><div class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">        proxy_set_header Host <span class="variable">$http_host</span>;</div><div class="line">        proxy_set_header X-Forwarded-Proto https;</div><div class="line">        proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</div><div class="line">        proxy_set_header X-NginX-Proxy <span class="literal">true</span>;</div><div class="line">        proxy_set_header Connection <span class="variable">$connection_upgrade</span>;</div><div class="line"></div><div class="line">        proxy_redirect off;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="指定子域名"><a href="#指定子域名" class="headerlink" title="指定子域名"></a>指定子域名</h4><p>有时候，用随机字符串作为子域名并不是一件好事，我们可能需要固定的域名来访问本地服务器。这时，lt –subdomain就可以派上用场了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#subdomain限制长度为4 ~ 63</span></div><div class="line"><span class="variable">$lt</span> --host http://tunnel.imike.me:2000 --port 81 --subdomain mysubdomain</div><div class="line">your url is: http://mysubdomain.tunnel.imike.me:2000</div></pre></td></tr></table></figure>
<p>看到了吗？通过–subdomain，我们就可以指定自己喜欢的子域名了。</p>
<p>然而，如果我们通过–host来指定子域名，会发生什么？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$lt</span> --host http://tunnel.imike.me:2000 --port 81</div><div class="line">Error: localtunnel server returned an error, please try again</div></pre></td></tr></table></figure></p>
<p>就算配置了 Nginx 的反向代理，你依然会得到这个错误。可以查看<a href="https://github.com/localtunnel/server/issues/21" target="_blank" rel="external">#21</a>和<a href="https://github.com/localtunnel/server/issues/31" target="_blank" rel="external">#31</a>来看更多的细节。</p>
<p>要解决这个问题，最简单的就是不用–host来指定子域名，而用–subdomain来指定。</p>
<p>参考资料<br><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="https://github.com/localtunnel/localtunnel" target="_blank" rel="external">https://github.com/localtunnel/localtunnel</a><br><a href="https://github.com/localtunnel/server" target="_blank" rel="external">https://github.com/localtunnel/server</a><br><a href="https://scarletsky.github.io/2016/01/17/localtunnel-usage/" target="_blank" rel="external">https://scarletsky.github.io/2016/01/17/localtunnel-usage/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS下部署Ngrok服务器]]></title>
      <url>http://www.hi-linux.com/posts/29097.html</url>
      <content type="html"><![CDATA[<h3 id="什么是Ngrok"><a href="#什么是Ngrok" class="headerlink" title="什么是Ngrok"></a>什么是Ngrok</h3><p>Ngrok是一款用go语言开发的开源软件，它是一个反向代理。通过在公共的端点和本地运行的Web服务器之间建立一个安全的通道。Ngrok可捕获和分析所有通道上的流量，便于后期分析和重放。</p>
<p>下图简述了Ngrok的原理</p>
<p><img src="http://www.hi-linux.com/img/linux/ngrok-768x478.png" alt="ngrok"><br><a id="more"></a></p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><blockquote>
<p>用于对处在内网环境中，无外网IP的计算机的远程连接。</p>
<p>Ngrok可以做TCP端口转发，对于Linux可以将其映射到22端口进行SSH连接。Windows的远程桌面可以将其映射到3389端口来实现。同理，如果要做MySQL的远程连接，只需映射3306端口即可。</p>
<p>用作临时搭建网站并分配二级域名，可用作微信二次开发的本地调试。</p>
<p>微信公众平台二次开发时，服务器必须要能通过外网访问，而且必须是80接口。我们一般会在自己的电脑上写代码，但是由于电信运营商将80端口屏蔽了，甚至很多人通过无线路由器上网，根本就没有公网ip。在这种情况下，我们每次都要上传代码到服务器对微信公众平台进行接口调试，十分的不方便。而Ngrok可以将内网映射到一个公网地址，这样就完美的解决了我们的问题。</p>
<p>Ngrok官方为我们免费提供了一个服务器，我们只需要下载Ngrok客户端即可正常使用，但是后来官方的服务越来越慢，直到Ngrok官网被完全屏蔽。现在我们已经无法使用ngrok官方的服务器了。所以，接下来我们自行搭建属于自己的ngrok服务器，为自己提供方便快捷又稳定的服务，一劳永逸。</p>
</blockquote>
<p><strong>注意:ngrok.com 提供的服务是基于 ngrok 2.0，github 上目前只有 1.0 的源码，二者功能和命令有一些区别，用的时候别搞混了</strong></p>
<h3 id="编译ngrok"><a href="#编译ngrok" class="headerlink" title="编译ngrok"></a>编译ngrok</h3><h4 id="安装go-get工具"><a href="#安装go-get工具" class="headerlink" title="安装go get工具"></a>安装go get工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#ubuntu</span></div><div class="line">apt-get install build-essential golang mercurial git</div><div class="line"></div><div class="line"><span class="comment">#centos</span></div><div class="line">yum install mercurial git bzr subversion  golang</div><div class="line"></div><div class="line"><span class="comment">#git版本需要在1.7.9.5以上，如果不符合条件需要将git版本升级。</span></div><div class="line">yum --disablerepo=base,updates --enablerepo=rpmforge-extras update git</div></pre></td></tr></table></figure>
<h4 id="获取ngrok源码"><a href="#获取ngrok源码" class="headerlink" title="获取ngrok源码"></a>获取ngrok源码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">GOPATH=~/goproj</div><div class="line">mkdir ~/goproj/src/github.com/inconshreveable</div><div class="line"><span class="built_in">cd</span> ~/goproj/src/github.com/inconshreveable</div><div class="line"><span class="comment">#官方地址编译时要报错</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/inconshreveable/ngrok.git</div><div class="line"><span class="comment">#请使用下面的地址，修复了无法访问的包地址</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/tutumcloud/ngrok.git ngrok</div><div class="line"><span class="built_in">export</span> GOPATH=~/goproj/src/github.com/inconshreveable/ngrok</div><div class="line"></div><div class="line">修改源代码中库引用的错误</div><div class="line">由于google code的关闭，所以我们要把作者代码中的库引用地址修改一下</div><div class="line">修改src/ngrok/<span class="built_in">log</span>/logger.go文件</div><div class="line"><span class="built_in">log</span> <span class="string">"code.google.com/p/log4go"</span> 改为<span class="built_in">log</span> <span class="string">"github.com/alecthomas/log4go"</span></div><div class="line">注：最新github.com上的代码这个问题已修复</div></pre></td></tr></table></figure>
<h4 id="生成自签名证书"><a href="#生成自签名证书" class="headerlink" title="生成自签名证书"></a>生成自签名证书</h4><p>使用ngrok.com官方服务时，我们使用的是官方的SSL证书。自建ngrokd服务，我们需要生成自己的证书，并提供携带该证书的ngrok客户端。生成并替换源码里默认的证书，注意域名修改为你自己的。(之后编译出来的服务端客户端会基于这个证书来加密通讯，保证了安全性)</p>
<p>证书生成过程需要一个NGROK_DOMAIN。以ngrok官方随机生成的地址693c358d.ngrok.com为例，其NGROK_DOMAIN就是”ngrok.com”，如果你要提供服务的地址为”example.tunnel.imike.me”，那NGROK_BASE_DOMAIN就应该是”tunnel.imike.me”。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ngrok</div><div class="line">NGROK_DOMAIN=<span class="string">"tunnel.imike.me"</span></div><div class="line">openssl genrsa -out base.key 2048</div><div class="line">openssl req -new -x509 -nodes -key base.key -days 10000 -subj <span class="string">"/CN=<span class="variable">$NGROK_DOMAIN</span>"</span> -out base.pem</div><div class="line">openssl genrsa -out server.key 2048</div><div class="line">openssl req -new -key server.key -subj <span class="string">"/CN=<span class="variable">$NGROK_DOMAIN</span>"</span> -out server.csr</div><div class="line">openssl x509 -req -in server.csr -CA base.pem -CAkey base.key -CAcreateserial -days 10000 -out server.crt</div></pre></td></tr></table></figure></p>
<p>执行完以上命令，在ngrok目录下就会新生成6个文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ls <span class="_">-lt</span>                           </div><div class="line">总用量 56</div><div class="line">-rw-r--r-- 1 root root  973 3月  23 11:23 server.crt</div><div class="line">-rw-r--r-- 1 root root   17 3月  23 11:23 base.srl</div><div class="line">-rw-r--r-- 1 root root  891 3月  23 11:23 server.csr</div><div class="line">-rw-r--r-- 1 root root 1675 3月  23 11:23 server.key</div><div class="line">-rw-r--r-- 1 root root 1115 3月  23 11:23 base.pem</div><div class="line">-rw-r--r-- 1 root root 1679 3月  23 11:23 base.key</div></pre></td></tr></table></figure></p>
<p>Ngrok通过bindata将ngrok源码目录下的assets目录(资源文件)打包到可执行文件(ngrokd和ngrok)中去，assets/client/tls和assets/server/tls下分别存放着用于ngrok和ngrokd的默认证书文件，我们需要将它们替换成我们自己生成的(因此这一步务必放在编译可执行文件之前)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cp base.pem assets/client/tls/ngrokroot.crt</div><div class="line">cp server.crt assets/server/tls/snakeoil.crt</div><div class="line">cp server.key assets/server/tls/snakeoil.key</div></pre></td></tr></table></figure></p>
<h4 id="编译Linux服务端和客户端"><a href="#编译Linux服务端和客户端" class="headerlink" title="编译Linux服务端和客户端"></a>编译Linux服务端和客户端</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make release-server release-client</div></pre></td></tr></table></figure>
<p>编译之后，就会在ngrok源码的bin目录下生成两个可执行文件：ngrokd、ngrok。其中ngrokd就是ngrok的服务端程序，ngrok就是ngrok的客户端程序。</p>
<h4 id="编译Linux客户端"><a href="#编译Linux客户端" class="headerlink" title="编译Linux客户端"></a>编译Linux客户端</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make release-client</div></pre></td></tr></table></figure>
<h4 id="编译window版本客户端"><a href="#编译window版本客户端" class="headerlink" title="编译window版本客户端"></a>编译window版本客户端</h4><p>上述编译过程生成的服务端和客户端都是linux下的，不能在windows下用。如果想编译生成windows客户端，需要重新配置环境并编译。交叉编译过程如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">进入go目录，进行环境配置</div><div class="line"><span class="built_in">cd</span>  /usr/<span class="built_in">local</span>/go/src/</div><div class="line">GOOS=windows GOARCH=amd64 CGO_ENABLED=0 ./make.bash  </div><div class="line">进入ngrok目录重新编译</div><div class="line">GOOS=windows GOARCH=amd64 make release-client</div><div class="line">编译后，就会在bin目录下生成windows_amd64目录，其中就包含着windows下运行的服务器和客户端程序。</div><div class="line"><span class="comment">#以上GOARCH=amd64指的是编译为64位版本，如需32位改成GOARCH=386即可</span></div></pre></td></tr></table></figure></p>
<h4 id="编译arm客户端"><a href="#编译arm客户端" class="headerlink" title="编译arm客户端"></a>编译arm客户端</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/lib/golang/src/</div><div class="line">sudo GOOS=linux GOARCH=arm CGO_ENABLED=0 ./make.bash</div><div class="line">sudo GOOS=linux GOARCH=arm make release-client</div></pre></td></tr></table></figure>
<h4 id="编译mac版本客户端"><a href="#编译mac版本客户端" class="headerlink" title="编译mac版本客户端"></a>编译mac版本客户端</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GOOS=darwin GOARCH=amd64 make  release-client</div></pre></td></tr></table></figure>
<h3 id="设置域名解析"><a href="#设置域名解析" class="headerlink" title="设置域名解析"></a>设置域名解析</h3><p>添加两条A记录：tunnel.imike.me和*.tunnel.imike.me，指向所在的Ngrok服务器ip。</p>
<h3 id="运行Ngrok"><a href="#运行Ngrok" class="headerlink" title="运行Ngrok"></a>运行Ngrok</h3><h4 id="服务端启动"><a href="#服务端启动" class="headerlink" title="服务端启动"></a>服务端启动</h4><p>指定证书、域名和端口启动它(证书就是前面生成的，注意修改域名)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">./bin/ngrokd -tlsKey=server.key -tlsCrt=server.crt -domain=<span class="string">"tunnel.imike.me"</span> -httpAddr=<span class="string">":8081"</span> -httpsAddr=<span class="string">":8082"</span></div><div class="line">[14:54:30 CST 2016/03/23] [INFO] (ngrok/log.(*PrefixLogger).Info:83) [registry] [tun] No affinity cache specified</div><div class="line">[14:54:30 CST 2016/03/23] [INFO] (ngrok/log.(*PrefixLogger).Info:83) [metrics] Reporting every 30 seconds</div><div class="line">[14:54:30 CST 2016/03/23] [INFO] (ngrok/log.Info:112) Listening <span class="keyword">for</span> public http connections on [::]:8081</div><div class="line">[14:54:30 CST 2016/03/23] [INFO] (ngrok/log.Info:112) Listening <span class="keyword">for</span> public https connections on [::]:8082</div><div class="line">[14:54:30 CST 2016/03/23] [INFO] (ngrok/log.Info:112) Listening <span class="keyword">for</span> control and proxy connections on [::]:4443</div></pre></td></tr></table></figure></p>
<p>到这一步，ngrok 服务已经跑起来了，可以通过屏幕上显示的日志查看更多信息。httpAddr、httpsAddr 分别是ngrok用来转发http、https服务的端口，可以随意指定。ngrokd还会开一个4443端口用来跟客户端通讯(可通过-tunnelAddr=”:xxx” 指定)，如果你配置了iptables 规则，需要放行这三个端口上的TCP协议。</p>
<p>现在通过<code>http://tunnel.imike.me:8081</code>和<code>https://tunnel.imike.me:8082</code>就可以访问到ngrok提供的转发服务。</p>
<h4 id="设置开机自动启动ngrok服务"><a href="#设置开机自动启动ngrok服务" class="headerlink" title="设置开机自动启动ngrok服务"></a>设置开机自动启动ngrok服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vim /etc/init.d/ngrok_start:</div><div class="line"><span class="built_in">cd</span> /root/goproj/src/github.com/inconshreveable</div><div class="line">./bin/ngrokd -tlsKey=server.key -tlsCrt=server.crt -domain=<span class="string">"tunnel.imike.me"</span> -httpAddr=<span class="string">":8081"</span> -httpsAddr=<span class="string">":8082"</span></div><div class="line">chmod 755 /etc/init.d/ngrok_start</div></pre></td></tr></table></figure>
<h4 id="客户端启动"><a href="#客户端启动" class="headerlink" title="客户端启动"></a>客户端启动</h4><h5 id="使用默认配置文件启动"><a href="#使用默认配置文件启动" class="headerlink" title="使用默认配置文件启动"></a>使用默认配置文件启动</h5><p>对默认设置文件 ~/.ngrok 进行编辑：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">server_addr: tunnel.imike.me:4443</div><div class="line">trust_host_root_certs: <span class="literal">false</span></div><div class="line">tunnels:</div><div class="line">    <span class="comment">#http:subdomain: "test"</span></div><div class="line">    web:</div><div class="line">        <span class="comment">#auth: "AuthUser:AuthPassWord"</span></div><div class="line">        proto:</div><div class="line">            http: 80</div><div class="line">    ssh:</div><div class="line">        remote_port: 12222</div><div class="line">        proto:</div><div class="line">            tcp: 22</div></pre></td></tr></table></figure></p>
<p>从命令行运行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/ngrok start web ssh</div></pre></td></tr></table></figure></p>
<p>当客户端使用http/https协议连接，可指定一个二级域名，服务端会分配该二级域名给客户端作为入口，比如web.tunnel.imike.me; </p>
<p>当客户端使用tcp 协议连接，则服务端不会分配二级域名，改为监控一个随机端口，比如 tunnel.imike.me:12345，remote_port可由客户端对该端口进行指定，比如tunnel.imike.me:12222。</p>
<h5 id="使用自定义配置文件"><a href="#使用自定义配置文件" class="headerlink" title="使用自定义配置文件"></a>使用自定义配置文件</h5><p>创建一个配置文件ngrok.cfg，内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vim ngrok.cfg:</div><div class="line">server_addr: tunnel.imike.me:4443</div><div class="line">trust_host_root_certs: <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<h6 id="映射HTTP"><a href="#映射HTTP" class="headerlink" title="映射HTTP"></a>映射HTTP</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#启动ngrok客户端</span></div><div class="line"><span class="comment">#指定子域、要转发的协议和端口，以及配置文件，运行客户端：</span></div><div class="line"><span class="comment">#注意：如果不加参数-subdomain=test，将会随机自动分配子域名。</span></div><div class="line">./bin/ngrok -subdomain web -proto=http -config=ngrok.cfg 80</div><div class="line"></div><div class="line"><span class="comment">#客户端ngrok正常执行显示的内容</span></div><div class="line">ngrok                                                  (Ctrl+C to quit)</div><div class="line"></div><div class="line">Tunnel Status     online</div><div class="line">Version           1.7/1.7</div><div class="line">Forwarding        http://web.tunnel.imike.me:8081 -&gt; 127.0.0.1:80</div><div class="line">Web Interface     127.0.0.1:4040</div><div class="line"><span class="comment"># Conn            0</span></div><div class="line">Avg Conn Time     0.00ms</div></pre></td></tr></table></figure>
<p>打开浏览器，分别在地址栏中输入<code>http://localhost</code>和<code>http://web.tunnel.imike.me:8081</code>，如果后者正常显示并且和<code>http://localhost</code>显示的内容相同，则证明我们已经成功了。</p>
<h6 id="映射TCP"><a href="#映射TCP" class="headerlink" title="映射TCP"></a>映射TCP</h6><p>有时候，我们使用远程桌面功能，或者在linux中进行SSH连接，对于处在内网环境中的计算机，我们可以对该端口进行TCP映射。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#这里以SSH连接Linux时的22端口为例</span></div><div class="line">./bin/ngrok -config=ngrok.cfg -proto=tcp 22</div><div class="line">映射成功的话，会显示如下内容：</div><div class="line"><span class="comment">#客户端ngrok正常执行显示的内容</span></div><div class="line"></div><div class="line">ngrok                                                  (Ctrl+C to quit)</div><div class="line"></div><div class="line">Tunnel Status     online</div><div class="line">Version           1.7/1.7</div><div class="line">Forwarding        tcp://imike.me:12222 -&gt; 127.0.0.1:22</div><div class="line">Web Interface     127.0.0.1:4040</div><div class="line"><span class="comment"># Conn            0</span></div><div class="line">Avg Conn Time     0.00ms</div></pre></td></tr></table></figure></p>
<p>现在，在putty等ssh工具中即可连接imike.me。切记端口是号12222，是随机分配的一个端口号，而不是默认的22端口了。Windows的远程桌面可以将其映射到3389端口来实现。同理，如果要做MySQL的远程连接，只需映射3306端口即可。FTP可映射21端口。</p>
<p><strong>注意:客户端必须使用自己编译的ngrok文件</strong></p>
<h3 id="管理界面"><a href="#管理界面" class="headerlink" title="管理界面"></a>管理界面</h3><p>Ngrok客户端运行后，有一个Web Interface地址，这是ngrok 提供的监控界面。通过这个界面可以看到远端转发过来的http 详情，包括完整的request/response 信息，可以不刷新页面通过replay按钮重新发出请求,非常方便。</p>
<p>访问管理界面:<code>http://127.0.0.1:4040</code></p>
<h3 id="后续定制及优化"><a href="#后续定制及优化" class="headerlink" title="后续定制及优化"></a>后续定制及优化</h3><p>通过以上操作，我们的ngrok服务器就已经成功搭建了，客户端也成功的跑了起来。但是，如果我们想要对ngrok进行一些定制和优化，可以参考这些后续定制及优化的方法。</p>
<h4 id="为什么在启动服务端的时候，端口不指定为80"><a href="#为什么在启动服务端的时候，端口不指定为80" class="headerlink" title="为什么在启动服务端的时候，端口不指定为80"></a>为什么在启动服务端的时候，端口不指定为80</h4><p>很遗憾，因为这台vps不是只用来做ngrok服务的，我博客还在上面呢，80端口已经被nginx占用了。<br>那怎么办？不得不提nginx是个牛逼的软件，我们可以在nginx中配置一个server,就绑定web.tunnel.imike.me域名，然后将所有请求转发到后端:8081端口上，这就是反向代理。我发一下自己的nginx配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#ngrok.imike.me.conf</span></div><div class="line">upstream ngrok &#123;</div><div class="line">    server 127.0.0.1:8000;</div><div class="line">    keepalive 64;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name *.tunnel.imike.me;</div><div class="line">    access_log /var/<span class="built_in">log</span>/nginx/ngrok_access.log;</div><div class="line">    location / &#123;</div><div class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">        proxy_set_header Host  <span class="variable">$http_host</span>:8081;</div><div class="line">        proxy_set_header X-Nginx-Proxy <span class="literal">true</span>;</div><div class="line">        proxy_set_header Connection <span class="string">""</span>;</div><div class="line">        proxy_pass      http://ngrok;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="修改客户端ngrok默认服务地址"><a href="#修改客户端ngrok默认服务地址" class="headerlink" title="修改客户端ngrok默认服务地址"></a>修改客户端ngrok默认服务地址</h4><p>客户端每次还需要加载配置文件，这样显得有些麻烦。能不能像官方服务那样直接执行命令 ngrok 80就能使用呢？我们只需要在编译客户端之前，稍作修改即可。同样，如果需要指定域名可以执行命令 ngrok -subdomain=test 80来运行客户端。</p>
<h4 id="修改默认服务地址"><a href="#修改默认服务地址" class="headerlink" title="修改默认服务地址"></a>修改默认服务地址</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vim ./src/ngrok/client/model.go</div><div class="line">找到第23行，将 defaultServerAddr = <span class="string">"ngrokd.ngrok.com:443"</span></div><div class="line">修改为defaultServerAddr = <span class="string">"tunnel.mydomain:4443"</span> 即可。</div></pre></td></tr></table></figure>
<h4 id="修改客户端ngrok左上角蓝色文字logo"><a href="#修改客户端ngrok左上角蓝色文字logo" class="headerlink" title="修改客户端ngrok左上角蓝色文字logo"></a>修改客户端ngrok左上角蓝色文字logo</h4><p>运行客户端后，我们会发现在客户端左上角会有一个蓝色字体的”ngrok”字样的文字logo，如果觉得不太喜欢，或者想修改一下的话，可以在编译客户端之前，作如下修改。</p>
<h4 id="修改客户端蓝色文字logo"><a href="#修改客户端蓝色文字logo" class="headerlink" title="修改客户端蓝色文字logo"></a>修改客户端蓝色文字logo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Vim ./src/ngrok/client/views/term/view.go</div><div class="line">找到第100行，将</div><div class="line">v.APrintf(termbox.ColorBlue|termbox.AttrBold, 0, 0, <span class="string">"ngrok"</span>)</div><div class="line">修改为</div><div class="line">v.APrintf(termbox.ColorBlue|termbox.AttrBold, 0, 0, <span class="string">"your logo"</span>)</div><div class="line">即可。</div></pre></td></tr></table></figure>
<h4 id="修改客户端帮助信息"><a href="#修改客户端帮助信息" class="headerlink" title="修改客户端帮助信息"></a>修改客户端帮助信息</h4><p>Ngrok客户端默认的帮助信息很少，我们可以在编译客户端之前，自己定制帮助内容。</p>
<h4 id="修改客户端默认帮助信息"><a href="#修改客户端默认帮助信息" class="headerlink" title="修改客户端默认帮助信息"></a>修改客户端默认帮助信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vim ./src/ngrok/client/client/cli.go</div><div class="line">找到第14行，修改 const usage2 string的值即可。</div></pre></td></tr></table></figure>
<h4 id="客户端程序加壳优化"><a href="#客户端程序加壳优化" class="headerlink" title="客户端程序加壳优化"></a>客户端程序加壳优化</h4><p>编译好的Windows客户端ngrok.exe大小为10MB，感觉有点大，这样加载到内存中，需要读取硬盘的内容也相对较多，影响速度。所以，我们来给客户端程序加个压缩壳，对程序进行压缩。<br>这里采用mpress进行加壳，先从网上下载mpress.exe，之后将ngrok.exe拖放到mpress.exe的图标上，就能完成加壳操作。我们可以看到，加壳后的程序只有1.94MB，压缩率不到20%，大大节省了磁盘空间。同时小文件加载起来，速度会更快。</p>
<h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><h4 id="在编译ngrok的时候-安装yaml的时候不能下载，无反应"><a href="#在编译ngrok的时候-安装yaml的时候不能下载，无反应" class="headerlink" title="在编译ngrok的时候,安装yaml的时候不能下载，无反应"></a>在编译ngrok的时候,安装yaml的时候不能下载，无反应</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gopkg.in/inconshreveable/go-update.v0  (download)</div><div class="line">或者</div><div class="line">gopkg.in/yaml.v1 (download)</div><div class="line">原因git版本太低，需&gt;= 1.7.9.5，通过RPMForge源安装最新版本git解决：</div><div class="line">yum --enablerepo=rpmforge-extras install git</div></pre></td></tr></table></figure>
<h4 id="把编译出来的32位客户端放在64位上运行时会报错"><a href="#把编译出来的32位客户端放在64位上运行时会报错" class="headerlink" title="把编译出来的32位客户端放在64位上运行时会报错"></a>把编译出来的32位客户端放在64位上运行时会报错</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/lib/ld-linux.so.2: bad ELF interpreter</div><div class="line"> </div><div class="line"><span class="comment">#解决方法</span></div><div class="line">yum install -y glibc.i686</div></pre></td></tr></table></figure>
<h4 id="在ngrok目录下执行如下命令，编译ngrokd"><a href="#在ngrok目录下执行如下命令，编译ngrokd" class="headerlink" title="在ngrok目录下执行如下命令，编译ngrokd"></a>在ngrok目录下执行如下命令，编译ngrokd</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ make release-server</div><div class="line"></div><div class="line">出现如下错误：</div><div class="line">GOOS=<span class="string">""</span> GOARCH=<span class="string">""</span> go get github.com/jteeuwen/go-bindata/go-bindata</div><div class="line">bin/go-bindata -nomemcopy -pkg=assets -tags=release \</div><div class="line">        -debug=<span class="literal">false</span> \</div><div class="line">        -o=src/ngrok/client/assets/assets_release.go \</div><div class="line">        assets/client/…</div><div class="line">make: bin/go-bindata: Command not found</div><div class="line">make: *** [client-assets] Error 127</div><div class="line">go-bindata被安装到了<span class="variable">$GOBIN</span>下了，go编译器找不到了。修正方法是将<span class="variable">$GOBIN</span>/go-bindata拷贝到当前ngrok/bin下。</div><div class="line"></div><div class="line"><span class="variable">$cp</span> /home/ubuntu/.bin/go14/bin/go-bindata ./bin</div></pre></td></tr></table></figure>
<h4 id="客户端ngrok-cfg中server-addr后的值必须严格与-domain以及证书中的NGROK-BASE-DOMAIN相同，否则Server端就会出现如下错误日志"><a href="#客户端ngrok-cfg中server-addr后的值必须严格与-domain以及证书中的NGROK-BASE-DOMAIN相同，否则Server端就会出现如下错误日志" class="headerlink" title="客户端ngrok.cfg中server_addr后的值必须严格与-domain以及证书中的NGROK_BASE_DOMAIN相同，否则Server端就会出现如下错误日志"></a>客户端ngrok.cfg中server_addr后的值必须严格与-domain以及证书中的NGROK_BASE_DOMAIN相同，否则Server端就会出现如下错误日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[03/13/15 09:55:46] [INFO] [tun:15dd7522] New connection from 54.149.100.42:38252</div><div class="line">[03/13/15 09:55:46] [DEBG] [tun:15dd7522] Waiting to <span class="built_in">read</span> message</div><div class="line">[03/13/15 09:55:46] [WARN] [tun:15dd7522] Failed to <span class="built_in">read</span> message: remote error: bad certificate</div><div class="line">[03/13/15 09:55:46] [DEBG] [tun:15dd7522] Closing</div></pre></td></tr></table></figure>
<h3 id="一此国内的Ngrok免费服务"><a href="#一此国内的Ngrok免费服务" class="headerlink" title="一此国内的Ngrok免费服务"></a>一此国内的Ngrok免费服务</h3><p><a href="http://www.ittun.com" target="_blank" rel="external">http://www.ittun.com</a><br><a href="http://qydev.com/" target="_blank" rel="external">http://qydev.com/</a><br><a href="http://natapp.cn/" target="_blank" rel="external">http://natapp.cn/</a><br><a href="http://www.ngrok.cc/" target="_blank" rel="external">http://www.ngrok.cc/</a></p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://blog.lzp.name/archives/24" target="_blank" rel="external">http://blog.lzp.name/archives/24</a><br><a href="http://tonybai.com/2015/03/14/selfhost-ngrok-service/" target="_blank" rel="external">http://tonybai.com/2015/03/14/selfhost-ngrok-service/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[运维的85条军规]]></title>
      <url>http://www.hi-linux.com/posts/40910.html</url>
      <content type="html"><![CDATA[<p>中文翻译：<a href="http://www.oschina.net/translate/85-operational-rules" target="_blank" rel="external">http://www.oschina.net/translate/85-operational-rules</a><br>英文原文：<a href="http://jprall.typepad.com/blog/2010/10/85-operational-rules.html" target="_blank" rel="external">http://jprall.typepad.com/blog/2010/10/85-operational-rules.html</a></p>
<blockquote>
<p>1) 承载能力优先 ——随后再进行优化 —— 不遵守这条规则必定带来故障停机时间。不要在故障停机时间的压力下进行优化——要先集中精力提高承载能力。</p>
<p>2) 以Postgres为例，一定要确保你的每一个网络都能匹配得上你的WAL文件、Slony复制、快照技术以及基于磁盘的DB版本化(快照的衍生品)</p>
<p>3) 不要把问题’优化’到你的架构之中。为了解决问题而新加进来的一些东西往往后来都会变成运维沉重的负担。 要确保在运维工程化中开发出来的工具交接完整。过后再回头进行进一步的开发往往不灵。更重要的是，变更请求可能会破坏已经安排好的工程计划。</p>
<p>4) 保持简单。保持简单，因为你很聪明 别把事搞的太复杂 因为你行的。<br>(译者:KISS 原则 Keep It Simple, Stupid)<a id="more"></a></p>
<p>5)应该非常谨慎地使用 缓存 ，为了保护资源一致性，它很难进行水平缩放。<br> 如果你作的是一个可以横向扩展的东西，<br> 明智或审慎的做法是不要添加的缓存层。<br> 如果非要使用，它应该是为最终用户获得性能，<br> 不是为了赢得一个网站的容量;</p>
<p>6) 不要所有代码都自己写; 不要所有东西都外包;  在合适的时间使用合适的工具,完成你的工作.<br>(译者: 不要重复造轮子)</p>
<p>7)协商-真正有效的谈判唯一方式是先作一些调研,制定一些可行的性方案.这样你可以挑选你的首席开发商,如果你真的需要. 别虚张声势.</p>
<p>8)一直保持N+1。如果N=1，无论任何情况下不要轻易使用+1，这个1只用于当N down机情况下。当使用冗余服务器来承载负载时候，不要让你的系统超过49%的负荷。当有机会能只用N+2的架构时候，使用它。</p>
<p>9)数据丢失不是任何一个公司所能承担的风险–这是举世所知的真理。数据丢失造成的损失远远大于保持数据不丢失所花的成本。</p>
<p>10)无论何时何地尽可能并行化。这是复路考虑最重要的手段。比如，如果利用MogileFS来做位置感知，并且需要实时的复制数据，一个可行的方法是每一台MogileFS服务器可以复制它的数据去MogileFS的负载均衡中心。尽可能多的启用多的平行。</p>
<p>11)阅读手册。至今，我还是坚持要先通读RAID卡的手册，以确认是否有什么细微的差别。恶魔都隐藏在细节里。做足功课吧！</p>
<p>12)知道瓶颈所在，并知道怎么去定位它，一层层排查，查找是不是硬盘、内存或者cpu的阻塞了。通常这个很简单。</p>
<p>13)定期做系统容量管理程序。积极一点。如果没有容量数据的曲线，你很难知道你系统的薄弱之处。</p>
<p>14)不要促成失败，不要害怕改变。</p>
<p>15)别挖陷阱给自己跳。不要认为你的工作成果将能作为未来的工作的动力。</p>
<p>16 )运维人员写的代码应该是运维工具，而不是应用软件。</p>
<p>17)在运维团队中，不要低估了项目管理、文档撰写以及财务分析人员的价值。他们比给予工资更有价值。</p>
<p>18)监控一切。报警异常问题。其他部分记录数据用来做趋势分析信息。</p>
<p>19)定期的流程查看各个地方的趋势数据。</p>
<p>20)不要把监控弄的很乱，不然他就没有啥意义了。</p>
<p>21)要确保监控系统简单到让公司的每个人都能上手。你可能会很吃惊监控数据指标转换成为业务指标、市场指标和销售等等指标有多频繁。</p>
<p>22) 只在可以做出相应改善的地方做检查。 否则就不要浪费时间了。</p>
<p>23)公开你的检查报告，并附上相关数据，以便他人可以容易的阅读到关键点，并能关联到响应的数据。</p>
<p>24)在每一个技术点都分配人手。</p>
<p>25)要给重要人员配备后备人手。</p>
<p>26)要不断的招聘。甚至是当你没有名额，也要一直招聘。</p>
<p>27)要严于律己。无论你有多聪明或者你认为你多NB，你也要不断的提高自己。</p>
<p>28 )要尽可能多的把自己和其他公司做比较。眼光要往外看。</p>
<p>29) 挑选一个展会或回忆，只有一个，一年一次，去参加。如果展会一年举办多次，之参加一次。</p>
<p>30) 购买你需要的，而非你想要的。永远都不要摘掉企业这顶帽子带上“什么对我是最简单最安全的”这顶帽子。</p>
<p>31)永远只做最生意有益的事情，即使这意味着你需要离开。</p>
<p>32)正式问责机制——记录承诺，标记它们，揭示为兑现的承诺。</p>
<p>33)你不应失败两次以上。恐惧感有点好处。但要知道长期犯错和无意犯错的区别。</p>
<p>34)无情一些——你的对手如此。</p>
<p>35)视工作为在你完成时需要签上你的名字。这也意味着完成你的工作。</p>
<p>36)变得对别人有用。</p>
<p>37)与初创公司合作——提供你的专业技术和规模，你将获得免费的产品作为回报，有时甚或一生。</p>
<p>38)容量是一个业务/产品问题。这意外着每个页面、每个请求、每次登录的网络成本等等在做正确的业务/产品决策时候都必须是都透明</p>
<p>39)一直打破预算。运维团队通常是最大的花费者。通常没有收入没有达到预算，但是运维团队可以有很多方法来延期采购。</p>
<p>40)过去能正常的做的事，不见得现在或者未来都会正常。所以做的时候，先用工具测试一下。</p>
<p>41)文档化。把所有东西都写成文档。要让新人挨个去问怎么做事。</p>
<p>42)用一张大尺寸的图绘制你数据中心的网络拓扑。</p>
<p>43)用一张图描绘出你每一个产品的业务流程图。</p>
<p>44) Faq-O-Matic, Wiki, 在这里人们可以很容易的发布“这是如何修复这个”的文章，并让它容易被找到的地方。这里是技术编写者能派上用场的地方，但是，最重要的是使文档更容易，即使是非正式的。</p>
<p>45) 确保所有人，任何人都可以被替换。  </p>
<p>46)多数人在家里做的比在办公室里更多，有些人则不然。</p>
<p>47)捆绑下单——你可以要求更多折扣，更好的条款等等。当你成批购进硬件时。你可以要求一切——最低价格，备件包，租赁期限，只要他们还没有得到订单。  </p>
<p>48)同你的供货商保持长期关系——确保你在下份工作时依然能够联系他们。</p>
<p>49)给运维团队的每一个人配置可以用来远程工作的超级装备：掌上电脑、无线上网卡、24英寸液晶显示器等等。雇佣大拿得到回报要远大于远程雇佣的本地人员。记住运维工程师都是用电达人，能充分的利用屏幕上的每一个像素点。</p>
<p>50)完全陷入IT标准的泥潭。直到Mac运行office 2007和outlook，你必须运行windows。间断的。除非全用mac本，否则这会破坏会议日程表、联系人或者邮件列表的办公效率。如果有个员工愿意工作的在 xp环境。这是非常少。这条法则，现在是陈旧的/未公认的，陷入泥潭不一定是最好的方法。这个列表非常的07化。</p>
<p>51)有个合理的采购流程。知道你的预算，确信能管好它。从财务得到实际的金额。在技术驱动的预算/报告和财务驱动的预算/报告直接往往有一定的差距。作为一个搞的运维管理者要能形成模型把这些差距计入销售总成本中。一个理解这些事情的CFO有助于推动业务决策。</p>
<p>52)周会一定要持续进行。对上次会议的事件逐一落实结果和追责。</p>
<p>53)建立一个分离的逐级升级系统，用以消除由于开发者代码的问题对线上系统的不良影响。这主要是运维问题、代码问题都存在的情况下在开发跟踪系统或者运维跟踪系统中往往会丢掉，最后无人理睬。建立一个独立的跟踪系统来解决这些问题可以使得问题简单清晰。</p>
<p>54)产品开发从设计开始的每个阶段都要和运维相结合。这样，扩展性，监控和可靠性都融入到产品里。这样同时也可以确保运维负责的硬件采购、监控系统按时到位，运维手册得到及时更新，最后产品按照预计时间上线运行并且都符合运维标准。</p>
<p>55)在公司真正的实践——Sarbanes，WebTrust 安全审计认证，SAS 70 审计标准，Visa 和银行等等。如果你真的成功了，这些都是你不得不打交道的。早点开始这些准备其实很简单，不需要太多的知识。部署一个工单/任务跟踪工具，使用它。把变更控制和变更管理纳入同样的系统里，使用它。其他信息也可以放进来。系统就可以帮助我们找出像“上周变更了什么”这类信息。</p>
<p>56)简化给冗余留和多点登录的流程。一开始或许很难，但是一个没有真正的扩展性和可靠性的系统，才会真正耽误你获得成功的时间。</p>
<p>57)Oracle 标准版(SQL Server 标准版)是值得购买的。如果你可以限制住自己不超过标准版的需求，那就绝对值得买，哪怕你刚刚开始创业还不需要他。</p>
<p>58)Postgres 和 MySQL 是一个免费的考虑。如果你不是特别在意事务完整性，MySQL 是很好的选择。直到”真空”和Postgres单词的强制链被打断，Postgres代表一个不可预知的，通常消极诡异的数据库。</p>
<p>59)容量设计应该按照每日峰值再上抛 20% ～ 30% 的冗余。除非你是个迁移技术热衷者。</p>
<p>60)尽量多读一些经济杂志。它们通常是免费的，只需你填写一些调查问卷就可以免费获得。新闻的价值是巨大的。让他们投递到你家里，工作的时候读杂志的机会趋近于零。</p>
<p>61)保障安全。开发人员不应该有线上环境的权限，应该做代码复核。这是和运维之间的职责分离。运维团队中应该有人控制其他运维人员权限的权限。制定员工手册，告知违反安全条例所带来的严重后果。从开始就要从物理的、逻辑的、功能的各个方面来保护客户的数据安全和隐私。万一有客户要和你对峙起来，你发现起来发现自己只是靠勇气和勤奋来保护客户数据，那你就傻了。</p>
<p>62) 控制好访问入口。首先要保证大家可以正常完成工作；其次要确保你知道他们是从哪里登录的。启用双因素身份验证方法。</p>
<p>63)对于人们访问生产环境必经之路的壁垒和网关宿主，击键记录很重要。对于 Windows 可能稍微有点难度，不过有些网关可以提供自动截屏功能。</p>
<p>64)如果有状况的情况下，确保有冗余登录点连线到生产环境。不要期望公司的 VPN 在网络中断的时候还能连上生产环境。直接把 VPN 架设在线上环境里。</p>
<p>65)使用 LDAP 认证，哪怕你只有 10 台机器，通过复制 passwd 和 shadow 文件的方式来管理，你也需要 LDAP 认证。</p>
<p>66)不要低估在 UNIX 环境中一台 Windows Server 2003(2008)设备的作用。如果只是因为不懂 Windows，那么去学，而不是排斥它。</p>
<p>67)不要在无效的无线方案上浪费大家的时间。人们都机动的，他们希望在沙发上，会议室里，门口，到处都要上网。一定要保证无线ad的可靠。</p>
<p>68) 总有人把额外的精力和时间都投入到工作上——直接通过他们的请假单好了。而另一些人恰恰相反只把注意力放在怎么通过自己的请假单。在个人时间安排上，运维人员总是做出巨大的牺牲，他们随时准备凌晨3点爬起床快速响应排障需求。</p>
<p>69)通过集中式的关系数据库管理你所有的产品成果。然后通过数据复制分发到资产，人员，网络，合同等所有数据到异地。没错，要的是一个在线的实时可用的复制，而不是每天晚上备份到磁带。</p>
<p>70)尽可使用自动化流程以确保安全，包括操作系统或者产品的上线，文件的分发，日志的分析等。</p>
<p>71)自动化操作通过运维数据库获得配置(真理来源)。</p>
<p>72)服务器通常有三种状态——离线，在线，产品态。在线就是说正在通过 cfengine、rsync 或者其他你在使用的工具完成配置。产品态表示已经走流量了。同时还需要一个状态，这个状态下的设备可以在不提供生产服务的情况下收集或者测试数据。</p>
<p>73)注重日志数据。在设备下线或者重建之前，一定要先导出日志。</p>
<p>74)如果规模发展太快以至于没有太多时间来做优化，那就尽力锁定一切——流程还能进行即可，就不要改变它，直到后来有了绝对必要的理由。总之，锁定默认值，等待成长到必要时再审视。</p>
<p>75)你永远无法避免运维工程师在你基础设施最关键的地方犯错——比如在哪台机器上不小心执行 rm -rf / 命令。</p>
<p>76)为团队保持好玩和有趣的气氛——如果他们不再享受他们的工作，他们就会找别的事情来消遣。要让团队有主人翁意识，运维不是哪个经理的个人任务。</p>
<p>77)提供 99.999% 可用性的真正价值在于让我们有能力保持灵活。这意味着当你需要的时候可以充分利用冗余。这会让物理变更、设备登入点变化、代码修改和回退等等都游刃有余。这个对于公司本身价值巨大，甚至比对客户还大。</p>
<p>78)如果你能做到 99.999%，给客户100% 的服务承诺。</p>
<p>79) 不要丢掉按流程发布软件的能力。应该丢掉的是你自己回滚或者转移到旧版本代码的能力。压根就不应该“处理”这种徒劳的失败转移。当事情变得不 如人意的时候，你更应该做的是找个大玩意儿来挡住你的肥屁股。CYA = 保持敏捷 = 成功的公司。</p>
<p>80) 在脑子里要清楚知道为什么以及这样做的为了达到的目的，为客户构建产品每一个具体步骤。不管你部署给最终用户的是什么，把这些放在最先考虑，即你所有(基础设施、流程和人员)的设计都是为了提供最好的服务和产品。</p>
<p>81)第一次就要做对了。很少有机会让你回去在做一遍的。重做是对公司资源的巨大浪费。要提高命中率，一次就要成功。</p>
<p>82)接触业内人士、盟友和类似的企业，看看他们的运维是怎么做的。很可能他们碰到了跟你一样的挑战，而解决的方法更好。不要害怕分享自己的经验和处理过程，因为别人也会回馈的。他山之石，可以攻玉！</p>
<p>83)招人要招那些好到可以让你担心位子不保的那样的人，招你欣赏和可以学习的榜样，招那些你愿意和他一起工作的。这感觉甚至超过你招聘一个工作考评为A的员工。</p>
<p>84) IT 和运维是完全不同的两个概念。一个不错的运维经理应该可以管理好企业IT，但是一个传统的 IT工程师很难有能力处理互联网运维任务。</p>
<p>85)当你开始一份新工作或者在每年的起始，都应该去争取预算。这不是说推车那老破车往前走，而应该是基 于历史数据做出最佳推荐方案。如果你正在评估一份新工作，请确认你完完全全的知道预算以及预算的来源。同时，还应该有完善这份预算的权利。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL不同复制模式下忽略某些binlog事件方法]]></title>
      <url>http://www.hi-linux.com/posts/43579.html</url>
      <content type="html"><![CDATA[<p>在MySQL复制中，如何忽略slave节点上发生的主键冲突、数据不存在等错误。</p>
<p>在MySQL复制中，如果slave节点上遇到错误，比如数据不存在或者主键冲突等错误时，想要忽略这些错误，可以采用以下几种方法：</p>
<h3 id="1、未启用GTID模式时"><a href="#1、未启用GTID模式时" class="headerlink" title="1、未启用GTID模式时"></a>1、未启用GTID模式时</h3><p>只需通过设定 SQL_SLAVE_SKIP_COUNTER 的值，即可忽略一些复制事件。例如：<a id="more"></a></p>
<h4 id="需要先关闭SLAVE服务"><a href="#需要先关闭SLAVE服务" class="headerlink" title="需要先关闭SLAVE服务"></a>需要先关闭SLAVE服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@imysql.com [<span class="built_in">test</span>]&gt; STOP SLAVE;</div></pre></td></tr></table></figure>
<h4 id="忽略N个事件（event），通常一个SQL是一个事件"><a href="#忽略N个事件（event），通常一个SQL是一个事件" class="headerlink" title="忽略N个事件（event），通常一个SQL是一个事件"></a>忽略N个事件（event），通常一个SQL是一个事件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@imysql.com [<span class="built_in">test</span>]&gt; SET SQL_SLAVE_SKIP_COUNTER=N;</div></pre></td></tr></table></figure>
<h4 id="再次启动SLAVE服务"><a href="#再次启动SLAVE服务" class="headerlink" title="再次启动SLAVE服务"></a>再次启动SLAVE服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@imysql.com [<span class="built_in">test</span>]&gt; START SLAVE;</div></pre></td></tr></table></figure>
<h3 id="2、启用GTID模式时"><a href="#2、启用GTID模式时" class="headerlink" title="2、启用GTID模式时"></a>2、启用GTID模式时</h3><p>启用GTID，想要忽略某些错误事件就稍微麻烦一点点了。<br>首先，我们需要先查看当前SLAVE复制的进度：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SHOW SLAVE STATUS\G</div></pre></td></tr></table></figure>
<p>从中看到，当前SLAVE复制的GTID进展是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Slave_IO_Running: Yes</div><div class="line">Slave_SQL_Running: No</div><div class="line">Last_Errno: 1062</div><div class="line">Last_Error: …Duplicate…key ‘PRIMARY’, Error_code: 1062;…</div><div class="line">Master_UUID: f2b6c829-9c87-11e4-84e8-deadeb54b599</div><div class="line">Retrieved_Gtid_Set: 3a16ef7a-75f5-11e4-8960-deadeb54b599:1-283,f2b6c829-9c87-11e4-84e8-deadeb54b599:1-33</div><div class="line">Executed_Gtid_Set: 3a16ef7a-75f5-11e4-8960-deadeb54b599:1-283,f2b6c829-9c87-11e4-84e8-deadeb54b599:1-31</div><div class="line">Auto_Position: 1</div></pre></td></tr></table></figure></p>
<p>从上面的信息可以看到，当前从MASTER取到了1-33的事务列表，并且已执行（看Executed_Gtid_Set）到了31这个事务GTID位置，在这下一个位置（32）上发生错误。</p>
<p>这时候，我们需要手工调整SLAVE已清除的GTID列表 GTID_PURGED，人为通知SLAVE哪些事务已经被清除了，后续可以忽略：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@imysql.com [<span class="built_in">test</span>]&gt; STOP SLAVE;</div><div class="line">root@imysql.com [<span class="built_in">test</span>]&gt; RESET MASTER;</div><div class="line">root@imysql.com [<span class="built_in">test</span>]&gt; SET @@GLOBAL.GTID_PURGED = “3a16ef7a-75f5-11e4-8960-deadeb54b599:1-283,f2b6c829-9c87-11e4-84e8-deadeb54b599:1-32”;</div><div class="line">root@imysql.com [<span class="built_in">test</span>]&gt; START SLAVE;</div></pre></td></tr></table></figure></p>
<p>上面这些命令的用意是，忽略 f2b6c829-9c87-11e4-84e8-deadeb54b599:32 这个GTID事务，下一次事务接着从 33 这个GTID开始，即可跳过上述错误。</p>
<h3 id="3、无论是否启用GTID，使用pt-slave-restart工具"><a href="#3、无论是否启用GTID，使用pt-slave-restart工具" class="headerlink" title="3、无论是否启用GTID，使用pt-slave-restart工具"></a>3、无论是否启用GTID，使用pt-slave-restart工具</h3><p>首先不得不说，percona toolkit工具集对DBA而言实在太方便了。pt-slave-restart工具的作用是监视某些特定的复制错误，然后忽略，并且再次启动SLAVE进程(Watch and restart MySQL replication after errors)。<br>简单用法示例：</p>
<h4 id="忽略所有1062错误，并再次启动SLAVE进程"><a href="#忽略所有1062错误，并再次启动SLAVE进程" class="headerlink" title="忽略所有1062错误，并再次启动SLAVE进程"></a>忽略所有1062错误，并再次启动SLAVE进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[yejr@imysql.com ]<span class="comment"># pt-slave-resetart -S./mysql.sock —error-numbers=1062</span></div></pre></td></tr></table></figure>
<h4 id="检查到错误信息只要包含-test-yejr，就一概忽略，并再次启动SLAVE进程"><a href="#检查到错误信息只要包含-test-yejr，就一概忽略，并再次启动SLAVE进程" class="headerlink" title="检查到错误信息只要包含 test.yejr，就一概忽略，并再次启动SLAVE进程"></a>检查到错误信息只要包含 test.yejr，就一概忽略，并再次启动SLAVE进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[yejr@imysql.com ]<span class="comment"># pt-slave-resetart -S./mysql.sock —error-text=”test.yejr”</span></div></pre></td></tr></table></figure>
<p>综上，我们虽然可以利用工具来快速忽略复制错误，但还是要掌握如何人为忽略复制错误的方法，在没有工具的时候也能了然于胸。</p>
<p>转载自：<a href="http://imysql.com/2015/09/07/mysql-faq-howto-ignore-replication-errors.shtml" target="_blank" rel="external">http://imysql.com/2015/09/07/mysql-faq-howto-ignore-replication-errors.shtml</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL Processlist中需引起关注的状态]]></title>
      <url>http://www.hi-linux.com/posts/18793.html</url>
      <content type="html"><![CDATA[<p>一般而言，我们在processlist结果中如果经常能看到某些SQL的话，至少可以说明这些SQL的频率很高，通常需要对这些SQL进行进一步优化。</p>
<p>今天我们要说的是，在processlist中，看到哪些运行状态时要引起关注，主要有下面几个：</p>
<blockquote>
<p>Copy to tmp table<br>执行ALTER TABLE修改表结构时建议：放在凌晨执行或者采用类似pt-osc工具<a id="more"></a></p>
<p>Copying to tmp table<br>拷贝数据到内存中的临时表，常见于GROUP BY操作时建议：创建适当的索引</p>
<p>Copying to tmp table on disk<br>临时结果集太大，内存中放不下，需要将内存中的临时表拷贝到磁盘上，形成 #sql<strong><em>.MYD、#sql</em></strong>.MYI(在5.6及更高的版本，临时表可以改成InnoDB引擎了，可以参考选项default_tmp_storage_engine)建议：创建适当的索引，并且适当加大sort_buffer_size/tmp_table_size/max_heap_table_size</p>
<p>Creating sort index<br>当前的SELECT中需要用到临时表在进行ORDER BY排序建议：创建适当的索引</p>
<p>Creating tmp table<br>创建基于内存或磁盘的临时表，当从内存转成磁盘的临时表时，状态会变成：Copying to tmp table on disk建议：创建适当的索引，或者少用UNION、视图(VIEW)之类的</p>
<p>Reading from net<br>表示server端正通过网络读取客户端发送过来的请求建议：减小客户端发送数据包大小，提高网络带宽/质量</p>
<p>Sending data<br>从server端发送数据到客户端，也有可能是接收存储引擎层返回的数据，再发送给客户端，数据量很大时尤其经常能看见备注：Sending Data不是网络发送，是从硬盘读取，发送到网络是Writing to net建议：通过索引或加上LIMIT，减少需要扫描并且发送给客户端的数据量</p>
<p>Sorting result<br>正在对结果进行排序，类似Creating sort index，不过是正常表，而不是在内存表中进行排序建议：创建适当的索引</p>
<p>statistics<br>进行数据统计以便解析执行计划，如果状态比较经常出现，有可能是磁盘IO性能很差建议：查看当前io性能状态，例如iowait</p>
<p>Waiting for global read lock<br>FLUSH TABLES WITH READ LOCK整等待全局读锁建议：不要对线上业务数据库加上全局读锁，通常是备份引起，可以放在业务低谷期间执行或者放在slave服务器上执行备份</p>
<p>Waiting for tables,Waiting for table flush<br>FLUSH TABLES, ALTER TABLE, RENAME TABLE, REPAIR TABLE, ANALYZE TABLE, OPTIMIZE TABLE等需要刷新表结构并重新打开建议：不要对线上业务数据库执行这些操作，可以放在业务低谷期间执行</p>
<p>Waiting for lock_type lock<br>等待各种类型的锁：</p>
<ul>
<li>Waiting for event metadata lock• Waiting for global read lock</li>
<li>Waiting for schema metadata lock</li>
<li>Waiting for stored function metadata lock</li>
<li>Waiting for stored procedure metadata lock</li>
<li>Waiting for table level lock</li>
<li>Waiting for table metadata lock</li>
<li>Waiting for trigger metadata lock<br>建议：比较常见的是上面提到的global read lock以及table metadata lock，建议不要对线上业务数据库执行这些操作，可以放在业务低谷期间执行。如果是table level lock，通常是因为还在使用MyISAM引擎表，赶紧转投InnoDB引擎吧，别再老顽固了</li>
</ul>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx与Lua的执行顺序和步骤说明]]></title>
      <url>http://www.hi-linux.com/posts/4336.html</url>
      <content type="html"><![CDATA[<h3 id="一、Nginx执行步骤"><a href="#一、Nginx执行步骤" class="headerlink" title="一、Nginx执行步骤"></a>一、Nginx执行步骤</h3><p>Nginx处理每一个用户请求时，都是按照若干个不同阶段(phase)依次处理的，而不是根据配置文件上的顺序。</p>
<p>Nginx处理请求的过程一共划分为11个阶段，按照执行顺序依次是post-read、server-rewrite、find-config、rewrite、post-rewrite、 preaccess、access、post-access、try-files、content、log.</p>
<blockquote>
<p>1、post-read<br>读取请求内容阶段，nginx读取并解析完请求头之后就立即开始运行；例如模块 ngx_realip 就在 post-read 阶段注册了处理程序，它的功能是迫使 Nginx 认为当前请求的来源地址是指定的某一个请求头的值。</p>
<p>2、server-rewrite<br>server请求地址重写阶段；当ngx_rewrite模块的set配置指令直接书写在server配置块中时，基本上都是运行在server-rewrite 阶段</p>
<p>3、find-config<br>配置查找阶段，这个阶段并不支持Nginx模块注册处理程序，而是由Nginx核心来完成当前请求与location配置块之间的配对工作。<br><a id="more"></a><br>4、rewrite<br>location请求地址重写阶段，当ngx_rewrite指令用于location中，就是再这个阶段运行的；另外ngx_set_misc(设置md5、encode_base64等)模块的指令，还有ngx_lua模块的set_by_lua指令和rewrite_by_lua指令也在此阶段。</p>
<p>5、post-rewrite<br>请求地址重写提交阶段，当nginx完成rewrite阶段所要求的内部跳转动作，如果rewrite阶段有这个要求的话；</p>
<p>6、preaccess<br>访问权限检查准备阶段，ngx_limit_req和ngx_limit_zone在这个阶段运行，ngx_limit_req可以控制请求的访问频率，ngx_limit_zone可以控制访问的并发度；</p>
<p>7、access<br>访问权限检查阶段，标准模块ngx_access、第三方模块ngx_auth_request以及第三方模块ngx_lua的access_by_lua指令就运行在这个阶段。配置指令多是执行访问控制相关的任务，如检查用户的访问权限，检查用户的来源IP是否合法；</p>
<p>8、post-access<br>访问权限检查提交阶段；主要用于配合access阶段实现标准ngx_http_core模块提供的配置指令satisfy的功能。satisfy all(与关系),satisfy any(或关系)</p>
<p>9、try-files<br>配置项try_files处理阶段；专门用于实现标准配置指令try_files的功能,如果前 N-1 个参数所对应的文件系统对象都不存在，try-files 阶段就会立即发起“内部跳转”到最后一个参数(即第 N 个参数)所指定的URI.</p>
<p>10、content<br>内容产生阶段，是所有请求处理阶段中最为重要的阶段，因为这个阶段的指令通常是用来生成HTTP响应内容并输出 HTTP 响应的使命；</p>
<p>11、log<br>日志模块处理阶段；记录日志</p>
</blockquote>
<h3 id="二、Nginx下Lua处理阶段与使用范围："><a href="#二、Nginx下Lua处理阶段与使用范围：" class="headerlink" title="二、Nginx下Lua处理阶段与使用范围："></a>二、Nginx下Lua处理阶段与使用范围：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">init_by_lua            http</div><div class="line">set_by_lua             server, server <span class="keyword">if</span>, location, location <span class="keyword">if</span></div><div class="line">rewrite_by_lua         http, server, location, location <span class="keyword">if</span></div><div class="line">access_by_lua          http, server, location, location <span class="keyword">if</span></div><div class="line">content_by_lua         location, location <span class="keyword">if</span></div><div class="line">header_filter_by_lua   http, server, location, location <span class="keyword">if</span></div><div class="line">body_filter_by_lua     http, server, location, location <span class="keyword">if</span></div><div class="line">log_by_lua             http, server, location, location <span class="keyword">if</span></div><div class="line">timer</div></pre></td></tr></table></figure>
<blockquote>
<p>init_by_lua:<br>在nginx重新加载配置文件时，运行里面lua脚本，常用于全局变量的申请。<br>例如lua_shared_dict共享内存的申请，只有当nginx重起后，共享内存数据才清空，这常用于统计。</p>
<p>set_by_lua:<br>设置一个变量，常用与计算一个逻辑，然后返回结果<br>该阶段不能运行Output API、Control API、Subrequest API、Cosocket API</p>
<p>rewrite_by_lua:<br>在access阶段前运行，主要用于rewrite</p>
<p>access_by_lua:<br>主要用于访问控制，能收集到大部分变量，类似status需要在log阶段才有。<br>这条指令运行于nginx access阶段的末尾，因此总是在 allow 和 deny 这样的指令之后运行，虽然它们同属 access 阶段。</p>
<p>content_by_lua:<br>阶段是所有请求处理阶段中最为重要的一个，运行在这个阶段的配置指令一般都肩负着生成内容(content)并输出HTTP响应。</p>
<p>header_filter_by_lua:<br>一般只用于设置Cookie和Headers等<br>该阶段不能运行Output API、Control API、Subrequest API、Cosocket API</p>
<p>body_filter_by_lua:<br>一般会在一次请求中被调用多次, 因为这是实现基于 HTTP 1.1 chunked 编码的所谓“流式输出”的。<br>该阶段不能运行Output API、Control API、Subrequest API、Cosocket API</p>
<p>log_by_lua:<br>该阶段总是运行在请求结束的时候，用于请求的后续操作，如在共享内存中进行统计数据,如果要高精确的数据统计，应该使用body_filter_by_lua。<br>该阶段不能运行Output API、Control API、Subrequest API、Cosocket API</p>
<p>timer:</p>
</blockquote>
<h3 id="三、ngx-lua运行指令"><a href="#三、ngx-lua运行指令" class="headerlink" title="三、ngx_lua运行指令"></a>三、ngx_lua运行指令</h3><p>ngx_lua属于nginx的一部分，它的执行指令都包含在nginx的11个步骤之中了，不过ngx_lua并不是所有阶段都会运行的；</p>
<p>1、init_by_lua、init_by_lua_file<br>语法：init_by_lua <lua-script-str><br>语境：http<br>阶段：loading-config<br>当nginx master进程在加载nginx配置文件时运行指定的lua脚本，通常用来注册lua的全局变量或在服务器启动时预加载lua模块：<br>init_by_lua ‘cjson = require “cjson”‘;<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    location = /api &#123;</div><div class="line">        content_by_lua <span class="string">'</span></div><div class="line">            ngx.say(cjson.encode(&#123;dog = 5, cat = 6&#125;))</div><div class="line">        '</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></lua-script-str></p>
<p>或者初始化lua_shared_dict共享数据：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">lua_shared_dict dogs 1m;</div><div class="line">init_by_lua <span class="string">'</span></div><div class="line">    local dogs = ngx.shared.dogs;</div><div class="line">    dogs:set("Tom", 50)</div><div class="line">'</div><div class="line">server &#123;</div><div class="line">    location = /api &#123;</div><div class="line">        content_by_lua <span class="string">'</span></div><div class="line">            local dogs = ngx.shared.dogs;</div><div class="line">            ngx.say(dogs:get("Tom"))</div><div class="line">        '</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是，lua_shared_dict的内容不会在nginx reload时被清除。所以如果你不想在你的init_by_lua中重新初始化共享数据，那么你需要在你的共享内存中设置一个标志位并在init_by_lua中进行检查。<br>因为这个阶段的lua代码是在nginx forks出任何worker进程之前运行，数据和代码的加载将享受由操作系统提供的copy-on-write的特性，从而节约了大量的内存。<br>不要在这个阶段初始化你的私有lua全局变量，因为使用lua全局变量会照成性能损失，并且可能导致全局命名空间被污染。<br>这个阶段只支持一些小的LUA Nginx API设置：ngx.log和print、ngx.shared.DICT；</p>
<p>2、init_worker_by_lua、init_worker_by_lua_file<br>语法：init_worker_by_lua <lua-script-str><br>语境：http<br>阶段：starting-worker<br>在每个nginx worker进程启动时调用指定的lua代码。如果master 进程不允许，则只会在init_by_lua之后调用。</lua-script-str></p>
<p>这个hook通常用来创建每个工作进程的计时器(通过lua的ngx.timer API)，进行后端健康检查或者其它日常工作：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">init_worker_by_lua:</div><div class="line">    <span class="built_in">local</span> delay = 3  -- <span class="keyword">in</span> seconds</div><div class="line">    <span class="built_in">local</span> new_timer = ngx.timer.at</div><div class="line">    <span class="built_in">local</span> <span class="built_in">log</span> = ngx.log</div><div class="line">    <span class="built_in">local</span> ERR = ngx.ERR</div><div class="line">    <span class="built_in">local</span> check</div><div class="line">    check = <span class="keyword">function</span>(premature)</div><div class="line">        <span class="keyword">if</span> not premature <span class="keyword">then</span></div><div class="line">            -- <span class="keyword">do</span> the health check other routine work</div><div class="line">            <span class="built_in">local</span> ok, err = new_timer(delay, check)</div><div class="line">            <span class="keyword">if</span> not ok <span class="keyword">then</span></div><div class="line">                <span class="built_in">log</span>(ERR, <span class="string">"failed to create timer: "</span>, err)</div><div class="line">                <span class="built_in">return</span></div><div class="line">            end</div><div class="line">        end</div><div class="line">    end</div><div class="line">    <span class="built_in">local</span> ok, err = new_timer(delay, check)</div><div class="line">    <span class="keyword">if</span> not ok <span class="keyword">then</span></div><div class="line">        <span class="built_in">log</span>(ERR, <span class="string">"failed to create timer: "</span>, err)</div><div class="line">    end</div></pre></td></tr></table></figure></p>
<p>3、set_by_lua、set_by_lua_file<br>语法：set_by_lua $res <lua-script-str> [$arg1 $arg2 …]<br>语境：server、server if、location、location if<br>阶段：rewrite<br>传入参数到指定的lua脚本代码中执行，并得到返回值到res中。<lua-script-str>中的代码可以使从ngx.arg表中取得输入参数(顺序索引从1开始)。</lua-script-str></lua-script-str></p>
<p>这个指令是为了执行短期、快速运行的代码因为运行过程中nginx的事件处理循环是处于阻塞状态的。耗费时间的代码应该被避免。<br>禁止在这个阶段使用下面的API：1、output api(ngx.say和ngx.send_headers)；2、control api(ngx.exit)；3、subrequest api(ngx.location.capture和ngx.location.capture_multi)；4、cosocket api(ngx.socket.tcp和ngx.req.socket)；5、sleep api(ngx.sleep)</p>
<p>此外注意，这个指令只能一次写出一个nginx变量，但是使用ngx.var接口可以解决这个问题：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">location /foo &#123;</div><div class="line">    <span class="built_in">set</span> <span class="variable">$diff</span> <span class="string">''</span>;</div><div class="line">    set_by_lua <span class="variable">$num</span> <span class="string">'</span></div><div class="line">        local a = 32</div><div class="line">        local b = 56</div><div class="line">        ngx.var.diff = a - b; --写入$diff中</div><div class="line">        return a + b;  --返回到$sum中</div><div class="line">    '</div><div class="line">    <span class="built_in">echo</span> <span class="string">"sum = <span class="variable">$sum</span>, diff = <span class="variable">$diff</span>"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个指令可以自由的使用HttpRewriteModule、HttpSetMiscModule和HttpArrayVarModule所有的方法。所有的这些指令都将按他们出现在配置文件中的顺序进行执行。</p>
<p>4、rewrite_by_lua、rewrite_by_lua_file<br>语法：rewrite_by_lua <lua-script-str><br>语境：http、server、location、location if<br>阶段：rewrite tail<br>作为rewrite阶段的处理，为每个请求执行指定的lua代码。注意这个处理是在标准HtpRewriteModule之后进行的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">location /foo &#123;</div><div class="line">    <span class="built_in">set</span> <span class="variable">$a</span> 12;</div><div class="line">    <span class="built_in">set</span> <span class="variable">$b</span> <span class="string">""</span>;</div><div class="line">    rewrite_by_lua <span class="string">'ngx.var.b = tonumber(ngx.var.a) + 1'</span>;</div><div class="line">    <span class="built_in">echo</span> <span class="string">"res = <span class="variable">$b</span>"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></lua-script-str></p>
<p>如果这样的话将不会按预期进行工作：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">location /foo &#123;</div><div class="line">    <span class="built_in">set</span> <span class="variable">$a</span> 12;</div><div class="line">    <span class="built_in">set</span> <span class="variable">$b</span> <span class="string">''</span>;</div><div class="line">    rewrite_by_lua <span class="string">'ngx.var.b = tonumber(ngx.var.a) + 1'</span>;</div><div class="line">    <span class="keyword">if</span>(<span class="variable">$b</span> = <span class="string">'13'</span>) &#123;</div><div class="line">        rewrite ^ /bar redirect;</div><div class="line">        <span class="built_in">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">echo</span> <span class="string">"res = <span class="variable">$b</span>"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为if会在rewrite_by_lua之前运行，所以判断将不成立。正确的写法应该是这样：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">location /foo &#123;</div><div class="line">    <span class="built_in">set</span> <span class="variable">$a</span> 12;</div><div class="line">    <span class="built_in">set</span> <span class="variable">$b</span> <span class="string">''</span>;</div><div class="line">    rewrite_by_lua <span class="string">'</span></div><div class="line">        ngx.var.b = tonumber(ngx.var.a) + 1</div><div class="line">        if tonumber(ngx.var.b) == 13 then</div><div class="line">            return ngx.redirect("/bar");</div><div class="line">        end</div><div class="line">    '</div><div class="line">    <span class="built_in">echo</span> <span class="string">"res = <span class="variable">$b</span>"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意ngx_eval模块可以近似于使用rewite_by_lua，例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">    <span class="built_in">eval</span> <span class="variable">$res</span> &#123;</div><div class="line">        proxy_pass http://foo,com/check-spam;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="variable">$res</span> = <span class="string">'spam'</span>) &#123;</div><div class="line">        rewrite ^ /terms-of-use.html redirect;</div><div class="line">    &#125;</div><div class="line">    fastcgi_pass .......</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以被ngx_lua这样实现：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">location = /check-spam &#123;</div><div class="line">    internal;</div><div class="line">    proxy_pass http://foo.com/check-spam;</div><div class="line">&#125;</div><div class="line"></div><div class="line">location / &#123;</div><div class="line">    rewrite_by_lua <span class="string">'</span></div><div class="line">        local res = ngx.location.capture("/check-spam")</div><div class="line">        if res.body == "spam" then</div><div class="line">            return ngx.redirect("terms-of-use.html")</div><div class="line">    '</div><div class="line">    fastcgi_pass .......</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>和其它的rewrite阶段的处理程序一样，rewrite_by_lua在subrequests中一样可以运行。</p>
<p>请注意在rewrite_by_lua内调用ngx.exit(ngx.OK)，nginx的请求处理流程将继续进行content阶段的处理。从rewrite_by_lua终止当前的请求，要调用ngx.exit返回status大于200并小于300的成功状态或ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)的失败状态。<br>如果HttpRewriteModule的重写指令被用来改写URI和重定向，那么任何rewrite_by_lua和rewrite_by_lua_file的代码将不会执行，例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">location /foo &#123;</div><div class="line">    rewrite ^ /bar;</div><div class="line">    rewrite_by_lua <span class="string">'ngx.exit(503)'</span></div><div class="line">&#125;</div><div class="line">location /bar &#123;</div><div class="line">    .......</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这个例子中ngx.exit(503)将永远不会被执行，因为rewrite修改了location，请求已经跳入其它location中了。</p>
<p>5、access_by_lua，access_by_lua_file<br>语法：access_by_lua <lua-script-str><br>语境：http,server,location,location if<br>阶段：access tail<br>为每个请求在访问阶段的调用lua脚本进行处理。主要用于访问控制，能收集到大部分的变量。</lua-script-str></p>
<p>注意access_by_lua和rewrite_by_lua类似是在标准HttpAccessModule之后才会运行，看一个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">    deny 192.168.1.1;</div><div class="line">    allow 192.168.1.0/24;</div><div class="line">    allow 10.1.1.0/16;</div><div class="line">    deny all;</div><div class="line">    access_by_lua <span class="string">'</span></div><div class="line">        local res = ngx.location.capture("/mysql", &#123;...&#125;)</div><div class="line">        ....</div><div class="line">    '</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果client ip在黑名单之内，那么这次连接会在进入access_by_lua调用的mysql之前被丢弃掉。</p>
<p>ngx_auth_request模块和access_by_lua的用法类似：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">    auth_request /auth;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以用ngx_lua这么实现：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">    access_by_lua <span class="string">'</span></div><div class="line">        local res = ngx.location.capture("/auth")</div><div class="line">        if res.status == ngx.HTTP_OK then</div><div class="line">            return</div><div class="line">        end</div><div class="line">        if res.status == ngx.HTTP_FORBIDDEN then</div><div class="line">            ngx.exit(res.status)</div><div class="line">        end</div><div class="line">        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)</div><div class="line">    '</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>和其它access阶段的模块一样，access_by_lua不会在subrequest中运行。<br>请注意在access_by_lua内调用ngx.exit(ngx.OK)，nginx的请求处理流程将继续进行后面阶段的处理。从rewrite_by_lua终止当前的请求，要调用ngx.exit返回status大于200并小于300的成功状态或ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)的失败状态。</p>
<p>6、content_by_lua，content_by_lua_file<br>语法：content_by_lua <lua-script-str><br>语境：location，location if<br>阶段：content<br>作为”content handler”为每个请求执行lua代码，为请求者输出响应内容。</lua-script-str></p>
<p>不要将它和其它的内容处理指令在同一个location内使用如proxy_pass。</p>
<p>7、header_filter_by_lua，header_filter_by_lua_file<br>语法：header_filter_by_lua <lua-script-str><br>语境：http，server，location，location if<br>阶段：output-header-filter</lua-script-str></p>
<p>一般用来设置cookie和headers，在该阶段不能使用如下几个API：<br>1、output API(ngx.say和ngx.send_headers)<br>2、control API(ngx.exit和ngx.exec)<br>3、subrequest API(ngx.location.capture和ngx.location.capture_multi)<br>4、cosocket API(ngx.socket.tcp和ngx.req.socket)</p>
<p>有一个例子是 在你的lua header filter里添加一个响应头标头：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">    proxy_pass http://mybackend;</div><div class="line">    header_filter_by_lua <span class="string">'ngx.header.Foo = "blah"'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>8、body_filter_by_lua，body_filter_by_lua_file<br>语法：body_filter_by_lua <lua-script-str><br>语境：http，server，location，location if<br>阶段：output-body-filter<br>输入的数据时通过ngx.arg<a href="作为lua的string值">1</a>，通过ngx.arg[2]这个bool类型表示响应数据流的结尾。</lua-script-str></p>
<p>基于这个原因，’eof’只是nginx的链接缓冲区的last_buf(对主requests)或last_in_chain(对subrequests)的标记。<br>运行以下命令可以立即终止运行接下来的lua代码：<br>return ngx.ERROR<br>这会将响应体截断导致无效的响应。lua代码可以通过修改ngx.arg[1]的内容将数据传输到下游的nginx output body filter阶段的其它模块中去。例如，将response body中的小写字母进行反转，我们可以这么写：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">    proxy_pass http://mybackend;</div><div class="line">    body_filter_by_lua <span class="string">'ngx.arg[1] = string.upper(ngx.arg[1])'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当将ngx.arg[1]设置为nil或者一个空的lua string时，下游的模块将不会收到数据了。</p>
<p>同样可以通过修改ngx.arg[2]来设置新的”eof“标记，例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">location /t &#123;</div><div class="line">    <span class="built_in">echo</span> hello world;</div><div class="line">    <span class="built_in">echo</span> hiya globe;</div><div class="line">    body_filter_by_lua <span class="string">'</span></div><div class="line">        local chunk = ngx.arg[1]</div><div class="line">        if string.match(chunk, "hello") then</div><div class="line">            ngx.arg[2] = true --new eof</div><div class="line">            return</div><div class="line">        end</div><div class="line">        --just throw away any remaining chunk data</div><div class="line">        ngx.arg[1] = nil</div><div class="line">    '</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>那么GET /t的请求只会回复：hello world</p>
<p>这是因为，当body filter看到了一块包含”hello“的字符块后立即将”eof“标记设置为了true，从而导致响应被截断了但仍然是有效的回复。<br>当lua代码中改变了响应体的长度时，应该要清除content-length响应头部的值，例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">location /foo &#123;</div><div class="line">    header_filter_by_lua <span class="string">'ngx.header.content_length = nil'</span></div><div class="line">    body_filter_by_lua <span class="string">'ngx.arg[1] = string.len(ngx.arg[1]) .. "\\n"'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在该阶段不能使用如下几个API：<br>1、output API(ngx.say和ngx.send_headers)<br>2、control API(ngx.exit和ngx.exec)<br>3、subrequest API(ngx.location.capture和ngx.location.capture_multi)<br>4、cosocket API(ngx.socket.tcp和ngx.req.socket)<br>nginx output filters可能会在一次请求中被多次调用，因为响应体可能是以chunks方式传输的。因此这个指令一般会在一次请求中被调用多次。</p>
<p>9、log_by_lua，log_by_lua_file<br>语法：log_by_lua <lua-script-str><br>语境：http，server，location，location if<br>阶段：log<br>在log阶段调用指定的lua脚本，并不会替换access log，而是在那之后进行调用。</lua-script-str></p>
<p>在该阶段不能使用如下几个API：<br>1、output API(ngx.say和ngx.send_headers)<br>2、control API(ngx.exit和ngx.exec)<br>3、subrequest API(ngx.location.capture和ngx.location.capture_multi)<br>4、cosocket API(ngx.socket.tcp和ngx.req.socket)</p>
<p>一个收集upstream_response_time的平均数据的例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">lua_shared_dict log_dict 5M</div><div class="line"></div><div class="line">server&#123;</div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http;//mybackend</div><div class="line">        log_by_lua <span class="string">'</span></div><div class="line">            local log_dict = ngx.shared.log_dict</div><div class="line">            local upstream_time = tonumber(ngx.var.upstream_response_time)</div><div class="line">            local sum = log_dict:get("upstream_time-sum") or 0</div><div class="line">            sum = sum + upstream_time</div><div class="line">            log_dict:set("upsteam_time-sum", sum)</div><div class="line">            local newval, err = log_dict:incr("upstream_time-nb", 1)</div><div class="line">            if not newval and err == "not found" then</div><div class="line">                log_dict:add("upstream_time-nb", 0)</div><div class="line">                log_dict:incr("upstream_time-nb", 1)</div><div class="line">            end</div><div class="line">        '</div><div class="line">    &#125;</div><div class="line">    location = /status &#123;</div><div class="line">        content_by_lua <span class="string">'</span></div><div class="line">            local log_dict = ngx.shared.log_dict</div><div class="line">            local sum = log_dict:get("upstream_time-sum")</div><div class="line">            local nb = log_dict:get("upstream_time-nb")</div><div class="line"></div><div class="line">            if nb and sum then</div><div class="line">                ngx.say("average upstream response time:  ", sum/nb, " (", nb, " reqs)")</div><div class="line">            else</div><div class="line">                ngx.say("no data yet")</div><div class="line">            end</div><div class="line">        '</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux安装CLI的字典sdcv]]></title>
      <url>http://www.hi-linux.com/posts/7215.html</url>
      <content type="html"><![CDATA[<p>sdcv全称为stardict console version，是终端下的词典。</p>
<h3 id="安装sdcv"><a href="#安装sdcv" class="headerlink" title="安装sdcv"></a>安装sdcv</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#CentOS, RHEL, Fedora (need EPEL repo)</span></div><div class="line"><span class="comment">#yum install sdcv</span></div><div class="line"><span class="comment">#sudo apt-get install sdcv</span></div></pre></td></tr></table></figure>
<h3 id="安装字典"><a href="#安装字典" class="headerlink" title="安装字典"></a>安装字典</h3><h4 id="下载字典"><a href="#下载字典" class="headerlink" title="下载字典"></a>下载字典</h4><p>简体中文: <a href="http://download.huzheng.org/zh_CN/" target="_blank" rel="external">http://download.huzheng.org/zh_CN/</a><br>繁体中文: <a href="http://download.huzheng.org/zh_TW/" target="_blank" rel="external">http://download.huzheng.org/zh_TW/</a><br><a id="more"></a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#cd /tmp #</span></div><div class="line"><span class="comment">#朗道英汉字典</span></div><div class="line"><span class="comment">#wget http://download.huzheng.org/zh_CN/stardict-langdao-ec-gb-2.4.2.tar.bz2</span></div><div class="line"><span class="comment">#朗道汉英字典</span></div><div class="line"><span class="comment">#wget http://download.huzheng.org/zh_CN/stardict-langdao-ce-gb-2.4.2.tar.bz2</span></div></pre></td></tr></table></figure>
<h4 id="安装字典-1"><a href="#安装字典-1" class="headerlink" title="安装字典"></a>安装字典</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir -p ~/.stardict/dic</div><div class="line"><span class="built_in">cd</span> ~/.stardict/dic</div><div class="line">tar xvf /tmp/stardict-langdao-ec-gb-2.4.2.tar.bz2</div><div class="line">tar xvf /tmp/stardict-langdao-ce-gb-2.4.2.tar.bz2</div></pre></td></tr></table></figure>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="查看字典字库数量"><a href="#查看字典字库数量" class="headerlink" title="查看字典字库数量"></a>查看字典字库数量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># sdcv -l</span></div><div class="line">Dictionary<span class="string">'s name   Word count</span></div><div class="line">朗道汉英字典5.0    405719</div><div class="line">朗道英汉字典5.0    435468</div></pre></td></tr></table></figure>
<h4 id="单字查询-只查一个单字-。"><a href="#单字查询-只查一个单字-。" class="headerlink" title="单字查询(只查一个单字)。"></a>单字查询(只查一个单字)。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#sdcv hello</span></div><div class="line">发现 1 条记录和 hello 相似。</div><div class="line">--&gt;朗道英汉字典5.0</div><div class="line">--&gt;hello</div><div class="line"></div><div class="line">*[hә<span class="string">'lәu]</span></div><div class="line">interj. 喂, 嘿</div></pre></td></tr></table></figure>
<h4 id="多重查询-进入无限查询状态-，使用-Ctrl-C-或-D-离开"><a href="#多重查询-进入无限查询状态-，使用-Ctrl-C-或-D-离开" class="headerlink" title="多重查询 (进入无限查询状态)，使用 Ctrl + C 或 D 离开"></a>多重查询 (进入无限查询状态)，使用 Ctrl + C 或 D 离开</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#sdcv</span></div><div class="line">请输入单词或短语：企鹅</div><div class="line">发现 1 条记录和 企鹅 相似。</div><div class="line">--&gt;朗道汉英字典5.0</div><div class="line">--&gt;企鹅</div><div class="line"></div><div class="line">penguin</div><div class="line"></div><div class="line">请输入单词或短语：hello</div><div class="line">发现 1 条记录和 hello 相似。</div><div class="line">--&gt;朗道英汉字典5.0</div><div class="line">--&gt;hello</div><div class="line"></div><div class="line">*[hә<span class="string">'lәu]</span></div><div class="line">interj. 喂, 嘿</div><div class="line"></div><div class="line">请输入单词或短语：红色气球</div><div class="line">发现 10 条记录和 红色气球 相似。</div><div class="line">0)朗道汉英字典5.0--&gt;变色细球菌</div><div class="line">1)朗道汉英字典5.0--&gt;堇色细球菌</div><div class="line">2)朗道汉英字典5.0--&gt;探空气球</div><div class="line">3)朗道汉英字典5.0--&gt;气球</div><div class="line">4)朗道汉英字典5.0--&gt;测风气球</div><div class="line">5)朗道汉英字典5.0--&gt;灰色细球菌</div><div class="line">6)朗道汉英字典5.0--&gt;灰色链球菌</div><div class="line">7)朗道汉英字典5.0--&gt;白色小球菌</div><div class="line">8)朗道汉英字典5.0--&gt;白色细球菌</div><div class="line">9)朗道汉英字典5.0--&gt;白色链球菌</div><div class="line">Your choice[-1 to abort]: 3</div><div class="line">--&gt;朗道汉英字典5.0</div><div class="line">--&gt;气球</div><div class="line"></div><div class="line">air balloon; balloon</div><div class="line">【医】 balloon</div><div class="line">相关词组:</div><div class="line">  测风气球</div><div class="line">  探空气球</div><div class="line">  系留气球</div><div class="line"></div><div class="line">请输入单词或短语：</div></pre></td></tr></table></figure>
<h3 id="观看历史查询记录"><a href="#观看历史查询记录" class="headerlink" title="观看历史查询记录"></a>观看历史查询记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#cat $HOME/.sdcv_history|tail</span></div><div class="line">clear</div><div class="line">clean</div><div class="line">hello</div><div class="line">hello</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://blog.longwin.com.tw/2015/11/linux-install-cli-dictionary-sdcv-2015/" target="_blank" rel="external">https://blog.longwin.com.tw/2015/11/linux-install-cli-dictionary-sdcv-2015/</a><br><a href="https://chusiang.gitbooks.io/working-on-gnu-linux/content/15.sdcv.html" target="_blank" rel="external">https://chusiang.gitbooks.io/working-on-gnu-linux/content/15.sdcv.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用mysqladmin ext了解MySQL运行状态]]></title>
      <url>http://www.hi-linux.com/posts/50039.html</url>
      <content type="html"><![CDATA[<p>mysqladmin是MySQL一个重要的客户端，最常见的是使用它来关闭数据库，除此，该命令还可以了解MySQL运行状态、进程信息、进程杀死等。本文介绍一下如何使用mysqladmin extended-status(因为没有”歧义”，所以可以使用ext代替)了解MySQL的运行状态。</p>
<h4 id="1-使用-r-i参数"><a href="#1-使用-r-i参数" class="headerlink" title="1.使用-r/-i参数"></a>1.使用-r/-i参数</h4><p>使用mysqladmin extended-status命令可以获得所有MySQL性能指标，即show global status的输出，不过，因为多数这些指标都是累计值，如果想了解当前的状态，则需要进行一次差值计算，这就是mysqladmin extended-status的一个额外功能，非常实用。默认的，使用extended-status，看到也是累计值，但是，加上参数-r(–relative)，就可以看到各个指标的差值，配合参数-i(–sleep)就可以指定刷新的频率，那么就有如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mysqladmin -uroot -r -i 1 -pxxx extended-status</div><div class="line">+------------------------------------------+----------------------+</div><div class="line">| Variable_name                            | Value                |</div><div class="line">+------------------------------------------+----------------------+</div><div class="line">| Aborted_clients                          | 0                    |</div><div class="line">| Com_select                               | 336                  |</div><div class="line">| Com_insert                               | 243                  |</div><div class="line">......</div><div class="line">| Threads_created                          | 0                    |</div><div class="line">+------------------------------------------+----------------------+</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h4 id="2-配合grep使用"><a href="#2-配合grep使用" class="headerlink" title="2.配合grep使用"></a>2.配合grep使用</h4><p>配合grep使用，我们就有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">mysqladmin -uroot -r -i 1 -pxxx extended-status \</div><div class="line">|grep &quot;Questions\|Queries\|Innodb_rows\|Com_select \|Com_insert \|Com_update \|Com_delete &quot;</div><div class="line">| Com_delete                               | 1                    |</div><div class="line">| Com_delete_multi                         | 0                    |</div><div class="line">| Com_insert                               | 321                  |</div><div class="line">| Com_select                               | 286                  |</div><div class="line">| Com_update                               | 63                   |</div><div class="line">| Innodb_rows_deleted                      | 1                    |</div><div class="line">| Innodb_rows_inserted                     | 207                  |</div><div class="line">| Innodb_rows_read                         | 5211                 |</div><div class="line">| Innodb_rows_updated                      | 65                   |</div><div class="line">| Queries                                  | 2721                 |</div><div class="line">| Questions                                | 2721                 |</div></pre></td></tr></table></figure>
<h4 id="3-配合简单的awk使用"><a href="#3-配合简单的awk使用" class="headerlink" title="3.配合简单的awk使用"></a>3.配合简单的awk使用</h4><p>使用awk，同时输出时间信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">mysqladmin -uroot -p -h127.0.0.1 -P3306 -r -i 1 ext |\</div><div class="line">awk -F&quot;|&quot; &apos;&#123;\</div><div class="line">  if($2 ~ /Variable_name/)&#123;\</div><div class="line">    print &quot; &lt;-------------    &quot;  strftime(&quot;%H:%M:%S&quot;) &quot;    -------------&gt;&quot;;\</div><div class="line">  &#125;\</div><div class="line">  if($2 ~ /Questions|Queries|Innodb_rows|Com_select |Com_insert |Com_update |Com_delete |Innodb_buffer_pool_read_requests/)\</div><div class="line">    print $2 $3;\</div><div class="line">&#125;&apos;</div><div class="line">&lt;-------------    12:38:49    -------------&gt;</div><div class="line"> Com_delete                             0</div><div class="line"> Com_insert                             0</div><div class="line"> Com_select                             0</div><div class="line"> Com_update                             0</div><div class="line"> Innodb_buffer_pool_read_requests       589</div><div class="line"> Innodb_rows_deleted                    0</div><div class="line"> Innodb_rows_inserted                   2</div><div class="line"> Innodb_rows_read                       50</div><div class="line"> Innodb_rows_updated                    50</div><div class="line"> Queries                                105</div><div class="line"> Questions                              1</div><div class="line"> &lt;-------------    12:38:50    -------------&gt;</div><div class="line"> Com_delete                             0</div><div class="line"> Com_insert                             0</div><div class="line"> Com_select                             0</div><div class="line"> Com_update                             0</div><div class="line"> Innodb_buffer_pool_read_requests       1814</div><div class="line"> Innodb_rows_deleted                    0</div><div class="line"> Innodb_rows_inserted                   0</div><div class="line"> Innodb_rows_read                       8</div><div class="line"> Innodb_rows_updated                    8</div><div class="line"> Queries                                17</div><div class="line"> Questions                              1</div></pre></td></tr></table></figure>
<h4 id="4-配合复杂一点的awk"><a href="#4-配合复杂一点的awk" class="headerlink" title="4.配合复杂一点的awk"></a>4.配合复杂一点的awk</h4><p>反正也不简单了，那就更复杂一点，这样让输出结果更友好点，因为awk不支持动态变量，所以代码看起来比较复杂：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">mysqladmin -P3306 -uroot -p -h127.0.0.1 -r -i 1 ext |\</div><div class="line">awk -F&quot;|&quot; \</div><div class="line">&quot;BEGIN&#123; count=0; &#125;&quot;\</div><div class="line">&apos;&#123; if($2 ~ /Variable_name/ &amp;&amp; ++count == 1)&#123;\</div><div class="line">    print &quot;----------|---------|--- MySQL Command Status --|----- Innodb row operation ----|-- Buffer Pool Read --&quot;;\</div><div class="line">    print &quot;---Time---|---QPS---|select insert update delete|  read inserted updated deleted|   logical    physical&quot;;\</div><div class="line">&#125;\</div><div class="line">else if ($2 ~ /Queries/)&#123;queries=$3;&#125;\</div><div class="line">else if ($2 ~ /Com_select /)&#123;com_select=$3;&#125;\</div><div class="line">else if ($2 ~ /Com_insert /)&#123;com_insert=$3;&#125;\</div><div class="line">else if ($2 ~ /Com_update /)&#123;com_update=$3;&#125;\</div><div class="line">else if ($2 ~ /Com_delete /)&#123;com_delete=$3;&#125;\</div><div class="line">else if ($2 ~ /Innodb_rows_read/)&#123;innodb_rows_read=$3;&#125;\</div><div class="line">else if ($2 ~ /Innodb_rows_deleted/)&#123;innodb_rows_deleted=$3;&#125;\</div><div class="line">else if ($2 ~ /Innodb_rows_inserted/)&#123;innodb_rows_inserted=$3;&#125;\</div><div class="line">else if ($2 ~ /Innodb_rows_updated/)&#123;innodb_rows_updated=$3;&#125;\</div><div class="line">else if ($2 ~ /Innodb_buffer_pool_read_requests/)&#123;innodb_lor=$3;&#125;\</div><div class="line">else if ($2 ~ /Innodb_buffer_pool_reads/)&#123;innodb_phr=$3;&#125;\</div><div class="line">else if ($2 ~ /Uptime / &amp;&amp; count &gt;= 2)&#123;\</div><div class="line">  printf(&quot; %s |%9d&quot;,strftime(&quot;%H:%M:%S&quot;),queries);\</div><div class="line">  printf(&quot;|%6d %6d %6d %6d&quot;,com_select,com_insert,com_update,com_delete);\</div><div class="line">  printf(&quot;|%6d %8d %7d %7d&quot;,innodb_rows_read,innodb_rows_inserted,innodb_rows_updated,innodb_rows_deleted);\</div><div class="line">  printf(&quot;|%10d %11d\n&quot;,innodb_lor,innodb_phr);\</div><div class="line">&#125;&#125;&apos;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">----------|---------|--- MySQL Command Status --|----- Innodb row operation ----|-- Buffer Pool Read --</div><div class="line">---Time---|---QPS---|select insert update delete|  read inserted updated deleted|   logical    physical</div><div class="line"> 10:37:13 |     2231|   274    214     70      0|  4811      160      71       0|      4146           0</div><div class="line"> 10:37:14 |     2972|   403    256     84     23|  2509      173      85      23|      4545           0</div><div class="line"> 10:37:15 |     2334|   282    232     66      1|  1266      154      67       1|      3543           0</div><div class="line"> 10:37:15 |     2241|   271    217     66      0|  1160      129      66       0|      2935           0</div><div class="line"> 10:37:17 |     2497|   299    224     97      0|  1141      149      95       0|      3831           0</div><div class="line"> 10:37:18 |     2871|   352    304     74     23|  8202      226      73      23|      6167           0</div><div class="line"> 10:37:19 |     2441|   284    233     82      0|  1099      121      78       0|      3292           0</div><div class="line"> 10:37:20 |     2342|   279    242     61      0|  1083      224      61       0|      3366           0</div></pre></td></tr></table></figure>
<p>就这样了，这几个命令自己用的比较多，随手分享出来。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SSL认证详解]]></title>
      <url>http://www.hi-linux.com/posts/3987.html</url>
      <content type="html"><![CDATA[<h3 id="一、单向认证-SSL-协议的具体过程"><a href="#一、单向认证-SSL-协议的具体过程" class="headerlink" title="一、单向认证 SSL 协议的具体过程"></a>一、单向认证 SSL 协议的具体过程</h3><ul>
<li><p>①客户端的浏览器向服务器传送客户端 SSL 协议的版本号，加密算法的种类，产生的随机数，以及其他服务器和客户端之间通讯所需要的各种信息。</p>
</li>
<li><p>②服务器向客户端传送 SSL 协议的版本号，加密算法的种类，随机数以及其他相关信息，同时服务器还将向客户端传送自己的证书。</p>
</li>
<li><p>③客户利用服务器传过来的信息验证服务器的合法性，服务器的合法性包括：证书是否过期，发行服务器证书的 CA 是否可靠，发行者证书的公钥能否正确解开服务器证书的“发行者的数字签名”，服务器证书上的域名是否和服务器的实际域名相匹配。如果合法性验证没有通过，通讯将断开；如果合法性验证通过，将继续进行第四步。</p>
</li>
<li><p>④用户端随机产生一个用于后面通讯的“对称密码”，然后用服务器的公钥（服务器的公钥从步骤②中的服务器的证书中获得）对其加密，然后将加密后的“预主密码”传给服务器。</p>
</li>
<li><p>⑤如果服务器要求客户的身份认证（在握手过程中为可选），用户可以建立一个随机数然后对其进行数据签名，将这个含有签名的随机数和客户自己的证书以及加密过的“预主密码”一起传给服务器。<a id="more"></a></p>
</li>
<li><p>⑥如果服务器要求客户的身份认证，服务器必须检验客户证书和签名随机数的合法性，具体的合法性验证过程包括：客户的证书使用日期是否有效，为客户提供证书的CA 是否可靠，发行CA 的公钥能否正确解开客户证书的发行 CA 的数字签名，检查客户的证书是否在证书废止列表（CRL）中。检验如果没有通过，通讯立刻中断；如果验证通过，服务器将用自己的私钥解开加密的“预主密码 ”，然后执行一系列步骤来产生主通讯密码（客户端也将通过同样的方法产生相同的主通讯密码）。</p>
</li>
<li><p>⑦服务器和客户端用相同的主密码即“通话密码”，一个对称密钥用于 SSL 协议的安全数据通讯的加解密通讯。同时在 SSL 通讯过程中还要完成数据通讯的完整性，防止数据通讯中的任何变化。</p>
</li>
<li><p>⑧客户端向服务器端发出信息，指明后面的数据通讯将使用的步骤⑦中的主密码为对称密钥，同时通知服务器客户端的握手过程结束。</p>
</li>
<li><p>⑨服务器向客户端发出信息，指明后面的数据通讯将使用的步骤⑦中的主密码为对称密钥，同时通知客户端服务器端的握手过程结束。</p>
</li>
<li><p>⑩SSL 的握手部分结束，SSL 安全通道的数据通讯开始，客户和服务器开始使用相同的对称密钥进行数据通讯，同时进行通讯完整性的检验。</p>
</li>
</ul>
<h3 id="二、双向认证-SSL-协议的具体过程"><a href="#二、双向认证-SSL-协议的具体过程" class="headerlink" title="二、双向认证 SSL 协议的具体过程"></a>二、双向认证 SSL 协议的具体过程</h3><ul>
<li><p>① 浏览器发送一个连接请求给安全服务器。</p>
</li>
<li><p>② 服务器将自己的证书，以及同证书相关的信息发送给客户浏览器。</p>
</li>
<li><p>③ 客户浏览器检查服务器送过来的证书是否是由自己信赖的 CA 中心所签发的。如果是，就继续执行协议；如果不是，客户浏览器就给客户一个警告消息：警告客户这个证书不是可以信赖的，询问客户是否需要继续。</p>
</li>
<li><p>④ 接着客户浏览器比较证书里的消息，例如域名和公钥，与服务器刚刚发送的相关消息是否一致，如果是一致的，客户浏览器认可这个服务器的合法身份。</p>
</li>
<li><p>⑤ 服务器要求客户发送客户自己的证书。收到后，服务器验证客户的证书，如果没有通过验证，拒绝连接；如果通过验证，服务器获得用户的公钥。</p>
</li>
<li><p>⑥ 客户浏览器告诉服务器自己所能够支持的通讯对称密码方案。</p>
</li>
<li><p>⑦ 服务器从客户发送过来的密码方案中，选择一种加密程度最高的密码方案，用客户的公钥加过密后通知浏览器。</p>
</li>
<li><p>⑧ 浏览器针对这个密码方案，选择一个通话密钥，接着用服务器的公钥加过密后发送给服务器。</p>
</li>
<li><p>⑨ 服务器接收到浏览器送过来的消息，用自己的私钥解密，获得通话密钥。</p>
</li>
<li><p>⑩ 服务器、浏览器接下来的通讯都是用对称密码方案，对称密钥是加过密的。</p>
</li>
</ul>
<h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>　　上面所述的是双向认证SSL协议的具体通讯过程，这种情况要求服务器和用户双方都有证书。单向认证SSL协议不需要客户拥有CA证书，具体的过程相对于上面的步骤，只需将服务器端验证客户证书的过程去掉，以及在协商对称密码方案，对称通话密钥时，服务器发送给客户的是没有加过密的(这并不影响SSL过程的安全性)密码方案。这样，双方具体的通讯内容，就是加过密的数据，如果有第三方攻击，获得的只是加密的数据，第三方要获得有用的信息，就需要对加密的数据进行解密，这时候的安全就依赖于密码方案的安全。而幸运的是，目前所用的密码方案，只要通讯密钥长度足够的长，就足够的安全。这也是我们强调要求使用 128位加密通讯的原因。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Markdown语法速查表]]></title>
      <url>http://www.hi-linux.com/posts/43418.html</url>
      <content type="html"><![CDATA[<h1 id="Markdown-语法速查表"><a href="#Markdown-语法速查表" class="headerlink" title="Markdown 语法速查表"></a>Markdown 语法速查表</h1><h2 id="基本符号"><a href="#基本符号" class="headerlink" title="基本符号"></a>基本符号</h2><blockquote>
<p>*,-,+ 3个符号效果都一样，这3个符号被称为 Markdown符号<br>空白行表示另起一个段落<br>`是表示inline代码，tab是用来标记 代码段，分别对应html的code，pre标签</p>
</blockquote>
<h2 id="标题与文字格式"><a href="#标题与文字格式" class="headerlink" title="标题与文字格式"></a>标题与文字格式</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><blockquote>
<p>生成h1–h6,在文字前面加上 1–6个# 来实现</p>
</blockquote>
<pre><code># 这是 H1 &lt;一级标题&gt;
## 这是 H2 &lt;二级标题&gt;
###### 这是 H6 &lt;六级标题&gt;
</code></pre><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><pre><code>单一段落( &lt;p&gt;) 用一个空白行
连续两个空格 会变成一个 &lt;br&gt;
连续3个符号，然后是空行，表示 hr横线
</code></pre><h3 id="文字格式"><a href="#文字格式" class="headerlink" title="文字格式"></a>文字格式</h3><a id="more"></a>
<blockquote>
<p>粗体和斜体：用星号<code>*</code>或者下划线<code>_</code></p>
</blockquote>
<pre><code>**这是文字粗体格式**
*这是文字斜体格式*
***这是文字粗斜体格式***
~~在文字上添加删除线~~
</code></pre><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><blockquote>
<p>这个是markdown文件的主要表示方式，主题要点化<br>使用*,+,-加上一个空格来表示<br>可以支持嵌套<br>有序列表用 数字+英文点+空格来表示<br>列表内容很长，不需要手工输入换行符，css控制段落的宽度，会自动的缩放的</p>
</blockquote>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><blockquote>
<p>无序列表使用*、+或-后面加上空格来表示。</p>
</blockquote>
<pre><code>* 项目1
* 项目2
* 项目3
</code></pre><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><blockquote>
<p>有序列表使用数字加英文句号加空格表示。</p>
</blockquote>
<pre><code>1. 项目1
2. 项目2
3. 项目3
   * 项目1
   * 项目2
</code></pre><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>图片的使用方法基本上和链接类似，只是在中括号前加叹号。</p>
<blockquote>
<p>一行表示: <figure class="highlight plain"><figcaption><span>"可选的title")```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; 引用表示法: ```![alt_text][id],预先定义 [id]:url &quot;可选title&quot;</div></pre></td></tr></table></figure></p>
<p>直接使用<img>标签，这样可以指定图片的大小尺寸<br><strong><em>注：Markdown不能设置图片大小，如果必须设置则应使用HTML标记<img></em></strong><br>HTML示例：<code>&lt;img src=&quot;/assets/images/jian.jpg&quot; alt=&quot;替代文本&quot; title=&quot;标题文本&quot; width=&quot;620&quot; height=&quot;520&quot; /&gt;</code></p>
</blockquote>
<p><code>![图片名称](http://gitcafe.com/image.png)</code></p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><blockquote>
<p>直接写 <a href="url" title="可选的title">锚文本</a><br>引用 先定义 [ref_name]:url，然后在需要写入url的地方， 这样使用[锚文本][ref_name]，通常的ref_name一般用数字表示，这样显得专业<br>简写url：用尖括号包裹url<br>这样生成的url锚文本就是url本身</p>
</blockquote>
<p>格式</p>
<p><code>[链接名称](http://gitcafe.com)</code></p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote>
<p>在第一行加上 “&gt;”和一个空格，表示代码引用，还可以嵌套</p>
<p>第一行引用文字<br>第二行引用文字</p>
</blockquote>
<h3 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h3><blockquote>
<p>使用三个以上的”*”或”-”来表示。这些星号跟减号之间可以用空格，如果减号没有空格，那它必须在单独的一个段落里，要不它会被识别为标题的</p>
</blockquote>
<pre><code>***
</code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><blockquote>
<p>行内代码使用反斜杠`表示。<br>代码段落则是在每行文字前加4个空格或者1个缩进符表示。</p>
</blockquote>
<pre><code>`&lt;hello world&gt;`
</code></pre><h4 id="代码与高亮"><a href="#代码与高亮" class="headerlink" title="代码与高亮"></a>代码与高亮</h4><h5 id="嵌入代码块"><a href="#嵌入代码块" class="headerlink" title="嵌入代码块"></a>嵌入代码块</h5><blockquote>
<p>以3个反引号为开始与结束:</p>
</blockquote>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import this</div><div class="line">print &apos;something&apos;</div></pre></td></tr></table></figure>
</code></pre><blockquote>
<p> 反引号键一般在键盘按键1左侧，需要在英文状态下输入。</p>
</blockquote>
<h5 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h5><blockquote>
<p>如果声明代码语言的，会进行代码高亮的处理。</p>
</blockquote>
<pre><code><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span></span></div><div class="line"><span class="keyword">return</span> a + b</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</code></pre><blockquote>
<p>如果语言后面多一个:n，则会显示代码的行号。</p>
</blockquote>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def add(a, b)</div><div class="line">return a + b</div><div class="line">end</div></pre></td></tr></table></figure>
</code></pre><blockquote>
<p> 代码的高亮的具体样式是由CSS控制的，由Pygments生成。你可以访问Pygments Styles查看常见的几种风格。</p>
</blockquote>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">First Header | Second Header | Third Header</div><div class="line">------------ | ------------- | ------------</div><div class="line">Content Cell | Content Cell  | Content Cell</div><div class="line">Content Cell | Content Cell  | Content Cell</div></pre></td></tr></table></figure>
<h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><pre><code>This is emphatically [^1]
Something else [^key2].
EOF

[^1]: emphatically: 坚决地，着重地，强调地（~ deny 坚决否定）
[^key2]: key2的注释
</code></pre><h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><blockquote>
<p>用\来转义，表示文本中的markdown符号<br>可以在文本种直接使用html标签，但是要注意在使用的时候，前后加上空行<br>文本前后各加一个符号，表示斜体</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Markdown语法说明]]></title>
      <url>http://www.hi-linux.com/posts/9925.html</url>
      <content type="html"><![CDATA[<h1 id="Markdown语法说明"><a href="#Markdown语法说明" class="headerlink" title="Markdown语法说明"></a>Markdown语法说明</h1><h2 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h2><p>Markdown 的目标是实现「易读易写」。</p>
<p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最大灵感来源其实是纯文本电子邮件的格式。</p>
<p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像<em>强调</em>。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p>
<h2 id="兼容-HTML"><a href="#兼容-HTML" class="headerlink" title="兼容 HTML"></a>兼容 HTML</h2><p>Markdown 语法的目标是：成为一种适用于网络的书写语言。</p>
<p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p>
<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p>
<p>要制约的只有一些 HTML 区块元素――比如<code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、 <code>&lt;pre&gt;</code>、 <code>&lt;p&gt;</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown的生成器有足够智能，不会在 HTML 区块标签外加上不必要的<code>&lt;p&gt;</code>标签。</p>
<a id="more"></a>
<p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p>
<pre><code>这是一个普通段落。

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;Foo&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

这是另一个普通段落。
</code></pre><p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。</p>
<p>HTML 的区段（行内）标签如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p>
<p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p>
<p>特殊字符自动转换</p>
<p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code>符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 <code>&amp;lt;</code> 和 <code>&amp;amp;</code>。</p>
<p><code>&amp;</code> 字符尤其让网络文档编写者受折磨，如果你要打「<code>AT&amp;T</code>」 ，你必须要写成「<code>AT&amp;amp;T</code>」。而网址中的 <code>&amp;</code> 字符也要转换。比如你要链接到：</p>
<p><code>http://images.google.com/images?num=30&amp;q=larry+bird</code></p>
<p>你必须要把网址转换写为：</p>
<p><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird</code></p>
<p>才能放到链接标签的 href 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p>
<p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 &amp; 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 &amp;。</p>
<p>所以你如果要在文档中插入一个版权符号 <code>©</code>，你可以这样写：</p>
<p><code>&amp;copy;</code></p>
<p>Markdown 会保留它不动。而若你写：</p>
<p><code>AT&amp;T</code></p>
<p>Markdown 就会将它转为：</p>
<p><code>AT&amp;amp;T</code></p>
<p>类似的状况也会发生在 &lt; 符号上，因为 Markdown 允许 兼容 HTML ，如果你是把 &lt; 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：</p>
<p><code>4 &lt; 5</code></p>
<p>Markdown 将会把它转换为：</p>
<p><code>4 &amp;lt; 5</code></p>
<p>不过需要注意的是，code 范围内，不论是行内还是区块， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都一定会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p>
<h2 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h2><h3 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p>
<p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成<code>&lt;br /&gt;</code>标签。</p>
<p>如果你确实想要依赖 Markdown 来插入 <code>&lt;br /&gt;</code> 标签的话，在插入处先按入两个以上的空格然后回车。</p>
<p>的确，需要多费点事（多加空格）来产生 <code>&lt;br /&gt;</code> ，但是简单地「每个换行都转换为 <br>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 区块引用 和多段落的 列表 在使用换行来排版的时候，不但更好用，还更方便阅读。</p>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。</p>
<p>类 Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），例如：</p>
<pre><code>This is an H1
=============

This is an H2
-------------
</code></pre><p>任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p>
<p>类 Atx 形式则是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，例如：</p>
<pre><code># 这是 H1

## 这是 H2

###### 这是 H6
</code></pre><p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p>
<pre><code># 这是 H1 #

## 这是 H2 ##

### 这是 H3 ######
</code></pre><h3 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用 <code>&gt;</code> 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 <code>&gt;</code> ：</p>
<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&gt; 
&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
&gt; id sem consectetuer libero luctus adipiscing.
</code></pre><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 <code>&gt;</code> ：</p>
<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
</code></pre><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 <code>&gt;</code> ：</p>
<pre><code>&gt; This is the first level of quoting.
&gt;
&gt; &gt; This is nested blockquote.
&gt;
&gt; Back to the first level.
</code></pre><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>
<pre><code>&gt; ## 这是一个标题。
&gt; 
&gt; 1.   这是第一行列表项。
&gt; 2.   这是第二行列表项。
&gt; 
&gt; 给出一些例子代码：
&gt; 
&gt; return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre><p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。</p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持有序列表和无序列表。</p>
<p>无序列表使用星号、加号或是减号作为列表标记：</p>
<pre><code>*   Red
*   Green
*   Blue
</code></pre><p>等同于：</p>
<pre><code>+   Red
+   Green
+   Blue
</code></pre><p>也等同于：</p>
<pre><code>-   Red
-   Green
-   Blue
</code></pre><p>有序列表则使用数字接着一个英文句点：</p>
<pre><code>1.  Bird
2.  McHale
3.  Parish
</code></pre><p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p>
<pre><code>&lt;ol&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;McHale&lt;/li&gt;
&lt;li&gt;Parish&lt;/li&gt;
&lt;/ol&gt;
</code></pre><p>如果你的列表标记写成：</p>
<pre><code>1.  Bird
1.  McHale
1.  Parish
</code></pre><p>或甚至是：</p>
<pre><code>3. Bird
1. McHale
8. Parish
</code></pre><p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p>
<p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p>
<p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p>
<p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p>
<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre><p>但是如果你懒，那也行：</p>
<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre><p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 </p><p> 标签包起来，举例来说：</p>
<pre><code>*   Bird
*   Magic
</code></pre><p>会被转换为：</p>
<pre><code>&lt;ul&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;Magic&lt;/li&gt;
&lt;/ul&gt;
</code></pre><p>但是这个：</p>
<pre><code>*   Bird

*   Magic
</code></pre><p>会被转换为：</p>
<pre><code>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p>
<pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit. Aliquam hendrerit
mi posuere lectus.

Vestibulum enim wisi, viverra nec, fringilla in, laoreet
vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p>
<pre><code>*   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You&apos;re
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another item in the same list.
</code></pre><p>如果要在列表项目内放进引用，那 &gt; 就需要缩进：</p>
<pre><code>*   A list item with a blockquote:

    &gt; This is a blockquote
    &gt; inside a list item.
</code></pre><p>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：</p>
<pre><code>*   一列表项包含一个列表区块：

    &lt;代码写在这&gt;
</code></pre><p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p>
<pre><code>1986. What a great season.
</code></pre><p>换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。</p>
<pre><code>1986\. What a great season.
</code></pre><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来。</p>
<p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p>
<pre><code>这是一个普通段落：

    这是一个代码区块。
</code></pre><p>Markdown 会转换成：</p>
<pre><code>&lt;p&gt;这是一个普通段落：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是一个代码区块。
&lt;/code&gt;&lt;/pre&gt;
</code></pre><p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p>
<pre><code>Here is an example of AppleScript:

    tell application &quot;Foo&quot;
        beep
    end tell
</code></pre><p>会被转换为：</p>
<pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot;
  beep
end tell
&lt;/code&gt;&lt;/pre&gt;
</code></pre><p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p>
<p>在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</p>
<pre><code>&lt;div class=&quot;footer&quot;&gt;
    &amp;copy; 2004 Foo Corporation
&lt;/div&gt;
</code></pre><p>会被转换为：</p>
<pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt;
  &amp;amp;copy; 2004 Foo Corporation
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</code></pre><p>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p>
<h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>
<pre><code>* * *

***

*****

- - -

---------------------------------------
</code></pre><h2 id="区段元素"><a href="#区段元素" class="headerlink" title="区段元素"></a>区段元素</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。</p>
<p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p>
<p>要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p>
<pre><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.

[This link](http://example.net/) has no title attribute.
</code></pre><p>会产生：</p>
<pre><code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;
an example&lt;/a&gt; inline link.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no
title attribute.&lt;/p&gt;
</code></pre><p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p>
<pre><code>See my [About](/about/) page for details.
</code></pre><p>参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p>
<pre><code>This is [an example][id] reference-style link.
</code></pre><p>你也可以选择性地在两个方括号中间加上一个空格：</p>
<pre><code>This is [an example] [id] reference-style link.
</code></pre><p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p>
<pre><code>[id]: http://example.com/  &quot;Optional Title Here&quot;
</code></pre><p>链接内容定义的形式为：</p>
<ul>
<li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li>
<li>接着一个冒号</li>
<li>接着一个以上的空格或制表符</li>
<li>接着链接的网址</li>
<li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着<br>下面这三种链接的定义都是相同：</li>
</ul>
<pre><code>[foo]: http://example.com/  &quot;Optional Title Here&quot;
[foo]: http://example.com/  &apos;Optional Title Here&apos;
[foo]: http://example.com/  (Optional Title Here)
</code></pre><p>请注意：有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p>
<p>链接网址也可以用方括号包起来：</p>
<pre><code>[id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;
</code></pre><p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p>
<pre><code>[id]: http://example.com/longish/path/to/resource/here
&quot;Optional Title Here&quot;
</code></pre><p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p>
<p>链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，因此下面两个链接是一样的：</p>
<pre><code>[link text][a]
[link text][A]
</code></pre><p>隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：</p>
<pre><code>[Google][]
</code></pre><p>然后定义链接内容：</p>
<pre><code>[Google]: http://google.com/
</code></pre><p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p>
<pre><code>Visit [Daring Fireball][] for more information.
</code></pre><p>然后接着定义链接：</p>
<pre><code>[Daring Fireball]: http://daringfireball.net/
</code></pre><p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p>
<p>下面是一个参考式链接的范例：</p>
<pre><code>I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        &quot;Google&quot;
  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;
  [3]: http://search.msn.com/    &quot;MSN Search&quot;
</code></pre><p>如果改成用链接名称的方式写：</p>
<pre><code>I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        &quot;Google&quot;
  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;
  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;
</code></pre><p>上面两种写法都会产生下面的 HTML。</p>
<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;
title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from
&lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt;
or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;
</code></pre><p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p>
<pre><code>I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)
than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or
[MSN](http://search.msn.com/ &quot;MSN Search&quot;).
</code></pre><p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</p>
<p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p>
<h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>Markdown 使用星号（<code>*</code>）和底线（<code>_</code>）作为标记强调字词的符号，被 <code>*</code> 或 <code>_</code> 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围，用两个 <code>*</code> 或 <code>_</code> 包起来的话，则会被转成 <code>&lt;strong&gt;</code>，例如：</p>
<pre><code>*single asterisks*

_single underscores_

**double asterisks**

__double underscores__
</code></pre><p>会转成：</p>
<pre><code>&lt;em&gt;single asterisks&lt;/em&gt;

&lt;em&gt;single underscores&lt;/em&gt;

&lt;strong&gt;double asterisks&lt;/strong&gt;

&lt;strong&gt;double underscores&lt;/strong&gt;
</code></pre><p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</p>
<p>强调也可以直接插在文字中间：</p>
<pre><code>un*frigging*believable
</code></pre><p>但是如果你的 <code>*</code> 和 <code>_</code> 两边都有空白的话，它们就只会被当成普通的符号。</p>
<p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p>
<pre><code>\*this text is surrounded by literal asterisks\*
</code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：</p>
<pre><code>Use the `printf()` function.
</code></pre><p>会产生：</p>
<p><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;</code></p>
<p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p>
<pre><code>``There is a literal backtick (`) here.``
</code></pre><p>这段语法会产生：</p>
<pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;
</code></pre><p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</p>
<pre><code>A single backtick in a code span: `` ` ``

A backtick-delimited string in a code span: `` `foo` ``
</code></pre><p>会产生：</p>
<pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;
</code></pre><p>在代码区段内，<code>&amp;</code> 和方括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</p>
<pre><code>Please don&apos;t use any `&lt;blink&gt;` tags.
</code></pre><p>转为：</p>
<pre><code>&lt;p&gt;Please don&apos;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
</code></pre><p>你也可以这样写：</p>
<pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.
</code></pre><p>以产生：</p>
<pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded
equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;
</code></pre><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p>
<p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</p>
<p>行内式的图片语法看起来像是：</p>
<pre><code>![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg &quot;Optional title&quot;)
</code></pre><p>详细叙述如下：</p>
<p>一个惊叹号 !<br>接着一个方括号，里面放上图片的替代文字<br>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。</p>
<p>参考式的图片语法则长得像这样：</p>
<pre><code>![Alt text][id]
</code></pre><p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</p>
<pre><code>[id]: url/to/image  &quot;Optional title attribute&quot;
</code></pre><p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <img> 标签。</p>
<hr>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>自动链接</p>
<p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p>
<pre><code>&lt;http://example.com/&gt;
</code></pre><p>Markdown 会转为：</p>
<pre><code>&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;
</code></pre><p>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</p>
<pre><code>&lt;address@example.com&gt;
</code></pre><p>Markdown 会转成：</p>
<pre><code>&lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;
&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;
&amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;
&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;
</code></pre><p>在浏览器里面，这段字串（其实是 <code>&lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt;</code>）会变成一个可以点击的「address@example.com」链接。</p>
<p>（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</p>
<h3 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h3><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <em> 标签），你可以在星号的前面加上反斜杠：</em></p>
<pre><code>\*literal asterisks\*
</code></pre><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>
<pre><code>\   反斜线
`   反引号
*   星号
_   底线
{}  花括号
[]  方括号
()  括弧
#   井字号
+   加号
-   减号
.   英文句点
!   惊叹号
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux群常见问题整理(一)]]></title>
      <url>http://www.hi-linux.com/posts/17022.html</url>
      <content type="html"><![CDATA[<p>突然的一个想法，计划开始对群里平时各位群友总结的小技巧做一个汇总，便于查询、也便于分享。先简单总结了下面几条做一个样本，我对一些知识点稍为注解了下，方便理解。希望以后提供的群友也简单注解下，便于其它人理解。以后积累多了，我会整理后以[Linux群常见问题整理]系列的形式发出来。最后给群打打广告，QQ群：19558533[Linux/Unix技术交流]。欢迎有兴趣的网友加入，加群请先回答：<a href="http://tinyurl.com/groupask" target="_blank">入群测试题</a>。呵呵！</p>
<p>Q：如何取消浮动IP？(提供人:土猪一号)<br>A：ifconfig eth0:1 0.0.0.0</p>
<p>Q：各种网络状态统计(提供人:蜗牛)<br>A：用netstat和awk实现，具体语句如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -n | awk <span class="string">'/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;'</span></div></pre></td></tr></table></figure></p>
<p>Q：减少自定义内核尺寸(提供人:蜗牛)<br>A：修改KERNELDIR下的Makefile，找到其中CFLAGS += -g这样的，前面加注释，然后编译模块即可<br><a id="more"></a><br>注解：这样做目的是去掉编译好的二进制模块文件中的调试信息，以达到减少自定义内核尺寸的目的。</p>
<p>Q：解决Apache中ETag在Web集群环境中的验证问题(提供人:蜗牛)<br>A：去掉ETAG中的inode<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Directory /usr/<span class="built_in">local</span>/httpd/htdocs&gt;</div><div class="line">    FileETag MTime Size</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure></p>
<p>注解：在多台负载平衡的服务器(WEB集群)环境下，同一个文件会有不同的ETag(INode不一样,不同的服务器生成的ETag也就不一样)或者不同的文件修改日期，这样浏览器每次都会重新下载。所以有人建议使用WEB集群时不要使用ETag(设置为’FileETag None’使响应头不再包含ETag字段)。</p>
<p>其实在WEB集群环境中要使用ETag也是可以的。解决方法很容易：只要ETag的计算没有INode参于计算生成Hash值，只让ETag后面只使用MTime和Size二个参数参于计算就好了。生成的Hash值就会很准确了。</p>
<p>关于Etag的知识点：<a href="http://www.php-oa.com/2008/08/27/etag.html" target="_blank">HTTP参数中Etag的重要性</a></p>
<p>Q：Apache里让所有pl文件支持mod_perl(提供人:蜗牛)<br>A：具体配置语句如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;IfModule mod_perl&gt;</div><div class="line">PerlModule ModPerl::Registry</div><div class="line">&lt;FilesMatch \.pl$&gt;</div><div class="line">SetHandler perl-script</div><div class="line">PerlResponseHandler ModPerl::Registry</div><div class="line">PerlOptions +ParseHeaders</div><div class="line">&lt;/FilesMatch&gt;</div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure></p>
<p>Q：apache里通过rewrite将多个域名合并为一个(提供人:蜗牛)<br>A：Rewrite的具体语句如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RewriteCond %&#123;HTTP_HOST&#125; ^(www.)?info-steel.(com|cn) [NC]</div><div class="line">RewriteRule ^(.*) http://www.shsteeljy.com<span class="variable">$1</span> [R=permanent,L]</div></pre></td></tr></table></figure></p>
<p>Q：手动释放Linux内存(提供人:蜗牛)<br>A：清除系统对内存的cache，使用root做下面几步：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#sync </span></div><div class="line"><span class="comment">#echo 3 &gt; /proc/sys/vm/drop_caches</span></div><div class="line"><span class="comment">#sync </span></div><div class="line"><span class="comment">#echo 0 &gt; /proc/sys/vm/drop_caches</span></div></pre></td></tr></table></figure></p>
<p>注解：/proc是一个虚拟文件系统，我们可以通过对它的读写操作做为与kernel实体间进行通信的一种手段。也就是说可以通过修改/proc中的文件，来对当前kernel的行为做出调整。那么我们就可以通过调整/proc/sys/vm/drop_caches来释放内存。</p>
<p>手动执行sync命令是为了确保文件系统的完整性(描述：sync命令运行sync 子例程。如果必须停止系统，则运行sync命令以确保文件系统的完整性。sync命令将所有未写的系统缓冲区写到磁盘中，包含已修改的 i-node、已延迟的块 I/O 和读写映射文件)，所以这一步必须先做。</p>
<p>有关/proc/sys/vm/drop_caches的用法如下:</p>
<p>Writing to this will cause the kernel to drop clean caches, dentries and inodes from memory, causing that memory to become free.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">To free pagecache:</div><div class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/vm/drop_caches</div><div class="line">To free dentries and inodes:</div><div class="line"><span class="built_in">echo</span> 2 &gt; /proc/sys/vm/drop_caches</div><div class="line">To free pagecache, dentries and inodes:</div><div class="line"><span class="built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches</div></pre></td></tr></table></figure></p>
<p>As this is a non-destructive operation and dirty objects are not freeable, the user should run `sync’ first.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux群常见问题整理(二)]]></title>
      <url>http://www.hi-linux.com/posts/33498.html</url>
      <content type="html"><![CDATA[<p>离上次整理的[Linux群常见问题整理(一)]有一段时间了。最近好像群里没多少这种小问题的讨论了。加上最近有不少新的群友加入，忙着整理群成员信息，准备发布[群成员信息统计(Ver1.3)]。迟迟没有总结出第二篇的常见问题整理。</p>
<p>近来有几个网友在QQ上问我一些Linux的问题，解答过程中发现有些同学的基础太差了(这种情况还真的不算少数)，连一些最基本的计算机常识都还很欠缺。是现在教育的失败？是他们对技术的更加浮燥？是他们急攻进利？还是总想找到捷径？或是其它什么？难道在国内这个IT行业技术圈里，真的是越来越浮燥！真的是一代不如一代了！不啰嗦了，入正题吧。呵呵！</p>
<p>Q：Linux系统时钟比物理时钟变快了?(提供人:土猪一号)<br>A：Linux在驱动AMD+ATI的系统会有一个 bug，使得系统时钟比物理时钟大约整整快一倍。解决这个问题，可以修改 /boot/grub/menu.lst，在kernel命令中加入noapictimer参数。 </p>
<p>如有一kernel命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kernel /boot/vmlinuz-2.6.12-10-k7 root=/dev/hda3 ro quiet splash</div></pre></td></tr></table></figure></p>
<p>将这行改为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kernel /boot/vmlinuz-2.6.12-10-k7 root=/dev/hda3 ro noapictimer quiet splash</div></pre></td></tr></table></figure></p>
<p>然后再重启即可<a id="more"></a></p>
<p>关于APIC</p>
<p>APIC全称是Advanced Programmable Interrupt Controller(高级可编程中断控制器)，对计算机来讲有两个作用：一是管理IRQ的分配，可以把传统的16个IRQ扩展到24个(传统的管理方式叫PIC)，以适应更多的设备。二是管理多CPU(支持多处理器中断管理，中断均匀的分布在所有处理器)。</p>
<p>关于APIC timer</p>
<p>The APIC timer module is an implementation of precise timers for the Linux 2.4 kernels and further. The module provides microsecond precision timers that are programmed with a TSC value.</p>
<p>It is accomplished by using the timer of the local APIC, availaible on P6 processors. </p>
<p>更多可见<a href="http://www.oberle.org/apic_timer.html" target="_blank">APIC timer Module for Linux</a></p>
<p>Q：删除文件列表文件中所有的文件(提供人:galf)<br>A：实现指令如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat file.txt | <span class="keyword">while</span> <span class="built_in">read</span> i ;<span class="keyword">do</span> rm -rf -- <span class="string">"<span class="variable">$i</span>"</span>;<span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p>注：可处理较特殊的文件</p>
<p>Q:如何提取tar包中的指定文件(提供人:Mike)</p>
<p>A:先查看一下你要的文件的名称(包含路径)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar tzvf foo.tar.gz | grep abc</div></pre></td></tr></table></figure></p>
<p>解压单个象这样解压<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar xzvf foo.tar gz path/to/abc</div></pre></td></tr></table></figure></p>
<p>解压多个象这样解压<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar xzvf foo.tar gz path/to/abc path/to/xyz</div></pre></td></tr></table></figure></p>
<p>一个实例，把a.tar中的./b.txt解析出来,注意路径。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -xf a.tar ./b.txt</div></pre></td></tr></table></figure></p>
<p>Q：Linux共享内存的查看、释放、修改(提供人:三办门)<br>A：查看共享内存，使用ipcs命令，不加任何参数时，这条命令会把共享内存/信号量/消息队列的信息都打印出来。如果只想显示共享内存信息，则使用ipcs -m。</p>
<p>要删除共享内存，需要使用ipcrm命令，使用shmid做为参数。shmid在ipcs命令中会有输出。下面的命令可以释放所有已分配的共享内存：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ipcs -m | awk <span class="string">'$2 ~ /[0-9]+/ &#123;print $2&#125;'</span> | <span class="keyword">while</span> <span class="built_in">read</span> s; <span class="keyword">do</span> sudo ipcrm -m <span class="variable">$s</span>; <span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p>修改内核共享内存大小</p>
<p>方法一：修改/etc/rc.d/rc.local文件，在文件的前面注释的后面加入以下行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> 134217728&gt;/proc/sys/kernel/shmmax;</div></pre></td></tr></table></figure></p>
<p>注：这里的值为内存的一半;如果系统内存是256M，则值为134217728;#如果系统内存是512M，则值为268435456;修改完成以后，重启机器就搞定。</p>
<p>方法二：</p>
<p>永久修改，root用户下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"kernel.shmmax=1073741824"</span>&gt;&gt;/etc/sysctl.conf</div></pre></td></tr></table></figure></p>
<p>临时修改，root用户下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sysctl -w kernel.shmmax=1073741824</div></pre></td></tr></table></figure></p>
<p>注：kernel.shmmax = 2147483648 #最大单个共享内存段大小。取物理内存大小的一半,单位为字节</p>
<p><a href="http://ud1121.blog.51cto.com/228311/198808" target="_blank">ipcs命令详解</a></p>
<p><a href="http://blog.csdn.net/lh1979/archive/2009/10/12/4660727.aspx" target="_blank">Oracle相关的Linux内核参数设置</a></p>
<p>Q：LINUX静态路由设置问题(提供人:Mike)<br>A：RedHat下静态路由设置有三种方式：</p>
<p>方法一：修改eth0.route文件(redhat下的一种新的格式)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/etc/sysconfig/network-scripts/eth0.route</div><div class="line"></div><div class="line">ADDRESS0=192.168.0.0</div><div class="line">NETMASK0=255.255.0.0</div><div class="line">GATEWAY0=10.1.1.254</div><div class="line"></div><div class="line">ADDRESS1=172.16.0.0</div><div class="line">NETMASK1=255.240.0.0</div><div class="line">GATEWAY1=10.1.1.254</div></pre></td></tr></table></figure></p>
<p>　方法二：修改route-eth0文件(redhat下的老格式)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/etc/sysconfig/network-scripts/route-eth0</div><div class="line"></div><div class="line">192.168.0.0/16 via 10.1.1.254</div><div class="line">172.16.0.0/12 via 10.1.1.254</div></pre></td></tr></table></figure></p>
<p>　方法三：修改static-routes文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/etc/sysconfig/static-routes</div><div class="line"></div><div class="line">eth0 net 192.168.0.0 netmask 255.255.0.0 gw 10.1.1.254</div></pre></td></tr></table></figure></p>
<p>Debian/Ubuntu静态路由配置</p>
<p>修改route-eth0文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/etc/sysconfig/network-scripts/route-eth0</div><div class="line"></div><div class="line"><span class="comment">#Append following line</span></div><div class="line">10.0.0.0/8 via 10.9.38.65</div></pre></td></tr></table></figure></p>
<p>注：上面几种方法都比在rc.local里面用指令route add或者ip route add要更加好一些。重启网络(service network restart)或者重启网卡(ifdown eth0;ifup eth0)都可以正常工作。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JBoss调优—最佳线程数]]></title>
      <url>http://www.hi-linux.com/posts/35609.html</url>
      <content type="html"><![CDATA[<p>在设置jboss的参数中，maxThreads(最大线程数)和acceptCount(最大等待线程数)是两个非常重要的指标，直接影响到程序的QPS。本文讲解jboss连接的运行原理，以及如何设置这两个参数。</p>
<h3 id="最佳线程数："><a href="#最佳线程数：" class="headerlink" title="最佳线程数："></a>最佳线程数：</h3><p>在做压力测试时，刚开始，随着并发量的增加，QPS也会随之增大，但当并发量超过一个阀值之后，QPS就不会再增大，甚至很多时候还会降低，类似于下图。而这个阀值就是我们所说的最佳线程数，他也是设置jboss时的maxThreads参数时的重要指标。</p>
<p><img src="http://hi.csdn.net/attachment/201104/12/0_13026154879Qex.gif" alt=""></p>
<h4 id="jboss连接的原理"><a href="#jboss连接的原理" class="headerlink" title="jboss连接的原理"></a>jboss连接的原理</h4><p>jboss连接的基本原理如下图，一般情况下，当用户访问jboss服务器时，会先进入等待队列，然后再到运行区被执行。运行区中连接的线程数量是固定的，也就是说cpu在同一时间内处理的用户访问数量也是固定的。</p>
<p>而那些已经建立连接，但暂时还不能被cpu处理的，就在等待列队中等待，直到运行区中有空闲时，才进入运行区被cpu执行的。而如果等待队列也满了，再有用户申请连接，jboss就会直接直接拒绝掉。</p>
<p>这样做的目的是为了更好地利用系统资源（cpu，内存等）。试想，每个连接都是要占用系统资源的，假如jboss不做这样的设置，一有连接请求，jboss马上建立连接，内存消耗非常大，更加致命的是，随着连接数量的增多，cpu用于调度的时间增大，用于计算的时间相对减少，这样系统的性能就被活活拖垮了。</p>
<p><img src="http://hi.csdn.net/attachment/201104/13/0_1302700843PpQd.gif" alt=""></p>
<p>在jboss中，acceptCount和maxThreads，这两个参数就是用于设置分别对待队列长度和运行区线程数。具体操作，进入JBOSS_HOME/server/default/deploy/jbossweb.sar/ 文件夹下，找到server.xml文件，修改这连个参数如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">port</span>=<span class="string">"9999"</span> <span class="attr">address</span>=<span class="string">"$&#123;jboss.bind.address&#125;"</span>  </span></div><div class="line">         <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">redirectPort</span>=<span class="string">"$&#123;jboss.web.https.port&#125;"</span>  </div><div class="line"><span class="attr">maxThreads</span>=<span class="string">"150"</span> <span class="attr">acceptCount</span>=<span class="string">"8000"</span>  </div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>####如何找到最佳连接数</p>
<ol>
<li>根据公式计算: 最佳线程数量=((线程等待时间+线程cpu时间)/线程cpu时间) * cpu数量</li>
<li>通过用户慢慢递增来进行性能压测，观察QPS，响应时间。</li>
</ol>
<p>这里重点讲讲第二种方法。</p>
<p>首先在jboss的设置上，maxThreads值要设置得尽量大，以便压力都能压到cpu上。这同时也要注意，线程连接是占用内存资源的，假如maxThreads太大了，可能会消耗完所有内存，最终造成程序崩溃。</p>
<p>具体步骤。我以自己最近做的压力测试，并从中找到最佳线程数为例进行进行说明</p>
<p>我先设置的maxThreads=2000，acceptCount=4000。测试结果如下，横轴表示并发量，纵轴表示QPS</p>
<p><img src="http://hi.csdn.net/attachment/201104/14/0_13027866036TTt.gif" alt=""></p>
<p>跟据上图，我们就可以大致知道这个系统的最佳线程数是在红色区间范围内。</p>
<h4 id="真实的maxThreads的设置"><a href="#真实的maxThreads的设置" class="headerlink" title="真实的maxThreads的设置"></a>真实的maxThreads的设置</h4><p>但在真实环境中，maxThreads的值要略大于压力测试时得到的最佳线程数。这是因为系统依靠的资源是可能发生变化的，比如原先系统在压力测试得到的最佳线程数是30，我们设置maxThreads也是30的话，但在真实运行时，可能突然有段时间，IO的响应变慢，这样造成的就是是最佳线程数可能变成35，这样cpu资源就白白被浪费了，QPS降低.所以在设置maxThreads时，留下一切缓冲余地还是很有必要的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JBOSS 6中发布数据源]]></title>
      <url>http://www.hi-linux.com/posts/10407.html</url>
      <content type="html"><![CDATA[<p>本文介绍了在JBOSS服务器中发布数据源的方法，使用的JBOSS版本为6.0.0 Final。</p>
<p>以MySQL为例(其他数据库方法不变)，发布数据源的步骤如下：</p>
<p>1.将MySQL的数据库连接文件mysql-connector-java-5.1.22-bin.jar复制到%JBOSS_HOME%\server\default\lib目录下。</p>
<p>2.修改%JBOSS_HOME%\docs\examples\jca目录下的MySQL的数据源模板mysql-ds.xml文件，以下是我修改好的数据源配置文件，可作参考：<a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line"></div><div class="line">&lt;!-- See http://www.jboss.org/community/wiki/Multiple1PC for information about local-tx-datasource --&gt;</div><div class="line">&lt;!-- $Id: mysql-ds.xml 97536 2009-12-08 14:05:07Z jesper.pedersen $ --&gt;</div><div class="line">&lt;!--  Datasource config for MySQL using 3.0.9 available from:</div><div class="line">http://www.mysql.com/downloads/api-jdbc-stable.html</div><div class="line">--&gt;</div><div class="line"></div><div class="line">&lt;datasources&gt;</div><div class="line">  &lt;local-tx-datasource&gt;</div><div class="line">    &lt;jndi-name&gt;MySqlDS&lt;/jndi-name&gt;</div><div class="line">    &lt;connection-url&gt;jdbc:mysql://localhost:3306/titan&lt;/connection-url&gt;</div><div class="line">    &lt;driver-class&gt;com.mysql.jdbc.Driver&lt;/driver-class&gt;</div><div class="line">    &lt;user-name&gt;root&lt;/user-name&gt;</div><div class="line">    &lt;password&gt;123123&lt;/password&gt;</div><div class="line">    &lt;exception-sorter-class-name&gt;org.jboss.resource.adapter.jdbc.vendor.MySQLExceptionSorter&lt;/exception-sorter-class-name&gt;</div><div class="line">    &lt;!-- should only be used on drivers after 3.22.1 with &quot;ping&quot; support</div><div class="line">    &lt;valid-connection-checker-class-name&gt;org.jboss.resource.adapter.jdbc.vendor.MySQLValidConnectionChecker&lt;/valid-connection-checker-class-name&gt;</div><div class="line">    --&gt;</div><div class="line">    &lt;!-- sql to call when connection is created</div><div class="line">    &lt;new-connection-sql&gt;some arbitrary sql&lt;/new-connection-sql&gt;</div><div class="line">      --&gt;</div><div class="line">    &lt;!-- sql to call on an existing pooled connection when it is obtained from pool - MySQLValidConnectionChecker is preferred for newer drivers</div><div class="line">    &lt;check-valid-connection-sql&gt;some arbitrary sql&lt;/check-valid-connection-sql&gt;</div><div class="line">      --&gt;</div><div class="line"></div><div class="line">    &lt;!-- corresponding type-mapping in the standardjbosscmp-jdbc.xml (optional) --&gt;</div><div class="line">    &lt;metadata&gt;</div><div class="line">       &lt;type-mapping&gt;mySQL&lt;/type-mapping&gt;</div><div class="line">    &lt;/metadata&gt;</div><div class="line">  &lt;/local-tx-datasource&gt;</div><div class="line">&lt;/datasources&gt;</div></pre></td></tr></table></figure>
<p>如果要给连接池加上自动重连功能，加入以下段</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;exception-sorter-class-name&gt;org.jboss.resource.adapter.jdbc.vendor.MySQLExceptionSorter&lt;/exception-sorter-class-name&gt;</div><div class="line">&lt;!--&lt;new-connection-sql&gt;select 1 from dual&lt;/new-connection-sql&gt;--&gt;</div><div class="line">&lt;check-valid-connection-sql&gt;select 1 from dual&lt;/check-valid-connection-sql&gt;</div></pre></td></tr></table></figure>
<p>注意，修改好的数据源配置文件名必须以”-ds.xml”结尾。</p>
<p>3.将修改好的数据源配置文件mysql-ds.xml发布到JBOSS中，即将其拷贝至%JBOSS_HOME%\server\default\deploy目录下。</p>
<p>至此，经过以上三步，成功地在JBOSS服务器中发布了一个数据源。</p>
<p>注意：使用数据源时，需要在persistence.xml文件的<persistence-unit>元素中增加如下语句：</persistence-unit></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">jta-data-source</span>&gt;</span>java:MySqlDS<span class="tag">&lt;/<span class="name">jta-data-source</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里”java:”是JBOSS默认的命名空间，其后的”MySqlDS”对应上文mysql-ds.xml文件中的<jndi-nami>MySqlDS。</jndi-nami></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu下配置Nginx HTTPS]]></title>
      <url>http://www.hi-linux.com/posts/59121.html</url>
      <content type="html"><![CDATA[<p>　　HTTPS(全称：Hypertext Transfer Protocol over Secure Socket Layer)，是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL。它是一个URI scheme(抽象标识符体系)，句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层(在HTTP与TCP之间)。这个系统的最初研发由网景公司进行，提供了身份验证与加密通讯方法，现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。</p>
<p>　　确认Nginx支持OpenSSL模块</p>
<p>　　运行下面的命令：</p>
<p><pre lang="bash"><br>nginx -V</pre></p>
<p>nginx: nginx version: nginx/1.0.0<br>nginx: built by gcc 4.4.3 (Ubuntu 4.4.3-4ubuntu5)<br>nginx: TLS SNI support enabled<br>nginx: configure arguments: –user=www –group=www –prefix=/usr/local/webserver/nginx –with-http_stub_status_module –with-http_ssl_module<br><br>　　如果没有发现–with-http_ssl_module这个编译参数，说明不支持。Nginx默认是不支持SSL的，需要加入–with-http_ssl_module参数重新编译。</p>
<p>　　生成证书</p>
<p>　　SSL证书是数字证书的一种，类似于驾驶证、护照和营业执照的电子副本。SSL证书通过在客户端浏览器和Web服务器之间建立一条SSL安全通道(Secure socket layer(SSL)安全协议是由Netscape Communication公司设计开发。该安全协议主要用来提供对用户和服务器的认证；对传送的数据进行加密和隐藏；确保数据在传送中不被改变，即数据的完整性，现已成为该领域中全球化的标准。由于SSL技术已建立到所有主要的浏览器和WEB服务器程序中，因此，仅需安装服务器证书就可以激活该功能了)。即通过它可以激活SSL协议，实现数据信息在客户端和服务器之间的加密传输，可以防止数据信息的泄露。保证了双方传递信息的安全性，而且用户可以通过服务器证书验证他所访问的网站是否是真实可靠。<a id="more"></a></p>
<p>　　证书分自签证书和CA机构签发的证书，具体生成方法参见：[Ubuntu下配置Apache HTTPS]一文　<a href="http://www.mike.org.cn/articles/ubuntu-config-apache-https/" target="_blank" rel="external">http://www.mike.org.cn/articles/ubuntu-config-apache-https/</a></p>
<p>　　你也可以申请免费的StartSSL CA证书:</p>
<p>　　StartSSL(公司名：StartCom)也是一家CA机构，它的根证书很久之前就被一些具有开源背景的浏览器支持(Firefox浏览器、谷歌Chrome浏览器、苹果Safari浏览器等)。</p>
<p>　　申请地址：<a href="http://www.startssl.com" target="_blank" rel="external">http://www.startssl.com</a></p>
<p>　　具体申请方法可参考以下几篇文章：</p>
<p>　　<a href="http://blog.s135.com/startssl/" target="_blank" rel="external">http://blog.s135.com/startssl/</a><br>　　<a href="http://www.21andy.com/blog/20100224/1714.html" target="_blank" rel="external">http://www.21andy.com/blog/20100224/1714.html</a><br>　　<a href="http://www.deepvps.com/apply-startssl-ssl-certificate.html" target="_blank" rel="external">http://www.deepvps.com/apply-startssl-ssl-certificate.html</a> </p>
<p>　　配置Nginx</p>
<p>　　修改nginx.conf中相应的server段，加入如下内容：</p>
<p><pre lang="bash"><br>listen 443;<br>server_name www.mike.me;</pre></p>
<p>#启用SSL模块<br>ssl on;</p>
<p>#证书文件放置路径<br>ssl_certificate /etc/ssl/private/yiji.cer;</p>
<p>#私钥文件放置路径<br>ssl_certificate_key /etc/ssl/private/yiji.key;<br><br>　　注：SSL数字证书路径和域名根据实际情况修改。</p>
<p>　　重启Nginx</p>
<p><pre lang="bash"></pre></p>
<p>#测试Nginx主配置文件是否正确<br>nginx -t</p>
<p>#平滑重启Nginx<br>nginx -s reload<br><br>　　使用HTTPS协议访问网站</p>
<p>　　访问<a href="https://ip或域名，浏览器会弹出安装服务器证明书的窗口。说明服务器已经支持SSL了。" target="_blank" rel="external">https://ip或域名，浏览器会弹出安装服务器证明书的窗口。说明服务器已经支持SSL了。</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[If Everyone Cared]]></title>
      <url>http://www.hi-linux.com/posts/13805.html</url>
      <content type="html"><![CDATA[<p>第一次听到是筷子兄弟翻唱的[你在哪里]，在网上找到这首原曲[If Everyone Cared]。<br>在[If Everyone Cared]MV所讲述的故事中，Nickelback表现出对现实社会的自由意志，撼动人心。如果人人都关注自己的事情和社会的不公现象，在决心和勇气之下，那么世界一定会因他们而改变。</p>
<p>MV中的故事：</p>
<blockquote>
<p>1984 Bod Geldof, music journalist turned punk rock frontman, was inspired by a news report about Africa’s famine epidemic and began his fight against the world hunger. Geldof organized the world’s first global charity concert “Live Aid”. Performances by 100 artists around the world were viewed by 1.6 billion people. Live Aid raised 150 million Pounds in one day.<br>　　<br>1984年Bod Geldof这个出身音乐记者的朋克摇滚前沿人，被一则报导非洲饥荒的新闻深深打动，开始了他与世界饥荒的战斗。他组织了世界上首次全球义演，取名”生命之助”。在这场演出中，来自世界各地的一百位艺人为十六亿观众进行了表演。生命之助在短短一天内筹到了一亿五千万英镑的善款。<br><a id="more"></a><br>1976 Betty Williams, a receptionist and a mother of two, witnessed three children killed during the political turmoil in Northern Ireland. Within two days of the tragic event, Williams obtained 6,000 signatures petitioning for peace. She then led 10,000 people on a peace march to the children’s graves. The peaceful march was disrupted by protesters. One week later, Williams organized another march, this time the march was 35,000 strong. Betty Williams was awarded the Nobel Peace Prize in 1976.</p>
<p>在1976年，北爱尔兰一位名叫Betty Williams的前台接待员，同时也是两个孩子的母亲，亲眼目击了三名儿童在北爱政治冲突中遇害。悲剧发生后两天内她就组织了6000人在她的和平请愿书上签字，之后她又组织了一万人朝遇害儿童的墓地进行和平游行，但这次游行由于反对者的干扰而被迫终止。 但在两周后，一场规模更加宏大的游行开始了，这次参加游行的人数超过了三万五千人。Betty Williams在1976年获得了诺贝尔和平奖。</p>
<p>1961 Two students in Portugal raised their glasses in a toast to freedom. They were imprisoned for seven years. British lawyer Peter Benenson was shocked by the events. To rally support for the students, he wrote a letter to his local paper. The response was so overwhelming that a committee was formed to organize the campaign. It quickly grew into a world-wide movement, known today as Amnesty International.</p>
<p>1961年，两个葡萄牙学生只因为他们为自由而举杯就被(当作政治犯)关押了长达7年。英国律师Peter　Benenson(注：1977年获得诺贝尔和平奖)震惊非常，立即给当地报纸去信，表示对学生的支持。此事一出，反响巨大，迅速在全球引起轰动，成立了专门的委员会，这就是我们今天所指的国际特赦组织。(注：国际特赦组织是保护人犯人权的国际性民间组织，致力于争取思想犯的获释，政治犯的公平审判,以及死刑、刑讯逼供的废止等。在数十个国家设有分会,定期调查并报告各国政治犯的状况,总部在伦敦。)</p>
<p>1920s A boy from a small South African village dreamt of a day when equality would prevail over his country. After years of activism, he was charged with “Political Treason” and sentenced to life in prison. In 1990, after 27 years in prison, Nelson Rolihlahla Mandela was finally released. Mandela then led South Africa to its first ever democratic presidential election. Nearly 19 million people voted. Nelson Mandela won the election, ending the racist apartheid regime that divided South Africa for 46 years.</p>
<p>20世纪20年代，一个南非村落的小男孩梦想着能够有一天在他的国度里实现人人平等。多年的政治活动使他锒铛入狱，罪名是“叛国罪”。他的梦想也未曾消失。1990年，过了27年牢狱生活的曼德拉出狱了。之后他领导他的祖国进行了第一次民主的总统大选。近一千九百万人参加了投票。曼德拉赢得了选举，结束了南非46年的种族隔离。</p>
<p>Never doubt that a small group of committed people can change the world. Indeed, it’s the only thing that has. —–Margret Mead</p>
<p>永远不要怀疑一小群有决心的人能改变世界，事实上，也只有他们才能改变世界。 －－玛格丽特·米德(人类学家)</p>
<p>歌词：<br>If Everyone Cared<br>如果每个人都学会关心<br>From underneath the trees, we watch the sky<br>我们在树下 注视着星空<br>Confusing stars for satellites<br>围绕着群星的卫星 让我们感到疑惑<br>I never dreamed that you’d be mine<br>我从未想过 你会属于我<br>But here we are, we’re here tonight<br>但今晚 此时你就在我身旁<br>Singing Amen, I’m alive<br>歌颂上帝 我仍活着<br>Singing Amen, I’m alive<br>歌颂上帝 我仍活着<br>If everyone cared and nobody cried<br>倘若人人能关怀他人 就不会有人哭泣<br>If everyone loved and nobody lied<br>倘若人人都能付出爱 就不会有人撒谎<br>If everyone shared and swallowed their pride<br>倘若人人都能与他人分享并收敛自己的骄傲<br>We’d see the day when nobody died<br>我们就会看见 没有人逝去的日子<br>And I’m singing<br>因此 我在这里歌唱着<br>Amen I, I’m alive<br>上帝 我仍活着<br>Amen I, I’m alive<br>上帝 我仍活着<br>And in the air the fireflies<br>天空中飞舞的萤火虫<br>Our only light in paradise<br>是我们在天堂唯一的光亮<br>We’ll show the world they were wrong<br>我们将会告诉世界他们是错误的<br>And teach them all to sing along<br>并教导他们所有人一起歌唱<br>Singing Amen I’m alive<br>歌颂上帝 我仍活着<br>Singing Amen I’m alive<br>歌颂上帝 我仍活着<br>And as we lie beneath the stars<br>当我们躺卧在星空下<br>We realize how small we are<br>才知道原来我们是多么地渺小<br>If they could love like you and me<br>如果世上的人能像你和我般地彼此相爱<br>Imagine what the world could be<br>想像着那将会是个多美好的世界<br>If everyone cared and nobody cried<br>倘若人人能关怀他人 就不会有人哭泣<br>If everyone loved and nobody lied<br>倘若人人都能付出爱就不会有人撒谎<br>If everyone shared and swallowed their pride<br>倘若人人都能与他人分享并收敛自己的骄傲<br>We’d see the day when nobody died<br>我们就会看见 没有人逝去的日子<br>We’d see the day, we’d see the day<br>我们将会看见 我们将会看见<br>When nobody died<br>没有人死去的那天<br>We’d see the day, we’d see the day<br>我们将会看见 我们将会看见<br>When nobody died<br>没有人死去的那天<br>We’d see the day when nobody died<br>我们将会看见 没有人逝去的日子</p>
</blockquote>
<p><strong>在线试听：</strong></p>
<embed src="http://player.youku.com/player.php/sid/XMzE4MDA0MDQw/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">


]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker网络详解]]></title>
      <url>http://www.hi-linux.com/posts/62776.html</url>
      <content type="html"><![CDATA[<p>转载自:<a href="http://blog.csdn.net/wsscy2004" target="_blank" rel="external">http://blog.csdn.net/wsscy2004</a></p>
<h3 id="一、网络基础"><a href="#一、网络基础" class="headerlink" title="一、网络基础"></a>一、网络基础</h3><p>Docker使用linux桥接，在主机虚拟一个docker0网络接口，在主机中运行命令查看：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#List host bridges</span></div><div class="line"><span class="variable">$sudo</span> brctl show</div><div class="line">bridge      name    bridge id               STP enabled     interfacesdocker0             8000.000000000000       no</div><div class="line"></div><div class="line"><span class="comment">#Show docker0 IP address</span></div><div class="line"><span class="variable">$sudo</span> ifconfig docker0</div><div class="line">docker0   Link encap:Ethernet  HWaddr xx:xx:xx:xx:xx:xx</div><div class="line">          inet addr:172.17.42.1  Bcast:0.0.0.0  Mask:255.255.0.0</div></pre></td></tr></table></figure>
<p>docker启动一个container时会会根据docker0的网段划分container的IP,docker0是每个container的网关。<a id="more"></a></p>
<h3 id="二、自定义网络范围"><a href="#二、自定义网络范围" class="headerlink" title="二、自定义网络范围"></a>二、自定义网络范围</h3><p>尽管docker在使用linux brigde会找最合适的。但是有时候我们还是需要自己规划。</p>
<p>使用-b=<bridgename>参数设置</bridgename></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#先关闭docker</span></div><div class="line"><span class="variable">$sudo</span> service docker stop</div><div class="line"></div><div class="line"><span class="comment">#关闭网桥docker0# 添加自己的网桥bridge0</span></div><div class="line"><span class="variable">$sudo</span> ifconfig docker0 down</div><div class="line"><span class="variable">$sudo</span> brctl addbr bridge0</div><div class="line"><span class="variable">$sudo</span> ifconfig bridge0 192.168.227.1 netmask 255.255.255.0</div><div class="line"></div><div class="line"><span class="comment">#向Docker startup file中添加启动自定义网桥参数</span></div><div class="line"><span class="variable">$echo</span> <span class="string">"DOCKER_OPTS=\"-b=bridge0\""</span> &gt;&gt; /etc/default/docker</div><div class="line"></div><div class="line"><span class="comment">#启动Docker</span></div><div class="line"><span class="variable">$sudo</span> service docker start</div><div class="line"></div><div class="line"><span class="comment">#查看自定义网桥是否启动成功，ip等配置是否正确</span></div><div class="line"><span class="variable">$sudo</span> ifconfig bridge0</div><div class="line">bridge0   Link encap:Ethernet  HWaddr xx:xx:xx:xx:xx:xx</div><div class="line">          inet addr:192.168.227.1  Bcast:192.168.227.255  Mask:255.255.255.0</div><div class="line"></div><div class="line"><span class="comment">#启动container</span></div><div class="line">docker run -i -t base /bin/bash</div><div class="line"></div><div class="line"><span class="comment">#可以看到Container IP,在网段192.168.227/24内</span></div><div class="line">root@261c272<span class="built_in">cd</span>7d5:/<span class="comment"># ifconfig eth0</span></div><div class="line">eth0      Link encap:Ethernet  HWaddr xx:xx:xx:xx:xx:xx</div><div class="line">          inet addr:192.168.227.5  Bcast:192.168.227.255  Mask:255.255.255.0</div><div class="line"></div><div class="line"><span class="comment">#bridge0 IP as the default gateway 查看路由信息</span></div><div class="line">root@261c272<span class="built_in">cd</span>7d5:/<span class="comment"># route -n</span></div><div class="line">Kernel IP routing table</div><div class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</div><div class="line">0.0.0.0         192.168.227.1   0.0.0.0         UG    0      0        0 eth0</div><div class="line">192.168.227.0   0.0.0.0         255.255.255.0   U     0      0        0 eth0</div><div class="line"></div><div class="line"><span class="comment">#hits CTRL+P then CTRL+Q to detach</span></div><div class="line"></div><div class="line"><span class="comment">#查看网桥信息</span></div><div class="line"><span class="variable">$sudo</span> brctl show</div><div class="line">bridge      name    bridge id               STP enabled     interfaces</div><div class="line">bridge0             8000.fe7c2e0faebd       no              vethAQI2QT</div></pre></td></tr></table></figure>
<h3 id="三、container互通"><a href="#三、container互通" class="headerlink" title="三、container互通"></a>三、container互通</h3><p>docker默认是允许container互通，通过-icc=false关闭互通。<br>一旦关闭了互通，只能通过–link name:alias命令连接指定container.</p>
<p>container互相隔离的情况下，假设我们有一个webapp container,一个redis contianer需要互通。<br>先启动redis container:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker run <span class="_">-d</span> --name redis crosbymichael/redis</div></pre></td></tr></table></figure>
<p>再启动webapp并联通到redis</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#将redis取别名为db</span></div><div class="line">sudo docker run -t -i --link redis:db --name webapp ubuntu bash</div></pre></td></tr></table></figure>
<p>在webapp中可以看到db的网络信息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$root</span>@4c01db0b339c:/<span class="comment"># env</span></div><div class="line"></div><div class="line">HOSTNAME=4c01db0b339c</div><div class="line">DB_NAME=/webapp/db</div><div class="line">TERM=xterm</div><div class="line">DB_PORT=tcp://172.17.0.8:6379</div><div class="line">DB_PORT_6379_TCP=tcp://172.17.0.8:6379</div><div class="line">DB_PORT_6379_TCP_PROTO=tcp</div><div class="line">DB_PORT_6379_TCP_ADDR=172.17.0.8</div><div class="line">DB_PORT_6379_TCP_PORT=6379</div><div class="line">PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin</div><div class="line">PWD=/</div><div class="line">SHLVL=1</div><div class="line">HOME=/</div><div class="line">container=lxc</div><div class="line">_=/usr/bin/env</div><div class="line">root@4c01db0b339c:/<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>0.11版本以后，–link redis:db的别名，会在/etc/hosts中生成对应的ip映射:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@6541a75d44a0:/<span class="comment"># cat /etc/hosts</span></div><div class="line">172.17.0.3  6541a75d44a0172.17.0.2  db</div></pre></td></tr></table></figure>
<h3 id="四、什么是vethxxxx"><a href="#四、什么是vethxxxx" class="headerlink" title="四、什么是vethxxxx"></a>四、什么是vethxxxx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#查看网桥信息</span></div><div class="line"><span class="variable">$sudo</span> brctl show</div><div class="line">bridge      name    bridge id               STP enabled     interfaces</div><div class="line">docker0             8000.fe7c2e0faebd       no              vethAQI2QT</div></pre></td></tr></table></figure>
<p>vethxxx是主机与container内部eth0相连的管道。详见ip link和namespaces infrastructure</p>
<h3 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h3><p>pipework可以创建各种复杂的containers互通的场景。详见<a href="http://github.com/jpetazzo/pipework" target="_blank" rel="external">here</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu下配置SVN]]></title>
      <url>http://www.hi-linux.com/posts/33820.html</url>
      <content type="html"><![CDATA[<p>　　Subversion简称SVN，是一个开放源代码的版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。在Subversion管理下，文件和目录可以超越时空。Subversion将文件存放在中心版本库里。这个版本库很像一个普通的文件服务器，不同的是，它可以记录每一次文件和目录的修改情况。这样就可以籍此将数据恢复到以前的版本，并可以查看数据的更改细节。互联网上越来越多的控制服务从CVS转移到Subversion。</p>
<p>　　Subversion的设计包括了一个抽象的网络层，这意味着版本库是可以通过各种服务器进程访问的。理论上来会说，Subversion可以使用无限数量的网络协议来实现，甚至可以直接用perl利用相关的接口来编写自定义协议。但日常中，用得最多的就是svn://协议和用mod_dav_svn模块通过Apache服务进行访问。</p>
<p>　　一、Subversion的结构</p>
<p>　　Subversion的官方网站是：<a href="http://subversion.tigris.org/" target="_blank" rel="external">http://subversion.tigris.org/</a></p>
<p>　　Subversion使用服务端—客户端的结构，当然服务端与客户端可以都运行在同一台服务器上。在服务端是存放着所有受控制数据的Subversion仓库，另一端是Subversion的客户端程序，管理着受控数据的一部分在本地的映射(称为工作副本)。在这两端之间，是通过各种仓库存取层(Repository Access，简称RA)的多条通道进行访问的。这些通道中，可以通过不同的网络协议，例如HTTP、SSH等，或本地文件的方式来对仓库进行操作。</p>
<p>　　Subversion是一种开放源码的全新版本控制系统，支持可在本地访问或通过网络访问的数据库和文件系统存储库。不但提供了常见的比较、修补、标记、提交、回复和分支功能性，Subversion还增加了追踪移动和删除的能力。此外，它支持非ASCII文本和二进制数据，所有这一切都使Subversion不仅对传统的编程任务非常有用，同时也适于 Web 开发、图书创作和其他在传统方式下未采纳版本控制功能的领域。<a id="more"></a></p>
<p>　　二、安装Subversion</p>
<p>　　大部分的发行版都已经提供Subversion套件，Ubuntu可以通过下面的命令进行安装：</p>
<p><pre lang="bash"><br>apt-get install subversion<br></pre><br>　　Subversion套件提供下列一些常用工具：</p>
<p>　　svn 一个命令行式的客户端程序；<br>　　svnversion 报告本地工作副本状态(即当前文档的修订版本号)的程序<br>　　svnadmin 用来创建、调整或修复仓库的工具；<br>　　svndumpfilter 用于过滤仓库中的数据<br>　　snvserve 一个定制的、独立的Subversion服务程序，可以作为一个驻留进程或通过ssh调用，以便他人可以通过其访问仓库。</p>
<p>　　三、使用Subversion</p>
<p>　　Subversion一般使用两种后台服务模式：一种是其自己实现的svnserve，可以通过svn协议访问，另一种是借助mod_dav_svn模块，由Apache http服务器来实现，然后通过HTTP或HTTPS协议来访问。</p>
<p>　　1、通过svn协议访问</p>
<p>　　svn协议</p>
<p>　　客户端若要通过svn协议访问仓库，必须在存放仓库的机器上运行svnserve服务程序。启动该程序后，会监听在3690端口，以响应客户端的访问工作。</p>
<p><pre lang="bash"><br>mkdir /var/local/svndata<br>svnserve -d -r /var/local/svndata<br></pre><br>　　注：-d 表示以后台模式运行，-r用于指定服务的根目录。其余参数，请用svnserve -h查看。</p>
<p>　　创建仓库</p>
<p>　　开始必须先用svnadmin在存放仓库的目录中创建必须的文件，以形成仓库。</p>
<p><pre lang="bash"><br>svnadmin create /var/local/svndata/dev1<br></pre><br>　　设置授权</p>
<p>　　通过svn协议访问远端的仓库，必须建立授权关系。svnserve对于每个仓库，都有一个独立的配置文件和独立的用户、权限管理。权限文件存放在：repository-path/conf/svnserve.conf</p>
<p>　　我这里的位置就是/var/local/svndata/dev1/conf/svnserve.conf，缺省的示例配置文件中和选项都是被注释的。</p>
<p>　　以下是一个简单的例子：</p>
<p><pre lang="bash"><br>vi  /var/local/svndata/dev1/conf/svnserve.conf</pre></p>
<p>[general]<br>anon-access = read # 允许匿名用户只读访问，若设置为none表示不允许匿名访问<br>auth-access = write # 通过验证的用户可以读和写<br>password-db = passwd # 用户保存文件，也可以使用绝对路径来指定位置<br>authz-db = authz # 权限管理文件<br>realm = My First Repository # 仓库名称<br><br>　　注：配置项前面不能有前置空格，否则后续执行svn命令时，会报Option expected错误。</p>
<p>　　配置用户和权限</p>
<p>　　在svnserve.conf文件中定义的用户和权限配置文件的中加入相关信息：</p>
<p>　　配置用户</p>
<p><pre lang="bash"><br>vi  /var/local/svndata/dev1/conf/passwd</pre></p>
<p>#定义用户<br>[users]</p>
<p>#以用户名＝密码对方式进行定义<br>mike = 000000<br>easylife = 000000<br><br>　　配置用户权限</p>
<p><pre lang="bash"><br>vi  /var/local/svndata/dev1/conf/authz</pre></p>
<p>#定义组<br>[groups]</p>
<p>#定义属于组的用户<br>group1 = mike,easylife </p>
<p>#可定义仓库中的某个相对路径，如[/]，或[/project1]</p>
<p>#若是多个仓库共享一个权限文件，可以用仓库名加“:”开头来定义，如：[project2:/]</p>
<p>#这个project2必须是已经由svnadmin create /path/project2创建好的仓库</p>
<p>[/]</p>
<p>#定义某个用户的权限，r是只读、w是可写、留空是不允许访问<br>mike = rw</p>
<p>#定义某个组的权限<br>@group1 = rw</p>
<p>#用“*”号表示其他用户</p>
<ul>
<li>= r<br><br>　　注：用户和权限配置文件必须与svnserve.conf中设置的路径相同。若把这两个配置文件放在仓库外，例如：/var/local/svndata/目录，则允许多个仓库共享同样的配置文件。用户和权限配置文件保存后即可生效，不需重启svnserve服务。</li>
</ul>
<p>　　访问仓库</p>
<p>　　使用SVN客户端</p>
<p>　　进行首次导入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">svn import /data0/software/memadmin  svn://192.168.1.109/dev1 -m <span class="string">"initialization"</span></div><div class="line"></div><div class="line">认证领域: &lt;svn://192.168.1.109:3690&gt; My First Repository</div><div class="line">“root”的密码: </div><div class="line">认证领域: &lt;svn://192.168.1.109:3690&gt; My First Repository</div><div class="line">用户名: mike</div><div class="line">“mike”的密码: </div><div class="line"></div><div class="line">-----------------------------------------------------------------------</div><div class="line">注意!  你的密码，对于认证域:</div><div class="line"></div><div class="line">   &lt;svn://192.168.1.109:3690&gt; My First Repository</div><div class="line"></div><div class="line">只能明文保存在磁盘上!  如果可能的话，请考虑配置你的系统，让 Subversion</div><div class="line">可以保存加密后的密码。请参阅文档以获得详细信息。</div><div class="line"></div><div class="line">你可以通过在“/root/.subversion/servers”中设置选项“store-plaintext-passwords”为“yes”或“no”，</div><div class="line">来避免再次出现此警告。</div><div class="line">-----------------------------------------------------------------------</div><div class="line">保存未加密的密码(yes/no)? yes</div><div class="line">增加           /data0/software/memadmin/LICENSE.txt</div><div class="line">增加           /data0/software/memadmin/apps</div><div class="line">增加           /data0/software/memadmin/apps/SaveList.php</div><div class="line">......</div><div class="line">增加           /data0/software/memadmin/views/memadmin.php</div><div class="line">增加           /data0/software/memadmin/index.php</div><div class="line"></div><div class="line">提交后的版本为 1。</div></pre></td></tr></table></figure></p>
<p>　　注意：Linux下，默认会先以当前用户去验证，若用户名不匹配，可在后续的提示中输入指定的用户名。输入一次用户名后，svn会把验证结果保留在本地的~/.subversion/auth/svn.simple目录中，下次使用svn时，就不需要再做验证工作了。(除非修改了远端的验证用户名和密码)</p>
<p>　　从SVN仓库签出</p>
<p><pre lang="bash"><br>svn co svn://192.168.1.109/dev1/</pre></p>
<p>A    dev1/LICENSE.txt<br>A    dev1/apps<br>A    dev1/apps/GetListTime.php<br>……<br>A    dev1/views/mem_count.php<br>A    dev1/views/memadmin.php<br>取出版本 1。<br><br>　　2、通过HTTP协议访问版本库</p>
<p>　　通过HTTP协议访问版本库是Subversion的亮点之一，这种方式具备许多svnserve服务器所没有的特性，使用上更加灵活。</p>
<p>　　关于mod_dav_svn模块</p>
<p>　　由于Subversion需要版本化的控制，因此标准的HTTP协议不能满足需求。要让Apache与Subversion协同工作，就要使用WebDAV(Web-based Distributed Authoring and Versiong)Web分布式创作和版本控制协议。WebDAV是HTTP 1.1的扩展，关于WebDAV的规范和工作原理，可以参考IETF RFC 2518。</p>
<p>　　mod_dav_svn是Apache服务器的一个插件模块，作为Subversion与Apache之间的接口，通过它Apache就可以访问版本库，并且可以让客户端也使用HTTP的扩展协议WebDAV/DeltaV进行访问。</p>
<p>　　安装和配置</p>
<p>　　与使用SVN协议的svnserve不同，要通过Apache访问Subversion，除了必须已经部署好Apache和Subversion的基本环境外，当然不可缺少的是Apache的mod_dav_svn模块。</p>
<p><pre lang="bash"></pre></p>
<p>#安装mod_dav_svn<br>apt-get install libapache2-svn libsvn1</p>
<p>#启用mod_dav_svn模块<br>a2enmod dav_svn<br><br>　　注：Ubuntu缺省是启用mod_dav_svn模块的。</p>
<p>　　创建版本仓库</p>
<p>　　这与使用SVN协议方式的工作是基本相同的。不同点在于需要让运行Apache的用户拥有SVN仓库根路径的所有权,这样做可以在SVN仓库根路径下创建多个版本库，并且所有版本库都使用同一个用户信息文件和访问权限文件来管理。</p>
<p><pre lang="bash"><br>cd /var/local/svndata<br>svnadmin create dev2<br>chown -R www-data.www-data /var/local/svndata/<br></pre><br>　　配置mod_dav_svn</p>
<p><pre lang="bash"><br>vi /etc/apache2/mods-enabled/dav_svn.conf</pre></p>
<p>#指定SVN仓库根路径<br>SVNParentPath /var/local/svndata<br><br>　　访问SVN</p>
<p>#重启Apache<br>/etc/init.d/apache2 restart</p>
<p>　　通过浏览器访问<a href="http://ip/svn/repos，即可在浏览中浏览SVN库中的内容。" target="_blank" rel="external">http://ip/svn/repos，即可在浏览中浏览SVN库中的内容。</a></p>
<p>　　加入认证信息</p>
<p>　　上面定义的版本仓库，默认是任何人都可以匿名访问，并且拥有完全的写入、读取、修改、提交、删除版本库中信息的权限。因此，我们需要加入认证信息以做权限的管理。HTTP协议版本就提供了简单的客户端认证方式，这可通过Apache配置完成。</p>
<p>　　Apache提供了一个htpasswd工具来管理，使用该工具可以创建一个文件，其中存放着用户名和加密后的密码信息。而这些就是Subversion可以引用的用户了，根据这些用户信息，配合mod_authz_svn模块即可进行目录的访问控制。</p>
<p>　　创建存放用户名信息的文件</p>
<p><pre lang="bash"><br>htpasswd -c /var/local/svndata/passwdfile mike<br>New password:         &lt;==输入密码<br>Re-type new password: 　&lt;==再次输入密码<br>Adding password for user mike<br></pre><br>　　htpasswd其它用法</p>
<p><pre lang="bash"></pre></p>
<p>#新增用户<br>htpasswd -m /var/local/svndata/passwdfile NewUserName</p>
<p>#修改用户密码<br>htpasswd -m /var/local/svndata/passwdfile oldUserName</p>
<p>#删除用户<br>htpasswd -D /var/local/svndata/passwdfile oldUserName<br><br>　　-m是可选的参数，表示强制使用MD5算法加密，当用-c创建用户名信息文件后，即可修改或添加用户信息。</p>
<p>　　创建存放用户访问权限文件</p>
<p>　　由于采用的是多个版本库使用同一个访问权限控制文件来管理权限，这里就需要使用[repository:/path]的方式定义权限。</p>
<p>　　使用“认证用户(组)=权限”的方式描述每个用户(组)访问版本库的级别：r是只读，rw是可读写，留空是不允许访问。另外，*表示所有用户，可以用于控制匿名用户的访问权限；@表示已经被分组的组名。</p>
<p><pre lang="bash"><br>vi /var/local/svndata/authz</pre></p>
<p>[groups]<br>tester = easylife,test1<br>developers = dev1,dev2</p>
<p>[dev1:/]</p>
<ul>
<li>= r<br>mike =rw<br>@tester=rw</li>
</ul>
<p>[dev2:/]</p>
<ul>
<li>= r<br>mike =rw<br>@developers=rw<br><br>　　修改mod_dav_svn配置文件</li>
</ul>
<p>　　修改Location标签，加入认证部分配置。</p>
<p><pre lang="bash"><br>vi /etc/apache2/mods-enabled/dav_svn.conf</pre></p>
<p>#使用基本认证方式，即用户名、密码认证<br>AuthType Basic </p>
<p>#在认证对话框中出现的提示信息<br>AuthName “Subversion Repository” </p>
<p>#指定上面创建好的存放用户名信息的文件路径<br>AuthUserFile /var/local/svndata/passwdfile</p>
<p>#指定上面创建好的存放用户访问权限的文件路径<br>AuthzSVNAccessFile /var/local/svndata/authz</p>
<p>#限定只有用户输入正确的用户名和密码后才能访问该标签所指向的路径<br>Require valid-user<br><br>　　访问SVN</p>
<p>　　使用mod_dav_svn模块，通过Apache访问版本仓库，是不需要启动svnserve服务的，一切都已经由dav模块做接口完成数据请求的工作，通过svn客户端以HTTP协议访问版本仓库即可。</p>
<p><pre lang="bash"></pre></p>
<p>#重启Apache<br>/etc/init.d/apache2 restart<br><br>　　通过浏览器访问<a href="http://ip/svn/repos，输入对应的用户名和密码后，即可在浏览中浏览SVN库中的内容。" target="_blank" rel="external">http://ip/svn/repos，输入对应的用户名和密码后，即可在浏览中浏览SVN库中的内容。</a></p>
<p>　　完整的mod_dav_svn配置示例文件：</p>
<p><pre lang="bash"></pre></p>
<p><location svn=""><br>    DAV svn<br>    SVNParentPath /var/local/svndata<br>    AuthType Basic<br>    AuthName “Subversion Repository”<br>    AuthUserFile /var/local/svndata/passwdfile<br>    AuthzSVNAccessFile /var/local/svndata/authz<br>    Require valid-user<br>    <limitexcept get="" propfind="" options="" report=""><br>    Require valid-user<br>    Allow from localhost<br>    </limitexcept><br></location><br><br>　　mod_dav_svn模块中的其它语句</p>
<p>　　使用mod_dav_svn模块后，还可以使用<limit>或<limitexcept>标签进行认证控制。<limitexcept>表示除了下面的动作需要认证外，其他动作不需验证。<limit>表示需对特定动作进行控制.甚至完全不用<limit>或<limitexcept>标签，表示对所有的动作进行控制。此外，定义“Require mike easylife”的写法，可实现将只有用户信息文件中特定的linuxing和hanry用户才能通过认证。</limitexcept></limit></limit></limitexcept></limitexcept></limit></p>
<p>　　示例：</p>
<p>　　除了下面的动作需要认证外，其他动作不需验证</p>
<p><pre lang="bash"></pre></p>
<p><limitexcept get="" propfind="" options="" report=""><br>  AuthType Basic<br>  AuthName “Subversion Repository”<br>  AuthUserFile /var/local/svndata/passwdfile<br>  Require valid-user<br></limitexcept><br><br>　　该标签定义当进行除了指定的若干动作需要进行用户名和密码的认证后才能进行外，其他的动作是不做限制的。例如：只有认证用户可以写操作，同时也允许匿名的读取操作。</p>
<p>　　使用Satisfy允许匿名的读取操作</p>
<p>　　使用Satisfy语句定义后，就不需要加入<limit>或<limitexcept>标签也可以实现允许匿名的读取操作。Satisfy Any的设置表示在同时启用了Allow(允许)和Require的情况下，指定相关策略。Satisfy策略一共有两种，All表示用户必须同时满足Allow和Require的条件，而Any则是满足其中之一即可。</limitexcept></limit></p>
<p>　　示例：</p>
<p><pre lang="bash"></pre></p>
<p><location svn=""><br>    DAV svn<br>    SVNParentPath /var/local/svndata<br>    Satisfy Any<br>    AuthType Basic<br>    AuthName “Subversion Repository”<br>    AuthUserFile /var/local/svndata/passwdfile<br>    AuthzSVNAccessFile /var/local/svndata/authz<br>    Require valid-user<br></location><br><br>　　这里Satisfy Any用于允许先用匿名方式尝试访问，并根据authz文件中对匿名用户的控制给予访问权限。若没有这句话，则无论authz文件中是否加入了“*=r”的写法，匿名用户都是无法访问的。</p>
<p>　　3、SVN协议与mod_authz_svn模块的区别</p>
<p>　　SVN协议用于客户端使用svn://方式访问版本库，而mod_authz_svn模块让客户端可通过Apache访问版本。它们分别使用不同的服务：svnserve、httpd进行访问。</p>
<p>　　由于用户、组权限不同，权限管理方式也不相同，因此，不建议同时启动两种访问方式。从易用性，管理方便的角度来分析，Apache以mod_authz_svn模块的方式访问版本库会更多人选择。mod_authz_svn方式，使用80端口访问，并且提供https等加密传输，用于用户信息验证的密码保存方式也不是明文的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[苏打绿-十年一刻]]></title>
      <url>http://www.hi-linux.com/posts/38488.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>那姑娘半顶着妆 身手漂亮 皮黄嘴上流浪<br>那两人说带着闹歌 舞齐发 百花手上飞扬<br>年岁的河已三百趟 那江水走遍大街小巷<br>不管是生旦净末丑 跑龙套也能让你激昂<br>宁愿舍一顿饭也听你唱<br>可能忙了又忙 可能伤了又伤<br>可能无数眼泪 在夜晚尝了又尝<br>可是换来成长 可是换来希望<br>如今我站在台上 和你一起分享<br>那珍珠开在东方 异国芬芳 天鹅顶上荡漾<br>那文化活在日常 英雄好汉 梆子曲上争仗<br>将心灵的面具涂画 那角色穿越时空长廊<br>不管是冰雪与风霜 哪个断肠人在水一方<br>消磨这一身魂也陪你闯<a id="more"></a><br>可能忙了又忙 可能伤了又伤<br>可能无数眼泪 在夜晚尝了又尝<br>可是换来成长 可是换来希望<br>如今我站在台上 这么对你讲<br>十年的功聚成灿烂那一分钟的梦<br>生命舞台发光的人绝不是只会说<br>可能忙了又忙　可能伤了又伤<br>可能无数眼泪在夜晚尝了又尝<br>可是换来成长　可是换来希望<br>如今我站在台上<br>可能耗尽坚强　可能历经沧桑<br>可能我的疯狂暂时不得到原谅<br>可是我知道啊　可是我明白啊<br>是我的执着搏来　在你面前歌唱<br>唱着我的幻想　唱着我的荒唐<br>唱着与你分享打通我们的窗</p>
</blockquote>
<p><strong>在线试听</strong></p>
<embed src="http://player.youku.com/player.php/sid/XMTk0NTI5MTQw/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[图解HTTPS]]></title>
      <url>http://www.hi-linux.com/posts/21572.html</url>
      <content type="html"><![CDATA[<p>转载自：<a href="http://www.cnblogs.com/zhuqil/archive/2012/07/23/2604572.html" title="图解HTTPS" target="_blank" rel="external">http://www.cnblogs.com/zhuqil/archive/2012/07/23/2604572.html</a></p>
<p>我们都知道HTTPS能够加密信息，以免敏感信息被第三方获取。所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议。</p>
<p>一、HTTPS简介</p>
<p>HTTPS其实是有两部分组成：HTTP+SSL/TLS，也就是在HTTP上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过TLS进行加密，所以传输的数据都是加密后的数据。具体是如何进行加密，解密，验证的，且看下图。</p>
<p><img src="http://pic002.cnblogs.com/images/2012/38542/2012072310244445.png" alt="图解HTTPS"></p>
<ol>
<li><p>客户端发起HTTPS请求<br>这个没什么好说的，就是用户在浏览器里输入一个https网址，然后连接到server的443端口。</p>
</li>
<li><p>服务端的配置<br>采用HTTPS协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面(startssl就是个不错的选择，有1年的免费服务)。这套证书其实就是一对公钥和私钥。如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。</p>
</li>
<li><p>传送证书<br>这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。<a id="more"></a></p>
</li>
<li><p>客户端解析证书<br>这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随即值。然后用证书对该随机值进行加密。就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。</p>
</li>
<li><p>传送加密信息<br>这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。</p>
</li>
<li><p>服务段解密信息<br>服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。</p>
</li>
<li><p>传输加密后的信息<br>这部分信息是服务段用私钥加密后的信息，可以在客户端被还原</p>
</li>
<li><p>客户端解密信息<br>客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容。整个过程第三方即使监听到了数据，也束手无策。</p>
</li>
</ol>
<p>二、HTTPS的工作原理</p>
<blockquote>
<p>HTTPS在传输数据之前需要客户端（浏览器）与服务端（网站）之间进行一次握手，在握手过程中将确立双方加密传输数据的密码信息。TLS/SSL协议不仅仅是一套加密传输的协议，更是一件经过艺术家精心设计的艺术品，TLS/SSL中使用了非对称加密，对称加密以及HASH算法。握手过程的具体描述如下：</p>
</blockquote>
<ul>
<li><p>1.浏览器将自己支持的一套加密规则发送给网站。</p>
</li>
<li><p>2.网站从中选出一组加密算法与HASH算法，并将自己的身份信息以证书的形式发回给浏览器。证书里面包含了网站地址，加密公钥，以及证书的颁发机构等信息。</p>
</li>
<li><p>3.浏览器获得网站证书之后浏览器要做以下工作：<br>a) 验证证书的合法性（颁发证书的机构是否合法，证书中包含的网站地址是否与正在访问的地址一致等），如果证书受信任，则浏览器栏里面会显示一个小锁头，否则会给出证书不受信的提示。<br>b) 如果证书受信任，或者是用户接受了不受信的证书，浏览器会生成一串随机数的密码，并用证书中提供的公钥加密。<br>c) 使用约定好的HASH算法计算握手消息，并使用生成的随机数对消息进行加密，最后将之前生成的所有信息发送给网站。 </p>
</li>
<li><p>4.网站接收浏览器发来的数据之后要做以下的操作：<br>a) 使用自己的私钥将信息解密取出密码，使用密码解密浏览器发来的握手消息，并验证HASH是否与浏览器发来的一致。<br>b) 使用密码加密一段握手消息，发送给浏览器。 </p>
</li>
<li><p>5.浏览器解密并计算握手消息的HASH，如果与服务端发来的HASH一致，此时握手过程结束，之后所有的通信数据将由之前浏览器生成的随机密码并利用对称加密算法进行加密。</p>
</li>
</ul>
<p>这里浏览器与网站互相发送加密的握手消息并验证，目的是为了保证双方都获得了一致的密码，并且可以正常的加密解密数据，为后续真正数据的传输做一次测试。另外，HTTPS一般使用的加密与HASH算法如下：</p>
<ul>
<li>非对称加密算法：RSA，DSA/DSS </li>
<li>对称加密算法：AES，RC4，3DES </li>
<li>HASH算法：MD5，SHA1，SHA256</li>
</ul>
<p>三、总结：</p>
<ul>
<li>服务器用RSA生成公钥和私钥。</li>
<li>把公钥放在证书里发送给客户端，私钥自己保存。</li>
<li>客户端首先向一个权威的服务器检查证书的合法性，如果证书合法，客户端产生一段随机数，这个随机数就作为通信的密钥，我们称之为对称密钥，用公钥加密这段随机数，然后发送到服务器。</li>
<li>服务器用密钥解密获取对称密钥，然后，双方就已对称密钥进行加密解密通信了。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx为设置Charset]]></title>
      <url>http://www.hi-linux.com/posts/50550.html</url>
      <content type="html"><![CDATA[<p>LNMPA下的http头信息的Content-Type: text/html没有设置charset=utf-8</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Server: nginx/1.0.15</div><div class="line">Date: Wed, 23 Oct 2013 08:12:31 GMT</div><div class="line">Content-Type: text/html</div><div class="line">Connection: keep-alive</div><div class="line">Vary: Accept-Encoding</div><div class="line">X-Powered-By: InfoMaster/1.1.Alpha1 (Ray)</div></pre></td></tr></table></figure>
<p>添加方法很简单</p>
<p>修改nginx.conf在http,server,或location下添加<a id="more"></a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vim /etc/nginx/conf/nginx.conf</div><div class="line"></div><div class="line">charset utf-8;</div></pre></td></tr></table></figure>
<p>使用 curl -IL imike.me 查看如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Server: nginx/1.0.15</div><div class="line">Date: Wed, 23 Oct 2013 08:19:05 GMT</div><div class="line">Content-Type: text/html; charset=utf-8</div><div class="line">Connection: keep-alive</div><div class="line">Vary: Accept-Encoding</div><div class="line">X-Powered-By: InfoMaster/1.1.Alpha1(Ray)</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Debian/Ubuntu下iptables管理脚本]]></title>
      <url>http://www.hi-linux.com/posts/27459.html</url>
      <content type="html"><![CDATA[<p>RedHat系列下有比较好用的iptables管理工具，可以像控制服务进程一样来对防火墙进行管理及控制，debian系发行版默认不开启iptables，当然也没有与之相关的能直接管理的工具了。这里推荐两款工具来完成这一工作。</p>
<h3 id="一、使用iptables-persistent"><a href="#一、使用iptables-persistent" class="headerlink" title="一、使用iptables-persistent"></a>一、使用iptables-persistent</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install iptables-persistent</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="指令参考"><a href="#指令参考" class="headerlink" title="指令参考"></a>指令参考</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/iptables-persistent</div><div class="line">Usage: /etc/init.d/iptables-persistent &#123;start|restart|reload|force-reload|save|flush&#125;</div><div class="line"></div><div class="line">start: loads /etc/iptables/rules.v4，/etc/iptables/rules.v6</div><div class="line">restart: convenience start &amp; stop <span class="built_in">command</span></div><div class="line">reload:reload rules from /etc/iptables/rules.v4，/etc/iptables/rules.v6</div><div class="line">force-reload:force-reload rules from /etc/iptables/rules.v4，/etc/iptables/rules.v6</div><div class="line">save:saves the current rules to /etc/iptables/rules.v4 and /etc/iptables/rules.v6</div><div class="line">flush: flushes iptables completely, and enforces ACCEPT policy</div></pre></td></tr></table></figure>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">service iptables-persistent start</div><div class="line">service iptables-persistent restart</div><div class="line">service iptables-persistent reload</div><div class="line">service iptables-persistent force-reload</div><div class="line">service iptables-persistent save</div><div class="line">service iptables-persistent flush</div></pre></td></tr></table></figure>
<h3 id="二、使用iptables-init-debian"><a href="#二、使用iptables-init-debian" class="headerlink" title="二、使用iptables-init-debian"></a>二、使用iptables-init-debian</h3><blockquote>
<p>Init script for controlling iptables as a service in a Debian box. Tested in Debian Squeeze, Wheezy and Sid.</p>
</blockquote>
<p>This script relies on iptables-save and iptables-restore commands, to save and read the rules in /etc/iptables.rules. Once installed, this file must be created, by saving current rules (save command).</p>
<p>项目主页：<a href="https://github.com/Sirtea/iptables-init-debian" target="_blank" rel="external">https://github.com/Sirtea/iptables-init-debian</a></p>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/Sirtea/iptables-init-debian/archive/master.zip -O iptables-init-debian.zip</div><div class="line">unzip iptables-init-debian.zip</div><div class="line"><span class="built_in">cd</span> iptables-init-debian-master/</div><div class="line">cp iptables /etc/init.d/</div><div class="line">update-rc.d iptables defaults <span class="comment">#加入开机启动</span></div></pre></td></tr></table></figure>
<h4 id="指令参考-1"><a href="#指令参考-1" class="headerlink" title="指令参考"></a>指令参考</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">start: loads /etc/iptables.rules</div><div class="line">stop: flushes iptables completely, and enforces ACCEPT policy</div><div class="line">restart: convenience start &amp; stop <span class="built_in">command</span></div><div class="line">save: saves the current rules to /etc/iptables.rules</div></pre></td></tr></table></figure>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">service iptables start</div><div class="line">service iptables stop</div><div class="line">service iptables restart</div><div class="line">service iptables status</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vagrantfile配置技巧]]></title>
      <url>http://www.hi-linux.com/posts/24777.html</url>
      <content type="html"><![CDATA[<p>Vagrantfile，官方解释是这样的：The primary function of the Vagrantfile is to describe the type of machine required for a project, and how to configure and provision these machines。简单来说就是配置这个虚拟主机网络连接方式，端口转发，同步文件夹，以及怎么和puppet，chef结合的一个配置文件。执行完$ vagrant init后,在工作目录中,你会发现此文件。</p>
<h3 id="一、NOTE：配置版本说明："><a href="#一、NOTE：配置版本说明：" class="headerlink" title="一、NOTE：配置版本说明："></a>一、NOTE：配置版本说明：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</div><div class="line">  <span class="comment"># ...</span></div><div class="line">end</div></pre></td></tr></table></figure>
<blockquote>
<p>当前支持的两个版本:”1”和”2”. “1”：描述是Vagrant 1.0.x的配置（如看到Vagrant::Config.run do |config| 此也为Vagrant 1.0.x 的配置）；”2”：描述的是1.1+ leading up to 2.0.x的配置。vagrant 1.1+ 的Vagrantfiles能够与vagrant 1.0.x的Vagrantfiles保持向后兼容，也大幅引入新的功能和配置选项。</p>
</blockquote>
<h3 id="二、Vagrant基本设定"><a href="#二、Vagrant基本设定" class="headerlink" title="二、Vagrant基本设定"></a>二、Vagrant基本设定<a id="more"></a></h3><h4 id="设定VM的名称及记忆体"><a href="#设定VM的名称及记忆体" class="headerlink" title="设定VM的名称及记忆体"></a>设定VM的名称及记忆体</h4><p>用你最喜欢的编辑器打开vagrantfile，vagrantfile是个有着详细解释的设定档，在这个档案中所有的设定都被Vagrant::Config.run的Block包起来，在一开始只会有box的设定：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">config.vm.box = <span class="string">"ubuntu-12-10"</span></div></pre></td></tr></table></figure>
<p>这告诉了Vagrant要去使用哪个Box作为环境，也就是你一开始输入varant init Box名称时所指定的Box，如果没有输入Box名称的话就会是预设的base，Virtual Box本身提供了VBoxManage这个command line tool让你可以设定你的VM，用modifyvm这个指令让你可以设定VM的名称及记忆体大小等等，这里说的名称指的是在Virtual Box中显示的名称，我们也可以在vagrantfile中进行设定，在你的vagrantfile中加入这行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">config.vm.customize  [ <span class="string">"modifyvm"</span> ,  :id ,  <span class="string">"--name"</span> ,  <span class="string">"Mike"</span> ,  <span class="string">"--memory"</span> ,  <span class="string">"512"</span> ]</div></pre></td></tr></table></figure>
<p>这行设定档意思就是呼叫VBoxManage的modifyvm的指令，设定VM的名称为Mike，而设定VM的记忆体大小为512MB，你可以照这这种作法为你的VM设定好不同的设定。</p>
<h4 id="设定Hostname"><a href="#设定Hostname" class="headerlink" title="设定Hostname"></a>设定Hostname</h4><p>设定hostname非常简单，设定中加入下面这行就好</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">config.vm.host_name = <span class="string">"Mike-App"</span></div></pre></td></tr></table></figure>
<p>设定hostname非常重要，有很多服务都仰赖着hostname来做为辨识，例如Puppet或是Chef，一般一些监控服务像是New Relic之类的也都是以hostname来做为辨识。</p>
<h3 id="三、配置网络（本文将提供2种版本的常用配置，其中版本2的配置经过实践验证）"><a href="#三、配置网络（本文将提供2种版本的常用配置，其中版本2的配置经过实践验证）" class="headerlink" title="三、配置网络（本文将提供2种版本的常用配置，其中版本2的配置经过实践验证）"></a>三、配置网络（本文将提供2种版本的常用配置，其中版本2的配置经过实践验证）</h3><h4 id="端口转发：-假设虚拟机的80端口提供web服务，此处将通过访问物理机的8080端口转发到虚拟机的80端口，来实现web的访。开启host-only可直接访问虚拟机端口。"><a href="#端口转发：-假设虚拟机的80端口提供web服务，此处将通过访问物理机的8080端口转发到虚拟机的80端口，来实现web的访。开启host-only可直接访问虚拟机端口。" class="headerlink" title="端口转发：(假设虚拟机的80端口提供web服务，此处将通过访问物理机的8080端口转发到虚拟机的80端口，来实现web的访。开启host_only可直接访问虚拟机端口。)"></a>端口转发：(假设虚拟机的80端口提供web服务，此处将通过访问物理机的8080端口转发到虚拟机的80端口，来实现web的访。开启host_only可直接访问虚拟机端口。)</h4><p>版本”2”：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</div><div class="line">  config.vm.network :forwarded_port, guest: 80, host: 8080</div><div class="line">end</div></pre></td></tr></table></figure>
<blockquote>
<p>guest:80 表示虚拟机中的80端口，host:8080表示映射到宿主机的8080端口。</p>
</blockquote>
<p>版本”1”:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Vagrant::Config.run <span class="keyword">do</span> |config|</div><div class="line">  <span class="comment"># Forward guest port 80 to host port 8080</span></div><div class="line">  config.vm.forward_port 80, 8080</div><div class="line">end</div></pre></td></tr></table></figure>
<h4 id="桥接网络-公共网络，局域网DHCP服务器自动分配IP）"><a href="#桥接网络-公共网络，局域网DHCP服务器自动分配IP）" class="headerlink" title="桥接网络(公共网络，局域网DHCP服务器自动分配IP）"></a>桥接网络(公共网络，局域网DHCP服务器自动分配IP）</h4><p>如果需要将虚拟机作为当前局域网中的一台计算机，由局域网进行DHCP，那么在Vagrantfile中配置：</p>
<p>版本”2”</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</div><div class="line">  config.vm.network :public_network</div><div class="line">end</div></pre></td></tr></table></figure>
<p>版本”1”</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Vagrant::Config.run <span class="keyword">do</span> |config|</div><div class="line">  config.vm.network :bridged</div><div class="line">end</div><div class="line">  $ VBoxManage list bridgedifs | grep ^Name    <span class="comment">#可通过此命令查看本机的网卡</span></div><div class="line">    Name:            eth0</div><div class="line"></div><div class="line">指定网卡，配置可写为如下：</div><div class="line"></div><div class="line">Vagrant::Config.run <span class="keyword">do</span> |config|</div><div class="line">  config.vm.network :bridged, :bridge =&gt; <span class="string">"eth0"</span></div><div class="line">end</div></pre></td></tr></table></figure>
<h4 id="私有网络：允许多个虚拟机通过主机通过网络互相通信，vagrant允许用户分配一个静态IP，然后使用私有网络设置。"><a href="#私有网络：允许多个虚拟机通过主机通过网络互相通信，vagrant允许用户分配一个静态IP，然后使用私有网络设置。" class="headerlink" title="私有网络：允许多个虚拟机通过主机通过网络互相通信，vagrant允许用户分配一个静态IP，然后使用私有网络设置。"></a>私有网络：允许多个虚拟机通过主机通过网络互相通信，vagrant允许用户分配一个静态IP，然后使用私有网络设置。</h4><p>Vagrant默认是使用端口映射方式将虚拟机的端口映射本地从而实现类似<a href="http://localhost:80" target="_blank" rel="external">http://localhost:80</a>这种访问方式，这种方式比较麻烦。如果需要自己自由的访问虚拟机，但是别人不需要访问虚拟机，可以使用private_network，比起端口映射新开和修改端口的时候都得编辑相比较而言，host-only模式显得方便多了。</p>
<p>打开Vagrantfile，将下面这行的注释去掉(移除#)并保存：</p>
<p>版本”2”</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</div><div class="line">  config.vm.network :private_network, ip: <span class="string">"192.168.50.4"</span></div><div class="line">end</div></pre></td></tr></table></figure>
<p>版本”1”</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Vagrant::Config.run <span class="keyword">do</span> |config|</div><div class="line">  config.vm.network :hostonly, <span class="string">"192.168.50.4"</span></div><div class="line">end</div></pre></td></tr></table></figure>
<p>重启虚拟机，这样我们就能用 192.168.50.4访问这台机器了，你可以把IP 改成其他地址，只要不产生冲突就行。多台虚拟机的话需要互相访问的话，设置在相同网段即可。</p>
<h3 id="四、同步文件夹"><a href="#四、同步文件夹" class="headerlink" title="四、同步文件夹"></a>四、同步文件夹</h3><p>默认的，vagrant将共享你的工作目录(即Vagrantfile所在的目录)到虚拟机中的/vagrant,所以一般不需配置即可，如你需要可配置：</p>
<p>版本”1”</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">config.vm.share_folder <span class="string">"v-data"</span>, <span class="string">"/data"</span>, <span class="string">"data"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>把这一行的注释去掉，如上所说，第一个是个标志，第二个是你虚拟机里挂载的目录，第三个就是物理机的目录了，位置相对于Vagrantfile。这个目录是777的，可以随意修改删除，所有操作在虚拟机和本机都是同步的。</p>
</blockquote>
<p>版本”2”</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</div><div class="line">  <span class="comment"># other config here</span></div><div class="line">  config.vm.synced_folder <span class="string">"src/"</span>, <span class="string">"/srv/website"</span></div><div class="line">end</div></pre></td></tr></table></figure>
<blockquote>
<p>第一个参数”src/“是你的宿主机目录，可以用相对目录(位置相对于Vagrantfile)，这里也可以使用绝对路径，比如：”d:/www/“。第二个参数”/srv/website”是客户机的挂载的绝对目录。</p>
</blockquote>
<h3 id="五、vagrant和shell-实现在虚拟机启动的时候自运行需要的shell命令或脚本"><a href="#五、vagrant和shell-实现在虚拟机启动的时候自运行需要的shell命令或脚本" class="headerlink" title="五、vagrant和shell(实现在虚拟机启动的时候自运行需要的shell命令或脚本)"></a>五、vagrant和shell(实现在虚拟机启动的时候自运行需要的shell命令或脚本)</h3><h4 id="版本”2”"><a href="#版本”2”" class="headerlink" title="版本”2”"></a>版本”2”</h4><ul>
<li>内嵌脚本：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</div><div class="line">  config.vm.provision :shell,</div><div class="line">    :inline =&gt; <span class="string">"echo Hello, World"</span></div><div class="line">end</div><div class="line"></div><div class="line"><span class="comment">#复杂点的调用如下：</span></div><div class="line"><span class="variable">$script</span> = &lt;&lt;SCRIPT</div><div class="line"><span class="built_in">echo</span> I am provisioning...</div><div class="line">date &gt; /etc/vagrant_provisioned_at</div><div class="line">SCRIPT</div><div class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</div><div class="line">  config.vm.provision :shell, :inline =&gt; <span class="variable">$script</span></div><div class="line">end</div></pre></td></tr></table></figure>
<ul>
<li>外部脚本:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</div><div class="line">  config.vm.provision :shell, :path =&gt; <span class="string">"script.sh"</span>      <span class="comment">#脚本的路径相对于项目根，也可使用绝对路径</span></div><div class="line">end</div><div class="line"></div><div class="line"><span class="comment">#脚本可传递参数：</span></div><div class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</div><div class="line">  config.vm.provision :shell <span class="keyword">do</span> |s|</div><div class="line">    s.inline = <span class="string">"echo <span class="variable">$1</span>"</span></div><div class="line">    s.args   = <span class="string">"'hello, world!'"</span></div><div class="line">  end</div><div class="line">end</div></pre></td></tr></table></figure>
<h4 id="版本”1”"><a href="#版本”1”" class="headerlink" title="版本”1”:"></a>版本”1”:</h4><ul>
<li>内部脚本：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> Vagrant::Config.run <span class="keyword">do</span> |config|</div><div class="line">  config.vm.provision :shell, :inline =&gt; <span class="string">"echo abc &gt; /tmp/test"</span></div><div class="line">end</div></pre></td></tr></table></figure>
<ul>
<li>外部脚本：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Vagrant::Config.run <span class="keyword">do</span> |config|</div><div class="line">  config.vm.provision :shell, :path =&gt; <span class="string">"test.sh"</span></div><div class="line">end</div></pre></td></tr></table></figure>
<ul>
<li>脚本可传递参数：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Vagrant::Config.run <span class="keyword">do</span> |config|</div><div class="line">  config.vm.provision :shell <span class="keyword">do</span> |shell|</div><div class="line">    shell.inline = <span class="string">"echo <span class="variable">$1</span> &gt; /tmp/test"</span></div><div class="line">    shell.args = <span class="string">"'this is test'"</span></div><div class="line">  end</div><div class="line">end</div></pre></td></tr></table></figure>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>虽然不是必须，但是如果有需要在启动时运行一些脚本(环境的安装或者有些服务的启动需要在完成目录映射之后进行)，可以编辑脚本，类似如下(摘自Vagrant Document)：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line">	</div><div class="line">apt-get update</div><div class="line">apt-get install -y apache2</div><div class="line">rm -rf /var/www</div><div class="line">ln -fs /vagrant /var/www</div></pre></td></tr></table></figure>
<p>保存在和Vagrantfile相同目录，文件名自取(如boot.sh），然后在Vagrantfile中添加：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">config.vm.provision :shell, :path =&gt; <span class="string">"boot.sh"</span></div></pre></td></tr></table></figure>
<p>当初次使用基本的设置都完成则之后，则可以使用 vagrant up启动虚拟机</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Bringing machine <span class="string">'default'</span> up with <span class="string">'virtualbox'</span> provider...</div><div class="line">[default] Setting the name of the VM...</div><div class="line">[default] Clearing any previously <span class="built_in">set</span> forwarded ports...</div><div class="line">[default] Creating shared folders metadata...</div><div class="line">[default] Clearing any previously <span class="built_in">set</span> network interfaces...</div><div class="line">[default] Preparing network interfaces based on configuration...</div><div class="line">[default] You are trying to forward to privileged ports (ports &lt; = 1024). Most operating systems restrict this to only privileged process (typicallyprocesses running as an administrative user). This is a warning <span class="keyword">in</span> <span class="keyword">case</span></div><div class="line">the port forwarding doesn<span class="string">'t work. If any problems occur, please try a port higher than 1024.</span></div><div class="line">[default] Forwarding ports...</div><div class="line">[default] -- 22 =&gt; &lt;strong&gt;2222&lt;/strong&gt; (adapter 1)</div><div class="line">[default] -- 80 =&gt; 8080 (adapter 1)</div><div class="line">[default] Booting VM...</div><div class="line">[default] Waiting for VM to boot. This can take a few minutes.</div><div class="line">[default] VM booted and ready for use!</div><div class="line">[default] The guest additions on this VM do not match the installed version of VirtualBox! In most cases this is fine, but in rare cases it can cause things such as shared folders to not work properly. If you see shared folder errors, please update the guest additions within the virtual machine and reload your VM.</div><div class="line">	</div><div class="line">Guest Additions Version: 4.1.18</div><div class="line">VirtualBox Version: 4.2</div><div class="line">[default] Mounting shared folders...</div><div class="line">[default] -- /var/www</div><div class="line">[default] -- /vagrant</div><div class="line">[default] Running provisioner: shell...</div></pre></td></tr></table></figure>
<h3 id="六、vagrant和puppet"><a href="#六、vagrant和puppet" class="headerlink" title="六、vagrant和puppet"></a>六、vagrant和puppet</h3><p>puppet相关介绍:<a href="http://xuclv.blog.51cto.com/blog/5503169/1154261" target="_blank" rel="external">http://xuclv.blog.51cto.com/blog/5503169/1154261</a></p>
<ul>
<li>vagrant调用puppet单独使用</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</div><div class="line">  config.vm.provision :puppet <span class="keyword">do</span> |puppet|</div><div class="line">    puppet.manifests_path = <span class="string">"my_manifests"</span><span class="comment">#路径相对于项目根，如无配置此项，默认为manifests</span></div><div class="line">    puppet.manifest_file = <span class="string">"default.pp"</span>      <span class="comment">#如无配置此项，默认为default.pp</span></div><div class="line">    puppet.module_path = <span class="string">"modules"</span>        <span class="comment">#路径相对于根</span></div><div class="line">    puppet.options = <span class="string">"--verbose --debug"</span></div><div class="line">  end</div><div class="line">end</div><div class="line"></div><div class="line">默认配置的目录结构：</div><div class="line"> $ tree</div><div class="line">  .</div><div class="line">  |-- Vagrantfile</div><div class="line">  |-- manifests</div><div class="line">  |   |-- default.pp</div></pre></td></tr></table></figure>
<ul>
<li>vagrant让puppet作为代理，连接Puppet master</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span>|config|</div><div class="line">config.vm.provision :puppet_server <span class="keyword">do</span>|puppet|</div><div class="line">puppet.puppet_server = <span class="string">"puppet.example.com"</span><span class="comment">#master域名</span></div><div class="line">puppet.puppet_node = <span class="string">"node.example.com"</span><span class="comment">#传递给puppet服务器节点的名称。默认为”puppet“</span></div><div class="line">puppet.options = <span class="string">"--verbose --debug"</span><span class="comment">#选项</span></div><div class="line">end</div><div class="line">end</div></pre></td></tr></table></figure>
<blockquote>
<p>NOTE：<br>版本1配置差别不大，不再详述，区别：<code>Vagrant.configure(&quot;2&quot;) do |config|</code>改为<code>Vagrant::Config.run do |config|</code><br>以上Vagrantfile配置完毕后，可<code>$vagrant reload</code>重启虚拟机以来实现配置生效</p>
</blockquote>
<ul>
<li>官方实例：</li>
</ul>
<p>1.进入工作目录<br>2.修改Vagrantfile<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$vim</span> Vagrantfile    </div><div class="line"><span class="comment">#启用或添加如下行：</span></div><div class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</div><div class="line">  config.vm.provision :puppet    <span class="comment">#这里没有配置pp文件等的路径，全部采用默认</span></div><div class="line">  end</div><div class="line">end</div></pre></td></tr></table></figure></p>
<p>3.创建puppet的主目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$mkdir</span> manifests</div></pre></td></tr></table></figure></p>
<p>4.配置pp文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ vim manifests/default.pp</div><div class="line"><span class="comment"># Basic Puppet Apache manifest</span></div><div class="line">class apache &#123;</div><div class="line">  <span class="built_in">exec</span> &#123; <span class="string">'apt-get update'</span>:</div><div class="line">    <span class="built_in">command</span> =&gt; <span class="string">'/usr/bin/apt-get update'</span></div><div class="line">  &#125;</div><div class="line">  package &#123; <span class="string">"apache2"</span>:</div><div class="line">    ensure =&gt; present,</div><div class="line">  &#125;</div><div class="line">  service &#123; <span class="string">"apache2"</span>:</div><div class="line">    ensure =&gt; running,</div><div class="line">    require =&gt; Package[<span class="string">"apache2"</span>],</div><div class="line">  &#125;</div><div class="line">  file &#123; <span class="string">'/var/www'</span>:</div><div class="line">    ensure =&gt; link,</div><div class="line">    target =&gt; <span class="string">"/vagrant"</span>,</div><div class="line">    notify =&gt; Service[<span class="string">'apache2'</span>],</div><div class="line">    force  =&gt; <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">include apache</div></pre></td></tr></table></figure></p>
<p>5.重启虚拟机<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#重启后可看到虚拟机中已经安装好了apache</span></div><div class="line">$ vagrant reload</div></pre></td></tr></table></figure></p>
<h3 id="七、多虚拟机配置"><a href="#七、多虚拟机配置" class="headerlink" title="七、多虚拟机配置"></a>七、多虚拟机配置</h3><ul>
<li>配置语法</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">VAGRANTFILE_API_VERSION = <span class="string">"2"</span>    <span class="comment">#定义版本</span></div><div class="line">Vagrant.configure(VAGRANTFILE_API_VERSION) <span class="keyword">do</span> |config|  <span class="comment">#使用内部2版本</span></div><div class="line">  config.vm.define :debian1 <span class="keyword">do</span> |debian1|   <span class="comment">#定义第一台虚拟机，||里面就类似一个变量设置参数时使用 </span></div><div class="line">     debian1.vm.box = <span class="string">"debian1"</span>             <span class="comment">#设置box名为debian1</span></div><div class="line">     debian1.vm.host_name = <span class="string">"debian1"</span>      <span class="comment">#设置hostname为debian1</span></div><div class="line">     debian1.vm.network :private_network, ip: <span class="string">"192.168.1.11"</span> <span class="comment">#设置网络为内部网络 ip为192.168.1.11</span></div><div class="line">  end</div><div class="line">  config.vm.define :debian2 <span class="keyword">do</span> |debian2|</div><div class="line">     debian2.vm.box = <span class="string">"debian2"</span></div><div class="line">     debian2.vm.host_name = <span class="string">"debian2"</span></div><div class="line">     debian2.vm.network :private_network, ip: <span class="string">"192.168.1.12"</span></div><div class="line">  end</div><div class="line">  config.vm.define :debian3 <span class="keyword">do</span> |debian3|</div><div class="line">     debian3.vm.box = <span class="string">"debian3"</span></div><div class="line">     debian3.vm.host_name = <span class="string">"debian3"</span></div><div class="line">     debian3.vm.network :private_network, ip: <span class="string">"192.168.1.13"</span></div><div class="line">  end</div><div class="line"></div><div class="line">end</div></pre></td></tr></table></figure>
<blockquote>
<p>这里定义一个debian1、debian2、debian3三个虚拟机，并设置主机名、私有网络和IP地址。<br>注意：配置前关闭虚拟机，配置完后打开虚拟机。注意define用法，原单台机器的设定必须先清除或是注解掉。</p>
</blockquote>
<ul>
<li>实例</li>
</ul>
<p>让我们开始打造多机器环境</p>
<p>现在我们要建立多个VM，并且让他们互相沟通，一台Application、一台DB。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">config.vm.define:app <span class="keyword">do</span> |app_config| </div><div class="line">    app_config.vm.customize  [ <span class="string">"modifyvm"</span> ,  :id ,  <span class="string">"--name"</span> ,  <span class="string">"app"</span> ,  <span class="string">"--memory"</span> ,  <span class="string">"512"</span> ] </div><div class="line">    app_config.vm.box  =  <span class="string">"ubuntu-12-10"</span> </div><div class="line">    app_config.vm.host_name  =  <span class="string">"app"</span> </div><div class="line">    app_config.vm.network  :hostonly ,  <span class="string">"33.33.13.10"</span> </div><div class="line">end </div><div class="line">config.vm.define:db <span class="keyword">do</span> |db_config| </div><div class="line">  db_config.vm.customize  [ <span class="string">"modifyvm"</span> ,  :id ,  <span class="string">"--name"</span> ,  <span class="string">"db"</span> ,  <span class="string">"--memory"</span> ,  <span class="string">"512"</span> ] </div><div class="line">  db_config.vm.box  =  <span class="string">"ubuntu-12-10"</span> </div><div class="line">  db_config.vm.host_name  =  <span class="string">"db"</span> </div><div class="line">  db_config.vm.network  :hostonly ,  <span class="string">"33.33.13.11"</span> </div><div class="line">end</div></pre></td></tr></table></figure>
<p>这边的设定了app以及db两个VM的，并且给予不同的hostname和IP，设定好了以后再使用vagrant up将机器跑起来：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$vagrant</span>  up </div><div class="line">[ app ]  Importing  base  box  <span class="string">'ubuntu-12-10'</span> . . . </div><div class="line">[ app ]  Matching  MAC  address  <span class="keyword">for</span>  NAT  networking . . . </div><div class="line">[ app ]  Clearing  any  previously  <span class="built_in">set</span>  forwarded  ports . . . </div><div class="line">[ app ]  Forwarding  ports . . . </div><div class="line">[ app ]  --  22  =&gt;  2222  ( adapter  1 ) </div><div class="line">[ app ]  --  80  =&gt;  8080  ( adapter  1 ) </div><div class="line">[ app ]  Creating  shared  folders  metadata . . . </div><div class="line">[ app ]  Clearing  any  previously  <span class="built_in">set</span>  network  interfaces . . . </div><div class="line">[ app ]  Preparing  network  interfaces  based  on  configuration . . . </div><div class="line">[ app ]  Running  any  VM  customizations . . . </div><div class="line">[ app ]  Booting  VM . . . </div><div class="line">[ app ]  Waiting  <span class="keyword">for</span>  VM  to  boot .  This  can  take  a  few  minutes . </div><div class="line">[ app ]  VM  booted  and  ready  <span class="keyword">for</span>  use! </div><div class="line">[ app ]  Configuring  and  enabling  network  interfaces . . . </div><div class="line">[ app ]  Setting  host  name . . . </div><div class="line">[ app ]  Mounting  shared  folders . . . </div><div class="line">[ app ]  --  v - root :  /vagrant </div><div class="line">[db] Importing base box <span class="string">'ubuntu-12-10'</span>... </div><div class="line">[db] Matching MAC address <span class="keyword">for</span> NAT networking... </div><div class="line">[db] Clearing any previously <span class="built_in">set</span> forwarded ports... </div><div class="line">[db] Fixed port collision <span class="keyword">for</span> 22 =&gt; 2222. Now on port 2200. </div><div class="line">[db] Fixed port collision <span class="keyword">for</span> 22 =&gt; 2222. Now on port 2201. </div><div class="line">[db] Forwarding ports... </div><div class="line">[db] -- 22 =&gt; 2201 (adapter 1) </div><div class="line">[db] Creating shared folders metadata... </div><div class="line">[db] Clearing any previously <span class="built_in">set</span> network interfaces... </div><div class="line">[db] Preparing network interfaces based on configuration... </div><div class="line">[db] Running any VM customizations... </div><div class="line">[db] Booting VM... </div><div class="line">[db] Waiting <span class="keyword">for</span> VM to boot . This can take a few minutes. </div><div class="line">[db] VM booted and ready <span class="keyword">for</span> use! </div><div class="line">[db] Configuring and enabling network interfaces... </div><div class="line">[db] Setting host name... </div><div class="line">[db] Mounting shared folders... </div><div class="line">[db] -- v-root: / vagrant</div></pre></td></tr></table></figure>
<p>看到上面的信息完后，你就可以跟刚刚一样使用ssh连到VM里，多虚拟机环境下须加上你所指定的角色告诉你要连线的机器是哪一台：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$vagrant</span> ssh app </div><div class="line">vagrant@app :~ $ </div><div class="line"></div><div class="line"><span class="variable">$vagrant</span> ssh db </div><div class="line">vagrant@db :~ $</div></pre></td></tr></table></figure>
<p>验证VM之间的访问，让我们使用ssh登入db的机器，然后在db的机器上使用ssh来连线到app的机器(预设密码就是vagrant)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$vagrant</span> ssh db </div><div class="line">vagrant @db :~ $  ssh  33 . 33 . 13 . 10 </div><div class="line">The  authenticity  of  host  <span class="string">'33.33.13.10 (33.33.13.10)'</span>  can <span class="string">'t be established. </span></div><div class="line">ECDSA key fingerprint is a7:71:36:4c: 01:4a:38:a2:fc:fa:ea:d7:67:63:3c:40. </div><div class="line">Are you sure you want to continue connecting (yes/no)? yes </div><div class="line">Warning: Permanently added ' 33 . 33 . 13 . 10 <span class="string">' (ECDSA) to the list of known hosts. </span></div><div class="line">vagrant@33.33.13.10' s  password : </div><div class="line">vagrant @app :~ $</div></pre></td></tr></table></figure></p>
<h3 id="八、其它技巧"><a href="#八、其它技巧" class="headerlink" title="八、其它技巧"></a>八、其它技巧</h3><p>使用 Apache/Nginx 时会出现诸如图片修改后但页面刷新仍然是旧文件的情况，是由于静态文件缓存造成的。需要对虚拟机里的 Apache/Nginx 配置文件进行修改：</p>
<ul>
<li>Apache 配置添加:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EnableSendfile off</div></pre></td></tr></table></figure>
<ul>
<li>Nginx 配置添加:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sendfile off;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Web性能压力测试工具之Siege详解]]></title>
      <url>http://www.hi-linux.com/posts/50141.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>Siege是一款开源的压力测试工具，设计用于评估WEB应用在压力下的承受能力。可以根据配置对一个WEB站点进行多用户的并发访问，记录每个用户所有请求过程的相应时间，并在一定数量的并发访问下重复进行。siege可以从您选择的预置列表中请求随机的URL。所以siege可用于仿真用户请求负载，而ab则不能。但不要使用siege来执行最高性能基准调校测试，这方面ab就准确很多。</p>
</blockquote>
<p>Siege官网：<a href="http://www.joedog.org/" target="_blank" rel="external">http://www.joedog.org/</a><br>Siege下载：<a href="http://www.joedog.org/pub/siege/siege-latest.tar.gz" target="_blank" rel="external">http://www.joedog.org/pub/siege/siege-latest.tar.gz</a></p>
<h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><ul>
<li>编译安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wget http://www.joedog.org/pub/siege/siege-latest.tar.gz</div><div class="line">tar -zxvf siege-latest.tar.gz</div><div class="line"><span class="built_in">cd</span> siege-2.72/</div><div class="line">./configure</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
<ul>
<li>通过包安装</li>
</ul>
<p><strong>Debian/Ubuntu</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install siege</div></pre></td></tr></table></figure>
<p><strong>CentOS</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install siege</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="二、参数详解："><a href="#二、参数详解：" class="headerlink" title="二、参数详解："></a>二、参数详解：</h3><ul>
<li>命令行参数说明：</li>
</ul>
<blockquote>
<p>-C,或–config 在屏幕上打印显示出当前的配置,配置是包括在他的配置文件$HOME/.siegerc中,可以编辑里面的参数,这样每次siege 都会按照它运行.<br>-v 运行时能看到详细的运行信息<br>-c n,或–concurrent=n 指定并发的用户个数，-c 200指定并发数200。模拟有n个用户在同时访问,n不要设得太大,因为越大,siege 消耗本地机器的资源越多<br>-i,–internet 随机访问urls.txt中的url列表项,以此模拟真实的访问情况(随机性),当urls.txt存在是有效。默认为urls.txt列表从上到下来压。<br>-d n,–delay=n hit每个url之间的延迟,在0-n之间<br>-r n,–reps=n 重复运行测试n次,不能与-t同时存在<br>-t n,–time=n 持续时间。即测试持续时间。默认是分钟。例: -t10S,(10秒) -t5M,(5分钟) -t1H,(1小时)<br>-l 运行结束,将统计数据保存到日志文件中siege .log,一般位于/usr/local/var/siege .log中,也可在.siegerc中自定义<br>-R SIEGERC,–rc=SIEGERC 指定用特定的siege 配置文件来运行,默认的为$HOME/.siegerc<br>-f FILE, –file=FILE 指定用特定的urls文件运行siege ,默认为urls.txt,位于siege 安装目录下的etc/urls.txt<br>-u URL,–url=URL 测试指定的一个URL,对它进行”siege “,此选项会忽略有关urls文件的设定<br>-b 进行压力测试，不进行延时。<br>-A, –user-agent=”text” 设置请求的User-Agent</p>
</blockquote>
<ul>
<li>siegerc设定档说明：</li>
</ul>
<blockquote>
<p>verbose ：要不要显示过程。<br>display-id ：显示过程的时候，要不要显示模拟user的id<br>show-logfile ：跑完之后要不要显示log资讯<br>logging ：要不要log到档案<br>logfile ：要log到档案的话，档名是什么<br>protocol ：HTTP通讯协定( HTTP/1.1或HTTP/1.0 两者择一)<br>connection ：keep-alive表示模拟成persistent connection(写close则反之)<br>concurrent ：模拟有几个user来冲<br>time ：跑多久之后停止( H=hours, M=minutes, S=seconds)<br>reps ：每一个concurrent冲几次。<br>file ：多个目的url情形下的url档案位置。<br>url ：单一url情形下的指定url<br>delay ：非benchmakr行况下，每个模拟user随机延迟0到这个数字(单位：秒)。<br>timeout ：socket connection timeout(单位：秒)。<br>failures ：socket失败次数(timeouts, connection failures)到达这个数字就停下来。<br>internet ：随机从urls.txt抓出url，否则从urls.txt循序。<br>benchmark ：跑benchmark模式的话，siege将不会在每个connection间delay,适合拿来做load testing.<br>user-agent ：送出的agent识别<br>login ：WWW-Authenticate login( login = jdfulmer:topsecret:Admin )(非form based)<br>username,password ：也是login用的(非form based)<br>Login URL ：每一个模拟user都必需经过的第一个login url( form based)<br>proxy-host,proxy-port,proxy-login ：使用proxy的话要填这个。(proxy-login: jeff:secret:corporate)<br>follow-location ：redirection support<br>zero-data-ok ：接不接受zero-length data<br>chunked ：HTTP/1.1需要chunked encoding</p>
</blockquote>
<h3 id="三、用法举例"><a href="#三、用法举例" class="headerlink" title="三、用法举例"></a>三、用法举例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">siege -c 300 -r 100 <span class="_">-f</span> url.txt</div></pre></td></tr></table></figure>
<blockquote>
<p>说明：-c是并发量，-r是重复次数。url.txt就是一个文本文件，里面是要测试的url,url.txt每行都是一个url。</p>
</blockquote>
<p>urls.txt文件是很多行待测试URL的列表以换行符断开,格式为:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[protocol://]host.domain.com[:port][path/to/file]</div></pre></td></tr></table></figure>
<p><strong>url.txt内容:</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">http://192.168.80.166/01.jpg</div><div class="line">http://192.168.80.166/02.jpg</div><div class="line">http://192.168.80.166/03.jpg</div><div class="line">http://192.168.80.166/04.jpg</div><div class="line">http://192.168.80.166/05.jpg</div><div class="line">http://192.168.80.166/06.jpg</div></pre></td></tr></table></figure>
<p><strong>结果说明：</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">** SIEGE 2.72</div><div class="line">** Preparing 10 concurrent users <span class="keyword">for</span> battle.</div><div class="line">The server is now under siege..      done.</div><div class="line"></div><div class="line">Transactions:		         300 hits  <span class="comment">#已完成的事务总署</span></div><div class="line">Availability:		      100.00 %   <span class="comment">#完成的成功率</span></div><div class="line">Elapsed time:		        0.08 secs   <span class="comment">#总共使用的时间</span></div><div class="line">Data transferred:	        0.94 MB   <span class="comment">#响应中数据的总大小</span></div><div class="line">Response time:		        0.00 secs   <span class="comment">#显示网络连接的速度</span></div><div class="line">Transaction rate:	     3750.00 trans/sec  <span class="comment">#平均每秒完成的事务数</span></div><div class="line">Throughput:		       11.79 MB/sec  <span class="comment">#平均每秒传送的数据量</span></div><div class="line">Concurrency:		        8.50  <span class="comment">#实际最高并发链接数</span></div><div class="line">Successful transactions:         300  <span class="comment">#成功处理的次数</span></div><div class="line">Failed transactions:	           0    <span class="comment">#失败处理的次数</span></div><div class="line">Longest transaction:	        0.01   <span class="comment">#最长事务处理的时间</span></div><div class="line">Shortest transaction:	        0.00   <span class="comment">#最短事务处理时间</span></div></pre></td></tr></table></figure>
<h3 id="四、常用的siege命令举例"><a href="#四、常用的siege命令举例" class="headerlink" title="四、常用的siege命令举例"></a>四、常用的siege命令举例</h3><ul>
<li>200个并发对www.google.com发送请求100次</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">siege -c 200 -r 100 http://www.google.com</div></pre></td></tr></table></figure>
<ul>
<li>在urls.txt中列出所有的网址</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">siege -c 200 -r 100 <span class="_">-f</span> urls.txt</div></pre></td></tr></table></figure>
<ul>
<li>随机选取urls.txt中列出所有的网址</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">siege -c 200 -r 100 <span class="_">-f</span> urls.txt -i</div></pre></td></tr></table></figure>
<ul>
<li>delay=0，更准确的压力测试，而不是功能测试</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">siege -c 200 -r 100 <span class="_">-f</span> urls.txt -i -b</div></pre></td></tr></table></figure>
<ul>
<li>指定http请求头 文档类型</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">siege -H <span class="string">"Content-Type:application/json"</span> -c 200 -r 100 <span class="_">-f</span> urls.txt -i -b</div></pre></td></tr></table></figure>
<h3 id="五、Siege使用的一些总结"><a href="#五、Siege使用的一些总结" class="headerlink" title="五、Siege使用的一些总结"></a>五、Siege使用的一些总结</h3><ul>
<li>发送post请求时，url格式为：<a href="http://www.xxxx.com/" target="_blank" rel="external">http://www.xxxx.com/</a> POST p1=v1&amp;p2=v2</li>
<li>如果url中含有空格和中文，要先进行url编码，否则siege发送的请求url不准确</li>
<li>siege自身感觉也是有瓶颈的，并发数最大也就1000，再提高就会报下面这样的错误</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[error] socket: unable to connect sock.c:222: Operation already <span class="keyword">in</span> progress socket: connection timed out</div></pre></td></tr></table></figure>
<p>这样最终导致测试结果怎么都没法超过2W每秒的请求，所以就把siege -c 1000 -r 100 -i -b -f url.txt 放到shell中并发执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">user_agent=<span class="string">"Siege 1.0"</span></div><div class="line">siege_rc=<span class="string">"siege.rc"</span></div><div class="line">concurrent=150</div><div class="line">repet=200</div><div class="line">siege_single_urls=<span class="string">"singleurl.txt"</span></div><div class="line">siege_prefix_urls=<span class="string">"prefixurl.txt"</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..10&#125;</div><div class="line"><span class="keyword">do</span></div><div class="line">siege -c <span class="variable">$concurrent</span> -r <span class="variable">$repet</span> -i -b <span class="_">-f</span> <span class="variable">$siege_single_urls</span> -R <span class="variable">$siege_rc</span> -A <span class="string">"<span class="variable">$user_agent</span>"</span> &amp;;</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS下配置Apache HTTPS]]></title>
      <url>http://www.hi-linux.com/posts/18762.html</url>
      <content type="html"><![CDATA[<h3 id="一、安装Apache支持SSL-TLS"><a href="#一、安装Apache支持SSL-TLS" class="headerlink" title="一、安装Apache支持SSL/TLS"></a>一、安装Apache支持SSL/TLS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install mod_ssl openssl</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="二、创建证书"><a href="#二、创建证书" class="headerlink" title="二、创建证书"></a>二、创建证书</h3><blockquote>
<p>证书(Cerificate)的基本作用是将一个公钥和安全个体(个人、公司、组织等)的名字绑定在一起。</p>
<p>一般情况下，制作证书要经过几个步骤，如上图所示。首先用openssl genrsa生成一个私钥，然后用openssl req生成一个签署请求，最后把请求交给CA，CA签署后就成为该CA认证的证书了。如果在第二步请求时加上-x509参数，那么就直接生成一个self-signed的证书，即自己充当CA认证自己。<!--more--></p>
<p>除了这种方式外，在Debian或者Ubuntu系统中有更加简便的方法制作self-signed证书使用make-ssl-cert命令。该命令在ssl-cert的包里，一般会伴随着Apache的安装而安装，可能单独安装也可以。</p>
<p>如果您只是想做一张测试用的电子证书或不想花钱去找个 CA 签署，您可以造一张自签 (Self-signed) 的电子证书。当然这类电子证书没有任何保证，大部份软件偶到这证书会发出警告，甚至不接收这类证书。 使用自签名(self-signed)的证书，它的主要目的不是防伪，而是使用户和系统之间能够进行SSL通信，保证密码等个人信息传输时的安全。</p>
<p>这里先说下证书相关的几个名词：</p>
<p>RSA私钥能解密用证书公钥加密后的信息。通常以.key为后缀，表示私钥也称作密钥。是需要管理员小心保管，不能泄露的。</p>
<p>CSR(Certificate Signing Request)包含了公钥和名字信息。通常以.csr为后缀，是网站向CA发起认证请求的文件，是中间文件。</p>
<p>证书通常以.crt为后缀，表示证书文件。</p>
<p>CA(Certifying Authority)表示证书权威机构，它的职责是证明公钥属于个人、公司或其他的组织。</p>
</blockquote>
<p><strong>由于默认配置文件中证书名为localhost.crt和localhost.key，这里就按两个文件名生成。</strong></p>
<h4 id="步骤1、生成私钥"><a href="#步骤1、生成私钥" class="headerlink" title="步骤1、生成私钥"></a>步骤1、生成私钥</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /etc/pki/tls/private/</div><div class="line">openssl genrsa -des3 1024 &gt;localhost.key</div></pre></td></tr></table></figure>
<blockquote>
<p>注：采用DES3加密新产生的私钥localhost.key文件，每次要使用这个私钥时都要用输入密码。如果您的电子证书是用在apache等服务器中，您每次启动服务器时都要输入密码一次。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl genrsa 1024 &gt;localhost.key</div></pre></td></tr></table></figure>
<blockquote>
<p>注：采用128位rsa算法生成密钥localhost.key文件，这种方法产生的证书在apache等服务器中启动服务器时不会要求输入密码，同时也不会把私钥加密。 </p>
</blockquote>
<h4 id="步骤2-生成证书请求文件-Certificate-Signing-Request"><a href="#步骤2-生成证书请求文件-Certificate-Signing-Request" class="headerlink" title="步骤2: 生成证书请求文件(Certificate Signing Request)"></a>步骤2: 生成证书请求文件(Certificate Signing Request)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl req -new -key localhost.key &gt; localhost.csr</div></pre></td></tr></table></figure>
<blockquote>
<p>注：这是用步骤1的密钥生成证书请求文件localhost.csr, 这一步输入内容和创建自签名证书的内容类似，按要求输入就可以了。</p>
</blockquote>
<h4 id="步骤3-签署生成证书"><a href="#步骤3-签署生成证书" class="headerlink" title="步骤3: 签署生成证书"></a>步骤3: 签署生成证书</h4><ul>
<li>三方签署</li>
</ul>
<p>您只要把localhost.csr这个档案给第三方CA(Certificate Authority)机构签署生成证书就可以了。</p>
<ul>
<li>自签名证书<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl -x509 -req -days 365 -in localhost.csr -signkey localhost.key -out localhost.crt</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="三、配置Apache"><a href="#三、配置Apache" class="headerlink" title="三、配置Apache"></a>三、配置Apache</h3><p>ssl配置文件在/etc/httpd/conf.d/ssl.conf,默认就行，不需要更改。</p>
<p>这里看下证书及密钥的默认位置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cat /etc/httpd/conf.d/ssl.conf</div><div class="line"></div><div class="line">SSLCertificateFile /etc/pki/tls/certs/localhost.crt</div><div class="line">SSLCertificateKeyFile /etc/pki/tls/private/localhost.key</div></pre></td></tr></table></figure>
<h4 id="配置虚拟主机"><a href="#配置虚拟主机" class="headerlink" title="配置虚拟主机"></a>配置虚拟主机</h4><p>编辑ssl.conf文件，加入证书对应的主机头。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi /etc/httpd/conf.d/ssl.conf</div><div class="line"></div><div class="line">ServerName www.example.com</div></pre></td></tr></table></figure>
<h4 id="配置SSL证书"><a href="#配置SSL证书" class="headerlink" title="配置SSL证书"></a>配置SSL证书</h4><p>编辑配置文件，修改如下几行：</p>
<ul>
<li>如果是自签名证书，按如下配置：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vi /etc/httpd/conf.d/ssl.conf</div><div class="line"></div><div class="line">SSLEngine on</div><div class="line">SSLCertificateFile /etc/pki/tls/certs/localhost.crt</div><div class="line">SSLCertificateKeyFile /etc/pki/tls/private/localhost.key</div></pre></td></tr></table></figure>
<blockquote>
<p>注：如果SSLCertificateFile中指定的证书已包含相应私钥，SSLCertificateKeyFile这一行就可以注释掉。</p>
</blockquote>
<ul>
<li>如果是第三方签署的CA证书，按如下配置：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SSLEngine on</div><div class="line">SSLCertificateFile    /etc/ssl/certs/ssl-cert-snakeoil.pem</div><div class="line">SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key</div><div class="line">SSLCertificateChainFile /etc/ssl/certs/server-ca.crt</div></pre></td></tr></table></figure>
<blockquote>
<p>各指令含义：</p>
<p>SSLEngine ：这个指令用于开启或关闭SSL/TLS协议引擎。</p>
<p>SSLCertificateFile：该指令用于指定服务器持有的X.509证书(PEM编码)，其中还可以包含对应的RSA或DSA私钥。如果其中包含的私钥已经使用密语加密，那么在Apache启动的时候将会提示输入密语。</p>
<p>SSLCertificateKeyFile：指定了服务器私钥文件(PEM编码)的位置。如果SSLCertificateFile指定的服务器证书文件中不包含相应的私钥，那么就必须使用该指令，否则就不需要使用。</p>
<p>SSLCertificateChainFile：这个指令指定了一个多合一的CA证书，用于明确的创建服务器的证书链。这个证书链将被与服务器证书一起发送给客户端，由直接签发服务器证书的CA证书开始，按证书链顺序回溯，一直到根CA的证书结束，这一系列的CA证书(PEM格式)就构成了服务器的证书链。这有利于避免在执行客户端认证时多个CA证书之间出现混淆或冲突。</p>
</blockquote>
<h4 id="测试Apache-HTTPS"><a href="#测试Apache-HTTPS" class="headerlink" title="测试Apache HTTPS"></a>测试Apache HTTPS</h4><ul>
<li>重启Apache</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/httpd restart</div></pre></td></tr></table></figure>
<blockquote>
<p>注：如果有设置的私人密钥的密码，则会要求输入。</p>
<p>Apache/2.2.21 mod_ssl/2.2.21 (Pass Phrase Dialog)<br>Some of your private key files are encrypted for security reasons.<br>In order to read them you have to provide the pass phrases.</p>
<p>Server www.example.com:443 (RSA)<br>Enter pass phrase:<br>OK: Pass Phrase Dialog successful.</p>
</blockquote>
<ul>
<li>使用curl来验证</li>
</ul>
<p>curl <a href="https://localhost/" target="_blank" rel="external">https://localhost/</a> -k </p>
<blockquote>
<p>-k参数的意思是允许不验证访问SSL站点，因为如果要验证，就不能使用localhost做测试，而只能用生成证书时明确指定的域名。</p>
</blockquote>
<ul>
<li>使用浏览器</li>
</ul>
<p>访问服务器时输入<a href="https://域名(或IP)，浏览器会弹出安装服务器证明书的窗口。说明服务器已经支持SSL了。" target="_blank" rel="external">https://域名(或IP)，浏览器会弹出安装服务器证明书的窗口。说明服务器已经支持SSL了。</a></p>
<h3 id="四、其它知识点"><a href="#四、其它知识点" class="headerlink" title="四、其它知识点"></a>四、其它知识点</h3><p>在上面SSL站点配置文件中所使用的是”<em>default</em>“(默认虚拟主机)，下面说下相关的知识点。</p>
<p>“<em>default</em>“(默认虚拟主机)虚拟主机可以捕获所有指向没指定的IP地址和端口的请求。比如：一个没被任何虚拟主机使用的地址/端口对。</p>
<p>仅当没有其他虚拟主机符合客户端请求的IP地址和端口号时，”<em>default</em>“虚拟主机才会捕获这个请求。并且仅当”<em>default</em>“虚拟主机的端口号(默认值由您的Listen指定)与客户端发送请求的目的端口号相符时，这个请求才会被捕获。也可以使用通配符(例如：”<em>default</em>:*”)来捕获任何端口号的请求。</p>
<p>服务器配置示例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost _default_:443&gt;</div><div class="line">DocumentRoot /www/default</div><div class="line">......</div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>
<p>这段配置内容的意思是所有访问这个WEB服务器的443端口的请求会被这个默认虚拟主机处理。</p>
<p>另外仅当客户端连接的目的IP地址和端口号没有指定而且不与任何一个虚拟主机(包括”<em>default</em>“虚拟主机)匹配的时候，才会用主服务器来伺服请求。换句话说，主服务器仅捕获没有指定IP地址和端口的请求。</p>
<h3 id="五、参考文档"><a href="#五、参考文档" class="headerlink" title="五、参考文档"></a>五、参考文档</h3><blockquote>
<p><a href="http://www.goolge.com" target="_blank" rel="external">http://www.goolge.com</a><br><a href="http://www.itchenyi.com/4057.html" target="_blank" rel="external">http://www.itchenyi.com/4057.html</a><br><a href="http://www.centoscn.com/image-text/config/2013/1226/2269.html" target="_blank" rel="external">http://www.centoscn.com/image-text/config/2013/1226/2269.html</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python基础-import与from...import....]]></title>
      <url>http://www.hi-linux.com/posts/53412.html</url>
      <content type="html"><![CDATA[<h4 id="简单说说python-import与from…import…"><a href="#简单说说python-import与from…import…" class="headerlink" title="简单说说python import与from…import…."></a>简单说说python import与from…import….</h4><p>在python用import或者from…import来导入相应的模块。模块其实就一些函数和类的集合文件，它能实现一些相应的功能，当我们需要使用这些功能的时候，直接把相应的模块导入到我们的程序中，我们就可以使用了。这类似于C语言中的include头文件，Python中我们用import导入我们需要的模块。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line">print(<span class="string">'================Python import mode=========================='</span>);</div><div class="line"><span class="keyword">print</span> (<span class="string">'The command line arguments are:'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sys.argv:</div><div class="line">    <span class="keyword">print</span> (i)</div><div class="line"><span class="keyword">print</span> (<span class="string">'\n The python path'</span>,sys.path)</div><div class="line"></div><div class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv,path <span class="comment">#导入特定的成员</span></div><div class="line">print(<span class="string">'================python from import==================================='</span>)</div><div class="line">print(<span class="string">'path:'</span>,path)</div><div class="line"></div><div class="line">如果你要使用所有sys模块使用的名字，你可以这样：</div><div class="line"></div><div class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</div><div class="line">print(<span class="string">'path:'</span>,path)</div></pre></td></tr></table></figure>
<a id="more"></a>
<blockquote>
<p>从以上我们可以简单看出：<br>导入mode，import与from…import的不同之处在于，简单说：<br>如果你想要直接输入argv变量到你的程序中而每次使用它时又不想打sys，<br>则可使用：from sys import argv<br>一般说来，应该避免使用from..import而使用import语句，<br>因为这样可以使你的程序更加易读，也可以避免名称的冲突</p>
</blockquote>
<p>在使用 from xxx import * 时，如果想精准的控制模块导入的内容，可以使用 <strong>all</strong> = [xxx,xxx] 来实现，例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">two.py</div><div class="line"></div><div class="line">__all__ = [<span class="string">'a'</span>,<span class="string">'b'</span>] <span class="comment">#__为双横线</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">two</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'this is two'</span>)</div><div class="line">a = <span class="string">'this is two a'</span></div><div class="line">b = <span class="string">'this is two b'</span></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    t = two()</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">one.py</div><div class="line"></div><div class="line"><span class="keyword">from</span> two <span class="keyword">import</span> *</div><div class="line"><span class="keyword">print</span> a</div><div class="line"><span class="keyword">print</span> b</div><div class="line">t = two()</div></pre></td></tr></table></figure>
<p>这时，类two() 将不会被import * 导入进来</p>
<h4 id="关于Import中的路径搜索问题"><a href="#关于Import中的路径搜索问题" class="headerlink" title="关于Import中的路径搜索问题"></a>关于Import中的路径搜索问题</h4><p>类似于头文件，模块也是需要系统的搜索路径的，下面的命令即是系统默认的搜索路径，当你导入一个模块时，系统就会在下面的路径列表中搜索相应的文件。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">print(sys.path)</div><div class="line"></div><div class="line">[<span class="string">'/home/python/code'</span>, <span class="string">'/usr/lib64/python26.zip'</span>, <span class="string">'/usr/lib64/python2.6'</span>, <span class="string">'/usr/lib64/python2.6/plat-linux2'</span>, <span class="string">'/usr/lib64/python2.6/lib-tk'</span>, <span class="string">'/usr/lib64/python2.6/lib-old'</span>, <span class="string">'/usr/lib64/python2.6/lib-dynload'</span>, <span class="string">'/usr/lib64/python2.6/site-packages'</span>, <span class="string">'/usr/lib/python2.6/site-packages'</span>]</div></pre></td></tr></table></figure>
<p>(从例表中，我们可以看到python会首先在当前工作目录里去找)</p>
<p>如果没有找到相应的内容，则报错：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> syss</div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"D:/xxx/xxx/xx/Code/test.py"</span>, line <span class="number">19</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    <span class="keyword">import</span> syss</div><div class="line">ImportError: No module named syss</div></pre></td></tr></table></figure>
<p>当然，我们也可以自行添加要搜索路径。调用列表的append方法即可：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line">sys.path.append(<span class="string">'/home/python/newcode'</span>)</div></pre></td></tr></table></figure>
<h4 id="创建自己的模块"><a href="#创建自己的模块" class="headerlink" title="创建自己的模块"></a>创建自己的模块</h4><p>在创建之前，有一点需要说明一下：每个Python模块都有它的<strong>name</strong>（就每个对象都自己的<strong>doc</strong>一样）。通过<strong>name</strong>我们可以找出每一个模块的名称，一般<strong>name</strong>的值有两种：1 一是主模块名称为：”<strong>main</strong>“(可以理解为直接运行的那个文件)，2 那些被主模块导入的模块名称为：文件名字（不加后面的.py）。有<strong>name</strong>是很有用的，因为我们可以通过 if <strong>name</strong>  == ‘xxx’ 判断来执行那些模块，那些模块不被执行。另外：每个Python程序也是一个模块。它扩展名为：.py扩展名。</p>
<p>下面，我们通过例子来说明：<br>首先：我们创建模块：mymodel.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/user/bin/python</span></div><div class="line"><span class="comment">#Filename:mymodel.py</span></div><div class="line">version = <span class="string">'1.0'</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHello</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> (<span class="string">'Hello world'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">modelName</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> __name__<span class="comment">#返回它自己的名称</span></div><div class="line"><span class="comment">#end of model</span></div></pre></td></tr></table></figure>
<p>以上语句注意：</p>
<blockquote>
<p>1.这个模块应该被放置在我们输入它的程序的同一个目录中，或者在sys.path所列目录之一。<br>2.你已经看到，它与我们普通的Python程序相比并没有什么特别之处</p>
</blockquote>
<p>然后：我们在test.py中来调用此模块：test.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys,mymodel</div><div class="line">sys.path.append(<span class="string">'/home/python/newcode'</span>)<span class="comment">#提供搜索路径</span></div><div class="line">print(__name__) <span class="comment">#此处打印主模块的名称：__main__</span></div><div class="line">mymodel.sayHello()</div><div class="line">print(<span class="string">'Version'</span>,mymodel.version)</div><div class="line">print(<span class="string">'Model Name'</span>,mymodel.modelName())<span class="comment">#打印被导入模块的名称: mymodel</span></div></pre></td></tr></table></figure>
<p>我们使用from..import…</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'======================from.....import====================================='</span>)</div><div class="line"><span class="keyword">from</span> mymodel <span class="keyword">import</span> *</div><div class="line">print(__name__)<span class="comment">#此处打印主模块的名称：__main__</span></div><div class="line">sayHello()</div><div class="line">print(<span class="string">'Version'</span>,version)</div><div class="line">print(<span class="string">'Model Name'</span>,modelName()) <span class="comment">#打印被导入模块的名称: mymodel</span></div></pre></td></tr></table></figure>
<p>以上语句注意：</p>
<blockquote>
<p>1.我们可以通过import来导入多个模块，用“,”（逗号）分隔。<br>2.注意import与from..import…..</p>
</blockquote>
<h4 id="创建自己的包"><a href="#创建自己的包" class="headerlink" title="创建自己的包"></a>创建自己的包</h4><h5 id="1-一个包的基本组织如下："><a href="#1-一个包的基本组织如下：" class="headerlink" title="1.一个包的基本组织如下："></a>1.一个包的基本组织如下：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">FC/</div><div class="line">  __init__.py</div><div class="line">  Libr/</div><div class="line">    __init__.py</div><div class="line">    one.py</div><div class="line">    two.py</div><div class="line">    ....</div><div class="line">  Model/</div><div class="line">    __init__.py</div><div class="line">    one.py</div><div class="line">    ....</div></pre></td></tr></table></figure>
<blockquote>
<p>在外部加载调用时，有以下方式：<br>coding:utf-8<br>加载方式一<br>import Fc.Libr.one<br>print Fc.Libr.one.a<br>加载方式二<br>from Fc.Libr import one<br>print one.a<br>加载方式三<br>from Fc.Libr.one import a<br>print a<br>加载方式四<br>from Fc.Libr import *<br>print one.a</p>
<p>注意直接使用第四种方式是不能正确导入Libr下的one子模块的，这就需要在Fc目录下的<strong>init</strong>.py文件中定义好需要加载子模块的名称</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Fc/Libr/__init__.py</div><div class="line">__all__=[<span class="string">'one'</span>,<span class="string">'two'</span>] <span class="comment">#定义加载子模块的名称</span></div><div class="line">`</div></pre></td></tr></table></figure>
<blockquote>
<p>在加载包模块时，在import语句执行期时，遇到的所有<strong>init</strong>.py文件都会被执行，在上面代码中<br>首先会执行Fc目录中的<strong>int</strong>.py，然后执行Libr目录中的<strong>init</strong>.py</p>
</blockquote>
<h5 id="2-子模块加子模块问题"><a href="#2-子模块加子模块问题" class="headerlink" title="2.子模块加子模块问题"></a>2.子模块加子模块问题</h5><p>同一包的相同目录中：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="comment">#加载方式一:使用完全限定名称</span></div><div class="line"><span class="keyword">from</span> Fc.Libr <span class="keyword">import</span> one</div><div class="line">aa = <span class="string">'libr two load one---'</span>+one.a</div><div class="line"></div><div class="line"><span class="comment">#加载方式二:使用相对导入</span></div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> one</div><div class="line">bb = <span class="string">'libr two load one----'</span>+one.b</div><div class="line">方二中使用.来表示在同一级目录中。</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#加载方式三:(这种方式应当避免:最后找不到会转移到标准库)</span></div><div class="line"><span class="keyword">import</span> Fc.Libr.one</div><div class="line">cc = <span class="string">'libr two load one---'</span>+Fc.Libr.one.a</div><div class="line"></div><div class="line">在外部使用时：</div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">from</span> Fc.Libr <span class="keyword">import</span> *</div><div class="line"><span class="keyword">print</span> two.aa</div><div class="line"><span class="keyword">print</span> two.bb</div></pre></td></tr></table></figure>
<p>同一包的不同目录中：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">from</span> ..Model <span class="keyword">import</span> one</div><div class="line">a = <span class="string">'libr two load mode one---'</span>+one.a</div><div class="line"></div><div class="line">使用时：</div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">from</span> Fc.Libr <span class="keyword">import</span> *</div><div class="line"><span class="keyword">print</span> two.a</div><div class="line">将输出：libr two load mode one---fc model one</div><div class="line"></div><div class="line">另外在导入一个包时，会定义一个特殊的变量__path__，该变量包含一个目录列表。</div><div class="line">__path__可通过__init__.py文件中包含的代码访问，最初包含的一项具有包的目录名称。我们可以</div><div class="line">向__path__列表提供更多的目录，以更改查找子模块时使用的搜索路径，大型项目中这个很有用。</div></pre></td></tr></table></figure>
<blockquote>
<p>特别说明<br>1.import执行加载源文件中所有语名（所以模块是一个文件）。<br>2.import语句可以出现在程序中的任何位置。但是有一点是：无论import语句被使用了多少次，每个模块中的代码仅加载和执行一次，后续的import语句仅将模块名称绑定到前一次导入所创建的模块对象上。<br>3.值有种使用sys.modules可查看当前加载的所有模块。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python基础-join和split的常用使用方法]]></title>
      <url>http://www.hi-linux.com/posts/31739.html</url>
      <content type="html"><![CDATA[<h3 id="一、关于split-和-join-方法"><a href="#一、关于split-和-join-方法" class="headerlink" title="一、关于split 和 join 方法"></a>一、关于split 和 join 方法</h3><ol>
<li>只针对字符串进行处理。split:拆分字符串、join连接字符串</li>
<li>string.join(sep):以string作为分割符，将sep中所有的元素(字符串表示)合并成一个新的字符串</li>
<li>string.split(str=’ ‘,num=string.count(str)):以str为分隔，符切片string，如果num有指定值，则仅分隔num个子字符串。</li>
<li>对导入os模块进行os.path.splie()/os.path.join() 貌似是处理机制不一样，但是功能上一样。<a id="more"></a>
<h3 id="二、join方法"><a href="#二、join方法" class="headerlink" title="二、join方法"></a>二、join方法</h3></li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> a=<span class="string">'abcd'</span></div><div class="line"><span class="number">2</span> <span class="keyword">print</span> <span class="string">'.'</span>.join(a)   </div><div class="line"><span class="number">3</span> <span class="keyword">print</span> <span class="string">'|'</span>.join([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])　　<span class="comment">#可以把['a','b','c']看做是 a='abcd';下面同理</span></div><div class="line"><span class="number">4</span> <span class="keyword">print</span> <span class="string">'.'</span>.join(&#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>,<span class="string">'d'</span>:<span class="number">4</span>&#125;)</div><div class="line"></div><div class="line">对应输出：</div><div class="line"><span class="number">2</span> a.b.c.d</div><div class="line"><span class="number">3</span> a|b|c</div><div class="line"><span class="number">4</span> a.c.b.d</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：’.’等做分隔符，将join里的所有元素(字符串)通过分隔符连接成一个新的字符串<br>可能有人像我一样咬文嚼字，针对string.join()的定义爱钻牛角尖，硬生生地将[‘a’,’b’,’c’]先转换为字符串，然后在join</p>
</blockquote>
<p>如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> b=str([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</div><div class="line"><span class="number">2</span> <span class="keyword">print</span> <span class="string">'|'</span>.join(b)</div></pre></td></tr></table></figure></p>
<p>我以为这样是正解，但是不然。输出结果是：[|’|a|’|,| |’|b|’|,| |’|c|’|]，而导致与上面不一致的原因就是画蛇添足了，把[‘a’,’b’,’c’]转换成了字符串，在Python中，我们发现字符串、元祖、列表它们是序列类型，有着相同的访问方式，可以以下标来访问其中的元素。</p>
<p><strong>其它实例</strong></p>
<p><em>实例一</em></p>
<p>os.path.join(path1[,path2[,……]])</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> os.path.join(path1[, path2[, ...]])</div><div class="line"> <span class="number">2</span> </div><div class="line"> <span class="number">3</span> 将多个路径组合后返回，第一个绝对路径之前的参数将被忽略。</div><div class="line"> <span class="number">4</span> </div><div class="line"> <span class="number">5</span> &gt;&gt;&gt; os.path.join(<span class="string">'c:\\'</span>, <span class="string">'csv'</span>, <span class="string">'test.csv'</span>)</div><div class="line"> <span class="number">6</span> </div><div class="line"> <span class="number">7</span> <span class="string">'c:\\csv\\test.csv'</span></div><div class="line"> <span class="number">8</span> </div><div class="line"> <span class="number">9</span> &gt;&gt;&gt; os.path.join(<span class="string">'windows\temp'</span>, <span class="string">'c:\\'</span>, <span class="string">'csv'</span>, <span class="string">'test.csv'</span>)</div><div class="line"><span class="number">10</span> </div><div class="line"><span class="number">11</span> <span class="string">'c:\\csv\\test.csv'</span></div><div class="line"><span class="number">12</span> </div><div class="line"><span class="number">13</span> &gt;&gt;&gt; os.path.join(<span class="string">'/home/aa'</span>,<span class="string">'/home/aa/bb'</span>,<span class="string">'/home/aa/bb/c'</span>)</div><div class="line"><span class="number">14</span> </div><div class="line"><span class="number">15</span> <span class="string">'/home/aa/bb/c'</span></div></pre></td></tr></table></figure>
<p><em>实例二</em></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;li = [<span class="string">'my'</span>,<span class="string">'name'</span>,<span class="string">'is'</span>,<span class="string">'bob'</span>] </div><div class="line">&gt;&gt;&gt;<span class="string">' '</span>.join(li) </div><div class="line"><span class="string">'my name is bob'</span> </div><div class="line"> </div><div class="line">&gt;&gt;&gt;<span class="string">'_'</span>.join(li) </div><div class="line"><span class="string">'my_name_is_bob'</span> </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = [<span class="string">'my'</span>,<span class="string">'name'</span>,<span class="string">'is'</span>,<span class="string">'bob'</span>] </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">' '</span>.join(s) </div><div class="line"><span class="string">'my name is bob'</span> </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'..'</span>.join(s) </div><div class="line"><span class="string">'my..name..is..bob'</span></div></pre></td></tr></table></figure>
<h3 id="三、split方法"><a href="#三、split方法" class="headerlink" title="三、split方法"></a>三、split方法</h3><blockquote>
<p>split(…)<br>S.split([sep [,maxsplit]]) -&gt; 由字符串分割成的列表<br>返回一组使用分隔符（sep）分割字符串形成的列表。如果指定最大分割数，则在最大分割时结束。如果分隔符未指定或者为none，则分隔符默认为空格。</p>
</blockquote>
<p><em>实例一</em></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> s=<span class="string">'a b c'</span></div><div class="line"><span class="number">2</span> <span class="keyword">print</span> s.split(<span class="string">' '</span>)</div><div class="line"><span class="number">3</span> st=<span class="string">'hello world'</span></div><div class="line"><span class="number">4</span> <span class="keyword">print</span> st.split(<span class="string">'o'</span>)</div><div class="line"><span class="number">5</span> <span class="keyword">print</span> st.split(<span class="string">'o'</span>,<span class="number">1</span>)</div><div class="line"><span class="number">6</span> </div><div class="line"><span class="number">7</span> --------output---------</div><div class="line"><span class="number">8</span> [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"><span class="number">9</span> [<span class="string">'hell'</span>, <span class="string">' w'</span>, <span class="string">'rld'</span>]</div><div class="line"><span class="number">10</span> [<span class="string">'hell'</span>, <span class="string">' world'</span>]</div></pre></td></tr></table></figure>
<p>注意：分隔符不能为空，否则会出错如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#12&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    s.split(<span class="string">''</span>)</div><div class="line">ValueError: empty separator</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#但是可以有不含其中的分隔符</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.split(<span class="string">'x'</span>)</div><div class="line">[<span class="string">'a b c'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.split(<span class="string">'xsdfadsf'</span>)</div><div class="line">[<span class="string">'a b c'</span>]</div></pre></td></tr></table></figure>
<blockquote>
<p>os.path.split()<br>os.path.split是按照路径将文件名和路径分割开，比如d:\python\python.ext，可分割为[‘d:\python’, ‘python.exe’]，示例如下：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> <span class="keyword">import</span> os</div><div class="line"><span class="number">2</span> <span class="keyword">print</span> os.path.split(<span class="string">'c:\\Program File\\123.doc'</span>)</div><div class="line"><span class="number">3</span> <span class="keyword">print</span> os.path.split(<span class="string">'c:\\Program File\\'</span>)</div><div class="line"><span class="number">4</span> -----------------output---------------------</div><div class="line"><span class="number">5</span> (<span class="string">'c:\\Program File'</span>, <span class="string">'123.doc'</span>)</div><div class="line"><span class="number">6</span> (<span class="string">'c:\\Program File'</span>, <span class="string">''</span>)</div></pre></td></tr></table></figure>
<p><em>实例二</em></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">'my..name..is..bob'</span> </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.split() </div><div class="line">[<span class="string">'my..name..is..bob'</span>] </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.split(<span class="string">".."</span>) </div><div class="line">[<span class="string">'my'</span>, <span class="string">'name'</span>, <span class="string">'is'</span>, <span class="string">'bob'</span>] </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.split(<span class="string">".."</span>,<span class="number">0</span>) </div><div class="line">[<span class="string">'my..name..is..bob'</span>] </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.split(<span class="string">".."</span>,<span class="number">1</span>) </div><div class="line">[<span class="string">'my'</span>, <span class="string">'name..is..bob'</span>] </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.split(<span class="string">".."</span>,<span class="number">2</span>) </div><div class="line">[<span class="string">'my'</span>, <span class="string">'name'</span>, <span class="string">'is..bob'</span>] </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.split(<span class="string">".."</span>,<span class="number">-1</span>) </div><div class="line">[<span class="string">'my'</span>, <span class="string">'name'</span>, <span class="string">'is'</span>, <span class="string">'bob'</span>]</div></pre></td></tr></table></figure>
<p>可以看出 b.split(“..”,-1)等价于b.split(“..”) </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx技巧:在Server_Name指令中使用正则表达式]]></title>
      <url>http://www.hi-linux.com/posts/54148.html</url>
      <content type="html"><![CDATA[<h4 id="一、server-name的匹配顺序"><a href="#一、server-name的匹配顺序" class="headerlink" title="一、server_name的匹配顺序"></a>一、server_name的匹配顺序</h4><p>nginx中的server_name指令主要用于配置基于名称虚拟主机，server_name指令在接到请求后的匹配顺序分别为：</p>
<p>1、准确的server_name匹配，例如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  howtocn.org  www.howtocn.org;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>2、以*通配符开始的字符串：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  *.howtocn.org;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、以*通配符结束的字符串：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  www.*;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4、匹配正则表达式：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  ~^(?&lt;www&gt;.+)\.howtocn\.org$;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>nginx将按照1,2,3,4的顺序对server name进行匹配，只有有一项匹配以后就会停止搜索，所以我们在使用这个指令的时候一定要分清楚它的匹配顺序（类似于location指令）。</p>
<p>server_name指令一项很实用的功能便是可以在使用正则表达式的捕获功能，这样可以尽量精简配置文件，毕竟太长的配置文件日常维护也很不方便。</p>
<h4 id="二、实例"><a href="#二、实例" class="headerlink" title="二、实例"></a>二、实例</h4><p>下面是2个具体的应用：</p>
<p>1、在一个server块中配置多个站点</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">server</div><div class="line">  &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  ~^(www\.)?(.+)$;</div><div class="line">    index index.php index.html;</div><div class="line">    root  /data/wwwsite/<span class="variable">$2</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>站点的主目录应该类似于这样的结构：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/data/wwwsite/howtocn.org</div><div class="line">/data/wwwsite/linuxtone.org</div><div class="line">/data/wwwsite/baidu.com</div><div class="line">/data/wwwsite/google.com</div></pre></td></tr></table></figure>
<p>这样就可以只使用一个server块来完成多个站点的配置。</p>
<p>2、在一个server块中为一个站点配置多个二级域名</p>
<p>实际网站目录结构中我们通常会为站点的二级域名独立创建一个目录，同样我们可以使用正则的捕获来实现在一个server块中配置多个二级域名：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">server</div><div class="line">  &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  ~^(.+)?\.howtocn\.org$;</div><div class="line">    index index.html;</div><div class="line">    <span class="keyword">if</span> (<span class="variable">$host</span> = howtocn.org)&#123;</div><div class="line">        rewrite ^ http://www.howtocn.org permanent;</div><div class="line">    &#125;</div><div class="line">    root  /data/wwwsite/howtocn.org/<span class="variable">$1</span>/;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>站点的目录结构应该如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/data/wwwsite/howtocn.org/www/</div><div class="line">/data/wwwsite/howtocn.org/nginx/</div></pre></td></tr></table></figure>
<p>这样访问<code>http://www.howtocn.org</code>时root目录为<code>/data/wwwsite/howtocn.org/www/</code>，<code>http://nginx.howtocn.org</code>时为<code>/data/wwwsite/howtocn.org/nginx/</code>，以此类推。</p>
<p>后面if语句的作用是将howtocn.org的方位重定向到<code>http://www.howtocn.org</code>，这样既解决了网站的主目录访问，又可以增加seo中对<code>http://www.howtocn.org</code>的域名权重。</p>
<p>3、多个正则表达式</p>
<p>如果你在server_name中用了正则，而下面的location字段又使用了正则匹配，这样将无法使用$1，$2这样的引用，解决方法是通过set指令将其赋值给一个命名的变量：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">server</div><div class="line">   &#123;</div><div class="line">     listen      80;</div><div class="line">     server_name ~^(.+)?\.howtocn\.org$;</div><div class="line">     <span class="built_in">set</span> <span class="variable">$www_root</span> <span class="variable">$1</span>;</div><div class="line">     root /data/wwwsite/howtocn.org/<span class="variable">$www_root</span>/;</div><div class="line">     location ~ .*\.php?$ &#123;</div><div class="line">         fastcgi_pass   127.0.0.1:9000;</div><div class="line">         fastcgi_index  index.php;</div><div class="line">         fastcgi_param  SCRIPT_FILENAME /data/wwwsite/howtocn.org/<span class="variable">$fastcgi_script_name</span>;</div><div class="line">         include        fastcgi_params;</div><div class="line">         &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="三、参考资料"><a href="#三、参考资料" class="headerlink" title="三、参考资料"></a>三、参考资料</h4><p><a href="http://nginx.org/en/docs/http/server_names.html" target="_blank" rel="external">http://nginx.org/en/docs/http/server_names.html</a><br><a href="http://www.howtocn.org/nginx:server_name_how_to" target="_blank" rel="external">http://www.howtocn.org/nginx:server_name_how_to</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux群常见问题整理(三)]]></title>
      <url>http://www.hi-linux.com/posts/4728.html</url>
      <content type="html"><![CDATA[<p>[Linux群常见问题整理]坚持整理到了第三期，是个不错的开头。自我鼓励下，希望以后能一直坚持下去。哈哈！这次整理的一些小技巧都还是挺实用的。在发布到这里的同时，打算以后在CU上也发一份，把一些有用的知识点分享给更多学习Linux的朋友们。</p>
<p>Q：Linux终端下同时输入ctrl+v,ctrl+n回车后产生乱码？(提供人:Neil)<br>A：如果终端显示16进制字符E就会出现乱码，只要输入16进制F就能恢复。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">'\xf'</span></div></pre></td></tr></table></figure></p>
<p>Q：bash中如何取得当前进程的pid(提供人:galf）<br>A：用$$来取。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> $$</div></pre></td></tr></table></figure></p>
<p>Q：内核升级后重启内核失败的panic kill的问题(提供人:土猪一号)<a id="more"></a></p>
<p>重启内核失败的现象如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mount: could not find filesystem <span class="string">'/dev/root'</span></div><div class="line">setuproot: moving /dev failed: No such file or directory</div><div class="line">setuproot: error mounting /proc: No such file or directory</div><div class="line">setuproot: error mounting /sys: No such file or directory</div><div class="line">switchroot: mount failed: No such file or directory</div><div class="line">Kernel panic - not syncing: Attempted to <span class="built_in">kill</span> init!</div></pre></td></tr></table></figure></p>
<p>A：产生问题的主要原因：是由于无法加载磁盘硬件的模块驱动。解决方式主要是通过make menuconfig中加载sata sici的devices设备模块驱动。常用的驱动模块如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">insmod /lib/uhci-hcd.ko </div><div class="line">insmod /lib/ohci-hcd.ko </div><div class="line">insmod /lib/ehci-hcd.ko </div><div class="line">insmod /lib/jbd.ko</div><div class="line">insmod /lib/ext3.ko</div><div class="line">insmod /lib/scsi_mod.ko</div><div class="line">insmod /lib/sd_mod.ko</div><div class="line">insmod /lib/libata.ko</div><div class="line">insmod /lib/ahci.ko</div></pre></td></tr></table></figure></p>
<p>如果你initrd中已包含了相应的SATA驱动，出现这种现象的原因就可能是因为initrd是旧版本mkinitrd生成的。</p>
<p>解决方法就是加入对旧版sysfs路径的支持，方法如下:</p>
<p>a)、通过make menuconfig选中以下对应的选项<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">General setup--&gt; [*] <span class="built_in">enable</span> deprecated sysfs features to support old userspace tools</div></pre></td></tr></table></figure></p>
<p>b)、修改.config文件</p>
<p>修改.config文件中CONFIG_SYSFS_DEPRECATED_V2<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CONFIG_SYSFS_DEPRECATED_V2=y <span class="comment">#默认该选项为not set,被注释掉的。</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>注:修改这项是因为旧版的mkinitrd及其nash在内核没有CONFIG_SYSFS_DEPRECATED_V2参数时默认使用旧版sysfs路径格式，从而在新内核下无法正确访问/sys内的硬盘信息节点。</p>
</blockquote>
<p>Q：如何快速编译内核模块(提供人:枪炮)<br>A：常用的方法有以下两种：</p>
<p>方法一：</p>
<p>格式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make -C <span class="variable">$KDIR</span> M=<span class="variable">$PWD</span> modules</div></pre></td></tr></table></figure></p>
<p>例子：</p>
<p>如在内核源码树内<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make CONFIG_REISER4_FS=m M=fs/reiser4 modules</div></pre></td></tr></table></figure></p>
<p>如在内核源码树外<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">make CONFIG_FUSE_FS=m -C /home/blue/linux/linux-2.6.24.3 M=/home/blue/linux/linux-2.6.24.3/drivers/char/mydriver/ modules</div><div class="line"></div><div class="line">或者</div><div class="line"></div><div class="line">make KERNEL_DIR=xxx   M=<span class="variable">$PWD</span> modules　　//KERNEL_DIR也是内核源码所在的路径</div></pre></td></tr></table></figure></p>
<p>方法二</p>
<p>格式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make -C <span class="variable">$KDIR</span> SUBDIRS=<span class="variable">$PWD</span> modules</div></pre></td></tr></table></figure></p>
<p>例子：</p>
<p>如在内核源码树外<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cd /home/usb/usb-2.6.21.5/</span></div><div class="line">make -C /usr/src/linux/ SUBDIRS=<span class="variable">$PWD</span> modules</div></pre></td></tr></table></figure></p>
<p>如在内核源码树内<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make CONFIG_REISER4_FS=m SUBDIRS=fs/reiser4 modules</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注：make -C $KDIR用来指定内核源代码的路径。’$KDIR’描述内核源代码的目录。Make会进入实际指定的目录执行,但是完成执行时会返回当前的目录。M=用来告诉kbuild正在构建一个外部模块，M=是外部模块(kbuild文件)所在的目录。和M=选项一样,SUBDIRS=的效果一样，是旧的语法。保证向后兼容的。</p>
</blockquote>
<p>Q：kill指令的一些小技巧(提供人:土猪一号,Mike)<br>A：关闭当前shell下产生的所有进程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">kill</span> -9 0</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注：PID  0表同一进程组的进程</p>
</blockquote>
<p>关闭大于1所有进程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">kill</span> -9 -1</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注：man中的解释<br>-1 All processes with pid larger than 1 will be signaled。<br>  Kill all processes you can kill。</p>
</blockquote>
<p>检查PID是否存在<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">kill</span> -0 pid</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注：对于信号“0”MAN中的解释：exit code indicates if a signal may be sent</p>
</blockquote>
<p>Q：用phpize编译动态扩展模块？</p>
<p>A：phpize命令是用来准备PHP扩展模块的编译环境，通过phpize可以建立php的扩展模块。phpize是属于php-devel包中(档案预设存放于/usr/bin/phpize)。</p>
<p>整个过程和动态编译apache的模块非常相似，类似于apache的apxs</p>
<p>下面是一个例子，扩展模組的源程序位于extname目录中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> extname</div><div class="line">$ phpize</div><div class="line">$ ./configure     </div><div class="line">$ make</div><div class="line"><span class="comment"># make install</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：如在执行./configure时出现”configure: error: Cannot find php-config. Please use –with-php-config=PATH”时，说明你的配置文件位置可能不在缺省目录(–with-php-config预设在/usr/bin/php-config)。可重下类似以下指令调整：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure --with-php-config=/usr/<span class="built_in">local</span>/php/bin/php-config</div></pre></td></tr></table></figure></p>
</blockquote>
<p>这个文件通常是在php安装目录的bin目录下的一个文件名叫做php-config或者php-config5的文件。</p>
<p>然后把该目录下的extname.so复制到你php.ini中的extension_dir指向的目录中，最后需要调整php.ini文件，加入extension=extname.so这一行之后才能使用此扩展库。</p>
<p>重启web服务器,使你的php配置更新。用phpinfo()检查新模块是否生效。</p>
<p>任意建一个PHP页面，加入以下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?php phpinfo(); ?&gt;</div></pre></td></tr></table></figure></p>
<p>访问这个页面，如果增加了你刚刚添加的模块，基本上就证明OK了。</p>
<p>Q：一个不会kill shell自身的指令(提供人：竹)<br>A：killall5是SystemV中的一个killall(杀死所有进程)命令.它会向所有进程发送一个信号,但调用killall5命令的shell自身不会被kill(杀掉)。</p>
<p>命令格式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">killall5 -signalnumber</div></pre></td></tr></table></figure></p>
<p>Q：什么是dmraid?(提供人:金雕,Mike)</p>
<p>dmraid 全名为设备对应器磁盘阵列(Device Mapper RAID)，利用Linux内核提供的设备对应器（Device Mapper）机制，为多种磁盘阵列设备提供磁盘阵列的设备文件，让用户可以在Red Hat Enterprise Linux系统中使用硬件磁盘阵列设备。</p>
<p>dmraid主要针对BIOS RAID(Fake RAID)。</p>
<p>更详细的资料可见：<a href="http://www.babyface.idv.tw/NetAdmin/11200612dmraid/" target="_blank">dmraid介绍Linux上应用ATA/SATA RAID技术(原文)</a>#需翻墙<br>　　　　　　　　　<a href="http://www.php-oa.com/2008/01/31/dmraidjieshaolinuxshangyingyongatasataraidjishu.html" target="_blank">dmraid介绍Linux上应用ATA/SATA RAID技术(转载)</a>#墙内可访问　</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[批量杀死MySQL连接的几种方法]]></title>
      <url>http://www.hi-linux.com/posts/20834.html</url>
      <content type="html"><![CDATA[<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>通过information_schema.processlist表中的连接信息生成需要处理掉的MySQL连接的语句临时文件，然后执行临时文件中生成的指令。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select concat(<span class="string">'KILL '</span>,id,<span class="string">';'</span>) from information_schema.processlist <span class="built_in">where</span> user=<span class="string">'root'</span>;</div><div class="line">+------------------------+</div><div class="line">| concat(<span class="string">'KILL '</span>,id,<span class="string">';'</span>) |</div><div class="line">+------------------------+</div><div class="line">| KILL 3101;             |</div><div class="line">| KILL 2946;             |</div><div class="line">+------------------------+</div><div class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt;select concat(<span class="string">'KILL '</span>,id,<span class="string">';'</span>) from information_schema.processlist <span class="built_in">where</span> user=<span class="string">'root'</span> into outfile <span class="string">'/tmp/a.txt'</span>;</div><div class="line">Query OK, 2 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt;<span class="built_in">source</span> /tmp/a.txt;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>杀掉当前所有的MySQL连接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqladmin -uroot -p processlist|awk -F <span class="string">"|"</span> <span class="string">'&#123;print $2&#125;'</span>|xargs -n 1 mysqladmin -uroot -p <span class="built_in">kill</span></div></pre></td></tr></table></figure></p>
<p>杀掉指定用户运行的连接，这里为Mike<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqladmin -uroot -p processlist|awk -F <span class="string">"|"</span> <span class="string">'&#123;if($3 == "Mike")print $2&#125;'</span>|xargs -n 1 mysqladmin -uroot -p <span class="built_in">kill</span></div></pre></td></tr></table></figure></p>
<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>通过SHEL脚本实现<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#杀掉锁定的MySQL连接</span></div><div class="line"><span class="keyword">for</span> id <span class="keyword">in</span> `mysqladmin processlist|grep -i locked|awk <span class="string">'&#123;print $1&#125;'</span>`</div><div class="line"><span class="keyword">do</span></div><div class="line">   mysqladmin <span class="built_in">kill</span> <span class="variable">$&#123;id&#125;</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<h3 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h3><p>通过Maatkit工具集中提供的mk-kill命令进行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#杀掉超过60秒的sql</span></div><div class="line">mk-kill -busy-time 60 -kill</div><div class="line"><span class="comment">#如果你想先不杀，先看看有哪些sql运行超过60秒</span></div><div class="line">mk-kill -busy-time 60 -print</div><div class="line"><span class="comment">#如果你想杀掉，同时输出杀掉了哪些进程</span></div><div class="line">mk-kill -busy-time 60 -print –<span class="built_in">kill</span></div></pre></td></tr></table></figure>
<h3 id="mk-kill更多用法可参考："><a href="#mk-kill更多用法可参考：" class="headerlink" title="mk-kill更多用法可参考："></a>mk-kill更多用法可参考：</h3><blockquote>
<p><a href="http://www.maatkit.org/doc/mk-kill.html" target="_blank" rel="external">http://www.maatkit.org/doc/mk-kill.html</a><br>  <a href="http://www.sbear.cn/archives/426" target="_blank" rel="external">http://www.sbear.cn/archives/426</a></p>
</blockquote>
<h3 id="Maatkit工具集的其它用法可参考："><a href="#Maatkit工具集的其它用法可参考：" class="headerlink" title="Maatkit工具集的其它用法可参考："></a>Maatkit工具集的其它用法可参考：</h3><blockquote>
<p><a href="http://code.google.com/p/maatkit/wiki/TableOfContents?tm=6" target="_blank" rel="external">http://code.google.com/p/maatkit/wiki/TableOfContents?tm=6</a></p>
</blockquote>
<h3 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h3><blockquote>
<p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://blog.chinaunix.net/space.php?uid=23014360&amp;do=blog&amp;id=484812" target="_blank" rel="external">http://blog.chinaunix.net/space.php?uid=23014360&amp;do=blog&amp;id=484812</a><br><a href="http://www.orczhou.com/index.php/2010/10/kill-mysql-connectio-in-batch/" target="_blank" rel="external">http://www.orczhou.com/index.php/2010/10/kill-mysql-connectio-in-batch/</a><br><a href="http://www.mysqlperformanceblog.com/2009/05/21/mass-killing-of-mysql-connections/" target="_blank" rel="external">http://www.mysqlperformanceblog.com/2009/05/21/mass-killing-of-mysql-connections/</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[查看Linux系统信息的Web面板psdash]]></title>
      <url>http://www.hi-linux.com/posts/14968.html</url>
      <content type="html"><![CDATA[<p>psdash是一款查看Linux系统信息的web面板，psDash的系统信息的采集也是由psutil完成的。psdash没有提供API，只带了一个基于Flask的web界面，默认每3秒刷新一次数据和界面。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>通过pip安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install psdash</div></pre></td></tr></table></figure>
<ul>
<li>通过源码安装</li>
</ul>
<h4 id="安装依赖环境"><a href="#安装依赖环境" class="headerlink" title="安装依赖环境"></a>安装依赖环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Ubuntu</div><div class="line">apt-get install git gcc python-dev python-setuptools</div><div class="line"></div><div class="line">Centos</div><div class="line">yum  install python-devel python-setuptools</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="下载psdash源代码后安装"><a href="#下载psdash源代码后安装" class="headerlink" title="下载psdash源代码后安装:"></a>下载psdash源代码后安装:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /var/www/</div><div class="line">git <span class="built_in">clone</span> https://github.com/Jahaja/psdash.git</div><div class="line"><span class="built_in">cd</span> /var/www/psdash</div><div class="line">python setup.py install</div></pre></td></tr></table></figure>
<h4 id="启动psdash："><a href="#启动psdash：" class="headerlink" title="启动psdash："></a>启动psdash：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">psdash --log /var/<span class="built_in">log</span>/psdash.log --log /var/<span class="built_in">log</span>/mydb.log</div></pre></td></tr></table></figure>
<blockquote>
<p>注：<br>1.log参数后跟的是需监控的日志文件路径，可同时监控多个。<br>2.默认绑定到5000端口。</p>
</blockquote>
<h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><blockquote>
<p>Available command-line arguments:</p>
<p>usage: psdash [-h] [-l path] [-b host] [-p port] [-d]</p>
<p>psdash 0.2.0 - system information web dashboard</p>
<p>optional arguments:<br>  -h, –help            show this help message and exit<br>  -l path, –log path   log files to make available for psdash. This option<br>                        can be used multiple times.<br>  -b host, –bind host  host to bind to. Defaults to 0.0.0.0 (all interfaces).<br>  -p port, –port port  port to listen on. Defaults to 5000.<br>  -d, –debug           enables debug mode.</p>
</blockquote>
<h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p>打开浏览器访问 <a href="http://ip:5000/" target="_blank" rel="external">http://ip:5000/</a></p>
<p><img src="https://raw.githubusercontent.com/Jahaja/psdash/master/docs/screenshots/overview.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS下实现SFTP CHROOT的几种方法]]></title>
      <url>http://www.hi-linux.com/posts/15727.html</url>
      <content type="html"><![CDATA[<h3 id="一、通过MySecureShell实现"><a href="#一、通过MySecureShell实现" class="headerlink" title="一、通过MySecureShell实现"></a>一、通过MySecureShell实现</h3><h4 id="什么是MySecureShell"><a href="#什么是MySecureShell" class="headerlink" title="什么是MySecureShell"></a>什么是MySecureShell</h4><blockquote>
<p>MySecureShell is a sftp-server developing tool which help to make a ftp server like proftpd but very securised with SSH encryption. This software is highly configurable and very easy to install and use.<a id="more"></a></p>
</blockquote>
<h4 id="安装MySecureShell"><a href="#安装MySecureShell" class="headerlink" title="安装MySecureShell"></a>安装MySecureShell</h4><ul>
<li>配置三方软件源</li>
</ul>
<h5 id="Centos-5"><a href="#Centos-5" class="headerlink" title="Centos 5"></a>Centos 5</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/yum.repos.d/mysecureshell.repo</div><div class="line"></div><div class="line">[mysecureshell]</div><div class="line">name=MySecureShell</div><div class="line">baseurl=http://mysecureshell.free.fr/repository/index.php/centos/5.5/</div><div class="line">enabled=1</div><div class="line">gpgcheck=0</div></pre></td></tr></table></figure>
<h5 id="Centos-6"><a href="#Centos-6" class="headerlink" title="Centos 6"></a>Centos 6</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/yum.repos.d/mysecureshell.repo</div><div class="line"></div><div class="line">[mysecureshell]</div><div class="line">name=MySecureShell</div><div class="line">baseurl=http://mysecureshell.free.fr/repository/index.php/centos/6.4/</div><div class="line">enabled=1</div><div class="line">gpgcheck=0</div></pre></td></tr></table></figure>
<ul>
<li>安装MySecureShell</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum --disablerepo=\* --enablerepo=mysecureshell install mysecureshell</div></pre></td></tr></table></figure>
<h4 id="配置MySecureShell"><a href="#配置MySecureShell" class="headerlink" title="配置MySecureShell"></a>配置MySecureShell</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ vi  /etc/ssh/sftp_config</div><div class="line"></div><div class="line">主要修改以下几项</div><div class="line">LimitConnection         10      #max connection for the server sftp</div><div class="line">LimitConnectionByUser   1       #max connection for the account</div><div class="line">LimitConnectionByIP     2       #max connection by ip for the account</div><div class="line">Home                    /home/$USER     #overrite home of the user but if you want you can use</div><div class="line">                                        #environment variable (ie: Home /home/$USER)</div></pre></td></tr></table></figure>
<blockquote>
<p>LimitConnectionByUser、LimitConnectionByIP、LimitConnection根据需要可适当调大点，不然可能会现连接不上的现像。Home这项如果建用户时指定了主目录且不在缺省的/home下，可以把这项注释掉或修改为用户主目录所在位置。如果用户主目录在/home下可保持不变。</p>
</blockquote>
<h5 id="修改用户Shell为MySecureShell"><a href="#修改用户Shell为MySecureShell" class="headerlink" title="修改用户Shell为MySecureShell"></a>修改用户Shell为MySecureShell</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chsh -s /bin/MySecureShell mike</div></pre></td></tr></table></figure>
<h3 id="二、通过OpenSSH的internal-sftp实现"><a href="#二、通过OpenSSH的internal-sftp实现" class="headerlink" title="二、通过OpenSSH的internal-sftp实现"></a>二、通过OpenSSH的internal-sftp实现</h3><p>如果要启用OpenSSH自带的的Chroot功能，OpenSSH版本必需在在4.8p1以上。</p>
<h4 id="检查OpenSSH版本"><a href="#检查OpenSSH版本" class="headerlink" title="检查OpenSSH版本"></a>检查OpenSSH版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ rpm -qa|grep openssh</div><div class="line"></div><div class="line">openssh-4.3p2-26.el5</div><div class="line">openssh-server-4.3p2-26.el5</div><div class="line">openssh-askpass-4.3p2-26.el5</div><div class="line">openssh-clients-4.3p2-26.el5</div></pre></td></tr></table></figure>
<p>由于CentOS5.X自带的OpenSSH版本过低不支持SFTP CHROOT,所以需要先把SSH升级到4.8P1以上。升级可参考：<a href="http://www.mike.org.cn/articles/centos-install-openssh/" target="_blank" rel="external">CentOS下安装OpenSSH 5.8的三种方法</a></p>
<h4 id="创建用于SFTP的用户"><a href="#创建用于SFTP的用户" class="headerlink" title="创建用于SFTP的用户"></a>创建用于SFTP的用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ useradd  -d /home/TempUpload/ -M test2</div></pre></td></tr></table></figure>
<h4 id="配置sshd-config"><a href="#配置sshd-config" class="headerlink" title="配置sshd_config"></a>配置sshd_config</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ vi  /etc/ssh/sshd_config</div><div class="line"></div><div class="line">#注释原本的Subsystem设置</div><div class="line">Subsystem	sftp	/usr/libexec/openssh/sftp-server</div><div class="line"></div><div class="line">#启用internal-sftp</div><div class="line">Subsystem       sftp    internal-sftp</div><div class="line"></div><div class="line">Match User	test2 </div><div class="line">ChrootDirectory /home/TempUpload</div><div class="line">ForceCommand	internal-sftp</div></pre></td></tr></table></figure>
<blockquote>
<p>Match user设定要被chroot的用户，若要设定多个帐号, 帐号间以逗号隔开。例如：Match user userA,userB</p>
<p>如果是群组的则将User改为Group后，再接群组名称。例如：Match Group rootedSFTP</p>
<p>ChrootDirectory设定要chroot的位置，可以加上PATTERNS做区隔。如/home/%u，%u表示用户变量，%h为限制到用户的主目录。更多可见:man sshd_config</p>
</blockquote>
<h4 id="设定Chroo目录权限"><a href="#设定Chroo目录权限" class="headerlink" title="设定Chroo目录权限"></a>设定Chroo目录权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ chown root:root /home/TempUpload</div><div class="line">$ chmod 755 /home/TempUpload</div></pre></td></tr></table></figure>
<blockquote>
<p>错误的目录权限设定会导致在log中出现”fatal: bad ownership or modes for chroot directory XXXXXX” 的讯息。<br>目录的权限设定有两个要点：<br>1、由ChrootDirectory指定的目录开始一直往上到系统根目录为止的目录拥有者都只能是root<br>2、由ChrootDirectory指定的目录开始一直往上到系统根目录为止都不可以具有群组写入权限</p>
</blockquote>
<h4 id="建立SFTP用户登入后可写入的目录"><a href="#建立SFTP用户登入后可写入的目录" class="headerlink" title="建立SFTP用户登入后可写入的目录"></a>建立SFTP用户登入后可写入的目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir /home/TempUpload/Upload</div><div class="line">$ chown test2:test2 /home/TempUpload/Upload</div></pre></td></tr></table></figure>
<h4 id="检查sshd-config內容是否正确"><a href="#检查sshd-config內容是否正确" class="headerlink" title="检查sshd_config內容是否正确"></a>检查sshd_config內容是否正确</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sshd -T</div></pre></td></tr></table></figure>
<h4 id="重新启动sshd"><a href="#重新启动sshd" class="headerlink" title="重新启动sshd"></a>重新启动sshd</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ service sshd restart</div></pre></td></tr></table></figure>
<h3 id="三、其它方法"><a href="#三、其它方法" class="headerlink" title="三、其它方法"></a>三、其它方法</h3><p>　　还可通过scponly和rssh实现，这两个的原理和MySecureShell差不多，不过这两个必须先做得做一个CHROOT环境，相对比较麻烦些。</p>
<p>　　有兴趣的可以看下下面这些资料：</p>
<blockquote>
<p>RSSH<br><a href="http://www.sky-hosts.com/rsshchroot.html" target="_blank" rel="external">http://www.sky-hosts.com/rsshchroot.html</a><br><a href="http://7056824.blog.51cto.com/69854/247666" target="_blank" rel="external">http://7056824.blog.51cto.com/69854/247666</a><br><a href="http://blog.zol.com.cn/1710/article_1709770.html" target="_blank" rel="external">http://blog.zol.com.cn/1710/article_1709770.html</a><br><a href="http://blog.sina.com.cn/s/blog_704836f40100m21o.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_704836f40100m21o.html</a></p>
<p>ScpOnly<br><a href="http://dev.yidianhulian.com/2011/01/19/how-to-install-scp/" target="_blank" rel="external">http://dev.yidianhulian.com/2011/01/19/how-to-install-scp/</a><br><a href="http://dev.firnow.com/course/6_system/linux/Linuxjs/20090824/170790.html" target="_blank" rel="external">http://dev.firnow.com/course/6_system/linux/Linuxjs/20090824/170790.html</a><br><a href="http://www.604f.com/read.php?18" target="_blank" rel="external">http://www.604f.com/read.php?18</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用Portspoof欺骗扫描Port的入侵者]]></title>
      <url>http://www.hi-linux.com/posts/42020.html</url>
      <content type="html"><![CDATA[<p>Portspoof程序旨在通过在原本封闭的端口上模拟仿真合法的服务签名，加强操作系统的安全性。它本来就是一个轻便、快速、便携、安全的附件，可以添加到任何防火墙系统或安全基础设施上。</p>
<p>这款程序的基本目的就是，让端口扫描软件(Nmap/Unicornscan/等)进程运行缓慢，让输出结果非常难以解读，从而使攻击侦察阶段成为一项难度大又麻烦的任务。</p>
<p>我发觉这个小程序背后的概念很有意思：不是用防火墙堵住所有端口，而是欺骗真实端口，因而让针对你的服务器/计算机运行端口扫描的那些家伙无功而返。</p>
<p>Portspoof程序的主要目的是，通过攻击者对你系统进行侦察的过程中减缓攻击者攻击速度，并阻止攻击者保持低调的一系列技巧，加强操作系统的安全性。</p>
<p>默认情况下，攻击者的侦察阶段应该很费时，而且很容易被你的入侵检测系统所发现。</p>
<p>主动(进攻性)防御的艺术</p>
<p>Portspoof还可以用作”漏洞框架前端”(Exploitation Framework Frontend)，这可以将你的系统变成一台反应迅即、具有攻击性的机器。实际上，这意味着你的服务器能够自动利用攻击者的工具和漏洞。这种方法纯粹基于主动(进攻性)防御理念。<br><a id="more"></a></p>
<h3 id="一、特点"><a href="#一、特点" class="headerlink" title="一、特点"></a>一、特点</h3><p>快速：多线程(默认情况下10个线程处理新的入站连接)。<br>轻便：所需的系统资源数量极少。<br>便携：可以在Linux和BSD(直到版本0.3)上运行。<br>灵活：你可以轻松使用防火墙规则，定义将被欺骗的端口。<br>对付流行的端口扫描工具很有效。<br>超过8000多个假签名可以骗倒端口扫描工具。<br>采用开源技术。</p>
<h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><p>Portspoof是一款免费的软件，采用GNU GPL版本2许可证发行，它并不以任何软件库中程序包的方式出现，或者至少我还没有发现这种方式，所以想安装它，你就得从官方网站下载zip文件(<a href="https://github.com/drk1wi/portspoof/archive/master.zip" target="_blank" rel="external">https://github.com/drk1wi/portspoof/archive/master.zip</a>)，或者从Github(<a href="https://github.com/drk1wi/portspoof" target="_blank" rel="external">https://github.com/drk1wi/portspoof</a>)克隆源软件库，然后遵循下面这些简单的操作步骤：</p>
<p>1.编译软件，进入到你解压缩/放置源文件的目录，然后运行这些命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/drk1wi/portspoof/archive/master.zip -O master.zip</div><div class="line">unzip master.zip</div><div class="line"><span class="built_in">cd</span> portspoof-master</div><div class="line">./configure</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
<p>2.配置防火墙规则(portspoof预设端口为4444)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -t nat -A PREROUTING -i eth0 -p tcp -m tcp --dport 1:65535 -j REDIRECT --to-ports 4444</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：Portspoof默认情况下会侦听所有网络接口的tcp4444端口。这条防火墙规则会导致服务骗过端口1至端口65535。如果你想访问合法服务，就得将这些服务的端口排除在REDIRECT语句之外!</p>
</blockquote>
<ul>
<li>如需开放22端口</li>
</ul>
<p>方法一</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -t nat -A PREROUTING -i eth0 -p tcp -m tcp ! --dport  22 -j REDIRECT --to-ports 4444</div></pre></td></tr></table></figure>
<p>方法二</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#开放系統服务端口</span></div><div class="line">iptables -t nat -A PREROUTING -p tcp -m multiport --dports 22,25,993,995 -j ACCEPT</div><div class="line"><span class="comment">#其它所有端口转向portspoof的4444端口</span></div><div class="line">iptables -t nat -A PREROUTING -p tcp --dport 1:65535 -j REDIRECT --to-ports 4444</div></pre></td></tr></table></figure>
<blockquote>
<p>注: 当封包走向系统真实服务的端口(tcp 22,25,993,995)符合第一条規則, 可被系统正常接受处理; 走向其他端口则会被转向到tcp 4444 端口由portspoof处理。</p>
</blockquote>
<ul>
<li>安装包带了一个配置的例子，可以参考下</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">cat portspoof-master/system_files/iptables-config</div><div class="line"></div><div class="line"><span class="comment"># Generated by iptables-save v1.4.4 on Tue Apr 23 14:26:41 2013</span></div><div class="line">*nat</div><div class="line">:PREROUTING ACCEPT [5992:539002]</div><div class="line">:INPUT ACCEPT [347451:16935290]</div><div class="line">:OUTPUT ACCEPT [477:45868]</div><div class="line">:POSTROUTING ACCEPT [0:0]</div><div class="line"><span class="comment"># Portspoof everything except the sshd service</span></div><div class="line"><span class="comment"># Remember to change the iface name</span></div><div class="line">-A PREROUTING -i eth0 -p tcp -m tcp --dport 1:21 -j REDIRECT --to-ports 4444</div><div class="line">-A PREROUTING -i eth0 -p tcp -m tcp --dport 23:65535 -j REDIRECT --to-ports 4444</div><div class="line">COMMIT</div><div class="line"><span class="comment"># Completed on Tue Apr 23 14:26:42 2013</span></div><div class="line"><span class="comment"># Generated by iptables-save v1.4.4 on Tue Apr 23 14:26:42 2013</span></div><div class="line">*filter</div><div class="line">:INPUT ACCEPT [1931192:104113948]</div><div class="line">:FORWARD ACCEPT [0:0]</div><div class="line">:OUTPUT ACCEPT [1606583:151106362]</div><div class="line">-A FORWARD -j ACCEPT</div><div class="line">COMMIT</div><div class="line"><span class="comment"># Completed on Tue Apr 23 14:26:42 2013</span></div></pre></td></tr></table></figure>
<h3 id="三、运行Portspoof"><a href="#三、运行Portspoof" class="headerlink" title="三、运行Portspoof"></a>三、运行Portspoof</h3><ul>
<li><p>后台方式运行(默认输出日志在/var/log/messages)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">portspoof -D</div></pre></td></tr></table></figure>
</li>
<li><p>自定义日志路径</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">portspoof <span class="_">-s</span> /usr/<span class="built_in">local</span>/etc/portspoof_signatures -c /usr/<span class="built_in">local</span>/etc/portspoof.conf <span class="_">-l</span> /var/<span class="built_in">log</span>/portspoof.log</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>注：自定义日志路径不能在后台运行，加了-D参数后，测试portspoof进程会自动退出。</p>
</blockquote>
<h3 id="四、将portspoof添加到你系统的启动脚本"><a href="#四、将portspoof添加到你系统的启动脚本" class="headerlink" title="四、将portspoof添加到你系统的启动脚本"></a>四、将portspoof添加到你系统的启动脚本</h3><p>安装包里提供了两个的init.d管理脚本，你可以在system_files目录中找到这个脚本。你可根据自己情况复制到/etc/init.d目录下,使用很简单，这里就不详述了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ls portspoof-master/system_files/init.d/portspoof</div><div class="line">portspoof.sh  portspoof_simple.sh</div><div class="line"></div><div class="line">cp portspoof.sh /etc/init.d/</div></pre></td></tr></table></figure>
<h3 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h3><p>1.本地测试</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">nmap <span class="_">-s</span>V -v 192.168.34.160</div><div class="line"></div><div class="line">Starting Nmap 6.40 (http://nmap.org ) at 2014-05-07 11:47 CST</div><div class="line">Nmap scan report <span class="keyword">for</span> (192.168.34.160)</div><div class="line">Host is up (0.00012s latency).</div><div class="line">PORT      STATE SERVICE</div><div class="line">1/tcp     open  tcpmux</div><div class="line">3/tcp     open  compressnet</div><div class="line">4/tcp     open  unknown</div><div class="line">6/tcp     open  unknown</div><div class="line">7/tcp     open  <span class="built_in">echo</span></div><div class="line">9/tcp     open  discard</div><div class="line">13/tcp    open  daytime</div><div class="line">17/tcp    open  qotd</div><div class="line">19/tcp    open  chargen</div><div class="line">...</div><div class="line">146/tcp   open  iso-tp0</div><div class="line">161/tcp   open  snmp</div><div class="line">163/tcp   open  cmip-man</div><div class="line">179/tcp   open  bgp</div><div class="line">199/tcp   open  smux</div><div class="line">211/tcp   open  914c-g</div><div class="line">212/tcp   open  anet</div><div class="line">222/tcp   open  rsh-spx</div><div class="line">254/tcp   open  unknown</div><div class="line">...</div><div class="line">61532/tcp open  unknown</div><div class="line">61900/tcp open  unknown</div><div class="line">62078/tcp open  iphone-sync</div><div class="line">63331/tcp open  unknown</div><div class="line">64623/tcp open  unknown</div><div class="line">65389/tcp open  unknown</div><div class="line">MAC Address: 00:E0:81:DB:0C:29 (Tyan Computer)</div><div class="line"></div><div class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 0.28 seconds</div></pre></td></tr></table></figure>
<p>2.在线演示</p>
<p>你想不想根本不用安装就能试一下Portspoof?<br>检查一下：针对portspoof.org地址，运行你常用的端口扫描工具，看看结果：<code>nmap -sV -v portspoof.org</code>。</p>
<h3 id="六、参考文档"><a href="#六、参考文档" class="headerlink" title="六、参考文档"></a>六、参考文档</h3><p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://netsecurity.51cto.com/art/201310/413075.htm" target="_blank" rel="external">http://netsecurity.51cto.com/art/201310/413075.htm</a><br><a href="http://blog.csdn.net/nixawk/article/details/25839481" target="_blank" rel="external">http://blog.csdn.net/nixawk/article/details/25839481</a><br><a href="http://jamyy.us.to/blog/2013/12/5594.html" target="_blank" rel="external">http://jamyy.us.to/blog/2013/12/5594.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux中SSH客户端登录缓慢的解决办法]]></title>
      <url>http://www.hi-linux.com/posts/60599.html</url>
      <content type="html"><![CDATA[<p>今天在ssh登录到一台Linux服务器时，出现了登陆慢的问题，以前一直是正常的。</p>
<h4 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h4><p>查看SSH日志中有如下错误提示,发现问题：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Connection closed by IP</div></pre></td></tr></table></figure>
<p>使用debug模式<code>ssh -v ip</code>查看下ssh的连接过程，发现其中有这样一段提示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">debug1: Authentications that can <span class="built_in">continue</span>: publickey,gssapi-keyex,gssapi-with-mic,password</div><div class="line">debug1: Next authentication method: gssapi-keyex</div><div class="line">debug1: No valid Key exchange context</div><div class="line">debug1: Next authentication method: gssapi-with-mic</div><div class="line">debug1: Unspecified GSS failure.  Minor code may provide more information</div><div class="line">Cannot determine realm <span class="keyword">for</span> numeric host address</div><div class="line"> </div><div class="line">debug1: Unspecified GSS failure.  Minor code may provide more information</div><div class="line">Cannot determine realm <span class="keyword">for</span> numeric host address</div><div class="line"> </div><div class="line">debug1: Unspecified GSS failure.  Minor code may provide more information</div><div class="line"> </div><div class="line">debug1: Unspecified GSS failure.  Minor code may provide more information</div><div class="line">Cannot determine realm <span class="keyword">for</span> numeric host address</div></pre></td></tr></table></figure>
<p>可以看到，因为使用GSS认证导致认证失败重试造成登录缓慢。<a id="more"></a></p>
<p>经过搜索，发现是SSH配置文件默认打开了GSSAPI Authentication，经过修改解决问题。</p>
<h4 id="二、解决办法："><a href="#二、解决办法：" class="headerlink" title="二、解决办法："></a>二、解决办法：</h4><ul>
<li>临时解决办法：</li>
</ul>
<p>在ssh登录时加上<code>&quot;-o GSSAPIAuthentication=no&quot;</code>参数</p>
<ul>
<li>永久解决办法：</li>
</ul>
<blockquote>
<p>1.打开编辑ssh配置文件：<code>vim /etc/ssh/sshd_config</code><br>2.在文件中查找<code>&quot;GSSAPIAuthentication yes&quot;</code>这一行，修改<code>&quot;yes&quot;</code>为<code>&quot;no&quot;</code><br>3.保存退出<br>4.重启ssh后,登录正常。</p>
<p>补充:如果只是想针对某个用户来禁用GSSAPIAuthentication，只需要在用户目录下的.ssh目录中建立一个config文件，在文件中添加行<code>&quot;GSSAPIAuthentication no&quot;</code>即可。</p>
</blockquote>
<p>经过修改，ssh登录开发机已经是秒登，如果有人ssh登录慢，可以试试这个简单的办法。</p>
<p><strong>关于GSSAPI：</strong></p>
<blockquote>
<p>GSSAPI是Generic Security Services Application Program Interface的缩写，译为通用安全服务应用程序接口，是ITEF的一个标准，这将允许不同的安全算法使用一个标准化的API来为网络产品提供加密认证。OPENssh 使用这个API并且底层的kerberos 5协议代码提供除了ssh_keys 的另一种ssh认证方式。</p>
</blockquote>
<h4 id="三、其它一些SSH客户端登录缓慢的原因"><a href="#三、其它一些SSH客户端登录缓慢的原因" class="headerlink" title="三、其它一些SSH客户端登录缓慢的原因"></a>三、其它一些SSH客户端登录缓慢的原因</h4><ul>
<li>如何通过关闭UseDNS选项加速SSH登录</li>
</ul>
<blockquote>
<p>通常情况下我们在连接OpenSSH服务器的时候假如UseDNS选项是打开的话，服务器会先根据客户端的IP地址进行DNS PTR反向查询出客户端的主机名，然后根据查询出的客户端主机名进行DNS正向A记录查询，并验证是否与原始 IP地址一致，通过此种措施来防止客户端欺骗。平时我们都是动态 IP不会有PTR记录，所以打开此选项也没有太多作用。我们可以通过关闭此功能来提高连接OpenSSH 服务器的速度。</p>
</blockquote>
<p>服务端步骤如下：</p>
<ul>
<li>编辑配置文件 /etc/ssh/sshd_config</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vim /etc/ssh/sshd_config</div><div class="line">找到 UseDNS选项，如果没有注释，将其注释</div><div class="line"><span class="comment">#UseDNS yes</span></div><div class="line">添加</div><div class="line">UseDNS no</div></pre></td></tr></table></figure>
<ul>
<li><p>保存配置文件</p>
</li>
<li><p>重启OpenSSH服务器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/sshd restart</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hping使用方法详解]]></title>
      <url>http://www.hi-linux.com/posts/57862.html</url>
      <content type="html"><![CDATA[<h3 id="一、原理基础"><a href="#一、原理基础" class="headerlink" title="一、原理基础"></a>一、原理基础</h3><p>Hping是一个命令行下使用的TCP/IP数据包组装/分析工具，其命令模式很像Unix下的ping命令，但是它不是只能发送ICMP回应请求，它还可以支持TCP、UDP、ICMP和RAW-IP协议，它有一个路由跟踪模式，能够在两个相互包含的通道之间传送文件。Hping常被用于检测网络和主机，其功能非常强大，可在多种操作系统下运行，如Linux，FreeBSD，NetBSD，OpenBSD，Solaris，MacOs X，Windows。</p>
<p>HPING和ping的区别：典型ping程序使用的是ICMP回显请求来测试，而HPING可以使用任何IP报文，包括ICMP、TCP、UDP、RAWSOCKET。</p>
<p>Hping的主要功能有： </p>
<p>防火墙测试<br>实用的端口扫描<br>网络检测，可以用不同的协议、服务类型(TOS)、IP分片<br>手工探测MTU(最大传输单元)路径<br>先进的路由跟踪，支持所有的协议<br>远程操作系统探测<br>远程的运行时间探测<br>TCP/IP堆栈审计<br><a id="more"></a></p>
<h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><ul>
<li>Centos</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install hping</div></pre></td></tr></table></figure>
<ul>
<li>Debian/Ubuntu</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install hping</div></pre></td></tr></table></figure>
<h3 id="三、Hping的详细参数"><a href="#三、Hping的详细参数" class="headerlink" title="三、Hping的详细参数"></a>三、Hping的详细参数</h3><blockquote>
<p>-h –help 显示帮助信息<br>-v –version 显示Hping的版本信息<br>-c –count 指定数据包的次数<br>-i –interval 指定发包间隔为多少毫秒，如-i m10：表示发包间隔为10毫秒(附:秒、毫秒、微秒进率。1s=1000ms(毫秒)=1000000(微秒)，1s=10^3ms(毫秒)=10^6μs(微秒))<br>–fast 与-i m100等同，即每秒钟发送10个数据包(hping的间隔u表示微妙，－－fast表示快速模式，一秒10个包。)<br>-n –numeric 指定以数字形式输出,表示不进行名称解析。<br>-q –quiet 退出Hping<br>-I –interface 指定IP，如本机有两块网卡，可通过此参数指定发送数据包的IP地址。如果不指定则默认使用网关IP<br>-V –verbose 详细模式,一般显示很多包信息。<br>-D –debug 定义hping使用debug模式。<br>-z –bind 将ctrl+z 绑定到ttl，默认使用DST端口<br>-Z –unbind 解除ctrl+z的绑定 </p>
<p>指定所用的模式：<br>(缺省使用TCP进行PING处理)<br>-0 –rawip 裸IP方式,使用RAWSOCKET方式。<br>-1 –icmp ICMP 模式<br>-2 –udp UDP 模式<br>-8 –scan 扫描模式. (例: hping –scan 1-30,70-90 -S www.target.host)<br>-9 –listen 监听模式，会接受指定的信息。侦听指定的信息内容。 </p>
<p>IP选项： </p>
<p>-a –spoof 源地址欺骗<br>–rand-dest 随机目的地址模式<br>–rand-source 随机源目的地址模式<br>-t –ttl ttl值，默认为64<br>-N –id 指定id，默认是随机的<br>-W –winid 使用win*的id 字节顺序,针对不同的操作系统。<br>-r –rel 相对的id区域<br>-f –frag 将数据包分片后传输(可以通过薄弱的acl(访问控制列表))<br>-x –morefrag 设置更多的分片标记<br>-y –dontfrag 设置不加分片标记<br>-g –fragoff 设置分片偏移<br>-m –mtu 设置虚拟MTU, 当数据包&gt;MTU时要使用–frag 进行分片<br>-o –tos 指定服务类型，默认是0x00,，可以使用–tos help查看帮助<br>-G –rroute 包含RECORD_ROUTE选项并且显示路由缓存<br>–lsrr 释放源路记录<br>–ssrr 严格的源路由记录<br>-H –ipproto 设置协议范围，仅在RAW IP模式下使用 </p>
<p>ICMP选项 </p>
<p>-C –icmptype 指定icmp类型（默认类型为回显请求）<br>-K –icmpcode 指定icmp编码（默认为0）<br>–force-icmp 发送所有ICMP数据包类型（默认只发送可以支持的类型） –icmp-gw 针对ICMP数据包重定向设定网关地址（默认是0.0.0.0）<br>–icmp-ts 相当于–icmp –icmptype 13（ICMP时间戳）<br>–icmp-addr 相当于–icmp –icmptype 17（ICMP地址掩码）<br>–icmp-help 显示ICMP的其它帮助选项 </p>
<p>UDP/TCP选项 </p>
<p>-s –baseport 基本源端口（默认是随机的）<br>-p –destport 目的端口（默认为0），可同时指定多个端口<br>-k –keep 仍然保持源端口<br>-w –win 指定数据包大小，默认为64<br>-O –tcpoff 设置假的TCP数据偏移<br>-Q –seqnum 仅显示TCP序列号<br>-b –badcksum 尝试发送不正确IP校验和的数据包(许多系统在发送数据包时使用固定的IP校验和，因此你会得到不正确的UDP/TCP校验和.)<br>-M –setseq 设置TCP序列号<br>-L –setack 使用TCP的ACK（访问控制列表）<br>-F –fin 使用FIN标记set FIN flag<br>-S –syn 使用SNY标记<br>-R –rst 使用RST标记<br>-P –push 使用PUSH标记<br>-A –ack 使用 ACK 标记<br>-U –urg 使用URG标记<br>-X –xmas 使用 X 未用标记 (0x40)<br>-Y –ymas 使用 Y 未用标记 (0x80)<br>–tcpexitcode 最后使用 tcp-&gt;th_flags 作为退出代码<br>–tcp-timestamp 启动TCP时间戳选项来猜测运行时间 </p>
<p>常规选项 </p>
<p>-d –data 数据大小，默认为0<br>-E –file 从指定文件中读取数据<br>-e –sign 增加签名<br>-j –dump 以十六进行形式转存数据包<br>-J –print 转存可输出的字符<br>-B –safe 启用安全协议<br>-u –end 当通过- -file指定的文件结束时停止并显示，防止文件再从头开始<br>-T –traceroute 路由跟踪模式<br>–tr-stop 在路由跟踪模式下当收到第一个非ICMP数据包时退出<br>–tr-keep-ttl 保持源TTL，对监测一个hop有用<br>–tr-no-rtt     使用路由跟踪模式时不计算或显示RTT信息 </p>
<p>ARS数据包描述(新增加的内容，暂时还不稳定)<br>–apd-send 发送用描述APD的数据包</p>
</blockquote>
<h3 id="四、具体应用："><a href="#四、具体应用：" class="headerlink" title="四、具体应用："></a>四、具体应用：</h3><ul>
<li>每秒送10个(-i u10000)ICMP(-1)封包到www.abc.net.tw 伪造来源IP(-a)为100.100.100.100</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hping www.abc.net.tw -1 -i u100000 <span class="_">-a</span> 100.100.100.100</div></pre></td></tr></table></figure>
<blockquote>
<p>注：-1为数字非英文L</p>
</blockquote>
<ul>
<li>每秒送1个(-i u1000000)TCP(default)封包到www.abc.net.tw的port 44444，伪造来源IP(-a)100.100.100.100使用的port为22222</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hping www.abc.net.tw –i u1000000 –a 100.100.100.100 –s 22222 –p 44444</div></pre></td></tr></table></figure>
<ul>
<li>SYN Flooding(每秒10个封包)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hping 目标主机IP –i u100000 –S –a 伪造来源IP</div></pre></td></tr></table></figure>
<ul>
<li>伪造IP的ICMP封包(每秒10个封包)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hping 目标主机IP –i u100000 –1 –a 伪造来源IP</div></pre></td></tr></table></figure>
<blockquote>
<p>注：-1为数字非英文</p>
</blockquote>
<ul>
<li>不正常TCP Flag组合封包(每秒10个封包)</li>
</ul>
<p>(a)SYN+FIN</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hping 目标主机IP –i u100000 –S –F –a 伪造来源IP</div></pre></td></tr></table></figure>
<p>(b)X’mas</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hping 目标主机IP –i u100000 –F –S –R –P –A –U –a 伪造来源IP</div></pre></td></tr></table></figure>
<ul>
<li>伪造IP的UDP封包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hping 目标主机IP –i u100000 –2 –a 伪造来源IP</div></pre></td></tr></table></figure>
<ul>
<li>伪造IP内含CodeRed封包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hping 目标主机IP –i u100000 –d [封包datasize] –E [filename] –a [伪造来源IP]</div></pre></td></tr></table></figure>
<ul>
<li>SMURF攻击</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hping2 -1 <span class="_">-a</span> 192.168.1.5 192.168.1.255</div></pre></td></tr></table></figure>
<ul>
<li>XMAS TREE攻击</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hping2 -SFRP 192.168.1.5</div></pre></td></tr></table></figure>
<ul>
<li>LAND攻击</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hping2 -k -S <span class="_">-s</span> 25 -p 25 <span class="_">-a</span> 192.168.1.5 192.168.1.5</div></pre></td></tr></table></figure>
<ul>
<li>用tcpdump记录流量</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#捕获25000个包,将原始报文转储到dumpfile中</span></div><div class="line">cron任务: 5 3 * * * /usr/sbin/tcpdump -c 25000 -w dumpfile -n</div><div class="line"></div><div class="line"><span class="comment">#查看记录</span></div><div class="line">tcpdump -r dumpfile -X -vv</div></pre></td></tr></table></figure>
<ul>
<li>PING失效后的主机检测：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ping</span> 192.168.2.1</div><div class="line">PING 192.168.2.1 (192.168.2.1) 56(84) bytes of data.</div><div class="line">--- 192.168.2.1 ping statistics ---</div><div class="line">19 packets transmitted, 0 received, 100% packet loss, time 18009ms</div><div class="line">－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－</div><div class="line"><span class="variable">$hping2</span> -c 4 -n -i 2 192.168.2.1</div><div class="line">HPING 192.168.2.1 (eth0 192.168.2.1): NO FLAGS are <span class="built_in">set</span>, 40 headers + 0 data bytes</div><div class="line">len=46 ip=192.168.2.1 ttl=64 id=43489 sport=0 flags=RA seq=0 win=0 rtt=1.0 ms</div><div class="line">len=46 ip=192.168.2.1 ttl=64 id=43490 sport=0 flags=RA seq=1 win=0 rtt=0.6 ms</div><div class="line">len=46 ip=192.168.2.1 ttl=64 id=43491 sport=0 flags=RA seq=2 win=0 rtt=0.7 ms</div><div class="line">len=46 ip=192.168.2.1 ttl=64 id=43498 sport=0 flags=RA seq=3 win=0 rtt=0.6 ms</div><div class="line">--- 192.168.2.1 hping statistic ---</div><div class="line">4 packets transmitted, 4 packets received, 0% packet loss</div><div class="line">round-trip min/avg/max = 0.6/0.8/1.0 ms</div></pre></td></tr></table></figure>
<p>-c 发送4个报文-n不进行名称解析 -i包发送时间间隔。</p>
<p>好处：即使主机阻塞了ICMP报文，也可以显示主机是否在运行的信息，在关掉ICMP的探测有效！<br>显示信息解释：len，返回ip报文大小；ttl； id，IP的ID域；sport，源端口，flags，返回的IP报设置的TCP标志 （R：RESET，A：ACK；S：SYN；F：FIN；P：PUSH；U：URGENT）；seq：序列号；win：tcp窗口大小；rtt：往返 时，EIGRP似乎有这个设置。</p>
<ul>
<li>更复杂的实际的例子</li>
</ul>
<p>step 1:目标主机安装了blackice，它的ip address是ip.add.of.victim<br>step 2:发起攻击的一台linux 机器，上面安装了hping</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">执行如下命令</div><div class="line"><span class="comment">#hping -p 31335 -e PONG -2 ip.add.of.victim -c 5 -d 4 -a ip.add.of.dnsserver</span></div><div class="line"></div><div class="line">HPING ip.add.of.victim (eth0 ip.add.of.victim): udp mode <span class="built_in">set</span>, 28 headers</div><div class="line">+ 4 data bytes</div><div class="line">--- ip.add.of.victim hping statistic ---</div><div class="line">5 packets tramitted, 0 packets received, 100% packet loss round-trip min/avg/max = 0.0/0.0/0.0 ms</div><div class="line"></div><div class="line"><span class="comment">#hping -p 31335 -e PONG -2 ip.add.of.victim -c 5 -d 4 -a www.google.com</span></div><div class="line"></div><div class="line">HPING ip.add.of.victim (eth0 ip.add.of.victim): udp mode <span class="built_in">set</span>, 28 headers</div><div class="line">+ 4 data bytes</div><div class="line">--- ip.add.of.victim hping statistic ---</div><div class="line">5 packets tramitted, 0 packets received, 100% packet loss round-trip min/avg/max = 0.0/0.0/0.0 ms</div><div class="line"></div><div class="line"><span class="comment">#hping -p 31335 -e PONG -2 ip.add.of.victim -c 5 -d 4 -a www.sina.com</span></div><div class="line">HPING ip.add.of.victim (eth0 ip.add.of.victim): udp mode <span class="built_in">set</span>, 28 headers</div><div class="line">+ 4 data bytes</div><div class="line">--- ip.add.of.victim hping statistic ---</div><div class="line">5 packets tramitted, 0 packets received, 100% packet loss round-trip min/avg/max = 0.0/0.0/0.0 ms</div></pre></td></tr></table></figure>
<p>上面的三个命令干了同一件事情，以伪造的ip发送假的trinoo攻击数据包.</p>
<p>结果:在目标主机上所有伪造的ip地址网络连接被block了，也就是对目标主机ip.add.of.victim而言，它的dns服务器，google和sina都无法访问了。<br>我很怀疑目前的个人防火墙只要存在auto-block功能，就存在这一问题。</p>
<ul>
<li>防火墙规则测试</li>
</ul>
<p>hping有类似NMAP的方法来检测并收集关于潜在的防火墙的规则和能力的信息。<br>如果一个主机对ping没有任何相应，而对hping有响应，假定目标的主机为192.168.2.234.<br>一旦主机对hping作出了响应,那么下一步我们先用nmap先进行一个端口扫描,当然这个hping2也可以作.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">nmap <span class="_">-s</span>T -P0 -p 21-25 192.168.2.234</div><div class="line">Starting Nmap 4.53 ( http://insecure.org ) at 2008-08-14 15:56 CST</div><div class="line">Interesting ports on 192.168.2.234:</div><div class="line">PORT STATE SERVICE</div><div class="line">21/tcp filtered ftp</div><div class="line">22/tcp open ssh</div><div class="line">23/tcp filtered telnet</div><div class="line">24/tcp filtered priv-mail</div><div class="line">25/tcp filtered smtp</div><div class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 1.379 seconds</div></pre></td></tr></table></figure>
<p>以上信息显示除了ssh端口外,其他端口被阻塞.然后可以试试用hping向各个被阻塞的端口发送空的报文.用-p的开关,可以对指定的目的端口进行hping.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">hping2 -p 21 192.168.2.234</div><div class="line">HPING 192.168.2.234 (eth0 192.168.2.234): NO FLAGS are <span class="built_in">set</span>, 40 headers + 0 data bytes</div><div class="line">24: len=46 ip=192.168.2.234 ttl=128 id=2461 sport=24 flags=RA seq=7 win=0 rtt=0.7 ms</div><div class="line">len=46 ip=192.168.2.234 ttl=128 id=2462 sport=24 flags=RA seq=8 win=0 rtt=0.7 ms</div><div class="line">25: len=46 ip=192.168.2.234 ttl=128 id=2463 sport=25 flags=RA seq=9 win=0 rtt=0.7 ms</div><div class="line">len=46 ip=192.168.2.234 ttl=128 id=2464 sport=24 flags=RA seq=10 win=0 rtt=0.7 ms</div></pre></td></tr></table></figure>
<p>前三个端口没有响应,端口24 25 获得了RST/ACK响应.这说明,虽然这些端口被禁止PING,但没有工具在该端口上监听.然而为什么NMAP没有得到响应,因为NMAP虽然使用 TCP连接,但它在TCP报头中设置了TCP SYN标记位,而HPING 使用了空标记的报文,这就告诉我们说,在主机192.168.2.234上只阻塞进入的TCP连接.接下来使用hping创建一个SYN报文然后将其发送 到5个端口再测试.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hping2 -S -p 21 192.168.2.234</div><div class="line">HPING 192.168.2.234 (eth0 192.168.2.234): S <span class="built_in">set</span>, 40 headers + 0 data bytes</div><div class="line">22: len=46 ip=192.168.2.234 ttl=128 id=10722 sport=22 flags=SA seq=1 win=0 rtt=1.2 ms</div><div class="line">len=46 ip=192.168.2.234 ttl=128 id=10747 sport=22 flags=SA seq=2 win=0 rtt=0.7 ms</div></pre></td></tr></table></figure>
<p>这次只有22端口响应,说明SSH端口是开放的,但有工具在上面监听,该端口没有进行过滤.<br>然后我们再创建一个ACK报文并发送:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">hping2 -A -p 21 192.168.2.234</div><div class="line">HPING 192.168.2.234 (eth0 192.168.2.234): A <span class="built_in">set</span>, 40 headers + 0 data bytes</div><div class="line">22: len=46 ip=192.168.2.234 ttl=128 id=12707 sport=22 flags=R seq=2 win=0 rtt=0.7 ms</div><div class="line">len=46 ip=192.168.2.234 ttl=128 id=12708 sport=22 flags=R seq=3 win=0 rtt=0.7 ms</div><div class="line">23: len=46 ip=192.168.2.234 ttl=128 id=12709 sport=23 flags=R seq=4 win=0 rtt=0.7 ms</div><div class="line">len=46 ip=192.168.2.234 ttl=128 id=12710 sport=22 flags=R seq=5 win=0 rtt=0.7 ms</div><div class="line">24: len=46 ip=192.168.2.234 ttl=128 id=12711 sport=24 flags=R seq=6 win=0 rtt=0.7 ms</div><div class="line">len=46 ip=192.168.2.234 ttl=128 id=12712 sport=22 flags=R seq=7 win=0 rtt=0.7 ms</div><div class="line">25: len=46 ip=192.168.2.234 ttl=128 id=12712 sport=25 flags=R seq=8 win=0 rtt=0.8 ms</div><div class="line">len=46 ip=192.168.2.234 ttl=128 id=12713 sport=22 flags=R seq=9 win=0 rtt=0.7 ms</div></pre></td></tr></table></figure>
<p>结果除了21端口外所有端口都响应了RST,说明了:<br>1.端口22是开放的,但有工具在上面监听.<br>2.24 25 上面没有工具监听,对NULL报文回显.<br>3.端口23针对ACK报文以RST进行了响应,但没有响应NULL报文.说明该端口被过滤,但是telnet服务运行在192.168.2.234上.<br>4.阻塞了进入的SYN报文但允许其他TCP报文通过,说明它采用的不是基于状态的报文防火墙.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下解压分卷压缩zip]]></title>
      <url>http://www.hi-linux.com/posts/56582.html</url>
      <content type="html"><![CDATA[<p>####问题如题，解决方法：</p>
<blockquote>
<p>假设要解压的分卷文件是file.zip file.z01, file.z02 file.z03，(其他情况可类推)<br>将分卷文件合成一个完整的压缩文件hana.zip，然后在使用unzip解压file.zip即可。<br>注意：cat里面文件顺序不能乱，不然解压会失败。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cat file.z01 file.z02 file.z03 file.zip &gt; hana.zip</div><div class="line">unzip hana.zip</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux系统分析工具之slabtop]]></title>
      <url>http://www.hi-linux.com/posts/36447.html</url>
      <content type="html"><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><blockquote>
<p>slabtop - display kernel slab cache information in real time（实时的显示内核slab缓存信息，透过/proc/slabinfo）<br>内核的模块在分配资源的时候，为了提高效率和资源的利用率，都是透过slab来分配的。通过slab的信息，再配合源码能粗粗了解系统的运行情况，比如说什么资源有没有不正常的多，或者什么资源有没有泄漏。linux系统透过/proc/slabinfo来向用户暴露slab的使用情况。</p>
<p>Linux所使用的 slab 分配器的基础是 Jeff Bonwick 为 SunOS 操作系统首次引入的一种算法。Jeff 的分配器是围绕对象缓存进行的。在内核中，会为有限的对象集（例如文件描述符和其他常见结构）分配大量内存。Jeff 发现对内核中普通对象进行初始化所需的时间超过了对其进行分配和释放所需的时间。因此他的结论是不应该将内存释放回一个全局的内存池，而是将内存保持为针对特定目而初始化的状态。Linux slab 分配器使用了这种思想和其他一些思想来构建一个在空间和时间上都具有高效性的内存分配器。</p>
<p>保存着监视系统中所有活动的slab缓存的信息的文件为/proc/slabinfo<br><a id="more"></a></p>
</blockquote>
<h3 id="二、用法"><a href="#二、用法" class="headerlink" title="二、用法"></a>二、用法</h3><p>slabtop-实时显示内核slab内存缓存信息<br>slabtop [options]</p>
<p><strong>描述：</strong></p>
<blockquote>
<p>slabtop displays detailed  kernel  slab  cache  information in real time. It displays a listing of the top caches sorted by one of the listed sort criteria.  It also displays a statistics header filled with slab layer information.</p>
</blockquote>
<p><strong>选项：</strong></p>
<blockquote>
<p>–delay=n, -d n        #每n秒更新一次显示的信息，默认是每3秒<br>–sort=S, -s S            #指定排序标准进行排序（排序标准，参照下面或者man手册）<br>–once, -o            #显示一次后退出<br>–version, -V            #显示版本<br>–help                #显示帮助信息</p>
</blockquote>
<p><strong>排序标准：</strong></p>
<blockquote>
<p>a:     sort by number of active objects<br>b:     sort by objects per slab<br>c:     sort by cache size<br>l:     sort by number of slabs<br>v：    sort by number of active slabs<br>n:     sort by name<br>o:     sort by number of objects<br>p:     sort by pages per slab<br>s:     sort by object size<br>u:     sort by cache utilization</p>
</blockquote>
<p><strong>输出界面可用的命令：</strong></p>
<blockquote>
<p><spacebar>：            刷新显示内容<br>Q：            退出</spacebar></p>
</blockquote>
<h3 id="三、数据分析"><a href="#三、数据分析" class="headerlink" title="三、数据分析"></a>三、数据分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#slabtop -o</div><div class="line">Active / Total Objects (% used) : 342368 / 362880 (94.3%)</div><div class="line">Active / Total Slabs (% used) : 7873 / 7873 (100.0%)</div><div class="line">Active / Total Caches (% used) : 103 / 150 (68.7%)</div><div class="line">Active / Total Size (% used) : 27814.06K / 29616.44K (93.9%)</div><div class="line">Minimum / Average / Maximum Object : 0.01K / 0.08K / 128.00K</div><div class="line"></div><div class="line">OBJS ACTIVE USE OBJ SIZE SLABS OBJ/SLAB CACHE SIZE NAME</div><div class="line">133980 133862 99% 0.02K 660 203 2640K avtab_node</div><div class="line">92886 92653 99% 0.03K 822 113 3288K size-32</div><div class="line">28626 27174 94% 0.05K 367 78 1468K selinux_inode_security</div><div class="line">25816 25614 99% 0.48K 3227 8 12908K ext3_inode_cache</div><div class="line">23693 18692 78% 0.13K 817 29 3268K dentry_cache</div><div class="line">21240 15306 72% 0.05K 295 72 1180K buffer_head</div><div class="line">6174 5758 93% 0.27K 441 14 1764K radix_tree_node</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Bash Shell对目录內php做Syntax check]]></title>
      <url>http://www.hi-linux.com/posts/32955.html</url>
      <content type="html"><![CDATA[<p>Shell script要对此目录下所有PHP做Syntax check(注:-l Syntax check only), 可以用下述写法:</p>
<p><strong>此目录內 *.php 文件做Syntax check</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> f <span class="keyword">in</span> `ls *.php`; <span class="keyword">do</span></div><div class="line">    php <span class="_">-l</span> <span class="variable">$f</span>;</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>此目录內, 所有目录含有php都做Syntax check</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for f in `find ./ -name *.php`; do</div><div class="line">    php -l $f;</div><div class="line">done</div></pre></td></tr></table></figure>
<blockquote>
<p>注:可在搭配grep过滤。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Https(SSLTLS)原理详解]]></title>
      <url>http://www.hi-linux.com/posts/17756.html</url>
      <content type="html"><![CDATA[<p>转载自：<a href="http://www.fenesky.com/blog/2014/07/19/how-https-works.html" title="Https(SSLTLS)原理详解" target="_blank" rel="external">http://www.fenesky.com/blog/2014/07/19/how-https-works.html</a></p>
<p>最近开始做Https网络方面的工作，花时间学习了下 Https，SSL/TLS相关的内容。把我对于Https，SSL/TLS的理解跟大家分享下，顺便埋个伏笔，时机成熟之后还要跟大家分享下《加解密基础知识》 ，因为SSL/TLS有很多加解密方面的知识。在技术方面，我对于我自己的要求是所到之处，必须深入理解。对于理解不透彻或者有误的地方，欢迎大家参与讨论。</p>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Https(Hyper Text Transfer Protocol over Secure Socket Layer)，是一种基于SSL/TLS的Http，所有的http数据都是在SSL/TLS协议封装之上传输的。Https协议在Http协议的基础上，添加了SSL/TLS握手以及数据加密传输，也属于应用层协议。所以，研究Https协议原理，最终其实是研究SSL/TLS协议。</p>
<p>SSL协议，是一种安全传输协议，最初是由 Netscape 在1996年发布，由于一些安全的原因SSL v1.0和SSL v2.0都没有公开，直到1996年的SSL v3.0。TLS是SSL v3.0的升级版，目前市面上所有的Https都是用的是TLS，而不是SSL。本文主要分析和讲解TLS。</p>
<h3 id="TLS握手"><a href="#TLS握手" class="headerlink" title="TLS握手"></a>TLS握手</h3><p>TLS的握手阶段是发生在TCP握手之后。握手实际上是一种协商的过程，对协议所必需的一些参数进行协商。TLS握手过程分为四步，过程如下：（备注：图中加方括号的均为可选消息）</p>
<p><img src="http://www.fenesky.com/images/TLS.svg" alt=""></p>
<a id="more"></a>
<h3 id="Client-Hello"><a href="#Client-Hello" class="headerlink" title="Client Hello"></a>Client Hello</h3><p>由于客户端(如浏览器)对一些加解密算法的支持程度不一样，但是在TLS协议传输过程中必须使用同一套加解密算法才能保证数据能够正常的加解密。在TLS握手阶段，客户端首先要告知服务端，自己支持哪些加密算法，所以客户端需要将本地支持的加密套件(Cipher Suite)的列表传送给服务端。除此之外，客户端还要产生一个随机数，这个随机数一方面需要在客户端保存，另一方面需要传送给服务端，客户端的随机数需要跟服务端产生的随机数结合起来产生后面要讲到的Master Secret。</p>
<h3 id="Server-Hello"><a href="#Server-Hello" class="headerlink" title="Server Hello"></a>Server Hello</h3><p>上图中，从Server Hello到Server Done，有些服务端的实现是每条单独发送，有服务端实现是合并到一起发送。Sever Hello和Server Done都是只有头没有内容的数据。</p>
<p>服务端在接收到客户端的Client Hello之后，服务端需要将自己的证书发送给客户端。这个证书是对于服务端的一种认证。例如，客户端收到了一个来自于称自己是www.alipay.com的数据，但是如何证明对方是合法的alipay支付宝呢？这就是证书的作用，支付宝的证书可以证明它是alipay，而不是财付通。证书是需要申请，并由专门的数字证书认证机构(CA)通过非常严格的审核之后颁发的电子证书。颁发证书的同时会产生一个私钥和公钥。私钥由服务端自己保存，不可泄漏。公钥则是附带在证书的信息中，可以公开的。证书本身也附带一个证书电子签名，这个签名用来验证证书的完整性和真实性，可以防止证书被串改。另外，证书还有个有效期。</p>
<p>在服务端向客户端发送的证书中没有提供足够的信息的时候，还可以向客户端发送一个Server Key Exchange。</p>
<p>此外，对于非常重要的保密数据，服务端还需要对客户端进行验证，以保证数据传送给了安全的合法的客户端。服务端可以向客户端发出Cerficate Request消息，要求客户端发送证书对客户端的合法性进行验证。</p>
<p>跟客户端一样，服务端也需要产生一个随机数发送给客户端。客户端和服务端都需要使用这两个随机数来产生Master Secret。</p>
<p>最后服务端会发送一个Server Hello Done消息给客户端，表示Server Hello消息结束了。</p>
<h3 id="Client-Key-Exchange"><a href="#Client-Key-Exchange" class="headerlink" title="Client Key Exchange"></a>Client Key Exchange</h3><p>如果服务端需要对客户端进行验证，在客户端收到服务端的Server Hello消息之后，首先需要向服务端发送客户端的证书，让服务端来验证客户端的合法性。</p>
<p>在此之前的所有TLS握手信息都是明文传送的。在收到服务端的证书等信息之后，客户端会使用一些加密算法(例如：RSA, Diffie-Hellman)产生一个48个字节的Key，这个Key叫PreMaster Secret，很多材料上也被称作PreMaster Key, 最终通过Master secret生成session secret， session secret就是用来对应用数据进行加解密的。PreMaster secret属于一个保密的Key，只要截获PreMaster secret，就可以通过之前明文传送的随机数，最终计算出session secret，所以PreMaster secret使用RSA非对称加密的方式，使用服务端传过来的公钥进行加密，然后传给服务端。</p>
<p>接着，客户端需要对服务端的证书进行检查，检查证书的完整性以及证书跟服务端域名是否吻合。</p>
<p>ChangeCipherSpec是一个独立的协议，体现在数据包中就是一个字节的数据，用于告知服务端，客户端已经切换到之前协商好的加密套件的状态，准备使用之前协商好的加密套件加密数据并传输了。</p>
<p>在ChangecipherSpec传输完毕之后，客户端会使用之前协商好的加密套件和session secret加密一段Finish的数据传送给服务端，此数据是为了在正式传输应用数据之前对刚刚握手建立起来的加解密通道进行验证。</p>
<h3 id="Server-Finish"><a href="#Server-Finish" class="headerlink" title="Server Finish"></a>Server Finish</h3><p>服务端在接收到客户端传过来的PreMaster加密数据之后，使用私钥对这段加密数据进行解密，并对数据进行验证，也会使用跟客户端同样的方式生成session secret，一切准备好之后，会给客户端发送一个ChangeCipherSpec，告知客户端已经切换到协商过的加密套件状态，准备使用加密套件和session secret加密数据了。之后，服务端也会使用session secret加密后一段Finish消息发送给客户端，以验证之前通过握手建立起来的加解密通道是否成功。</p>
<p>根据之前的握手信息，如果客户端和服务端都能对Finish信息进行正常加解密且消息正确的被验证，则说明握手通道已经建立成功，接下来，双方可以使用上面产生的session secret对数据进行加密传输了。</p>
<h3 id="Secret-Keys"><a href="#Secret-Keys" class="headerlink" title="Secret Keys"></a>Secret Keys</h3><p>上面的分析和讲解主要是为了突出握手的过程，所以PreMaster secret，Master secret，session secret都是一代而过，但是对于Https，SSL/TLS深入的理解和掌握，这些Secret Keys是非常重要的部分。所以，准备把这些Secret Keys抽出来单独分析和讲解。</p>
<p>我们先来看看这些Secret Keys的的生成过程以及作用流程图：</p>
<p><img src="http://www.fenesky.com/images/tls-keys-create.svg" alt=""></p>
<h3 id="PreMaster-secret"><a href="#PreMaster-secret" class="headerlink" title="PreMaster secret"></a>PreMaster secret</h3><p>PreMaster secret是在客户端使用RSA或者Diffie-Hellman等加密算法生成的。它将用来跟服务端和客户端在Hello阶段产生的随机数结合在一起生成Master secret。在客户端使用服务单的公钥对PreMaster secret进行加密之后传送给服务端，服务端将使用私钥进行解密得到PreMaster secret。也就是说服务端和客户端都有一份相同的PreMaster secret和随机数。</p>
<p>PreMaster secret前两个字节是TLS的版本号，这是一个比较重要的用来核对握手数据的版本号，因为在Client Hello阶段，客户端会发送一份加密套件列表和当前支持的SSL/TLS的版本号给服务端，而且是使用明文传送的，如果握手的数据包被破解之后，攻击者很有可能串改数据包，选择一个安全性较低的加密套件和版本给服务端，从而对数据进行破解。所以，服务端需要对密文中解密出来对的PreMaster版本号跟之前Client Hello阶段的版本号进行对比，如果版本号变低，则说明被串改，则立即停止发送任何消息。</p>
<p>关于PreMaster Secret(Key)的计算请参考《<a href="http://www.fenesky.com/blog/2014/07/25/how-premaster-secret.html" target="_blank" rel="external">Https SSL/TLS PreMaster/Master Secret(Key)计算</a>》。</p>
<h3 id="Master-secret"><a href="#Master-secret" class="headerlink" title="Master secret"></a>Master secret</h3><p>上面已经提到，由于服务端和客户端都有一份相同的PreMaster secret和随机数，这个随机数将作为后面产生Master secret的种子，结合PreMaster secret，客户端和服务端将计算出同样的Master secret。</p>
<p>Master secret是有系列的hash值组成的，它将作为数据加解密相关的secret的Key Material。Master secret最终解析出来的数据如下：</p>
<p><img src="http://www.fenesky.com/images/tls-keys.svg" alt=""></p>
<p>其中，write MAC key，就是session secret或者说是session key。Client write MAC key是客户端发数据的session secret，Server write MAC secret是服务端发送数据的session key。MAC(Message Authentication Code)，是一个数字签名，用来验证数据的完整性，可以检测到数据是否被串改。关于MAC的工作原理详见<a href="http://en.wikipedia.org/wiki/Message_authentication_code" target="_blank" rel="external">MAC</a>。</p>
<p>关于Session Secret(Key)的计算请参考《<a href="http://www.fenesky.com/blog/2014/07/25/how-session-secret.html" target="_blank" rel="external">Htttps SSL/TLS Session Secret(Key)计算</a>》。</p>
<h3 id="应用数据传输"><a href="#应用数据传输" class="headerlink" title="应用数据传输"></a>应用数据传输</h3><p>在所有的握手阶段都完成之后，就可以开始传送应用数据了。应用数据在传输之前，首先要附加上MAC secret，然后再对这个数据包使用write encryption key进行加密。在服务端收到密文之后，使用Client write encryption key进行解密，客户端收到服务端的数据之后使用Server write encryption key进行解密，然后使用各自的write MAC key对数据的完整性包括是否被串改进行验证。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>讲到这里，Https的原理，实际上是SSL/TLS的原理都讲解完毕，我只能说TLS不仅是一个安全传输协议，而且是一个艺术品。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Vagrant打造你的虚拟环境]]></title>
      <url>http://www.hi-linux.com/posts/4387.html</url>
      <content type="html"><![CDATA[<p>Vagrant 是基于 VirtualBox 虚拟机的，通俗的讲，就是用虚拟机的环境运行本地的代码。代码可以在本地直接编辑和调试，你可以在本地浏览器里查看运行中 Web 应用。而这套虚拟机是可以直接导入到其他电脑上的使用的，这样团队其他成员省去了配置时间，更能保证开发环境和生产环境的统一。</p>
<p>Vagrant的强大在于是一个镜像，配置完以后镜像可以放到任何地方去，真正做到了一劳永逸了。</p>
<p>Vagrant的官方网站：<a href="http://www.vagrantup.com/" target="_blank" rel="external">http://www.vagrantup.com/</a></p>
<p>Vagrant的一些镜像</p>
<p>这里各种linux都有， 然后按照官方说的，执行这三部，然后一个虚拟机就起来了。</p>
<p>官方镜像：<a href="https://vagrantcloud.com/" target="_blank" rel="external">https://vagrantcloud.com/</a><br>三方镜像：<a href="http://www.vagrantbox.es/" target="_blank" rel="external">http://www.vagrantbox.es/</a></p>
<p><strong>注：先要安装VirtualBox和Vagrant</strong></p>
<h3 id="使用Vagrant"><a href="#使用Vagrant" class="headerlink" title="使用Vagrant"></a>使用Vagrant</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#增加box</span></div><div class="line"></div><div class="line"><span class="comment">#在线方式(#debian就是box的title后面跟vagrant上的virtualbox镜像地址)</span></div><div class="line">$ vagrant box add debian http://ergonlogic.com/files/boxes/debian-current.box </div><div class="line"></div><div class="line"><span class="comment">#本地方式</span></div><div class="line">$ vagrant box add debian <span class="string">'D:\Vagrant Work\Box\debian73-x86_64-20140116.box'</span></div><div class="line"></div><div class="line"><span class="comment">#初始化</span></div><div class="line">$ vagrant init debian</div><div class="line"></div><div class="line"><span class="comment">#启动 </span></div><div class="line">$ vagrant up</div></pre></td></tr></table></figure>
<a id="more"></a>
<blockquote>
<p>注意:国内网速访问很慢。这里可以先去<a href="http://www.vagrantbox.es/" target="_blank" rel="external">http://www.vagrantbox.es/</a>下载你需要的镜像，然后把http那行直接换成你本地镜像的路径就ok比较方便和快捷。</p>
</blockquote>
<h3 id="Vagrant常用命令"><a href="#Vagrant常用命令" class="headerlink" title="Vagrant常用命令"></a>Vagrant常用命令</h3><h4 id="常用管理命令"><a href="#常用管理命令" class="headerlink" title="常用管理命令"></a>常用管理命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ vagrant init  <span class="comment">#初始化,实质应是创建Vagrantfile文件</span></div><div class="line">$ vagrant up  <span class="comment">#启动虚拟机</span></div><div class="line">$ vagrant halt  <span class="comment">#关闭虚拟机</span></div><div class="line">$ vagrant reload  <span class="comment">#重启虚拟机</span></div><div class="line">$ vagrant ssh  <span class="comment">#SSH至虚拟机</span></div><div class="line">$ vagrant status  <span class="comment">#查看虚拟机运行状态</span></div><div class="line">$ vagrant destroy  <span class="comment">#销毁(删除)当前虚拟机(除Vagrantfile中的配置所有数据都不会保留)</span></div><div class="line">$ vagrant <span class="built_in">suspend</span> <span class="comment">#暂停虚拟机——只是暂停，虚拟机内存等信息将以状态文件的方式保存在本地，可以执行恢复操作后继续使用</span></div><div class="line">$ vagrant resume <span class="comment">#恢复虚拟机 —— 与前面的暂停相对应</span></div></pre></td></tr></table></figure>
<h4 id="box管理"><a href="#box管理" class="headerlink" title="box管理"></a>box管理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vagrant box list</div><div class="line">$ vagrant box add</div><div class="line">$ vagrant box remove</div></pre></td></tr></table></figure>
<h4 id="连接虚拟主机"><a href="#连接虚拟主机" class="headerlink" title="连接虚拟主机"></a>连接虚拟主机</h4><p>你会看到终端显示了启动过程，启动完成后，我们就可以用SSH登录虚拟机了，剩下的步骤就是在虚拟机里配置你要运行的各种环境和参数了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#SSH登录</div><div class="line">$ vagrant ssh   #ssh的后面可以跟你的title来连接不同的vm主机</div></pre></td></tr></table></figure>
<h4 id="打包分发"><a href="#打包分发" class="headerlink" title="打包分发"></a>打包分发</h4><p>当你配置好开发环境后，退出并关闭虚拟机。在终端里对开发环境进行打包：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vagrant package</div></pre></td></tr></table></figure>
<p>打包完成后会在当前目录生成一个package.box 的文件，将这个文件传给其他用户，其他用户只要添加这个box并用其初始化自己的开发目录就能得到一个一模一样的开发环境了。</p>
<blockquote>
<p>注：如果网络模式中使用 private_network 的话，在打包之前需要清除一下private_network的设置，避免不必要的错误：<br><code>sudo rm -f /etc/udev/rule.d/70-persistent-net.rules</code><br>制作完成之后直接将box文件拿到其他计算机上配置即可使用。</p>
</blockquote>
<p>更多内容请查阅官方文档<a href="http://docs.vagrantup.com/" target="_blank" rel="external">http://docs.vagrantup.com/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Apache中文乱码解决办法]]></title>
      <url>http://www.hi-linux.com/posts/38860.html</url>
      <content type="html"><![CDATA[<h3 id="方法一、通过服务器配置"><a href="#方法一、通过服务器配置" class="headerlink" title="方法一、通过服务器配置"></a>方法一、通过服务器配置</h3><h4 id="1-设定默认的编码"><a href="#1-设定默认的编码" class="headerlink" title="1.设定默认的编码"></a>1.设定默认的编码</h4><ul>
<li>修改httpd.conf(CentOS为/etc/httpd/conf/)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vim /etc/httpd/conf/http.conf</div><div class="line"></div><div class="line">查找AddDefaultCharset改成AddDefaultCharset UTF-8即可(具体设置编码视情况而定，通常为UTF-8)。</div></pre></td></tr></table></figure>
<ul>
<li>关闭AddDefaultCharset</li>
</ul>
<p>低版本的apache可能需要设置成AddDefaultCharset off。这种方式关掉了服务器的默认语言的发送，这样仅凭html文件头中设置的语言来决定网页语言。<br><a id="more"></a></p>
<ul>
<li>重启Apache</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/httpd restart</div><div class="line">``` </div><div class="line">- Apache关于defaultcharset的设置和优先级的问题</div><div class="line"></div><div class="line">&gt; 1.页面没有指定charset，Apache配置defaultcharset gbk , 页面文件编码是utf-8。</div><div class="line">&gt;   执行结果是页面乱码。这个几乎是肯定的，在页面没有meta指明charset，而服务器的defaultcharset又没有被注释掉，可以肯定页面是会乱码的，这个时候服务器的设置生效；</div><div class="line">&gt;   </div><div class="line">&gt; 2.页面指定charset为utf-8,  Apache配置defaultcharset  gbk. 页面文件是utf-8。</div><div class="line">&gt;   执行结果是页面乱码。这个就验证了当服务器的defaultcharset打开时，会忽略掉页面的编码设置；</div><div class="line">&gt;   </div><div class="line">&gt; 3.PHP header申明charset为utf8, Apache配置defaultcharst gbk,页面文件编码是utf8。</div><div class="line">&gt;   执行结果是页面正常。这个说明header中指定的信息的优先级要高于服务器及浏览器的设置；</div><div class="line">&gt;   </div><div class="line">&gt; 4.Apache设置DefaultCharset off。</div><div class="line">&gt;   页面显示正常。</div><div class="line"></div><div class="line">&gt; 最后，在Apache的手册中找到结论。</div><div class="line">&gt; </div><div class="line">&gt; AddDefaultCharset 指令</div><div class="line">&gt; 说明    当应答内容是text/plain或text/html时，在HTTP应答头中加入的默认字符集</div><div class="line">&gt; 语法    AddDefaultCharset On|Off|charset</div><div class="line">&gt; 默认值    AddDefaultCharset Off</div><div class="line">&gt; 作用域    server config, virtual host, directory, .htaccess</div><div class="line">&gt; 覆盖项    FileInfo</div><div class="line">&gt; 状态    核心(C)</div><div class="line">&gt; 模块    core</div><div class="line">&gt; </div><div class="line">&gt; 当且仅当应答内容是text/plain或text/html时，此指令将会在HTTP应答头中加入的默认字符集。理论上这将覆盖在文档体中通过&lt;meta&gt;标 签指定的字符集，但是实际的行为通常取决于用户浏览器的设置。AddDefaultCharset Off将会禁用此功能。 AddDefaultCharset On将启用Apache内部的默认字符集iso-8859-1 。您也可以指定使用在IANA注册过的字符集名字 中的另外一个charset 。比如说：</div><div class="line">&gt; </div><div class="line">&gt; AddDefaultCharset utf-8 </div><div class="line">&gt; </div><div class="line">&gt; 如果服务器和页面都没有指定编码，我想这时编码是由浏览器的默认编码来确定的，这时Firefox和IE就会发生区别，当然是指安装在中文系统里的浏览器，如果系统不同我想结果还会有差异。</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#### 2.当使用一些网页脚本引擎。如PHP,还可能需要修改相应的配置文件。</span></div><div class="line"></div><div class="line">以PHP为例，需要修改php.ini (Centos中位置在/etc/)</div><div class="line"></div><div class="line">```bash</div><div class="line">vim /etc/php.ini </div><div class="line">找到：  </div><div class="line">default_charset = <span class="string">"iso-8859-1"</span> 或者类似的将其注释掉，默认是没有打开的。  </div><div class="line">;default_charset=<span class="string">"iso-8859-1"</span></div><div class="line">``` </div><div class="line"></div><div class="line"><span class="comment">### 方法二、通过代码指定</span></div><div class="line"></div><div class="line">在中文网页请中依情况在标签中添加：</div><div class="line"></div><div class="line">```  </div><div class="line">GB2312:  </div><div class="line">&lt;META content=<span class="string">"text/html; charset=gb2312"</span> http-equiv=<span class="string">"Content-Type"</span>&gt;  </div><div class="line"></div><div class="line">BIG5:  </div><div class="line">&lt;META content=<span class="string">"text/html; charset=big5"</span> http-equiv=<span class="string">"Content-Type"</span>&gt;  </div><div class="line"></div><div class="line">UTF-8: (注意是UTF-8)  </div><div class="line">&lt;META content=<span class="string">"text/html; charset=utf-8"</span> http-equiv=<span class="string">"Content-Type"</span>&gt;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[15分钟掌握15个Docker要点]]></title>
      <url>http://www.hi-linux.com/posts/25523.html</url>
      <content type="html"><![CDATA[<p><img src="http://docker.u.qiniudn.com/docker-15-tips.jpg" alt="docker" title="docker" width="620" height="520"></p>
<h3 id="1-获取最近运行容器的id"><a href="#1-获取最近运行容器的id" class="headerlink" title="1. 获取最近运行容器的id"></a>1. 获取最近运行容器的id</h3><p>这是我们经常会用到的一个操作，按照官方示例，你可以这样做：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ ID=$(docker run <span class="_">-d</span> ubuntu <span class="built_in">echo</span> hello world)</div><div class="line">hello world</div><div class="line">$ docker commit <span class="variable">$ID</span> helloworld</div><div class="line">fd08a884dc79</div></pre></td></tr></table></figure>
<p>这种方式在编写脚本的时候很有用，比如你想在脚本中批量获取id，然后进一步操作。但是这种方式要求你必须给ID赋值，如果是直接敲命令，这样做就不太方便了。 这时，你可以换一种方式：<a id="more"></a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">alias</span> dl=’docker ps <span class="_">-l</span> -q’</div><div class="line">$ docker run ubuntu <span class="built_in">echo</span> hello world</div><div class="line">hello world</div><div class="line">$ dl</div><div class="line">1904cf045887</div><div class="line">$ docker commit `dl` helloworld</div><div class="line">fd08a884dc79</div></pre></td></tr></table></figure>
<p>docker ps -l -q命令将返回最近运行的容器的id，通过设置别名（alias），dl命令就是获取最近容器的id。这样，就无需再输入冗长的docker ps -l -q命令了。通过两个斜引号``，可以获取dl命令的值，也就是最近运行的容器的id。</p>
<h3 id="2-尽量在Dockerfile中指定要安装的软件，而不用Docker容器的shell直接安装软件"><a href="#2-尽量在Dockerfile中指定要安装的软件，而不用Docker容器的shell直接安装软件" class="headerlink" title="2.尽量在Dockerfile中指定要安装的软件，而不用Docker容器的shell直接安装软件"></a>2.尽量在Dockerfile中指定要安装的软件，而不用Docker容器的shell直接安装软件</h3><p>说实话，我有时候也喜欢在shell中安装软件，也许你也一样，喜欢在shell中把所有软件安装都搞定。但是，搞来搞去，最后还是发现，你还是需要在Doockerfile中指定安装文件。在shell中安装软件，你要这样做：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker run -i -t ubuntu bash <span class="comment">#登陆到docker容器</span></div><div class="line">root@db0c3967abf8:/<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>然后输入下面的命令来安装文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install postgresql</div></pre></td></tr></table></figure>
<p>然后再调用exit：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@db0c3978abf8:/<span class="comment"># exit</span></div></pre></td></tr></table></figure>
<p>退出docker容器，再给docker commit命令传递一个复杂的JSON字符串来提交新的镜像：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker commit -run=”&#123;“Cmd”:[“postgres”,”-too -many -opts”] &#125;” `dl` postgres</div></pre></td></tr></table></figure>
<p>太麻烦了，不是吗？还是在Dockerfile中指定安装文件吧，只要两个步骤：</p>
<blockquote>
<p>1.在一个小巧的Dockerfile中，指定当前操作的镜像为FROM命令的参数<br>2.然后在Dockerfile中指定一些docker的命令，如CMD, ENTERPOINT, VOLUME等等来指定安装的软件</p>
</blockquote>
<h3 id="3-超-超-超级用户"><a href="#3-超-超-超级用户" class="headerlink" title="3.超-超-超级用户"></a>3.超-超-超级用户</h3><p>你可能需要一直用超级用户来操作docker，就像早期示例里一直提示的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加docker用户组</span></div><div class="line">$ sudo groupadd docker</div><div class="line"><span class="comment"># 把自己加到docker用户组中</span></div><div class="line">$ sudo gpasswd <span class="_">-a</span> myusername docker</div><div class="line"><span class="comment"># 重启docker后台服务</span></div><div class="line">$ sudo service docker restart</div><div class="line"><span class="comment"># 注销，然后再登陆</span></div><div class="line">$ <span class="built_in">exit</span></div></pre></td></tr></table></figure>
<p>Wow！连续三个sudo！三次化身“超级用户”，真可谓是“超-超-超级用户”啊！别担心，设置完毕，以后你就再也不用打那么多sudo了！</p>
<h3 id="4-清理垃圾"><a href="#4-清理垃圾" class="headerlink" title="4. 清理垃圾"></a>4. 清理垃圾</h3><p>如果你想删除所有停止运行的容器，用这个命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker rm $(docker ps <span class="_">-a</span> -q)</div></pre></td></tr></table></figure>
<p>顺便说一句，docker ps命令很慢，不知道为啥这么慢，按理说Go语言是很快的啊。 docker ps -a -q命令列出所有容器的id，然后根据id删除容器。docker rm命令遇到正在运行的容器就会失效，所以这个命令完美的删除了所有没在运行的容器。</p>
<h3 id="5-docker-inspect输出结果的解析利器：jq"><a href="#5-docker-inspect输出结果的解析利器：jq" class="headerlink" title="5. docker inspect输出结果的解析利器：jq"></a>5. docker inspect输出结果的解析利器：jq</h3><p>要对docker inspect的输出结果进行过滤，一般情况下，用grep命令，你需要这样操作：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> inspect `dl` | grep IPAddress | cut <span class="_">-d</span> ‘“‘ <span class="_">-f</span> 4 172.17.0.52</div></pre></td></tr></table></figure>
<p>哦！看上去很复杂，用jq吧，专业解析docker inspect输出结果，具有更强的可读性，方便易用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> inspect `dl` | jq -r ‘.[0].NetworkSettings.IPAddress’ 172.17.0.52</div></pre></td></tr></table></figure>
<p>其中第一个’.’代表所有的结果。’[0]’代表数组的第一个元素。就像JavaScript访问一个JSON对象一样，简单方便。</p>
<h3 id="6-镜像有哪些环境变量？"><a href="#6-镜像有哪些环境变量？" class="headerlink" title="6.镜像有哪些环境变量？"></a>6.镜像有哪些环境变量？</h3><p>有时候，你需要知道自己创建的镜像有哪些环境变量。简单！只要这样：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ docker run ubuntu env</div><div class="line">输出结果如下：</div><div class="line"></div><div class="line">HOME=/</div><div class="line">PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin</div><div class="line">container=lxc</div><div class="line">HOSTNAME=5e1560b7f757</div></pre></td></tr></table></figure>
<p>调用env查看环境变量，对于后面要讲到的“链接”(-link)很有用，在连接两个容器时候需要用到这些环境变量，具体请看最后一个要点“链接”。</p>
<h3 id="7-RUN命令-vs-CMD命令"><a href="#7-RUN命令-vs-CMD命令" class="headerlink" title="7.RUN命令 vs CMD命令"></a>7.RUN命令 vs CMD命令</h3><p>Docker的新手用户比较容易混淆RUN和CMD这两个命令。<br>RUN命令在构建（Build）Docker时执行，这时CMD命令不执行。CMD命令在RUN命令执行时才执行。我们来理清关系，假设Dockerfile内容如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FROM thelanddownunder</div><div class="line">MAINTAINER crocdundee</div></pre></td></tr></table></figure>
<p>我们要向系统中安装一些软件，那么：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker build将会执行下面的命令：</span></div><div class="line">RUN apt-get update</div><div class="line">RUN apt-get install softwares</div><div class="line"></div><div class="line"><span class="comment"># dokcer run默认执行下面的命令：</span></div><div class="line">CMD [“softwares”]</div></pre></td></tr></table></figure>
<p>Build时执行RUN，RUN时执行CMD，也就是说，CMD才是镜像最终执行的命令。</p>
<h3 id="8-CMD命令-vs-ENTRYPOINT命令"><a href="#8-CMD命令-vs-ENTRYPOINT命令" class="headerlink" title="8.CMD命令 vs ENTRYPOINT命令"></a>8.CMD命令 vs ENTRYPOINT命令</h3><p>又是两条容易混淆的命令！具体细节我们就不说了，举个例子，假设一个容器的Dockerfile指定CMD命令，如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FROM ubuntu</div><div class="line">CMD [“<span class="built_in">echo</span>”]</div></pre></td></tr></table></figure>
<p>另一个容器的Dockerfile指定ENTRYPOINT命令，如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FROM ubuntu</div><div class="line">ENTRYPOINT [“<span class="built_in">echo</span>”]</div></pre></td></tr></table></figure>
<p>运行第一个容器：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run image1 <span class="built_in">echo</span> hello</div></pre></td></tr></table></figure>
<p>得到的结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hello</div></pre></td></tr></table></figure></p>
<p>运行第二个容器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run image2 <span class="built_in">echo</span> hello</div></pre></td></tr></table></figure></p>
<p>得到的结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> hello</div></pre></td></tr></table></figure></p>
<p>看到不同了吧？实际上，CMD命令是可覆盖的，docker run后面输入的命令与CMD指定的命令匹配时，会把CMD指定的命令替换成docker run中带的命令。而ENTRYPOINT指定的命令只是一个“入口”，docker run后面的内容会全部传给这个“入口”，而不是进行命令的替换，所以得到的结果就是“echo hello”。</p>
<h3 id="9-Docker容器有自己的IP地址吗？"><a href="#9-Docker容器有自己的IP地址吗？" class="headerlink" title="9.Docker容器有自己的IP地址吗？"></a>9.Docker容器有自己的IP地址吗？</h3><p>刚接触Docker的人或许会有这样的疑问：Docker容器有自己的IP地址吗？Docker容器是一个进程？还是一个虚拟机？嗯…也许两者兼具？哈哈，其实，Docker容器确实有自己的IP，就像一个具有IP的进程。只要分别在主机和Docker容器中执行查看ip的命令就知道了。</p>
<p>查看主机的ip：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ip -4 -o addr show eth0</div></pre></td></tr></table></figure></p>
<p>得到结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2: eth0 inet 162.243.139.222/24</div></pre></td></tr></table></figure></p>
<p>查看Docker容器的ip：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run ubuntu ip -r -o addr show eth0</div></pre></td></tr></table></figure></p>
<p>得到结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">149: eth0   inet 172.17.0.43/16</div></pre></td></tr></table></figure></p>
<p>两者并不相同，说明Docker容器有自己的ip。</p>
<h3 id="10-基于命令行的瘦客户端，使用UNIX-Socket和Docker后台服务的REST接口进行通信"><a href="#10-基于命令行的瘦客户端，使用UNIX-Socket和Docker后台服务的REST接口进行通信" class="headerlink" title="10.基于命令行的瘦客户端，使用UNIX Socket和Docker后台服务的REST接口进行通信"></a>10.基于命令行的瘦客户端，使用UNIX Socket和Docker后台服务的REST接口进行通信</h3><p>Docker默认是用UNIX socket通信的，一直到大概0.5、0.6的版本还是用端口来通信，但现在则改成UNIX socket，所以从外部无法控制Docker容器的内部细节。下面我们来搞点有趣的事情，从主机链接到docker的UNIX socket：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 像HTTP客户端一样连接到UNIX socket</span></div><div class="line">$ nc -U / /var/run/docker.sock</div></pre></td></tr></table></figure>
<p>连接成功后，输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET /images/json HTTP/1.1</div></pre></td></tr></table></figure></p>
<p>输入后连敲两个回车，第二个回车表示输入结束。然后，得到的结果应该是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Type: application/json</div><div class="line">Date: Tue, 05 Nov 2013 23:18:09 GMT</div><div class="line">Transfer-Encoding: chunked</div><div class="line">16aa</div><div class="line">[&#123;“Repository”:”postgres”,”Tag”:”......</div></pre></td></tr></table></figure></p>
<p>有一天，我不小心把提交的名称打错了，名字开头打成”-xxx”（我把命令和选项的顺序搞混了），所以当我删除的时候出了问题，docker rm -xxx，会把-xxx当成参数而不是镜像的名称。所以我只得通过socket直接连到容器来调用REST Server把错误的东西删掉。</p>
<h3 id="11-把镜像的依赖关系绘制成图"><a href="#11-把镜像的依赖关系绘制成图" class="headerlink" title="11.把镜像的依赖关系绘制成图"></a>11.把镜像的依赖关系绘制成图</h3><p>docker images命令有一个很拉风的选项：-viz，可以把镜像的依赖关系绘制成图并通过管道符号保存到图片文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成一个依赖关系的图表</span></div><div class="line">$ docker images -viz | dot -T png -o docker.png</div></pre></td></tr></table></figure>
<p>这样，主机的当前路径下就生成了一张png图，然后，用python开启一个微型的HTTP服务器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -m SimpleHTTPServer</div></pre></td></tr></table></figure></p>
<p>然后在别的机器上用浏览器打开：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://machinename:8000/docker.png</div></pre></td></tr></table></figure></p>
<p>OK，依赖关系一目了然！</p>
<blockquote>
<p>(译者注：要使用dot命令，主机要安装graphviz包。另外，如果主机ip没有绑定域名，machinename换成主机的ip即可。)</p>
</blockquote>
<h3 id="12-Docker把东西都存到哪里去了？"><a href="#12-Docker把东西都存到哪里去了？" class="headerlink" title="12.Docker把东西都存到哪里去了？"></a>12.Docker把东西都存到哪里去了？</h3><p>Docker实际上把所有东西都放到/var/lib/docker路径下了。切换成super用户，到/var/lib/docker下看看，你能学到很多有趣的东西。执行下面的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo su</div><div class="line"><span class="comment"># cd /var/lib/docker</span></div><div class="line"><span class="comment"># ls -F</span></div><div class="line">containers/ graph/ repositories volumes/</div></pre></td></tr></table></figure></p>
<p>可以看到不少目录，containers目录当然就是存放容器（container）了，graph目录存放镜像，文件层（file system layer）存放在graph/imageid/layer路径下，这样你就可以看看文件层里到底有哪些东西，利用这种层级结构可以清楚的看到文件层是如何一层一层叠加起来的。</p>
<h3 id="13-Docker源代码：Go-Go-Go-Golang"><a href="#13-Docker源代码：Go-Go-Go-Golang" class="headerlink" title="13.Docker源代码：Go, Go, Go, Golang!"></a>13.Docker源代码：Go, Go, Go, Golang!</h3><p>Docker的源代码全部是用Go语言写的。Go是一门非常酷的语言。其实，不只是Docker，很多优秀的软件都是用Go写的。对我来说，Docker源文件中，有4个是我非常喜欢阅读的：</p>
<blockquote>
<p>commands.go</p>
<p>docker的命令行接口，是对REST API的一个轻量级封装。Docker团队不希望在命令中出现逻辑，因此commands.go只是向REST API发送指令，确保其较小的颗粒性。</p>
<p>api.go</p>
<p>REST API的路由（接受commands.go中的请求，转发到server.go）</p>
<p>server.go</p>
<p>大部分REST API的实现</p>
<p>buildfile.go</p>
<p>Dockerfile的解析器</p>
</blockquote>
<p>有的伙计惊叹”Wow!Docker是怎么实现的？！我无法理解！”没关系，Docker是开源软件，去看它的源代码就可以了。如果你不太清楚Dockerfile中的命令是怎么回事，直接去看buildfile.go就明白了。</p>
<h3 id="14-运行几个Docker后台程序，再退出容器，会发生什么？"><a href="#14-运行几个Docker后台程序，再退出容器，会发生什么？" class="headerlink" title="14.运行几个Docker后台程序，再退出容器，会发生什么？"></a>14.运行几个Docker后台程序，再退出容器，会发生什么？</h3><p>OK，倒数第二个要点。如果在Docker中运行几个后台程序，再退出Docker容器，会发生什么？答案是：不要这么做！因为这样做后台程序就全丢了。</p>
<p>Dockerfile中用RUN命令去开启一个后台程序，如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RUN pg_ctl start</div></pre></td></tr></table></figure>
<p>这样的话，RUN命令开启的后台程序就会丢失。调用容器的bash连到容器的shell：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run -i -t postgresimage bash</div></pre></td></tr></table></figure></p>
<p>然后调用 ps aux查看进程，你会发现postgres的进程并没有跑起来。 RUN命令会影响文件系统。因此，不要再Dockerfile中用启动后台程序，要把后台程序启动成前台进程。或者，像一些高手提议的那样，写一个启动脚本，在脚本中启动这些后台程序或进程。</p>
<h3 id="15-容器之间进行友好沟通：链接"><a href="#15-容器之间进行友好沟通：链接" class="headerlink" title="15.容器之间进行友好沟通：链接"></a>15.容器之间进行友好沟通：链接</h3><p>这是最拉风的功能！我把它留到最后压轴！这是0.6.5中最重要的新功能，我们前面已经提过两次了。运行一个容器，给它一个名称，在下面的例子中，我们通过-name参数给容器指定名称”loldb”:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run <span class="_">-d</span> -name loldb loldbimage</div></pre></td></tr></table></figure></p>
<p>再运行另一个容器，加上-link参数来连接到第一个容器（别名为loldb），并给第二个容器也指定一个别名（这里用的是cheez）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run -link /loldb:cheez otherimage env</div></pre></td></tr></table></figure></p>
<p>顺便得到cheez的环境变量：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CHEEZ_PORT=tcp://172.17.0.8:6379</div><div class="line">CHEEZ_PORT_1337_TCP=tcp://172.17.0.8.6379</div><div class="line">CHEEZ_PORT_1337_TCP_ADDR=tcp://172.17.0.12</div><div class="line">CHEEZ_PORT_1337_TCP_PORT=6379</div><div class="line">CHEEZ_PORT_1337_TCP_PROTO=tcp</div></pre></td></tr></table></figure></p>
<p>这样，我们就在两个容器间建立起一个网络通道（bridge），基于此，我们可以建立一个类似rails的程序：一个容器可以访问数据库容器而不对外暴露其他接口。非常酷！数据库容器只需要知道第一个容器的别名（在本例中为cheez）和要打开的端口号。所以数据库容器也可以env命令来查看这个端口是否打开。</p>
<p>转载自:<a href="http://www.dockboard.org/docker-15-tips/" target="_blank" rel="external">http://www.dockboard.org/docker-15-tips/</a></p>
]]></content>
    </entry>
    
  
  
</search>
