{"title":"如何在 Kubernetes 集群中集成 Kata","id":"posts/10148.html","date_published":"10/20/2020","summary":"1. Kata 解决什么问题\n安全性和隔离性是 Kata Container 显著区别于 Docker Container 的地方。\nKata Container 来源于 Intel Clear Containers 和 Hyper runV 项目的合并。Intel Clear Containers 借助 Intel VT-x 技术使用轻量级虚拟机提供容器，解决安全性问题，同时性能优异。而 Hyper runV 对标的是 Docker 的 runc ，提供容器的运行时，遵循 OCI runtime 规范。\n2. Kubernetes 中的 Kata\n2.1 OCI 和 CRI-O\nOCI 标准是为了避免容器标准被 Docker 独家挟持而出现的。\nCRI 标准将 Kubelet 与运行时解耦，实现 CRI 标准的容器管理程序都可以用于 Pod 创建。\nCRI-O 插件同时实现了 CRI 和 OCI 标准，可以用于替换 Containerd 直接与 runV 等 OCI runtime 对接。\n如下图：\n\n2.2 Kata 与 Containerd\n为了兼容 OCI 标准，Docker 将管理运行时的功能从 Docker Daemon 中剥离出来，形成了 Containerd 。在运行容器时，可以不用 Docker 的 runc ，而替换为 kata-runtime 。\n\n2.3 Kata 与 Kuberntes 的集成\n如下图，Kata 主要替换的是 OCI runtime 层，其他部分与基于 Docker runc 的 Kubernetes 并无差异。同时，基于 kata-runtime 的 Pod 和基于 runc 的 Pod 可以共存于集群之中。\n\n目前的主要问题是，Kata 不支持 host 网络。而 Kubernetes 中，etcd、nodelocaldns、kube-apiserver、kube-scheduler、metrics-server、node-exporter、kube-proxy、calico、kube-controller-manager 等，也就是 Static Pod 和 Daemonset 都会使用 host 网络。所以在安装部署时，依然使用 runc 作为默认的运行时，而将 kata-runtime 作为可选的运行时给特定的负载使用。","url":"https://www.hi-linux.com/posts/10148.html","tags":["Linux","Docker","Kubernetes"],"categories":["Kubernetes"]}